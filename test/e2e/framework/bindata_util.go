/*
Copyright 2016 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package framework

import (
	"os"
	"path/filepath"

	"k8s.io/kubernetes/test/e2e/generated"
)

const (
	// Make our own subdirectory for just-in-time generated data files.
	GENERATED_ASSETS = "TEST_E2E_GENERATED_ASSETS_FOLDER"
)

// This file depends on an Asset() function being available which is generated by go-bindata.
//
// To generate these assets, you essentially need to do the following steps (should automate eventually).
//
// 	go get -u github.com/jteeuwen/go-bindata/...
// 	go-bindata -pkg generated -ignore .jpg -ignore .png -ignore .md ./examples/* ./docs/user-guide/*
// 	cp bindata.go test/e2e/generated/
//

// GenerateAssetsInRepoRoot Writes the static files to 'root'/
// For example, if root = "/tmp", then we get the repository files from kube into
// /tmp/TEST_E2E_GENERATED_ASSETS_FOLDER/.
// i.e. we get files such as ...
// /tmp/TEST_E2E_GENERATED_ASSETS_FOLDER/docs/user-guide/update-demo/kitten-rc.yaml
func GenerateAssetsInsideOf(root string) {
	Logf("Generating assets %v", generated.AssetNames())
	for _, f := range generated.AssetNames() {
		Logf("Generating %v into %v", f, root)
		asset, err := generated.Asset(f)
		if err != nil {
			panic(err)
		}
		err = os.MkdirAll(filepath.Dir(root+"/"+GENERATED_ASSETS+"/"+f), 0777)
		if err != nil {
			panic(err)
		}
		f, err := os.Create(root + "/" + GENERATED_ASSETS + "/" + f)

		if err != nil {
			panic(err)
		}
		_, err = f.Write(asset)
		if err != nil {
			panic(err)
		}
	}
}
