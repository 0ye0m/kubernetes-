/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen with arguments: --input-dirs=[k8s.io/kubernetes/apifederator/pkg/apis/apifederation,k8s.io/kubernetes/apifederator/pkg/apis/apifederation/v1alpha1] --output-package=k8s.io/kubernetes/apifederator/pkg/client/listers

package v1alpha1

import (
	apifederation "k8s.io/kubernetes/apifederator/pkg/apis/apifederation"
	v1alpha1 "k8s.io/kubernetes/apifederator/pkg/apis/apifederation/v1alpha1"
	"k8s.io/kubernetes/pkg/api/errors"
	v1 "k8s.io/kubernetes/pkg/api/v1"
	"k8s.io/kubernetes/pkg/client/cache"
	"k8s.io/kubernetes/pkg/labels"
)

// APIServerLister helps list APIServers.
type APIServerLister interface {
	// List lists all APIServers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.APIServer, err error)
	// Get retrieves the APIServer from the index for a given name.
	Get(name string) (*v1alpha1.APIServer, error)
	APIServerListerExpansion
}

// aPIServerLister implements the APIServerLister interface.
type aPIServerLister struct {
	indexer cache.Indexer
}

// NewAPIServerLister returns a new APIServerLister.
func NewAPIServerLister(indexer cache.Indexer) APIServerLister {
	return &aPIServerLister{indexer: indexer}
}

// List lists all APIServers in the indexer.
func (s *aPIServerLister) List(selector labels.Selector) (ret []*v1alpha1.APIServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.APIServer))
	})
	return ret, err
}

// Get retrieves the APIServer from the index for a given name.
func (s *aPIServerLister) Get(name string) (*v1alpha1.APIServer, error) {
	key := &v1alpha1.APIServer{ObjectMeta: v1.ObjectMeta{Name: name}}
	obj, exists, err := s.indexer.Get(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(apifederation.Resource("apiserver"), name)
	}
	return obj.(*v1alpha1.APIServer), nil
}
