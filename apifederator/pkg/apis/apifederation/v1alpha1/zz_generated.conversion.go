// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1alpha1

import (
	apifederation "k8s.io/kubernetes/apifederator/pkg/apis/apifederation"
	conversion "k8s.io/kubernetes/pkg/conversion"
	runtime "k8s.io/kubernetes/pkg/runtime"
	unsafe "unsafe"
)

func init() {
	SchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedConversionFuncs(
		Convert_v1alpha1_APIServer_To_apifederation_APIServer,
		Convert_apifederation_APIServer_To_v1alpha1_APIServer,
		Convert_v1alpha1_APIServerList_To_apifederation_APIServerList,
		Convert_apifederation_APIServerList_To_v1alpha1_APIServerList,
		Convert_v1alpha1_APIServerSpec_To_apifederation_APIServerSpec,
		Convert_apifederation_APIServerSpec_To_v1alpha1_APIServerSpec,
		Convert_v1alpha1_APIServerStatus_To_apifederation_APIServerStatus,
		Convert_apifederation_APIServerStatus_To_v1alpha1_APIServerStatus,
	)
}

func autoConvert_v1alpha1_APIServer_To_apifederation_APIServer(in *APIServer, out *apifederation.APIServer, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1alpha1_APIServerSpec_To_apifederation_APIServerSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_APIServerStatus_To_apifederation_APIServerStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1alpha1_APIServer_To_apifederation_APIServer(in *APIServer, out *apifederation.APIServer, s conversion.Scope) error {
	return autoConvert_v1alpha1_APIServer_To_apifederation_APIServer(in, out, s)
}

func autoConvert_apifederation_APIServer_To_v1alpha1_APIServer(in *apifederation.APIServer, out *APIServer, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_apifederation_APIServerSpec_To_v1alpha1_APIServerSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_apifederation_APIServerStatus_To_v1alpha1_APIServerStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_apifederation_APIServer_To_v1alpha1_APIServer(in *apifederation.APIServer, out *APIServer, s conversion.Scope) error {
	return autoConvert_apifederation_APIServer_To_v1alpha1_APIServer(in, out, s)
}

func autoConvert_v1alpha1_APIServerList_To_apifederation_APIServerList(in *APIServerList, out *apifederation.APIServerList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]apifederation.APIServer)(unsafe.Pointer(&in.Items))
	return nil
}

func Convert_v1alpha1_APIServerList_To_apifederation_APIServerList(in *APIServerList, out *apifederation.APIServerList, s conversion.Scope) error {
	return autoConvert_v1alpha1_APIServerList_To_apifederation_APIServerList(in, out, s)
}

func autoConvert_apifederation_APIServerList_To_v1alpha1_APIServerList(in *apifederation.APIServerList, out *APIServerList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]APIServer)(unsafe.Pointer(&in.Items))
	return nil
}

func Convert_apifederation_APIServerList_To_v1alpha1_APIServerList(in *apifederation.APIServerList, out *APIServerList, s conversion.Scope) error {
	return autoConvert_apifederation_APIServerList_To_v1alpha1_APIServerList(in, out, s)
}

func autoConvert_v1alpha1_APIServerSpec_To_apifederation_APIServerSpec(in *APIServerSpec, out *apifederation.APIServerSpec, s conversion.Scope) error {
	out.InternalHost = in.InternalHost
	out.Group = in.Group
	out.Version = in.Version
	out.InsecureSkipTLSVerify = in.InsecureSkipTLSVerify
	out.CABundle = *(*[]byte)(unsafe.Pointer(&in.CABundle))
	out.Priority = in.Priority
	return nil
}

func Convert_v1alpha1_APIServerSpec_To_apifederation_APIServerSpec(in *APIServerSpec, out *apifederation.APIServerSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_APIServerSpec_To_apifederation_APIServerSpec(in, out, s)
}

func autoConvert_apifederation_APIServerSpec_To_v1alpha1_APIServerSpec(in *apifederation.APIServerSpec, out *APIServerSpec, s conversion.Scope) error {
	out.InternalHost = in.InternalHost
	out.Group = in.Group
	out.Version = in.Version
	out.InsecureSkipTLSVerify = in.InsecureSkipTLSVerify
	out.CABundle = *(*[]byte)(unsafe.Pointer(&in.CABundle))
	out.Priority = in.Priority
	return nil
}

func Convert_apifederation_APIServerSpec_To_v1alpha1_APIServerSpec(in *apifederation.APIServerSpec, out *APIServerSpec, s conversion.Scope) error {
	return autoConvert_apifederation_APIServerSpec_To_v1alpha1_APIServerSpec(in, out, s)
}

func autoConvert_v1alpha1_APIServerStatus_To_apifederation_APIServerStatus(in *APIServerStatus, out *apifederation.APIServerStatus, s conversion.Scope) error {
	return nil
}

func Convert_v1alpha1_APIServerStatus_To_apifederation_APIServerStatus(in *APIServerStatus, out *apifederation.APIServerStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_APIServerStatus_To_apifederation_APIServerStatus(in, out, s)
}

func autoConvert_apifederation_APIServerStatus_To_v1alpha1_APIServerStatus(in *apifederation.APIServerStatus, out *APIServerStatus, s conversion.Scope) error {
	return nil
}

func Convert_apifederation_APIServerStatus_To_v1alpha1_APIServerStatus(in *apifederation.APIServerStatus, out *APIServerStatus, s conversion.Scope) error {
	return autoConvert_apifederation_APIServerStatus_To_v1alpha1_APIServerStatus(in, out, s)
}
