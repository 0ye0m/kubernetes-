/*
Coipyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package generators

import (
	"bytes"
	"fmt"
	"io"
	"path/filepath"
	"reflect"
	"strings"

	"k8s.io/gengo/args"
	"k8s.io/gengo/generator"
	"k8s.io/gengo/namer"
	"k8s.io/gengo/types"
	"k8s.io/kubernetes/pkg/util/sets"

	"github.com/golang/glog"
)

// NameSystems returns the name system used by the generators in this package.
func NameSystems() namer.NameSystems {
	return namer.NameSystems{
		"public": namer.NewPublicNamer(0),
		"raw":    namer.NewRawNamer("", nil),
	}
}

// DefaultNameSystem returns the default name system for ordering the types to be
// processed by the generators in this package.
func DefaultNameSystem() string {
	return "public"
}

func Packages(context *generator.Context, arguments *args.GeneratorArgs) generator.Packages {
	boilerplate, err := arguments.LoadGoBoilerplate()
	if err != nil {
		glog.Fatalf("Failed loading boilerplate: %v", err)
	}

	inputs := sets.NewString(context.Inputs...)
	packages := generator.Packages{}
	header := append([]byte(fmt.Sprintf("// +build !%s\n\n", arguments.GeneratedBuildTag)), boilerplate...)
	header = append(header, []byte("\n// This file was autogenerated by unstructured-conversion-gen. Do not edit it manually!\n\n")...)

	// We are generating conversions only for packages that are explicitly
	// passed as InputDir.
	for i := range inputs {
		glog.V(5).Infof("considering pkg %q", i)
		pkg := context.Universe[i]
		if pkg == nil {
			// If the input had no Go files, for example.
			continue
		}
		packages = append(packages,
			&generator.DefaultPackage{
				PackageName: filepath.Base(pkg.Path),
				PackagePath: pkg.Path,
				HeaderText:  header,
				GeneratorFunc: func(c *generator.Context) (generators []generator.Generator) {
					return []generator.Generator{
						NewGenUnstructuredConversion(arguments.OutputFileBaseName, pkg.Path),
					}
				},
				FilterFunc: func(c *generator.Context, t *types.Type) bool {
					return t.Name.Package == pkg.Path
				},
		})
	}

	return packages
}

func unwrapAlias(in *types.Type) *types.Type {
	for in.Kind == types.Alias {
		in = in.Underlying
	}
	return in
}

func nameTag(member types.Member) string {
	tags := reflect.StructTag(member.Tags)
	jsonTag := tags.Get("json")
	if len(jsonTag) == 0 {
		return namer.IL(member.Name)
	}
	parts := strings.Split(jsonTag, ",")
	return parts[0]
}

func inlined(member types.Member) bool {
	return nameTag(member) == ""
}

type genUnstructuredConversion struct {
	generator.DefaultGen
	targetPackage string
	initContext   *generator.Context
	imports       namer.ImportTracker
	types         []*types.Type
}

func NewGenUnstructuredConversion(sanitizedName, targetPackage string) generator.Generator {
	return &genUnstructuredConversion{
		DefaultGen: generator.DefaultGen{
			OptionalName: sanitizedName,
		},
		targetPackage: targetPackage,
		imports:       generator.NewImportTracker(),
		types:         []*types.Type{},
	}
}

func (g *genUnstructuredConversion) Namers(c *generator.Context) namer.NameSystems {
	return namer.NameSystems{
		"raw":    namer.NewRawNamer(g.targetPackage, g.imports),
		"public": namer.NewPublicNamer(0),
	}
}

func (g *genUnstructuredConversion) Filter(c *generator.Context, t *types.Type) bool {
	// TODO: Consider generating functions for other kinds too.
	if t.Kind != types.Struct {
		return false
	}
	return true
}

func (g *genUnstructuredConversion) isOtherPackage(pkg string) bool {
	if pkg == g.targetPackage {
		return false
	}
	if strings.HasSuffix(pkg, `"`+g.targetPackage+`"`) {
		return false
	}
	return true
}

func (g *genUnstructuredConversion) Imports(c *generator.Context) (imports []string) {
	var importLines []string
	for _, singleImport := range g.imports.ImportLines() {
		if g.isOtherPackage(singleImport) {
			importLines = append(importLines, singleImport)
		}
	}
	return importLines
}

func (g *genUnstructuredConversion) Init(c *generator.Context, w io.Writer) error {
	g.initContext = c
	// TODO: Implement this.
	return nil
}

func (g *genUnstructuredConversion) GenerateType(c *generator.Context, t *types.Type, w io.Writer) error {
	glog.V(5).Infof("generating for type %v", t)
	sw := generator.NewSnippetWriter(w, c, "$", "$")
	g.generateConversions(t, sw)
	return sw.Error()
}

const nameTmpl = "ConvertToUnstructured_$.type|public$"

func (g *genUnstructuredConversion) generateConversions(inType *types.Type, sw *generator.SnippetWriter) {
	args := generator.Args{}.With("type", inType)

	sw.Do("func "+nameTmpl+"(in *$.type|raw$, out map[string]interface{}) error {\n", args)
	g.generateToUnstructured(inType, sw)
	sw.Do("return nil\n", nil)
	sw.Do("}\n\n", nil)
}

func (g *genUnstructuredConversion) generateToUnstructured(inType *types.Type, sw *generator.SnippetWriter) {
	glog.V(5).Infof("generating %v -> unstructured", inType)
	var f func(*types.Type, *generator.SnippetWriter)

	switch inType.Kind {
	case types.Builtin:
		f = g.builtinToUnstructured
	case types.Map:
		f = g.mapToUnstructured
	case types.Slice:
		f = g.sliceToUnstructured
	case types.Pointer:
		f = g.pointerToUnstructured
	case types.Struct:
		f = g.structToUnstructured
	case types.Alias:
		f = g.aliasToUnstructured
	default:
		f = g.unknownToUnstructured
	}

	f(inType, sw)
}

func (g *genUnstructuredConversion) convertRecursively(inType *types.Type, in, out string, sw *generator.SnippetWriter) {
	args := generator.Args{}.With("type", inType)
	// TODO: Fix for types from outside (whatever that means).
	sw.Do("if err := "+nameTmpl+"("+in+", "+out+"); err != nil {\n", args)
	sw.Do("return err\n", nil)
	sw.Do("}\n", nil)
}

func (g *genUnstructuredConversion) createObjectFor(inType *types.Type, sw *generator.SnippetWriter) {
	unwrapped := unwrapAlias(inType)
	switch unwrapped.Kind {
	case types.Builtin:
		sw.Do("var result $.|raw$\n", inType)
	case types.Map, types.Struct:
		sw.Do("result := make(map[string]interface{})\n", nil)
	case types.Slice:
		sw.Do("result := make([]interface{}, 0)\n", nil)
	default:
		sw.Do("// FIXME: kind not yet supported in creation\n", nil)
	}
}

func (g *genUnstructuredConversion) builtinToUnstructured(inType *types.Type, sw *generator.SnippetWriter) {
	// TODO: Can we assign to interface?
	sw.Do("out = *in\n", nil)
}

func (g *genUnstructuredConversion) mapToUnstructured(inType *types.Type, sw *generator.SnippetWriter) {
	if !inType.Key.IsPrimitive() {
		sw.Do("// FIXME: Non-primitive keys are not supported: $.|raw$\n", inType.Key)
		return
	}
	if inType.Elem.IsPrimitive() {
		sw.Do("for key, val := range *in {\n", nil)
		sw.Do("out[key] = val\n", nil)
		sw.Do("}\n", nil)
	} else {
		sw.Do("for key := range *in {\n", nil)
		g.createObjectFor(inType.Elem, sw)
		g.convertRecursively(inType.Elem, "&(*in)[key]", "result", sw)
		sw.Do("}\n", nil)
	}
}

func (g *genUnstructuredConversion) sliceToUnstructured(inType *types.Type, sw *generator.SnippetWriter) {
	sw.Do("for i := range *in {\n", nil)
	if unwrapAlias(inType.Elem).IsPrimitive() {
		sw.Do("out = append(out, (*in)[i])\n", nil)
	} else {
		g.createObjectFor(inType.Elem, sw)
		g.convertRecursively(inType.Elem, "&(*in)[i]", "result", sw)
		sw.Do("out = append(out, result)\n", nil)
	}
	sw.Do("}\n", nil)
}

func (g *genUnstructuredConversion) pointerToUnstructured(inType *types.Type, sw *generator.SnippetWriter) {
	sw.Do("// FIXME: Implement pointer.\n", nil)
}

func (g *genUnstructuredConversion) structToUnstructured(inType *types.Type, sw *generator.SnippetWriter) {
	for _, inMember := range inType.Members {
		inMemberType := unwrapAlias(inMember.Type)
		args := generator.Args{}.
			With("name", inMember.Name).
			With("type", inMemberType).
			With("field", nameTag(inMember))

		switch inMemberType.Kind {
		case types.Builtin:
			sw.Do("out[\"$.field$\"] = in.$.name$\n", args)
		case types.Map:
			sw.Do("if in.$.name$ != nil {\n", args)
			if inMemberType.Key.IsPrimitive() && inMemberType.Elem.IsPrimitive() {
				// Instead of reallocating memory, simply copy map.
				sw.Do("out[\"$.field$\"] = in.$.name$\n", args)
			} else {
				sw.Do("result := make([]interface{}, len(in.$.name$))\n", args)
				sw.Do("{\n", nil)
				g.generateToUnstructured(inMemberType, sw)
				sw.Do("}\n", nil)
				sw.Do("out[\"$.field$\"] = result\n", args)
			}
			sw.Do("}\n", nil)
		case types.Slice:
			sw.Do("if in.$.name$ != nil {\n", args)
			sw.Do("result := make([]interface{}, len(in.$.name$))\n", args)
			sw.Do("{\n", nil)
			sw.Do("in, out := &in.$.name$, result\n", args)
			g.generateToUnstructured(inMemberType, sw)
			sw.Do("}\n", nil)
			sw.Do("out[\"$.field$\"] = result\n", args)
			sw.Do("}\n", nil)
		case types.Pointer:
			sw.Do("if in.$.name$ != nil {\n", args)
			if inMemberType.IsPrimitive() {
				// Instead of reallocating memory, simply copy pointer.
				sw.Do("out[\"$.field$\"] = in.$.name$\n", args)
			} else {
				g.createObjectFor(inMemberType.Elem, sw)
				sw.Do("{\n", nil)
				sw.Do("in, out := in.$.name$, result\n", args)
				g.generateToUnstructured(inMemberType.Elem, sw)
				sw.Do("}\n", nil)
				sw.Do("out[\"$.field$\"] = &result\n", args)
			}
			sw.Do("}\n", nil)
		case types.Struct:
			isInlined := inlined(inMember)
			out := "out"
			if !isInlined {
				sw.Do("{\n", nil)
				sw.Do("result := make(map[string]interface{})\n", nil)
				out = "result"
			}
			{
				// Convert recursively.
				buffer := &bytes.Buffer{}
				nsw := generator.NewSnippetWriter(buffer, g.initContext, "$", "$")
				nsw.Do("&in.$.name$", args)
				g.convertRecursively(inMemberType, buffer.String(), out, sw)
			}
			if !isInlined {
				sw.Do("out[\"$.field$\"] = result\n", args)
				sw.Do("}\n", nil)
			}
		default:
			sw.Do("FIXME: Implement this.\n", nil)
		}
	}
}

func (g *genUnstructuredConversion) aliasToUnstructured(inType *types.Type, sw *generator.SnippetWriter) {
	g.generateToUnstructured(unwrapAlias(inType), sw)
}

func (g *genUnstructuredConversion) unknownToUnstructured(inType *types.Type, sw *generator.SnippetWriter) {
	sw.Do("// FIXME: Type $.|raw$ is unsupported.\n", inType)
}
