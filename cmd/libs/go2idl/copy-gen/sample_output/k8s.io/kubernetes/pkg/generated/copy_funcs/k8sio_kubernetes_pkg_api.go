/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by the command:
// $ ./copy-gen -o sample_output
// Do not edit it manually!

package copy_funcs

import (
	api "k8s.io/kubernetes/pkg/api"
)

func copy_KubernetesPkgApiAWSElasticBlockStoreVolumeSource(in, out *api.AWSElasticBlockStoreVolumeSource) error {
	*out = *in

}

func copy_KubernetesPkgApiCephFSVolumeSource(in, out *api.CephFSVolumeSource) error {
	*out = *in
	{
		in, out := &(*in).Monitors, &(*out).Monitors
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	{
		in, out := &(*in).SecretRef, &(*out).SecretRef
		*out = new(api.LocalObjectReference)
		{
			in, out := *in, *out
			*out = *in
		}
	}

}

func copy_KubernetesPkgApiCinderVolumeSource(in, out *api.CinderVolumeSource) error {
	*out = *in

}

func copy_KubernetesPkgApiContainerStateWaiting(in, out *api.ContainerStateWaiting) error {
	*out = *in

}

func copy_KubernetesPkgApiDaemonEndpoint(in, out *api.DaemonEndpoint) error {
	*out = *in

}

func copy_KubernetesPkgApiDeleteOptions(in, out *api.DeleteOptions) error {
	*out = *in
	{
		in, out := &(*in).TypeMeta, &(*out).TypeMeta
		*out = *in
	}
	{
		in, out := &(*in).GracePeriodSeconds, &(*out).GracePeriodSeconds
		*out = new(int64)
		{
			in, out := *in, *out
			*in = *out
		}
	}

}

func copy_KubernetesPkgApiDownwardAPIVolumeFile(in, out *api.DownwardAPIVolumeFile) error {
	*out = *in
	{
		in, out := &(*in).FieldRef, &(*out).FieldRef
		*out = *in
	}

}

func copy_KubernetesPkgApiDownwardAPIVolumeSource(in, out *api.DownwardAPIVolumeSource) error {
	*out = *in
	{
		in, out := &(*in).Items, &(*out).Items
		*out = make([]api.DownwardAPIVolumeFile, len(*in))
		for i := range *in {
			{
				in, out := &(*in[i]), &(*out[i])
				*out = *in
				{
					in, out := &(*in).FieldRef, &(*out).FieldRef
					*out = *in
				}
			}
		}
	}

}

func copy_KubernetesPkgApiEnvVar(in, out *api.EnvVar) error {
	*out = *in
	{
		in, out := &(*in).ValueFrom, &(*out).ValueFrom
		*out = new(api.EnvVarSource)
		{
			in, out := *in, *out
			*out = *in
			{
				in, out := &(*in).FieldRef, &(*out).FieldRef
				*out = new(api.ObjectFieldSelector)
				{
					in, out := *in, *out
					*out = *in
				}
			}
		}
	}

}

func copy_KubernetesPkgApiEnvVarSource(in, out *api.EnvVarSource) error {
	*out = *in
	{
		in, out := &(*in).FieldRef, &(*out).FieldRef
		*out = new(api.ObjectFieldSelector)
		{
			in, out := *in, *out
			*out = *in
		}
	}

}

func copy_KubernetesPkgApiEventSource(in, out *api.EventSource) error {
	*out = *in

}

func copy_KubernetesPkgApiExecAction(in, out *api.ExecAction) error {
	*out = *in
	{
		in, out := &(*in).Command, &(*out).Command
		*out = make([]string, len(*in))
		copy(*out, *in)
	}

}

func copy_KubernetesPkgApiFCVolumeSource(in, out *api.FCVolumeSource) error {
	*out = *in
	{
		in, out := &(*in).TargetWWNs, &(*out).TargetWWNs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	{
		in, out := &(*in).Lun, &(*out).Lun
		*out = new(int)
		{
			in, out := *in, *out
			*in = *out
		}
	}

}

func copy_KubernetesPkgApiFlockerVolumeSource(in, out *api.FlockerVolumeSource) error {
	*out = *in

}

func copy_KubernetesPkgApiGCEPersistentDiskVolumeSource(in, out *api.GCEPersistentDiskVolumeSource) error {
	*out = *in

}

func copy_KubernetesPkgApiGitRepoVolumeSource(in, out *api.GitRepoVolumeSource) error {
	*out = *in

}

func copy_KubernetesPkgApiGlusterfsVolumeSource(in, out *api.GlusterfsVolumeSource) error {
	*out = *in

}

func copy_KubernetesPkgApiHostPathVolumeSource(in, out *api.HostPathVolumeSource) error {
	*out = *in

}

func copy_KubernetesPkgApiISCSIVolumeSource(in, out *api.ISCSIVolumeSource) error {
	*out = *in

}

func copy_KubernetesPkgApiLoadBalancerIngress(in, out *api.LoadBalancerIngress) error {
	*out = *in

}

func copy_KubernetesPkgApiLoadBalancerStatus(in, out *api.LoadBalancerStatus) error {
	*out = *in
	{
		in, out := &(*in).Ingress, &(*out).Ingress
		*out = make([]api.LoadBalancerIngress, len(*in))
		for i := range *in {
			{
				in, out := &(*in[i]), &(*out[i])
				*out = *in
			}
		}
	}

}

func copy_KubernetesPkgApiLocalObjectReference(in, out *api.LocalObjectReference) error {
	*out = *in

}

func copy_KubernetesPkgApiNFSVolumeSource(in, out *api.NFSVolumeSource) error {
	*out = *in

}

func copy_KubernetesPkgApiNodeDaemonEndpoints(in, out *api.NodeDaemonEndpoints) error {
	*out = *in
	{
		in, out := &(*in).KubeletEndpoint, &(*out).KubeletEndpoint
		*out = *in
	}

}

func copy_KubernetesPkgApiNodeSpec(in, out *api.NodeSpec) error {
	*out = *in

}

func copy_KubernetesPkgApiNodeSystemInfo(in, out *api.NodeSystemInfo) error {
	*out = *in

}

func copy_KubernetesPkgApiObjectFieldSelector(in, out *api.ObjectFieldSelector) error {
	*out = *in

}

func copy_KubernetesPkgApiPersistentVolumeClaimVolumeSource(in, out *api.PersistentVolumeClaimVolumeSource) error {
	*out = *in

}

func copy_KubernetesPkgApiPersistentVolumeSource(in, out *api.PersistentVolumeSource) error {
	*out = *in
	{
		in, out := &(*in).GCEPersistentDisk, &(*out).GCEPersistentDisk
		*out = new(api.GCEPersistentDiskVolumeSource)
		{
			in, out := *in, *out
			*out = *in
		}
	}
	{
		in, out := &(*in).AWSElasticBlockStore, &(*out).AWSElasticBlockStore
		*out = new(api.AWSElasticBlockStoreVolumeSource)
		{
			in, out := *in, *out
			*out = *in
		}
	}
	{
		in, out := &(*in).HostPath, &(*out).HostPath
		*out = new(api.HostPathVolumeSource)
		{
			in, out := *in, *out
			*out = *in
		}
	}
	{
		in, out := &(*in).Glusterfs, &(*out).Glusterfs
		*out = new(api.GlusterfsVolumeSource)
		{
			in, out := *in, *out
			*out = *in
		}
	}
	{
		in, out := &(*in).NFS, &(*out).NFS
		*out = new(api.NFSVolumeSource)
		{
			in, out := *in, *out
			*out = *in
		}
	}
	{
		in, out := &(*in).RBD, &(*out).RBD
		*out = new(api.RBDVolumeSource)
		{
			in, out := *in, *out
			*out = *in
			{
				in, out := &(*in).CephMonitors, &(*out).CephMonitors
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			{
				in, out := &(*in).SecretRef, &(*out).SecretRef
				*out = new(api.LocalObjectReference)
				{
					in, out := *in, *out
					*out = *in
				}
			}
		}
	}
	{
		in, out := &(*in).ISCSI, &(*out).ISCSI
		*out = new(api.ISCSIVolumeSource)
		{
			in, out := *in, *out
			*out = *in
		}
	}
	{
		in, out := &(*in).Cinder, &(*out).Cinder
		*out = new(api.CinderVolumeSource)
		{
			in, out := *in, *out
			*out = *in
		}
	}
	{
		in, out := &(*in).CephFS, &(*out).CephFS
		*out = new(api.CephFSVolumeSource)
		{
			in, out := *in, *out
			*out = *in
			{
				in, out := &(*in).Monitors, &(*out).Monitors
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			{
				in, out := &(*in).SecretRef, &(*out).SecretRef
				*out = new(api.LocalObjectReference)
				{
					in, out := *in, *out
					*out = *in
				}
			}
		}
	}
	{
		in, out := &(*in).FC, &(*out).FC
		*out = new(api.FCVolumeSource)
		{
			in, out := *in, *out
			*out = *in
			{
				in, out := &(*in).TargetWWNs, &(*out).TargetWWNs
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			{
				in, out := &(*in).Lun, &(*out).Lun
				*out = new(int)
				{
					in, out := *in, *out
					*in = *out
				}
			}
		}
	}
	{
		in, out := &(*in).Flocker, &(*out).Flocker
		*out = new(api.FlockerVolumeSource)
		{
			in, out := *in, *out
			*out = *in
		}
	}

}

func copy_KubernetesPkgApiPodAttachOptions(in, out *api.PodAttachOptions) error {
	*out = *in
	{
		in, out := &(*in).TypeMeta, &(*out).TypeMeta
		*out = *in
	}

}

func copy_KubernetesPkgApiPodExecOptions(in, out *api.PodExecOptions) error {
	*out = *in
	{
		in, out := &(*in).TypeMeta, &(*out).TypeMeta
		*out = *in
	}
	{
		in, out := &(*in).Command, &(*out).Command
		*out = make([]string, len(*in))
		copy(*out, *in)
	}

}

func copy_KubernetesPkgApiPodProxyOptions(in, out *api.PodProxyOptions) error {
	*out = *in
	{
		in, out := &(*in).TypeMeta, &(*out).TypeMeta
		*out = *in
	}

}

func copy_KubernetesPkgApiPodSecurityContext(in, out *api.PodSecurityContext) error {
	*out = *in

}

func copy_KubernetesPkgApiRBDVolumeSource(in, out *api.RBDVolumeSource) error {
	*out = *in
	{
		in, out := &(*in).CephMonitors, &(*out).CephMonitors
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	{
		in, out := &(*in).SecretRef, &(*out).SecretRef
		*out = new(api.LocalObjectReference)
		{
			in, out := *in, *out
			*out = *in
		}
	}

}

func copy_KubernetesPkgApiReplicationControllerStatus(in, out *api.ReplicationControllerStatus) error {
	*out = *in

}

func copy_KubernetesPkgApiSELinuxOptions(in, out *api.SELinuxOptions) error {
	*out = *in

}

func copy_KubernetesPkgApiSecretVolumeSource(in, out *api.SecretVolumeSource) error {
	*out = *in

}

func copy_KubernetesPkgApiServiceStatus(in, out *api.ServiceStatus) error {
	*out = *in
	{
		in, out := &(*in).LoadBalancer, &(*out).LoadBalancer
		*out = *in
		{
			in, out := &(*in).Ingress, &(*out).Ingress
			*out = make([]api.LoadBalancerIngress, len(*in))
			for i := range *in {
				{
					in, out := &(*in[i]), &(*out[i])
					*out = *in
				}
			}
		}
	}

}

func copy_KubernetesPkgApiVolumeMount(in, out *api.VolumeMount) error {
	*out = *in

}
