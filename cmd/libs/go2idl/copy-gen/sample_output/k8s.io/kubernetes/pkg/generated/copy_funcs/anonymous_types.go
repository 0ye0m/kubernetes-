/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by the command:
// $ ./copy-gen -o sample_output
// Do not edit it manually!

package copy_funcs

import (
	pkix "crypto/x509/pkix"
	asn1 "encoding/asn1"
	api "k8s.io/kubernetes/pkg/api"
	v1 "k8s.io/kubernetes/pkg/api/v1"
	extensions "k8s.io/kubernetes/pkg/apis/extensions"
	v1beta1 "k8s.io/kubernetes/pkg/apis/extensions/v1beta1"
	runtime "k8s.io/kubernetes/pkg/runtime"
	net "net"
)

func copy_Bool(in, out *bool) error {
	*in = *out

}

func copy_Byte(in, out *byte) error {
	*in = *out

}

func copy_Byte(in, out *byte) error {
	*in = *out

}

func copy_Int(in, out *int) error {
	*in = *out

}

func copy_Int32(in, out *int32) error {
	*in = *out

}

func copy_Int64(in, out *int64) error {
	*in = *out

}

func copy_MapStringToBool(in, out *map[string]bool) error {
	*out = make(map[string]bool, len(*in))
	for k, v := range *in {
		var k2 string
		{
			in, out := &k, &k2
			*in = *out
		}
		var v2 bool
		{
			in, out := &v, &v2
			*in = *out
		}
		(*out)[k2] = v2
	}

}

func copy_MapStringToSliceByte(in, out *map[string][]byte) error {
	*out = make(map[string][]byte, len(*in))
	for k, v := range *in {
		var k2 string
		{
			in, out := &k, &k2
			*in = *out
		}
		var v2 []byte
		{
			in, out := &v, &v2
			*out = make([]byte, len(*in))
			copy(*out, *in)
		}
		(*out)[k2] = v2
	}

}

func copy_MapStringToSliceInt(in, out *map[string][]int) error {
	*out = make(map[string][]int, len(*in))
	for k, v := range *in {
		var k2 string
		{
			in, out := &k, &k2
			*in = *out
		}
		var v2 []int
		{
			in, out := &v, &v2
			*out = make([]int, len(*in))
			copy(*out, *in)
		}
		(*out)[k2] = v2
	}

}

func copy_MapStringToSliceString(in, out *map[string][]string) error {
	*out = make(map[string][]string, len(*in))
	for k, v := range *in {
		var k2 string
		{
			in, out := &k, &k2
			*in = *out
		}
		var v2 []string
		{
			in, out := &v, &v2
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		(*out)[k2] = v2
	}

}

func copy_MapStringToString(in, out *map[string]string) error {
	*out = make(map[string]string, len(*in))
	for k, v := range *in {
		var k2 string
		{
			in, out := &k, &k2
			*in = *out
		}
		var v2 string
		{
			in, out := &v, &v2
			*in = *out
		}
		(*out)[k2] = v2
	}

}

func copy_PointerApisExtensionsV1beta1SubresourceReference(in, out **v1beta1.SubresourceReference) error {
	*out = new(v1beta1.SubresourceReference)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerBool(in, out **bool) error {
	*out = new(bool)
	{
		in, out := *in, *out
		*in = *out
	}

}

func copy_PointerByte(in, out **byte) error {
	*out = new(byte)
	{
		in, out := *in, *out
		*in = *out
	}

}

func copy_PointerInt(in, out **int) error {
	*out = new(int)
	{
		in, out := *in, *out
		*in = *out
	}

}

func copy_PointerInt64(in, out **int64) error {
	*out = new(int64)
	{
		in, out := *in, *out
		*in = *out
	}

}

func copy_PointerKubernetesPkgApiAWSElasticBlockStoreVolumeSource(in, out **api.AWSElasticBlockStoreVolumeSource) error {
	*out = new(api.AWSElasticBlockStoreVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiCephFSVolumeSource(in, out **api.CephFSVolumeSource) error {
	*out = new(api.CephFSVolumeSource)
	{
		in, out := *in, *out
		*out = *in
		{
			in, out := &(*in).Monitors, &(*out).Monitors
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		{
			in, out := &(*in).SecretRef, &(*out).SecretRef
			*out = new(api.LocalObjectReference)
			{
				in, out := *in, *out
				*out = *in
			}
		}
	}

}

func copy_PointerKubernetesPkgApiCinderVolumeSource(in, out **api.CinderVolumeSource) error {
	*out = new(api.CinderVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiContainerStateWaiting(in, out **api.ContainerStateWaiting) error {
	*out = new(api.ContainerStateWaiting)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiDownwardAPIVolumeSource(in, out **api.DownwardAPIVolumeSource) error {
	*out = new(api.DownwardAPIVolumeSource)
	{
		in, out := *in, *out
		*out = *in
		{
			in, out := &(*in).Items, &(*out).Items
			*out = make([]api.DownwardAPIVolumeFile, len(*in))
			for i := range *in {
				{
					in, out := &(*in[i]), &(*out[i])
					*out = *in
					{
						in, out := &(*in).FieldRef, &(*out).FieldRef
						*out = *in
					}
				}
			}
		}
	}

}

func copy_PointerKubernetesPkgApiEnvVarSource(in, out **api.EnvVarSource) error {
	*out = new(api.EnvVarSource)
	{
		in, out := *in, *out
		*out = *in
		{
			in, out := &(*in).FieldRef, &(*out).FieldRef
			*out = new(api.ObjectFieldSelector)
			{
				in, out := *in, *out
				*out = *in
			}
		}
	}

}

func copy_PointerKubernetesPkgApiExecAction(in, out **api.ExecAction) error {
	*out = new(api.ExecAction)
	{
		in, out := *in, *out
		*out = *in
		{
			in, out := &(*in).Command, &(*out).Command
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}

}

func copy_PointerKubernetesPkgApiFCVolumeSource(in, out **api.FCVolumeSource) error {
	*out = new(api.FCVolumeSource)
	{
		in, out := *in, *out
		*out = *in
		{
			in, out := &(*in).TargetWWNs, &(*out).TargetWWNs
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		{
			in, out := &(*in).Lun, &(*out).Lun
			*out = new(int)
			{
				in, out := *in, *out
				*in = *out
			}
		}
	}

}

func copy_PointerKubernetesPkgApiFlockerVolumeSource(in, out **api.FlockerVolumeSource) error {
	*out = new(api.FlockerVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiGCEPersistentDiskVolumeSource(in, out **api.GCEPersistentDiskVolumeSource) error {
	*out = new(api.GCEPersistentDiskVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiGitRepoVolumeSource(in, out **api.GitRepoVolumeSource) error {
	*out = new(api.GitRepoVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiGlusterfsVolumeSource(in, out **api.GlusterfsVolumeSource) error {
	*out = new(api.GlusterfsVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiHostPathVolumeSource(in, out **api.HostPathVolumeSource) error {
	*out = new(api.HostPathVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiISCSIVolumeSource(in, out **api.ISCSIVolumeSource) error {
	*out = new(api.ISCSIVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiLocalObjectReference(in, out **api.LocalObjectReference) error {
	*out = new(api.LocalObjectReference)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiNFSVolumeSource(in, out **api.NFSVolumeSource) error {
	*out = new(api.NFSVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiObjectFieldSelector(in, out **api.ObjectFieldSelector) error {
	*out = new(api.ObjectFieldSelector)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiPersistentVolumeClaimVolumeSource(in, out **api.PersistentVolumeClaimVolumeSource) error {
	*out = new(api.PersistentVolumeClaimVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiPodSecurityContext(in, out **api.PodSecurityContext) error {
	*out = new(api.PodSecurityContext)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiRBDVolumeSource(in, out **api.RBDVolumeSource) error {
	*out = new(api.RBDVolumeSource)
	{
		in, out := *in, *out
		*out = *in
		{
			in, out := &(*in).CephMonitors, &(*out).CephMonitors
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		{
			in, out := &(*in).SecretRef, &(*out).SecretRef
			*out = new(api.LocalObjectReference)
			{
				in, out := *in, *out
				*out = *in
			}
		}
	}

}

func copy_PointerKubernetesPkgApiSELinuxOptions(in, out **api.SELinuxOptions) error {
	*out = new(api.SELinuxOptions)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgApiSecretVolumeSource(in, out **api.SecretVolumeSource) error {
	*out = new(api.SecretVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerKubernetesPkgRuntimeRawExtension(in, out **runtime.RawExtension) error {
	*out = new(runtime.RawExtension)
	{
		in, out := *in, *out
		*out = *in
		{
			in, out := &(*in).RawJSON, &(*out).RawJSON
			*out = make([]byte, len(*in))
			copy(*out, *in)
		}
	}

}

func copy_PointerPkgApiV1AWSElasticBlockStoreVolumeSource(in, out **v1.AWSElasticBlockStoreVolumeSource) error {
	*out = new(v1.AWSElasticBlockStoreVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1CephFSVolumeSource(in, out **v1.CephFSVolumeSource) error {
	*out = new(v1.CephFSVolumeSource)
	{
		in, out := *in, *out
		*out = *in
		{
			in, out := &(*in).Monitors, &(*out).Monitors
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		{
			in, out := &(*in).SecretRef, &(*out).SecretRef
			*out = new(v1.LocalObjectReference)
			{
				in, out := *in, *out
				*out = *in
			}
		}
	}

}

func copy_PointerPkgApiV1CinderVolumeSource(in, out **v1.CinderVolumeSource) error {
	*out = new(v1.CinderVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1ContainerStateWaiting(in, out **v1.ContainerStateWaiting) error {
	*out = new(v1.ContainerStateWaiting)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1DownwardAPIVolumeSource(in, out **v1.DownwardAPIVolumeSource) error {
	*out = new(v1.DownwardAPIVolumeSource)
	{
		in, out := *in, *out
		*out = *in
		{
			in, out := &(*in).Items, &(*out).Items
			*out = make([]v1.DownwardAPIVolumeFile, len(*in))
			for i := range *in {
				{
					in, out := &(*in[i]), &(*out[i])
					*out = *in
					{
						in, out := &(*in).FieldRef, &(*out).FieldRef
						*out = *in
					}
				}
			}
		}
	}

}

func copy_PointerPkgApiV1EnvVarSource(in, out **v1.EnvVarSource) error {
	*out = new(v1.EnvVarSource)
	{
		in, out := *in, *out
		*out = *in
		{
			in, out := &(*in).FieldRef, &(*out).FieldRef
			*out = new(v1.ObjectFieldSelector)
			{
				in, out := *in, *out
				*out = *in
			}
		}
	}

}

func copy_PointerPkgApiV1ExecAction(in, out **v1.ExecAction) error {
	*out = new(v1.ExecAction)
	{
		in, out := *in, *out
		*out = *in
		{
			in, out := &(*in).Command, &(*out).Command
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}

}

func copy_PointerPkgApiV1FCVolumeSource(in, out **v1.FCVolumeSource) error {
	*out = new(v1.FCVolumeSource)
	{
		in, out := *in, *out
		*out = *in
		{
			in, out := &(*in).TargetWWNs, &(*out).TargetWWNs
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		{
			in, out := &(*in).Lun, &(*out).Lun
			*out = new(int)
			{
				in, out := *in, *out
				*in = *out
			}
		}
	}

}

func copy_PointerPkgApiV1FlockerVolumeSource(in, out **v1.FlockerVolumeSource) error {
	*out = new(v1.FlockerVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1GCEPersistentDiskVolumeSource(in, out **v1.GCEPersistentDiskVolumeSource) error {
	*out = new(v1.GCEPersistentDiskVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1GitRepoVolumeSource(in, out **v1.GitRepoVolumeSource) error {
	*out = new(v1.GitRepoVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1GlusterfsVolumeSource(in, out **v1.GlusterfsVolumeSource) error {
	*out = new(v1.GlusterfsVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1HostPathVolumeSource(in, out **v1.HostPathVolumeSource) error {
	*out = new(v1.HostPathVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1ISCSIVolumeSource(in, out **v1.ISCSIVolumeSource) error {
	*out = new(v1.ISCSIVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1LocalObjectReference(in, out **v1.LocalObjectReference) error {
	*out = new(v1.LocalObjectReference)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1NFSVolumeSource(in, out **v1.NFSVolumeSource) error {
	*out = new(v1.NFSVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1ObjectFieldSelector(in, out **v1.ObjectFieldSelector) error {
	*out = new(v1.ObjectFieldSelector)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1PersistentVolumeClaimVolumeSource(in, out **v1.PersistentVolumeClaimVolumeSource) error {
	*out = new(v1.PersistentVolumeClaimVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1PodSecurityContext(in, out **v1.PodSecurityContext) error {
	*out = new(v1.PodSecurityContext)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1RBDVolumeSource(in, out **v1.RBDVolumeSource) error {
	*out = new(v1.RBDVolumeSource)
	{
		in, out := *in, *out
		*out = *in
		{
			in, out := &(*in).CephMonitors, &(*out).CephMonitors
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		{
			in, out := &(*in).SecretRef, &(*out).SecretRef
			*out = new(v1.LocalObjectReference)
			{
				in, out := *in, *out
				*out = *in
			}
		}
	}

}

func copy_PointerPkgApiV1SELinuxOptions(in, out **v1.SELinuxOptions) error {
	*out = new(v1.SELinuxOptions)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApiV1SecretVolumeSource(in, out **v1.SecretVolumeSource) error {
	*out = new(v1.SecretVolumeSource)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerPkgApisExtensionsSubresourceReference(in, out **extensions.SubresourceReference) error {
	*out = new(extensions.SubresourceReference)
	{
		in, out := *in, *out
		*out = *in
	}

}

func copy_PointerString(in, out **string) error {
	*out = new(string)
	{
		in, out := *in, *out
		*in = *out
	}

}

func copy_SliceApisExtensionsV1beta1APIVersion(in, out *[]v1beta1.APIVersion) error {
	*out = make([]v1beta1.APIVersion, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = *in
		}
	}

}

func copy_SliceByte(in, out *[]byte) error {
	*out = make([]byte, len(*in))
	copy(*out, *in)

}

func copy_SliceCryptoX509PkixExtension(in, out *[]pkix.Extension) error {
	*out = make([]pkix.Extension, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = *in
			{
				in, out := &(*in).Id, &(*out).Id
				*out = make(asn1.ObjectIdentifier, len(*in))
				copy(*out, *in)
			}
			{
				in, out := &(*in).Value, &(*out).Value
				*out = make([]byte, len(*in))
				copy(*out, *in)
			}
		}
	}

}

func copy_SliceEncodingAsn1ObjectIdentifier(in, out *[]asn1.ObjectIdentifier) error {
	*out = make([]asn1.ObjectIdentifier, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = make(asn1.ObjectIdentifier, len(*in))
			copy(*out, *in)
		}
	}

}

func copy_SliceInt(in, out *[]int) error {
	*out = make([]int, len(*in))
	copy(*out, *in)

}

func copy_SliceKubernetesPkgApiDownwardAPIVolumeFile(in, out *[]api.DownwardAPIVolumeFile) error {
	*out = make([]api.DownwardAPIVolumeFile, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = *in
			{
				in, out := &(*in).FieldRef, &(*out).FieldRef
				*out = *in
			}
		}
	}

}

func copy_SliceKubernetesPkgApiEnvVar(in, out *[]api.EnvVar) error {
	*out = make([]api.EnvVar, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = *in
			{
				in, out := &(*in).ValueFrom, &(*out).ValueFrom
				*out = new(api.EnvVarSource)
				{
					in, out := *in, *out
					*out = *in
					{
						in, out := &(*in).FieldRef, &(*out).FieldRef
						*out = new(api.ObjectFieldSelector)
						{
							in, out := *in, *out
							*out = *in
						}
					}
				}
			}
		}
	}

}

func copy_SliceKubernetesPkgApiLoadBalancerIngress(in, out *[]api.LoadBalancerIngress) error {
	*out = make([]api.LoadBalancerIngress, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = *in
		}
	}

}

func copy_SliceKubernetesPkgApiLocalObjectReference(in, out *[]api.LocalObjectReference) error {
	*out = make([]api.LocalObjectReference, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = *in
		}
	}

}

func copy_SliceKubernetesPkgApiVolumeMount(in, out *[]api.VolumeMount) error {
	*out = make([]api.VolumeMount, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = *in
		}
	}

}

func copy_SliceKubernetesPkgRuntimeRawExtension(in, out *[]runtime.RawExtension) error {
	*out = make([]runtime.RawExtension, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = *in
			{
				in, out := &(*in).RawJSON, &(*out).RawJSON
				*out = make([]byte, len(*in))
				copy(*out, *in)
			}
		}
	}

}

func copy_SliceNetIP(in, out *[]net.IP) error {
	*out = make([]net.IP, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = make(net.IP, len(*in))
			copy(*out, *in)
		}
	}

}

func copy_SlicePkgApiV1DownwardAPIVolumeFile(in, out *[]v1.DownwardAPIVolumeFile) error {
	*out = make([]v1.DownwardAPIVolumeFile, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = *in
			{
				in, out := &(*in).FieldRef, &(*out).FieldRef
				*out = *in
			}
		}
	}

}

func copy_SlicePkgApiV1EnvVar(in, out *[]v1.EnvVar) error {
	*out = make([]v1.EnvVar, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = *in
			{
				in, out := &(*in).ValueFrom, &(*out).ValueFrom
				*out = new(v1.EnvVarSource)
				{
					in, out := *in, *out
					*out = *in
					{
						in, out := &(*in).FieldRef, &(*out).FieldRef
						*out = new(v1.ObjectFieldSelector)
						{
							in, out := *in, *out
							*out = *in
						}
					}
				}
			}
		}
	}

}

func copy_SlicePkgApiV1LoadBalancerIngress(in, out *[]v1.LoadBalancerIngress) error {
	*out = make([]v1.LoadBalancerIngress, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = *in
		}
	}

}

func copy_SlicePkgApiV1LocalObjectReference(in, out *[]v1.LocalObjectReference) error {
	*out = make([]v1.LocalObjectReference, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = *in
		}
	}

}

func copy_SlicePkgApiV1VolumeMount(in, out *[]v1.VolumeMount) error {
	*out = make([]v1.VolumeMount, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = *in
		}
	}

}

func copy_SlicePkgApisExtensionsAPIVersion(in, out *[]extensions.APIVersion) error {
	*out = make([]extensions.APIVersion, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = *in
		}
	}

}

func copy_SliceSliceByte(in, out *[][]byte) error {
	*out = make([][]byte, len(*in))
	for i := range *in {
		{
			in, out := &(*in[i]), &(*out[i])
			*out = make([]byte, len(*in))
			copy(*out, *in)
		}
	}

}

func copy_SliceString(in, out *[]string) error {
	*out = make([]string, len(*in))
	copy(*out, *in)

}

func copy_String(in, out *string) error {
	*in = *out

}

func copy_Struct(in, out *struct{}) error {
	*out = *in

}

func copy_Uint(in, out *uint) error {
	*in = *out

}

func copy_Uint16(in, out *uint16) error {
	*in = *out

}

func copy_Uint32(in, out *uint32) error {
	*in = *out

}

func copy_Uint64(in, out *uint64) error {
	*in = *out

}
