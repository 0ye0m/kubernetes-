/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package pluginmanagerfakes

import (
	"sync"

	"k8s.io/kubernetes/pkg/kubelet/config"
	"k8s.io/kubernetes/pkg/kubelet/pluginmanager"
	"k8s.io/kubernetes/pkg/kubelet/pluginmanager/cache"
)

type FakePluginManager struct {
	AddHandlerStub        func(string, cache.PluginHandler)
	addHandlerMutex       sync.RWMutex
	addHandlerArgsForCall []struct {
		arg1 string
		arg2 cache.PluginHandler
	}
	RunStub        func(config.SourcesReady, <-chan struct{})
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 config.SourcesReady
		arg2 <-chan struct{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePluginManager) AddHandler(arg1 string, arg2 cache.PluginHandler) {
	fake.addHandlerMutex.Lock()
	fake.addHandlerArgsForCall = append(fake.addHandlerArgsForCall, struct {
		arg1 string
		arg2 cache.PluginHandler
	}{arg1, arg2})
	fake.recordInvocation("AddHandler", []interface{}{arg1, arg2})
	fake.addHandlerMutex.Unlock()
	if fake.AddHandlerStub != nil {
		fake.AddHandlerStub(arg1, arg2)
	}
}

func (fake *FakePluginManager) AddHandlerCallCount() int {
	fake.addHandlerMutex.RLock()
	defer fake.addHandlerMutex.RUnlock()
	return len(fake.addHandlerArgsForCall)
}

func (fake *FakePluginManager) AddHandlerCalls(stub func(string, cache.PluginHandler)) {
	fake.addHandlerMutex.Lock()
	defer fake.addHandlerMutex.Unlock()
	fake.AddHandlerStub = stub
}

func (fake *FakePluginManager) AddHandlerArgsForCall(i int) (string, cache.PluginHandler) {
	fake.addHandlerMutex.RLock()
	defer fake.addHandlerMutex.RUnlock()
	argsForCall := fake.addHandlerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePluginManager) Run(arg1 config.SourcesReady, arg2 <-chan struct{}) {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 config.SourcesReady
		arg2 <-chan struct{}
	}{arg1, arg2})
	fake.recordInvocation("Run", []interface{}{arg1, arg2})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		fake.RunStub(arg1, arg2)
	}
}

func (fake *FakePluginManager) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakePluginManager) RunCalls(stub func(config.SourcesReady, <-chan struct{})) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakePluginManager) RunArgsForCall(i int) (config.SourcesReady, <-chan struct{}) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePluginManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addHandlerMutex.RLock()
	defer fake.addHandlerMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePluginManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pluginmanager.PluginManager = new(FakePluginManager)
