/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package volumefakes

import (
	"sync"

	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/kubernetes/pkg/kubelet/pluginmanager/cache"
	"k8s.io/kubernetes/pkg/volume"
)

type FakeKubeletWatchableVolumePlugin struct {
	CanSupportStub        func(*volume.Spec) bool
	canSupportMutex       sync.RWMutex
	canSupportArgsForCall []struct {
		arg1 *volume.Spec
	}
	canSupportReturns struct {
		result1 bool
	}
	canSupportReturnsOnCall map[int]struct {
		result1 bool
	}
	ConstructVolumeSpecStub        func(string, string) (*volume.Spec, error)
	constructVolumeSpecMutex       sync.RWMutex
	constructVolumeSpecArgsForCall []struct {
		arg1 string
		arg2 string
	}
	constructVolumeSpecReturns struct {
		result1 *volume.Spec
		result2 error
	}
	constructVolumeSpecReturnsOnCall map[int]struct {
		result1 *volume.Spec
		result2 error
	}
	GetPluginNameStub        func() string
	getPluginNameMutex       sync.RWMutex
	getPluginNameArgsForCall []struct {
	}
	getPluginNameReturns struct {
		result1 string
	}
	getPluginNameReturnsOnCall map[int]struct {
		result1 string
	}
	GetVolumeNameStub        func(*volume.Spec) (string, error)
	getVolumeNameMutex       sync.RWMutex
	getVolumeNameArgsForCall []struct {
		arg1 *volume.Spec
	}
	getVolumeNameReturns struct {
		result1 string
		result2 error
	}
	getVolumeNameReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetWatcherHandlerStub        func() cache.PluginHandler
	getWatcherHandlerMutex       sync.RWMutex
	getWatcherHandlerArgsForCall []struct {
	}
	getWatcherHandlerReturns struct {
		result1 cache.PluginHandler
	}
	getWatcherHandlerReturnsOnCall map[int]struct {
		result1 cache.PluginHandler
	}
	InitStub        func(volume.VolumeHost) error
	initMutex       sync.RWMutex
	initArgsForCall []struct {
		arg1 volume.VolumeHost
	}
	initReturns struct {
		result1 error
	}
	initReturnsOnCall map[int]struct {
		result1 error
	}
	NewMounterStub        func(*volume.Spec, *v1.Pod, volume.VolumeOptions) (volume.Mounter, error)
	newMounterMutex       sync.RWMutex
	newMounterArgsForCall []struct {
		arg1 *volume.Spec
		arg2 *v1.Pod
		arg3 volume.VolumeOptions
	}
	newMounterReturns struct {
		result1 volume.Mounter
		result2 error
	}
	newMounterReturnsOnCall map[int]struct {
		result1 volume.Mounter
		result2 error
	}
	NewUnmounterStub        func(string, types.UID) (volume.Unmounter, error)
	newUnmounterMutex       sync.RWMutex
	newUnmounterArgsForCall []struct {
		arg1 string
		arg2 types.UID
	}
	newUnmounterReturns struct {
		result1 volume.Unmounter
		result2 error
	}
	newUnmounterReturnsOnCall map[int]struct {
		result1 volume.Unmounter
		result2 error
	}
	RequiresRemountStub        func() bool
	requiresRemountMutex       sync.RWMutex
	requiresRemountArgsForCall []struct {
	}
	requiresRemountReturns struct {
		result1 bool
	}
	requiresRemountReturnsOnCall map[int]struct {
		result1 bool
	}
	SupportsBulkVolumeVerificationStub        func() bool
	supportsBulkVolumeVerificationMutex       sync.RWMutex
	supportsBulkVolumeVerificationArgsForCall []struct {
	}
	supportsBulkVolumeVerificationReturns struct {
		result1 bool
	}
	supportsBulkVolumeVerificationReturnsOnCall map[int]struct {
		result1 bool
	}
	SupportsMountOptionStub        func() bool
	supportsMountOptionMutex       sync.RWMutex
	supportsMountOptionArgsForCall []struct {
	}
	supportsMountOptionReturns struct {
		result1 bool
	}
	supportsMountOptionReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKubeletWatchableVolumePlugin) CanSupport(arg1 *volume.Spec) bool {
	fake.canSupportMutex.Lock()
	ret, specificReturn := fake.canSupportReturnsOnCall[len(fake.canSupportArgsForCall)]
	fake.canSupportArgsForCall = append(fake.canSupportArgsForCall, struct {
		arg1 *volume.Spec
	}{arg1})
	fake.recordInvocation("CanSupport", []interface{}{arg1})
	fake.canSupportMutex.Unlock()
	if fake.CanSupportStub != nil {
		return fake.CanSupportStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.canSupportReturns
	return fakeReturns.result1
}

func (fake *FakeKubeletWatchableVolumePlugin) CanSupportCallCount() int {
	fake.canSupportMutex.RLock()
	defer fake.canSupportMutex.RUnlock()
	return len(fake.canSupportArgsForCall)
}

func (fake *FakeKubeletWatchableVolumePlugin) CanSupportCalls(stub func(*volume.Spec) bool) {
	fake.canSupportMutex.Lock()
	defer fake.canSupportMutex.Unlock()
	fake.CanSupportStub = stub
}

func (fake *FakeKubeletWatchableVolumePlugin) CanSupportArgsForCall(i int) *volume.Spec {
	fake.canSupportMutex.RLock()
	defer fake.canSupportMutex.RUnlock()
	argsForCall := fake.canSupportArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubeletWatchableVolumePlugin) CanSupportReturns(result1 bool) {
	fake.canSupportMutex.Lock()
	defer fake.canSupportMutex.Unlock()
	fake.CanSupportStub = nil
	fake.canSupportReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeKubeletWatchableVolumePlugin) CanSupportReturnsOnCall(i int, result1 bool) {
	fake.canSupportMutex.Lock()
	defer fake.canSupportMutex.Unlock()
	fake.CanSupportStub = nil
	if fake.canSupportReturnsOnCall == nil {
		fake.canSupportReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.canSupportReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeKubeletWatchableVolumePlugin) ConstructVolumeSpec(arg1 string, arg2 string) (*volume.Spec, error) {
	fake.constructVolumeSpecMutex.Lock()
	ret, specificReturn := fake.constructVolumeSpecReturnsOnCall[len(fake.constructVolumeSpecArgsForCall)]
	fake.constructVolumeSpecArgsForCall = append(fake.constructVolumeSpecArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ConstructVolumeSpec", []interface{}{arg1, arg2})
	fake.constructVolumeSpecMutex.Unlock()
	if fake.ConstructVolumeSpecStub != nil {
		return fake.ConstructVolumeSpecStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.constructVolumeSpecReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubeletWatchableVolumePlugin) ConstructVolumeSpecCallCount() int {
	fake.constructVolumeSpecMutex.RLock()
	defer fake.constructVolumeSpecMutex.RUnlock()
	return len(fake.constructVolumeSpecArgsForCall)
}

func (fake *FakeKubeletWatchableVolumePlugin) ConstructVolumeSpecCalls(stub func(string, string) (*volume.Spec, error)) {
	fake.constructVolumeSpecMutex.Lock()
	defer fake.constructVolumeSpecMutex.Unlock()
	fake.ConstructVolumeSpecStub = stub
}

func (fake *FakeKubeletWatchableVolumePlugin) ConstructVolumeSpecArgsForCall(i int) (string, string) {
	fake.constructVolumeSpecMutex.RLock()
	defer fake.constructVolumeSpecMutex.RUnlock()
	argsForCall := fake.constructVolumeSpecArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeKubeletWatchableVolumePlugin) ConstructVolumeSpecReturns(result1 *volume.Spec, result2 error) {
	fake.constructVolumeSpecMutex.Lock()
	defer fake.constructVolumeSpecMutex.Unlock()
	fake.ConstructVolumeSpecStub = nil
	fake.constructVolumeSpecReturns = struct {
		result1 *volume.Spec
		result2 error
	}{result1, result2}
}

func (fake *FakeKubeletWatchableVolumePlugin) ConstructVolumeSpecReturnsOnCall(i int, result1 *volume.Spec, result2 error) {
	fake.constructVolumeSpecMutex.Lock()
	defer fake.constructVolumeSpecMutex.Unlock()
	fake.ConstructVolumeSpecStub = nil
	if fake.constructVolumeSpecReturnsOnCall == nil {
		fake.constructVolumeSpecReturnsOnCall = make(map[int]struct {
			result1 *volume.Spec
			result2 error
		})
	}
	fake.constructVolumeSpecReturnsOnCall[i] = struct {
		result1 *volume.Spec
		result2 error
	}{result1, result2}
}

func (fake *FakeKubeletWatchableVolumePlugin) GetPluginName() string {
	fake.getPluginNameMutex.Lock()
	ret, specificReturn := fake.getPluginNameReturnsOnCall[len(fake.getPluginNameArgsForCall)]
	fake.getPluginNameArgsForCall = append(fake.getPluginNameArgsForCall, struct {
	}{})
	fake.recordInvocation("GetPluginName", []interface{}{})
	fake.getPluginNameMutex.Unlock()
	if fake.GetPluginNameStub != nil {
		return fake.GetPluginNameStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getPluginNameReturns
	return fakeReturns.result1
}

func (fake *FakeKubeletWatchableVolumePlugin) GetPluginNameCallCount() int {
	fake.getPluginNameMutex.RLock()
	defer fake.getPluginNameMutex.RUnlock()
	return len(fake.getPluginNameArgsForCall)
}

func (fake *FakeKubeletWatchableVolumePlugin) GetPluginNameCalls(stub func() string) {
	fake.getPluginNameMutex.Lock()
	defer fake.getPluginNameMutex.Unlock()
	fake.GetPluginNameStub = stub
}

func (fake *FakeKubeletWatchableVolumePlugin) GetPluginNameReturns(result1 string) {
	fake.getPluginNameMutex.Lock()
	defer fake.getPluginNameMutex.Unlock()
	fake.GetPluginNameStub = nil
	fake.getPluginNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeKubeletWatchableVolumePlugin) GetPluginNameReturnsOnCall(i int, result1 string) {
	fake.getPluginNameMutex.Lock()
	defer fake.getPluginNameMutex.Unlock()
	fake.GetPluginNameStub = nil
	if fake.getPluginNameReturnsOnCall == nil {
		fake.getPluginNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getPluginNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeKubeletWatchableVolumePlugin) GetVolumeName(arg1 *volume.Spec) (string, error) {
	fake.getVolumeNameMutex.Lock()
	ret, specificReturn := fake.getVolumeNameReturnsOnCall[len(fake.getVolumeNameArgsForCall)]
	fake.getVolumeNameArgsForCall = append(fake.getVolumeNameArgsForCall, struct {
		arg1 *volume.Spec
	}{arg1})
	fake.recordInvocation("GetVolumeName", []interface{}{arg1})
	fake.getVolumeNameMutex.Unlock()
	if fake.GetVolumeNameStub != nil {
		return fake.GetVolumeNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getVolumeNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubeletWatchableVolumePlugin) GetVolumeNameCallCount() int {
	fake.getVolumeNameMutex.RLock()
	defer fake.getVolumeNameMutex.RUnlock()
	return len(fake.getVolumeNameArgsForCall)
}

func (fake *FakeKubeletWatchableVolumePlugin) GetVolumeNameCalls(stub func(*volume.Spec) (string, error)) {
	fake.getVolumeNameMutex.Lock()
	defer fake.getVolumeNameMutex.Unlock()
	fake.GetVolumeNameStub = stub
}

func (fake *FakeKubeletWatchableVolumePlugin) GetVolumeNameArgsForCall(i int) *volume.Spec {
	fake.getVolumeNameMutex.RLock()
	defer fake.getVolumeNameMutex.RUnlock()
	argsForCall := fake.getVolumeNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubeletWatchableVolumePlugin) GetVolumeNameReturns(result1 string, result2 error) {
	fake.getVolumeNameMutex.Lock()
	defer fake.getVolumeNameMutex.Unlock()
	fake.GetVolumeNameStub = nil
	fake.getVolumeNameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeKubeletWatchableVolumePlugin) GetVolumeNameReturnsOnCall(i int, result1 string, result2 error) {
	fake.getVolumeNameMutex.Lock()
	defer fake.getVolumeNameMutex.Unlock()
	fake.GetVolumeNameStub = nil
	if fake.getVolumeNameReturnsOnCall == nil {
		fake.getVolumeNameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getVolumeNameReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeKubeletWatchableVolumePlugin) GetWatcherHandler() cache.PluginHandler {
	fake.getWatcherHandlerMutex.Lock()
	ret, specificReturn := fake.getWatcherHandlerReturnsOnCall[len(fake.getWatcherHandlerArgsForCall)]
	fake.getWatcherHandlerArgsForCall = append(fake.getWatcherHandlerArgsForCall, struct {
	}{})
	fake.recordInvocation("GetWatcherHandler", []interface{}{})
	fake.getWatcherHandlerMutex.Unlock()
	if fake.GetWatcherHandlerStub != nil {
		return fake.GetWatcherHandlerStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getWatcherHandlerReturns
	return fakeReturns.result1
}

func (fake *FakeKubeletWatchableVolumePlugin) GetWatcherHandlerCallCount() int {
	fake.getWatcherHandlerMutex.RLock()
	defer fake.getWatcherHandlerMutex.RUnlock()
	return len(fake.getWatcherHandlerArgsForCall)
}

func (fake *FakeKubeletWatchableVolumePlugin) GetWatcherHandlerCalls(stub func() cache.PluginHandler) {
	fake.getWatcherHandlerMutex.Lock()
	defer fake.getWatcherHandlerMutex.Unlock()
	fake.GetWatcherHandlerStub = stub
}

func (fake *FakeKubeletWatchableVolumePlugin) GetWatcherHandlerReturns(result1 cache.PluginHandler) {
	fake.getWatcherHandlerMutex.Lock()
	defer fake.getWatcherHandlerMutex.Unlock()
	fake.GetWatcherHandlerStub = nil
	fake.getWatcherHandlerReturns = struct {
		result1 cache.PluginHandler
	}{result1}
}

func (fake *FakeKubeletWatchableVolumePlugin) GetWatcherHandlerReturnsOnCall(i int, result1 cache.PluginHandler) {
	fake.getWatcherHandlerMutex.Lock()
	defer fake.getWatcherHandlerMutex.Unlock()
	fake.GetWatcherHandlerStub = nil
	if fake.getWatcherHandlerReturnsOnCall == nil {
		fake.getWatcherHandlerReturnsOnCall = make(map[int]struct {
			result1 cache.PluginHandler
		})
	}
	fake.getWatcherHandlerReturnsOnCall[i] = struct {
		result1 cache.PluginHandler
	}{result1}
}

func (fake *FakeKubeletWatchableVolumePlugin) Init(arg1 volume.VolumeHost) error {
	fake.initMutex.Lock()
	ret, specificReturn := fake.initReturnsOnCall[len(fake.initArgsForCall)]
	fake.initArgsForCall = append(fake.initArgsForCall, struct {
		arg1 volume.VolumeHost
	}{arg1})
	fake.recordInvocation("Init", []interface{}{arg1})
	fake.initMutex.Unlock()
	if fake.InitStub != nil {
		return fake.InitStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.initReturns
	return fakeReturns.result1
}

func (fake *FakeKubeletWatchableVolumePlugin) InitCallCount() int {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return len(fake.initArgsForCall)
}

func (fake *FakeKubeletWatchableVolumePlugin) InitCalls(stub func(volume.VolumeHost) error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = stub
}

func (fake *FakeKubeletWatchableVolumePlugin) InitArgsForCall(i int) volume.VolumeHost {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	argsForCall := fake.initArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubeletWatchableVolumePlugin) InitReturns(result1 error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = nil
	fake.initReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubeletWatchableVolumePlugin) InitReturnsOnCall(i int, result1 error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = nil
	if fake.initReturnsOnCall == nil {
		fake.initReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.initReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubeletWatchableVolumePlugin) NewMounter(arg1 *volume.Spec, arg2 *v1.Pod, arg3 volume.VolumeOptions) (volume.Mounter, error) {
	fake.newMounterMutex.Lock()
	ret, specificReturn := fake.newMounterReturnsOnCall[len(fake.newMounterArgsForCall)]
	fake.newMounterArgsForCall = append(fake.newMounterArgsForCall, struct {
		arg1 *volume.Spec
		arg2 *v1.Pod
		arg3 volume.VolumeOptions
	}{arg1, arg2, arg3})
	fake.recordInvocation("NewMounter", []interface{}{arg1, arg2, arg3})
	fake.newMounterMutex.Unlock()
	if fake.NewMounterStub != nil {
		return fake.NewMounterStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.newMounterReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubeletWatchableVolumePlugin) NewMounterCallCount() int {
	fake.newMounterMutex.RLock()
	defer fake.newMounterMutex.RUnlock()
	return len(fake.newMounterArgsForCall)
}

func (fake *FakeKubeletWatchableVolumePlugin) NewMounterCalls(stub func(*volume.Spec, *v1.Pod, volume.VolumeOptions) (volume.Mounter, error)) {
	fake.newMounterMutex.Lock()
	defer fake.newMounterMutex.Unlock()
	fake.NewMounterStub = stub
}

func (fake *FakeKubeletWatchableVolumePlugin) NewMounterArgsForCall(i int) (*volume.Spec, *v1.Pod, volume.VolumeOptions) {
	fake.newMounterMutex.RLock()
	defer fake.newMounterMutex.RUnlock()
	argsForCall := fake.newMounterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeKubeletWatchableVolumePlugin) NewMounterReturns(result1 volume.Mounter, result2 error) {
	fake.newMounterMutex.Lock()
	defer fake.newMounterMutex.Unlock()
	fake.NewMounterStub = nil
	fake.newMounterReturns = struct {
		result1 volume.Mounter
		result2 error
	}{result1, result2}
}

func (fake *FakeKubeletWatchableVolumePlugin) NewMounterReturnsOnCall(i int, result1 volume.Mounter, result2 error) {
	fake.newMounterMutex.Lock()
	defer fake.newMounterMutex.Unlock()
	fake.NewMounterStub = nil
	if fake.newMounterReturnsOnCall == nil {
		fake.newMounterReturnsOnCall = make(map[int]struct {
			result1 volume.Mounter
			result2 error
		})
	}
	fake.newMounterReturnsOnCall[i] = struct {
		result1 volume.Mounter
		result2 error
	}{result1, result2}
}

func (fake *FakeKubeletWatchableVolumePlugin) NewUnmounter(arg1 string, arg2 types.UID) (volume.Unmounter, error) {
	fake.newUnmounterMutex.Lock()
	ret, specificReturn := fake.newUnmounterReturnsOnCall[len(fake.newUnmounterArgsForCall)]
	fake.newUnmounterArgsForCall = append(fake.newUnmounterArgsForCall, struct {
		arg1 string
		arg2 types.UID
	}{arg1, arg2})
	fake.recordInvocation("NewUnmounter", []interface{}{arg1, arg2})
	fake.newUnmounterMutex.Unlock()
	if fake.NewUnmounterStub != nil {
		return fake.NewUnmounterStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.newUnmounterReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubeletWatchableVolumePlugin) NewUnmounterCallCount() int {
	fake.newUnmounterMutex.RLock()
	defer fake.newUnmounterMutex.RUnlock()
	return len(fake.newUnmounterArgsForCall)
}

func (fake *FakeKubeletWatchableVolumePlugin) NewUnmounterCalls(stub func(string, types.UID) (volume.Unmounter, error)) {
	fake.newUnmounterMutex.Lock()
	defer fake.newUnmounterMutex.Unlock()
	fake.NewUnmounterStub = stub
}

func (fake *FakeKubeletWatchableVolumePlugin) NewUnmounterArgsForCall(i int) (string, types.UID) {
	fake.newUnmounterMutex.RLock()
	defer fake.newUnmounterMutex.RUnlock()
	argsForCall := fake.newUnmounterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeKubeletWatchableVolumePlugin) NewUnmounterReturns(result1 volume.Unmounter, result2 error) {
	fake.newUnmounterMutex.Lock()
	defer fake.newUnmounterMutex.Unlock()
	fake.NewUnmounterStub = nil
	fake.newUnmounterReturns = struct {
		result1 volume.Unmounter
		result2 error
	}{result1, result2}
}

func (fake *FakeKubeletWatchableVolumePlugin) NewUnmounterReturnsOnCall(i int, result1 volume.Unmounter, result2 error) {
	fake.newUnmounterMutex.Lock()
	defer fake.newUnmounterMutex.Unlock()
	fake.NewUnmounterStub = nil
	if fake.newUnmounterReturnsOnCall == nil {
		fake.newUnmounterReturnsOnCall = make(map[int]struct {
			result1 volume.Unmounter
			result2 error
		})
	}
	fake.newUnmounterReturnsOnCall[i] = struct {
		result1 volume.Unmounter
		result2 error
	}{result1, result2}
}

func (fake *FakeKubeletWatchableVolumePlugin) RequiresRemount() bool {
	fake.requiresRemountMutex.Lock()
	ret, specificReturn := fake.requiresRemountReturnsOnCall[len(fake.requiresRemountArgsForCall)]
	fake.requiresRemountArgsForCall = append(fake.requiresRemountArgsForCall, struct {
	}{})
	fake.recordInvocation("RequiresRemount", []interface{}{})
	fake.requiresRemountMutex.Unlock()
	if fake.RequiresRemountStub != nil {
		return fake.RequiresRemountStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.requiresRemountReturns
	return fakeReturns.result1
}

func (fake *FakeKubeletWatchableVolumePlugin) RequiresRemountCallCount() int {
	fake.requiresRemountMutex.RLock()
	defer fake.requiresRemountMutex.RUnlock()
	return len(fake.requiresRemountArgsForCall)
}

func (fake *FakeKubeletWatchableVolumePlugin) RequiresRemountCalls(stub func() bool) {
	fake.requiresRemountMutex.Lock()
	defer fake.requiresRemountMutex.Unlock()
	fake.RequiresRemountStub = stub
}

func (fake *FakeKubeletWatchableVolumePlugin) RequiresRemountReturns(result1 bool) {
	fake.requiresRemountMutex.Lock()
	defer fake.requiresRemountMutex.Unlock()
	fake.RequiresRemountStub = nil
	fake.requiresRemountReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeKubeletWatchableVolumePlugin) RequiresRemountReturnsOnCall(i int, result1 bool) {
	fake.requiresRemountMutex.Lock()
	defer fake.requiresRemountMutex.Unlock()
	fake.RequiresRemountStub = nil
	if fake.requiresRemountReturnsOnCall == nil {
		fake.requiresRemountReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.requiresRemountReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeKubeletWatchableVolumePlugin) SupportsBulkVolumeVerification() bool {
	fake.supportsBulkVolumeVerificationMutex.Lock()
	ret, specificReturn := fake.supportsBulkVolumeVerificationReturnsOnCall[len(fake.supportsBulkVolumeVerificationArgsForCall)]
	fake.supportsBulkVolumeVerificationArgsForCall = append(fake.supportsBulkVolumeVerificationArgsForCall, struct {
	}{})
	fake.recordInvocation("SupportsBulkVolumeVerification", []interface{}{})
	fake.supportsBulkVolumeVerificationMutex.Unlock()
	if fake.SupportsBulkVolumeVerificationStub != nil {
		return fake.SupportsBulkVolumeVerificationStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.supportsBulkVolumeVerificationReturns
	return fakeReturns.result1
}

func (fake *FakeKubeletWatchableVolumePlugin) SupportsBulkVolumeVerificationCallCount() int {
	fake.supportsBulkVolumeVerificationMutex.RLock()
	defer fake.supportsBulkVolumeVerificationMutex.RUnlock()
	return len(fake.supportsBulkVolumeVerificationArgsForCall)
}

func (fake *FakeKubeletWatchableVolumePlugin) SupportsBulkVolumeVerificationCalls(stub func() bool) {
	fake.supportsBulkVolumeVerificationMutex.Lock()
	defer fake.supportsBulkVolumeVerificationMutex.Unlock()
	fake.SupportsBulkVolumeVerificationStub = stub
}

func (fake *FakeKubeletWatchableVolumePlugin) SupportsBulkVolumeVerificationReturns(result1 bool) {
	fake.supportsBulkVolumeVerificationMutex.Lock()
	defer fake.supportsBulkVolumeVerificationMutex.Unlock()
	fake.SupportsBulkVolumeVerificationStub = nil
	fake.supportsBulkVolumeVerificationReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeKubeletWatchableVolumePlugin) SupportsBulkVolumeVerificationReturnsOnCall(i int, result1 bool) {
	fake.supportsBulkVolumeVerificationMutex.Lock()
	defer fake.supportsBulkVolumeVerificationMutex.Unlock()
	fake.SupportsBulkVolumeVerificationStub = nil
	if fake.supportsBulkVolumeVerificationReturnsOnCall == nil {
		fake.supportsBulkVolumeVerificationReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.supportsBulkVolumeVerificationReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeKubeletWatchableVolumePlugin) SupportsMountOption() bool {
	fake.supportsMountOptionMutex.Lock()
	ret, specificReturn := fake.supportsMountOptionReturnsOnCall[len(fake.supportsMountOptionArgsForCall)]
	fake.supportsMountOptionArgsForCall = append(fake.supportsMountOptionArgsForCall, struct {
	}{})
	fake.recordInvocation("SupportsMountOption", []interface{}{})
	fake.supportsMountOptionMutex.Unlock()
	if fake.SupportsMountOptionStub != nil {
		return fake.SupportsMountOptionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.supportsMountOptionReturns
	return fakeReturns.result1
}

func (fake *FakeKubeletWatchableVolumePlugin) SupportsMountOptionCallCount() int {
	fake.supportsMountOptionMutex.RLock()
	defer fake.supportsMountOptionMutex.RUnlock()
	return len(fake.supportsMountOptionArgsForCall)
}

func (fake *FakeKubeletWatchableVolumePlugin) SupportsMountOptionCalls(stub func() bool) {
	fake.supportsMountOptionMutex.Lock()
	defer fake.supportsMountOptionMutex.Unlock()
	fake.SupportsMountOptionStub = stub
}

func (fake *FakeKubeletWatchableVolumePlugin) SupportsMountOptionReturns(result1 bool) {
	fake.supportsMountOptionMutex.Lock()
	defer fake.supportsMountOptionMutex.Unlock()
	fake.SupportsMountOptionStub = nil
	fake.supportsMountOptionReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeKubeletWatchableVolumePlugin) SupportsMountOptionReturnsOnCall(i int, result1 bool) {
	fake.supportsMountOptionMutex.Lock()
	defer fake.supportsMountOptionMutex.Unlock()
	fake.SupportsMountOptionStub = nil
	if fake.supportsMountOptionReturnsOnCall == nil {
		fake.supportsMountOptionReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.supportsMountOptionReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeKubeletWatchableVolumePlugin) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.canSupportMutex.RLock()
	defer fake.canSupportMutex.RUnlock()
	fake.constructVolumeSpecMutex.RLock()
	defer fake.constructVolumeSpecMutex.RUnlock()
	fake.getPluginNameMutex.RLock()
	defer fake.getPluginNameMutex.RUnlock()
	fake.getVolumeNameMutex.RLock()
	defer fake.getVolumeNameMutex.RUnlock()
	fake.getWatcherHandlerMutex.RLock()
	defer fake.getWatcherHandlerMutex.RUnlock()
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	fake.newMounterMutex.RLock()
	defer fake.newMounterMutex.RUnlock()
	fake.newUnmounterMutex.RLock()
	defer fake.newUnmounterMutex.RUnlock()
	fake.requiresRemountMutex.RLock()
	defer fake.requiresRemountMutex.RUnlock()
	fake.supportsBulkVolumeVerificationMutex.RLock()
	defer fake.supportsBulkVolumeVerificationMutex.RUnlock()
	fake.supportsMountOptionMutex.RLock()
	defer fake.supportsMountOptionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKubeletWatchableVolumePlugin) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ volume.KubeletWatchableVolumePlugin = new(FakeKubeletWatchableVolumePlugin)
