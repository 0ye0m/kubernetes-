// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	spec "github.com/go-openapi/spec"
	resource "k8s.io/apimachinery/pkg/api/resource"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	openapi "k8s.io/apimachinery/pkg/openapi"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

func GetOpenAPIDefinitions(ref openapi.ReferenceCallback) map[string]openapi.OpenAPIDefinition {
	return map[string]openapi.OpenAPIDefinition{
		"k8s.io/apimachinery/pkg/util/intstr.IntOrString": intstr.IntOrString{}.OpenAPIDefinition(),
		"k8s.io/apimachinery/pkg/api/resource.Quantity":   resource.Quantity{}.OpenAPIDefinition(),
		"k8s.io/apimachinery/pkg/api/resource.int64Amount": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "int64Amount represents a fixed precision numerator and arbitrary scale exponent. It is faster than operations on inf.Dec for values that can be represented as int64.",
					Properties: map[string]spec.Schema{
						"value": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int64",
							},
						},
						"scale": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
					},
					Required: []string{"value", "scale"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/runtime.RawExtension": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
					Properties: map[string]spec.Schema{
						"Raw": {
							SchemaProps: spec.SchemaProps{
								Description: "Raw is the underlying serialization of this object.",
								Type:        []string{"string"},
								Format:      "byte",
							},
						},
					},
					Required: []string{"Raw"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/runtime.TypeMeta": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TypeMeta is shared by all top level objects. The proper way to use it is to inline it in your type, like this: type MyAwesomeAPIObject struct {\n     runtime.TypeMeta    `json:\",inline\"`\n     ... // other fields\n} func (obj *MyAwesomeAPIObject) SetGroupVersionKind(gvk *metav1.GroupVersionKind) { metav1.UpdateTypeMeta(obj,gvk) }; GroupVersionKind() *GroupVersionKind\n\nTypeMeta is provided here for convenience. You may use it directly from this package or define your own with the same fields.",
					Properties: map[string]spec.Schema{
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/runtime.Unknown": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Unknown allows api objects with unknown types to be passed-through. This can be used to deal with the API objects from a plug-in. Unknown objects still have functioning TypeMeta features-- kind, version, etc. metadata and field mutatation.",
					Properties: map[string]spec.Schema{
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"Raw": {
							SchemaProps: spec.SchemaProps{
								Description: "Raw will hold the complete serialized object which couldn't be matched with a registered type. Most likely, nothing should be done with this except for passing it through the system.",
								Type:        []string{"string"},
								Format:      "byte",
							},
						},
						"ContentEncoding": {
							SchemaProps: spec.SchemaProps{
								Description: "ContentEncoding is encoding used to encode 'Raw' data. Unspecified means no encoding.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ContentType": {
							SchemaProps: spec.SchemaProps{
								Description: "ContentType  is serialization method used to serialize 'Raw'. Unspecified means ContentTypeJSON.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"Raw", "ContentEncoding", "ContentType"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIGroup contains the name, the supported versions, and the preferred version of a group.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "name is the name of the group.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"versions": {
							SchemaProps: spec.SchemaProps{
								Description: "versions are the versions supported in this group.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery"),
										},
									},
								},
							},
						},
						"preferredVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "preferredVersion is the version preferred by the API server, which probably is the storage version.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery"),
							},
						},
						"serverAddressByClientCIDRs": {
							SchemaProps: spec.SchemaProps{
								Description: "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"),
										},
									},
								},
							},
						},
					},
					Required: []string{"name", "versions", "serverAddressByClientCIDRs"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery", "k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroupList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"groups": {
							SchemaProps: spec.SchemaProps{
								Description: "groups is a list of APIGroup.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup"),
										},
									},
								},
							},
						},
					},
					Required: []string{"groups"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIResource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIResource specifies the name of a resource and whether it is namespaced.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "name is the name of the resource.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"namespaced": {
							SchemaProps: spec.SchemaProps{
								Description: "namespaced indicates if a resource is namespaced or not.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"verbs": {
							SchemaProps: spec.SchemaProps{
								Description: "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"shortNames": {
							SchemaProps: spec.SchemaProps{
								Description: "shortNames is a list of suggested short names of the resource.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"name", "namespaced", "kind", "verbs"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIResourceList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"groupVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "groupVersion is the group and version this APIResourceList is for.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "resources contains the name of the resources and if they are namespaced.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.APIResource"),
										},
									},
								},
							},
						},
					},
					Required: []string{"groupVersion", "resources"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.APIResource"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIVersions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"versions": {
							SchemaProps: spec.SchemaProps{
								Description: "versions are the api versions that are available.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"serverAddressByClientCIDRs": {
							SchemaProps: spec.SchemaProps{
								Description: "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"),
										},
									},
								},
							},
						},
					},
					Required: []string{"versions", "serverAddressByClientCIDRs"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.DeleteOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "DeleteOptions may be provided when deleting an API object.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"gracePeriodSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"preconditions": {
							SchemaProps: spec.SchemaProps{
								Description: "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions"),
							},
						},
						"orphanDependents": {
							SchemaProps: spec.SchemaProps{
								Description: "Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Duration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
					Properties: map[string]spec.Schema{
						"Duration": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int64",
							},
						},
					},
					Required: []string{"Duration"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.ExportOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ExportOptions is the query options to the standard REST get call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"export": {
							SchemaProps: spec.SchemaProps{
								Description: "Should this value be exported.  Export strips fields that a user can not specify.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"exact": {
							SchemaProps: spec.SchemaProps{
								Description: "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"export", "exact"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GetOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GetOptions is the standard query options to the standard REST get call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resourceVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "When specified: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupKind": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
					Properties: map[string]spec.Schema{
						"Group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"Kind": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"Group", "Kind"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupResource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupResource specifies a Group and a Resource, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
					Properties: map[string]spec.Schema{
						"Group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"Resource": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"Group", "Resource"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersion": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupVersion contains the \"group\" and the \"version\", which uniquely identifies the API.",
					Properties: map[string]spec.Schema{
						"Group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"Version": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"Group", "Version"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.",
					Properties: map[string]spec.Schema{
						"groupVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "groupVersion specifies the API group and version in the form \"group/version\"",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"version": {
							SchemaProps: spec.SchemaProps{
								Description: "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"groupVersion", "version"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionKind": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling",
					Properties: map[string]spec.Schema{
						"Group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"Version": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"Kind": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"Group", "Version", "Kind"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionResource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupVersionResource unambiguously identifies a resource.  It doesn't anonymously include GroupVersion to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling",
					Properties: map[string]spec.Schema{
						"Group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"Version": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"Resource": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"Group", "Version", "Resource"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.InternalEvent": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "InternalEvent makes watch.Event versioned",
					Properties: map[string]spec.Schema{
						"Type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"Object": {
							SchemaProps: spec.SchemaProps{
								Description: "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *api.Status is recommended; other types may make sense\n   depending on context.",
								Ref:         ref("k8s.io/apimachinery/pkg/runtime.Object"),
							},
						},
					},
					Required: []string{"Type", "Object"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/runtime.Object"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
					Properties: map[string]spec.Schema{
						"matchLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"matchExpressions": {
							SchemaProps: spec.SchemaProps{
								Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
					Properties: map[string]spec.Schema{
						"key": {
							SchemaProps: spec.SchemaProps{
								Description: "key is the label key that the selector applies to.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"operator": {
							SchemaProps: spec.SchemaProps{
								Description: "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"values": {
							SchemaProps: spec.SchemaProps{
								Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"key", "operator"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
					Properties: map[string]spec.Schema{
						"selfLink": {
							SchemaProps: spec.SchemaProps{
								Description: "SelfLink is a URL representing this object. Populated by the system. Read-only.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resourceVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.ListOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ListOptions is the query options to a standard REST list call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"labelSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fieldSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"watch": {
							SchemaProps: spec.SchemaProps{
								Description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"resourceVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"timeoutSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Timeout for the list/watch call.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"generateName": {
							SchemaProps: spec.SchemaProps{
								Description: "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"namespace": {
							SchemaProps: spec.SchemaProps{
								Description: "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"selfLink": {
							SchemaProps: spec.SchemaProps{
								Description: "SelfLink is a URL representing this object. Populated by the system. Read-only.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"uid": {
							SchemaProps: spec.SchemaProps{
								Description: "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resourceVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"generation": {
							SchemaProps: spec.SchemaProps{
								Description: "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"creationTimestamp": {
							SchemaProps: spec.SchemaProps{
								Description: "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"deletionTimestamp": {
							SchemaProps: spec.SchemaProps{
								Description: "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"deletionGracePeriodSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"labels": {
							SchemaProps: spec.SchemaProps{
								Description: "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"annotations": {
							SchemaProps: spec.SchemaProps{
								Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"ownerReferences": {
							SchemaProps: spec.SchemaProps{
								Description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference"),
										},
									},
								},
							},
						},
						"finalizers": {
							SchemaProps: spec.SchemaProps{
								Description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"clusterName": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
					Properties: map[string]spec.Schema{
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "API version of the referent.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind of the referent. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"uid": {
							SchemaProps: spec.SchemaProps{
								Description: "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"controller": {
							SchemaProps: spec.SchemaProps{
								Description: "If true, this reference points to the managing controller.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"apiVersion", "kind", "name", "uid"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Patch": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
					Properties: map[string]spec.Schema{
						"uid": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies the target UID.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.RootPaths": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "RootPaths lists the paths available at root. For example: \"/healthz\", \"/apis\".",
					Properties: map[string]spec.Schema{
						"paths": {
							SchemaProps: spec.SchemaProps{
								Description: "paths are the paths available at root.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"paths"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
					Properties: map[string]spec.Schema{
						"clientCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "The CIDR with which clients can match their IP to figure out the server address that they should use.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"serverAddress": {
							SchemaProps: spec.SchemaProps{
								Description: "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"clientCIDR", "serverAddress"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Status": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Status is a return value for calls that don't return other objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the operation. One of: \"Success\" or \"Failure\". More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human-readable description of the status of this operation.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"details": {
							SchemaProps: spec.SchemaProps{
								Description: "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails"),
							},
						},
						"code": {
							SchemaProps: spec.SchemaProps{
								Description: "Suggested HTTP return code for this status, 0 if not set.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
					Properties: map[string]spec.Schema{
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"field": {
							SchemaProps: spec.SchemaProps{
								Description: "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"group": {
							SchemaProps: spec.SchemaProps{
								Description: "The group attribute of the resource associated with the status StatusReason.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"causes": {
							SchemaProps: spec.SchemaProps{
								Description: "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause"),
										},
									},
								},
							},
						},
						"retryAfterSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the time in seconds before the operation should be retried.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause"},
		},
		"k8s.io/kubernetes/cmd/libs/go2idl/client-gen/test_apis/testgroup/v1.TestType": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kubernetes/cmd/libs/go2idl/client-gen/test_apis/testgroup/v1.TestTypeStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kubernetes/cmd/libs/go2idl/client-gen/test_apis/testgroup/v1.TestTypeStatus"},
		},
		"k8s.io/kubernetes/cmd/libs/go2idl/client-gen/test_apis/testgroup/v1.TestTypeList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kubernetes/cmd/libs/go2idl/client-gen/test_apis/testgroup/v1.TestType"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/kubernetes/cmd/libs/go2idl/client-gen/test_apis/testgroup/v1.TestType"},
		},
		"k8s.io/kubernetes/cmd/libs/go2idl/client-gen/test_apis/testgroup/v1.TestTypeStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"Blah": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"Blah"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Time": v1.Time{}.OpenAPIDefinition(),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Timestamp": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Timestamp is a struct that is equivalent to Time, but intended for protobuf marshalling/unmarshalling. It is generated into a serialization that matches Time. Do not use in Go structs.",
					Properties: map[string]spec.Schema{
						"seconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"nanos": {
							SchemaProps: spec.SchemaProps{
								Description: "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
					Required: []string{"seconds", "nanos"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.WatchEvent": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Event represents a single event to a watched resource.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"object": {
							SchemaProps: spec.SchemaProps{
								Description: "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *Status is recommended; other types may make sense\n   depending on context.",
								Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
							},
						},
					},
					Required: []string{"type", "object"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/runtime.RawExtension"},
		},
		"k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeProxyConfiguration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"bindAddress": {
							SchemaProps: spec.SchemaProps{
								Description: "bindAddress is the IP address for the proxy server to serve on (set to 0.0.0.0 for all interfaces)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"clusterCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "clusterCIDR is the CIDR range of the pods in the cluster. It is used to bridge traffic coming from outside of the cluster. If not provided, no off-cluster bridging will be performed.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"healthzBindAddress": {
							SchemaProps: spec.SchemaProps{
								Description: "healthzBindAddress is the IP address for the health check server to serve on, defaulting to 127.0.0.1 (set to 0.0.0.0 for all interfaces)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"healthzPort": {
							SchemaProps: spec.SchemaProps{
								Description: "healthzPort is the port to bind the health check server. Use 0 to disable.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"hostnameOverride": {
							SchemaProps: spec.SchemaProps{
								Description: "hostnameOverride, if non-empty, will be used as the identity instead of the actual hostname.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"iptablesMasqueradeBit": {
							SchemaProps: spec.SchemaProps{
								Description: "iptablesMasqueradeBit is the bit of the iptables fwmark space to use for SNAT if using the pure iptables proxy mode. Values must be within the range [0, 31].",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"iptablesSyncPeriodSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "iptablesSyncPeriod is the period that iptables rules are refreshed (e.g. '5s', '1m', '2h22m').  Must be greater than 0.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"iptablesMinSyncPeriodSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "iptablesMinSyncPeriod is the minimum period that iptables rules are refreshed (e.g. '5s', '1m', '2h22m').",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"kubeconfigPath": {
							SchemaProps: spec.SchemaProps{
								Description: "kubeconfigPath is the path to the kubeconfig file with authorization information (the master location is set by the master flag).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"masqueradeAll": {
							SchemaProps: spec.SchemaProps{
								Description: "masqueradeAll tells kube-proxy to SNAT everything if using the pure iptables proxy mode.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"master": {
							SchemaProps: spec.SchemaProps{
								Description: "master is the address of the Kubernetes API server (overrides any value in kubeconfig)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"oomScoreAdj": {
							SchemaProps: spec.SchemaProps{
								Description: "oomScoreAdj is the oom-score-adj value for kube-proxy process. Values must be within the range [-1000, 1000]",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"mode": {
							SchemaProps: spec.SchemaProps{
								Description: "mode specifies which proxy mode to use.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"portRange": {
							SchemaProps: spec.SchemaProps{
								Description: "portRange is the range of host ports (beginPort-endPort, inclusive) that may be consumed in order to proxy service traffic. If unspecified (0-0) then ports will be randomly chosen.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resourceContainer": {
							SchemaProps: spec.SchemaProps{
								Description: "resourceContainer is the bsolute name of the resource-only container to create and run the Kube-proxy in (Default: /kube-proxy).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"udpTimeoutMilliseconds": {
							SchemaProps: spec.SchemaProps{
								Description: "udpIdleTimeout is how long an idle UDP connection will be kept open (e.g. '250ms', '2s'). Must be greater than 0. Only applicable for proxyMode=userspace.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"conntrackMax": {
							SchemaProps: spec.SchemaProps{
								Description: "conntrackMax is the maximum number of NAT connections to track (0 to leave as-is).  This takes precedence over conntrackMaxPerCore and conntrackMin.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"conntrackMaxPerCore": {
							SchemaProps: spec.SchemaProps{
								Description: "conntrackMaxPerCore is the maximum number of NAT connections to track per CPU core (0 to leave the limit as-is and ignore conntrackMin).",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"conntrackMin": {
							SchemaProps: spec.SchemaProps{
								Description: "conntrackMin is the minimum value of connect-tracking records to allocate, regardless of conntrackMaxPerCore (set conntrackMaxPerCore=0 to leave the limit as-is).",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"conntrackTCPEstablishedTimeout": {
							SchemaProps: spec.SchemaProps{
								Description: "conntrackTCPEstablishedTimeout is how long an idle TCP connection will be kept open (e.g. '2s').  Must be greater than 0.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"conntrackTCPCloseWaitTimeout": {
							SchemaProps: spec.SchemaProps{
								Description: "conntrackTCPCloseWaitTimeout is how long an idle conntrack entry in CLOSE_WAIT state will remain in the conntrack table. (e.g. '60s'). Must be greater than 0 to set.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
					},
					Required: []string{"bindAddress", "clusterCIDR", "healthzBindAddress", "healthzPort", "hostnameOverride", "iptablesMasqueradeBit", "iptablesSyncPeriodSeconds", "iptablesMinSyncPeriodSeconds", "kubeconfigPath", "masqueradeAll", "master", "oomScoreAdj", "mode", "portRange", "resourceContainer", "udpTimeoutMilliseconds", "conntrackMax", "conntrackMaxPerCore", "conntrackMin", "conntrackTCPEstablishedTimeout", "conntrackTCPCloseWaitTimeout"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
		},
		"k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeSchedulerConfiguration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"port": {
							SchemaProps: spec.SchemaProps{
								Description: "port is the port that the scheduler's http service runs on.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"address": {
							SchemaProps: spec.SchemaProps{
								Description: "address is the IP address to serve on.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"algorithmProvider": {
							SchemaProps: spec.SchemaProps{
								Description: "algorithmProvider is the scheduling algorithm provider to use.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"policyConfigFile": {
							SchemaProps: spec.SchemaProps{
								Description: "policyConfigFile is the filepath to the scheduler policy configuration.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enableProfiling": {
							SchemaProps: spec.SchemaProps{
								Description: "enableProfiling enables profiling via web interface.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"enableContentionProfiling": {
							SchemaProps: spec.SchemaProps{
								Description: "enableContentionProfiling enables lock contention profiling, if enableProfiling is true.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"contentType": {
							SchemaProps: spec.SchemaProps{
								Description: "contentType is contentType of requests sent to apiserver.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubeAPIQPS": {
							SchemaProps: spec.SchemaProps{
								Description: "kubeAPIQPS is the QPS to use while talking with kubernetes apiserver.",
								Type:        []string{"number"},
								Format:      "float",
							},
						},
						"kubeAPIBurst": {
							SchemaProps: spec.SchemaProps{
								Description: "kubeAPIBurst is the QPS burst to use while talking with kubernetes apiserver.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"schedulerName": {
							SchemaProps: spec.SchemaProps{
								Description: "schedulerName is name of the scheduler, used to select which pods will be processed by this scheduler, based on pod's \"spec.SchedulerName\".",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"hardPodAffinitySymmetricWeight": {
							SchemaProps: spec.SchemaProps{
								Description: "RequiredDuringScheduling affinity is not symmetric, but there is an implicit PreferredDuringScheduling affinity rule corresponding to every RequiredDuringScheduling affinity rule. HardPodAffinitySymmetricWeight represents the weight of implicit PreferredDuringScheduling affinity rule, in the range 0-100.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"failureDomains": {
							SchemaProps: spec.SchemaProps{
								Description: "Indicate the \"all topologies\" set for empty topologyKey when it's used for PreferredDuringScheduling pod anti-affinity.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"leaderElection": {
							SchemaProps: spec.SchemaProps{
								Description: "leaderElection defines the configuration of leader election client.",
								Ref:         ref("k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.LeaderElectionConfiguration"),
							},
						},
					},
					Required: []string{"port", "address", "algorithmProvider", "policyConfigFile", "enableProfiling", "enableContentionProfiling", "contentType", "kubeAPIQPS", "kubeAPIBurst", "schedulerName", "hardPodAffinitySymmetricWeight", "failureDomains", "leaderElection"},
				},
			},
			Dependencies: []string{
				"k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.LeaderElectionConfiguration"},
		},
		"k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletAnonymousAuthentication": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"enabled": {
							SchemaProps: spec.SchemaProps{
								Description: "enabled allows anonymous requests to the kubelet server. Requests that are not rejected by another authentication method are treated as anonymous requests. Anonymous requests have a username of system:anonymous, and a group name of system:unauthenticated.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"enabled"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletAuthentication": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"x509": {
							SchemaProps: spec.SchemaProps{
								Description: "x509 contains settings related to x509 client certificate authentication",
								Ref:         ref("k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletX509Authentication"),
							},
						},
						"webhook": {
							SchemaProps: spec.SchemaProps{
								Description: "webhook contains settings related to webhook bearer token authentication",
								Ref:         ref("k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletWebhookAuthentication"),
							},
						},
						"anonymous": {
							SchemaProps: spec.SchemaProps{
								Description: "anonymous contains settings related to anonymous authentication",
								Ref:         ref("k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletAnonymousAuthentication"),
							},
						},
					},
					Required: []string{"x509", "webhook", "anonymous"},
				},
			},
			Dependencies: []string{
				"k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletAnonymousAuthentication", "k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletWebhookAuthentication", "k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletX509Authentication"},
		},
		"k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletAuthorization": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"mode": {
							SchemaProps: spec.SchemaProps{
								Description: "mode is the authorization mode to apply to requests to the kubelet server. Valid values are AlwaysAllow and Webhook. Webhook mode uses the SubjectAccessReview API to determine authorization.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"webhook": {
							SchemaProps: spec.SchemaProps{
								Description: "webhook contains settings related to Webhook authorization.",
								Ref:         ref("k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletWebhookAuthorization"),
							},
						},
					},
					Required: []string{"mode", "webhook"},
				},
			},
			Dependencies: []string{
				"k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletWebhookAuthorization"},
		},
		"k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletConfiguration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"podManifestPath": {
							SchemaProps: spec.SchemaProps{
								Description: "podManifestPath is the path to the directory containing pod manifests to run, or the path to a single manifest file",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"syncFrequency": {
							SchemaProps: spec.SchemaProps{
								Description: "syncFrequency is the max period between synchronizing running containers and config",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"fileCheckFrequency": {
							SchemaProps: spec.SchemaProps{
								Description: "fileCheckFrequency is the duration between checking config files for new data",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"httpCheckFrequency": {
							SchemaProps: spec.SchemaProps{
								Description: "httpCheckFrequency is the duration between checking http for new data",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"manifestURL": {
							SchemaProps: spec.SchemaProps{
								Description: "manifestURL is the URL for accessing the container manifest",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"manifestURLHeader": {
							SchemaProps: spec.SchemaProps{
								Description: "manifestURLHeader is the HTTP header to use when accessing the manifest URL, with the key separated from the value with a ':', as in 'key:value'",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enableServer": {
							SchemaProps: spec.SchemaProps{
								Description: "enableServer enables the Kubelet's server",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"address": {
							SchemaProps: spec.SchemaProps{
								Description: "address is the IP address for the Kubelet to serve on (set to 0.0.0.0 for all interfaces)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"port": {
							SchemaProps: spec.SchemaProps{
								Description: "port is the port for the Kubelet to serve on.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"readOnlyPort": {
							SchemaProps: spec.SchemaProps{
								Description: "readOnlyPort is the read-only port for the Kubelet to serve on with no authentication/authorization (set to 0 to disable)",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"tlsCertFile": {
							SchemaProps: spec.SchemaProps{
								Description: "tlsCertFile is the file containing x509 Certificate for HTTPS.  (CA cert, if any, concatenated after server cert). If tlsCertFile and tlsPrivateKeyFile are not provided, a self-signed certificate and key are generated for the public address and saved to the directory passed to certDir.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"tlsPrivateKeyFile": {
							SchemaProps: spec.SchemaProps{
								Description: "tlsPrivateKeyFile is the ile containing x509 private key matching tlsCertFile.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"certDirectory": {
							SchemaProps: spec.SchemaProps{
								Description: "certDirectory is the directory where the TLS certs are located (by default /var/run/kubernetes). If tlsCertFile and tlsPrivateKeyFile are provided, this flag will be ignored.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"authentication": {
							SchemaProps: spec.SchemaProps{
								Description: "authentication specifies how requests to the Kubelet's server are authenticated",
								Ref:         ref("k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletAuthentication"),
							},
						},
						"authorization": {
							SchemaProps: spec.SchemaProps{
								Description: "authorization specifies how requests to the Kubelet's server are authorized",
								Ref:         ref("k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletAuthorization"),
							},
						},
						"hostnameOverride": {
							SchemaProps: spec.SchemaProps{
								Description: "hostnameOverride is the hostname used to identify the kubelet instead of the actual hostname.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"podInfraContainerImage": {
							SchemaProps: spec.SchemaProps{
								Description: "podInfraContainerImage is the image whose network/ipc namespaces containers in each pod will use.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"dockerEndpoint": {
							SchemaProps: spec.SchemaProps{
								Description: "dockerEndpoint is the path to the docker endpoint to communicate with.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"rootDirectory": {
							SchemaProps: spec.SchemaProps{
								Description: "rootDirectory is the directory path to place kubelet files (volume mounts,etc).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"seccompProfileRoot": {
							SchemaProps: spec.SchemaProps{
								Description: "seccompProfileRoot is the directory path for seccomp profiles.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"allowPrivileged": {
							SchemaProps: spec.SchemaProps{
								Description: "allowPrivileged enables containers to request privileged mode. Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"hostNetworkSources": {
							SchemaProps: spec.SchemaProps{
								Description: "hostNetworkSources is a comma-separated list of sources from which the Kubelet allows pods to use of host network. Defaults to \"*\". Valid options are \"file\", \"http\", \"api\", and \"*\" (all sources).",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"hostPIDSources": {
							SchemaProps: spec.SchemaProps{
								Description: "hostPIDSources is a comma-separated list of sources from which the Kubelet allows pods to use the host pid namespace. Defaults to \"*\".",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"hostIPCSources": {
							SchemaProps: spec.SchemaProps{
								Description: "hostIPCSources is a comma-separated list of sources from which the Kubelet allows pods to use the host ipc namespace. Defaults to \"*\".",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"registryPullQPS": {
							SchemaProps: spec.SchemaProps{
								Description: "registryPullQPS is the limit of registry pulls per second. If 0, unlimited. Set to 0 for no limit. Defaults to 5.0.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"registryBurst": {
							SchemaProps: spec.SchemaProps{
								Description: "registryBurst is the maximum size of a bursty pulls, temporarily allows pulls to burst to this number, while still not exceeding registryQps. Only used if registryQPS > 0.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"eventRecordQPS": {
							SchemaProps: spec.SchemaProps{
								Description: "eventRecordQPS is the maximum event creations per second. If 0, there is no limit enforced.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"eventBurst": {
							SchemaProps: spec.SchemaProps{
								Description: "eventBurst is the maximum size of a bursty event records, temporarily allows event records to burst to this number, while still not exceeding event-qps. Only used if eventQps > 0",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"enableDebuggingHandlers": {
							SchemaProps: spec.SchemaProps{
								Description: "enableDebuggingHandlers enables server endpoints for log collection and local running of containers and commands",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"minimumGCAge": {
							SchemaProps: spec.SchemaProps{
								Description: "minimumGCAge is the minimum age for a finished container before it is garbage collected.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"maxPerPodContainerCount": {
							SchemaProps: spec.SchemaProps{
								Description: "maxPerPodContainerCount is the maximum number of old instances to retain per container. Each container takes up some disk space.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"maxContainerCount": {
							SchemaProps: spec.SchemaProps{
								Description: "maxContainerCount is the maximum number of old instances of containers to retain globally. Each container takes up some disk space.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"cAdvisorPort": {
							SchemaProps: spec.SchemaProps{
								Description: "cAdvisorPort is the port of the localhost cAdvisor endpoint",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"healthzPort": {
							SchemaProps: spec.SchemaProps{
								Description: "healthzPort is the port of the localhost healthz endpoint",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"healthzBindAddress": {
							SchemaProps: spec.SchemaProps{
								Description: "healthzBindAddress is the IP address for the healthz server to serve on.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"oomScoreAdj": {
							SchemaProps: spec.SchemaProps{
								Description: "oomScoreAdj is The oom-score-adj value for kubelet process. Values must be within the range [-1000, 1000].",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"registerNode": {
							SchemaProps: spec.SchemaProps{
								Description: "registerNode enables automatic registration with the apiserver.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"clusterDomain": {
							SchemaProps: spec.SchemaProps{
								Description: "clusterDomain is the DNS domain for this cluster. If set, kubelet will configure all containers to search this domain in addition to the host's search domains.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"masterServiceNamespace": {
							SchemaProps: spec.SchemaProps{
								Description: "masterServiceNamespace is The namespace from which the kubernetes master services should be injected into pods.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"clusterDNS": {
							SchemaProps: spec.SchemaProps{
								Description: "clusterDNS is a list of IP address for the cluster DNS server.  If set, kubelet will configure all containers to use this for DNS resolution instead of the host's DNS servers",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"streamingConnectionIdleTimeout": {
							SchemaProps: spec.SchemaProps{
								Description: "streamingConnectionIdleTimeout is the maximum time a streaming connection can be idle before the connection is automatically closed.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"nodeStatusUpdateFrequency": {
							SchemaProps: spec.SchemaProps{
								Description: "nodeStatusUpdateFrequency is the frequency that kubelet posts node status to master. Note: be cautious when changing the constant, it must work with nodeMonitorGracePeriod in nodecontroller.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"imageMinimumGCAge": {
							SchemaProps: spec.SchemaProps{
								Description: "imageMinimumGCAge is the minimum age for an unused image before it is garbage collected.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"imageGCHighThresholdPercent": {
							SchemaProps: spec.SchemaProps{
								Description: "imageGCHighThresholdPercent is the percent of disk usage after which image garbage collection is always run. The percent is calculated as this field value out of 100.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"imageGCLowThresholdPercent": {
							SchemaProps: spec.SchemaProps{
								Description: "imageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The percent is calculated as this field value out of 100.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"lowDiskSpaceThresholdMB": {
							SchemaProps: spec.SchemaProps{
								Description: "lowDiskSpaceThresholdMB is the absolute free disk space, in MB, to maintain. When disk space falls below this threshold, new pods would be rejected.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"volumeStatsAggPeriod": {
							SchemaProps: spec.SchemaProps{
								Description: "How frequently to calculate and cache volume disk usage for all pods",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"networkPluginName": {
							SchemaProps: spec.SchemaProps{
								Description: "networkPluginName is the name of the network plugin to be invoked for various events in kubelet/pod lifecycle",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"networkPluginDir": {
							SchemaProps: spec.SchemaProps{
								Description: "networkPluginDir is the full path of the directory in which to search for network plugins (and, for backwards-compat, CNI config files)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cniConfDir": {
							SchemaProps: spec.SchemaProps{
								Description: "CNIConfDir is the full path of the directory in which to search for CNI config files",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cniBinDir": {
							SchemaProps: spec.SchemaProps{
								Description: "CNIBinDir is the full path of the directory in which to search for CNI plugin binaries",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"networkPluginMTU": {
							SchemaProps: spec.SchemaProps{
								Description: "networkPluginMTU is the MTU to be passed to the network plugin, and overrides the default MTU for cases where it cannot be automatically computed (such as IPSEC).",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"volumePluginDir": {
							SchemaProps: spec.SchemaProps{
								Description: "volumePluginDir is the full path of the directory in which to search for additional third party volume plugins",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cloudProvider": {
							SchemaProps: spec.SchemaProps{
								Description: "cloudProvider is the provider for cloud services.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cloudConfigFile": {
							SchemaProps: spec.SchemaProps{
								Description: "cloudConfigFile is the path to the cloud provider configuration file.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubeletCgroups": {
							SchemaProps: spec.SchemaProps{
								Description: "kubeletCgroups is the absolute name of cgroups to isolate the kubelet in.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"runtimeCgroups": {
							SchemaProps: spec.SchemaProps{
								Description: "runtimeCgroups are cgroups that container runtime is expected to be isolated in.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"systemCgroups": {
							SchemaProps: spec.SchemaProps{
								Description: "systemCgroups is absolute name of cgroups in which to place all non-kernel processes that are not already in a container. Empty for no container. Rolling back the flag requires a reboot.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cgroupRoot": {
							SchemaProps: spec.SchemaProps{
								Description: "cgroupRoot is the root cgroup to use for pods. This is handled by the container runtime on a best effort basis.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cgroupsPerQOS": {
							SchemaProps: spec.SchemaProps{
								Description: "Enable QoS based Cgroup hierarchy: top level cgroups for QoS Classes And all Burstable and BestEffort pods are brought up under their specific top level QoS cgroup.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"cgroupDriver": {
							SchemaProps: spec.SchemaProps{
								Description: "driver that the kubelet uses to manipulate cgroups on the host (cgroupfs or systemd)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"containerRuntime": {
							SchemaProps: spec.SchemaProps{
								Description: "containerRuntime is the container runtime to use.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"remoteRuntimeEndpoint": {
							SchemaProps: spec.SchemaProps{
								Description: "remoteRuntimeEndpoint is the endpoint of remote runtime service",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"remoteImageEndpoint": {
							SchemaProps: spec.SchemaProps{
								Description: "remoteImageEndpoint is the endpoint of remote image service",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"runtimeRequestTimeout": {
							SchemaProps: spec.SchemaProps{
								Description: "runtimeRequestTimeout is the timeout for all runtime requests except long running requests - pull, logs, exec and attach.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"imagePullProgressDeadline": {
							SchemaProps: spec.SchemaProps{
								Description: "If no pulling progress is made before the deadline imagePullProgressDeadline, the image pulling will be cancelled. Defaults to 1m0s.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"rktPath": {
							SchemaProps: spec.SchemaProps{
								Description: "rktPath is the  path of rkt binary. Leave empty to use the first rkt in $PATH.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"experimentalMounterPath": {
							SchemaProps: spec.SchemaProps{
								Description: "experimentalMounterPath is the path to mounter binary. If not set, kubelet will attempt to use mount binary that is available via $PATH,",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"rktAPIEndpoint": {
							SchemaProps: spec.SchemaProps{
								Description: "rktApiEndpoint is the endpoint of the rkt API service to communicate with.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"rktStage1Image": {
							SchemaProps: spec.SchemaProps{
								Description: "rktStage1Image is the image to use as stage1. Local paths and http/https URLs are supported.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lockFilePath": {
							SchemaProps: spec.SchemaProps{
								Description: "lockFilePath is the path that kubelet will use to as a lock file. It uses this file as a lock to synchronize with other kubelet processes that may be running.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"exitOnLockContention": {
							SchemaProps: spec.SchemaProps{
								Description: "ExitOnLockContention is a flag that signifies to the kubelet that it is running in \"bootstrap\" mode. This requires that 'LockFilePath' has been set. This will cause the kubelet to listen to inotify events on the lock file, releasing it and exiting when another process tries to open that file.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"hairpinMode": {
							SchemaProps: spec.SchemaProps{
								Description: "How should the kubelet configure the container bridge for hairpin packets. Setting this flag allows endpoints in a Service to loadbalance back to themselves if they should try to access their own Service. Values:\n  \"promiscuous-bridge\": make the container bridge promiscuous.\n  \"hairpin-veth\":       set the hairpin flag on container veth interfaces.\n  \"none\":               do nothing.\nGenerally, one must set --hairpin-mode=veth-flag to achieve hairpin NAT, because promiscous-bridge assumes the existence of a container bridge named cbr0.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"babysitDaemons": {
							SchemaProps: spec.SchemaProps{
								Description: "The node has babysitter process monitoring docker and kubelet.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"maxPods": {
							SchemaProps: spec.SchemaProps{
								Description: "maxPods is the number of pods that can run on this Kubelet.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"nvidiaGPUs": {
							SchemaProps: spec.SchemaProps{
								Description: "nvidiaGPUs is the number of NVIDIA GPU devices on this node.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"dockerExecHandlerName": {
							SchemaProps: spec.SchemaProps{
								Description: "dockerExecHandlerName is the handler to use when executing a command in a container. Valid values are 'native' and 'nsenter'. Defaults to 'native'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"podCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "The CIDR to use for pod IP addresses, only used in standalone mode. In cluster mode, this is obtained from the master.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resolvConf": {
							SchemaProps: spec.SchemaProps{
								Description: "ResolverConfig is the resolver configuration file used as the basis for the container DNS resolution configuration.\"), []",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cpuCFSQuota": {
							SchemaProps: spec.SchemaProps{
								Description: "cpuCFSQuota is Enable CPU CFS quota enforcement for containers that specify CPU limits",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"containerized": {
							SchemaProps: spec.SchemaProps{
								Description: "containerized should be set to true if kubelet is running in a container.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"maxOpenFiles": {
							SchemaProps: spec.SchemaProps{
								Description: "maxOpenFiles is Number of files that can be opened by Kubelet process.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"registerSchedulable": {
							SchemaProps: spec.SchemaProps{
								Description: "registerSchedulable tells the kubelet to register the node as schedulable. Won't have any effect if register-node is false. DEPRECATED: use registerWithTaints instead",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"registerWithTaints": {
							SchemaProps: spec.SchemaProps{
								Description: "registerWithTaints are an array of taints to add to a node object when the kubelet registers itself. This only takes effect when registerNode is true and upon the initial registration of the node.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apis/pkg/api/v1.Taint"),
										},
									},
								},
							},
						},
						"contentType": {
							SchemaProps: spec.SchemaProps{
								Description: "contentType is contentType of requests sent to apiserver.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubeAPIQPS": {
							SchemaProps: spec.SchemaProps{
								Description: "kubeAPIQPS is the QPS to use while talking with kubernetes apiserver",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"kubeAPIBurst": {
							SchemaProps: spec.SchemaProps{
								Description: "kubeAPIBurst is the burst to allow while talking with kubernetes apiserver",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"serializeImagePulls": {
							SchemaProps: spec.SchemaProps{
								Description: "serializeImagePulls when enabled, tells the Kubelet to pull images one at a time. We recommend *not* changing the default value on nodes that run docker daemon with version  < 1.9 or an Aufs storage backend. Issue #10959 has more details.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"outOfDiskTransitionFrequency": {
							SchemaProps: spec.SchemaProps{
								Description: "outOfDiskTransitionFrequency is duration for which the kubelet has to wait before transitioning out of out-of-disk node condition status.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"nodeIP": {
							SchemaProps: spec.SchemaProps{
								Description: "nodeIP is IP address of the node. If set, kubelet will use this IP address for the node.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"nodeLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "nodeLabels to add when registering the node in the cluster.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"nonMasqueradeCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "nonMasqueradeCIDR configures masquerading: traffic to IPs outside this range will use IP masquerade.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enableCustomMetrics": {
							SchemaProps: spec.SchemaProps{
								Description: "enable gathering custom metrics.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"evictionHard": {
							SchemaProps: spec.SchemaProps{
								Description: "Comma-delimited list of hard eviction expressions.  For example, 'memory.available<300Mi'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"evictionSoft": {
							SchemaProps: spec.SchemaProps{
								Description: "Comma-delimited list of soft eviction expressions.  For example, 'memory.available<300Mi'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"evictionSoftGracePeriod": {
							SchemaProps: spec.SchemaProps{
								Description: "Comma-delimeted list of grace periods for each soft eviction signal.  For example, 'memory.available=30s'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"evictionPressureTransitionPeriod": {
							SchemaProps: spec.SchemaProps{
								Description: "Duration for which the kubelet has to wait before transitioning out of an eviction pressure condition.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"evictionMaxPodGracePeriod": {
							SchemaProps: spec.SchemaProps{
								Description: "Maximum allowed grace period (in seconds) to use when terminating pods in response to a soft eviction threshold being met.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"evictionMinimumReclaim": {
							SchemaProps: spec.SchemaProps{
								Description: "Comma-delimited list of minimum reclaims (e.g. imagefs.available=2Gi) that describes the minimum amount of resource the kubelet will reclaim when performing a pod eviction if that resource is under pressure.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"experimentalKernelMemcgNotification": {
							SchemaProps: spec.SchemaProps{
								Description: "If enabled, the kubelet will integrate with the kernel memcg notification to determine if memory eviction thresholds are crossed rather than polling.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"podsPerCore": {
							SchemaProps: spec.SchemaProps{
								Description: "Maximum number of pods per core. Cannot exceed MaxPods",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"enableControllerAttachDetach": {
							SchemaProps: spec.SchemaProps{
								Description: "enableControllerAttachDetach enables the Attach/Detach controller to manage attachment/detachment of volumes scheduled to this node, and disables kubelet from executing any attach/detach operations",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"systemReserved": {
							SchemaProps: spec.SchemaProps{
								Description: "A set of ResourceName=ResourceQuantity (e.g. cpu=200m,memory=150G) pairs that describe resources reserved for non-kubernetes components. Currently only cpu and memory are supported. [default=none] See http://kubernetes.io/docs/user-guide/compute-resources for more detail.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"kubeReserved": {
							SchemaProps: spec.SchemaProps{
								Description: "A set of ResourceName=ResourceQuantity (e.g. cpu=200m,memory=150G) pairs that describe resources reserved for kubernetes system components. Currently only cpu and memory are supported. [default=none] See http://kubernetes.io/docs/user-guide/compute-resources for more detail.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"protectKernelDefaults": {
							SchemaProps: spec.SchemaProps{
								Description: "Default behaviour for kernel tuning",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"makeIPTablesUtilChains": {
							SchemaProps: spec.SchemaProps{
								Description: "If true, Kubelet ensures a set of iptables rules are present on host. These rules will serve as utility rules for various components, e.g. KubeProxy. The rules will be created based on IPTablesMasqueradeBit and IPTablesDropBit.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"iptablesMasqueradeBit": {
							SchemaProps: spec.SchemaProps{
								Description: "iptablesMasqueradeBit is the bit of the iptables fwmark space to mark for SNAT Values must be within the range [0, 31]. Must be different from other mark bits. Warning: Please match the value of corresponding parameter in kube-proxy",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"iptablesDropBit": {
							SchemaProps: spec.SchemaProps{
								Description: "iptablesDropBit is the bit of the iptables fwmark space to mark for dropping packets. Values must be within the range [0, 31]. Must be different from other mark bits.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"allowedUnsafeSysctls": {
							SchemaProps: spec.SchemaProps{
								Description: "Whitelist of unsafe sysctls or sysctl patterns (ending in *). Use these at your own risk. Resource isolation might be lacking and pod might influence each other on the same node.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"featureGates": {
							SchemaProps: spec.SchemaProps{
								Description: "featureGates is a string of comma-separated key=value pairs that describe feature gates for alpha/experimental features.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enableCRI": {
							SchemaProps: spec.SchemaProps{
								Description: "Enable Container Runtime Interface (CRI) integration.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"experimentalFailSwapOn": {
							SchemaProps: spec.SchemaProps{
								Description: "Tells the Kubelet to fail to start if swap is enabled on the node.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"experimentalCheckNodeCapabilitiesBeforeMount": {
							SchemaProps: spec.SchemaProps{
								Description: "This flag, if set, enables a check prior to mount operations to verify that the required components (binaries, etc.) to mount the volume are available on the underlying node. If the check is enabled and fails the mount operation fails.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"keepTerminatedPodVolumes": {
							SchemaProps: spec.SchemaProps{
								Description: "This flag, if set, instructs the kubelet to keep volumes from terminated pods mounted to the node. This can be useful for debugging volume related issues.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"podManifestPath", "syncFrequency", "fileCheckFrequency", "httpCheckFrequency", "manifestURL", "manifestURLHeader", "enableServer", "address", "port", "readOnlyPort", "tlsCertFile", "tlsPrivateKeyFile", "certDirectory", "authentication", "authorization", "hostnameOverride", "podInfraContainerImage", "dockerEndpoint", "rootDirectory", "seccompProfileRoot", "allowPrivileged", "hostNetworkSources", "hostPIDSources", "hostIPCSources", "registryPullQPS", "registryBurst", "eventRecordQPS", "eventBurst", "enableDebuggingHandlers", "minimumGCAge", "maxPerPodContainerCount", "maxContainerCount", "cAdvisorPort", "healthzPort", "healthzBindAddress", "oomScoreAdj", "registerNode", "clusterDomain", "masterServiceNamespace", "clusterDNS", "streamingConnectionIdleTimeout", "nodeStatusUpdateFrequency", "imageMinimumGCAge", "imageGCHighThresholdPercent", "imageGCLowThresholdPercent", "lowDiskSpaceThresholdMB", "volumeStatsAggPeriod", "networkPluginName", "networkPluginDir", "cniConfDir", "cniBinDir", "networkPluginMTU", "volumePluginDir", "cloudProvider", "cloudConfigFile", "kubeletCgroups", "runtimeCgroups", "systemCgroups", "cgroupRoot", "containerRuntime", "remoteRuntimeEndpoint", "remoteImageEndpoint", "runtimeRequestTimeout", "rktPath", "rktAPIEndpoint", "rktStage1Image", "lockFilePath", "exitOnLockContention", "hairpinMode", "babysitDaemons", "maxPods", "nvidiaGPUs", "dockerExecHandlerName", "podCIDR", "resolvConf", "cpuCFSQuota", "containerized", "maxOpenFiles", "registerSchedulable", "registerWithTaints", "contentType", "kubeAPIQPS", "kubeAPIBurst", "serializeImagePulls", "outOfDiskTransitionFrequency", "nodeIP", "nodeLabels", "nonMasqueradeCIDR", "enableCustomMetrics", "evictionHard", "evictionSoft", "evictionSoftGracePeriod", "evictionPressureTransitionPeriod", "evictionMaxPodGracePeriod", "evictionMinimumReclaim", "experimentalKernelMemcgNotification", "podsPerCore", "enableControllerAttachDetach", "systemReserved", "kubeReserved", "protectKernelDefaults", "makeIPTablesUtilChains", "iptablesMasqueradeBit", "iptablesDropBit"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Duration", "k8s.io/apis/pkg/api/v1.Taint", "k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletAuthentication", "k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletAuthorization"},
		},
		"k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletWebhookAuthentication": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"enabled": {
							SchemaProps: spec.SchemaProps{
								Description: "enabled allows bearer token authentication backed by the tokenreviews.authentication.k8s.io API",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"cacheTTL": {
							SchemaProps: spec.SchemaProps{
								Description: "cacheTTL enables caching of authentication results",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
					},
					Required: []string{"enabled", "cacheTTL"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
		},
		"k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletWebhookAuthorization": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"cacheAuthorizedTTL": {
							SchemaProps: spec.SchemaProps{
								Description: "cacheAuthorizedTTL is the duration to cache 'authorized' responses from the webhook authorizer.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"cacheUnauthorizedTTL": {
							SchemaProps: spec.SchemaProps{
								Description: "cacheUnauthorizedTTL is the duration to cache 'unauthorized' responses from the webhook authorizer.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
					},
					Required: []string{"cacheAuthorizedTTL", "cacheUnauthorizedTTL"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
		},
		"k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.KubeletX509Authentication": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"clientCAFile": {
							SchemaProps: spec.SchemaProps{
								Description: "clientCAFile is the path to a PEM-encoded certificate bundle. If set, any request presenting a client certificate signed by one of the authorities in the bundle is authenticated with a username corresponding to the CommonName, and groups corresponding to the Organization in the client certificate.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"clientCAFile"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1.LeaderElectionConfiguration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LeaderElectionConfiguration defines the configuration of leader election clients for components that can run with leader election enabled.",
					Properties: map[string]spec.Schema{
						"leaderElect": {
							SchemaProps: spec.SchemaProps{
								Description: "leaderElect enables a leader election client to gain leadership before executing the main loop. Enable this when running replicated components for high availability.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"leaseDuration": {
							SchemaProps: spec.SchemaProps{
								Description: "leaseDuration is the duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate. This is only applicable if leader election is enabled.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"renewDeadline": {
							SchemaProps: spec.SchemaProps{
								Description: "renewDeadline is the interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration. This is only applicable if leader election is enabled.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"retryPeriod": {
							SchemaProps: spec.SchemaProps{
								Description: "retryPeriod is the duration the clients should wait between attempting acquisition and renewal of a leadership. This is only applicable if leader election is enabled.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
					},
					Required: []string{"leaderElect", "leaseDuration", "renewDeadline", "retryPeriod"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
		},
		"k8s.io/kubernetes/federation/apis/federation/v1beta1.Cluster": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Information about a registered cluster in a federated kubernetes setup. Clusters are not namespaced and have unique names in the federation.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec defines the behavior of the Cluster.",
								Ref:         ref("k8s.io/kubernetes/federation/apis/federation/v1beta1.ClusterSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status describes the current status of a Cluster",
								Ref:         ref("k8s.io/kubernetes/federation/apis/federation/v1beta1.ClusterStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "k8s.io/kubernetes/federation/apis/federation/v1beta1.ClusterSpec", "k8s.io/kubernetes/federation/apis/federation/v1beta1.ClusterStatus"},
		},
		"k8s.io/kubernetes/federation/apis/federation/v1beta1.ClusterCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ClusterCondition describes current state of a cluster.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of cluster condition, Complete or Failed.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the condition, one of True, False, Unknown.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lastProbeTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Last time the condition was checked.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastTransitionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Last time the condition transit from one status to another.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "(brief) reason for the condition's last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "Human readable message indicating details about last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"type", "status"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/kubernetes/federation/apis/federation/v1beta1.ClusterList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A list of all the kubernetes clusters registered to the federation",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of Cluster objects.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kubernetes/federation/apis/federation/v1beta1.Cluster"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/kubernetes/federation/apis/federation/v1beta1.Cluster"},
		},
		"k8s.io/kubernetes/federation/apis/federation/v1beta1.ClusterSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ClusterSpec describes the attributes of a kubernetes cluster.",
					Properties: map[string]spec.Schema{
						"serverAddressByClientCIDRs": {
							SchemaProps: spec.SchemaProps{
								Description: "A map of client CIDR to server address. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kubernetes/federation/apis/federation/v1beta1.ServerAddressByClientCIDR"),
										},
									},
								},
							},
						},
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the secret containing kubeconfig to access this cluster. The secret is read from the kubernetes cluster that is hosting federation control plane. Admin needs to ensure that the required secret exists. Secret should be in the same namespace where federation control plane is hosted and it should have kubeconfig in its data with key \"kubeconfig\". This will later be changed to a reference to secret in federation control plane when the federation control plane supports secrets. This can be left empty if the cluster allows insecure access.",
								Ref:         ref("k8s.io/apis/pkg/api/v1.LocalObjectReference"),
							},
						},
					},
					Required: []string{"serverAddressByClientCIDRs"},
				},
			},
			Dependencies: []string{
				"k8s.io/apis/pkg/api/v1.LocalObjectReference", "k8s.io/kubernetes/federation/apis/federation/v1beta1.ServerAddressByClientCIDR"},
		},
		"k8s.io/kubernetes/federation/apis/federation/v1beta1.ClusterStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ClusterStatus is information about the current status of a cluster updated by cluster controller periodically.",
					Properties: map[string]spec.Schema{
						"conditions": {
							SchemaProps: spec.SchemaProps{
								Description: "Conditions is an array of current cluster conditions.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kubernetes/federation/apis/federation/v1beta1.ClusterCondition"),
										},
									},
								},
							},
						},
						"zones": {
							SchemaProps: spec.SchemaProps{
								Description: "Zones is the list of availability zones in which the nodes of the cluster exist, e.g. 'us-east1-a'. These will always be in the same region.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"region": {
							SchemaProps: spec.SchemaProps{
								Description: "Region is the name of the region in which all of the nodes in the cluster exist.  e.g. 'us-east1'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kubernetes/federation/apis/federation/v1beta1.ClusterCondition"},
		},
		"k8s.io/kubernetes/pkg/apis/abac/v1beta1.Policy": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Policy contains a single ABAC policy rule",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec describes the policy rule",
								Ref:         ref("k8s.io/kubernetes/pkg/apis/abac/v1beta1.PolicySpec"),
							},
						},
					},
					Required: []string{"spec"},
				},
			},
			Dependencies: []string{
				"k8s.io/kubernetes/pkg/apis/abac/v1beta1.PolicySpec"},
		},
		"k8s.io/kubernetes/pkg/apis/abac/v1beta1.PolicySpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PolicySpec contains the attributes for a policy rule",
					Properties: map[string]spec.Schema{
						"user": {
							SchemaProps: spec.SchemaProps{
								Description: "User is the username this rule applies to. Either user or group is required to match the request. \"*\" matches all users.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"group": {
							SchemaProps: spec.SchemaProps{
								Description: "Group is the group this rule applies to. Either user or group is required to match the request. \"*\" matches all groups.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"readonly": {
							SchemaProps: spec.SchemaProps{
								Description: "Readonly matches readonly requests when true, and all requests when false",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"apiGroup": {
							SchemaProps: spec.SchemaProps{
								Description: "APIGroup is the name of an API group. APIGroup, Resource, and Namespace are required to match resource requests. \"*\" matches all API groups",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resource": {
							SchemaProps: spec.SchemaProps{
								Description: "Resource is the name of a resource. APIGroup, Resource, and Namespace are required to match resource requests. \"*\" matches all resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"namespace": {
							SchemaProps: spec.SchemaProps{
								Description: "Namespace is the name of a namespace. APIGroup, Resource, and Namespace are required to match resource requests. \"*\" matches all namespaces (including unnamespaced requests)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"nonResourcePath": {
							SchemaProps: spec.SchemaProps{
								Description: "NonResourcePath matches non-resource request paths. \"*\" matches all paths \"/foo/*\" matches all subpaths of foo",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kubernetes/federation/apis/federation/v1beta1.ServerAddressByClientCIDR": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
					Properties: map[string]spec.Schema{
						"clientCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "The CIDR with which clients can match their IP to figure out the server address that they should use.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"serverAddress": {
							SchemaProps: spec.SchemaProps{
								Description: "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"clientCIDR", "serverAddress"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/version.Info": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Info contains versioning information. how we'll want to distribute that information.",
					Properties: map[string]spec.Schema{
						"major": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"minor": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"gitVersion": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"gitCommit": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"gitTreeState": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"buildDate": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"goVersion": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"compiler": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"platform": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"major", "minor", "gitVersion", "gitCommit", "gitTreeState", "buildDate", "goVersion", "compiler", "platform"},
				},
			},
			Dependencies: []string{},
		},
	}
}
