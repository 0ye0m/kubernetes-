// Code generated by go-bindata.
// sources:
// translations/en-US.all.yaml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _translationsEnUsAllYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x51\x41\x4e\xc3\x40\x0c\xbc\xe7\x15\xa3\x72\x6e\x1f\xc0\x0d\xf1\x05\x38\x23\x2b\xeb\x12\x4b\x5b\x3b\x5a\x7b\x29\x50\xf5\xef\x68\x93\x52\xd2\x22\x21\x4e\xbd\xac\x64\x79\x66\x76\x3c\xb3\x86\xa4\x7b\xac\x9e\xc7\x44\xc1\x88\x81\x41\xaa\x16\x14\x62\xea\x30\x05\xa1\xb0\x5b\x2d\x3d\xaf\x3a\x20\x0a\xa9\xe7\x69\xfb\x6f\x56\x77\xfa\x63\x4f\xd1\x0f\x90\xb6\xcf\x1f\xf0\x3a\x8e\x56\x82\x53\x83\x8b\x26\x79\x93\x54\x29\x9f\x79\x0e\xd2\x74\x9e\xd0\x5b\xce\xdc\xcf\xfa\x6b\x1c\x0e\x9b\x47\xab\x1a\xc7\xe3\x02\xbf\xe7\xc2\xd8\x5a\xd5\x74\xed\xb4\x03\x00\x53\xbe\x85\x09\xf2\x1f\x0f\x80\xc5\xc0\xe5\xc6\xb7\x77\x77\x78\x1a\xd8\x79\x19\x81\x83\x0a\xa3\x3a\x27\x88\xa2\xaa\x04\x82\x3d\x7c\xf3\x5d\x4e\x9b\x5e\x3c\x8a\xe8\xeb\xef\x9e\xb7\x66\x93\xec\x83\x82\xdf\x69\x37\x66\xc6\x98\x6b\xa1\x2c\x9f\x9c\x30\xb3\x2e\x84\xe6\xed\x1f\x35\xb4\x58\x78\x0a\x6b\x71\x8e\x04\xef\x2e\x63\x3b\xc1\xda\x73\x85\xf3\x55\xf7\x15\x00\x00\xff\xff\x87\xda\x7a\x6c\xbb\x02\x00\x00")

func translationsEnUsAllYamlBytes() ([]byte, error) {
	return bindataRead(
		_translationsEnUsAllYaml,
		"translations/en-US.all.yaml",
	)
}

func translationsEnUsAllYaml() (*asset, error) {
	bytes, err := translationsEnUsAllYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translations/en-US.all.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"translations/en-US.all.yaml": translationsEnUsAllYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"translations": {nil, map[string]*bintree{
		"en-US.all.yaml": {translationsEnUsAllYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
