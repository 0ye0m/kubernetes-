// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package labels

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *Lexer) DeepCopyInto(out *Lexer) {
	out.s = in.s
	out.pos = in.pos
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new Lexer.
func (x *Lexer) DeepCopy() *Lexer {
	if x == nil {
		return nil
	}
	out := new(Lexer)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *Parser) DeepCopyInto(out *Parser) {
	if in.l != nil {
		in, out := &in.l, &out.l
		*out = new(Lexer)
		**out = **in
	} else {
		out.l = nil
	}
	if in.scannedItems != nil {
		in, out := &in.scannedItems, &out.scannedItems
		*out = make([]ScannedItem, len(*in))
		for i := range *in {
			(*out)[i] = (*in)[i]
		}
	} else {
		out.scannedItems = nil
	}
	out.position = in.position
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new Parser.
func (x *Parser) DeepCopy() *Parser {
	if x == nil {
		return nil
	}
	out := new(Parser)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *Requirement) DeepCopyInto(out *Requirement) {
	out.key = in.key
	out.operator = in.operator
	if in.strValues != nil {
		in, out := &in.strValues, &out.strValues
		*out = make([]string, len(*in))
		copy(*out, *in)
	} else {
		out.strValues = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new Requirement.
func (x *Requirement) DeepCopy() *Requirement {
	if x == nil {
		return nil
	}
	out := new(Requirement)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ScannedItem) DeepCopyInto(out *ScannedItem) {
	out.tok = in.tok
	out.literal = in.literal
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ScannedItem.
func (x *ScannedItem) DeepCopy() *ScannedItem {
	if x == nil {
		return nil
	}
	out := new(ScannedItem)
	x.DeepCopyInto(out)
	return out
}
