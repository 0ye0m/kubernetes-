/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg5_util.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	if !yyhl45 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				var yynn82 int = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	if !yyhl104 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				var yynn141 int = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
			}
			if yyr141 || yy2arr141 {
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [2]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[1] = x.ReadOnly != false
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(2)
			} else {
				var yynn195 int = 1
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
			}
			if yyr195 || yy2arr195 {
				yym197 := z.EncBinary()
				_ = yym197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym198 := z.EncBinary()
				_ = yym198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[1] {
					yym200 := z.EncBinary()
					_ = yym200
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq195[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym201 := z.EncBinary()
					_ = yym201
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep195 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym202 := z.DecBinary()
	_ = yym202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl203 := r.ReadMapStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl203, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl203 := r.ReadArrayStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys204Slc
	var yyhl204 bool = l >= 0
	for yyj204 := 0; ; yyj204++ {
		if yyhl204 {
			if yyj204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys204Slc = r.DecodeBytes(yys204Slc, true, true)
		yys204 := string(yys204Slc)
		switch yys204 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys204)
		} // end switch yys204
	} // end for yyj204
	if !yyhl204 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj207 int
	var yyb207 bool
	var yyhl207 bool = l >= 0
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj207++
		if yyhl207 {
			yyb207 = yyj207 > l
		} else {
			yyb207 = r.CheckBreak()
		}
		if yyb207 {
			break
		}
		z.DecStructFieldNotFound(yyj207-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym210 := z.EncBinary()
		_ = yym210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep211 := !z.EncBinary()
			yy2arr211 := z.EncBasicHandle().StructToArray
			var yyq211 [11]bool
			_, _, _ = yysep211, yyq211, yy2arr211
			const yyr211 bool = false
			yyq211[0] = x.GCEPersistentDisk != nil
			yyq211[1] = x.AWSElasticBlockStore != nil
			yyq211[2] = x.HostPath != nil
			yyq211[3] = x.Glusterfs != nil
			yyq211[4] = x.NFS != nil
			yyq211[5] = x.RBD != nil
			yyq211[6] = x.ISCSI != nil
			yyq211[7] = x.Cinder != nil
			yyq211[8] = x.CephFS != nil
			yyq211[9] = x.FC != nil
			yyq211[10] = x.Flocker != nil
			if yyr211 || yy2arr211 {
				r.EncodeArrayStart(11)
			} else {
				var yynn211 int = 0
				for _, b := range yyq211 {
					if b {
						yynn211++
					}
				}
				r.EncodeMapStart(yynn211)
			}
			if yyr211 || yy2arr211 {
				if yyq211[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep211 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym223 := z.DecBinary()
	_ = yym223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl224 := r.ReadMapStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl224, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl224 := r.ReadArrayStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys225Slc
	var yyhl225 bool = l >= 0
	for yyj225 := 0; ; yyj225++ {
		if yyhl225 {
			if yyj225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys225Slc = r.DecodeBytes(yys225Slc, true, true)
		yys225 := string(yys225Slc)
		switch yys225 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys225)
		} // end switch yys225
	} // end for yyj225
	if !yyhl225 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj237 int
	var yyb237 bool
	var yyhl237 bool = l >= 0
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj237++
		if yyhl237 {
			yyb237 = yyj237 > l
		} else {
			yyb237 = r.CheckBreak()
		}
		if yyb237 {
			break
		}
		z.DecStructFieldNotFound(yyj237-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				var yynn250 int = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
			}
			if yyr250 || yy2arr250 {
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yysep250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	if !yyhl268 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[0] = len(x.Capacity) != 0
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				var yynn281 int = 0
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
			}
			if yyr281 || yy2arr281 {
				if yyq281[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep281 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	if !yyhl301 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				var yynn338 int = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
			}
			if yyr338 || yy2arr338 {
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep338 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	if !yyhl348 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				var yynn357 int = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
			}
			if yyr357 || yy2arr357 {
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep357 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	if !yyhl374 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				var yynn389 int = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
			}
			if yyr389 || yy2arr389 {
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yysep389 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	if !yyhl407 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				var yynn420 int = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
			}
			if yyr420 || yy2arr420 {
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep420 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	if !yyhl437 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				var yynn452 int = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep452 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	if !yyhl464 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				var yynn475 int = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
			}
			if yyr475 || yy2arr475 {
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep475 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	if !yyhl483 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				var yynn500 int = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
			}
			if yyr500 || yy2arr500 {
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep500 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	if !yyhl506 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			yyq511[0] = x.Medium != ""
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				var yynn511 int = 0
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
			}
			if yyr511 || yy2arr511 {
				if yyq511[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq511[0] {
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yysep511 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	if !yyhl515 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym519 := z.EncBinary()
		_ = yym519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep520 := !z.EncBinary()
			yy2arr520 := z.EncBasicHandle().StructToArray
			var yyq520 [3]bool
			_, _, _ = yysep520, yyq520, yy2arr520
			const yyr520 bool = false
			yyq520[2] = x.ReadOnly != false
			if yyr520 || yy2arr520 {
				r.EncodeArrayStart(3)
			} else {
				var yynn520 int = 2
				for _, b := range yyq520 {
					if b {
						yynn520++
					}
				}
				r.EncodeMapStart(yynn520)
			}
			if yyr520 || yy2arr520 {
				yym522 := z.EncBinary()
				_ = yym522
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym523 := z.EncBinary()
				_ = yym523
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr520 || yy2arr520 {
				yym525 := z.EncBinary()
				_ = yym525
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr520 || yy2arr520 {
				if yyq520[2] {
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq520[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep520 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym530 := z.DecBinary()
	_ = yym530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl531 := r.ReadMapStart()
			if yyl531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl531, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl531 := r.ReadArrayStart()
			if yyl531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys532Slc
	var yyhl532 bool = l >= 0
	for yyj532 := 0; ; yyj532++ {
		if yyhl532 {
			if yyj532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys532Slc = r.DecodeBytes(yys532Slc, true, true)
		yys532 := string(yys532Slc)
		switch yys532 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys532)
		} // end switch yys532
	} // end for yyj532
	if !yyhl532 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj536 int
	var yyb536 bool
	var yyhl536 bool = l >= 0
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj536++
		if yyhl536 {
			yyb536 = yyj536 > l
		} else {
			yyb536 = r.CheckBreak()
		}
		if yyb536 {
			break
		}
		z.DecStructFieldNotFound(yyj536-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym540 := z.EncBinary()
	_ = yym540
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym541 := z.DecBinary()
	_ = yym541
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym542 := z.EncBinary()
		_ = yym542
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep543 := !z.EncBinary()
			yy2arr543 := z.EncBasicHandle().StructToArray
			var yyq543 [8]bool
			_, _, _ = yysep543, yyq543, yy2arr543
			const yyr543 bool = false
			yyq543[2] = x.FSType != ""
			yyq543[7] = x.ReadOnly != false
			if yyr543 || yy2arr543 {
				r.EncodeArrayStart(8)
			} else {
				var yynn543 int = 6
				for _, b := range yyq543 {
					if b {
						yynn543++
					}
				}
				r.EncodeMapStart(yynn543)
			}
			if yyr543 || yy2arr543 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr543 || yy2arr543 {
				yym548 := z.EncBinary()
				_ = yym548
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym549 := z.EncBinary()
				_ = yym549
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr543 || yy2arr543 {
				if yyq543[2] {
					yym551 := z.EncBinary()
					_ = yym551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq543[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr543 || yy2arr543 {
				yym554 := z.EncBinary()
				_ = yym554
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym555 := z.EncBinary()
				_ = yym555
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr543 || yy2arr543 {
				yym557 := z.EncBinary()
				_ = yym557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym558 := z.EncBinary()
				_ = yym558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr543 || yy2arr543 {
				yym560 := z.EncBinary()
				_ = yym560
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym561 := z.EncBinary()
				_ = yym561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr543 || yy2arr543 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr543 || yy2arr543 {
				if yyq543[7] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq543[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep543 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		switch yys568 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv569 := &x.CephMonitors
				yym570 := z.DecBinary()
				_ = yym570
				if false {
				} else {
					z.F.DecSliceStringX(yyv569, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	if !yyhl568 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj578 int
	var yyb578 bool
	var yyhl578 bool = l >= 0
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv579 := &x.CephMonitors
		yym580 := z.DecBinary()
		_ = yym580
		if false {
		} else {
			z.F.DecSliceStringX(yyv579, false, d)
		}
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj578++
		if yyhl578 {
			yyb578 = yyj578 > l
		} else {
			yyb578 = r.CheckBreak()
		}
		if yyb578 {
			break
		}
		z.DecStructFieldNotFound(yyj578-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym588 := z.EncBinary()
		_ = yym588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep589 := !z.EncBinary()
			yy2arr589 := z.EncBasicHandle().StructToArray
			var yyq589 [3]bool
			_, _, _ = yysep589, yyq589, yy2arr589
			const yyr589 bool = false
			yyq589[1] = x.FSType != ""
			yyq589[2] = x.ReadOnly != false
			if yyr589 || yy2arr589 {
				r.EncodeArrayStart(3)
			} else {
				var yynn589 int = 1
				for _, b := range yyq589 {
					if b {
						yynn589++
					}
				}
				r.EncodeMapStart(yynn589)
			}
			if yyr589 || yy2arr589 {
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr589 || yy2arr589 {
				if yyq589[1] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq589[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr589 || yy2arr589 {
				if yyq589[2] {
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq589[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep589 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym599 := z.DecBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl600 := r.ReadMapStart()
			if yyl600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl600, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl600 := r.ReadArrayStart()
			if yyl600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys601Slc
	var yyhl601 bool = l >= 0
	for yyj601 := 0; ; yyj601++ {
		if yyhl601 {
			if yyj601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys601Slc = r.DecodeBytes(yys601Slc, true, true)
		yys601 := string(yys601Slc)
		switch yys601 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys601)
		} // end switch yys601
	} // end for yyj601
	if !yyhl601 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym609 := z.EncBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep610 := !z.EncBinary()
			yy2arr610 := z.EncBasicHandle().StructToArray
			var yyq610 [5]bool
			_, _, _ = yysep610, yyq610, yy2arr610
			const yyr610 bool = false
			yyq610[1] = x.User != ""
			yyq610[2] = x.SecretFile != ""
			yyq610[3] = x.SecretRef != nil
			yyq610[4] = x.ReadOnly != false
			if yyr610 || yy2arr610 {
				r.EncodeArrayStart(5)
			} else {
				var yynn610 int = 1
				for _, b := range yyq610 {
					if b {
						yynn610++
					}
				}
				r.EncodeMapStart(yynn610)
			}
			if yyr610 || yy2arr610 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[1] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[2] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq610[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[4] {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq610[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep610 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl625 := r.ReadMapStart()
			if yyl625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl625, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl625 := r.ReadArrayStart()
			if yyl625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys626Slc
	var yyhl626 bool = l >= 0
	for yyj626 := 0; ; yyj626++ {
		if yyhl626 {
			if yyj626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys626Slc = r.DecodeBytes(yys626Slc, true, true)
		yys626 := string(yys626Slc)
		switch yys626 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv627 := &x.Monitors
				yym628 := z.DecBinary()
				_ = yym628
				if false {
				} else {
					z.F.DecSliceStringX(yyv627, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys626)
		} // end switch yys626
	} // end for yyj626
	if !yyhl626 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv634 := &x.Monitors
		yym635 := z.DecBinary()
		_ = yym635
		if false {
		} else {
			z.F.DecSliceStringX(yyv634, false, d)
		}
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym640 := z.EncBinary()
		_ = yym640
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep641 := !z.EncBinary()
			yy2arr641 := z.EncBasicHandle().StructToArray
			var yyq641 [1]bool
			_, _, _ = yysep641, yyq641, yy2arr641
			const yyr641 bool = false
			if yyr641 || yy2arr641 {
				r.EncodeArrayStart(1)
			} else {
				var yynn641 int = 1
				for _, b := range yyq641 {
					if b {
						yynn641++
					}
				}
				r.EncodeMapStart(yynn641)
			}
			if yyr641 || yy2arr641 {
				yym643 := z.EncBinary()
				_ = yym643
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym644 := z.EncBinary()
				_ = yym644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep641 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym645 := z.DecBinary()
	_ = yym645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl646 := r.ReadMapStart()
			if yyl646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl646, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl646 := r.ReadArrayStart()
			if yyl646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl646, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys647Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys647Slc
	var yyhl647 bool = l >= 0
	for yyj647 := 0; ; yyj647++ {
		if yyhl647 {
			if yyj647 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys647Slc = r.DecodeBytes(yys647Slc, true, true)
		yys647 := string(yys647Slc)
		switch yys647 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys647)
		} // end switch yys647
	} // end for yyj647
	if !yyhl647 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj649 int
	var yyb649 bool
	var yyhl649 bool = l >= 0
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj649++
		if yyhl649 {
			yyb649 = yyj649 > l
		} else {
			yyb649 = r.CheckBreak()
		}
		if yyb649 {
			break
		}
		z.DecStructFieldNotFound(yyj649-1, "")
	}
	r.ReadEnd()
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym651 := z.EncBinary()
	_ = yym651
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym652 := z.DecBinary()
	_ = yym652
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym653 := z.EncBinary()
		_ = yym653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep654 := !z.EncBinary()
			yy2arr654 := z.EncBasicHandle().StructToArray
			var yyq654 [4]bool
			_, _, _ = yysep654, yyq654, yy2arr654
			const yyr654 bool = false
			yyq654[2] = x.Partition != 0
			yyq654[3] = x.ReadOnly != false
			if yyr654 || yy2arr654 {
				r.EncodeArrayStart(4)
			} else {
				var yynn654 int = 2
				for _, b := range yyq654 {
					if b {
						yynn654++
					}
				}
				r.EncodeMapStart(yynn654)
			}
			if yyr654 || yy2arr654 {
				yym656 := z.EncBinary()
				_ = yym656
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr654 || yy2arr654 {
				yym659 := z.EncBinary()
				_ = yym659
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym660 := z.EncBinary()
				_ = yym660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr654 || yy2arr654 {
				if yyq654[2] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq654[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr654 || yy2arr654 {
				if yyq654[3] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq654[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep654 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym667 := z.DecBinary()
	_ = yym667
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl668 := r.ReadMapStart()
			if yyl668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl668, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl668 := r.ReadArrayStart()
			if yyl668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl668, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys669Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys669Slc
	var yyhl669 bool = l >= 0
	for yyj669 := 0; ; yyj669++ {
		if yyhl669 {
			if yyj669 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys669Slc = r.DecodeBytes(yys669Slc, true, true)
		yys669 := string(yys669Slc)
		switch yys669 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys669)
		} // end switch yys669
	} // end for yyj669
	if !yyhl669 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj674 int
	var yyb674 bool
	var yyhl674 bool = l >= 0
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj674++
		if yyhl674 {
			yyb674 = yyj674 > l
		} else {
			yyb674 = r.CheckBreak()
		}
		if yyb674 {
			break
		}
		z.DecStructFieldNotFound(yyj674-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym679 := z.EncBinary()
		_ = yym679
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep680 := !z.EncBinary()
			yy2arr680 := z.EncBasicHandle().StructToArray
			var yyq680 [4]bool
			_, _, _ = yysep680, yyq680, yy2arr680
			const yyr680 bool = false
			yyq680[2] = x.Partition != 0
			yyq680[3] = x.ReadOnly != false
			if yyr680 || yy2arr680 {
				r.EncodeArrayStart(4)
			} else {
				var yynn680 int = 2
				for _, b := range yyq680 {
					if b {
						yynn680++
					}
				}
				r.EncodeMapStart(yynn680)
			}
			if yyr680 || yy2arr680 {
				yym682 := z.EncBinary()
				_ = yym682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym683 := z.EncBinary()
				_ = yym683
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr680 || yy2arr680 {
				yym685 := z.EncBinary()
				_ = yym685
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym686 := z.EncBinary()
				_ = yym686
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr680 || yy2arr680 {
				if yyq680[2] {
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq680[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr680 || yy2arr680 {
				if yyq680[3] {
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq680[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep680 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym693 := z.DecBinary()
	_ = yym693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl694 := r.ReadMapStart()
			if yyl694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl694, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl694 := r.ReadArrayStart()
			if yyl694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys695Slc
	var yyhl695 bool = l >= 0
	for yyj695 := 0; ; yyj695++ {
		if yyhl695 {
			if yyj695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys695Slc = r.DecodeBytes(yys695Slc, true, true)
		yys695 := string(yys695Slc)
		switch yys695 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys695)
		} // end switch yys695
	} // end for yyj695
	if !yyhl695 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj700 int
	var yyb700 bool
	var yyhl700 bool = l >= 0
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj700++
		if yyhl700 {
			yyb700 = yyj700 > l
		} else {
			yyb700 = r.CheckBreak()
		}
		if yyb700 {
			break
		}
		z.DecStructFieldNotFound(yyj700-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym705 := z.EncBinary()
		_ = yym705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep706 := !z.EncBinary()
			yy2arr706 := z.EncBasicHandle().StructToArray
			var yyq706 [2]bool
			_, _, _ = yysep706, yyq706, yy2arr706
			const yyr706 bool = false
			if yyr706 || yy2arr706 {
				r.EncodeArrayStart(2)
			} else {
				var yynn706 int = 2
				for _, b := range yyq706 {
					if b {
						yynn706++
					}
				}
				r.EncodeMapStart(yynn706)
			}
			if yyr706 || yy2arr706 {
				yym708 := z.EncBinary()
				_ = yym708
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym709 := z.EncBinary()
				_ = yym709
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr706 || yy2arr706 {
				yym711 := z.EncBinary()
				_ = yym711
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym712 := z.EncBinary()
				_ = yym712
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep706 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym713 := z.DecBinary()
	_ = yym713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl714 := r.ReadMapStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl714, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl714 := r.ReadArrayStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys715Slc
	var yyhl715 bool = l >= 0
	for yyj715 := 0; ; yyj715++ {
		if yyhl715 {
			if yyj715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys715Slc = r.DecodeBytes(yys715Slc, true, true)
		yys715 := string(yys715Slc)
		switch yys715 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys715)
		} // end switch yys715
	} // end for yyj715
	if !yyhl715 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj718 int
	var yyb718 bool
	var yyhl718 bool = l >= 0
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj718++
		if yyhl718 {
			yyb718 = yyj718 > l
		} else {
			yyb718 = r.CheckBreak()
		}
		if yyb718 {
			break
		}
		z.DecStructFieldNotFound(yyj718-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym721 := z.EncBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep722 := !z.EncBinary()
			yy2arr722 := z.EncBasicHandle().StructToArray
			var yyq722 [1]bool
			_, _, _ = yysep722, yyq722, yy2arr722
			const yyr722 bool = false
			if yyr722 || yy2arr722 {
				r.EncodeArrayStart(1)
			} else {
				var yynn722 int = 1
				for _, b := range yyq722 {
					if b {
						yynn722++
					}
				}
				r.EncodeMapStart(yynn722)
			}
			if yyr722 || yy2arr722 {
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep722 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym726 := z.DecBinary()
	_ = yym726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl727 := r.ReadMapStart()
			if yyl727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl727, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl727 := r.ReadArrayStart()
			if yyl727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys728Slc
	var yyhl728 bool = l >= 0
	for yyj728 := 0; ; yyj728++ {
		if yyhl728 {
			if yyj728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys728Slc = r.DecodeBytes(yys728Slc, true, true)
		yys728 := string(yys728Slc)
		switch yys728 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys728)
		} // end switch yys728
	} // end for yyj728
	if !yyhl728 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj730 int
	var yyb730 bool
	var yyhl730 bool = l >= 0
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj730++
		if yyhl730 {
			yyb730 = yyj730 > l
		} else {
			yyb730 = r.CheckBreak()
		}
		if yyb730 {
			break
		}
		z.DecStructFieldNotFound(yyj730-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym732 := z.EncBinary()
		_ = yym732
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep733 := !z.EncBinary()
			yy2arr733 := z.EncBasicHandle().StructToArray
			var yyq733 [3]bool
			_, _, _ = yysep733, yyq733, yy2arr733
			const yyr733 bool = false
			yyq733[2] = x.ReadOnly != false
			if yyr733 || yy2arr733 {
				r.EncodeArrayStart(3)
			} else {
				var yynn733 int = 2
				for _, b := range yyq733 {
					if b {
						yynn733++
					}
				}
				r.EncodeMapStart(yynn733)
			}
			if yyr733 || yy2arr733 {
				yym735 := z.EncBinary()
				_ = yym735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr733 || yy2arr733 {
				yym738 := z.EncBinary()
				_ = yym738
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym739 := z.EncBinary()
				_ = yym739
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr733 || yy2arr733 {
				if yyq733[2] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq733[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep733 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym743 := z.DecBinary()
	_ = yym743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl744 := r.ReadMapStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl744, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl744 := r.ReadArrayStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys745Slc
	var yyhl745 bool = l >= 0
	for yyj745 := 0; ; yyj745++ {
		if yyhl745 {
			if yyj745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys745Slc = r.DecodeBytes(yys745Slc, true, true)
		yys745 := string(yys745Slc)
		switch yys745 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys745)
		} // end switch yys745
	} // end for yyj745
	if !yyhl745 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj749 int
	var yyb749 bool
	var yyhl749 bool = l >= 0
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj749++
		if yyhl749 {
			yyb749 = yyj749 > l
		} else {
			yyb749 = r.CheckBreak()
		}
		if yyb749 {
			break
		}
		z.DecStructFieldNotFound(yyj749-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym753 := z.EncBinary()
		_ = yym753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep754 := !z.EncBinary()
			yy2arr754 := z.EncBasicHandle().StructToArray
			var yyq754 [5]bool
			_, _, _ = yysep754, yyq754, yy2arr754
			const yyr754 bool = false
			yyq754[4] = x.ReadOnly != false
			if yyr754 || yy2arr754 {
				r.EncodeArrayStart(5)
			} else {
				var yynn754 int = 4
				for _, b := range yyq754 {
					if b {
						yynn754++
					}
				}
				r.EncodeMapStart(yynn754)
			}
			if yyr754 || yy2arr754 {
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr754 || yy2arr754 {
				yym759 := z.EncBinary()
				_ = yym759
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				yym760 := z.EncBinary()
				_ = yym760
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr754 || yy2arr754 {
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				yym763 := z.EncBinary()
				_ = yym763
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr754 || yy2arr754 {
				yym765 := z.EncBinary()
				_ = yym765
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[4] {
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq754[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep754 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym770 := z.DecBinary()
	_ = yym770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl771 := r.ReadMapStart()
			if yyl771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl771, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl771 := r.ReadArrayStart()
			if yyl771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys772Slc
	var yyhl772 bool = l >= 0
	for yyj772 := 0; ; yyj772++ {
		if yyhl772 {
			if yyj772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys772Slc = r.DecodeBytes(yys772Slc, true, true)
		yys772 := string(yys772Slc)
		switch yys772 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys772)
		} // end switch yys772
	} // end for yyj772
	if !yyhl772 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj778 int
	var yyb778 bool
	var yyhl778 bool = l >= 0
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj778++
		if yyhl778 {
			yyb778 = yyj778 > l
		} else {
			yyb778 = r.CheckBreak()
		}
		if yyb778 {
			break
		}
		z.DecStructFieldNotFound(yyj778-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym784 := z.EncBinary()
		_ = yym784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep785 := !z.EncBinary()
			yy2arr785 := z.EncBasicHandle().StructToArray
			var yyq785 [4]bool
			_, _, _ = yysep785, yyq785, yy2arr785
			const yyr785 bool = false
			yyq785[3] = x.ReadOnly != false
			if yyr785 || yy2arr785 {
				r.EncodeArrayStart(4)
			} else {
				var yynn785 int = 3
				for _, b := range yyq785 {
					if b {
						yynn785++
					}
				}
				r.EncodeMapStart(yynn785)
			}
			if yyr785 || yy2arr785 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr785 || yy2arr785 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy790 := *x.Lun
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeInt(int64(yy790))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy792 := *x.Lun
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeInt(int64(yy792))
					}
				}
			}
			if yyr785 || yy2arr785 {
				yym795 := z.EncBinary()
				_ = yym795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym796 := z.EncBinary()
				_ = yym796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[3] {
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq785[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep785 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym800 := z.DecBinary()
	_ = yym800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl801 := r.ReadMapStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl801, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl801 := r.ReadArrayStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys802Slc
	var yyhl802 bool = l >= 0
	for yyj802 := 0; ; yyj802++ {
		if yyhl802 {
			if yyj802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys802Slc = r.DecodeBytes(yys802Slc, true, true)
		yys802 := string(yys802Slc)
		switch yys802 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv803 := &x.TargetWWNs
				yym804 := z.DecBinary()
				_ = yym804
				if false {
				} else {
					z.F.DecSliceStringX(yyv803, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym806 := z.DecBinary()
				_ = yym806
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys802)
		} // end switch yys802
	} // end for yyj802
	if !yyhl802 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj809 int
	var yyb809 bool
	var yyhl809 bool = l >= 0
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv810 := &x.TargetWWNs
		yym811 := z.DecBinary()
		_ = yym811
		if false {
		} else {
			z.F.DecSliceStringX(yyv810, false, d)
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym813 := z.DecBinary()
		_ = yym813
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj809++
		if yyhl809 {
			yyb809 = yyj809 > l
		} else {
			yyb809 = r.CheckBreak()
		}
		if yyb809 {
			break
		}
		z.DecStructFieldNotFound(yyj809-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym816 := z.EncBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep817 := !z.EncBinary()
			yy2arr817 := z.EncBasicHandle().StructToArray
			var yyq817 [5]bool
			_, _, _ = yysep817, yyq817, yy2arr817
			const yyr817 bool = false
			yyq817[0] = x.Name != ""
			yyq817[1] = x.HostPort != 0
			yyq817[3] = x.Protocol != ""
			yyq817[4] = x.HostIP != ""
			if yyr817 || yy2arr817 {
				r.EncodeArrayStart(5)
			} else {
				var yynn817 int = 1
				for _, b := range yyq817 {
					if b {
						yynn817++
					}
				}
				r.EncodeMapStart(yynn817)
			}
			if yyr817 || yy2arr817 {
				if yyq817[0] {
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[1] {
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq817[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr817 || yy2arr817 {
				yym825 := z.EncBinary()
				_ = yym825
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym826 := z.EncBinary()
				_ = yym826
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[4] {
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep817 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym831 := z.DecBinary()
	_ = yym831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl832 := r.ReadMapStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl832, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl832 := r.ReadArrayStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys833Slc
	var yyhl833 bool = l >= 0
	for yyj833 := 0; ; yyj833++ {
		if yyhl833 {
			if yyj833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys833Slc = r.DecodeBytes(yys833Slc, true, true)
		yys833 := string(yys833Slc)
		switch yys833 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys833)
		} // end switch yys833
	} // end for yyj833
	if !yyhl833 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj839 int
	var yyb839 bool
	var yyhl839 bool = l >= 0
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj839++
		if yyhl839 {
			yyb839 = yyj839 > l
		} else {
			yyb839 = r.CheckBreak()
		}
		if yyb839 {
			break
		}
		z.DecStructFieldNotFound(yyj839-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [3]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[1] = x.ReadOnly != false
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(3)
			} else {
				var yynn846 int = 2
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
			}
			if yyr846 || yy2arr846 {
				yym848 := z.EncBinary()
				_ = yym848
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym849 := z.EncBinary()
				_ = yym849
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq846[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr846 || yy2arr846 {
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep846 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym856 := z.DecBinary()
	_ = yym856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl857 := r.ReadMapStart()
			if yyl857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl857, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl857 := r.ReadArrayStart()
			if yyl857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys858Slc
	var yyhl858 bool = l >= 0
	for yyj858 := 0; ; yyj858++ {
		if yyhl858 {
			if yyj858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys858Slc = r.DecodeBytes(yys858Slc, true, true)
		yys858 := string(yys858Slc)
		switch yys858 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys858)
		} // end switch yys858
	} // end for yyj858
	if !yyhl858 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj862 int
	var yyb862 bool
	var yyhl862 bool = l >= 0
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj862++
		if yyhl862 {
			yyb862 = yyj862 > l
		} else {
			yyb862 = r.CheckBreak()
		}
		if yyb862 {
			break
		}
		z.DecStructFieldNotFound(yyj862-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym866 := z.EncBinary()
		_ = yym866
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep867 := !z.EncBinary()
			yy2arr867 := z.EncBasicHandle().StructToArray
			var yyq867 [3]bool
			_, _, _ = yysep867, yyq867, yy2arr867
			const yyr867 bool = false
			yyq867[1] = x.Value != ""
			yyq867[2] = x.ValueFrom != nil
			if yyr867 || yy2arr867 {
				r.EncodeArrayStart(3)
			} else {
				var yynn867 int = 1
				for _, b := range yyq867 {
					if b {
						yynn867++
					}
				}
				r.EncodeMapStart(yynn867)
			}
			if yyr867 || yy2arr867 {
				yym869 := z.EncBinary()
				_ = yym869
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym870 := z.EncBinary()
				_ = yym870
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[1] {
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq867[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq867[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep867 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym875 := z.DecBinary()
	_ = yym875
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl876 := r.ReadMapStart()
			if yyl876 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl876, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl876 := r.ReadArrayStart()
			if yyl876 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl876, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys877Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys877Slc
	var yyhl877 bool = l >= 0
	for yyj877 := 0; ; yyj877++ {
		if yyhl877 {
			if yyj877 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys877Slc = r.DecodeBytes(yys877Slc, true, true)
		yys877 := string(yys877Slc)
		switch yys877 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys877)
		} // end switch yys877
	} // end for yyj877
	if !yyhl877 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj881 int
	var yyb881 bool
	var yyhl881 bool = l >= 0
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj881++
		if yyhl881 {
			yyb881 = yyj881 > l
		} else {
			yyb881 = r.CheckBreak()
		}
		if yyb881 {
			break
		}
		z.DecStructFieldNotFound(yyj881-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym885 := z.EncBinary()
		_ = yym885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep886 := !z.EncBinary()
			yy2arr886 := z.EncBasicHandle().StructToArray
			var yyq886 [1]bool
			_, _, _ = yysep886, yyq886, yy2arr886
			const yyr886 bool = false
			if yyr886 || yy2arr886 {
				r.EncodeArrayStart(1)
			} else {
				var yynn886 int = 1
				for _, b := range yyq886 {
					if b {
						yynn886++
					}
				}
				r.EncodeMapStart(yynn886)
			}
			if yyr886 || yy2arr886 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep886 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym888 := z.DecBinary()
	_ = yym888
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl889 := r.ReadMapStart()
			if yyl889 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl889, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl889 := r.ReadArrayStart()
			if yyl889 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl889, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys890Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys890Slc
	var yyhl890 bool = l >= 0
	for yyj890 := 0; ; yyj890++ {
		if yyhl890 {
			if yyj890 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys890Slc = r.DecodeBytes(yys890Slc, true, true)
		yys890 := string(yys890Slc)
		switch yys890 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys890)
		} // end switch yys890
	} // end for yyj890
	if !yyhl890 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj892 int
	var yyb892 bool
	var yyhl892 bool = l >= 0
	yyj892++
	if yyhl892 {
		yyb892 = yyj892 > l
	} else {
		yyb892 = r.CheckBreak()
	}
	if yyb892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj892++
		if yyhl892 {
			yyb892 = yyj892 > l
		} else {
			yyb892 = r.CheckBreak()
		}
		if yyb892 {
			break
		}
		z.DecStructFieldNotFound(yyj892-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym894 := z.EncBinary()
		_ = yym894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep895 := !z.EncBinary()
			yy2arr895 := z.EncBasicHandle().StructToArray
			var yyq895 [2]bool
			_, _, _ = yysep895, yyq895, yy2arr895
			const yyr895 bool = false
			yyq895[0] = x.APIVersion != ""
			if yyr895 || yy2arr895 {
				r.EncodeArrayStart(2)
			} else {
				var yynn895 int = 1
				for _, b := range yyq895 {
					if b {
						yynn895++
					}
				}
				r.EncodeMapStart(yynn895)
			}
			if yyr895 || yy2arr895 {
				if yyq895[0] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[0] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr895 || yy2arr895 {
				yym900 := z.EncBinary()
				_ = yym900
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym901 := z.EncBinary()
				_ = yym901
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep895 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym902 := z.DecBinary()
	_ = yym902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl903 := r.ReadMapStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl903, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl903 := r.ReadArrayStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys904Slc
	var yyhl904 bool = l >= 0
	for yyj904 := 0; ; yyj904++ {
		if yyhl904 {
			if yyj904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys904Slc = r.DecodeBytes(yys904Slc, true, true)
		yys904 := string(yys904Slc)
		switch yys904 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys904)
		} // end switch yys904
	} // end for yyj904
	if !yyhl904 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj907 int
	var yyb907 bool
	var yyhl907 bool = l >= 0
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj907++
		if yyhl907 {
			yyb907 = yyj907 > l
		} else {
			yyb907 = r.CheckBreak()
		}
		if yyb907 {
			break
		}
		z.DecStructFieldNotFound(yyj907-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym910 := z.EncBinary()
		_ = yym910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep911 := !z.EncBinary()
			yy2arr911 := z.EncBasicHandle().StructToArray
			var yyq911 [4]bool
			_, _, _ = yysep911, yyq911, yy2arr911
			const yyr911 bool = false
			yyq911[0] = x.Path != ""
			yyq911[2] = x.Host != ""
			yyq911[3] = x.Scheme != ""
			if yyr911 || yy2arr911 {
				r.EncodeArrayStart(4)
			} else {
				var yynn911 int = 1
				for _, b := range yyq911 {
					if b {
						yynn911++
					}
				}
				r.EncodeMapStart(yynn911)
			}
			if yyr911 || yy2arr911 {
				if yyq911[0] {
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr911 || yy2arr911 {
				yy916 := &x.Port
				yym917 := z.EncBinary()
				_ = yym917
				if false {
				} else if z.HasExtensions() && z.EncExt(yy916) {
				} else if !yym917 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy916)
				} else {
					z.EncFallback(yy916)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy918 := &x.Port
				yym919 := z.EncBinary()
				_ = yym919
				if false {
				} else if z.HasExtensions() && z.EncExt(yy918) {
				} else if !yym919 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy918)
				} else {
					z.EncFallback(yy918)
				}
			}
			if yyr911 || yy2arr911 {
				if yyq911[2] {
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr911 || yy2arr911 {
				if yyq911[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep911 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym924 := z.DecBinary()
	_ = yym924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl925 := r.ReadMapStart()
			if yyl925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl925, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl925 := r.ReadArrayStart()
			if yyl925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys926Slc
	var yyhl926 bool = l >= 0
	for yyj926 := 0; ; yyj926++ {
		if yyhl926 {
			if yyj926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys926Slc = r.DecodeBytes(yys926Slc, true, true)
		yys926 := string(yys926Slc)
		switch yys926 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv928 := &x.Port
				yym929 := z.DecBinary()
				_ = yym929
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv928) {
				} else if !yym929 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv928)
				} else {
					z.DecFallback(yyv928, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys926)
		} // end switch yys926
	} // end for yyj926
	if !yyhl926 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj932 int
	var yyb932 bool
	var yyhl932 bool = l >= 0
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv934 := &x.Port
		yym935 := z.DecBinary()
		_ = yym935
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv934) {
		} else if !yym935 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv934)
		} else {
			z.DecFallback(yyv934, false)
		}
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj932++
		if yyhl932 {
			yyb932 = yyj932 > l
		} else {
			yyb932 = r.CheckBreak()
		}
		if yyb932 {
			break
		}
		z.DecStructFieldNotFound(yyj932-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym938 := z.EncBinary()
	_ = yym938
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym939 := z.DecBinary()
	_ = yym939
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym940 := z.EncBinary()
		_ = yym940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep941 := !z.EncBinary()
			yy2arr941 := z.EncBasicHandle().StructToArray
			var yyq941 [1]bool
			_, _, _ = yysep941, yyq941, yy2arr941
			const yyr941 bool = false
			if yyr941 || yy2arr941 {
				r.EncodeArrayStart(1)
			} else {
				var yynn941 int = 1
				for _, b := range yyq941 {
					if b {
						yynn941++
					}
				}
				r.EncodeMapStart(yynn941)
			}
			if yyr941 || yy2arr941 {
				yy943 := &x.Port
				yym944 := z.EncBinary()
				_ = yym944
				if false {
				} else if z.HasExtensions() && z.EncExt(yy943) {
				} else if !yym944 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy943)
				} else {
					z.EncFallback(yy943)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy945 := &x.Port
				yym946 := z.EncBinary()
				_ = yym946
				if false {
				} else if z.HasExtensions() && z.EncExt(yy945) {
				} else if !yym946 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy945)
				} else {
					z.EncFallback(yy945)
				}
			}
			if yysep941 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym947 := z.DecBinary()
	_ = yym947
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl948 := r.ReadMapStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl948, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl948 := r.ReadArrayStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl948, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys949Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys949Slc
	var yyhl949 bool = l >= 0
	for yyj949 := 0; ; yyj949++ {
		if yyhl949 {
			if yyj949 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys949Slc = r.DecodeBytes(yys949Slc, true, true)
		yys949 := string(yys949Slc)
		switch yys949 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv950 := &x.Port
				yym951 := z.DecBinary()
				_ = yym951
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv950) {
				} else if !yym951 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv950)
				} else {
					z.DecFallback(yyv950, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys949)
		} // end switch yys949
	} // end for yyj949
	if !yyhl949 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj952 int
	var yyb952 bool
	var yyhl952 bool = l >= 0
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv953 := &x.Port
		yym954 := z.DecBinary()
		_ = yym954
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv953) {
		} else if !yym954 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv953)
		} else {
			z.DecFallback(yyv953, false)
		}
	}
	for {
		yyj952++
		if yyhl952 {
			yyb952 = yyj952 > l
		} else {
			yyb952 = r.CheckBreak()
		}
		if yyb952 {
			break
		}
		z.DecStructFieldNotFound(yyj952-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym955 := z.EncBinary()
		_ = yym955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep956 := !z.EncBinary()
			yy2arr956 := z.EncBasicHandle().StructToArray
			var yyq956 [1]bool
			_, _, _ = yysep956, yyq956, yy2arr956
			const yyr956 bool = false
			yyq956[0] = len(x.Command) != 0
			if yyr956 || yy2arr956 {
				r.EncodeArrayStart(1)
			} else {
				var yynn956 int = 0
				for _, b := range yyq956 {
					if b {
						yynn956++
					}
				}
				r.EncodeMapStart(yynn956)
			}
			if yyr956 || yy2arr956 {
				if yyq956[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym958 := z.EncBinary()
						_ = yym958
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq956[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym959 := z.EncBinary()
						_ = yym959
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep956 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym960 := z.DecBinary()
	_ = yym960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl961 := r.ReadMapStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl961, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl961 := r.ReadArrayStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys962Slc
	var yyhl962 bool = l >= 0
	for yyj962 := 0; ; yyj962++ {
		if yyhl962 {
			if yyj962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys962Slc = r.DecodeBytes(yys962Slc, true, true)
		yys962 := string(yys962Slc)
		switch yys962 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv963 := &x.Command
				yym964 := z.DecBinary()
				_ = yym964
				if false {
				} else {
					z.F.DecSliceStringX(yyv963, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys962)
		} // end switch yys962
	} // end for yyj962
	if !yyhl962 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj965 int
	var yyb965 bool
	var yyhl965 bool = l >= 0
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv966 := &x.Command
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else {
			z.F.DecSliceStringX(yyv966, false, d)
		}
	}
	for {
		yyj965++
		if yyhl965 {
			yyb965 = yyj965 > l
		} else {
			yyb965 = r.CheckBreak()
		}
		if yyb965 {
			break
		}
		z.DecStructFieldNotFound(yyj965-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym968 := z.EncBinary()
		_ = yym968
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep969 := !z.EncBinary()
			yy2arr969 := z.EncBasicHandle().StructToArray
			var yyq969 [5]bool
			_, _, _ = yysep969, yyq969, yy2arr969
			const yyr969 bool = false
			yyq969[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq969[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq969[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq969[3] = x.InitialDelaySeconds != 0
			yyq969[4] = x.TimeoutSeconds != 0
			if yyr969 || yy2arr969 {
				r.EncodeArrayStart(5)
			} else {
				var yynn969 int = 0
				for _, b := range yyq969 {
					if b {
						yynn969++
					}
				}
				r.EncodeMapStart(yynn969)
			}
			var yyn970 bool
			if x.Handler.Exec == nil {
				yyn970 = true
				goto LABEL970
			}
		LABEL970:
			if yyr969 || yy2arr969 {
				if yyn970 {
					r.EncodeNil()
				} else {
					if yyq969[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn970 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn971 bool
			if x.Handler.HTTPGet == nil {
				yyn971 = true
				goto LABEL971
			}
		LABEL971:
			if yyr969 || yy2arr969 {
				if yyn971 {
					r.EncodeNil()
				} else {
					if yyq969[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn971 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn972 bool
			if x.Handler.TCPSocket == nil {
				yyn972 = true
				goto LABEL972
			}
		LABEL972:
			if yyr969 || yy2arr969 {
				if yyn972 {
					r.EncodeNil()
				} else {
					if yyq969[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn972 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[3] {
					yym974 := z.EncBinary()
					_ = yym974
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[4] {
					yym977 := z.EncBinary()
					_ = yym977
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yysep969 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym979 := z.DecBinary()
	_ = yym979
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl980 := r.ReadMapStart()
			if yyl980 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl980, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl980 := r.ReadArrayStart()
			if yyl980 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl980, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys981Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys981Slc
	var yyhl981 bool = l >= 0
	for yyj981 := 0; ; yyj981++ {
		if yyhl981 {
			if yyj981 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys981Slc = r.DecodeBytes(yys981Slc, true, true)
		yys981 := string(yys981Slc)
		switch yys981 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys981)
		} // end switch yys981
	} // end for yyj981
	if !yyhl981 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj987 int
	var yyb987 bool
	var yyhl987 bool = l >= 0
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	for {
		yyj987++
		if yyhl987 {
			yyb987 = yyj987 > l
		} else {
			yyb987 = r.CheckBreak()
		}
		if yyb987 {
			break
		}
		z.DecStructFieldNotFound(yyj987-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym993 := z.EncBinary()
	_ = yym993
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym994 := z.DecBinary()
	_ = yym994
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym995 := z.EncBinary()
	_ = yym995
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym996 := z.DecBinary()
	_ = yym996
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym997 := z.EncBinary()
		_ = yym997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep998 := !z.EncBinary()
			yy2arr998 := z.EncBasicHandle().StructToArray
			var yyq998 [2]bool
			_, _, _ = yysep998, yyq998, yy2arr998
			const yyr998 bool = false
			yyq998[0] = len(x.Add) != 0
			yyq998[1] = len(x.Drop) != 0
			if yyr998 || yy2arr998 {
				r.EncodeArrayStart(2)
			} else {
				var yynn998 int = 0
				for _, b := range yyq998 {
					if b {
						yynn998++
					}
				}
				r.EncodeMapStart(yynn998)
			}
			if yyr998 || yy2arr998 {
				if yyq998[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1000 := z.EncBinary()
						_ = yym1000
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq998[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1001 := z.EncBinary()
						_ = yym1001
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1003 := z.EncBinary()
						_ = yym1003
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq998[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1004 := z.EncBinary()
						_ = yym1004
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep998 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1005 := z.DecBinary()
	_ = yym1005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1006 := r.ReadMapStart()
			if yyl1006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1006, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1006 := r.ReadArrayStart()
			if yyl1006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1007Slc
	var yyhl1007 bool = l >= 0
	for yyj1007 := 0; ; yyj1007++ {
		if yyhl1007 {
			if yyj1007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1007Slc = r.DecodeBytes(yys1007Slc, true, true)
		yys1007 := string(yys1007Slc)
		switch yys1007 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1008 := &x.Add
				yym1009 := z.DecBinary()
				_ = yym1009
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1008), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1010 := &x.Drop
				yym1011 := z.DecBinary()
				_ = yym1011
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1010), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1007)
		} // end switch yys1007
	} // end for yyj1007
	if !yyhl1007 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1012 int
	var yyb1012 bool
	var yyhl1012 bool = l >= 0
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1013 := &x.Add
		yym1014 := z.DecBinary()
		_ = yym1014
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1013), d)
		}
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1015 := &x.Drop
		yym1016 := z.DecBinary()
		_ = yym1016
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1015), d)
		}
	}
	for {
		yyj1012++
		if yyhl1012 {
			yyb1012 = yyj1012 > l
		} else {
			yyb1012 = r.CheckBreak()
		}
		if yyb1012 {
			break
		}
		z.DecStructFieldNotFound(yyj1012-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1017 := z.EncBinary()
		_ = yym1017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1018 := !z.EncBinary()
			yy2arr1018 := z.EncBasicHandle().StructToArray
			var yyq1018 [2]bool
			_, _, _ = yysep1018, yyq1018, yy2arr1018
			const yyr1018 bool = false
			yyq1018[0] = len(x.Limits) != 0
			yyq1018[1] = len(x.Requests) != 0
			if yyr1018 || yy2arr1018 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1018 int = 0
				for _, b := range yyq1018 {
					if b {
						yynn1018++
					}
				}
				r.EncodeMapStart(yynn1018)
			}
			if yyr1018 || yy2arr1018 {
				if yyq1018[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1018[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1018 || yy2arr1018 {
				if yyq1018[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1018[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1018 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1021 := z.DecBinary()
	_ = yym1021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1022 := r.ReadMapStart()
			if yyl1022 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1022, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1022 := r.ReadArrayStart()
			if yyl1022 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1022, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1023Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1023Slc
	var yyhl1023 bool = l >= 0
	for yyj1023 := 0; ; yyj1023++ {
		if yyhl1023 {
			if yyj1023 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1023Slc = r.DecodeBytes(yys1023Slc, true, true)
		yys1023 := string(yys1023Slc)
		switch yys1023 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1024 := &x.Limits
				yyv1024.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1025 := &x.Requests
				yyv1025.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1023)
		} // end switch yys1023
	} // end for yyj1023
	if !yyhl1023 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1026 int
	var yyb1026 bool
	var yyhl1026 bool = l >= 0
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1027 := &x.Limits
		yyv1027.CodecDecodeSelf(d)
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1028 := &x.Requests
		yyv1028.CodecDecodeSelf(d)
	}
	for {
		yyj1026++
		if yyhl1026 {
			yyb1026 = yyj1026 > l
		} else {
			yyb1026 = r.CheckBreak()
		}
		if yyb1026 {
			break
		}
		z.DecStructFieldNotFound(yyj1026-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1029 := z.EncBinary()
		_ = yym1029
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1030 := !z.EncBinary()
			yy2arr1030 := z.EncBasicHandle().StructToArray
			var yyq1030 [18]bool
			_, _, _ = yysep1030, yyq1030, yy2arr1030
			const yyr1030 bool = false
			yyq1030[1] = x.Image != ""
			yyq1030[2] = len(x.Command) != 0
			yyq1030[3] = len(x.Args) != 0
			yyq1030[4] = x.WorkingDir != ""
			yyq1030[5] = len(x.Ports) != 0
			yyq1030[6] = len(x.Env) != 0
			yyq1030[7] = true
			yyq1030[8] = len(x.VolumeMounts) != 0
			yyq1030[9] = x.LivenessProbe != nil
			yyq1030[10] = x.ReadinessProbe != nil
			yyq1030[11] = x.Lifecycle != nil
			yyq1030[12] = x.TerminationMessagePath != ""
			yyq1030[13] = x.ImagePullPolicy != ""
			yyq1030[14] = x.SecurityContext != nil
			yyq1030[15] = x.Stdin != false
			yyq1030[16] = x.StdinOnce != false
			yyq1030[17] = x.TTY != false
			if yyr1030 || yy2arr1030 {
				r.EncodeArrayStart(18)
			} else {
				var yynn1030 int = 1
				for _, b := range yyq1030 {
					if b {
						yynn1030++
					}
				}
				r.EncodeMapStart(yynn1030)
			}
			if yyr1030 || yy2arr1030 {
				yym1032 := z.EncBinary()
				_ = yym1032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1033 := z.EncBinary()
				_ = yym1033
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[1] {
					yym1035 := z.EncBinary()
					_ = yym1035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[1] {
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					yym1036 := z.EncBinary()
					_ = yym1036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1038 := z.EncBinary()
						_ = yym1038
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1039 := z.EncBinary()
						_ = yym1039
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1041 := z.EncBinary()
						_ = yym1041
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1042 := z.EncBinary()
						_ = yym1042
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[4] {
					yym1044 := z.EncBinary()
					_ = yym1044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1045 := z.EncBinary()
					_ = yym1045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1047 := z.EncBinary()
						_ = yym1047
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1048 := z.EncBinary()
						_ = yym1048
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1050 := z.EncBinary()
						_ = yym1050
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1051 := z.EncBinary()
						_ = yym1051
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[7] {
					yy1053 := &x.Resources
					yy1053.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1054 := &x.Resources
					yy1054.CodecEncodeSelf(e)
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1056 := z.EncBinary()
						_ = yym1056
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1057 := z.EncBinary()
						_ = yym1057
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[12] {
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1063 := z.EncBinary()
					_ = yym1063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[13] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[15] {
					yym1067 := z.EncBinary()
					_ = yym1067
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1030[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1068 := z.EncBinary()
					_ = yym1068
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[16] {
					yym1070 := z.EncBinary()
					_ = yym1070
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1030[16] {
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					yym1071 := z.EncBinary()
					_ = yym1071
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[17] {
					yym1073 := z.EncBinary()
					_ = yym1073
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1030[17] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1030 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1075 := z.DecBinary()
	_ = yym1075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1076 := r.ReadMapStart()
			if yyl1076 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1076, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1076 := r.ReadArrayStart()
			if yyl1076 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1077Slc
	var yyhl1077 bool = l >= 0
	for yyj1077 := 0; ; yyj1077++ {
		if yyhl1077 {
			if yyj1077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1077Slc = r.DecodeBytes(yys1077Slc, true, true)
		yys1077 := string(yys1077Slc)
		switch yys1077 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1080 := &x.Command
				yym1081 := z.DecBinary()
				_ = yym1081
				if false {
				} else {
					z.F.DecSliceStringX(yyv1080, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1082 := &x.Args
				yym1083 := z.DecBinary()
				_ = yym1083
				if false {
				} else {
					z.F.DecSliceStringX(yyv1082, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1085 := &x.Ports
				yym1086 := z.DecBinary()
				_ = yym1086
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1085), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1087 := &x.Env
				yym1088 := z.DecBinary()
				_ = yym1088
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1087), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1089 := &x.Resources
				yyv1089.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1090 := &x.VolumeMounts
				yym1091 := z.DecBinary()
				_ = yym1091
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1090), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1077)
		} // end switch yys1077
	} // end for yyj1077
	if !yyhl1077 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1101 int
	var yyb1101 bool
	var yyhl1101 bool = l >= 0
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1104 := &x.Command
		yym1105 := z.DecBinary()
		_ = yym1105
		if false {
		} else {
			z.F.DecSliceStringX(yyv1104, false, d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1106 := &x.Args
		yym1107 := z.DecBinary()
		_ = yym1107
		if false {
		} else {
			z.F.DecSliceStringX(yyv1106, false, d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1109 := &x.Ports
		yym1110 := z.DecBinary()
		_ = yym1110
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1109), d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1111 := &x.Env
		yym1112 := z.DecBinary()
		_ = yym1112
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1111), d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1113 := &x.Resources
		yyv1113.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1114 := &x.VolumeMounts
		yym1115 := z.DecBinary()
		_ = yym1115
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1114), d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1101++
		if yyhl1101 {
			yyb1101 = yyj1101 > l
		} else {
			yyb1101 = r.CheckBreak()
		}
		if yyb1101 {
			break
		}
		z.DecStructFieldNotFound(yyj1101-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1125 := z.EncBinary()
		_ = yym1125
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1126 := !z.EncBinary()
			yy2arr1126 := z.EncBasicHandle().StructToArray
			var yyq1126 [3]bool
			_, _, _ = yysep1126, yyq1126, yy2arr1126
			const yyr1126 bool = false
			yyq1126[0] = x.Exec != nil
			yyq1126[1] = x.HTTPGet != nil
			yyq1126[2] = x.TCPSocket != nil
			if yyr1126 || yy2arr1126 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1126 int = 0
				for _, b := range yyq1126 {
					if b {
						yynn1126++
					}
				}
				r.EncodeMapStart(yynn1126)
			}
			if yyr1126 || yy2arr1126 {
				if yyq1126[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1126[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1126 || yy2arr1126 {
				if yyq1126[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1126[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1126 || yy2arr1126 {
				if yyq1126[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1126[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1126 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1130 := z.DecBinary()
	_ = yym1130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1131 := r.ReadMapStart()
			if yyl1131 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1131, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1131 := r.ReadArrayStart()
			if yyl1131 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1132Slc
	var yyhl1132 bool = l >= 0
	for yyj1132 := 0; ; yyj1132++ {
		if yyhl1132 {
			if yyj1132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1132Slc = r.DecodeBytes(yys1132Slc, true, true)
		yys1132 := string(yys1132Slc)
		switch yys1132 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1132)
		} // end switch yys1132
	} // end for yyj1132
	if !yyhl1132 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1136 int
	var yyb1136 bool
	var yyhl1136 bool = l >= 0
	yyj1136++
	if yyhl1136 {
		yyb1136 = yyj1136 > l
	} else {
		yyb1136 = r.CheckBreak()
	}
	if yyb1136 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1136++
	if yyhl1136 {
		yyb1136 = yyj1136 > l
	} else {
		yyb1136 = r.CheckBreak()
	}
	if yyb1136 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1136++
	if yyhl1136 {
		yyb1136 = yyj1136 > l
	} else {
		yyb1136 = r.CheckBreak()
	}
	if yyb1136 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1136++
		if yyhl1136 {
			yyb1136 = yyj1136 > l
		} else {
			yyb1136 = r.CheckBreak()
		}
		if yyb1136 {
			break
		}
		z.DecStructFieldNotFound(yyj1136-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1140 := z.EncBinary()
		_ = yym1140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1141 := !z.EncBinary()
			yy2arr1141 := z.EncBasicHandle().StructToArray
			var yyq1141 [2]bool
			_, _, _ = yysep1141, yyq1141, yy2arr1141
			const yyr1141 bool = false
			yyq1141[0] = x.PostStart != nil
			yyq1141[1] = x.PreStop != nil
			if yyr1141 || yy2arr1141 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1141 int = 0
				for _, b := range yyq1141 {
					if b {
						yynn1141++
					}
				}
				r.EncodeMapStart(yynn1141)
			}
			if yyr1141 || yy2arr1141 {
				if yyq1141[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1141 || yy2arr1141 {
				if yyq1141[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1144 := z.DecBinary()
	_ = yym1144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1145 := r.ReadMapStart()
			if yyl1145 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1145, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1145 := r.ReadArrayStart()
			if yyl1145 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1145, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1146Slc
	var yyhl1146 bool = l >= 0
	for yyj1146 := 0; ; yyj1146++ {
		if yyhl1146 {
			if yyj1146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1146Slc = r.DecodeBytes(yys1146Slc, true, true)
		yys1146 := string(yys1146Slc)
		switch yys1146 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1146)
		} // end switch yys1146
	} // end for yyj1146
	if !yyhl1146 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1149 int
	var yyb1149 bool
	var yyhl1149 bool = l >= 0
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1149++
		if yyhl1149 {
			yyb1149 = yyj1149 > l
		} else {
			yyb1149 = r.CheckBreak()
		}
		if yyb1149 {
			break
		}
		z.DecStructFieldNotFound(yyj1149-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1152 := z.EncBinary()
	_ = yym1152
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1153 := z.DecBinary()
	_ = yym1153
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1154 := z.EncBinary()
		_ = yym1154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1155 := !z.EncBinary()
			yy2arr1155 := z.EncBasicHandle().StructToArray
			var yyq1155 [2]bool
			_, _, _ = yysep1155, yyq1155, yy2arr1155
			const yyr1155 bool = false
			yyq1155[0] = x.Reason != ""
			yyq1155[1] = x.Message != ""
			if yyr1155 || yy2arr1155 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1155 int = 0
				for _, b := range yyq1155 {
					if b {
						yynn1155++
					}
				}
				r.EncodeMapStart(yynn1155)
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[0] {
					yym1157 := z.EncBinary()
					_ = yym1157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1155[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1158 := z.EncBinary()
					_ = yym1158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[1] {
					yym1160 := z.EncBinary()
					_ = yym1160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1155[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1161 := z.EncBinary()
					_ = yym1161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1155 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1162 := z.DecBinary()
	_ = yym1162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1163 := r.ReadMapStart()
			if yyl1163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1163, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1163 := r.ReadArrayStart()
			if yyl1163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1164Slc
	var yyhl1164 bool = l >= 0
	for yyj1164 := 0; ; yyj1164++ {
		if yyhl1164 {
			if yyj1164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1164Slc = r.DecodeBytes(yys1164Slc, true, true)
		yys1164 := string(yys1164Slc)
		switch yys1164 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1164)
		} // end switch yys1164
	} // end for yyj1164
	if !yyhl1164 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1167 int
	var yyb1167 bool
	var yyhl1167 bool = l >= 0
	yyj1167++
	if yyhl1167 {
		yyb1167 = yyj1167 > l
	} else {
		yyb1167 = r.CheckBreak()
	}
	if yyb1167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1167++
	if yyhl1167 {
		yyb1167 = yyj1167 > l
	} else {
		yyb1167 = r.CheckBreak()
	}
	if yyb1167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1167++
		if yyhl1167 {
			yyb1167 = yyj1167 > l
		} else {
			yyb1167 = r.CheckBreak()
		}
		if yyb1167 {
			break
		}
		z.DecStructFieldNotFound(yyj1167-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1170 := z.EncBinary()
		_ = yym1170
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1171 := !z.EncBinary()
			yy2arr1171 := z.EncBasicHandle().StructToArray
			var yyq1171 [1]bool
			_, _, _ = yysep1171, yyq1171, yy2arr1171
			const yyr1171 bool = false
			yyq1171[0] = true
			if yyr1171 || yy2arr1171 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1171 int = 0
				for _, b := range yyq1171 {
					if b {
						yynn1171++
					}
				}
				r.EncodeMapStart(yynn1171)
			}
			if yyr1171 || yy2arr1171 {
				if yyq1171[0] {
					yy1173 := &x.StartedAt
					yym1174 := z.EncBinary()
					_ = yym1174
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1173) {
					} else if yym1174 {
						z.EncBinaryMarshal(yy1173)
					} else if !yym1174 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1173)
					} else {
						z.EncFallback(yy1173)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1171[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1175 := &x.StartedAt
					yym1176 := z.EncBinary()
					_ = yym1176
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1175) {
					} else if yym1176 {
						z.EncBinaryMarshal(yy1175)
					} else if !yym1176 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1175)
					} else {
						z.EncFallback(yy1175)
					}
				}
			}
			if yysep1171 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1177 := z.DecBinary()
	_ = yym1177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1178 := r.ReadMapStart()
			if yyl1178 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1178, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1178 := r.ReadArrayStart()
			if yyl1178 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1178, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1179Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1179Slc
	var yyhl1179 bool = l >= 0
	for yyj1179 := 0; ; yyj1179++ {
		if yyhl1179 {
			if yyj1179 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1179Slc = r.DecodeBytes(yys1179Slc, true, true)
		yys1179 := string(yys1179Slc)
		switch yys1179 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1180 := &x.StartedAt
				yym1181 := z.DecBinary()
				_ = yym1181
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1180) {
				} else if yym1181 {
					z.DecBinaryUnmarshal(yyv1180)
				} else if !yym1181 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1180)
				} else {
					z.DecFallback(yyv1180, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1179)
		} // end switch yys1179
	} // end for yyj1179
	if !yyhl1179 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1182 int
	var yyb1182 bool
	var yyhl1182 bool = l >= 0
	yyj1182++
	if yyhl1182 {
		yyb1182 = yyj1182 > l
	} else {
		yyb1182 = r.CheckBreak()
	}
	if yyb1182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1183 := &x.StartedAt
		yym1184 := z.DecBinary()
		_ = yym1184
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1183) {
		} else if yym1184 {
			z.DecBinaryUnmarshal(yyv1183)
		} else if !yym1184 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1183)
		} else {
			z.DecFallback(yyv1183, false)
		}
	}
	for {
		yyj1182++
		if yyhl1182 {
			yyb1182 = yyj1182 > l
		} else {
			yyb1182 = r.CheckBreak()
		}
		if yyb1182 {
			break
		}
		z.DecStructFieldNotFound(yyj1182-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1185 := z.EncBinary()
		_ = yym1185
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1186 := !z.EncBinary()
			yy2arr1186 := z.EncBasicHandle().StructToArray
			var yyq1186 [7]bool
			_, _, _ = yysep1186, yyq1186, yy2arr1186
			const yyr1186 bool = false
			yyq1186[1] = x.Signal != 0
			yyq1186[2] = x.Reason != ""
			yyq1186[3] = x.Message != ""
			yyq1186[4] = true
			yyq1186[5] = true
			yyq1186[6] = x.ContainerID != ""
			if yyr1186 || yy2arr1186 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1186 int = 1
				for _, b := range yyq1186 {
					if b {
						yynn1186++
					}
				}
				r.EncodeMapStart(yynn1186)
			}
			if yyr1186 || yy2arr1186 {
				yym1188 := z.EncBinary()
				_ = yym1188
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1189 := z.EncBinary()
				_ = yym1189
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[1] {
					yym1191 := z.EncBinary()
					_ = yym1191
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1186[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[2] {
					yym1194 := z.EncBinary()
					_ = yym1194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1195 := z.EncBinary()
					_ = yym1195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[3] {
					yym1197 := z.EncBinary()
					_ = yym1197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1198 := z.EncBinary()
					_ = yym1198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[4] {
					yy1200 := &x.StartedAt
					yym1201 := z.EncBinary()
					_ = yym1201
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1200) {
					} else if yym1201 {
						z.EncBinaryMarshal(yy1200)
					} else if !yym1201 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1200)
					} else {
						z.EncFallback(yy1200)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1186[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1202 := &x.StartedAt
					yym1203 := z.EncBinary()
					_ = yym1203
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1202) {
					} else if yym1203 {
						z.EncBinaryMarshal(yy1202)
					} else if !yym1203 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1202)
					} else {
						z.EncFallback(yy1202)
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[5] {
					yy1205 := &x.FinishedAt
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1205) {
					} else if yym1206 {
						z.EncBinaryMarshal(yy1205)
					} else if !yym1206 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1205)
					} else {
						z.EncFallback(yy1205)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1186[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1207 := &x.FinishedAt
					yym1208 := z.EncBinary()
					_ = yym1208
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1207) {
					} else if yym1208 {
						z.EncBinaryMarshal(yy1207)
					} else if !yym1208 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1207)
					} else {
						z.EncFallback(yy1207)
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[6] {
					yym1210 := z.EncBinary()
					_ = yym1210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1186 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1212 := z.DecBinary()
	_ = yym1212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1213 := r.ReadMapStart()
			if yyl1213 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1213, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1213 := r.ReadArrayStart()
			if yyl1213 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1214Slc
	var yyhl1214 bool = l >= 0
	for yyj1214 := 0; ; yyj1214++ {
		if yyhl1214 {
			if yyj1214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1214Slc = r.DecodeBytes(yys1214Slc, true, true)
		yys1214 := string(yys1214Slc)
		switch yys1214 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1219 := &x.StartedAt
				yym1220 := z.DecBinary()
				_ = yym1220
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1219) {
				} else if yym1220 {
					z.DecBinaryUnmarshal(yyv1219)
				} else if !yym1220 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1219)
				} else {
					z.DecFallback(yyv1219, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1221 := &x.FinishedAt
				yym1222 := z.DecBinary()
				_ = yym1222
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1221) {
				} else if yym1222 {
					z.DecBinaryUnmarshal(yyv1221)
				} else if !yym1222 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1221)
				} else {
					z.DecFallback(yyv1221, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1214)
		} // end switch yys1214
	} // end for yyj1214
	if !yyhl1214 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1224 int
	var yyb1224 bool
	var yyhl1224 bool = l >= 0
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1229 := &x.StartedAt
		yym1230 := z.DecBinary()
		_ = yym1230
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1229) {
		} else if yym1230 {
			z.DecBinaryUnmarshal(yyv1229)
		} else if !yym1230 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1229)
		} else {
			z.DecFallback(yyv1229, false)
		}
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1231 := &x.FinishedAt
		yym1232 := z.DecBinary()
		_ = yym1232
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1231) {
		} else if yym1232 {
			z.DecBinaryUnmarshal(yyv1231)
		} else if !yym1232 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1231)
		} else {
			z.DecFallback(yyv1231, false)
		}
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1224++
		if yyhl1224 {
			yyb1224 = yyj1224 > l
		} else {
			yyb1224 = r.CheckBreak()
		}
		if yyb1224 {
			break
		}
		z.DecStructFieldNotFound(yyj1224-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1234 := z.EncBinary()
		_ = yym1234
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1235 := !z.EncBinary()
			yy2arr1235 := z.EncBasicHandle().StructToArray
			var yyq1235 [3]bool
			_, _, _ = yysep1235, yyq1235, yy2arr1235
			const yyr1235 bool = false
			yyq1235[0] = x.Waiting != nil
			yyq1235[1] = x.Running != nil
			yyq1235[2] = x.Terminated != nil
			if yyr1235 || yy2arr1235 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1235 int = 0
				for _, b := range yyq1235 {
					if b {
						yynn1235++
					}
				}
				r.EncodeMapStart(yynn1235)
			}
			if yyr1235 || yy2arr1235 {
				if yyq1235[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				if yyq1235[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				if yyq1235[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1235 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1239 := z.DecBinary()
	_ = yym1239
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1240 := r.ReadMapStart()
			if yyl1240 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1240, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1240 := r.ReadArrayStart()
			if yyl1240 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1240, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1241Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1241Slc
	var yyhl1241 bool = l >= 0
	for yyj1241 := 0; ; yyj1241++ {
		if yyhl1241 {
			if yyj1241 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1241Slc = r.DecodeBytes(yys1241Slc, true, true)
		yys1241 := string(yys1241Slc)
		switch yys1241 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1241)
		} // end switch yys1241
	} // end for yyj1241
	if !yyhl1241 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1245 int
	var yyb1245 bool
	var yyhl1245 bool = l >= 0
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1245++
		if yyhl1245 {
			yyb1245 = yyj1245 > l
		} else {
			yyb1245 = r.CheckBreak()
		}
		if yyb1245 {
			break
		}
		z.DecStructFieldNotFound(yyj1245-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1249 := z.EncBinary()
		_ = yym1249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1250 := !z.EncBinary()
			yy2arr1250 := z.EncBasicHandle().StructToArray
			var yyq1250 [8]bool
			_, _, _ = yysep1250, yyq1250, yy2arr1250
			const yyr1250 bool = false
			yyq1250[1] = true
			yyq1250[2] = true
			yyq1250[7] = x.ContainerID != ""
			if yyr1250 || yy2arr1250 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1250 int = 5
				for _, b := range yyq1250 {
					if b {
						yynn1250++
					}
				}
				r.EncodeMapStart(yynn1250)
			}
			if yyr1250 || yy2arr1250 {
				yym1252 := z.EncBinary()
				_ = yym1252
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1253 := z.EncBinary()
				_ = yym1253
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1250 || yy2arr1250 {
				if yyq1250[1] {
					yy1255 := &x.State
					yy1255.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1256 := &x.State
					yy1256.CodecEncodeSelf(e)
				}
			}
			if yyr1250 || yy2arr1250 {
				if yyq1250[2] {
					yy1258 := &x.LastTerminationState
					yy1258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1259 := &x.LastTerminationState
					yy1259.CodecEncodeSelf(e)
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1261 := z.EncBinary()
				_ = yym1261
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1262 := z.EncBinary()
				_ = yym1262
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1264 := z.EncBinary()
				_ = yym1264
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1265 := z.EncBinary()
				_ = yym1265
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1267 := z.EncBinary()
				_ = yym1267
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1268 := z.EncBinary()
				_ = yym1268
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1270 := z.EncBinary()
				_ = yym1270
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1271 := z.EncBinary()
				_ = yym1271
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1250 || yy2arr1250 {
				if yyq1250[7] {
					yym1273 := z.EncBinary()
					_ = yym1273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1250[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1274 := z.EncBinary()
					_ = yym1274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1275 := z.DecBinary()
	_ = yym1275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1276 := r.ReadMapStart()
			if yyl1276 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1276, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1276 := r.ReadArrayStart()
			if yyl1276 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1277Slc
	var yyhl1277 bool = l >= 0
	for yyj1277 := 0; ; yyj1277++ {
		if yyhl1277 {
			if yyj1277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1277Slc = r.DecodeBytes(yys1277Slc, true, true)
		yys1277 := string(yys1277Slc)
		switch yys1277 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1279 := &x.State
				yyv1279.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1280 := &x.LastTerminationState
				yyv1280.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1277)
		} // end switch yys1277
	} // end for yyj1277
	if !yyhl1277 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1286 int
	var yyb1286 bool
	var yyhl1286 bool = l >= 0
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1288 := &x.State
		yyv1288.CodecDecodeSelf(d)
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1289 := &x.LastTerminationState
		yyv1289.CodecDecodeSelf(d)
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1286++
		if yyhl1286 {
			yyb1286 = yyj1286 > l
		} else {
			yyb1286 = r.CheckBreak()
		}
		if yyb1286 {
			break
		}
		z.DecStructFieldNotFound(yyj1286-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1295 := z.EncBinary()
	_ = yym1295
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1296 := z.DecBinary()
	_ = yym1296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1297 := z.EncBinary()
	_ = yym1297
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1298 := z.DecBinary()
	_ = yym1298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1299 := z.EncBinary()
		_ = yym1299
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1300 := !z.EncBinary()
			yy2arr1300 := z.EncBasicHandle().StructToArray
			var yyq1300 [6]bool
			_, _, _ = yysep1300, yyq1300, yy2arr1300
			const yyr1300 bool = false
			yyq1300[2] = true
			yyq1300[3] = true
			yyq1300[4] = x.Reason != ""
			yyq1300[5] = x.Message != ""
			if yyr1300 || yy2arr1300 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1300 int = 2
				for _, b := range yyq1300 {
					if b {
						yynn1300++
					}
				}
				r.EncodeMapStart(yynn1300)
			}
			if yyr1300 || yy2arr1300 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1300 || yy2arr1300 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[2] {
					yy1304 := &x.LastProbeTime
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1304) {
					} else if yym1305 {
						z.EncBinaryMarshal(yy1304)
					} else if !yym1305 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1304)
					} else {
						z.EncFallback(yy1304)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1300[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1306 := &x.LastProbeTime
					yym1307 := z.EncBinary()
					_ = yym1307
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1306) {
					} else if yym1307 {
						z.EncBinaryMarshal(yy1306)
					} else if !yym1307 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1306)
					} else {
						z.EncFallback(yy1306)
					}
				}
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[3] {
					yy1309 := &x.LastTransitionTime
					yym1310 := z.EncBinary()
					_ = yym1310
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1309) {
					} else if yym1310 {
						z.EncBinaryMarshal(yy1309)
					} else if !yym1310 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1309)
					} else {
						z.EncFallback(yy1309)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1300[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1311 := &x.LastTransitionTime
					yym1312 := z.EncBinary()
					_ = yym1312
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1311) {
					} else if yym1312 {
						z.EncBinaryMarshal(yy1311)
					} else if !yym1312 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1311)
					} else {
						z.EncFallback(yy1311)
					}
				}
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[4] {
					yym1314 := z.EncBinary()
					_ = yym1314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1300[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1315 := z.EncBinary()
					_ = yym1315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[5] {
					yym1317 := z.EncBinary()
					_ = yym1317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1300[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1300 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1319 := z.DecBinary()
	_ = yym1319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1320 := r.ReadMapStart()
			if yyl1320 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1320, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1320 := r.ReadArrayStart()
			if yyl1320 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1321Slc
	var yyhl1321 bool = l >= 0
	for yyj1321 := 0; ; yyj1321++ {
		if yyhl1321 {
			if yyj1321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1321Slc = r.DecodeBytes(yys1321Slc, true, true)
		yys1321 := string(yys1321Slc)
		switch yys1321 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1324 := &x.LastProbeTime
				yym1325 := z.DecBinary()
				_ = yym1325
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1324) {
				} else if yym1325 {
					z.DecBinaryUnmarshal(yyv1324)
				} else if !yym1325 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1324)
				} else {
					z.DecFallback(yyv1324, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1326 := &x.LastTransitionTime
				yym1327 := z.DecBinary()
				_ = yym1327
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1326) {
				} else if yym1327 {
					z.DecBinaryUnmarshal(yyv1326)
				} else if !yym1327 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1326)
				} else {
					z.DecFallback(yyv1326, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1321)
		} // end switch yys1321
	} // end for yyj1321
	if !yyhl1321 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1330 int
	var yyb1330 bool
	var yyhl1330 bool = l >= 0
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1333 := &x.LastProbeTime
		yym1334 := z.DecBinary()
		_ = yym1334
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1333) {
		} else if yym1334 {
			z.DecBinaryUnmarshal(yyv1333)
		} else if !yym1334 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1333)
		} else {
			z.DecFallback(yyv1333, false)
		}
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1335 := &x.LastTransitionTime
		yym1336 := z.DecBinary()
		_ = yym1336
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1335) {
		} else if yym1336 {
			z.DecBinaryUnmarshal(yyv1335)
		} else if !yym1336 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1335)
		} else {
			z.DecFallback(yyv1335, false)
		}
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1330++
		if yyhl1330 {
			yyb1330 = yyj1330 > l
		} else {
			yyb1330 = r.CheckBreak()
		}
		if yyb1330 {
			break
		}
		z.DecStructFieldNotFound(yyj1330-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1339 := z.EncBinary()
	_ = yym1339
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1340 := z.DecBinary()
	_ = yym1340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1341 := z.EncBinary()
	_ = yym1341
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1342 := z.DecBinary()
	_ = yym1342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1343 := z.EncBinary()
		_ = yym1343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1344 := !z.EncBinary()
			yy2arr1344 := z.EncBasicHandle().StructToArray
			var yyq1344 [16]bool
			_, _, _ = yysep1344, yyq1344, yy2arr1344
			const yyr1344 bool = false
			yyq1344[0] = len(x.Volumes) != 0
			yyq1344[2] = x.RestartPolicy != ""
			yyq1344[3] = x.TerminationGracePeriodSeconds != nil
			yyq1344[4] = x.ActiveDeadlineSeconds != nil
			yyq1344[5] = x.DNSPolicy != ""
			yyq1344[6] = len(x.NodeSelector) != 0
			yyq1344[7] = len(x.AffinitySelector) != 0
			yyq1344[8] = x.ServiceAccountName != ""
			yyq1344[9] = x.DeprecatedServiceAccount != ""
			yyq1344[10] = x.NodeName != ""
			yyq1344[11] = x.HostNetwork != false
			yyq1344[12] = x.HostPID != false
			yyq1344[13] = x.HostIPC != false
			yyq1344[14] = x.SecurityContext != nil
			yyq1344[15] = len(x.ImagePullSecrets) != 0
			if yyr1344 || yy2arr1344 {
				r.EncodeArrayStart(16)
			} else {
				var yynn1344 int = 1
				for _, b := range yyq1344 {
					if b {
						yynn1344++
					}
				}
				r.EncodeMapStart(yynn1344)
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1346 := z.EncBinary()
						_ = yym1346
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[0] {
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1347 := z.EncBinary()
						_ = yym1347
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1349 := z.EncBinary()
					_ = yym1349
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1350 := z.EncBinary()
					_ = yym1350
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1353 := *x.TerminationGracePeriodSeconds
						yym1354 := z.EncBinary()
						_ = yym1354
						if false {
						} else {
							r.EncodeInt(int64(yy1353))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1355 := *x.TerminationGracePeriodSeconds
						yym1356 := z.EncBinary()
						_ = yym1356
						if false {
						} else {
							r.EncodeInt(int64(yy1355))
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1358 := *x.ActiveDeadlineSeconds
						yym1359 := z.EncBinary()
						_ = yym1359
						if false {
						} else {
							r.EncodeInt(int64(yy1358))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1360 := *x.ActiveDeadlineSeconds
						yym1361 := z.EncBinary()
						_ = yym1361
						if false {
						} else {
							r.EncodeInt(int64(yy1360))
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1364 := z.EncBinary()
						_ = yym1364
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1365 := z.EncBinary()
						_ = yym1365
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[7] {
					if x.AffinitySelector == nil {
						r.EncodeNil()
					} else {
						yym1367 := z.EncBinary()
						_ = yym1367
						if false {
						} else {
							z.F.EncMapStringStringV(x.AffinitySelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[7] {
					r.EncodeString(codecSelferC_UTF81234, string("affinitySelector"))
					if x.AffinitySelector == nil {
						r.EncodeNil()
					} else {
						yym1368 := z.EncBinary()
						_ = yym1368
						if false {
						} else {
							z.F.EncMapStringStringV(x.AffinitySelector, false, e)
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[8] {
					yym1370 := z.EncBinary()
					_ = yym1370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[8] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					yym1371 := z.EncBinary()
					_ = yym1371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[9] {
					yym1373 := z.EncBinary()
					_ = yym1373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[9] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[10] {
					yym1376 := z.EncBinary()
					_ = yym1376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[10] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[11] {
					yym1379 := z.EncBinary()
					_ = yym1379
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1344[11] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[12] {
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1344[12] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1383 := z.EncBinary()
					_ = yym1383
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[13] {
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1344[13] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1386 := z.EncBinary()
					_ = yym1386
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[15] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1389 := z.EncBinary()
						_ = yym1389
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[15] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1390 := z.EncBinary()
						_ = yym1390
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1344 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1391 := z.DecBinary()
	_ = yym1391
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1392 := r.ReadMapStart()
			if yyl1392 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1392, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1392 := r.ReadArrayStart()
			if yyl1392 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1392, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1393Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1393Slc
	var yyhl1393 bool = l >= 0
	for yyj1393 := 0; ; yyj1393++ {
		if yyhl1393 {
			if yyj1393 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1393Slc = r.DecodeBytes(yys1393Slc, true, true)
		yys1393 := string(yys1393Slc)
		switch yys1393 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1394 := &x.Volumes
				yym1395 := z.DecBinary()
				_ = yym1395
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1394), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1396 := &x.Containers
				yym1397 := z.DecBinary()
				_ = yym1397
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1396), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1400 := z.DecBinary()
				_ = yym1400
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1402 := z.DecBinary()
				_ = yym1402
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1404 := &x.NodeSelector
				yym1405 := z.DecBinary()
				_ = yym1405
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1404, false, d)
				}
			}
		case "affinitySelector":
			if r.TryDecodeAsNil() {
				x.AffinitySelector = nil
			} else {
				yyv1406 := &x.AffinitySelector
				yym1407 := z.DecBinary()
				_ = yym1407
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1406, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1415 := &x.ImagePullSecrets
				yym1416 := z.DecBinary()
				_ = yym1416
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1415), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1393)
		} // end switch yys1393
	} // end for yyj1393
	if !yyhl1393 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1417 int
	var yyb1417 bool
	var yyhl1417 bool = l >= 0
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1418 := &x.Volumes
		yym1419 := z.DecBinary()
		_ = yym1419
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1418), d)
		}
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1420 := &x.Containers
		yym1421 := z.DecBinary()
		_ = yym1421
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1420), d)
		}
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1424 := z.DecBinary()
		_ = yym1424
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1426 := z.DecBinary()
		_ = yym1426
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1428 := &x.NodeSelector
		yym1429 := z.DecBinary()
		_ = yym1429
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1428, false, d)
		}
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AffinitySelector = nil
	} else {
		yyv1430 := &x.AffinitySelector
		yym1431 := z.DecBinary()
		_ = yym1431
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1430, false, d)
		}
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1439 := &x.ImagePullSecrets
		yym1440 := z.DecBinary()
		_ = yym1440
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1439), d)
		}
	}
	for {
		yyj1417++
		if yyhl1417 {
			yyb1417 = yyj1417 > l
		} else {
			yyb1417 = r.CheckBreak()
		}
		if yyb1417 {
			break
		}
		z.DecStructFieldNotFound(yyj1417-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1441 := z.EncBinary()
		_ = yym1441
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1442 := !z.EncBinary()
			yy2arr1442 := z.EncBasicHandle().StructToArray
			var yyq1442 [5]bool
			_, _, _ = yysep1442, yyq1442, yy2arr1442
			const yyr1442 bool = false
			yyq1442[0] = x.SELinuxOptions != nil
			yyq1442[1] = x.RunAsUser != nil
			yyq1442[2] = x.RunAsNonRoot != nil
			yyq1442[3] = len(x.SupplementalGroups) != 0
			yyq1442[4] = x.FSGroup != nil
			if yyr1442 || yy2arr1442 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1442 int = 0
				for _, b := range yyq1442 {
					if b {
						yynn1442++
					}
				}
				r.EncodeMapStart(yynn1442)
			}
			if yyr1442 || yy2arr1442 {
				if yyq1442[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1442[0] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1442 || yy2arr1442 {
				if yyq1442[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1445 := *x.RunAsUser
						yym1446 := z.EncBinary()
						_ = yym1446
						if false {
						} else {
							r.EncodeInt(int64(yy1445))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1442[1] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1447 := *x.RunAsUser
						yym1448 := z.EncBinary()
						_ = yym1448
						if false {
						} else {
							r.EncodeInt(int64(yy1447))
						}
					}
				}
			}
			if yyr1442 || yy2arr1442 {
				if yyq1442[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1450 := *x.RunAsNonRoot
						yym1451 := z.EncBinary()
						_ = yym1451
						if false {
						} else {
							r.EncodeBool(bool(yy1450))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1442[2] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1452 := *x.RunAsNonRoot
						yym1453 := z.EncBinary()
						_ = yym1453
						if false {
						} else {
							r.EncodeBool(bool(yy1452))
						}
					}
				}
			}
			if yyr1442 || yy2arr1442 {
				if yyq1442[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1455 := z.EncBinary()
						_ = yym1455
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1442[3] {
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1456 := z.EncBinary()
						_ = yym1456
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1442 || yy2arr1442 {
				if yyq1442[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1458 := *x.FSGroup
						yym1459 := z.EncBinary()
						_ = yym1459
						if false {
						} else {
							r.EncodeInt(int64(yy1458))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1442[4] {
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1460 := *x.FSGroup
						yym1461 := z.EncBinary()
						_ = yym1461
						if false {
						} else {
							r.EncodeInt(int64(yy1460))
						}
					}
				}
			}
			if yysep1442 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1462 := z.DecBinary()
	_ = yym1462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1463 := r.ReadMapStart()
			if yyl1463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1463 := r.ReadArrayStart()
			if yyl1463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1464Slc
	var yyhl1464 bool = l >= 0
	for yyj1464 := 0; ; yyj1464++ {
		if yyhl1464 {
			if yyj1464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1464Slc = r.DecodeBytes(yys1464Slc, true, true)
		yys1464 := string(yys1464Slc)
		switch yys1464 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1467 := z.DecBinary()
				_ = yym1467
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1469 := z.DecBinary()
				_ = yym1469
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1470 := &x.SupplementalGroups
				yym1471 := z.DecBinary()
				_ = yym1471
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1470, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1473 := z.DecBinary()
				_ = yym1473
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1464)
		} // end switch yys1464
	} // end for yyj1464
	if !yyhl1464 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1474 int
	var yyb1474 bool
	var yyhl1474 bool = l >= 0
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1477 := z.DecBinary()
		_ = yym1477
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1479 := z.DecBinary()
		_ = yym1479
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1480 := &x.SupplementalGroups
		yym1481 := z.DecBinary()
		_ = yym1481
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1480, false, d)
		}
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1483 := z.DecBinary()
		_ = yym1483
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1474++
		if yyhl1474 {
			yyb1474 = yyj1474 > l
		} else {
			yyb1474 = r.CheckBreak()
		}
		if yyb1474 {
			break
		}
		z.DecStructFieldNotFound(yyj1474-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1484 := z.EncBinary()
		_ = yym1484
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1485 := !z.EncBinary()
			yy2arr1485 := z.EncBasicHandle().StructToArray
			var yyq1485 [8]bool
			_, _, _ = yysep1485, yyq1485, yy2arr1485
			const yyr1485 bool = false
			yyq1485[0] = x.Phase != ""
			yyq1485[1] = len(x.Conditions) != 0
			yyq1485[2] = x.Message != ""
			yyq1485[3] = x.Reason != ""
			yyq1485[4] = x.HostIP != ""
			yyq1485[5] = x.PodIP != ""
			yyq1485[6] = x.StartTime != nil
			yyq1485[7] = len(x.ContainerStatuses) != 0
			if yyr1485 || yy2arr1485 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1485 int = 0
				for _, b := range yyq1485 {
					if b {
						yynn1485++
					}
				}
				r.EncodeMapStart(yynn1485)
			}
			if yyr1485 || yy2arr1485 {
				if yyq1485[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1485[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1485 || yy2arr1485 {
				if yyq1485[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1488 := z.EncBinary()
						_ = yym1488
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1485[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1489 := z.EncBinary()
						_ = yym1489
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1485 || yy2arr1485 {
				if yyq1485[2] {
					yym1491 := z.EncBinary()
					_ = yym1491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1485[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1492 := z.EncBinary()
					_ = yym1492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1485 || yy2arr1485 {
				if yyq1485[3] {
					yym1494 := z.EncBinary()
					_ = yym1494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1485[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1495 := z.EncBinary()
					_ = yym1495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1485 || yy2arr1485 {
				if yyq1485[4] {
					yym1497 := z.EncBinary()
					_ = yym1497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1485[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1498 := z.EncBinary()
					_ = yym1498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1485 || yy2arr1485 {
				if yyq1485[5] {
					yym1500 := z.EncBinary()
					_ = yym1500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1485[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1501 := z.EncBinary()
					_ = yym1501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1485 || yy2arr1485 {
				if yyq1485[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1503 := z.EncBinary()
						_ = yym1503
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1503 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1503 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1485[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1504 := z.EncBinary()
						_ = yym1504
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1504 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1504 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1485 || yy2arr1485 {
				if yyq1485[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1506 := z.EncBinary()
						_ = yym1506
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1485[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1507 := z.EncBinary()
						_ = yym1507
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1485 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1508 := z.DecBinary()
	_ = yym1508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1509 := r.ReadMapStart()
			if yyl1509 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1509, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1509 := r.ReadArrayStart()
			if yyl1509 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1509, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1510Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1510Slc
	var yyhl1510 bool = l >= 0
	for yyj1510 := 0; ; yyj1510++ {
		if yyhl1510 {
			if yyj1510 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1510Slc = r.DecodeBytes(yys1510Slc, true, true)
		yys1510 := string(yys1510Slc)
		switch yys1510 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1512 := &x.Conditions
				yym1513 := z.DecBinary()
				_ = yym1513
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1512), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1519 := z.DecBinary()
				_ = yym1519
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1519 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1519 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1520 := &x.ContainerStatuses
				yym1521 := z.DecBinary()
				_ = yym1521
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1520), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1510)
		} // end switch yys1510
	} // end for yyj1510
	if !yyhl1510 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1522 int
	var yyb1522 bool
	var yyhl1522 bool = l >= 0
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1524 := &x.Conditions
		yym1525 := z.DecBinary()
		_ = yym1525
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1524), d)
		}
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1531 := z.DecBinary()
		_ = yym1531
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1531 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1531 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1532 := &x.ContainerStatuses
		yym1533 := z.DecBinary()
		_ = yym1533
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1532), d)
		}
	}
	for {
		yyj1522++
		if yyhl1522 {
			yyb1522 = yyj1522 > l
		} else {
			yyb1522 = r.CheckBreak()
		}
		if yyb1522 {
			break
		}
		z.DecStructFieldNotFound(yyj1522-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1534 := z.EncBinary()
		_ = yym1534
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1535 := !z.EncBinary()
			yy2arr1535 := z.EncBasicHandle().StructToArray
			var yyq1535 [4]bool
			_, _, _ = yysep1535, yyq1535, yy2arr1535
			const yyr1535 bool = false
			yyq1535[0] = x.Kind != ""
			yyq1535[1] = x.APIVersion != ""
			yyq1535[2] = true
			yyq1535[3] = true
			if yyr1535 || yy2arr1535 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1535 int = 0
				for _, b := range yyq1535 {
					if b {
						yynn1535++
					}
				}
				r.EncodeMapStart(yynn1535)
			}
			if yyr1535 || yy2arr1535 {
				if yyq1535[0] {
					yym1537 := z.EncBinary()
					_ = yym1537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1535[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1538 := z.EncBinary()
					_ = yym1538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1535 || yy2arr1535 {
				if yyq1535[1] {
					yym1540 := z.EncBinary()
					_ = yym1540
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1535[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1541 := z.EncBinary()
					_ = yym1541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1535 || yy2arr1535 {
				if yyq1535[2] {
					yy1543 := &x.ObjectMeta
					yy1543.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1535[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1544 := &x.ObjectMeta
					yy1544.CodecEncodeSelf(e)
				}
			}
			if yyr1535 || yy2arr1535 {
				if yyq1535[3] {
					yy1546 := &x.Status
					yy1546.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1535[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1547 := &x.Status
					yy1547.CodecEncodeSelf(e)
				}
			}
			if yysep1535 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1548 := z.DecBinary()
	_ = yym1548
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1549 := r.ReadMapStart()
			if yyl1549 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1549, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1549 := r.ReadArrayStart()
			if yyl1549 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1549, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1550Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1550Slc
	var yyhl1550 bool = l >= 0
	for yyj1550 := 0; ; yyj1550++ {
		if yyhl1550 {
			if yyj1550 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1550Slc = r.DecodeBytes(yys1550Slc, true, true)
		yys1550 := string(yys1550Slc)
		switch yys1550 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1553 := &x.ObjectMeta
				yyv1553.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1554 := &x.Status
				yyv1554.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1550)
		} // end switch yys1550
	} // end for yyj1550
	if !yyhl1550 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1555 int
	var yyb1555 bool
	var yyhl1555 bool = l >= 0
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1558 := &x.ObjectMeta
		yyv1558.CodecDecodeSelf(d)
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1559 := &x.Status
		yyv1559.CodecDecodeSelf(d)
	}
	for {
		yyj1555++
		if yyhl1555 {
			yyb1555 = yyj1555 > l
		} else {
			yyb1555 = r.CheckBreak()
		}
		if yyb1555 {
			break
		}
		z.DecStructFieldNotFound(yyj1555-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1560 := z.EncBinary()
		_ = yym1560
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1561 := !z.EncBinary()
			yy2arr1561 := z.EncBasicHandle().StructToArray
			var yyq1561 [5]bool
			_, _, _ = yysep1561, yyq1561, yy2arr1561
			const yyr1561 bool = false
			yyq1561[0] = x.Kind != ""
			yyq1561[1] = x.APIVersion != ""
			yyq1561[2] = true
			yyq1561[3] = true
			yyq1561[4] = true
			if yyr1561 || yy2arr1561 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1561 int = 0
				for _, b := range yyq1561 {
					if b {
						yynn1561++
					}
				}
				r.EncodeMapStart(yynn1561)
			}
			if yyr1561 || yy2arr1561 {
				if yyq1561[0] {
					yym1563 := z.EncBinary()
					_ = yym1563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1561[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1564 := z.EncBinary()
					_ = yym1564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1561 || yy2arr1561 {
				if yyq1561[1] {
					yym1566 := z.EncBinary()
					_ = yym1566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1561[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1567 := z.EncBinary()
					_ = yym1567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1561 || yy2arr1561 {
				if yyq1561[2] {
					yy1569 := &x.ObjectMeta
					yy1569.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1561[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1570 := &x.ObjectMeta
					yy1570.CodecEncodeSelf(e)
				}
			}
			if yyr1561 || yy2arr1561 {
				if yyq1561[3] {
					yy1572 := &x.Spec
					yy1572.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1561[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1573 := &x.Spec
					yy1573.CodecEncodeSelf(e)
				}
			}
			if yyr1561 || yy2arr1561 {
				if yyq1561[4] {
					yy1575 := &x.Status
					yy1575.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1561[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1576 := &x.Status
					yy1576.CodecEncodeSelf(e)
				}
			}
			if yysep1561 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1577 := z.DecBinary()
	_ = yym1577
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1578 := r.ReadMapStart()
			if yyl1578 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1578, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1578 := r.ReadArrayStart()
			if yyl1578 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1578, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1579Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1579Slc
	var yyhl1579 bool = l >= 0
	for yyj1579 := 0; ; yyj1579++ {
		if yyhl1579 {
			if yyj1579 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1579Slc = r.DecodeBytes(yys1579Slc, true, true)
		yys1579 := string(yys1579Slc)
		switch yys1579 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1582 := &x.ObjectMeta
				yyv1582.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1583 := &x.Spec
				yyv1583.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1584 := &x.Status
				yyv1584.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1579)
		} // end switch yys1579
	} // end for yyj1579
	if !yyhl1579 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1585 int
	var yyb1585 bool
	var yyhl1585 bool = l >= 0
	yyj1585++
	if yyhl1585 {
		yyb1585 = yyj1585 > l
	} else {
		yyb1585 = r.CheckBreak()
	}
	if yyb1585 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1585++
	if yyhl1585 {
		yyb1585 = yyj1585 > l
	} else {
		yyb1585 = r.CheckBreak()
	}
	if yyb1585 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1585++
	if yyhl1585 {
		yyb1585 = yyj1585 > l
	} else {
		yyb1585 = r.CheckBreak()
	}
	if yyb1585 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1588 := &x.ObjectMeta
		yyv1588.CodecDecodeSelf(d)
	}
	yyj1585++
	if yyhl1585 {
		yyb1585 = yyj1585 > l
	} else {
		yyb1585 = r.CheckBreak()
	}
	if yyb1585 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1589 := &x.Spec
		yyv1589.CodecDecodeSelf(d)
	}
	yyj1585++
	if yyhl1585 {
		yyb1585 = yyj1585 > l
	} else {
		yyb1585 = r.CheckBreak()
	}
	if yyb1585 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1590 := &x.Status
		yyv1590.CodecDecodeSelf(d)
	}
	for {
		yyj1585++
		if yyhl1585 {
			yyb1585 = yyj1585 > l
		} else {
			yyb1585 = r.CheckBreak()
		}
		if yyb1585 {
			break
		}
		z.DecStructFieldNotFound(yyj1585-1, "")
	}
	r.ReadEnd()
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1591 := z.EncBinary()
		_ = yym1591
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1592 := !z.EncBinary()
			yy2arr1592 := z.EncBasicHandle().StructToArray
			var yyq1592 [4]bool
			_, _, _ = yysep1592, yyq1592, yy2arr1592
			const yyr1592 bool = false
			yyq1592[0] = x.Kind != ""
			yyq1592[1] = x.APIVersion != ""
			yyq1592[2] = true
			if yyr1592 || yy2arr1592 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1592 int = 1
				for _, b := range yyq1592 {
					if b {
						yynn1592++
					}
				}
				r.EncodeMapStart(yynn1592)
			}
			if yyr1592 || yy2arr1592 {
				if yyq1592[0] {
					yym1594 := z.EncBinary()
					_ = yym1594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1592[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1595 := z.EncBinary()
					_ = yym1595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1592 || yy2arr1592 {
				if yyq1592[1] {
					yym1597 := z.EncBinary()
					_ = yym1597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1592[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1598 := z.EncBinary()
					_ = yym1598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1592 || yy2arr1592 {
				if yyq1592[2] {
					yy1600 := &x.ListMeta
					yym1601 := z.EncBinary()
					_ = yym1601
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1600) {
					} else {
						z.EncFallback(yy1600)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1592[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1602 := &x.ListMeta
					yym1603 := z.EncBinary()
					_ = yym1603
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1602) {
					} else {
						z.EncFallback(yy1602)
					}
				}
			}
			if yyr1592 || yy2arr1592 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1605 := z.EncBinary()
					_ = yym1605
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1606 := z.EncBinary()
					_ = yym1606
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1592 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1607 := z.DecBinary()
	_ = yym1607
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1608 := r.ReadMapStart()
			if yyl1608 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1608, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1608 := r.ReadArrayStart()
			if yyl1608 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1608, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1609Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1609Slc
	var yyhl1609 bool = l >= 0
	for yyj1609 := 0; ; yyj1609++ {
		if yyhl1609 {
			if yyj1609 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1609Slc = r.DecodeBytes(yys1609Slc, true, true)
		yys1609 := string(yys1609Slc)
		switch yys1609 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1612 := &x.ListMeta
				yym1613 := z.DecBinary()
				_ = yym1613
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1612) {
				} else {
					z.DecFallback(yyv1612, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1614 := &x.Items
				yym1615 := z.DecBinary()
				_ = yym1615
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1614), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1609)
		} // end switch yys1609
	} // end for yyj1609
	if !yyhl1609 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1616 int
	var yyb1616 bool
	var yyhl1616 bool = l >= 0
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1619 := &x.ListMeta
		yym1620 := z.DecBinary()
		_ = yym1620
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1619) {
		} else {
			z.DecFallback(yyv1619, false)
		}
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1621 := &x.Items
		yym1622 := z.DecBinary()
		_ = yym1622
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1621), d)
		}
	}
	for {
		yyj1616++
		if yyhl1616 {
			yyb1616 = yyj1616 > l
		} else {
			yyb1616 = r.CheckBreak()
		}
		if yyb1616 {
			break
		}
		z.DecStructFieldNotFound(yyj1616-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1623 := z.EncBinary()
		_ = yym1623
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1624 := !z.EncBinary()
			yy2arr1624 := z.EncBasicHandle().StructToArray
			var yyq1624 [2]bool
			_, _, _ = yysep1624, yyq1624, yy2arr1624
			const yyr1624 bool = false
			yyq1624[0] = true
			yyq1624[1] = true
			if yyr1624 || yy2arr1624 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1624 int = 0
				for _, b := range yyq1624 {
					if b {
						yynn1624++
					}
				}
				r.EncodeMapStart(yynn1624)
			}
			if yyr1624 || yy2arr1624 {
				if yyq1624[0] {
					yy1626 := &x.ObjectMeta
					yy1626.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1624[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1627 := &x.ObjectMeta
					yy1627.CodecEncodeSelf(e)
				}
			}
			if yyr1624 || yy2arr1624 {
				if yyq1624[1] {
					yy1629 := &x.Spec
					yy1629.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1624[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1630 := &x.Spec
					yy1630.CodecEncodeSelf(e)
				}
			}
			if yysep1624 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1631 := z.DecBinary()
	_ = yym1631
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1632 := r.ReadMapStart()
			if yyl1632 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1632, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1632 := r.ReadArrayStart()
			if yyl1632 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1632, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1633Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1633Slc
	var yyhl1633 bool = l >= 0
	for yyj1633 := 0; ; yyj1633++ {
		if yyhl1633 {
			if yyj1633 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1633Slc = r.DecodeBytes(yys1633Slc, true, true)
		yys1633 := string(yys1633Slc)
		switch yys1633 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1634 := &x.ObjectMeta
				yyv1634.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1635 := &x.Spec
				yyv1635.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1633)
		} // end switch yys1633
	} // end for yyj1633
	if !yyhl1633 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1636 int
	var yyb1636 bool
	var yyhl1636 bool = l >= 0
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1637 := &x.ObjectMeta
		yyv1637.CodecDecodeSelf(d)
	}
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1638 := &x.Spec
		yyv1638.CodecDecodeSelf(d)
	}
	for {
		yyj1636++
		if yyhl1636 {
			yyb1636 = yyj1636 > l
		} else {
			yyb1636 = r.CheckBreak()
		}
		if yyb1636 {
			break
		}
		z.DecStructFieldNotFound(yyj1636-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1639 := z.EncBinary()
		_ = yym1639
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1640 := !z.EncBinary()
			yy2arr1640 := z.EncBasicHandle().StructToArray
			var yyq1640 [4]bool
			_, _, _ = yysep1640, yyq1640, yy2arr1640
			const yyr1640 bool = false
			yyq1640[0] = x.Kind != ""
			yyq1640[1] = x.APIVersion != ""
			yyq1640[2] = true
			yyq1640[3] = true
			if yyr1640 || yy2arr1640 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1640 int = 0
				for _, b := range yyq1640 {
					if b {
						yynn1640++
					}
				}
				r.EncodeMapStart(yynn1640)
			}
			if yyr1640 || yy2arr1640 {
				if yyq1640[0] {
					yym1642 := z.EncBinary()
					_ = yym1642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1640[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1643 := z.EncBinary()
					_ = yym1643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1640 || yy2arr1640 {
				if yyq1640[1] {
					yym1645 := z.EncBinary()
					_ = yym1645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1640[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1646 := z.EncBinary()
					_ = yym1646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1640 || yy2arr1640 {
				if yyq1640[2] {
					yy1648 := &x.ObjectMeta
					yy1648.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1640[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1649 := &x.ObjectMeta
					yy1649.CodecEncodeSelf(e)
				}
			}
			if yyr1640 || yy2arr1640 {
				if yyq1640[3] {
					yy1651 := &x.Template
					yy1651.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1640[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1652 := &x.Template
					yy1652.CodecEncodeSelf(e)
				}
			}
			if yysep1640 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1653 := z.DecBinary()
	_ = yym1653
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1654 := r.ReadMapStart()
			if yyl1654 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1654, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1654 := r.ReadArrayStart()
			if yyl1654 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1654, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1655Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1655Slc
	var yyhl1655 bool = l >= 0
	for yyj1655 := 0; ; yyj1655++ {
		if yyhl1655 {
			if yyj1655 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1655Slc = r.DecodeBytes(yys1655Slc, true, true)
		yys1655 := string(yys1655Slc)
		switch yys1655 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1658 := &x.ObjectMeta
				yyv1658.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1659 := &x.Template
				yyv1659.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1655)
		} // end switch yys1655
	} // end for yyj1655
	if !yyhl1655 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1660 int
	var yyb1660 bool
	var yyhl1660 bool = l >= 0
	yyj1660++
	if yyhl1660 {
		yyb1660 = yyj1660 > l
	} else {
		yyb1660 = r.CheckBreak()
	}
	if yyb1660 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1660++
	if yyhl1660 {
		yyb1660 = yyj1660 > l
	} else {
		yyb1660 = r.CheckBreak()
	}
	if yyb1660 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1660++
	if yyhl1660 {
		yyb1660 = yyj1660 > l
	} else {
		yyb1660 = r.CheckBreak()
	}
	if yyb1660 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1663 := &x.ObjectMeta
		yyv1663.CodecDecodeSelf(d)
	}
	yyj1660++
	if yyhl1660 {
		yyb1660 = yyj1660 > l
	} else {
		yyb1660 = r.CheckBreak()
	}
	if yyb1660 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1664 := &x.Template
		yyv1664.CodecDecodeSelf(d)
	}
	for {
		yyj1660++
		if yyhl1660 {
			yyb1660 = yyj1660 > l
		} else {
			yyb1660 = r.CheckBreak()
		}
		if yyb1660 {
			break
		}
		z.DecStructFieldNotFound(yyj1660-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1665 := z.EncBinary()
		_ = yym1665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1666 := !z.EncBinary()
			yy2arr1666 := z.EncBasicHandle().StructToArray
			var yyq1666 [4]bool
			_, _, _ = yysep1666, yyq1666, yy2arr1666
			const yyr1666 bool = false
			yyq1666[0] = x.Kind != ""
			yyq1666[1] = x.APIVersion != ""
			yyq1666[2] = true
			if yyr1666 || yy2arr1666 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1666 int = 1
				for _, b := range yyq1666 {
					if b {
						yynn1666++
					}
				}
				r.EncodeMapStart(yynn1666)
			}
			if yyr1666 || yy2arr1666 {
				if yyq1666[0] {
					yym1668 := z.EncBinary()
					_ = yym1668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1666[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1669 := z.EncBinary()
					_ = yym1669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1666 || yy2arr1666 {
				if yyq1666[1] {
					yym1671 := z.EncBinary()
					_ = yym1671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1666[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1672 := z.EncBinary()
					_ = yym1672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1666 || yy2arr1666 {
				if yyq1666[2] {
					yy1674 := &x.ListMeta
					yym1675 := z.EncBinary()
					_ = yym1675
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1674) {
					} else {
						z.EncFallback(yy1674)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1666[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1676 := &x.ListMeta
					yym1677 := z.EncBinary()
					_ = yym1677
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1676) {
					} else {
						z.EncFallback(yy1676)
					}
				}
			}
			if yyr1666 || yy2arr1666 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1679 := z.EncBinary()
					_ = yym1679
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1680 := z.EncBinary()
					_ = yym1680
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1666 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1681 := z.DecBinary()
	_ = yym1681
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1682 := r.ReadMapStart()
			if yyl1682 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1682, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1682 := r.ReadArrayStart()
			if yyl1682 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1682, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1683Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1683Slc
	var yyhl1683 bool = l >= 0
	for yyj1683 := 0; ; yyj1683++ {
		if yyhl1683 {
			if yyj1683 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1683Slc = r.DecodeBytes(yys1683Slc, true, true)
		yys1683 := string(yys1683Slc)
		switch yys1683 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1686 := &x.ListMeta
				yym1687 := z.DecBinary()
				_ = yym1687
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1686) {
				} else {
					z.DecFallback(yyv1686, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1688 := &x.Items
				yym1689 := z.DecBinary()
				_ = yym1689
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1688), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1683)
		} // end switch yys1683
	} // end for yyj1683
	if !yyhl1683 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1690 int
	var yyb1690 bool
	var yyhl1690 bool = l >= 0
	yyj1690++
	if yyhl1690 {
		yyb1690 = yyj1690 > l
	} else {
		yyb1690 = r.CheckBreak()
	}
	if yyb1690 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1690++
	if yyhl1690 {
		yyb1690 = yyj1690 > l
	} else {
		yyb1690 = r.CheckBreak()
	}
	if yyb1690 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1690++
	if yyhl1690 {
		yyb1690 = yyj1690 > l
	} else {
		yyb1690 = r.CheckBreak()
	}
	if yyb1690 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1693 := &x.ListMeta
		yym1694 := z.DecBinary()
		_ = yym1694
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1693) {
		} else {
			z.DecFallback(yyv1693, false)
		}
	}
	yyj1690++
	if yyhl1690 {
		yyb1690 = yyj1690 > l
	} else {
		yyb1690 = r.CheckBreak()
	}
	if yyb1690 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1695 := &x.Items
		yym1696 := z.DecBinary()
		_ = yym1696
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1695), d)
		}
	}
	for {
		yyj1690++
		if yyhl1690 {
			yyb1690 = yyj1690 > l
		} else {
			yyb1690 = r.CheckBreak()
		}
		if yyb1690 {
			break
		}
		z.DecStructFieldNotFound(yyj1690-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1697 := z.EncBinary()
		_ = yym1697
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1698 := !z.EncBinary()
			yy2arr1698 := z.EncBasicHandle().StructToArray
			var yyq1698 [3]bool
			_, _, _ = yysep1698, yyq1698, yy2arr1698
			const yyr1698 bool = false
			yyq1698[0] = x.Replicas != nil
			yyq1698[1] = len(x.Selector) != 0
			yyq1698[2] = x.Template != nil
			if yyr1698 || yy2arr1698 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1698 int = 0
				for _, b := range yyq1698 {
					if b {
						yynn1698++
					}
				}
				r.EncodeMapStart(yynn1698)
			}
			if yyr1698 || yy2arr1698 {
				if yyq1698[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1700 := *x.Replicas
						yym1701 := z.EncBinary()
						_ = yym1701
						if false {
						} else {
							r.EncodeInt(int64(yy1700))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1698[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1702 := *x.Replicas
						yym1703 := z.EncBinary()
						_ = yym1703
						if false {
						} else {
							r.EncodeInt(int64(yy1702))
						}
					}
				}
			}
			if yyr1698 || yy2arr1698 {
				if yyq1698[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1705 := z.EncBinary()
						_ = yym1705
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1698[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1706 := z.EncBinary()
						_ = yym1706
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1698 || yy2arr1698 {
				if yyq1698[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1698[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1698 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1708 := z.DecBinary()
	_ = yym1708
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1709 := r.ReadMapStart()
			if yyl1709 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1709, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1709 := r.ReadArrayStart()
			if yyl1709 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1709, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1710Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1710Slc
	var yyhl1710 bool = l >= 0
	for yyj1710 := 0; ; yyj1710++ {
		if yyhl1710 {
			if yyj1710 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1710Slc = r.DecodeBytes(yys1710Slc, true, true)
		yys1710 := string(yys1710Slc)
		switch yys1710 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int)
				}
				yym1712 := z.DecBinary()
				_ = yym1712
				if false {
				} else {
					*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1713 := &x.Selector
				yym1714 := z.DecBinary()
				_ = yym1714
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1713, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1710)
		} // end switch yys1710
	} // end for yyj1710
	if !yyhl1710 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1716 int
	var yyb1716 bool
	var yyhl1716 bool = l >= 0
	yyj1716++
	if yyhl1716 {
		yyb1716 = yyj1716 > l
	} else {
		yyb1716 = r.CheckBreak()
	}
	if yyb1716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int)
		}
		yym1718 := z.DecBinary()
		_ = yym1718
		if false {
		} else {
			*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj1716++
	if yyhl1716 {
		yyb1716 = yyj1716 > l
	} else {
		yyb1716 = r.CheckBreak()
	}
	if yyb1716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1719 := &x.Selector
		yym1720 := z.DecBinary()
		_ = yym1720
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1719, false, d)
		}
	}
	yyj1716++
	if yyhl1716 {
		yyb1716 = yyj1716 > l
	} else {
		yyb1716 = r.CheckBreak()
	}
	if yyb1716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1716++
		if yyhl1716 {
			yyb1716 = yyj1716 > l
		} else {
			yyb1716 = r.CheckBreak()
		}
		if yyb1716 {
			break
		}
		z.DecStructFieldNotFound(yyj1716-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1722 := z.EncBinary()
		_ = yym1722
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1723 := !z.EncBinary()
			yy2arr1723 := z.EncBasicHandle().StructToArray
			var yyq1723 [2]bool
			_, _, _ = yysep1723, yyq1723, yy2arr1723
			const yyr1723 bool = false
			yyq1723[1] = x.ObservedGeneration != 0
			if yyr1723 || yy2arr1723 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1723 int = 1
				for _, b := range yyq1723 {
					if b {
						yynn1723++
					}
				}
				r.EncodeMapStart(yynn1723)
			}
			if yyr1723 || yy2arr1723 {
				yym1725 := z.EncBinary()
				_ = yym1725
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1726 := z.EncBinary()
				_ = yym1726
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1723 || yy2arr1723 {
				if yyq1723[1] {
					yym1728 := z.EncBinary()
					_ = yym1728
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1723[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1723 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1730 := z.DecBinary()
	_ = yym1730
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1731 := r.ReadMapStart()
			if yyl1731 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1731, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1731 := r.ReadArrayStart()
			if yyl1731 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1731, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1732Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1732Slc
	var yyhl1732 bool = l >= 0
	for yyj1732 := 0; ; yyj1732++ {
		if yyhl1732 {
			if yyj1732 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1732Slc = r.DecodeBytes(yys1732Slc, true, true)
		yys1732 := string(yys1732Slc)
		switch yys1732 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1732)
		} // end switch yys1732
	} // end for yyj1732
	if !yyhl1732 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1735 int
	var yyb1735 bool
	var yyhl1735 bool = l >= 0
	yyj1735++
	if yyhl1735 {
		yyb1735 = yyj1735 > l
	} else {
		yyb1735 = r.CheckBreak()
	}
	if yyb1735 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1735++
	if yyhl1735 {
		yyb1735 = yyj1735 > l
	} else {
		yyb1735 = r.CheckBreak()
	}
	if yyb1735 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1735++
		if yyhl1735 {
			yyb1735 = yyj1735 > l
		} else {
			yyb1735 = r.CheckBreak()
		}
		if yyb1735 {
			break
		}
		z.DecStructFieldNotFound(yyj1735-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1738 := z.EncBinary()
		_ = yym1738
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1739 := !z.EncBinary()
			yy2arr1739 := z.EncBasicHandle().StructToArray
			var yyq1739 [5]bool
			_, _, _ = yysep1739, yyq1739, yy2arr1739
			const yyr1739 bool = false
			yyq1739[0] = x.Kind != ""
			yyq1739[1] = x.APIVersion != ""
			yyq1739[2] = true
			yyq1739[3] = true
			yyq1739[4] = true
			if yyr1739 || yy2arr1739 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1739 int = 0
				for _, b := range yyq1739 {
					if b {
						yynn1739++
					}
				}
				r.EncodeMapStart(yynn1739)
			}
			if yyr1739 || yy2arr1739 {
				if yyq1739[0] {
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1739[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1742 := z.EncBinary()
					_ = yym1742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1739 || yy2arr1739 {
				if yyq1739[1] {
					yym1744 := z.EncBinary()
					_ = yym1744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1739[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1745 := z.EncBinary()
					_ = yym1745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1739 || yy2arr1739 {
				if yyq1739[2] {
					yy1747 := &x.ObjectMeta
					yy1747.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1739[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1748 := &x.ObjectMeta
					yy1748.CodecEncodeSelf(e)
				}
			}
			if yyr1739 || yy2arr1739 {
				if yyq1739[3] {
					yy1750 := &x.Spec
					yy1750.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1739[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1751 := &x.Spec
					yy1751.CodecEncodeSelf(e)
				}
			}
			if yyr1739 || yy2arr1739 {
				if yyq1739[4] {
					yy1753 := &x.Status
					yy1753.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1739[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1754 := &x.Status
					yy1754.CodecEncodeSelf(e)
				}
			}
			if yysep1739 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1755 := z.DecBinary()
	_ = yym1755
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1756 := r.ReadMapStart()
			if yyl1756 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1756, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1756 := r.ReadArrayStart()
			if yyl1756 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1756, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1757Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1757Slc
	var yyhl1757 bool = l >= 0
	for yyj1757 := 0; ; yyj1757++ {
		if yyhl1757 {
			if yyj1757 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1757Slc = r.DecodeBytes(yys1757Slc, true, true)
		yys1757 := string(yys1757Slc)
		switch yys1757 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1760 := &x.ObjectMeta
				yyv1760.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1761 := &x.Spec
				yyv1761.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1762 := &x.Status
				yyv1762.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1757)
		} // end switch yys1757
	} // end for yyj1757
	if !yyhl1757 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1763 int
	var yyb1763 bool
	var yyhl1763 bool = l >= 0
	yyj1763++
	if yyhl1763 {
		yyb1763 = yyj1763 > l
	} else {
		yyb1763 = r.CheckBreak()
	}
	if yyb1763 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1763++
	if yyhl1763 {
		yyb1763 = yyj1763 > l
	} else {
		yyb1763 = r.CheckBreak()
	}
	if yyb1763 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1763++
	if yyhl1763 {
		yyb1763 = yyj1763 > l
	} else {
		yyb1763 = r.CheckBreak()
	}
	if yyb1763 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1766 := &x.ObjectMeta
		yyv1766.CodecDecodeSelf(d)
	}
	yyj1763++
	if yyhl1763 {
		yyb1763 = yyj1763 > l
	} else {
		yyb1763 = r.CheckBreak()
	}
	if yyb1763 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1767 := &x.Spec
		yyv1767.CodecDecodeSelf(d)
	}
	yyj1763++
	if yyhl1763 {
		yyb1763 = yyj1763 > l
	} else {
		yyb1763 = r.CheckBreak()
	}
	if yyb1763 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1768 := &x.Status
		yyv1768.CodecDecodeSelf(d)
	}
	for {
		yyj1763++
		if yyhl1763 {
			yyb1763 = yyj1763 > l
		} else {
			yyb1763 = r.CheckBreak()
		}
		if yyb1763 {
			break
		}
		z.DecStructFieldNotFound(yyj1763-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1769 := z.EncBinary()
		_ = yym1769
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1770 := !z.EncBinary()
			yy2arr1770 := z.EncBasicHandle().StructToArray
			var yyq1770 [4]bool
			_, _, _ = yysep1770, yyq1770, yy2arr1770
			const yyr1770 bool = false
			yyq1770[0] = x.Kind != ""
			yyq1770[1] = x.APIVersion != ""
			yyq1770[2] = true
			if yyr1770 || yy2arr1770 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1770 int = 1
				for _, b := range yyq1770 {
					if b {
						yynn1770++
					}
				}
				r.EncodeMapStart(yynn1770)
			}
			if yyr1770 || yy2arr1770 {
				if yyq1770[0] {
					yym1772 := z.EncBinary()
					_ = yym1772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1770[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1773 := z.EncBinary()
					_ = yym1773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1770 || yy2arr1770 {
				if yyq1770[1] {
					yym1775 := z.EncBinary()
					_ = yym1775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1770[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1776 := z.EncBinary()
					_ = yym1776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1770 || yy2arr1770 {
				if yyq1770[2] {
					yy1778 := &x.ListMeta
					yym1779 := z.EncBinary()
					_ = yym1779
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1778) {
					} else {
						z.EncFallback(yy1778)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1770[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1780 := &x.ListMeta
					yym1781 := z.EncBinary()
					_ = yym1781
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1780) {
					} else {
						z.EncFallback(yy1780)
					}
				}
			}
			if yyr1770 || yy2arr1770 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1783 := z.EncBinary()
					_ = yym1783
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1784 := z.EncBinary()
					_ = yym1784
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1770 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1785 := z.DecBinary()
	_ = yym1785
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1786 := r.ReadMapStart()
			if yyl1786 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1786, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1786 := r.ReadArrayStart()
			if yyl1786 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1786, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1787Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1787Slc
	var yyhl1787 bool = l >= 0
	for yyj1787 := 0; ; yyj1787++ {
		if yyhl1787 {
			if yyj1787 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1787Slc = r.DecodeBytes(yys1787Slc, true, true)
		yys1787 := string(yys1787Slc)
		switch yys1787 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1790 := &x.ListMeta
				yym1791 := z.DecBinary()
				_ = yym1791
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1790) {
				} else {
					z.DecFallback(yyv1790, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1792 := &x.Items
				yym1793 := z.DecBinary()
				_ = yym1793
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1792), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1787)
		} // end switch yys1787
	} // end for yyj1787
	if !yyhl1787 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1794 int
	var yyb1794 bool
	var yyhl1794 bool = l >= 0
	yyj1794++
	if yyhl1794 {
		yyb1794 = yyj1794 > l
	} else {
		yyb1794 = r.CheckBreak()
	}
	if yyb1794 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1794++
	if yyhl1794 {
		yyb1794 = yyj1794 > l
	} else {
		yyb1794 = r.CheckBreak()
	}
	if yyb1794 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1794++
	if yyhl1794 {
		yyb1794 = yyj1794 > l
	} else {
		yyb1794 = r.CheckBreak()
	}
	if yyb1794 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1797 := &x.ListMeta
		yym1798 := z.DecBinary()
		_ = yym1798
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1797) {
		} else {
			z.DecFallback(yyv1797, false)
		}
	}
	yyj1794++
	if yyhl1794 {
		yyb1794 = yyj1794 > l
	} else {
		yyb1794 = r.CheckBreak()
	}
	if yyb1794 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1799 := &x.Items
		yym1800 := z.DecBinary()
		_ = yym1800
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1799), d)
		}
	}
	for {
		yyj1794++
		if yyhl1794 {
			yyb1794 = yyj1794 > l
		} else {
			yyb1794 = r.CheckBreak()
		}
		if yyb1794 {
			break
		}
		z.DecStructFieldNotFound(yyj1794-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1801 := z.EncBinary()
	_ = yym1801
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1802 := z.DecBinary()
	_ = yym1802
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1803 := z.EncBinary()
	_ = yym1803
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1804 := z.DecBinary()
	_ = yym1804
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1805 := z.EncBinary()
		_ = yym1805
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1806 := !z.EncBinary()
			yy2arr1806 := z.EncBasicHandle().StructToArray
			var yyq1806 [1]bool
			_, _, _ = yysep1806, yyq1806, yy2arr1806
			const yyr1806 bool = false
			yyq1806[0] = true
			if yyr1806 || yy2arr1806 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1806 int = 0
				for _, b := range yyq1806 {
					if b {
						yynn1806++
					}
				}
				r.EncodeMapStart(yynn1806)
			}
			if yyr1806 || yy2arr1806 {
				if yyq1806[0] {
					yy1808 := &x.LoadBalancer
					yy1808.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1806[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1809 := &x.LoadBalancer
					yy1809.CodecEncodeSelf(e)
				}
			}
			if yysep1806 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1810 := z.DecBinary()
	_ = yym1810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1811 := r.ReadMapStart()
			if yyl1811 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1811, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1811 := r.ReadArrayStart()
			if yyl1811 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1812Slc
	var yyhl1812 bool = l >= 0
	for yyj1812 := 0; ; yyj1812++ {
		if yyhl1812 {
			if yyj1812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1812Slc = r.DecodeBytes(yys1812Slc, true, true)
		yys1812 := string(yys1812Slc)
		switch yys1812 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1813 := &x.LoadBalancer
				yyv1813.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1812)
		} // end switch yys1812
	} // end for yyj1812
	if !yyhl1812 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1814 int
	var yyb1814 bool
	var yyhl1814 bool = l >= 0
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1815 := &x.LoadBalancer
		yyv1815.CodecDecodeSelf(d)
	}
	for {
		yyj1814++
		if yyhl1814 {
			yyb1814 = yyj1814 > l
		} else {
			yyb1814 = r.CheckBreak()
		}
		if yyb1814 {
			break
		}
		z.DecStructFieldNotFound(yyj1814-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1816 := z.EncBinary()
		_ = yym1816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1817 := !z.EncBinary()
			yy2arr1817 := z.EncBasicHandle().StructToArray
			var yyq1817 [1]bool
			_, _, _ = yysep1817, yyq1817, yy2arr1817
			const yyr1817 bool = false
			yyq1817[0] = len(x.Ingress) != 0
			if yyr1817 || yy2arr1817 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1817 int = 0
				for _, b := range yyq1817 {
					if b {
						yynn1817++
					}
				}
				r.EncodeMapStart(yynn1817)
			}
			if yyr1817 || yy2arr1817 {
				if yyq1817[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1819 := z.EncBinary()
						_ = yym1819
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1817[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1820 := z.EncBinary()
						_ = yym1820
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1817 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1821 := z.DecBinary()
	_ = yym1821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1822 := r.ReadMapStart()
			if yyl1822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1822, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1822 := r.ReadArrayStart()
			if yyl1822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1823Slc
	var yyhl1823 bool = l >= 0
	for yyj1823 := 0; ; yyj1823++ {
		if yyhl1823 {
			if yyj1823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1823Slc = r.DecodeBytes(yys1823Slc, true, true)
		yys1823 := string(yys1823Slc)
		switch yys1823 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1824 := &x.Ingress
				yym1825 := z.DecBinary()
				_ = yym1825
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1824), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1823)
		} // end switch yys1823
	} // end for yyj1823
	if !yyhl1823 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1826 int
	var yyb1826 bool
	var yyhl1826 bool = l >= 0
	yyj1826++
	if yyhl1826 {
		yyb1826 = yyj1826 > l
	} else {
		yyb1826 = r.CheckBreak()
	}
	if yyb1826 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1827 := &x.Ingress
		yym1828 := z.DecBinary()
		_ = yym1828
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1827), d)
		}
	}
	for {
		yyj1826++
		if yyhl1826 {
			yyb1826 = yyj1826 > l
		} else {
			yyb1826 = r.CheckBreak()
		}
		if yyb1826 {
			break
		}
		z.DecStructFieldNotFound(yyj1826-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1829 := z.EncBinary()
		_ = yym1829
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1830 := !z.EncBinary()
			yy2arr1830 := z.EncBasicHandle().StructToArray
			var yyq1830 [2]bool
			_, _, _ = yysep1830, yyq1830, yy2arr1830
			const yyr1830 bool = false
			yyq1830[0] = x.IP != ""
			yyq1830[1] = x.Hostname != ""
			if yyr1830 || yy2arr1830 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1830 int = 0
				for _, b := range yyq1830 {
					if b {
						yynn1830++
					}
				}
				r.EncodeMapStart(yynn1830)
			}
			if yyr1830 || yy2arr1830 {
				if yyq1830[0] {
					yym1832 := z.EncBinary()
					_ = yym1832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1830[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1833 := z.EncBinary()
					_ = yym1833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1830 || yy2arr1830 {
				if yyq1830[1] {
					yym1835 := z.EncBinary()
					_ = yym1835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1830[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1836 := z.EncBinary()
					_ = yym1836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1830 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1837 := z.DecBinary()
	_ = yym1837
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1838 := r.ReadMapStart()
			if yyl1838 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1838, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1838 := r.ReadArrayStart()
			if yyl1838 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1838, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1839Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1839Slc
	var yyhl1839 bool = l >= 0
	for yyj1839 := 0; ; yyj1839++ {
		if yyhl1839 {
			if yyj1839 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1839Slc = r.DecodeBytes(yys1839Slc, true, true)
		yys1839 := string(yys1839Slc)
		switch yys1839 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1839)
		} // end switch yys1839
	} // end for yyj1839
	if !yyhl1839 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1842 int
	var yyb1842 bool
	var yyhl1842 bool = l >= 0
	yyj1842++
	if yyhl1842 {
		yyb1842 = yyj1842 > l
	} else {
		yyb1842 = r.CheckBreak()
	}
	if yyb1842 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1842++
	if yyhl1842 {
		yyb1842 = yyj1842 > l
	} else {
		yyb1842 = r.CheckBreak()
	}
	if yyb1842 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1842++
		if yyhl1842 {
			yyb1842 = yyj1842 > l
		} else {
			yyb1842 = r.CheckBreak()
		}
		if yyb1842 {
			break
		}
		z.DecStructFieldNotFound(yyj1842-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1845 := z.EncBinary()
		_ = yym1845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1846 := !z.EncBinary()
			yy2arr1846 := z.EncBasicHandle().StructToArray
			var yyq1846 [8]bool
			_, _, _ = yysep1846, yyq1846, yy2arr1846
			const yyr1846 bool = false
			yyq1846[1] = len(x.Selector) != 0
			yyq1846[2] = x.ClusterIP != ""
			yyq1846[3] = x.Type != ""
			yyq1846[4] = len(x.ExternalIPs) != 0
			yyq1846[5] = len(x.DeprecatedPublicIPs) != 0
			yyq1846[6] = x.SessionAffinity != ""
			yyq1846[7] = x.LoadBalancerIP != ""
			if yyr1846 || yy2arr1846 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1846 int = 1
				for _, b := range yyq1846 {
					if b {
						yynn1846++
					}
				}
				r.EncodeMapStart(yynn1846)
			}
			if yyr1846 || yy2arr1846 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1849 := z.EncBinary()
					_ = yym1849
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1846 || yy2arr1846 {
				if yyq1846[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1851 := z.EncBinary()
						_ = yym1851
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1846[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1852 := z.EncBinary()
						_ = yym1852
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1846 || yy2arr1846 {
				if yyq1846[2] {
					yym1854 := z.EncBinary()
					_ = yym1854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1846[2] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1855 := z.EncBinary()
					_ = yym1855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1846 || yy2arr1846 {
				if yyq1846[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1846[3] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1846 || yy2arr1846 {
				if yyq1846[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1858 := z.EncBinary()
						_ = yym1858
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1846[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1859 := z.EncBinary()
						_ = yym1859
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1846 || yy2arr1846 {
				if yyq1846[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1861 := z.EncBinary()
						_ = yym1861
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1846[5] {
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1862 := z.EncBinary()
						_ = yym1862
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr1846 || yy2arr1846 {
				if yyq1846[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1846[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1846 || yy2arr1846 {
				if yyq1846[7] {
					yym1865 := z.EncBinary()
					_ = yym1865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1846[7] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1866 := z.EncBinary()
					_ = yym1866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yysep1846 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1867 := z.DecBinary()
	_ = yym1867
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1868 := r.ReadMapStart()
			if yyl1868 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1868, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1868 := r.ReadArrayStart()
			if yyl1868 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1868, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1869Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1869Slc
	var yyhl1869 bool = l >= 0
	for yyj1869 := 0; ; yyj1869++ {
		if yyhl1869 {
			if yyj1869 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1869Slc = r.DecodeBytes(yys1869Slc, true, true)
		yys1869 := string(yys1869Slc)
		switch yys1869 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1870 := &x.Ports
				yym1871 := z.DecBinary()
				_ = yym1871
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1870), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1872 := &x.Selector
				yym1873 := z.DecBinary()
				_ = yym1873
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1872, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1876 := &x.ExternalIPs
				yym1877 := z.DecBinary()
				_ = yym1877
				if false {
				} else {
					z.F.DecSliceStringX(yyv1876, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv1878 := &x.DeprecatedPublicIPs
				yym1879 := z.DecBinary()
				_ = yym1879
				if false {
				} else {
					z.F.DecSliceStringX(yyv1878, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1869)
		} // end switch yys1869
	} // end for yyj1869
	if !yyhl1869 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1882 int
	var yyb1882 bool
	var yyhl1882 bool = l >= 0
	yyj1882++
	if yyhl1882 {
		yyb1882 = yyj1882 > l
	} else {
		yyb1882 = r.CheckBreak()
	}
	if yyb1882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1883 := &x.Ports
		yym1884 := z.DecBinary()
		_ = yym1884
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1883), d)
		}
	}
	yyj1882++
	if yyhl1882 {
		yyb1882 = yyj1882 > l
	} else {
		yyb1882 = r.CheckBreak()
	}
	if yyb1882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1885 := &x.Selector
		yym1886 := z.DecBinary()
		_ = yym1886
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1885, false, d)
		}
	}
	yyj1882++
	if yyhl1882 {
		yyb1882 = yyj1882 > l
	} else {
		yyb1882 = r.CheckBreak()
	}
	if yyb1882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1882++
	if yyhl1882 {
		yyb1882 = yyj1882 > l
	} else {
		yyb1882 = r.CheckBreak()
	}
	if yyb1882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1882++
	if yyhl1882 {
		yyb1882 = yyj1882 > l
	} else {
		yyb1882 = r.CheckBreak()
	}
	if yyb1882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1889 := &x.ExternalIPs
		yym1890 := z.DecBinary()
		_ = yym1890
		if false {
		} else {
			z.F.DecSliceStringX(yyv1889, false, d)
		}
	}
	yyj1882++
	if yyhl1882 {
		yyb1882 = yyj1882 > l
	} else {
		yyb1882 = r.CheckBreak()
	}
	if yyb1882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv1891 := &x.DeprecatedPublicIPs
		yym1892 := z.DecBinary()
		_ = yym1892
		if false {
		} else {
			z.F.DecSliceStringX(yyv1891, false, d)
		}
	}
	yyj1882++
	if yyhl1882 {
		yyb1882 = yyj1882 > l
	} else {
		yyb1882 = r.CheckBreak()
	}
	if yyb1882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj1882++
	if yyhl1882 {
		yyb1882 = yyj1882 > l
	} else {
		yyb1882 = r.CheckBreak()
	}
	if yyb1882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj1882++
		if yyhl1882 {
			yyb1882 = yyj1882 > l
		} else {
			yyb1882 = r.CheckBreak()
		}
		if yyb1882 {
			break
		}
		z.DecStructFieldNotFound(yyj1882-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1895 := z.EncBinary()
		_ = yym1895
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1896 := !z.EncBinary()
			yy2arr1896 := z.EncBasicHandle().StructToArray
			var yyq1896 [5]bool
			_, _, _ = yysep1896, yyq1896, yy2arr1896
			const yyr1896 bool = false
			yyq1896[0] = x.Name != ""
			yyq1896[1] = x.Protocol != ""
			yyq1896[3] = true
			yyq1896[4] = x.NodePort != 0
			if yyr1896 || yy2arr1896 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1896 int = 1
				for _, b := range yyq1896 {
					if b {
						yynn1896++
					}
				}
				r.EncodeMapStart(yynn1896)
			}
			if yyr1896 || yy2arr1896 {
				if yyq1896[0] {
					yym1898 := z.EncBinary()
					_ = yym1898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1896[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym1899 := z.EncBinary()
					_ = yym1899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1896 || yy2arr1896 {
				if yyq1896[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1896[1] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1896 || yy2arr1896 {
				yym1902 := z.EncBinary()
				_ = yym1902
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym1903 := z.EncBinary()
				_ = yym1903
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1896 || yy2arr1896 {
				if yyq1896[3] {
					yy1905 := &x.TargetPort
					yym1906 := z.EncBinary()
					_ = yym1906
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1905) {
					} else if !yym1906 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1905)
					} else {
						z.EncFallback(yy1905)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1896[3] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					yy1907 := &x.TargetPort
					yym1908 := z.EncBinary()
					_ = yym1908
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1907) {
					} else if !yym1908 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1907)
					} else {
						z.EncFallback(yy1907)
					}
				}
			}
			if yyr1896 || yy2arr1896 {
				if yyq1896[4] {
					yym1910 := z.EncBinary()
					_ = yym1910
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1896[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					yym1911 := z.EncBinary()
					_ = yym1911
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yysep1896 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1912 := z.DecBinary()
	_ = yym1912
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1913 := r.ReadMapStart()
			if yyl1913 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1913, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1913 := r.ReadArrayStart()
			if yyl1913 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1913, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1914Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1914Slc
	var yyhl1914 bool = l >= 0
	for yyj1914 := 0; ; yyj1914++ {
		if yyhl1914 {
			if yyj1914 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1914Slc = r.DecodeBytes(yys1914Slc, true, true)
		yys1914 := string(yys1914Slc)
		switch yys1914 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_util.IntOrString{}
			} else {
				yyv1918 := &x.TargetPort
				yym1919 := z.DecBinary()
				_ = yym1919
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1918) {
				} else if !yym1919 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1918)
				} else {
					z.DecFallback(yyv1918, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1914)
		} // end switch yys1914
	} // end for yyj1914
	if !yyhl1914 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1921 int
	var yyb1921 bool
	var yyhl1921 bool = l >= 0
	yyj1921++
	if yyhl1921 {
		yyb1921 = yyj1921 > l
	} else {
		yyb1921 = r.CheckBreak()
	}
	if yyb1921 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1921++
	if yyhl1921 {
		yyb1921 = yyj1921 > l
	} else {
		yyb1921 = r.CheckBreak()
	}
	if yyb1921 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1921++
	if yyhl1921 {
		yyb1921 = yyj1921 > l
	} else {
		yyb1921 = r.CheckBreak()
	}
	if yyb1921 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1921++
	if yyhl1921 {
		yyb1921 = yyj1921 > l
	} else {
		yyb1921 = r.CheckBreak()
	}
	if yyb1921 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_util.IntOrString{}
	} else {
		yyv1925 := &x.TargetPort
		yym1926 := z.DecBinary()
		_ = yym1926
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1925) {
		} else if !yym1926 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1925)
		} else {
			z.DecFallback(yyv1925, false)
		}
	}
	yyj1921++
	if yyhl1921 {
		yyb1921 = yyj1921 > l
	} else {
		yyb1921 = r.CheckBreak()
	}
	if yyb1921 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1921++
		if yyhl1921 {
			yyb1921 = yyj1921 > l
		} else {
			yyb1921 = r.CheckBreak()
		}
		if yyb1921 {
			break
		}
		z.DecStructFieldNotFound(yyj1921-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1928 := z.EncBinary()
		_ = yym1928
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1929 := !z.EncBinary()
			yy2arr1929 := z.EncBasicHandle().StructToArray
			var yyq1929 [5]bool
			_, _, _ = yysep1929, yyq1929, yy2arr1929
			const yyr1929 bool = false
			yyq1929[0] = x.Kind != ""
			yyq1929[1] = x.APIVersion != ""
			yyq1929[2] = true
			yyq1929[3] = true
			yyq1929[4] = true
			if yyr1929 || yy2arr1929 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1929 int = 0
				for _, b := range yyq1929 {
					if b {
						yynn1929++
					}
				}
				r.EncodeMapStart(yynn1929)
			}
			if yyr1929 || yy2arr1929 {
				if yyq1929[0] {
					yym1931 := z.EncBinary()
					_ = yym1931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1929[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1932 := z.EncBinary()
					_ = yym1932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1929 || yy2arr1929 {
				if yyq1929[1] {
					yym1934 := z.EncBinary()
					_ = yym1934
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1929[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1935 := z.EncBinary()
					_ = yym1935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1929 || yy2arr1929 {
				if yyq1929[2] {
					yy1937 := &x.ObjectMeta
					yy1937.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1929[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1938 := &x.ObjectMeta
					yy1938.CodecEncodeSelf(e)
				}
			}
			if yyr1929 || yy2arr1929 {
				if yyq1929[3] {
					yy1940 := &x.Spec
					yy1940.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1929[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1941 := &x.Spec
					yy1941.CodecEncodeSelf(e)
				}
			}
			if yyr1929 || yy2arr1929 {
				if yyq1929[4] {
					yy1943 := &x.Status
					yy1943.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1929[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1944 := &x.Status
					yy1944.CodecEncodeSelf(e)
				}
			}
			if yysep1929 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1945 := z.DecBinary()
	_ = yym1945
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1946 := r.ReadMapStart()
			if yyl1946 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1946, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1946 := r.ReadArrayStart()
			if yyl1946 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1946, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1947Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1947Slc
	var yyhl1947 bool = l >= 0
	for yyj1947 := 0; ; yyj1947++ {
		if yyhl1947 {
			if yyj1947 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1947Slc = r.DecodeBytes(yys1947Slc, true, true)
		yys1947 := string(yys1947Slc)
		switch yys1947 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1950 := &x.ObjectMeta
				yyv1950.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv1951 := &x.Spec
				yyv1951.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv1952 := &x.Status
				yyv1952.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1947)
		} // end switch yys1947
	} // end for yyj1947
	if !yyhl1947 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1953 int
	var yyb1953 bool
	var yyhl1953 bool = l >= 0
	yyj1953++
	if yyhl1953 {
		yyb1953 = yyj1953 > l
	} else {
		yyb1953 = r.CheckBreak()
	}
	if yyb1953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1953++
	if yyhl1953 {
		yyb1953 = yyj1953 > l
	} else {
		yyb1953 = r.CheckBreak()
	}
	if yyb1953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1953++
	if yyhl1953 {
		yyb1953 = yyj1953 > l
	} else {
		yyb1953 = r.CheckBreak()
	}
	if yyb1953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1956 := &x.ObjectMeta
		yyv1956.CodecDecodeSelf(d)
	}
	yyj1953++
	if yyhl1953 {
		yyb1953 = yyj1953 > l
	} else {
		yyb1953 = r.CheckBreak()
	}
	if yyb1953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv1957 := &x.Spec
		yyv1957.CodecDecodeSelf(d)
	}
	yyj1953++
	if yyhl1953 {
		yyb1953 = yyj1953 > l
	} else {
		yyb1953 = r.CheckBreak()
	}
	if yyb1953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv1958 := &x.Status
		yyv1958.CodecDecodeSelf(d)
	}
	for {
		yyj1953++
		if yyhl1953 {
			yyb1953 = yyj1953 > l
		} else {
			yyb1953 = r.CheckBreak()
		}
		if yyb1953 {
			break
		}
		z.DecStructFieldNotFound(yyj1953-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1959 := z.EncBinary()
		_ = yym1959
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1960 := !z.EncBinary()
			yy2arr1960 := z.EncBasicHandle().StructToArray
			var yyq1960 [4]bool
			_, _, _ = yysep1960, yyq1960, yy2arr1960
			const yyr1960 bool = false
			yyq1960[0] = x.Kind != ""
			yyq1960[1] = x.APIVersion != ""
			yyq1960[2] = true
			if yyr1960 || yy2arr1960 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1960 int = 1
				for _, b := range yyq1960 {
					if b {
						yynn1960++
					}
				}
				r.EncodeMapStart(yynn1960)
			}
			if yyr1960 || yy2arr1960 {
				if yyq1960[0] {
					yym1962 := z.EncBinary()
					_ = yym1962
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1960[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1963 := z.EncBinary()
					_ = yym1963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1960 || yy2arr1960 {
				if yyq1960[1] {
					yym1965 := z.EncBinary()
					_ = yym1965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1960[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1966 := z.EncBinary()
					_ = yym1966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1960 || yy2arr1960 {
				if yyq1960[2] {
					yy1968 := &x.ListMeta
					yym1969 := z.EncBinary()
					_ = yym1969
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1968) {
					} else {
						z.EncFallback(yy1968)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1960[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1970 := &x.ListMeta
					yym1971 := z.EncBinary()
					_ = yym1971
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1970) {
					} else {
						z.EncFallback(yy1970)
					}
				}
			}
			if yyr1960 || yy2arr1960 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1973 := z.EncBinary()
					_ = yym1973
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1974 := z.EncBinary()
					_ = yym1974
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1960 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1975 := z.DecBinary()
	_ = yym1975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1976 := r.ReadMapStart()
			if yyl1976 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1976, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1976 := r.ReadArrayStart()
			if yyl1976 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1977Slc
	var yyhl1977 bool = l >= 0
	for yyj1977 := 0; ; yyj1977++ {
		if yyhl1977 {
			if yyj1977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1977Slc = r.DecodeBytes(yys1977Slc, true, true)
		yys1977 := string(yys1977Slc)
		switch yys1977 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1980 := &x.ListMeta
				yym1981 := z.DecBinary()
				_ = yym1981
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1980) {
				} else {
					z.DecFallback(yyv1980, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1982 := &x.Items
				yym1983 := z.DecBinary()
				_ = yym1983
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1982), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1977)
		} // end switch yys1977
	} // end for yyj1977
	if !yyhl1977 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1984 int
	var yyb1984 bool
	var yyhl1984 bool = l >= 0
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1987 := &x.ListMeta
		yym1988 := z.DecBinary()
		_ = yym1988
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1987) {
		} else {
			z.DecFallback(yyv1987, false)
		}
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1989 := &x.Items
		yym1990 := z.DecBinary()
		_ = yym1990
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1989), d)
		}
	}
	for {
		yyj1984++
		if yyhl1984 {
			yyb1984 = yyj1984 > l
		} else {
			yyb1984 = r.CheckBreak()
		}
		if yyb1984 {
			break
		}
		z.DecStructFieldNotFound(yyj1984-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1991 := z.EncBinary()
		_ = yym1991
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1992 := !z.EncBinary()
			yy2arr1992 := z.EncBasicHandle().StructToArray
			var yyq1992 [5]bool
			_, _, _ = yysep1992, yyq1992, yy2arr1992
			const yyr1992 bool = false
			yyq1992[0] = x.Kind != ""
			yyq1992[1] = x.APIVersion != ""
			yyq1992[2] = true
			yyq1992[3] = len(x.Secrets) != 0
			yyq1992[4] = len(x.ImagePullSecrets) != 0
			if yyr1992 || yy2arr1992 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1992 int = 0
				for _, b := range yyq1992 {
					if b {
						yynn1992++
					}
				}
				r.EncodeMapStart(yynn1992)
			}
			if yyr1992 || yy2arr1992 {
				if yyq1992[0] {
					yym1994 := z.EncBinary()
					_ = yym1994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1992[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1995 := z.EncBinary()
					_ = yym1995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1992 || yy2arr1992 {
				if yyq1992[1] {
					yym1997 := z.EncBinary()
					_ = yym1997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1992[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1998 := z.EncBinary()
					_ = yym1998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1992 || yy2arr1992 {
				if yyq1992[2] {
					yy2000 := &x.ObjectMeta
					yy2000.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1992[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2001 := &x.ObjectMeta
					yy2001.CodecEncodeSelf(e)
				}
			}
			if yyr1992 || yy2arr1992 {
				if yyq1992[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2003 := z.EncBinary()
						_ = yym2003
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1992[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2004 := z.EncBinary()
						_ = yym2004
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr1992 || yy2arr1992 {
				if yyq1992[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2006 := z.EncBinary()
						_ = yym2006
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1992[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2007 := z.EncBinary()
						_ = yym2007
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1992 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2008 := z.DecBinary()
	_ = yym2008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2009 := r.ReadMapStart()
			if yyl2009 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2009, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2009 := r.ReadArrayStart()
			if yyl2009 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2009, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2010Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2010Slc
	var yyhl2010 bool = l >= 0
	for yyj2010 := 0; ; yyj2010++ {
		if yyhl2010 {
			if yyj2010 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2010Slc = r.DecodeBytes(yys2010Slc, true, true)
		yys2010 := string(yys2010Slc)
		switch yys2010 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2013 := &x.ObjectMeta
				yyv2013.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2014 := &x.Secrets
				yym2015 := z.DecBinary()
				_ = yym2015
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2014), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2016 := &x.ImagePullSecrets
				yym2017 := z.DecBinary()
				_ = yym2017
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2016), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2010)
		} // end switch yys2010
	} // end for yyj2010
	if !yyhl2010 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2018 int
	var yyb2018 bool
	var yyhl2018 bool = l >= 0
	yyj2018++
	if yyhl2018 {
		yyb2018 = yyj2018 > l
	} else {
		yyb2018 = r.CheckBreak()
	}
	if yyb2018 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2018++
	if yyhl2018 {
		yyb2018 = yyj2018 > l
	} else {
		yyb2018 = r.CheckBreak()
	}
	if yyb2018 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2018++
	if yyhl2018 {
		yyb2018 = yyj2018 > l
	} else {
		yyb2018 = r.CheckBreak()
	}
	if yyb2018 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2021 := &x.ObjectMeta
		yyv2021.CodecDecodeSelf(d)
	}
	yyj2018++
	if yyhl2018 {
		yyb2018 = yyj2018 > l
	} else {
		yyb2018 = r.CheckBreak()
	}
	if yyb2018 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2022 := &x.Secrets
		yym2023 := z.DecBinary()
		_ = yym2023
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2022), d)
		}
	}
	yyj2018++
	if yyhl2018 {
		yyb2018 = yyj2018 > l
	} else {
		yyb2018 = r.CheckBreak()
	}
	if yyb2018 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2024 := &x.ImagePullSecrets
		yym2025 := z.DecBinary()
		_ = yym2025
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2024), d)
		}
	}
	for {
		yyj2018++
		if yyhl2018 {
			yyb2018 = yyj2018 > l
		} else {
			yyb2018 = r.CheckBreak()
		}
		if yyb2018 {
			break
		}
		z.DecStructFieldNotFound(yyj2018-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2026 := z.EncBinary()
		_ = yym2026
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2027 := !z.EncBinary()
			yy2arr2027 := z.EncBasicHandle().StructToArray
			var yyq2027 [4]bool
			_, _, _ = yysep2027, yyq2027, yy2arr2027
			const yyr2027 bool = false
			yyq2027[0] = x.Kind != ""
			yyq2027[1] = x.APIVersion != ""
			yyq2027[2] = true
			if yyr2027 || yy2arr2027 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2027 int = 1
				for _, b := range yyq2027 {
					if b {
						yynn2027++
					}
				}
				r.EncodeMapStart(yynn2027)
			}
			if yyr2027 || yy2arr2027 {
				if yyq2027[0] {
					yym2029 := z.EncBinary()
					_ = yym2029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2027[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2030 := z.EncBinary()
					_ = yym2030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2027 || yy2arr2027 {
				if yyq2027[1] {
					yym2032 := z.EncBinary()
					_ = yym2032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2027[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2033 := z.EncBinary()
					_ = yym2033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2027 || yy2arr2027 {
				if yyq2027[2] {
					yy2035 := &x.ListMeta
					yym2036 := z.EncBinary()
					_ = yym2036
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2035) {
					} else {
						z.EncFallback(yy2035)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2027[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2037 := &x.ListMeta
					yym2038 := z.EncBinary()
					_ = yym2038
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2037) {
					} else {
						z.EncFallback(yy2037)
					}
				}
			}
			if yyr2027 || yy2arr2027 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2040 := z.EncBinary()
					_ = yym2040
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2041 := z.EncBinary()
					_ = yym2041
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep2027 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2042 := z.DecBinary()
	_ = yym2042
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2043 := r.ReadMapStart()
			if yyl2043 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2043, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2043 := r.ReadArrayStart()
			if yyl2043 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2043, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2044Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2044Slc
	var yyhl2044 bool = l >= 0
	for yyj2044 := 0; ; yyj2044++ {
		if yyhl2044 {
			if yyj2044 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2044Slc = r.DecodeBytes(yys2044Slc, true, true)
		yys2044 := string(yys2044Slc)
		switch yys2044 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2047 := &x.ListMeta
				yym2048 := z.DecBinary()
				_ = yym2048
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2047) {
				} else {
					z.DecFallback(yyv2047, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2049 := &x.Items
				yym2050 := z.DecBinary()
				_ = yym2050
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2049), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2044)
		} // end switch yys2044
	} // end for yyj2044
	if !yyhl2044 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2051 int
	var yyb2051 bool
	var yyhl2051 bool = l >= 0
	yyj2051++
	if yyhl2051 {
		yyb2051 = yyj2051 > l
	} else {
		yyb2051 = r.CheckBreak()
	}
	if yyb2051 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2051++
	if yyhl2051 {
		yyb2051 = yyj2051 > l
	} else {
		yyb2051 = r.CheckBreak()
	}
	if yyb2051 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2051++
	if yyhl2051 {
		yyb2051 = yyj2051 > l
	} else {
		yyb2051 = r.CheckBreak()
	}
	if yyb2051 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2054 := &x.ListMeta
		yym2055 := z.DecBinary()
		_ = yym2055
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2054) {
		} else {
			z.DecFallback(yyv2054, false)
		}
	}
	yyj2051++
	if yyhl2051 {
		yyb2051 = yyj2051 > l
	} else {
		yyb2051 = r.CheckBreak()
	}
	if yyb2051 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2056 := &x.Items
		yym2057 := z.DecBinary()
		_ = yym2057
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2056), d)
		}
	}
	for {
		yyj2051++
		if yyhl2051 {
			yyb2051 = yyj2051 > l
		} else {
			yyb2051 = r.CheckBreak()
		}
		if yyb2051 {
			break
		}
		z.DecStructFieldNotFound(yyj2051-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2058 := z.EncBinary()
		_ = yym2058
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2059 := !z.EncBinary()
			yy2arr2059 := z.EncBasicHandle().StructToArray
			var yyq2059 [4]bool
			_, _, _ = yysep2059, yyq2059, yy2arr2059
			const yyr2059 bool = false
			yyq2059[0] = x.Kind != ""
			yyq2059[1] = x.APIVersion != ""
			yyq2059[2] = true
			if yyr2059 || yy2arr2059 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2059 int = 1
				for _, b := range yyq2059 {
					if b {
						yynn2059++
					}
				}
				r.EncodeMapStart(yynn2059)
			}
			if yyr2059 || yy2arr2059 {
				if yyq2059[0] {
					yym2061 := z.EncBinary()
					_ = yym2061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2059[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2062 := z.EncBinary()
					_ = yym2062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2059 || yy2arr2059 {
				if yyq2059[1] {
					yym2064 := z.EncBinary()
					_ = yym2064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2059[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2065 := z.EncBinary()
					_ = yym2065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2059 || yy2arr2059 {
				if yyq2059[2] {
					yy2067 := &x.ObjectMeta
					yy2067.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2059[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2068 := &x.ObjectMeta
					yy2068.CodecEncodeSelf(e)
				}
			}
			if yyr2059 || yy2arr2059 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2070 := z.EncBinary()
					_ = yym2070
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2071 := z.EncBinary()
					_ = yym2071
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2059 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2072 := z.DecBinary()
	_ = yym2072
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2073 := r.ReadMapStart()
			if yyl2073 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2073, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2073 := r.ReadArrayStart()
			if yyl2073 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2073, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2074Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2074Slc
	var yyhl2074 bool = l >= 0
	for yyj2074 := 0; ; yyj2074++ {
		if yyhl2074 {
			if yyj2074 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2074Slc = r.DecodeBytes(yys2074Slc, true, true)
		yys2074 := string(yys2074Slc)
		switch yys2074 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2077 := &x.ObjectMeta
				yyv2077.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2078 := &x.Subsets
				yym2079 := z.DecBinary()
				_ = yym2079
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2078), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2074)
		} // end switch yys2074
	} // end for yyj2074
	if !yyhl2074 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2080 int
	var yyb2080 bool
	var yyhl2080 bool = l >= 0
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2083 := &x.ObjectMeta
		yyv2083.CodecDecodeSelf(d)
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2084 := &x.Subsets
		yym2085 := z.DecBinary()
		_ = yym2085
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2084), d)
		}
	}
	for {
		yyj2080++
		if yyhl2080 {
			yyb2080 = yyj2080 > l
		} else {
			yyb2080 = r.CheckBreak()
		}
		if yyb2080 {
			break
		}
		z.DecStructFieldNotFound(yyj2080-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2086 := z.EncBinary()
		_ = yym2086
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2087 := !z.EncBinary()
			yy2arr2087 := z.EncBasicHandle().StructToArray
			var yyq2087 [3]bool
			_, _, _ = yysep2087, yyq2087, yy2arr2087
			const yyr2087 bool = false
			yyq2087[0] = len(x.Addresses) != 0
			yyq2087[1] = len(x.NotReadyAddresses) != 0
			yyq2087[2] = len(x.Ports) != 0
			if yyr2087 || yy2arr2087 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2087 int = 0
				for _, b := range yyq2087 {
					if b {
						yynn2087++
					}
				}
				r.EncodeMapStart(yynn2087)
			}
			if yyr2087 || yy2arr2087 {
				if yyq2087[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2089 := z.EncBinary()
						_ = yym2089
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2087[0] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2090 := z.EncBinary()
						_ = yym2090
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2087 || yy2arr2087 {
				if yyq2087[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2092 := z.EncBinary()
						_ = yym2092
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2087[1] {
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2093 := z.EncBinary()
						_ = yym2093
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2087 || yy2arr2087 {
				if yyq2087[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2095 := z.EncBinary()
						_ = yym2095
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2087[2] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2096 := z.EncBinary()
						_ = yym2096
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yysep2087 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2097 := z.DecBinary()
	_ = yym2097
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2098 := r.ReadMapStart()
			if yyl2098 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2098, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2098 := r.ReadArrayStart()
			if yyl2098 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2098, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2099Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2099Slc
	var yyhl2099 bool = l >= 0
	for yyj2099 := 0; ; yyj2099++ {
		if yyhl2099 {
			if yyj2099 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2099Slc = r.DecodeBytes(yys2099Slc, true, true)
		yys2099 := string(yys2099Slc)
		switch yys2099 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2100 := &x.Addresses
				yym2101 := z.DecBinary()
				_ = yym2101
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2100), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2102 := &x.NotReadyAddresses
				yym2103 := z.DecBinary()
				_ = yym2103
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2102), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2104 := &x.Ports
				yym2105 := z.DecBinary()
				_ = yym2105
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2104), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2099)
		} // end switch yys2099
	} // end for yyj2099
	if !yyhl2099 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2106 int
	var yyb2106 bool
	var yyhl2106 bool = l >= 0
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2107 := &x.Addresses
		yym2108 := z.DecBinary()
		_ = yym2108
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2107), d)
		}
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2109 := &x.NotReadyAddresses
		yym2110 := z.DecBinary()
		_ = yym2110
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2109), d)
		}
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2111 := &x.Ports
		yym2112 := z.DecBinary()
		_ = yym2112
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2111), d)
		}
	}
	for {
		yyj2106++
		if yyhl2106 {
			yyb2106 = yyj2106 > l
		} else {
			yyb2106 = r.CheckBreak()
		}
		if yyb2106 {
			break
		}
		z.DecStructFieldNotFound(yyj2106-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2113 := z.EncBinary()
		_ = yym2113
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2114 := !z.EncBinary()
			yy2arr2114 := z.EncBasicHandle().StructToArray
			var yyq2114 [2]bool
			_, _, _ = yysep2114, yyq2114, yy2arr2114
			const yyr2114 bool = false
			yyq2114[1] = x.TargetRef != nil
			if yyr2114 || yy2arr2114 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2114 int = 1
				for _, b := range yyq2114 {
					if b {
						yynn2114++
					}
				}
				r.EncodeMapStart(yynn2114)
			}
			if yyr2114 || yy2arr2114 {
				yym2116 := z.EncBinary()
				_ = yym2116
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				yym2117 := z.EncBinary()
				_ = yym2117
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2114 || yy2arr2114 {
				if yyq2114[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2114[1] {
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2114 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2119 := z.DecBinary()
	_ = yym2119
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2120 := r.ReadMapStart()
			if yyl2120 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2120, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2120 := r.ReadArrayStart()
			if yyl2120 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2120, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2121Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2121Slc
	var yyhl2121 bool = l >= 0
	for yyj2121 := 0; ; yyj2121++ {
		if yyhl2121 {
			if yyj2121 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2121Slc = r.DecodeBytes(yys2121Slc, true, true)
		yys2121 := string(yys2121Slc)
		switch yys2121 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2121)
		} // end switch yys2121
	} // end for yyj2121
	if !yyhl2121 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2124 int
	var yyb2124 bool
	var yyhl2124 bool = l >= 0
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2124++
		if yyhl2124 {
			yyb2124 = yyj2124 > l
		} else {
			yyb2124 = r.CheckBreak()
		}
		if yyb2124 {
			break
		}
		z.DecStructFieldNotFound(yyj2124-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2127 := z.EncBinary()
		_ = yym2127
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2128 := !z.EncBinary()
			yy2arr2128 := z.EncBasicHandle().StructToArray
			var yyq2128 [3]bool
			_, _, _ = yysep2128, yyq2128, yy2arr2128
			const yyr2128 bool = false
			yyq2128[0] = x.Name != ""
			yyq2128[2] = x.Protocol != ""
			if yyr2128 || yy2arr2128 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2128 int = 1
				for _, b := range yyq2128 {
					if b {
						yynn2128++
					}
				}
				r.EncodeMapStart(yynn2128)
			}
			if yyr2128 || yy2arr2128 {
				if yyq2128[0] {
					yym2130 := z.EncBinary()
					_ = yym2130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2128[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2131 := z.EncBinary()
					_ = yym2131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2128 || yy2arr2128 {
				yym2133 := z.EncBinary()
				_ = yym2133
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym2134 := z.EncBinary()
				_ = yym2134
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2128 || yy2arr2128 {
				if yyq2128[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2128[2] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yysep2128 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2136 := z.DecBinary()
	_ = yym2136
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2137 := r.ReadMapStart()
			if yyl2137 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2137, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2137 := r.ReadArrayStart()
			if yyl2137 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2137, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2138Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2138Slc
	var yyhl2138 bool = l >= 0
	for yyj2138 := 0; ; yyj2138++ {
		if yyhl2138 {
			if yyj2138 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2138Slc = r.DecodeBytes(yys2138Slc, true, true)
		yys2138 := string(yys2138Slc)
		switch yys2138 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2138)
		} // end switch yys2138
	} // end for yyj2138
	if !yyhl2138 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2142 int
	var yyb2142 bool
	var yyhl2142 bool = l >= 0
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2142++
		if yyhl2142 {
			yyb2142 = yyj2142 > l
		} else {
			yyb2142 = r.CheckBreak()
		}
		if yyb2142 {
			break
		}
		z.DecStructFieldNotFound(yyj2142-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2146 := z.EncBinary()
		_ = yym2146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2147 := !z.EncBinary()
			yy2arr2147 := z.EncBasicHandle().StructToArray
			var yyq2147 [4]bool
			_, _, _ = yysep2147, yyq2147, yy2arr2147
			const yyr2147 bool = false
			yyq2147[0] = x.Kind != ""
			yyq2147[1] = x.APIVersion != ""
			yyq2147[2] = true
			if yyr2147 || yy2arr2147 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2147 int = 1
				for _, b := range yyq2147 {
					if b {
						yynn2147++
					}
				}
				r.EncodeMapStart(yynn2147)
			}
			if yyr2147 || yy2arr2147 {
				if yyq2147[0] {
					yym2149 := z.EncBinary()
					_ = yym2149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2147[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2150 := z.EncBinary()
					_ = yym2150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2147 || yy2arr2147 {
				if yyq2147[1] {
					yym2152 := z.EncBinary()
					_ = yym2152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2147[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2153 := z.EncBinary()
					_ = yym2153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2147 || yy2arr2147 {
				if yyq2147[2] {
					yy2155 := &x.ListMeta
					yym2156 := z.EncBinary()
					_ = yym2156
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2155) {
					} else {
						z.EncFallback(yy2155)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2147[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2157 := &x.ListMeta
					yym2158 := z.EncBinary()
					_ = yym2158
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2157) {
					} else {
						z.EncFallback(yy2157)
					}
				}
			}
			if yyr2147 || yy2arr2147 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2160 := z.EncBinary()
					_ = yym2160
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2161 := z.EncBinary()
					_ = yym2161
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2147 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2162 := z.DecBinary()
	_ = yym2162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2163 := r.ReadMapStart()
			if yyl2163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2163, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2163 := r.ReadArrayStart()
			if yyl2163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2164Slc
	var yyhl2164 bool = l >= 0
	for yyj2164 := 0; ; yyj2164++ {
		if yyhl2164 {
			if yyj2164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2164Slc = r.DecodeBytes(yys2164Slc, true, true)
		yys2164 := string(yys2164Slc)
		switch yys2164 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2167 := &x.ListMeta
				yym2168 := z.DecBinary()
				_ = yym2168
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2167) {
				} else {
					z.DecFallback(yyv2167, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2169 := &x.Items
				yym2170 := z.DecBinary()
				_ = yym2170
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2169), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2164)
		} // end switch yys2164
	} // end for yyj2164
	if !yyhl2164 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2171 int
	var yyb2171 bool
	var yyhl2171 bool = l >= 0
	yyj2171++
	if yyhl2171 {
		yyb2171 = yyj2171 > l
	} else {
		yyb2171 = r.CheckBreak()
	}
	if yyb2171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2171++
	if yyhl2171 {
		yyb2171 = yyj2171 > l
	} else {
		yyb2171 = r.CheckBreak()
	}
	if yyb2171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2171++
	if yyhl2171 {
		yyb2171 = yyj2171 > l
	} else {
		yyb2171 = r.CheckBreak()
	}
	if yyb2171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2174 := &x.ListMeta
		yym2175 := z.DecBinary()
		_ = yym2175
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2174) {
		} else {
			z.DecFallback(yyv2174, false)
		}
	}
	yyj2171++
	if yyhl2171 {
		yyb2171 = yyj2171 > l
	} else {
		yyb2171 = r.CheckBreak()
	}
	if yyb2171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2176 := &x.Items
		yym2177 := z.DecBinary()
		_ = yym2177
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2176), d)
		}
	}
	for {
		yyj2171++
		if yyhl2171 {
			yyb2171 = yyj2171 > l
		} else {
			yyb2171 = r.CheckBreak()
		}
		if yyb2171 {
			break
		}
		z.DecStructFieldNotFound(yyj2171-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2178 := z.EncBinary()
		_ = yym2178
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2179 := !z.EncBinary()
			yy2arr2179 := z.EncBasicHandle().StructToArray
			var yyq2179 [4]bool
			_, _, _ = yysep2179, yyq2179, yy2arr2179
			const yyr2179 bool = false
			yyq2179[0] = x.PodCIDR != ""
			yyq2179[1] = x.ExternalID != ""
			yyq2179[2] = x.ProviderID != ""
			yyq2179[3] = x.Unschedulable != false
			if yyr2179 || yy2arr2179 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2179 int = 0
				for _, b := range yyq2179 {
					if b {
						yynn2179++
					}
				}
				r.EncodeMapStart(yynn2179)
			}
			if yyr2179 || yy2arr2179 {
				if yyq2179[0] {
					yym2181 := z.EncBinary()
					_ = yym2181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2179[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2182 := z.EncBinary()
					_ = yym2182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2179 || yy2arr2179 {
				if yyq2179[1] {
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2179[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2185 := z.EncBinary()
					_ = yym2185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2179 || yy2arr2179 {
				if yyq2179[2] {
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2179[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2188 := z.EncBinary()
					_ = yym2188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2179 || yy2arr2179 {
				if yyq2179[3] {
					yym2190 := z.EncBinary()
					_ = yym2190
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2179[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2191 := z.EncBinary()
					_ = yym2191
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2179 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2192 := z.DecBinary()
	_ = yym2192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2193 := r.ReadMapStart()
			if yyl2193 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2193, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2193 := r.ReadArrayStart()
			if yyl2193 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2194Slc
	var yyhl2194 bool = l >= 0
	for yyj2194 := 0; ; yyj2194++ {
		if yyhl2194 {
			if yyj2194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2194Slc = r.DecodeBytes(yys2194Slc, true, true)
		yys2194 := string(yys2194Slc)
		switch yys2194 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2194)
		} // end switch yys2194
	} // end for yyj2194
	if !yyhl2194 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2199 int
	var yyb2199 bool
	var yyhl2199 bool = l >= 0
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2199++
		if yyhl2199 {
			yyb2199 = yyj2199 > l
		} else {
			yyb2199 = r.CheckBreak()
		}
		if yyb2199 {
			break
		}
		z.DecStructFieldNotFound(yyj2199-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2204 := z.EncBinary()
		_ = yym2204
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2205 := !z.EncBinary()
			yy2arr2205 := z.EncBasicHandle().StructToArray
			var yyq2205 [1]bool
			_, _, _ = yysep2205, yyq2205, yy2arr2205
			const yyr2205 bool = false
			if yyr2205 || yy2arr2205 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2205 int = 1
				for _, b := range yyq2205 {
					if b {
						yynn2205++
					}
				}
				r.EncodeMapStart(yynn2205)
			}
			if yyr2205 || yy2arr2205 {
				yym2207 := z.EncBinary()
				_ = yym2207
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2208 := z.EncBinary()
				_ = yym2208
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2205 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2209 := z.DecBinary()
	_ = yym2209
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2210 := r.ReadMapStart()
			if yyl2210 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2210, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2210 := r.ReadArrayStart()
			if yyl2210 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2210, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2211Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2211Slc
	var yyhl2211 bool = l >= 0
	for yyj2211 := 0; ; yyj2211++ {
		if yyhl2211 {
			if yyj2211 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2211Slc = r.DecodeBytes(yys2211Slc, true, true)
		yys2211 := string(yys2211Slc)
		switch yys2211 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2211)
		} // end switch yys2211
	} // end for yyj2211
	if !yyhl2211 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2213 int
	var yyb2213 bool
	var yyhl2213 bool = l >= 0
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2213++
		if yyhl2213 {
			yyb2213 = yyj2213 > l
		} else {
			yyb2213 = r.CheckBreak()
		}
		if yyb2213 {
			break
		}
		z.DecStructFieldNotFound(yyj2213-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2215 := z.EncBinary()
		_ = yym2215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2216 := !z.EncBinary()
			yy2arr2216 := z.EncBasicHandle().StructToArray
			var yyq2216 [1]bool
			_, _, _ = yysep2216, yyq2216, yy2arr2216
			const yyr2216 bool = false
			yyq2216[0] = true
			if yyr2216 || yy2arr2216 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2216 int = 0
				for _, b := range yyq2216 {
					if b {
						yynn2216++
					}
				}
				r.EncodeMapStart(yynn2216)
			}
			if yyr2216 || yy2arr2216 {
				if yyq2216[0] {
					yy2218 := &x.KubeletEndpoint
					yy2218.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2216[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2219 := &x.KubeletEndpoint
					yy2219.CodecEncodeSelf(e)
				}
			}
			if yysep2216 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2220 := z.DecBinary()
	_ = yym2220
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2221 := r.ReadMapStart()
			if yyl2221 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2221, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2221 := r.ReadArrayStart()
			if yyl2221 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2221, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2222Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2222Slc
	var yyhl2222 bool = l >= 0
	for yyj2222 := 0; ; yyj2222++ {
		if yyhl2222 {
			if yyj2222 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2222Slc = r.DecodeBytes(yys2222Slc, true, true)
		yys2222 := string(yys2222Slc)
		switch yys2222 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2223 := &x.KubeletEndpoint
				yyv2223.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2222)
		} // end switch yys2222
	} // end for yyj2222
	if !yyhl2222 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2224 int
	var yyb2224 bool
	var yyhl2224 bool = l >= 0
	yyj2224++
	if yyhl2224 {
		yyb2224 = yyj2224 > l
	} else {
		yyb2224 = r.CheckBreak()
	}
	if yyb2224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2225 := &x.KubeletEndpoint
		yyv2225.CodecDecodeSelf(d)
	}
	for {
		yyj2224++
		if yyhl2224 {
			yyb2224 = yyj2224 > l
		} else {
			yyb2224 = r.CheckBreak()
		}
		if yyb2224 {
			break
		}
		z.DecStructFieldNotFound(yyj2224-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2226 := z.EncBinary()
		_ = yym2226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2227 := !z.EncBinary()
			yy2arr2227 := z.EncBasicHandle().StructToArray
			var yyq2227 [8]bool
			_, _, _ = yysep2227, yyq2227, yy2arr2227
			const yyr2227 bool = false
			if yyr2227 || yy2arr2227 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2227 int = 8
				for _, b := range yyq2227 {
					if b {
						yynn2227++
					}
				}
				r.EncodeMapStart(yynn2227)
			}
			if yyr2227 || yy2arr2227 {
				yym2229 := z.EncBinary()
				_ = yym2229
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2230 := z.EncBinary()
				_ = yym2230
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2227 || yy2arr2227 {
				yym2232 := z.EncBinary()
				_ = yym2232
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2233 := z.EncBinary()
				_ = yym2233
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2227 || yy2arr2227 {
				yym2235 := z.EncBinary()
				_ = yym2235
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2236 := z.EncBinary()
				_ = yym2236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2227 || yy2arr2227 {
				yym2238 := z.EncBinary()
				_ = yym2238
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2239 := z.EncBinary()
				_ = yym2239
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2227 || yy2arr2227 {
				yym2241 := z.EncBinary()
				_ = yym2241
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2242 := z.EncBinary()
				_ = yym2242
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2227 || yy2arr2227 {
				yym2244 := z.EncBinary()
				_ = yym2244
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2245 := z.EncBinary()
				_ = yym2245
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2227 || yy2arr2227 {
				yym2247 := z.EncBinary()
				_ = yym2247
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2248 := z.EncBinary()
				_ = yym2248
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2227 || yy2arr2227 {
				yym2250 := z.EncBinary()
				_ = yym2250
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2251 := z.EncBinary()
				_ = yym2251
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2227 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2252 := z.DecBinary()
	_ = yym2252
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2253 := r.ReadMapStart()
			if yyl2253 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2253, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2253 := r.ReadArrayStart()
			if yyl2253 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2253, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2254Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2254Slc
	var yyhl2254 bool = l >= 0
	for yyj2254 := 0; ; yyj2254++ {
		if yyhl2254 {
			if yyj2254 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2254Slc = r.DecodeBytes(yys2254Slc, true, true)
		yys2254 := string(yys2254Slc)
		switch yys2254 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2254)
		} // end switch yys2254
	} // end for yyj2254
	if !yyhl2254 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2263 int
	var yyb2263 bool
	var yyhl2263 bool = l >= 0
	yyj2263++
	if yyhl2263 {
		yyb2263 = yyj2263 > l
	} else {
		yyb2263 = r.CheckBreak()
	}
	if yyb2263 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2263++
	if yyhl2263 {
		yyb2263 = yyj2263 > l
	} else {
		yyb2263 = r.CheckBreak()
	}
	if yyb2263 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2263++
	if yyhl2263 {
		yyb2263 = yyj2263 > l
	} else {
		yyb2263 = r.CheckBreak()
	}
	if yyb2263 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2263++
	if yyhl2263 {
		yyb2263 = yyj2263 > l
	} else {
		yyb2263 = r.CheckBreak()
	}
	if yyb2263 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2263++
	if yyhl2263 {
		yyb2263 = yyj2263 > l
	} else {
		yyb2263 = r.CheckBreak()
	}
	if yyb2263 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2263++
	if yyhl2263 {
		yyb2263 = yyj2263 > l
	} else {
		yyb2263 = r.CheckBreak()
	}
	if yyb2263 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2263++
	if yyhl2263 {
		yyb2263 = yyj2263 > l
	} else {
		yyb2263 = r.CheckBreak()
	}
	if yyb2263 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2263++
	if yyhl2263 {
		yyb2263 = yyj2263 > l
	} else {
		yyb2263 = r.CheckBreak()
	}
	if yyb2263 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2263++
		if yyhl2263 {
			yyb2263 = yyj2263 > l
		} else {
			yyb2263 = r.CheckBreak()
		}
		if yyb2263 {
			break
		}
		z.DecStructFieldNotFound(yyj2263-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2272 := z.EncBinary()
		_ = yym2272
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2273 := !z.EncBinary()
			yy2arr2273 := z.EncBasicHandle().StructToArray
			var yyq2273 [6]bool
			_, _, _ = yysep2273, yyq2273, yy2arr2273
			const yyr2273 bool = false
			yyq2273[0] = len(x.Capacity) != 0
			yyq2273[1] = x.Phase != ""
			yyq2273[2] = len(x.Conditions) != 0
			yyq2273[3] = len(x.Addresses) != 0
			yyq2273[4] = true
			yyq2273[5] = true
			if yyr2273 || yy2arr2273 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2273 int = 0
				for _, b := range yyq2273 {
					if b {
						yynn2273++
					}
				}
				r.EncodeMapStart(yynn2273)
			}
			if yyr2273 || yy2arr2273 {
				if yyq2273[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2273[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2273 || yy2arr2273 {
				if yyq2273[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2273[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2273 || yy2arr2273 {
				if yyq2273[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2277 := z.EncBinary()
						_ = yym2277
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2273[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2278 := z.EncBinary()
						_ = yym2278
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2273 || yy2arr2273 {
				if yyq2273[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2280 := z.EncBinary()
						_ = yym2280
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2273[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2281 := z.EncBinary()
						_ = yym2281
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2273 || yy2arr2273 {
				if yyq2273[4] {
					yy2283 := &x.DaemonEndpoints
					yy2283.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2273[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2284 := &x.DaemonEndpoints
					yy2284.CodecEncodeSelf(e)
				}
			}
			if yyr2273 || yy2arr2273 {
				if yyq2273[5] {
					yy2286 := &x.NodeInfo
					yy2286.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2273[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2287 := &x.NodeInfo
					yy2287.CodecEncodeSelf(e)
				}
			}
			if yysep2273 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2288 := z.DecBinary()
	_ = yym2288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2289 := r.ReadMapStart()
			if yyl2289 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2289, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2289 := r.ReadArrayStart()
			if yyl2289 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2289, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2290Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2290Slc
	var yyhl2290 bool = l >= 0
	for yyj2290 := 0; ; yyj2290++ {
		if yyhl2290 {
			if yyj2290 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2290Slc = r.DecodeBytes(yys2290Slc, true, true)
		yys2290 := string(yys2290Slc)
		switch yys2290 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2291 := &x.Capacity
				yyv2291.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2293 := &x.Conditions
				yym2294 := z.DecBinary()
				_ = yym2294
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2293), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2295 := &x.Addresses
				yym2296 := z.DecBinary()
				_ = yym2296
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2295), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2297 := &x.DaemonEndpoints
				yyv2297.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2298 := &x.NodeInfo
				yyv2298.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2290)
		} // end switch yys2290
	} // end for yyj2290
	if !yyhl2290 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2299 int
	var yyb2299 bool
	var yyhl2299 bool = l >= 0
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2300 := &x.Capacity
		yyv2300.CodecDecodeSelf(d)
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2302 := &x.Conditions
		yym2303 := z.DecBinary()
		_ = yym2303
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2302), d)
		}
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2304 := &x.Addresses
		yym2305 := z.DecBinary()
		_ = yym2305
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2304), d)
		}
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2306 := &x.DaemonEndpoints
		yyv2306.CodecDecodeSelf(d)
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2307 := &x.NodeInfo
		yyv2307.CodecDecodeSelf(d)
	}
	for {
		yyj2299++
		if yyhl2299 {
			yyb2299 = yyj2299 > l
		} else {
			yyb2299 = r.CheckBreak()
		}
		if yyb2299 {
			break
		}
		z.DecStructFieldNotFound(yyj2299-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2308 := z.EncBinary()
	_ = yym2308
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2309 := z.DecBinary()
	_ = yym2309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2310 := z.EncBinary()
	_ = yym2310
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2311 := z.DecBinary()
	_ = yym2311
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2312 := z.EncBinary()
		_ = yym2312
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2313 := !z.EncBinary()
			yy2arr2313 := z.EncBasicHandle().StructToArray
			var yyq2313 [6]bool
			_, _, _ = yysep2313, yyq2313, yy2arr2313
			const yyr2313 bool = false
			yyq2313[2] = true
			yyq2313[3] = true
			yyq2313[4] = x.Reason != ""
			yyq2313[5] = x.Message != ""
			if yyr2313 || yy2arr2313 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2313 int = 2
				for _, b := range yyq2313 {
					if b {
						yynn2313++
					}
				}
				r.EncodeMapStart(yynn2313)
			}
			if yyr2313 || yy2arr2313 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2313 || yy2arr2313 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2313 || yy2arr2313 {
				if yyq2313[2] {
					yy2317 := &x.LastHeartbeatTime
					yym2318 := z.EncBinary()
					_ = yym2318
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2317) {
					} else if yym2318 {
						z.EncBinaryMarshal(yy2317)
					} else if !yym2318 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2317)
					} else {
						z.EncFallback(yy2317)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2313[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2319 := &x.LastHeartbeatTime
					yym2320 := z.EncBinary()
					_ = yym2320
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2319) {
					} else if yym2320 {
						z.EncBinaryMarshal(yy2319)
					} else if !yym2320 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2319)
					} else {
						z.EncFallback(yy2319)
					}
				}
			}
			if yyr2313 || yy2arr2313 {
				if yyq2313[3] {
					yy2322 := &x.LastTransitionTime
					yym2323 := z.EncBinary()
					_ = yym2323
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2322) {
					} else if yym2323 {
						z.EncBinaryMarshal(yy2322)
					} else if !yym2323 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2322)
					} else {
						z.EncFallback(yy2322)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2313[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2324 := &x.LastTransitionTime
					yym2325 := z.EncBinary()
					_ = yym2325
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2324) {
					} else if yym2325 {
						z.EncBinaryMarshal(yy2324)
					} else if !yym2325 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2324)
					} else {
						z.EncFallback(yy2324)
					}
				}
			}
			if yyr2313 || yy2arr2313 {
				if yyq2313[4] {
					yym2327 := z.EncBinary()
					_ = yym2327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2313[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2328 := z.EncBinary()
					_ = yym2328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2313 || yy2arr2313 {
				if yyq2313[5] {
					yym2330 := z.EncBinary()
					_ = yym2330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2313[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2313 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2332 := z.DecBinary()
	_ = yym2332
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2333 := r.ReadMapStart()
			if yyl2333 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2333, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2333 := r.ReadArrayStart()
			if yyl2333 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2333, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2334Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2334Slc
	var yyhl2334 bool = l >= 0
	for yyj2334 := 0; ; yyj2334++ {
		if yyhl2334 {
			if yyj2334 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2334Slc = r.DecodeBytes(yys2334Slc, true, true)
		yys2334 := string(yys2334Slc)
		switch yys2334 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2337 := &x.LastHeartbeatTime
				yym2338 := z.DecBinary()
				_ = yym2338
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2337) {
				} else if yym2338 {
					z.DecBinaryUnmarshal(yyv2337)
				} else if !yym2338 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2337)
				} else {
					z.DecFallback(yyv2337, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2339 := &x.LastTransitionTime
				yym2340 := z.DecBinary()
				_ = yym2340
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2339) {
				} else if yym2340 {
					z.DecBinaryUnmarshal(yyv2339)
				} else if !yym2340 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2339)
				} else {
					z.DecFallback(yyv2339, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2334)
		} // end switch yys2334
	} // end for yyj2334
	if !yyhl2334 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2343 int
	var yyb2343 bool
	var yyhl2343 bool = l >= 0
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2346 := &x.LastHeartbeatTime
		yym2347 := z.DecBinary()
		_ = yym2347
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2346) {
		} else if yym2347 {
			z.DecBinaryUnmarshal(yyv2346)
		} else if !yym2347 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2346)
		} else {
			z.DecFallback(yyv2346, false)
		}
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2348 := &x.LastTransitionTime
		yym2349 := z.DecBinary()
		_ = yym2349
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2348) {
		} else if yym2349 {
			z.DecBinaryUnmarshal(yyv2348)
		} else if !yym2349 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2348)
		} else {
			z.DecFallback(yyv2348, false)
		}
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2343++
		if yyhl2343 {
			yyb2343 = yyj2343 > l
		} else {
			yyb2343 = r.CheckBreak()
		}
		if yyb2343 {
			break
		}
		z.DecStructFieldNotFound(yyj2343-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2352 := z.EncBinary()
	_ = yym2352
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2353 := z.DecBinary()
	_ = yym2353
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2354 := z.EncBinary()
		_ = yym2354
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2355 := !z.EncBinary()
			yy2arr2355 := z.EncBasicHandle().StructToArray
			var yyq2355 [2]bool
			_, _, _ = yysep2355, yyq2355, yy2arr2355
			const yyr2355 bool = false
			if yyr2355 || yy2arr2355 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2355 int = 2
				for _, b := range yyq2355 {
					if b {
						yynn2355++
					}
				}
				r.EncodeMapStart(yynn2355)
			}
			if yyr2355 || yy2arr2355 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2355 || yy2arr2355 {
				yym2358 := z.EncBinary()
				_ = yym2358
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2359 := z.EncBinary()
				_ = yym2359
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2355 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2360 := z.DecBinary()
	_ = yym2360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2361 := r.ReadMapStart()
			if yyl2361 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2361, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2361 := r.ReadArrayStart()
			if yyl2361 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2361, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2362Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2362Slc
	var yyhl2362 bool = l >= 0
	for yyj2362 := 0; ; yyj2362++ {
		if yyhl2362 {
			if yyj2362 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2362Slc = r.DecodeBytes(yys2362Slc, true, true)
		yys2362 := string(yys2362Slc)
		switch yys2362 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2362)
		} // end switch yys2362
	} // end for yyj2362
	if !yyhl2362 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2365 int
	var yyb2365 bool
	var yyhl2365 bool = l >= 0
	yyj2365++
	if yyhl2365 {
		yyb2365 = yyj2365 > l
	} else {
		yyb2365 = r.CheckBreak()
	}
	if yyb2365 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2365++
	if yyhl2365 {
		yyb2365 = yyj2365 > l
	} else {
		yyb2365 = r.CheckBreak()
	}
	if yyb2365 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2365++
		if yyhl2365 {
			yyb2365 = yyj2365 > l
		} else {
			yyb2365 = r.CheckBreak()
		}
		if yyb2365 {
			break
		}
		z.DecStructFieldNotFound(yyj2365-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2368 := z.EncBinary()
	_ = yym2368
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2369 := z.DecBinary()
	_ = yym2369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2370 := z.EncBinary()
		_ = yym2370
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2371 := z.DecBinary()
	_ = yym2371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2372 := z.EncBinary()
		_ = yym2372
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2373 := !z.EncBinary()
			yy2arr2373 := z.EncBasicHandle().StructToArray
			var yyq2373 [5]bool
			_, _, _ = yysep2373, yyq2373, yy2arr2373
			const yyr2373 bool = false
			yyq2373[0] = x.Kind != ""
			yyq2373[1] = x.APIVersion != ""
			yyq2373[2] = true
			yyq2373[3] = true
			yyq2373[4] = true
			if yyr2373 || yy2arr2373 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2373 int = 0
				for _, b := range yyq2373 {
					if b {
						yynn2373++
					}
				}
				r.EncodeMapStart(yynn2373)
			}
			if yyr2373 || yy2arr2373 {
				if yyq2373[0] {
					yym2375 := z.EncBinary()
					_ = yym2375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2373[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2376 := z.EncBinary()
					_ = yym2376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2373 || yy2arr2373 {
				if yyq2373[1] {
					yym2378 := z.EncBinary()
					_ = yym2378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2373[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2379 := z.EncBinary()
					_ = yym2379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2373 || yy2arr2373 {
				if yyq2373[2] {
					yy2381 := &x.ObjectMeta
					yy2381.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2373[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2382 := &x.ObjectMeta
					yy2382.CodecEncodeSelf(e)
				}
			}
			if yyr2373 || yy2arr2373 {
				if yyq2373[3] {
					yy2384 := &x.Spec
					yy2384.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2373[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2385 := &x.Spec
					yy2385.CodecEncodeSelf(e)
				}
			}
			if yyr2373 || yy2arr2373 {
				if yyq2373[4] {
					yy2387 := &x.Status
					yy2387.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2373[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2388 := &x.Status
					yy2388.CodecEncodeSelf(e)
				}
			}
			if yysep2373 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2389 := z.DecBinary()
	_ = yym2389
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2390 := r.ReadMapStart()
			if yyl2390 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2390, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2390 := r.ReadArrayStart()
			if yyl2390 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2390, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2391Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2391Slc
	var yyhl2391 bool = l >= 0
	for yyj2391 := 0; ; yyj2391++ {
		if yyhl2391 {
			if yyj2391 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2391Slc = r.DecodeBytes(yys2391Slc, true, true)
		yys2391 := string(yys2391Slc)
		switch yys2391 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2394 := &x.ObjectMeta
				yyv2394.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2395 := &x.Spec
				yyv2395.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2396 := &x.Status
				yyv2396.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2391)
		} // end switch yys2391
	} // end for yyj2391
	if !yyhl2391 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2397 int
	var yyb2397 bool
	var yyhl2397 bool = l >= 0
	yyj2397++
	if yyhl2397 {
		yyb2397 = yyj2397 > l
	} else {
		yyb2397 = r.CheckBreak()
	}
	if yyb2397 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2397++
	if yyhl2397 {
		yyb2397 = yyj2397 > l
	} else {
		yyb2397 = r.CheckBreak()
	}
	if yyb2397 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2397++
	if yyhl2397 {
		yyb2397 = yyj2397 > l
	} else {
		yyb2397 = r.CheckBreak()
	}
	if yyb2397 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2400 := &x.ObjectMeta
		yyv2400.CodecDecodeSelf(d)
	}
	yyj2397++
	if yyhl2397 {
		yyb2397 = yyj2397 > l
	} else {
		yyb2397 = r.CheckBreak()
	}
	if yyb2397 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2401 := &x.Spec
		yyv2401.CodecDecodeSelf(d)
	}
	yyj2397++
	if yyhl2397 {
		yyb2397 = yyj2397 > l
	} else {
		yyb2397 = r.CheckBreak()
	}
	if yyb2397 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2402 := &x.Status
		yyv2402.CodecDecodeSelf(d)
	}
	for {
		yyj2397++
		if yyhl2397 {
			yyb2397 = yyj2397 > l
		} else {
			yyb2397 = r.CheckBreak()
		}
		if yyb2397 {
			break
		}
		z.DecStructFieldNotFound(yyj2397-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2403 := z.EncBinary()
		_ = yym2403
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2404 := !z.EncBinary()
			yy2arr2404 := z.EncBasicHandle().StructToArray
			var yyq2404 [4]bool
			_, _, _ = yysep2404, yyq2404, yy2arr2404
			const yyr2404 bool = false
			yyq2404[0] = x.Kind != ""
			yyq2404[1] = x.APIVersion != ""
			yyq2404[2] = true
			if yyr2404 || yy2arr2404 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2404 int = 1
				for _, b := range yyq2404 {
					if b {
						yynn2404++
					}
				}
				r.EncodeMapStart(yynn2404)
			}
			if yyr2404 || yy2arr2404 {
				if yyq2404[0] {
					yym2406 := z.EncBinary()
					_ = yym2406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2404[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2407 := z.EncBinary()
					_ = yym2407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2404 || yy2arr2404 {
				if yyq2404[1] {
					yym2409 := z.EncBinary()
					_ = yym2409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2404[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2410 := z.EncBinary()
					_ = yym2410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2404 || yy2arr2404 {
				if yyq2404[2] {
					yy2412 := &x.ListMeta
					yym2413 := z.EncBinary()
					_ = yym2413
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2412) {
					} else {
						z.EncFallback(yy2412)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2404[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2414 := &x.ListMeta
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2414) {
					} else {
						z.EncFallback(yy2414)
					}
				}
			}
			if yyr2404 || yy2arr2404 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2417 := z.EncBinary()
					_ = yym2417
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2404 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2419 := z.DecBinary()
	_ = yym2419
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2420 := r.ReadMapStart()
			if yyl2420 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2420, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2420 := r.ReadArrayStart()
			if yyl2420 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2420, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2421Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2421Slc
	var yyhl2421 bool = l >= 0
	for yyj2421 := 0; ; yyj2421++ {
		if yyhl2421 {
			if yyj2421 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2421Slc = r.DecodeBytes(yys2421Slc, true, true)
		yys2421 := string(yys2421Slc)
		switch yys2421 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2424 := &x.ListMeta
				yym2425 := z.DecBinary()
				_ = yym2425
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2424) {
				} else {
					z.DecFallback(yyv2424, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2426 := &x.Items
				yym2427 := z.DecBinary()
				_ = yym2427
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2426), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2421)
		} // end switch yys2421
	} // end for yyj2421
	if !yyhl2421 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2428 int
	var yyb2428 bool
	var yyhl2428 bool = l >= 0
	yyj2428++
	if yyhl2428 {
		yyb2428 = yyj2428 > l
	} else {
		yyb2428 = r.CheckBreak()
	}
	if yyb2428 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2428++
	if yyhl2428 {
		yyb2428 = yyj2428 > l
	} else {
		yyb2428 = r.CheckBreak()
	}
	if yyb2428 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2428++
	if yyhl2428 {
		yyb2428 = yyj2428 > l
	} else {
		yyb2428 = r.CheckBreak()
	}
	if yyb2428 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2431 := &x.ListMeta
		yym2432 := z.DecBinary()
		_ = yym2432
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2431) {
		} else {
			z.DecFallback(yyv2431, false)
		}
	}
	yyj2428++
	if yyhl2428 {
		yyb2428 = yyj2428 > l
	} else {
		yyb2428 = r.CheckBreak()
	}
	if yyb2428 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2433 := &x.Items
		yym2434 := z.DecBinary()
		_ = yym2434
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2433), d)
		}
	}
	for {
		yyj2428++
		if yyhl2428 {
			yyb2428 = yyj2428 > l
		} else {
			yyb2428 = r.CheckBreak()
		}
		if yyb2428 {
			break
		}
		z.DecStructFieldNotFound(yyj2428-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2435 := z.EncBinary()
	_ = yym2435
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2436 := z.DecBinary()
	_ = yym2436
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2437 := z.EncBinary()
		_ = yym2437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2438 := !z.EncBinary()
			yy2arr2438 := z.EncBasicHandle().StructToArray
			var yyq2438 [1]bool
			_, _, _ = yysep2438, yyq2438, yy2arr2438
			const yyr2438 bool = false
			yyq2438[0] = len(x.Finalizers) != 0
			if yyr2438 || yy2arr2438 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2438 int = 0
				for _, b := range yyq2438 {
					if b {
						yynn2438++
					}
				}
				r.EncodeMapStart(yynn2438)
			}
			if yyr2438 || yy2arr2438 {
				if yyq2438[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2440 := z.EncBinary()
						_ = yym2440
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2438[0] {
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2441 := z.EncBinary()
						_ = yym2441
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yysep2438 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2442 := z.DecBinary()
	_ = yym2442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2443 := r.ReadMapStart()
			if yyl2443 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2443, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2443 := r.ReadArrayStart()
			if yyl2443 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2443, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2444Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2444Slc
	var yyhl2444 bool = l >= 0
	for yyj2444 := 0; ; yyj2444++ {
		if yyhl2444 {
			if yyj2444 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2444Slc = r.DecodeBytes(yys2444Slc, true, true)
		yys2444 := string(yys2444Slc)
		switch yys2444 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2445 := &x.Finalizers
				yym2446 := z.DecBinary()
				_ = yym2446
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2445), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2444)
		} // end switch yys2444
	} // end for yyj2444
	if !yyhl2444 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2447 int
	var yyb2447 bool
	var yyhl2447 bool = l >= 0
	yyj2447++
	if yyhl2447 {
		yyb2447 = yyj2447 > l
	} else {
		yyb2447 = r.CheckBreak()
	}
	if yyb2447 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2448 := &x.Finalizers
		yym2449 := z.DecBinary()
		_ = yym2449
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2448), d)
		}
	}
	for {
		yyj2447++
		if yyhl2447 {
			yyb2447 = yyj2447 > l
		} else {
			yyb2447 = r.CheckBreak()
		}
		if yyb2447 {
			break
		}
		z.DecStructFieldNotFound(yyj2447-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2450 := z.EncBinary()
		_ = yym2450
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2451 := !z.EncBinary()
			yy2arr2451 := z.EncBasicHandle().StructToArray
			var yyq2451 [1]bool
			_, _, _ = yysep2451, yyq2451, yy2arr2451
			const yyr2451 bool = false
			yyq2451[0] = x.Phase != ""
			if yyr2451 || yy2arr2451 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2451 int = 0
				for _, b := range yyq2451 {
					if b {
						yynn2451++
					}
				}
				r.EncodeMapStart(yynn2451)
			}
			if yyr2451 || yy2arr2451 {
				if yyq2451[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2451[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2451 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2453 := z.DecBinary()
	_ = yym2453
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2454 := r.ReadMapStart()
			if yyl2454 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2454, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2454 := r.ReadArrayStart()
			if yyl2454 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2454, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2455Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2455Slc
	var yyhl2455 bool = l >= 0
	for yyj2455 := 0; ; yyj2455++ {
		if yyhl2455 {
			if yyj2455 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2455Slc = r.DecodeBytes(yys2455Slc, true, true)
		yys2455 := string(yys2455Slc)
		switch yys2455 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2455)
		} // end switch yys2455
	} // end for yyj2455
	if !yyhl2455 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2457 int
	var yyb2457 bool
	var yyhl2457 bool = l >= 0
	yyj2457++
	if yyhl2457 {
		yyb2457 = yyj2457 > l
	} else {
		yyb2457 = r.CheckBreak()
	}
	if yyb2457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2457++
		if yyhl2457 {
			yyb2457 = yyj2457 > l
		} else {
			yyb2457 = r.CheckBreak()
		}
		if yyb2457 {
			break
		}
		z.DecStructFieldNotFound(yyj2457-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2459 := z.EncBinary()
	_ = yym2459
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2460 := z.DecBinary()
	_ = yym2460
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2461 := z.EncBinary()
		_ = yym2461
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2462 := !z.EncBinary()
			yy2arr2462 := z.EncBasicHandle().StructToArray
			var yyq2462 [5]bool
			_, _, _ = yysep2462, yyq2462, yy2arr2462
			const yyr2462 bool = false
			yyq2462[0] = x.Kind != ""
			yyq2462[1] = x.APIVersion != ""
			yyq2462[2] = true
			yyq2462[3] = true
			yyq2462[4] = true
			if yyr2462 || yy2arr2462 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2462 int = 0
				for _, b := range yyq2462 {
					if b {
						yynn2462++
					}
				}
				r.EncodeMapStart(yynn2462)
			}
			if yyr2462 || yy2arr2462 {
				if yyq2462[0] {
					yym2464 := z.EncBinary()
					_ = yym2464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2462[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2465 := z.EncBinary()
					_ = yym2465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2462 || yy2arr2462 {
				if yyq2462[1] {
					yym2467 := z.EncBinary()
					_ = yym2467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2462[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2468 := z.EncBinary()
					_ = yym2468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2462 || yy2arr2462 {
				if yyq2462[2] {
					yy2470 := &x.ObjectMeta
					yy2470.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2462[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2471 := &x.ObjectMeta
					yy2471.CodecEncodeSelf(e)
				}
			}
			if yyr2462 || yy2arr2462 {
				if yyq2462[3] {
					yy2473 := &x.Spec
					yy2473.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2462[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2474 := &x.Spec
					yy2474.CodecEncodeSelf(e)
				}
			}
			if yyr2462 || yy2arr2462 {
				if yyq2462[4] {
					yy2476 := &x.Status
					yy2476.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2462[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2477 := &x.Status
					yy2477.CodecEncodeSelf(e)
				}
			}
			if yysep2462 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2478 := z.DecBinary()
	_ = yym2478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2479 := r.ReadMapStart()
			if yyl2479 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2479, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2479 := r.ReadArrayStart()
			if yyl2479 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2479, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2480Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2480Slc
	var yyhl2480 bool = l >= 0
	for yyj2480 := 0; ; yyj2480++ {
		if yyhl2480 {
			if yyj2480 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2480Slc = r.DecodeBytes(yys2480Slc, true, true)
		yys2480 := string(yys2480Slc)
		switch yys2480 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2483 := &x.ObjectMeta
				yyv2483.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2484 := &x.Spec
				yyv2484.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2485 := &x.Status
				yyv2485.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2480)
		} // end switch yys2480
	} // end for yyj2480
	if !yyhl2480 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2486 int
	var yyb2486 bool
	var yyhl2486 bool = l >= 0
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2489 := &x.ObjectMeta
		yyv2489.CodecDecodeSelf(d)
	}
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2490 := &x.Spec
		yyv2490.CodecDecodeSelf(d)
	}
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2491 := &x.Status
		yyv2491.CodecDecodeSelf(d)
	}
	for {
		yyj2486++
		if yyhl2486 {
			yyb2486 = yyj2486 > l
		} else {
			yyb2486 = r.CheckBreak()
		}
		if yyb2486 {
			break
		}
		z.DecStructFieldNotFound(yyj2486-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2492 := z.EncBinary()
		_ = yym2492
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2493 := !z.EncBinary()
			yy2arr2493 := z.EncBasicHandle().StructToArray
			var yyq2493 [4]bool
			_, _, _ = yysep2493, yyq2493, yy2arr2493
			const yyr2493 bool = false
			yyq2493[0] = x.Kind != ""
			yyq2493[1] = x.APIVersion != ""
			yyq2493[2] = true
			if yyr2493 || yy2arr2493 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2493 int = 1
				for _, b := range yyq2493 {
					if b {
						yynn2493++
					}
				}
				r.EncodeMapStart(yynn2493)
			}
			if yyr2493 || yy2arr2493 {
				if yyq2493[0] {
					yym2495 := z.EncBinary()
					_ = yym2495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2493[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2496 := z.EncBinary()
					_ = yym2496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2493 || yy2arr2493 {
				if yyq2493[1] {
					yym2498 := z.EncBinary()
					_ = yym2498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2493[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2499 := z.EncBinary()
					_ = yym2499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2493 || yy2arr2493 {
				if yyq2493[2] {
					yy2501 := &x.ListMeta
					yym2502 := z.EncBinary()
					_ = yym2502
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2501) {
					} else {
						z.EncFallback(yy2501)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2493[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2503 := &x.ListMeta
					yym2504 := z.EncBinary()
					_ = yym2504
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2503) {
					} else {
						z.EncFallback(yy2503)
					}
				}
			}
			if yyr2493 || yy2arr2493 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2506 := z.EncBinary()
					_ = yym2506
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2507 := z.EncBinary()
					_ = yym2507
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2493 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2508 := z.DecBinary()
	_ = yym2508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2509 := r.ReadMapStart()
			if yyl2509 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2509, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2509 := r.ReadArrayStart()
			if yyl2509 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2509, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2510Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2510Slc
	var yyhl2510 bool = l >= 0
	for yyj2510 := 0; ; yyj2510++ {
		if yyhl2510 {
			if yyj2510 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2510Slc = r.DecodeBytes(yys2510Slc, true, true)
		yys2510 := string(yys2510Slc)
		switch yys2510 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2513 := &x.ListMeta
				yym2514 := z.DecBinary()
				_ = yym2514
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2513) {
				} else {
					z.DecFallback(yyv2513, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2515 := &x.Items
				yym2516 := z.DecBinary()
				_ = yym2516
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2515), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2510)
		} // end switch yys2510
	} // end for yyj2510
	if !yyhl2510 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2517 int
	var yyb2517 bool
	var yyhl2517 bool = l >= 0
	yyj2517++
	if yyhl2517 {
		yyb2517 = yyj2517 > l
	} else {
		yyb2517 = r.CheckBreak()
	}
	if yyb2517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2517++
	if yyhl2517 {
		yyb2517 = yyj2517 > l
	} else {
		yyb2517 = r.CheckBreak()
	}
	if yyb2517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2517++
	if yyhl2517 {
		yyb2517 = yyj2517 > l
	} else {
		yyb2517 = r.CheckBreak()
	}
	if yyb2517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2520 := &x.ListMeta
		yym2521 := z.DecBinary()
		_ = yym2521
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2520) {
		} else {
			z.DecFallback(yyv2520, false)
		}
	}
	yyj2517++
	if yyhl2517 {
		yyb2517 = yyj2517 > l
	} else {
		yyb2517 = r.CheckBreak()
	}
	if yyb2517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2522 := &x.Items
		yym2523 := z.DecBinary()
		_ = yym2523
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2522), d)
		}
	}
	for {
		yyj2517++
		if yyhl2517 {
			yyb2517 = yyj2517 > l
		} else {
			yyb2517 = r.CheckBreak()
		}
		if yyb2517 {
			break
		}
		z.DecStructFieldNotFound(yyj2517-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2524 := z.EncBinary()
		_ = yym2524
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2525 := !z.EncBinary()
			yy2arr2525 := z.EncBasicHandle().StructToArray
			var yyq2525 [4]bool
			_, _, _ = yysep2525, yyq2525, yy2arr2525
			const yyr2525 bool = false
			yyq2525[0] = x.Kind != ""
			yyq2525[1] = x.APIVersion != ""
			yyq2525[2] = true
			if yyr2525 || yy2arr2525 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2525 int = 1
				for _, b := range yyq2525 {
					if b {
						yynn2525++
					}
				}
				r.EncodeMapStart(yynn2525)
			}
			if yyr2525 || yy2arr2525 {
				if yyq2525[0] {
					yym2527 := z.EncBinary()
					_ = yym2527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2525[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2525 || yy2arr2525 {
				if yyq2525[1] {
					yym2530 := z.EncBinary()
					_ = yym2530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2525[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2531 := z.EncBinary()
					_ = yym2531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2525 || yy2arr2525 {
				if yyq2525[2] {
					yy2533 := &x.ObjectMeta
					yy2533.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2525[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2534 := &x.ObjectMeta
					yy2534.CodecEncodeSelf(e)
				}
			}
			if yyr2525 || yy2arr2525 {
				yy2536 := &x.Target
				yy2536.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2537 := &x.Target
				yy2537.CodecEncodeSelf(e)
			}
			if yysep2525 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2538 := z.DecBinary()
	_ = yym2538
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2539 := r.ReadMapStart()
			if yyl2539 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2539, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2539 := r.ReadArrayStart()
			if yyl2539 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2539, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2540Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2540Slc
	var yyhl2540 bool = l >= 0
	for yyj2540 := 0; ; yyj2540++ {
		if yyhl2540 {
			if yyj2540 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2540Slc = r.DecodeBytes(yys2540Slc, true, true)
		yys2540 := string(yys2540Slc)
		switch yys2540 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2543 := &x.ObjectMeta
				yyv2543.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2544 := &x.Target
				yyv2544.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2540)
		} // end switch yys2540
	} // end for yyj2540
	if !yyhl2540 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2545 int
	var yyb2545 bool
	var yyhl2545 bool = l >= 0
	yyj2545++
	if yyhl2545 {
		yyb2545 = yyj2545 > l
	} else {
		yyb2545 = r.CheckBreak()
	}
	if yyb2545 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2545++
	if yyhl2545 {
		yyb2545 = yyj2545 > l
	} else {
		yyb2545 = r.CheckBreak()
	}
	if yyb2545 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2545++
	if yyhl2545 {
		yyb2545 = yyj2545 > l
	} else {
		yyb2545 = r.CheckBreak()
	}
	if yyb2545 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2548 := &x.ObjectMeta
		yyv2548.CodecDecodeSelf(d)
	}
	yyj2545++
	if yyhl2545 {
		yyb2545 = yyj2545 > l
	} else {
		yyb2545 = r.CheckBreak()
	}
	if yyb2545 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2549 := &x.Target
		yyv2549.CodecDecodeSelf(d)
	}
	for {
		yyj2545++
		if yyhl2545 {
			yyb2545 = yyj2545 > l
		} else {
			yyb2545 = r.CheckBreak()
		}
		if yyb2545 {
			break
		}
		z.DecStructFieldNotFound(yyj2545-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2550 := z.EncBinary()
		_ = yym2550
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2551 := !z.EncBinary()
			yy2arr2551 := z.EncBasicHandle().StructToArray
			var yyq2551 [3]bool
			_, _, _ = yysep2551, yyq2551, yy2arr2551
			const yyr2551 bool = false
			yyq2551[0] = x.Kind != ""
			yyq2551[1] = x.APIVersion != ""
			if yyr2551 || yy2arr2551 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2551 int = 1
				for _, b := range yyq2551 {
					if b {
						yynn2551++
					}
				}
				r.EncodeMapStart(yynn2551)
			}
			if yyr2551 || yy2arr2551 {
				if yyq2551[0] {
					yym2553 := z.EncBinary()
					_ = yym2553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2551[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2554 := z.EncBinary()
					_ = yym2554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2551 || yy2arr2551 {
				if yyq2551[1] {
					yym2556 := z.EncBinary()
					_ = yym2556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2551[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2557 := z.EncBinary()
					_ = yym2557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2551 || yy2arr2551 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2559 := *x.GracePeriodSeconds
					yym2560 := z.EncBinary()
					_ = yym2560
					if false {
					} else {
						r.EncodeInt(int64(yy2559))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2561 := *x.GracePeriodSeconds
					yym2562 := z.EncBinary()
					_ = yym2562
					if false {
					} else {
						r.EncodeInt(int64(yy2561))
					}
				}
			}
			if yysep2551 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2563 := z.DecBinary()
	_ = yym2563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2564 := r.ReadMapStart()
			if yyl2564 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2564, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2564 := r.ReadArrayStart()
			if yyl2564 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2564, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2565Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2565Slc
	var yyhl2565 bool = l >= 0
	for yyj2565 := 0; ; yyj2565++ {
		if yyhl2565 {
			if yyj2565 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2565Slc = r.DecodeBytes(yys2565Slc, true, true)
		yys2565 := string(yys2565Slc)
		switch yys2565 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2569 := z.DecBinary()
				_ = yym2569
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2565)
		} // end switch yys2565
	} // end for yyj2565
	if !yyhl2565 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2570 int
	var yyb2570 bool
	var yyhl2570 bool = l >= 0
	yyj2570++
	if yyhl2570 {
		yyb2570 = yyj2570 > l
	} else {
		yyb2570 = r.CheckBreak()
	}
	if yyb2570 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2570++
	if yyhl2570 {
		yyb2570 = yyj2570 > l
	} else {
		yyb2570 = r.CheckBreak()
	}
	if yyb2570 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2570++
	if yyhl2570 {
		yyb2570 = yyj2570 > l
	} else {
		yyb2570 = r.CheckBreak()
	}
	if yyb2570 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2574 := z.DecBinary()
		_ = yym2574
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2570++
		if yyhl2570 {
			yyb2570 = yyj2570 > l
		} else {
			yyb2570 = r.CheckBreak()
		}
		if yyb2570 {
			break
		}
		z.DecStructFieldNotFound(yyj2570-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2575 := z.EncBinary()
		_ = yym2575
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2576 := !z.EncBinary()
			yy2arr2576 := z.EncBasicHandle().StructToArray
			var yyq2576 [7]bool
			_, _, _ = yysep2576, yyq2576, yy2arr2576
			const yyr2576 bool = false
			yyq2576[0] = x.Kind != ""
			yyq2576[1] = x.APIVersion != ""
			yyq2576[2] = x.LabelSelector != ""
			yyq2576[3] = x.FieldSelector != ""
			yyq2576[4] = x.Watch != false
			yyq2576[5] = x.ResourceVersion != ""
			yyq2576[6] = x.TimeoutSeconds != nil
			if yyr2576 || yy2arr2576 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2576 int = 0
				for _, b := range yyq2576 {
					if b {
						yynn2576++
					}
				}
				r.EncodeMapStart(yynn2576)
			}
			if yyr2576 || yy2arr2576 {
				if yyq2576[0] {
					yym2578 := z.EncBinary()
					_ = yym2578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2576[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2579 := z.EncBinary()
					_ = yym2579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2576 || yy2arr2576 {
				if yyq2576[1] {
					yym2581 := z.EncBinary()
					_ = yym2581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2576[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2582 := z.EncBinary()
					_ = yym2582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2576 || yy2arr2576 {
				if yyq2576[2] {
					yym2584 := z.EncBinary()
					_ = yym2584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2576[2] {
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					yym2585 := z.EncBinary()
					_ = yym2585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr2576 || yy2arr2576 {
				if yyq2576[3] {
					yym2587 := z.EncBinary()
					_ = yym2587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2576[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					yym2588 := z.EncBinary()
					_ = yym2588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr2576 || yy2arr2576 {
				if yyq2576[4] {
					yym2590 := z.EncBinary()
					_ = yym2590
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2576[4] {
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					yym2591 := z.EncBinary()
					_ = yym2591
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr2576 || yy2arr2576 {
				if yyq2576[5] {
					yym2593 := z.EncBinary()
					_ = yym2593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2576[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2594 := z.EncBinary()
					_ = yym2594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2576 || yy2arr2576 {
				if yyq2576[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2596 := *x.TimeoutSeconds
						yym2597 := z.EncBinary()
						_ = yym2597
						if false {
						} else {
							r.EncodeInt(int64(yy2596))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2576[6] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2598 := *x.TimeoutSeconds
						yym2599 := z.EncBinary()
						_ = yym2599
						if false {
						} else {
							r.EncodeInt(int64(yy2598))
						}
					}
				}
			}
			if yysep2576 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2600 := z.DecBinary()
	_ = yym2600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2601 := r.ReadMapStart()
			if yyl2601 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2601, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2601 := r.ReadArrayStart()
			if yyl2601 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2601, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2602Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2602Slc
	var yyhl2602 bool = l >= 0
	for yyj2602 := 0; ; yyj2602++ {
		if yyhl2602 {
			if yyj2602 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2602Slc = r.DecodeBytes(yys2602Slc, true, true)
		yys2602 := string(yys2602Slc)
		switch yys2602 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2610 := z.DecBinary()
				_ = yym2610
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2602)
		} // end switch yys2602
	} // end for yyj2602
	if !yyhl2602 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2611 int
	var yyb2611 bool
	var yyhl2611 bool = l >= 0
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2619 := z.DecBinary()
		_ = yym2619
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2611++
		if yyhl2611 {
			yyb2611 = yyj2611 > l
		} else {
			yyb2611 = r.CheckBreak()
		}
		if yyb2611 {
			break
		}
		z.DecStructFieldNotFound(yyj2611-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2620 := z.EncBinary()
		_ = yym2620
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2621 := !z.EncBinary()
			yy2arr2621 := z.EncBasicHandle().StructToArray
			var yyq2621 [10]bool
			_, _, _ = yysep2621, yyq2621, yy2arr2621
			const yyr2621 bool = false
			yyq2621[0] = x.Kind != ""
			yyq2621[1] = x.APIVersion != ""
			yyq2621[2] = x.Container != ""
			yyq2621[3] = x.Follow != false
			yyq2621[4] = x.Previous != false
			yyq2621[5] = x.SinceSeconds != nil
			yyq2621[6] = x.SinceTime != nil
			yyq2621[7] = x.Timestamps != false
			yyq2621[8] = x.TailLines != nil
			yyq2621[9] = x.LimitBytes != nil
			if yyr2621 || yy2arr2621 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2621 int = 0
				for _, b := range yyq2621 {
					if b {
						yynn2621++
					}
				}
				r.EncodeMapStart(yynn2621)
			}
			if yyr2621 || yy2arr2621 {
				if yyq2621[0] {
					yym2623 := z.EncBinary()
					_ = yym2623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2621[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2624 := z.EncBinary()
					_ = yym2624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				if yyq2621[1] {
					yym2626 := z.EncBinary()
					_ = yym2626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2621[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2627 := z.EncBinary()
					_ = yym2627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				if yyq2621[2] {
					yym2629 := z.EncBinary()
					_ = yym2629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2621[2] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2630 := z.EncBinary()
					_ = yym2630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				if yyq2621[3] {
					yym2632 := z.EncBinary()
					_ = yym2632
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2621[3] {
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					yym2633 := z.EncBinary()
					_ = yym2633
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				if yyq2621[4] {
					yym2635 := z.EncBinary()
					_ = yym2635
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2621[4] {
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					yym2636 := z.EncBinary()
					_ = yym2636
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				if yyq2621[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2638 := *x.SinceSeconds
						yym2639 := z.EncBinary()
						_ = yym2639
						if false {
						} else {
							r.EncodeInt(int64(yy2638))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2621[5] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2640 := *x.SinceSeconds
						yym2641 := z.EncBinary()
						_ = yym2641
						if false {
						} else {
							r.EncodeInt(int64(yy2640))
						}
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				if yyq2621[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2643 := z.EncBinary()
						_ = yym2643
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2643 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2643 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2621[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2644 := z.EncBinary()
						_ = yym2644
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2644 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2644 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				if yyq2621[7] {
					yym2646 := z.EncBinary()
					_ = yym2646
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2621[7] {
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					yym2647 := z.EncBinary()
					_ = yym2647
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				if yyq2621[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2649 := *x.TailLines
						yym2650 := z.EncBinary()
						_ = yym2650
						if false {
						} else {
							r.EncodeInt(int64(yy2649))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2621[8] {
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2651 := *x.TailLines
						yym2652 := z.EncBinary()
						_ = yym2652
						if false {
						} else {
							r.EncodeInt(int64(yy2651))
						}
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				if yyq2621[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2654 := *x.LimitBytes
						yym2655 := z.EncBinary()
						_ = yym2655
						if false {
						} else {
							r.EncodeInt(int64(yy2654))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2621[9] {
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2656 := *x.LimitBytes
						yym2657 := z.EncBinary()
						_ = yym2657
						if false {
						} else {
							r.EncodeInt(int64(yy2656))
						}
					}
				}
			}
			if yysep2621 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2658 := z.DecBinary()
	_ = yym2658
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2659 := r.ReadMapStart()
			if yyl2659 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2659, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2659 := r.ReadArrayStart()
			if yyl2659 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2659, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2660Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2660Slc
	var yyhl2660 bool = l >= 0
	for yyj2660 := 0; ; yyj2660++ {
		if yyhl2660 {
			if yyj2660 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2660Slc = r.DecodeBytes(yys2660Slc, true, true)
		yys2660 := string(yys2660Slc)
		switch yys2660 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2667 := z.DecBinary()
				_ = yym2667
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2669 := z.DecBinary()
				_ = yym2669
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2669 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2669 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2672 := z.DecBinary()
				_ = yym2672
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2674 := z.DecBinary()
				_ = yym2674
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2660)
		} // end switch yys2660
	} // end for yyj2660
	if !yyhl2660 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2675 int
	var yyb2675 bool
	var yyhl2675 bool = l >= 0
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2682 := z.DecBinary()
		_ = yym2682
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2684 := z.DecBinary()
		_ = yym2684
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2684 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2684 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2687 := z.DecBinary()
		_ = yym2687
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2689 := z.DecBinary()
		_ = yym2689
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2675++
		if yyhl2675 {
			yyb2675 = yyj2675 > l
		} else {
			yyb2675 = r.CheckBreak()
		}
		if yyb2675 {
			break
		}
		z.DecStructFieldNotFound(yyj2675-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2690 := z.EncBinary()
		_ = yym2690
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2691 := !z.EncBinary()
			yy2arr2691 := z.EncBasicHandle().StructToArray
			var yyq2691 [7]bool
			_, _, _ = yysep2691, yyq2691, yy2arr2691
			const yyr2691 bool = false
			yyq2691[0] = x.Kind != ""
			yyq2691[1] = x.APIVersion != ""
			yyq2691[2] = x.Stdin != false
			yyq2691[3] = x.Stdout != false
			yyq2691[4] = x.Stderr != false
			yyq2691[5] = x.TTY != false
			yyq2691[6] = x.Container != ""
			if yyr2691 || yy2arr2691 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2691 int = 0
				for _, b := range yyq2691 {
					if b {
						yynn2691++
					}
				}
				r.EncodeMapStart(yynn2691)
			}
			if yyr2691 || yy2arr2691 {
				if yyq2691[0] {
					yym2693 := z.EncBinary()
					_ = yym2693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2691[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2694 := z.EncBinary()
					_ = yym2694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2691 || yy2arr2691 {
				if yyq2691[1] {
					yym2696 := z.EncBinary()
					_ = yym2696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2691[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2697 := z.EncBinary()
					_ = yym2697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2691 || yy2arr2691 {
				if yyq2691[2] {
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2691[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2700 := z.EncBinary()
					_ = yym2700
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2691 || yy2arr2691 {
				if yyq2691[3] {
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2691[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2703 := z.EncBinary()
					_ = yym2703
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2691 || yy2arr2691 {
				if yyq2691[4] {
					yym2705 := z.EncBinary()
					_ = yym2705
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2691[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2706 := z.EncBinary()
					_ = yym2706
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2691 || yy2arr2691 {
				if yyq2691[5] {
					yym2708 := z.EncBinary()
					_ = yym2708
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2691[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2709 := z.EncBinary()
					_ = yym2709
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2691 || yy2arr2691 {
				if yyq2691[6] {
					yym2711 := z.EncBinary()
					_ = yym2711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2691[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2712 := z.EncBinary()
					_ = yym2712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2691 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2713 := z.DecBinary()
	_ = yym2713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2714 := r.ReadMapStart()
			if yyl2714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2714, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2714 := r.ReadArrayStart()
			if yyl2714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2715Slc
	var yyhl2715 bool = l >= 0
	for yyj2715 := 0; ; yyj2715++ {
		if yyhl2715 {
			if yyj2715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2715Slc = r.DecodeBytes(yys2715Slc, true, true)
		yys2715 := string(yys2715Slc)
		switch yys2715 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2715)
		} // end switch yys2715
	} // end for yyj2715
	if !yyhl2715 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2723 int
	var yyb2723 bool
	var yyhl2723 bool = l >= 0
	yyj2723++
	if yyhl2723 {
		yyb2723 = yyj2723 > l
	} else {
		yyb2723 = r.CheckBreak()
	}
	if yyb2723 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2723++
	if yyhl2723 {
		yyb2723 = yyj2723 > l
	} else {
		yyb2723 = r.CheckBreak()
	}
	if yyb2723 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2723++
	if yyhl2723 {
		yyb2723 = yyj2723 > l
	} else {
		yyb2723 = r.CheckBreak()
	}
	if yyb2723 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2723++
	if yyhl2723 {
		yyb2723 = yyj2723 > l
	} else {
		yyb2723 = r.CheckBreak()
	}
	if yyb2723 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2723++
	if yyhl2723 {
		yyb2723 = yyj2723 > l
	} else {
		yyb2723 = r.CheckBreak()
	}
	if yyb2723 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2723++
	if yyhl2723 {
		yyb2723 = yyj2723 > l
	} else {
		yyb2723 = r.CheckBreak()
	}
	if yyb2723 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2723++
	if yyhl2723 {
		yyb2723 = yyj2723 > l
	} else {
		yyb2723 = r.CheckBreak()
	}
	if yyb2723 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2723++
		if yyhl2723 {
			yyb2723 = yyj2723 > l
		} else {
			yyb2723 = r.CheckBreak()
		}
		if yyb2723 {
			break
		}
		z.DecStructFieldNotFound(yyj2723-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2731 := z.EncBinary()
		_ = yym2731
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2732 := !z.EncBinary()
			yy2arr2732 := z.EncBasicHandle().StructToArray
			var yyq2732 [8]bool
			_, _, _ = yysep2732, yyq2732, yy2arr2732
			const yyr2732 bool = false
			yyq2732[0] = x.Kind != ""
			yyq2732[1] = x.APIVersion != ""
			yyq2732[2] = x.Stdin != false
			yyq2732[3] = x.Stdout != false
			yyq2732[4] = x.Stderr != false
			yyq2732[5] = x.TTY != false
			yyq2732[6] = x.Container != ""
			if yyr2732 || yy2arr2732 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2732 int = 1
				for _, b := range yyq2732 {
					if b {
						yynn2732++
					}
				}
				r.EncodeMapStart(yynn2732)
			}
			if yyr2732 || yy2arr2732 {
				if yyq2732[0] {
					yym2734 := z.EncBinary()
					_ = yym2734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2732[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				if yyq2732[1] {
					yym2737 := z.EncBinary()
					_ = yym2737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2732[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				if yyq2732[2] {
					yym2740 := z.EncBinary()
					_ = yym2740
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2732[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2741 := z.EncBinary()
					_ = yym2741
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				if yyq2732[3] {
					yym2743 := z.EncBinary()
					_ = yym2743
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2732[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2744 := z.EncBinary()
					_ = yym2744
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				if yyq2732[4] {
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2732[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2747 := z.EncBinary()
					_ = yym2747
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				if yyq2732[5] {
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2732[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2750 := z.EncBinary()
					_ = yym2750
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				if yyq2732[6] {
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2732[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2753 := z.EncBinary()
					_ = yym2753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2732 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2757 := z.DecBinary()
	_ = yym2757
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2758 := r.ReadMapStart()
			if yyl2758 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2758, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2758 := r.ReadArrayStart()
			if yyl2758 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2758, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2759Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2759Slc
	var yyhl2759 bool = l >= 0
	for yyj2759 := 0; ; yyj2759++ {
		if yyhl2759 {
			if yyj2759 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2759Slc = r.DecodeBytes(yys2759Slc, true, true)
		yys2759 := string(yys2759Slc)
		switch yys2759 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2767 := &x.Command
				yym2768 := z.DecBinary()
				_ = yym2768
				if false {
				} else {
					z.F.DecSliceStringX(yyv2767, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2759)
		} // end switch yys2759
	} // end for yyj2759
	if !yyhl2759 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2769 int
	var yyb2769 bool
	var yyhl2769 bool = l >= 0
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2777 := &x.Command
		yym2778 := z.DecBinary()
		_ = yym2778
		if false {
		} else {
			z.F.DecSliceStringX(yyv2777, false, d)
		}
	}
	for {
		yyj2769++
		if yyhl2769 {
			yyb2769 = yyj2769 > l
		} else {
			yyb2769 = r.CheckBreak()
		}
		if yyb2769 {
			break
		}
		z.DecStructFieldNotFound(yyj2769-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2779 := z.EncBinary()
		_ = yym2779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2780 := !z.EncBinary()
			yy2arr2780 := z.EncBasicHandle().StructToArray
			var yyq2780 [3]bool
			_, _, _ = yysep2780, yyq2780, yy2arr2780
			const yyr2780 bool = false
			yyq2780[0] = x.Kind != ""
			yyq2780[1] = x.APIVersion != ""
			yyq2780[2] = x.Path != ""
			if yyr2780 || yy2arr2780 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2780 int = 0
				for _, b := range yyq2780 {
					if b {
						yynn2780++
					}
				}
				r.EncodeMapStart(yynn2780)
			}
			if yyr2780 || yy2arr2780 {
				if yyq2780[0] {
					yym2782 := z.EncBinary()
					_ = yym2782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2780[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2783 := z.EncBinary()
					_ = yym2783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2780 || yy2arr2780 {
				if yyq2780[1] {
					yym2785 := z.EncBinary()
					_ = yym2785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2780[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2786 := z.EncBinary()
					_ = yym2786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2780 || yy2arr2780 {
				if yyq2780[2] {
					yym2788 := z.EncBinary()
					_ = yym2788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2780[2] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym2789 := z.EncBinary()
					_ = yym2789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yysep2780 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2790 := z.DecBinary()
	_ = yym2790
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2791 := r.ReadMapStart()
			if yyl2791 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2791, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2791 := r.ReadArrayStart()
			if yyl2791 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2791, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2792Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2792Slc
	var yyhl2792 bool = l >= 0
	for yyj2792 := 0; ; yyj2792++ {
		if yyhl2792 {
			if yyj2792 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2792Slc = r.DecodeBytes(yys2792Slc, true, true)
		yys2792 := string(yys2792Slc)
		switch yys2792 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2792)
		} // end switch yys2792
	} // end for yyj2792
	if !yyhl2792 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2796 int
	var yyb2796 bool
	var yyhl2796 bool = l >= 0
	yyj2796++
	if yyhl2796 {
		yyb2796 = yyj2796 > l
	} else {
		yyb2796 = r.CheckBreak()
	}
	if yyb2796 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2796++
	if yyhl2796 {
		yyb2796 = yyj2796 > l
	} else {
		yyb2796 = r.CheckBreak()
	}
	if yyb2796 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2796++
	if yyhl2796 {
		yyb2796 = yyj2796 > l
	} else {
		yyb2796 = r.CheckBreak()
	}
	if yyb2796 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2796++
		if yyhl2796 {
			yyb2796 = yyj2796 > l
		} else {
			yyb2796 = r.CheckBreak()
		}
		if yyb2796 {
			break
		}
		z.DecStructFieldNotFound(yyj2796-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2800 := z.EncBinary()
		_ = yym2800
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2801 := !z.EncBinary()
			yy2arr2801 := z.EncBasicHandle().StructToArray
			var yyq2801 [7]bool
			_, _, _ = yysep2801, yyq2801, yy2arr2801
			const yyr2801 bool = false
			yyq2801[0] = x.Kind != ""
			yyq2801[1] = x.Namespace != ""
			yyq2801[2] = x.Name != ""
			yyq2801[3] = x.UID != ""
			yyq2801[4] = x.APIVersion != ""
			yyq2801[5] = x.ResourceVersion != ""
			yyq2801[6] = x.FieldPath != ""
			if yyr2801 || yy2arr2801 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2801 int = 0
				for _, b := range yyq2801 {
					if b {
						yynn2801++
					}
				}
				r.EncodeMapStart(yynn2801)
			}
			if yyr2801 || yy2arr2801 {
				if yyq2801[0] {
					yym2803 := z.EncBinary()
					_ = yym2803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2804 := z.EncBinary()
					_ = yym2804
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				if yyq2801[1] {
					yym2806 := z.EncBinary()
					_ = yym2806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym2807 := z.EncBinary()
					_ = yym2807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				if yyq2801[2] {
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2810 := z.EncBinary()
					_ = yym2810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				if yyq2801[3] {
					yym2812 := z.EncBinary()
					_ = yym2812
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[3] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym2813 := z.EncBinary()
					_ = yym2813
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				if yyq2801[4] {
					yym2815 := z.EncBinary()
					_ = yym2815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[4] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2816 := z.EncBinary()
					_ = yym2816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				if yyq2801[5] {
					yym2818 := z.EncBinary()
					_ = yym2818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2819 := z.EncBinary()
					_ = yym2819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				if yyq2801[6] {
					yym2821 := z.EncBinary()
					_ = yym2821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[6] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym2822 := z.EncBinary()
					_ = yym2822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2801 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2823 := z.DecBinary()
	_ = yym2823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2824 := r.ReadMapStart()
			if yyl2824 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2824, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2824 := r.ReadArrayStart()
			if yyl2824 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2825Slc
	var yyhl2825 bool = l >= 0
	for yyj2825 := 0; ; yyj2825++ {
		if yyhl2825 {
			if yyj2825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2825Slc = r.DecodeBytes(yys2825Slc, true, true)
		yys2825 := string(yys2825Slc)
		switch yys2825 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2825)
		} // end switch yys2825
	} // end for yyj2825
	if !yyhl2825 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2833 int
	var yyb2833 bool
	var yyhl2833 bool = l >= 0
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2833++
		if yyhl2833 {
			yyb2833 = yyj2833 > l
		} else {
			yyb2833 = r.CheckBreak()
		}
		if yyb2833 {
			break
		}
		z.DecStructFieldNotFound(yyj2833-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2841 := z.EncBinary()
		_ = yym2841
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2842 := !z.EncBinary()
			yy2arr2842 := z.EncBasicHandle().StructToArray
			var yyq2842 [1]bool
			_, _, _ = yysep2842, yyq2842, yy2arr2842
			const yyr2842 bool = false
			yyq2842[0] = x.Name != ""
			if yyr2842 || yy2arr2842 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2842 int = 0
				for _, b := range yyq2842 {
					if b {
						yynn2842++
					}
				}
				r.EncodeMapStart(yynn2842)
			}
			if yyr2842 || yy2arr2842 {
				if yyq2842[0] {
					yym2844 := z.EncBinary()
					_ = yym2844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2842[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yysep2842 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2846 := z.DecBinary()
	_ = yym2846
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2847 := r.ReadMapStart()
			if yyl2847 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2847, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2847 := r.ReadArrayStart()
			if yyl2847 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2847, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2848Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2848Slc
	var yyhl2848 bool = l >= 0
	for yyj2848 := 0; ; yyj2848++ {
		if yyhl2848 {
			if yyj2848 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2848Slc = r.DecodeBytes(yys2848Slc, true, true)
		yys2848 := string(yys2848Slc)
		switch yys2848 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2848)
		} // end switch yys2848
	} // end for yyj2848
	if !yyhl2848 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2850 int
	var yyb2850 bool
	var yyhl2850 bool = l >= 0
	yyj2850++
	if yyhl2850 {
		yyb2850 = yyj2850 > l
	} else {
		yyb2850 = r.CheckBreak()
	}
	if yyb2850 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2850++
		if yyhl2850 {
			yyb2850 = yyj2850 > l
		} else {
			yyb2850 = r.CheckBreak()
		}
		if yyb2850 {
			break
		}
		z.DecStructFieldNotFound(yyj2850-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2852 := z.EncBinary()
		_ = yym2852
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2853 := !z.EncBinary()
			yy2arr2853 := z.EncBasicHandle().StructToArray
			var yyq2853 [3]bool
			_, _, _ = yysep2853, yyq2853, yy2arr2853
			const yyr2853 bool = false
			yyq2853[0] = x.Kind != ""
			yyq2853[1] = x.APIVersion != ""
			yyq2853[2] = true
			if yyr2853 || yy2arr2853 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2853 int = 0
				for _, b := range yyq2853 {
					if b {
						yynn2853++
					}
				}
				r.EncodeMapStart(yynn2853)
			}
			if yyr2853 || yy2arr2853 {
				if yyq2853[0] {
					yym2855 := z.EncBinary()
					_ = yym2855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2853[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2856 := z.EncBinary()
					_ = yym2856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2853 || yy2arr2853 {
				if yyq2853[1] {
					yym2858 := z.EncBinary()
					_ = yym2858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2853[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2859 := z.EncBinary()
					_ = yym2859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2853 || yy2arr2853 {
				if yyq2853[2] {
					yy2861 := &x.Reference
					yy2861.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2853[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy2862 := &x.Reference
					yy2862.CodecEncodeSelf(e)
				}
			}
			if yysep2853 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2863 := z.DecBinary()
	_ = yym2863
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2864 := r.ReadMapStart()
			if yyl2864 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2864, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2864 := r.ReadArrayStart()
			if yyl2864 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2864, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2865Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2865Slc
	var yyhl2865 bool = l >= 0
	for yyj2865 := 0; ; yyj2865++ {
		if yyhl2865 {
			if yyj2865 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2865Slc = r.DecodeBytes(yys2865Slc, true, true)
		yys2865 := string(yys2865Slc)
		switch yys2865 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2868 := &x.Reference
				yyv2868.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2865)
		} // end switch yys2865
	} // end for yyj2865
	if !yyhl2865 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2869 int
	var yyb2869 bool
	var yyhl2869 bool = l >= 0
	yyj2869++
	if yyhl2869 {
		yyb2869 = yyj2869 > l
	} else {
		yyb2869 = r.CheckBreak()
	}
	if yyb2869 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2869++
	if yyhl2869 {
		yyb2869 = yyj2869 > l
	} else {
		yyb2869 = r.CheckBreak()
	}
	if yyb2869 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2869++
	if yyhl2869 {
		yyb2869 = yyj2869 > l
	} else {
		yyb2869 = r.CheckBreak()
	}
	if yyb2869 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2872 := &x.Reference
		yyv2872.CodecDecodeSelf(d)
	}
	for {
		yyj2869++
		if yyhl2869 {
			yyb2869 = yyj2869 > l
		} else {
			yyb2869 = r.CheckBreak()
		}
		if yyb2869 {
			break
		}
		z.DecStructFieldNotFound(yyj2869-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2873 := z.EncBinary()
		_ = yym2873
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2874 := !z.EncBinary()
			yy2arr2874 := z.EncBasicHandle().StructToArray
			var yyq2874 [2]bool
			_, _, _ = yysep2874, yyq2874, yy2arr2874
			const yyr2874 bool = false
			yyq2874[0] = x.Component != ""
			yyq2874[1] = x.Host != ""
			if yyr2874 || yy2arr2874 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2874 int = 0
				for _, b := range yyq2874 {
					if b {
						yynn2874++
					}
				}
				r.EncodeMapStart(yynn2874)
			}
			if yyr2874 || yy2arr2874 {
				if yyq2874[0] {
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2874[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym2877 := z.EncBinary()
					_ = yym2877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2874 || yy2arr2874 {
				if yyq2874[1] {
					yym2879 := z.EncBinary()
					_ = yym2879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2874[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym2880 := z.EncBinary()
					_ = yym2880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep2874 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2881 := z.DecBinary()
	_ = yym2881
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2882 := r.ReadMapStart()
			if yyl2882 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2882, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2882 := r.ReadArrayStart()
			if yyl2882 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2882, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2883Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2883Slc
	var yyhl2883 bool = l >= 0
	for yyj2883 := 0; ; yyj2883++ {
		if yyhl2883 {
			if yyj2883 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2883Slc = r.DecodeBytes(yys2883Slc, true, true)
		yys2883 := string(yys2883Slc)
		switch yys2883 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2883)
		} // end switch yys2883
	} // end for yyj2883
	if !yyhl2883 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2886 int
	var yyb2886 bool
	var yyhl2886 bool = l >= 0
	yyj2886++
	if yyhl2886 {
		yyb2886 = yyj2886 > l
	} else {
		yyb2886 = r.CheckBreak()
	}
	if yyb2886 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2886++
	if yyhl2886 {
		yyb2886 = yyj2886 > l
	} else {
		yyb2886 = r.CheckBreak()
	}
	if yyb2886 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2886++
		if yyhl2886 {
			yyb2886 = yyj2886 > l
		} else {
			yyb2886 = r.CheckBreak()
		}
		if yyb2886 {
			break
		}
		z.DecStructFieldNotFound(yyj2886-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2889 := z.EncBinary()
		_ = yym2889
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2890 := !z.EncBinary()
			yy2arr2890 := z.EncBasicHandle().StructToArray
			var yyq2890 [10]bool
			_, _, _ = yysep2890, yyq2890, yy2arr2890
			const yyr2890 bool = false
			yyq2890[0] = x.Kind != ""
			yyq2890[1] = x.APIVersion != ""
			yyq2890[4] = x.Reason != ""
			yyq2890[5] = x.Message != ""
			yyq2890[6] = true
			yyq2890[7] = true
			yyq2890[8] = true
			yyq2890[9] = x.Count != 0
			if yyr2890 || yy2arr2890 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2890 int = 2
				for _, b := range yyq2890 {
					if b {
						yynn2890++
					}
				}
				r.EncodeMapStart(yynn2890)
			}
			if yyr2890 || yy2arr2890 {
				if yyq2890[0] {
					yym2892 := z.EncBinary()
					_ = yym2892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2890[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2893 := z.EncBinary()
					_ = yym2893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2890 || yy2arr2890 {
				if yyq2890[1] {
					yym2895 := z.EncBinary()
					_ = yym2895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2890[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2896 := z.EncBinary()
					_ = yym2896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2890 || yy2arr2890 {
				yy2898 := &x.ObjectMeta
				yy2898.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				yy2899 := &x.ObjectMeta
				yy2899.CodecEncodeSelf(e)
			}
			if yyr2890 || yy2arr2890 {
				yy2901 := &x.InvolvedObject
				yy2901.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				yy2902 := &x.InvolvedObject
				yy2902.CodecEncodeSelf(e)
			}
			if yyr2890 || yy2arr2890 {
				if yyq2890[4] {
					yym2904 := z.EncBinary()
					_ = yym2904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2890[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2905 := z.EncBinary()
					_ = yym2905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2890 || yy2arr2890 {
				if yyq2890[5] {
					yym2907 := z.EncBinary()
					_ = yym2907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2890[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2908 := z.EncBinary()
					_ = yym2908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2890 || yy2arr2890 {
				if yyq2890[6] {
					yy2910 := &x.Source
					yy2910.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2890[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy2911 := &x.Source
					yy2911.CodecEncodeSelf(e)
				}
			}
			if yyr2890 || yy2arr2890 {
				if yyq2890[7] {
					yy2913 := &x.FirstTimestamp
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2913) {
					} else if yym2914 {
						z.EncBinaryMarshal(yy2913)
					} else if !yym2914 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2913)
					} else {
						z.EncFallback(yy2913)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2890[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy2915 := &x.FirstTimestamp
					yym2916 := z.EncBinary()
					_ = yym2916
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2915) {
					} else if yym2916 {
						z.EncBinaryMarshal(yy2915)
					} else if !yym2916 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2915)
					} else {
						z.EncFallback(yy2915)
					}
				}
			}
			if yyr2890 || yy2arr2890 {
				if yyq2890[8] {
					yy2918 := &x.LastTimestamp
					yym2919 := z.EncBinary()
					_ = yym2919
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2918) {
					} else if yym2919 {
						z.EncBinaryMarshal(yy2918)
					} else if !yym2919 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2918)
					} else {
						z.EncFallback(yy2918)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2890[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy2920 := &x.LastTimestamp
					yym2921 := z.EncBinary()
					_ = yym2921
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2920) {
					} else if yym2921 {
						z.EncBinaryMarshal(yy2920)
					} else if !yym2921 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2920)
					} else {
						z.EncFallback(yy2920)
					}
				}
			}
			if yyr2890 || yy2arr2890 {
				if yyq2890[9] {
					yym2923 := z.EncBinary()
					_ = yym2923
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2890[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep2890 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2925 := z.DecBinary()
	_ = yym2925
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2926 := r.ReadMapStart()
			if yyl2926 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2926, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2926 := r.ReadArrayStart()
			if yyl2926 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2926, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2927Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2927Slc
	var yyhl2927 bool = l >= 0
	for yyj2927 := 0; ; yyj2927++ {
		if yyhl2927 {
			if yyj2927 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2927Slc = r.DecodeBytes(yys2927Slc, true, true)
		yys2927 := string(yys2927Slc)
		switch yys2927 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2930 := &x.ObjectMeta
				yyv2930.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2931 := &x.InvolvedObject
				yyv2931.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2934 := &x.Source
				yyv2934.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2935 := &x.FirstTimestamp
				yym2936 := z.DecBinary()
				_ = yym2936
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2935) {
				} else if yym2936 {
					z.DecBinaryUnmarshal(yyv2935)
				} else if !yym2936 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2935)
				} else {
					z.DecFallback(yyv2935, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2937 := &x.LastTimestamp
				yym2938 := z.DecBinary()
				_ = yym2938
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2937) {
				} else if yym2938 {
					z.DecBinaryUnmarshal(yyv2937)
				} else if !yym2938 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2937)
				} else {
					z.DecFallback(yyv2937, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2927)
		} // end switch yys2927
	} // end for yyj2927
	if !yyhl2927 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2940 int
	var yyb2940 bool
	var yyhl2940 bool = l >= 0
	yyj2940++
	if yyhl2940 {
		yyb2940 = yyj2940 > l
	} else {
		yyb2940 = r.CheckBreak()
	}
	if yyb2940 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2940++
	if yyhl2940 {
		yyb2940 = yyj2940 > l
	} else {
		yyb2940 = r.CheckBreak()
	}
	if yyb2940 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2940++
	if yyhl2940 {
		yyb2940 = yyj2940 > l
	} else {
		yyb2940 = r.CheckBreak()
	}
	if yyb2940 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2943 := &x.ObjectMeta
		yyv2943.CodecDecodeSelf(d)
	}
	yyj2940++
	if yyhl2940 {
		yyb2940 = yyj2940 > l
	} else {
		yyb2940 = r.CheckBreak()
	}
	if yyb2940 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2944 := &x.InvolvedObject
		yyv2944.CodecDecodeSelf(d)
	}
	yyj2940++
	if yyhl2940 {
		yyb2940 = yyj2940 > l
	} else {
		yyb2940 = r.CheckBreak()
	}
	if yyb2940 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2940++
	if yyhl2940 {
		yyb2940 = yyj2940 > l
	} else {
		yyb2940 = r.CheckBreak()
	}
	if yyb2940 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2940++
	if yyhl2940 {
		yyb2940 = yyj2940 > l
	} else {
		yyb2940 = r.CheckBreak()
	}
	if yyb2940 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2947 := &x.Source
		yyv2947.CodecDecodeSelf(d)
	}
	yyj2940++
	if yyhl2940 {
		yyb2940 = yyj2940 > l
	} else {
		yyb2940 = r.CheckBreak()
	}
	if yyb2940 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2948 := &x.FirstTimestamp
		yym2949 := z.DecBinary()
		_ = yym2949
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2948) {
		} else if yym2949 {
			z.DecBinaryUnmarshal(yyv2948)
		} else if !yym2949 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2948)
		} else {
			z.DecFallback(yyv2948, false)
		}
	}
	yyj2940++
	if yyhl2940 {
		yyb2940 = yyj2940 > l
	} else {
		yyb2940 = r.CheckBreak()
	}
	if yyb2940 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2950 := &x.LastTimestamp
		yym2951 := z.DecBinary()
		_ = yym2951
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2950) {
		} else if yym2951 {
			z.DecBinaryUnmarshal(yyv2950)
		} else if !yym2951 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2950)
		} else {
			z.DecFallback(yyv2950, false)
		}
	}
	yyj2940++
	if yyhl2940 {
		yyb2940 = yyj2940 > l
	} else {
		yyb2940 = r.CheckBreak()
	}
	if yyb2940 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2940++
		if yyhl2940 {
			yyb2940 = yyj2940 > l
		} else {
			yyb2940 = r.CheckBreak()
		}
		if yyb2940 {
			break
		}
		z.DecStructFieldNotFound(yyj2940-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2953 := z.EncBinary()
		_ = yym2953
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2954 := !z.EncBinary()
			yy2arr2954 := z.EncBasicHandle().StructToArray
			var yyq2954 [4]bool
			_, _, _ = yysep2954, yyq2954, yy2arr2954
			const yyr2954 bool = false
			yyq2954[0] = x.Kind != ""
			yyq2954[1] = x.APIVersion != ""
			yyq2954[2] = true
			if yyr2954 || yy2arr2954 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2954 int = 1
				for _, b := range yyq2954 {
					if b {
						yynn2954++
					}
				}
				r.EncodeMapStart(yynn2954)
			}
			if yyr2954 || yy2arr2954 {
				if yyq2954[0] {
					yym2956 := z.EncBinary()
					_ = yym2956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2954[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2957 := z.EncBinary()
					_ = yym2957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				if yyq2954[1] {
					yym2959 := z.EncBinary()
					_ = yym2959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2954[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2960 := z.EncBinary()
					_ = yym2960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				if yyq2954[2] {
					yy2962 := &x.ListMeta
					yym2963 := z.EncBinary()
					_ = yym2963
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2962) {
					} else {
						z.EncFallback(yy2962)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2954[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2964 := &x.ListMeta
					yym2965 := z.EncBinary()
					_ = yym2965
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2964) {
					} else {
						z.EncFallback(yy2964)
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2967 := z.EncBinary()
					_ = yym2967
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2968 := z.EncBinary()
					_ = yym2968
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep2954 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2969 := z.DecBinary()
	_ = yym2969
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2970 := r.ReadMapStart()
			if yyl2970 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2970, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2970 := r.ReadArrayStart()
			if yyl2970 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2970, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2971Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2971Slc
	var yyhl2971 bool = l >= 0
	for yyj2971 := 0; ; yyj2971++ {
		if yyhl2971 {
			if yyj2971 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2971Slc = r.DecodeBytes(yys2971Slc, true, true)
		yys2971 := string(yys2971Slc)
		switch yys2971 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2974 := &x.ListMeta
				yym2975 := z.DecBinary()
				_ = yym2975
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2974) {
				} else {
					z.DecFallback(yyv2974, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2976 := &x.Items
				yym2977 := z.DecBinary()
				_ = yym2977
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv2976), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2971)
		} // end switch yys2971
	} // end for yyj2971
	if !yyhl2971 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2978 int
	var yyb2978 bool
	var yyhl2978 bool = l >= 0
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2981 := &x.ListMeta
		yym2982 := z.DecBinary()
		_ = yym2982
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2981) {
		} else {
			z.DecFallback(yyv2981, false)
		}
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2983 := &x.Items
		yym2984 := z.DecBinary()
		_ = yym2984
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv2983), d)
		}
	}
	for {
		yyj2978++
		if yyhl2978 {
			yyb2978 = yyj2978 > l
		} else {
			yyb2978 = r.CheckBreak()
		}
		if yyb2978 {
			break
		}
		z.DecStructFieldNotFound(yyj2978-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2985 := z.EncBinary()
		_ = yym2985
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2986 := !z.EncBinary()
			yy2arr2986 := z.EncBasicHandle().StructToArray
			var yyq2986 [4]bool
			_, _, _ = yysep2986, yyq2986, yy2arr2986
			const yyr2986 bool = false
			yyq2986[0] = x.Kind != ""
			yyq2986[1] = x.APIVersion != ""
			yyq2986[2] = true
			if yyr2986 || yy2arr2986 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2986 int = 1
				for _, b := range yyq2986 {
					if b {
						yynn2986++
					}
				}
				r.EncodeMapStart(yynn2986)
			}
			if yyr2986 || yy2arr2986 {
				if yyq2986[0] {
					yym2988 := z.EncBinary()
					_ = yym2988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2986[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2989 := z.EncBinary()
					_ = yym2989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2986 || yy2arr2986 {
				if yyq2986[1] {
					yym2991 := z.EncBinary()
					_ = yym2991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2986[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2992 := z.EncBinary()
					_ = yym2992
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2986 || yy2arr2986 {
				if yyq2986[2] {
					yy2994 := &x.ListMeta
					yym2995 := z.EncBinary()
					_ = yym2995
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2994) {
					} else {
						z.EncFallback(yy2994)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2986[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2996 := &x.ListMeta
					yym2997 := z.EncBinary()
					_ = yym2997
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2996) {
					} else {
						z.EncFallback(yy2996)
					}
				}
			}
			if yyr2986 || yy2arr2986 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2999 := z.EncBinary()
					_ = yym2999
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3000 := z.EncBinary()
					_ = yym3000
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yysep2986 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3001 := z.DecBinary()
	_ = yym3001
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3002 := r.ReadMapStart()
			if yyl3002 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3002, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3002 := r.ReadArrayStart()
			if yyl3002 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3002, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3003Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3003Slc
	var yyhl3003 bool = l >= 0
	for yyj3003 := 0; ; yyj3003++ {
		if yyhl3003 {
			if yyj3003 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3003Slc = r.DecodeBytes(yys3003Slc, true, true)
		yys3003 := string(yys3003Slc)
		switch yys3003 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3006 := &x.ListMeta
				yym3007 := z.DecBinary()
				_ = yym3007
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3006) {
				} else {
					z.DecFallback(yyv3006, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3008 := &x.Items
				yym3009 := z.DecBinary()
				_ = yym3009
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3008), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3003)
		} // end switch yys3003
	} // end for yyj3003
	if !yyhl3003 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3010 int
	var yyb3010 bool
	var yyhl3010 bool = l >= 0
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3013 := &x.ListMeta
		yym3014 := z.DecBinary()
		_ = yym3014
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3013) {
		} else {
			z.DecFallback(yyv3013, false)
		}
	}
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3015 := &x.Items
		yym3016 := z.DecBinary()
		_ = yym3016
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3015), d)
		}
	}
	for {
		yyj3010++
		if yyhl3010 {
			yyb3010 = yyj3010 > l
		} else {
			yyb3010 = r.CheckBreak()
		}
		if yyb3010 {
			break
		}
		z.DecStructFieldNotFound(yyj3010-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3017 := z.EncBinary()
	_ = yym3017
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3018 := z.DecBinary()
	_ = yym3018
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3019 := z.EncBinary()
		_ = yym3019
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3020 := !z.EncBinary()
			yy2arr3020 := z.EncBasicHandle().StructToArray
			var yyq3020 [6]bool
			_, _, _ = yysep3020, yyq3020, yy2arr3020
			const yyr3020 bool = false
			yyq3020[0] = x.Type != ""
			yyq3020[1] = len(x.Max) != 0
			yyq3020[2] = len(x.Min) != 0
			yyq3020[3] = len(x.Default) != 0
			yyq3020[4] = len(x.DefaultRequest) != 0
			yyq3020[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr3020 || yy2arr3020 {
				r.EncodeArrayStart(6)
			} else {
				var yynn3020 int = 0
				for _, b := range yyq3020 {
					if b {
						yynn3020++
					}
				}
				r.EncodeMapStart(yynn3020)
			}
			if yyr3020 || yy2arr3020 {
				if yyq3020[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3020[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3020 || yy2arr3020 {
				if yyq3020[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3020[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3020 || yy2arr3020 {
				if yyq3020[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3020[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3020 || yy2arr3020 {
				if yyq3020[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3020[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3020 || yy2arr3020 {
				if yyq3020[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3020[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3020 || yy2arr3020 {
				if yyq3020[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3020[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3020 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3027 := z.DecBinary()
	_ = yym3027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3028 := r.ReadMapStart()
			if yyl3028 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3028, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3028 := r.ReadArrayStart()
			if yyl3028 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3029Slc
	var yyhl3029 bool = l >= 0
	for yyj3029 := 0; ; yyj3029++ {
		if yyhl3029 {
			if yyj3029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3029Slc = r.DecodeBytes(yys3029Slc, true, true)
		yys3029 := string(yys3029Slc)
		switch yys3029 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3031 := &x.Max
				yyv3031.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3032 := &x.Min
				yyv3032.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3033 := &x.Default
				yyv3033.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3034 := &x.DefaultRequest
				yyv3034.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3035 := &x.MaxLimitRequestRatio
				yyv3035.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3029)
		} // end switch yys3029
	} // end for yyj3029
	if !yyhl3029 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3036 int
	var yyb3036 bool
	var yyhl3036 bool = l >= 0
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3038 := &x.Max
		yyv3038.CodecDecodeSelf(d)
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3039 := &x.Min
		yyv3039.CodecDecodeSelf(d)
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3040 := &x.Default
		yyv3040.CodecDecodeSelf(d)
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3041 := &x.DefaultRequest
		yyv3041.CodecDecodeSelf(d)
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3042 := &x.MaxLimitRequestRatio
		yyv3042.CodecDecodeSelf(d)
	}
	for {
		yyj3036++
		if yyhl3036 {
			yyb3036 = yyj3036 > l
		} else {
			yyb3036 = r.CheckBreak()
		}
		if yyb3036 {
			break
		}
		z.DecStructFieldNotFound(yyj3036-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3043 := z.EncBinary()
		_ = yym3043
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3044 := !z.EncBinary()
			yy2arr3044 := z.EncBasicHandle().StructToArray
			var yyq3044 [1]bool
			_, _, _ = yysep3044, yyq3044, yy2arr3044
			const yyr3044 bool = false
			if yyr3044 || yy2arr3044 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3044 int = 1
				for _, b := range yyq3044 {
					if b {
						yynn3044++
					}
				}
				r.EncodeMapStart(yynn3044)
			}
			if yyr3044 || yy2arr3044 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3046 := z.EncBinary()
					_ = yym3046
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3047 := z.EncBinary()
					_ = yym3047
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep3044 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3048 := z.DecBinary()
	_ = yym3048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3049 := r.ReadMapStart()
			if yyl3049 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3049, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3049 := r.ReadArrayStart()
			if yyl3049 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3050Slc
	var yyhl3050 bool = l >= 0
	for yyj3050 := 0; ; yyj3050++ {
		if yyhl3050 {
			if yyj3050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3050Slc = r.DecodeBytes(yys3050Slc, true, true)
		yys3050 := string(yys3050Slc)
		switch yys3050 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3051 := &x.Limits
				yym3052 := z.DecBinary()
				_ = yym3052
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3051), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3050)
		} // end switch yys3050
	} // end for yyj3050
	if !yyhl3050 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3053 int
	var yyb3053 bool
	var yyhl3053 bool = l >= 0
	yyj3053++
	if yyhl3053 {
		yyb3053 = yyj3053 > l
	} else {
		yyb3053 = r.CheckBreak()
	}
	if yyb3053 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3054 := &x.Limits
		yym3055 := z.DecBinary()
		_ = yym3055
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3054), d)
		}
	}
	for {
		yyj3053++
		if yyhl3053 {
			yyb3053 = yyj3053 > l
		} else {
			yyb3053 = r.CheckBreak()
		}
		if yyb3053 {
			break
		}
		z.DecStructFieldNotFound(yyj3053-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3056 := z.EncBinary()
		_ = yym3056
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3057 := !z.EncBinary()
			yy2arr3057 := z.EncBasicHandle().StructToArray
			var yyq3057 [4]bool
			_, _, _ = yysep3057, yyq3057, yy2arr3057
			const yyr3057 bool = false
			yyq3057[0] = x.Kind != ""
			yyq3057[1] = x.APIVersion != ""
			yyq3057[2] = true
			yyq3057[3] = true
			if yyr3057 || yy2arr3057 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3057 int = 0
				for _, b := range yyq3057 {
					if b {
						yynn3057++
					}
				}
				r.EncodeMapStart(yynn3057)
			}
			if yyr3057 || yy2arr3057 {
				if yyq3057[0] {
					yym3059 := z.EncBinary()
					_ = yym3059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3057[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3060 := z.EncBinary()
					_ = yym3060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3057 || yy2arr3057 {
				if yyq3057[1] {
					yym3062 := z.EncBinary()
					_ = yym3062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3057[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3063 := z.EncBinary()
					_ = yym3063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3057 || yy2arr3057 {
				if yyq3057[2] {
					yy3065 := &x.ObjectMeta
					yy3065.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3057[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3066 := &x.ObjectMeta
					yy3066.CodecEncodeSelf(e)
				}
			}
			if yyr3057 || yy2arr3057 {
				if yyq3057[3] {
					yy3068 := &x.Spec
					yy3068.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3057[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3069 := &x.Spec
					yy3069.CodecEncodeSelf(e)
				}
			}
			if yysep3057 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3070 := z.DecBinary()
	_ = yym3070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3071 := r.ReadMapStart()
			if yyl3071 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3071, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3071 := r.ReadArrayStart()
			if yyl3071 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3071, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3072Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3072Slc
	var yyhl3072 bool = l >= 0
	for yyj3072 := 0; ; yyj3072++ {
		if yyhl3072 {
			if yyj3072 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3072Slc = r.DecodeBytes(yys3072Slc, true, true)
		yys3072 := string(yys3072Slc)
		switch yys3072 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3075 := &x.ObjectMeta
				yyv3075.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3076 := &x.Spec
				yyv3076.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3072)
		} // end switch yys3072
	} // end for yyj3072
	if !yyhl3072 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3077 int
	var yyb3077 bool
	var yyhl3077 bool = l >= 0
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3080 := &x.ObjectMeta
		yyv3080.CodecDecodeSelf(d)
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3081 := &x.Spec
		yyv3081.CodecDecodeSelf(d)
	}
	for {
		yyj3077++
		if yyhl3077 {
			yyb3077 = yyj3077 > l
		} else {
			yyb3077 = r.CheckBreak()
		}
		if yyb3077 {
			break
		}
		z.DecStructFieldNotFound(yyj3077-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3082 := z.EncBinary()
		_ = yym3082
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3083 := !z.EncBinary()
			yy2arr3083 := z.EncBasicHandle().StructToArray
			var yyq3083 [4]bool
			_, _, _ = yysep3083, yyq3083, yy2arr3083
			const yyr3083 bool = false
			yyq3083[0] = x.Kind != ""
			yyq3083[1] = x.APIVersion != ""
			yyq3083[2] = true
			if yyr3083 || yy2arr3083 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3083 int = 1
				for _, b := range yyq3083 {
					if b {
						yynn3083++
					}
				}
				r.EncodeMapStart(yynn3083)
			}
			if yyr3083 || yy2arr3083 {
				if yyq3083[0] {
					yym3085 := z.EncBinary()
					_ = yym3085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3083[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3086 := z.EncBinary()
					_ = yym3086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3083 || yy2arr3083 {
				if yyq3083[1] {
					yym3088 := z.EncBinary()
					_ = yym3088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3083[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3089 := z.EncBinary()
					_ = yym3089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3083 || yy2arr3083 {
				if yyq3083[2] {
					yy3091 := &x.ListMeta
					yym3092 := z.EncBinary()
					_ = yym3092
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3091) {
					} else {
						z.EncFallback(yy3091)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3083[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3093 := &x.ListMeta
					yym3094 := z.EncBinary()
					_ = yym3094
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3093) {
					} else {
						z.EncFallback(yy3093)
					}
				}
			}
			if yyr3083 || yy2arr3083 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3096 := z.EncBinary()
					_ = yym3096
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3083 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3098 := z.DecBinary()
	_ = yym3098
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3099 := r.ReadMapStart()
			if yyl3099 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3099, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3099 := r.ReadArrayStart()
			if yyl3099 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3099, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3100Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3100Slc
	var yyhl3100 bool = l >= 0
	for yyj3100 := 0; ; yyj3100++ {
		if yyhl3100 {
			if yyj3100 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3100Slc = r.DecodeBytes(yys3100Slc, true, true)
		yys3100 := string(yys3100Slc)
		switch yys3100 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3103 := &x.ListMeta
				yym3104 := z.DecBinary()
				_ = yym3104
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3103) {
				} else {
					z.DecFallback(yyv3103, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3105 := &x.Items
				yym3106 := z.DecBinary()
				_ = yym3106
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3105), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3100)
		} // end switch yys3100
	} // end for yyj3100
	if !yyhl3100 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3107 int
	var yyb3107 bool
	var yyhl3107 bool = l >= 0
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3110 := &x.ListMeta
		yym3111 := z.DecBinary()
		_ = yym3111
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3110) {
		} else {
			z.DecFallback(yyv3110, false)
		}
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3112 := &x.Items
		yym3113 := z.DecBinary()
		_ = yym3113
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3112), d)
		}
	}
	for {
		yyj3107++
		if yyhl3107 {
			yyb3107 = yyj3107 > l
		} else {
			yyb3107 = r.CheckBreak()
		}
		if yyb3107 {
			break
		}
		z.DecStructFieldNotFound(yyj3107-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3114 := z.EncBinary()
		_ = yym3114
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3115 := !z.EncBinary()
			yy2arr3115 := z.EncBasicHandle().StructToArray
			var yyq3115 [1]bool
			_, _, _ = yysep3115, yyq3115, yy2arr3115
			const yyr3115 bool = false
			yyq3115[0] = len(x.Hard) != 0
			if yyr3115 || yy2arr3115 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3115 int = 0
				for _, b := range yyq3115 {
					if b {
						yynn3115++
					}
				}
				r.EncodeMapStart(yynn3115)
			}
			if yyr3115 || yy2arr3115 {
				if yyq3115[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3115[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3115 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3117 := z.DecBinary()
	_ = yym3117
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3118 := r.ReadMapStart()
			if yyl3118 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3118, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3118 := r.ReadArrayStart()
			if yyl3118 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3118, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3119Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3119Slc
	var yyhl3119 bool = l >= 0
	for yyj3119 := 0; ; yyj3119++ {
		if yyhl3119 {
			if yyj3119 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3119Slc = r.DecodeBytes(yys3119Slc, true, true)
		yys3119 := string(yys3119Slc)
		switch yys3119 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3120 := &x.Hard
				yyv3120.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3119)
		} // end switch yys3119
	} // end for yyj3119
	if !yyhl3119 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3121 int
	var yyb3121 bool
	var yyhl3121 bool = l >= 0
	yyj3121++
	if yyhl3121 {
		yyb3121 = yyj3121 > l
	} else {
		yyb3121 = r.CheckBreak()
	}
	if yyb3121 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3122 := &x.Hard
		yyv3122.CodecDecodeSelf(d)
	}
	for {
		yyj3121++
		if yyhl3121 {
			yyb3121 = yyj3121 > l
		} else {
			yyb3121 = r.CheckBreak()
		}
		if yyb3121 {
			break
		}
		z.DecStructFieldNotFound(yyj3121-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3123 := z.EncBinary()
		_ = yym3123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3124 := !z.EncBinary()
			yy2arr3124 := z.EncBasicHandle().StructToArray
			var yyq3124 [2]bool
			_, _, _ = yysep3124, yyq3124, yy2arr3124
			const yyr3124 bool = false
			yyq3124[0] = len(x.Hard) != 0
			yyq3124[1] = len(x.Used) != 0
			if yyr3124 || yy2arr3124 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3124 int = 0
				for _, b := range yyq3124 {
					if b {
						yynn3124++
					}
				}
				r.EncodeMapStart(yynn3124)
			}
			if yyr3124 || yy2arr3124 {
				if yyq3124[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3124[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3124 || yy2arr3124 {
				if yyq3124[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3124[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3124 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3127 := z.DecBinary()
	_ = yym3127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3128 := r.ReadMapStart()
			if yyl3128 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3128, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3128 := r.ReadArrayStart()
			if yyl3128 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3129Slc
	var yyhl3129 bool = l >= 0
	for yyj3129 := 0; ; yyj3129++ {
		if yyhl3129 {
			if yyj3129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3129Slc = r.DecodeBytes(yys3129Slc, true, true)
		yys3129 := string(yys3129Slc)
		switch yys3129 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3130 := &x.Hard
				yyv3130.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3131 := &x.Used
				yyv3131.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3129)
		} // end switch yys3129
	} // end for yyj3129
	if !yyhl3129 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3132 int
	var yyb3132 bool
	var yyhl3132 bool = l >= 0
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3133 := &x.Hard
		yyv3133.CodecDecodeSelf(d)
	}
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3134 := &x.Used
		yyv3134.CodecDecodeSelf(d)
	}
	for {
		yyj3132++
		if yyhl3132 {
			yyb3132 = yyj3132 > l
		} else {
			yyb3132 = r.CheckBreak()
		}
		if yyb3132 {
			break
		}
		z.DecStructFieldNotFound(yyj3132-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3135 := z.EncBinary()
		_ = yym3135
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3136 := !z.EncBinary()
			yy2arr3136 := z.EncBasicHandle().StructToArray
			var yyq3136 [5]bool
			_, _, _ = yysep3136, yyq3136, yy2arr3136
			const yyr3136 bool = false
			yyq3136[0] = x.Kind != ""
			yyq3136[1] = x.APIVersion != ""
			yyq3136[2] = true
			yyq3136[3] = true
			yyq3136[4] = true
			if yyr3136 || yy2arr3136 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3136 int = 0
				for _, b := range yyq3136 {
					if b {
						yynn3136++
					}
				}
				r.EncodeMapStart(yynn3136)
			}
			if yyr3136 || yy2arr3136 {
				if yyq3136[0] {
					yym3138 := z.EncBinary()
					_ = yym3138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3136[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3139 := z.EncBinary()
					_ = yym3139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3136 || yy2arr3136 {
				if yyq3136[1] {
					yym3141 := z.EncBinary()
					_ = yym3141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3136[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3142 := z.EncBinary()
					_ = yym3142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3136 || yy2arr3136 {
				if yyq3136[2] {
					yy3144 := &x.ObjectMeta
					yy3144.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3136[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3145 := &x.ObjectMeta
					yy3145.CodecEncodeSelf(e)
				}
			}
			if yyr3136 || yy2arr3136 {
				if yyq3136[3] {
					yy3147 := &x.Spec
					yy3147.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3136[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3148 := &x.Spec
					yy3148.CodecEncodeSelf(e)
				}
			}
			if yyr3136 || yy2arr3136 {
				if yyq3136[4] {
					yy3150 := &x.Status
					yy3150.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3136[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3151 := &x.Status
					yy3151.CodecEncodeSelf(e)
				}
			}
			if yysep3136 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3152 := z.DecBinary()
	_ = yym3152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3153 := r.ReadMapStart()
			if yyl3153 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3153, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3153 := r.ReadArrayStart()
			if yyl3153 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3153, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3154Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3154Slc
	var yyhl3154 bool = l >= 0
	for yyj3154 := 0; ; yyj3154++ {
		if yyhl3154 {
			if yyj3154 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3154Slc = r.DecodeBytes(yys3154Slc, true, true)
		yys3154 := string(yys3154Slc)
		switch yys3154 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3157 := &x.ObjectMeta
				yyv3157.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3158 := &x.Spec
				yyv3158.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3159 := &x.Status
				yyv3159.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3154)
		} // end switch yys3154
	} // end for yyj3154
	if !yyhl3154 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3160 int
	var yyb3160 bool
	var yyhl3160 bool = l >= 0
	yyj3160++
	if yyhl3160 {
		yyb3160 = yyj3160 > l
	} else {
		yyb3160 = r.CheckBreak()
	}
	if yyb3160 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3160++
	if yyhl3160 {
		yyb3160 = yyj3160 > l
	} else {
		yyb3160 = r.CheckBreak()
	}
	if yyb3160 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3160++
	if yyhl3160 {
		yyb3160 = yyj3160 > l
	} else {
		yyb3160 = r.CheckBreak()
	}
	if yyb3160 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3163 := &x.ObjectMeta
		yyv3163.CodecDecodeSelf(d)
	}
	yyj3160++
	if yyhl3160 {
		yyb3160 = yyj3160 > l
	} else {
		yyb3160 = r.CheckBreak()
	}
	if yyb3160 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3164 := &x.Spec
		yyv3164.CodecDecodeSelf(d)
	}
	yyj3160++
	if yyhl3160 {
		yyb3160 = yyj3160 > l
	} else {
		yyb3160 = r.CheckBreak()
	}
	if yyb3160 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3165 := &x.Status
		yyv3165.CodecDecodeSelf(d)
	}
	for {
		yyj3160++
		if yyhl3160 {
			yyb3160 = yyj3160 > l
		} else {
			yyb3160 = r.CheckBreak()
		}
		if yyb3160 {
			break
		}
		z.DecStructFieldNotFound(yyj3160-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3166 := z.EncBinary()
		_ = yym3166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3167 := !z.EncBinary()
			yy2arr3167 := z.EncBasicHandle().StructToArray
			var yyq3167 [4]bool
			_, _, _ = yysep3167, yyq3167, yy2arr3167
			const yyr3167 bool = false
			yyq3167[0] = x.Kind != ""
			yyq3167[1] = x.APIVersion != ""
			yyq3167[2] = true
			if yyr3167 || yy2arr3167 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3167 int = 1
				for _, b := range yyq3167 {
					if b {
						yynn3167++
					}
				}
				r.EncodeMapStart(yynn3167)
			}
			if yyr3167 || yy2arr3167 {
				if yyq3167[0] {
					yym3169 := z.EncBinary()
					_ = yym3169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3167[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3170 := z.EncBinary()
					_ = yym3170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				if yyq3167[1] {
					yym3172 := z.EncBinary()
					_ = yym3172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3167[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3173 := z.EncBinary()
					_ = yym3173
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				if yyq3167[2] {
					yy3175 := &x.ListMeta
					yym3176 := z.EncBinary()
					_ = yym3176
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3175) {
					} else {
						z.EncFallback(yy3175)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3167[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3177 := &x.ListMeta
					yym3178 := z.EncBinary()
					_ = yym3178
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3177) {
					} else {
						z.EncFallback(yy3177)
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3180 := z.EncBinary()
					_ = yym3180
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3181 := z.EncBinary()
					_ = yym3181
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3167 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3182 := z.DecBinary()
	_ = yym3182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3183 := r.ReadMapStart()
			if yyl3183 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3183, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3183 := r.ReadArrayStart()
			if yyl3183 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3183, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3184Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3184Slc
	var yyhl3184 bool = l >= 0
	for yyj3184 := 0; ; yyj3184++ {
		if yyhl3184 {
			if yyj3184 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3184Slc = r.DecodeBytes(yys3184Slc, true, true)
		yys3184 := string(yys3184Slc)
		switch yys3184 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3187 := &x.ListMeta
				yym3188 := z.DecBinary()
				_ = yym3188
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3187) {
				} else {
					z.DecFallback(yyv3187, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3189 := &x.Items
				yym3190 := z.DecBinary()
				_ = yym3190
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3189), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3184)
		} // end switch yys3184
	} // end for yyj3184
	if !yyhl3184 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3191 int
	var yyb3191 bool
	var yyhl3191 bool = l >= 0
	yyj3191++
	if yyhl3191 {
		yyb3191 = yyj3191 > l
	} else {
		yyb3191 = r.CheckBreak()
	}
	if yyb3191 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3191++
	if yyhl3191 {
		yyb3191 = yyj3191 > l
	} else {
		yyb3191 = r.CheckBreak()
	}
	if yyb3191 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3191++
	if yyhl3191 {
		yyb3191 = yyj3191 > l
	} else {
		yyb3191 = r.CheckBreak()
	}
	if yyb3191 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3194 := &x.ListMeta
		yym3195 := z.DecBinary()
		_ = yym3195
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3194) {
		} else {
			z.DecFallback(yyv3194, false)
		}
	}
	yyj3191++
	if yyhl3191 {
		yyb3191 = yyj3191 > l
	} else {
		yyb3191 = r.CheckBreak()
	}
	if yyb3191 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3196 := &x.Items
		yym3197 := z.DecBinary()
		_ = yym3197
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3196), d)
		}
	}
	for {
		yyj3191++
		if yyhl3191 {
			yyb3191 = yyj3191 > l
		} else {
			yyb3191 = r.CheckBreak()
		}
		if yyb3191 {
			break
		}
		z.DecStructFieldNotFound(yyj3191-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3198 := z.EncBinary()
		_ = yym3198
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3199 := !z.EncBinary()
			yy2arr3199 := z.EncBasicHandle().StructToArray
			var yyq3199 [5]bool
			_, _, _ = yysep3199, yyq3199, yy2arr3199
			const yyr3199 bool = false
			yyq3199[0] = x.Kind != ""
			yyq3199[1] = x.APIVersion != ""
			yyq3199[2] = true
			yyq3199[3] = len(x.Data) != 0
			yyq3199[4] = x.Type != ""
			if yyr3199 || yy2arr3199 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3199 int = 0
				for _, b := range yyq3199 {
					if b {
						yynn3199++
					}
				}
				r.EncodeMapStart(yynn3199)
			}
			if yyr3199 || yy2arr3199 {
				if yyq3199[0] {
					yym3201 := z.EncBinary()
					_ = yym3201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3199[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3202 := z.EncBinary()
					_ = yym3202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3199 || yy2arr3199 {
				if yyq3199[1] {
					yym3204 := z.EncBinary()
					_ = yym3204
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3199[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3205 := z.EncBinary()
					_ = yym3205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3199 || yy2arr3199 {
				if yyq3199[2] {
					yy3207 := &x.ObjectMeta
					yy3207.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3199[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3208 := &x.ObjectMeta
					yy3208.CodecEncodeSelf(e)
				}
			}
			if yyr3199 || yy2arr3199 {
				if yyq3199[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3210 := z.EncBinary()
						_ = yym3210
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3199[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3211 := z.EncBinary()
						_ = yym3211
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3199 || yy2arr3199 {
				if yyq3199[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3199[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3199 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3213 := z.DecBinary()
	_ = yym3213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3214 := r.ReadMapStart()
			if yyl3214 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3214, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3214 := r.ReadArrayStart()
			if yyl3214 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3214, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3215Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3215Slc
	var yyhl3215 bool = l >= 0
	for yyj3215 := 0; ; yyj3215++ {
		if yyhl3215 {
			if yyj3215 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3215Slc = r.DecodeBytes(yys3215Slc, true, true)
		yys3215 := string(yys3215Slc)
		switch yys3215 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3218 := &x.ObjectMeta
				yyv3218.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3219 := &x.Data
				yym3220 := z.DecBinary()
				_ = yym3220
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3219), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3215)
		} // end switch yys3215
	} // end for yyj3215
	if !yyhl3215 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3222 int
	var yyb3222 bool
	var yyhl3222 bool = l >= 0
	yyj3222++
	if yyhl3222 {
		yyb3222 = yyj3222 > l
	} else {
		yyb3222 = r.CheckBreak()
	}
	if yyb3222 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3222++
	if yyhl3222 {
		yyb3222 = yyj3222 > l
	} else {
		yyb3222 = r.CheckBreak()
	}
	if yyb3222 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3222++
	if yyhl3222 {
		yyb3222 = yyj3222 > l
	} else {
		yyb3222 = r.CheckBreak()
	}
	if yyb3222 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3225 := &x.ObjectMeta
		yyv3225.CodecDecodeSelf(d)
	}
	yyj3222++
	if yyhl3222 {
		yyb3222 = yyj3222 > l
	} else {
		yyb3222 = r.CheckBreak()
	}
	if yyb3222 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3226 := &x.Data
		yym3227 := z.DecBinary()
		_ = yym3227
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3226), d)
		}
	}
	yyj3222++
	if yyhl3222 {
		yyb3222 = yyj3222 > l
	} else {
		yyb3222 = r.CheckBreak()
	}
	if yyb3222 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3222++
		if yyhl3222 {
			yyb3222 = yyj3222 > l
		} else {
			yyb3222 = r.CheckBreak()
		}
		if yyb3222 {
			break
		}
		z.DecStructFieldNotFound(yyj3222-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3229 := z.EncBinary()
	_ = yym3229
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3230 := z.DecBinary()
	_ = yym3230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3231 := z.EncBinary()
		_ = yym3231
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3232 := !z.EncBinary()
			yy2arr3232 := z.EncBasicHandle().StructToArray
			var yyq3232 [4]bool
			_, _, _ = yysep3232, yyq3232, yy2arr3232
			const yyr3232 bool = false
			yyq3232[0] = x.Kind != ""
			yyq3232[1] = x.APIVersion != ""
			yyq3232[2] = true
			if yyr3232 || yy2arr3232 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3232 int = 1
				for _, b := range yyq3232 {
					if b {
						yynn3232++
					}
				}
				r.EncodeMapStart(yynn3232)
			}
			if yyr3232 || yy2arr3232 {
				if yyq3232[0] {
					yym3234 := z.EncBinary()
					_ = yym3234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3232[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3235 := z.EncBinary()
					_ = yym3235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3232 || yy2arr3232 {
				if yyq3232[1] {
					yym3237 := z.EncBinary()
					_ = yym3237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3232[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3238 := z.EncBinary()
					_ = yym3238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3232 || yy2arr3232 {
				if yyq3232[2] {
					yy3240 := &x.ListMeta
					yym3241 := z.EncBinary()
					_ = yym3241
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3240) {
					} else {
						z.EncFallback(yy3240)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3232[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3242 := &x.ListMeta
					yym3243 := z.EncBinary()
					_ = yym3243
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3242) {
					} else {
						z.EncFallback(yy3242)
					}
				}
			}
			if yyr3232 || yy2arr3232 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3245 := z.EncBinary()
					_ = yym3245
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3246 := z.EncBinary()
					_ = yym3246
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3232 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3247 := z.DecBinary()
	_ = yym3247
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3248 := r.ReadMapStart()
			if yyl3248 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3248, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3248 := r.ReadArrayStart()
			if yyl3248 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3248, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3249Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3249Slc
	var yyhl3249 bool = l >= 0
	for yyj3249 := 0; ; yyj3249++ {
		if yyhl3249 {
			if yyj3249 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3249Slc = r.DecodeBytes(yys3249Slc, true, true)
		yys3249 := string(yys3249Slc)
		switch yys3249 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3252 := &x.ListMeta
				yym3253 := z.DecBinary()
				_ = yym3253
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3252) {
				} else {
					z.DecFallback(yyv3252, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3254 := &x.Items
				yym3255 := z.DecBinary()
				_ = yym3255
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3254), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3249)
		} // end switch yys3249
	} // end for yyj3249
	if !yyhl3249 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3256 int
	var yyb3256 bool
	var yyhl3256 bool = l >= 0
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3259 := &x.ListMeta
		yym3260 := z.DecBinary()
		_ = yym3260
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3259) {
		} else {
			z.DecFallback(yyv3259, false)
		}
	}
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3261 := &x.Items
		yym3262 := z.DecBinary()
		_ = yym3262
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3261), d)
		}
	}
	for {
		yyj3256++
		if yyhl3256 {
			yyb3256 = yyj3256 > l
		} else {
			yyb3256 = r.CheckBreak()
		}
		if yyb3256 {
			break
		}
		z.DecStructFieldNotFound(yyj3256-1, "")
	}
	r.ReadEnd()
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3263 := z.EncBinary()
	_ = yym3263
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3264 := z.DecBinary()
	_ = yym3264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3265 := z.EncBinary()
		_ = yym3265
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3266 := !z.EncBinary()
			yy2arr3266 := z.EncBasicHandle().StructToArray
			var yyq3266 [4]bool
			_, _, _ = yysep3266, yyq3266, yy2arr3266
			const yyr3266 bool = false
			yyq3266[2] = x.Message != ""
			yyq3266[3] = x.Error != ""
			if yyr3266 || yy2arr3266 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3266 int = 2
				for _, b := range yyq3266 {
					if b {
						yynn3266++
					}
				}
				r.EncodeMapStart(yynn3266)
			}
			if yyr3266 || yy2arr3266 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3266 || yy2arr3266 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3266 || yy2arr3266 {
				if yyq3266[2] {
					yym3270 := z.EncBinary()
					_ = yym3270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3266[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3271 := z.EncBinary()
					_ = yym3271
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3266 || yy2arr3266 {
				if yyq3266[3] {
					yym3273 := z.EncBinary()
					_ = yym3273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3266[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3274 := z.EncBinary()
					_ = yym3274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3266 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3275 := z.DecBinary()
	_ = yym3275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3276 := r.ReadMapStart()
			if yyl3276 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3276, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3276 := r.ReadArrayStart()
			if yyl3276 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3277Slc
	var yyhl3277 bool = l >= 0
	for yyj3277 := 0; ; yyj3277++ {
		if yyhl3277 {
			if yyj3277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3277Slc = r.DecodeBytes(yys3277Slc, true, true)
		yys3277 := string(yys3277Slc)
		switch yys3277 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3277)
		} // end switch yys3277
	} // end for yyj3277
	if !yyhl3277 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3282 int
	var yyb3282 bool
	var yyhl3282 bool = l >= 0
	yyj3282++
	if yyhl3282 {
		yyb3282 = yyj3282 > l
	} else {
		yyb3282 = r.CheckBreak()
	}
	if yyb3282 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3282++
	if yyhl3282 {
		yyb3282 = yyj3282 > l
	} else {
		yyb3282 = r.CheckBreak()
	}
	if yyb3282 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3282++
	if yyhl3282 {
		yyb3282 = yyj3282 > l
	} else {
		yyb3282 = r.CheckBreak()
	}
	if yyb3282 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3282++
	if yyhl3282 {
		yyb3282 = yyj3282 > l
	} else {
		yyb3282 = r.CheckBreak()
	}
	if yyb3282 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3282++
		if yyhl3282 {
			yyb3282 = yyj3282 > l
		} else {
			yyb3282 = r.CheckBreak()
		}
		if yyb3282 {
			break
		}
		z.DecStructFieldNotFound(yyj3282-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3287 := z.EncBinary()
		_ = yym3287
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3288 := !z.EncBinary()
			yy2arr3288 := z.EncBasicHandle().StructToArray
			var yyq3288 [4]bool
			_, _, _ = yysep3288, yyq3288, yy2arr3288
			const yyr3288 bool = false
			yyq3288[0] = x.Kind != ""
			yyq3288[1] = x.APIVersion != ""
			yyq3288[2] = true
			yyq3288[3] = len(x.Conditions) != 0
			if yyr3288 || yy2arr3288 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3288 int = 0
				for _, b := range yyq3288 {
					if b {
						yynn3288++
					}
				}
				r.EncodeMapStart(yynn3288)
			}
			if yyr3288 || yy2arr3288 {
				if yyq3288[0] {
					yym3290 := z.EncBinary()
					_ = yym3290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3288[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3291 := z.EncBinary()
					_ = yym3291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3288 || yy2arr3288 {
				if yyq3288[1] {
					yym3293 := z.EncBinary()
					_ = yym3293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3288[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3294 := z.EncBinary()
					_ = yym3294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3288 || yy2arr3288 {
				if yyq3288[2] {
					yy3296 := &x.ObjectMeta
					yy3296.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3288[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3297 := &x.ObjectMeta
					yy3297.CodecEncodeSelf(e)
				}
			}
			if yyr3288 || yy2arr3288 {
				if yyq3288[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3299 := z.EncBinary()
						_ = yym3299
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3288[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3300 := z.EncBinary()
						_ = yym3300
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3288 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3301 := z.DecBinary()
	_ = yym3301
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3302 := r.ReadMapStart()
			if yyl3302 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3302, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3302 := r.ReadArrayStart()
			if yyl3302 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3302, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3303Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3303Slc
	var yyhl3303 bool = l >= 0
	for yyj3303 := 0; ; yyj3303++ {
		if yyhl3303 {
			if yyj3303 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3303Slc = r.DecodeBytes(yys3303Slc, true, true)
		yys3303 := string(yys3303Slc)
		switch yys3303 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3306 := &x.ObjectMeta
				yyv3306.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3307 := &x.Conditions
				yym3308 := z.DecBinary()
				_ = yym3308
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3307), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3303)
		} // end switch yys3303
	} // end for yyj3303
	if !yyhl3303 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3309 int
	var yyb3309 bool
	var yyhl3309 bool = l >= 0
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3312 := &x.ObjectMeta
		yyv3312.CodecDecodeSelf(d)
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3313 := &x.Conditions
		yym3314 := z.DecBinary()
		_ = yym3314
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3313), d)
		}
	}
	for {
		yyj3309++
		if yyhl3309 {
			yyb3309 = yyj3309 > l
		} else {
			yyb3309 = r.CheckBreak()
		}
		if yyb3309 {
			break
		}
		z.DecStructFieldNotFound(yyj3309-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3315 := z.EncBinary()
		_ = yym3315
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3316 := !z.EncBinary()
			yy2arr3316 := z.EncBasicHandle().StructToArray
			var yyq3316 [4]bool
			_, _, _ = yysep3316, yyq3316, yy2arr3316
			const yyr3316 bool = false
			yyq3316[0] = x.Kind != ""
			yyq3316[1] = x.APIVersion != ""
			yyq3316[2] = true
			if yyr3316 || yy2arr3316 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3316 int = 1
				for _, b := range yyq3316 {
					if b {
						yynn3316++
					}
				}
				r.EncodeMapStart(yynn3316)
			}
			if yyr3316 || yy2arr3316 {
				if yyq3316[0] {
					yym3318 := z.EncBinary()
					_ = yym3318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3316[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3316 || yy2arr3316 {
				if yyq3316[1] {
					yym3321 := z.EncBinary()
					_ = yym3321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3316[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3322 := z.EncBinary()
					_ = yym3322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3316 || yy2arr3316 {
				if yyq3316[2] {
					yy3324 := &x.ListMeta
					yym3325 := z.EncBinary()
					_ = yym3325
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3324) {
					} else {
						z.EncFallback(yy3324)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3316[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3326 := &x.ListMeta
					yym3327 := z.EncBinary()
					_ = yym3327
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3326) {
					} else {
						z.EncFallback(yy3326)
					}
				}
			}
			if yyr3316 || yy2arr3316 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3329 := z.EncBinary()
					_ = yym3329
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3330 := z.EncBinary()
					_ = yym3330
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3316 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3331 := z.DecBinary()
	_ = yym3331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3332 := r.ReadMapStart()
			if yyl3332 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3332, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3332 := r.ReadArrayStart()
			if yyl3332 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3333Slc
	var yyhl3333 bool = l >= 0
	for yyj3333 := 0; ; yyj3333++ {
		if yyhl3333 {
			if yyj3333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3333Slc = r.DecodeBytes(yys3333Slc, true, true)
		yys3333 := string(yys3333Slc)
		switch yys3333 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3336 := &x.ListMeta
				yym3337 := z.DecBinary()
				_ = yym3337
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3336) {
				} else {
					z.DecFallback(yyv3336, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3338 := &x.Items
				yym3339 := z.DecBinary()
				_ = yym3339
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3338), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3333)
		} // end switch yys3333
	} // end for yyj3333
	if !yyhl3333 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3340 int
	var yyb3340 bool
	var yyhl3340 bool = l >= 0
	yyj3340++
	if yyhl3340 {
		yyb3340 = yyj3340 > l
	} else {
		yyb3340 = r.CheckBreak()
	}
	if yyb3340 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3340++
	if yyhl3340 {
		yyb3340 = yyj3340 > l
	} else {
		yyb3340 = r.CheckBreak()
	}
	if yyb3340 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3340++
	if yyhl3340 {
		yyb3340 = yyj3340 > l
	} else {
		yyb3340 = r.CheckBreak()
	}
	if yyb3340 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3343 := &x.ListMeta
		yym3344 := z.DecBinary()
		_ = yym3344
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3343) {
		} else {
			z.DecFallback(yyv3343, false)
		}
	}
	yyj3340++
	if yyhl3340 {
		yyb3340 = yyj3340 > l
	} else {
		yyb3340 = r.CheckBreak()
	}
	if yyb3340 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3345 := &x.Items
		yym3346 := z.DecBinary()
		_ = yym3346
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3345), d)
		}
	}
	for {
		yyj3340++
		if yyhl3340 {
			yyb3340 = yyj3340 > l
		} else {
			yyb3340 = r.CheckBreak()
		}
		if yyb3340 {
			break
		}
		z.DecStructFieldNotFound(yyj3340-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3347 := z.EncBinary()
		_ = yym3347
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3348 := !z.EncBinary()
			yy2arr3348 := z.EncBasicHandle().StructToArray
			var yyq3348 [1]bool
			_, _, _ = yysep3348, yyq3348, yy2arr3348
			const yyr3348 bool = false
			yyq3348[0] = len(x.Items) != 0
			if yyr3348 || yy2arr3348 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3348 int = 0
				for _, b := range yyq3348 {
					if b {
						yynn3348++
					}
				}
				r.EncodeMapStart(yynn3348)
			}
			if yyr3348 || yy2arr3348 {
				if yyq3348[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3350 := z.EncBinary()
						_ = yym3350
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3348[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3351 := z.EncBinary()
						_ = yym3351
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep3348 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3352 := z.DecBinary()
	_ = yym3352
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3353 := r.ReadMapStart()
			if yyl3353 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3353, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3353 := r.ReadArrayStart()
			if yyl3353 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3353, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3354Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3354Slc
	var yyhl3354 bool = l >= 0
	for yyj3354 := 0; ; yyj3354++ {
		if yyhl3354 {
			if yyj3354 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3354Slc = r.DecodeBytes(yys3354Slc, true, true)
		yys3354 := string(yys3354Slc)
		switch yys3354 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3355 := &x.Items
				yym3356 := z.DecBinary()
				_ = yym3356
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3355), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3354)
		} // end switch yys3354
	} // end for yyj3354
	if !yyhl3354 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3357 int
	var yyb3357 bool
	var yyhl3357 bool = l >= 0
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3358 := &x.Items
		yym3359 := z.DecBinary()
		_ = yym3359
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3358), d)
		}
	}
	for {
		yyj3357++
		if yyhl3357 {
			yyb3357 = yyj3357 > l
		} else {
			yyb3357 = r.CheckBreak()
		}
		if yyb3357 {
			break
		}
		z.DecStructFieldNotFound(yyj3357-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3360 := z.EncBinary()
		_ = yym3360
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3361 := !z.EncBinary()
			yy2arr3361 := z.EncBasicHandle().StructToArray
			var yyq3361 [2]bool
			_, _, _ = yysep3361, yyq3361, yy2arr3361
			const yyr3361 bool = false
			if yyr3361 || yy2arr3361 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3361 int = 2
				for _, b := range yyq3361 {
					if b {
						yynn3361++
					}
				}
				r.EncodeMapStart(yynn3361)
			}
			if yyr3361 || yy2arr3361 {
				yym3363 := z.EncBinary()
				_ = yym3363
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym3364 := z.EncBinary()
				_ = yym3364
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3361 || yy2arr3361 {
				yy3366 := &x.FieldRef
				yy3366.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy3367 := &x.FieldRef
				yy3367.CodecEncodeSelf(e)
			}
			if yysep3361 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3368 := z.DecBinary()
	_ = yym3368
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3369 := r.ReadMapStart()
			if yyl3369 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3369, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3369 := r.ReadArrayStart()
			if yyl3369 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3369, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3370Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3370Slc
	var yyhl3370 bool = l >= 0
	for yyj3370 := 0; ; yyj3370++ {
		if yyhl3370 {
			if yyj3370 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3370Slc = r.DecodeBytes(yys3370Slc, true, true)
		yys3370 := string(yys3370Slc)
		switch yys3370 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3372 := &x.FieldRef
				yyv3372.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3370)
		} // end switch yys3370
	} // end for yyj3370
	if !yyhl3370 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3373 int
	var yyb3373 bool
	var yyhl3373 bool = l >= 0
	yyj3373++
	if yyhl3373 {
		yyb3373 = yyj3373 > l
	} else {
		yyb3373 = r.CheckBreak()
	}
	if yyb3373 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3373++
	if yyhl3373 {
		yyb3373 = yyj3373 > l
	} else {
		yyb3373 = r.CheckBreak()
	}
	if yyb3373 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3375 := &x.FieldRef
		yyv3375.CodecDecodeSelf(d)
	}
	for {
		yyj3373++
		if yyhl3373 {
			yyb3373 = yyj3373 > l
		} else {
			yyb3373 = r.CheckBreak()
		}
		if yyb3373 {
			break
		}
		z.DecStructFieldNotFound(yyj3373-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3376 := z.EncBinary()
		_ = yym3376
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3377 := !z.EncBinary()
			yy2arr3377 := z.EncBasicHandle().StructToArray
			var yyq3377 [5]bool
			_, _, _ = yysep3377, yyq3377, yy2arr3377
			const yyr3377 bool = false
			yyq3377[0] = x.Capabilities != nil
			yyq3377[1] = x.Privileged != nil
			yyq3377[2] = x.SELinuxOptions != nil
			yyq3377[3] = x.RunAsUser != nil
			yyq3377[4] = x.RunAsNonRoot != nil
			if yyr3377 || yy2arr3377 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3377 int = 0
				for _, b := range yyq3377 {
					if b {
						yynn3377++
					}
				}
				r.EncodeMapStart(yynn3377)
			}
			if yyr3377 || yy2arr3377 {
				if yyq3377[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3377[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3377 || yy2arr3377 {
				if yyq3377[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3380 := *x.Privileged
						yym3381 := z.EncBinary()
						_ = yym3381
						if false {
						} else {
							r.EncodeBool(bool(yy3380))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3377[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3382 := *x.Privileged
						yym3383 := z.EncBinary()
						_ = yym3383
						if false {
						} else {
							r.EncodeBool(bool(yy3382))
						}
					}
				}
			}
			if yyr3377 || yy2arr3377 {
				if yyq3377[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3377[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3377 || yy2arr3377 {
				if yyq3377[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3386 := *x.RunAsUser
						yym3387 := z.EncBinary()
						_ = yym3387
						if false {
						} else {
							r.EncodeInt(int64(yy3386))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3377[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3388 := *x.RunAsUser
						yym3389 := z.EncBinary()
						_ = yym3389
						if false {
						} else {
							r.EncodeInt(int64(yy3388))
						}
					}
				}
			}
			if yyr3377 || yy2arr3377 {
				if yyq3377[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3391 := *x.RunAsNonRoot
						yym3392 := z.EncBinary()
						_ = yym3392
						if false {
						} else {
							r.EncodeBool(bool(yy3391))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3377[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3393 := *x.RunAsNonRoot
						yym3394 := z.EncBinary()
						_ = yym3394
						if false {
						} else {
							r.EncodeBool(bool(yy3393))
						}
					}
				}
			}
			if yysep3377 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3395 := z.DecBinary()
	_ = yym3395
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3396 := r.ReadMapStart()
			if yyl3396 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3396, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3396 := r.ReadArrayStart()
			if yyl3396 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3396, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3397Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3397Slc
	var yyhl3397 bool = l >= 0
	for yyj3397 := 0; ; yyj3397++ {
		if yyhl3397 {
			if yyj3397 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3397Slc = r.DecodeBytes(yys3397Slc, true, true)
		yys3397 := string(yys3397Slc)
		switch yys3397 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3400 := z.DecBinary()
				_ = yym3400
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3403 := z.DecBinary()
				_ = yym3403
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3405 := z.DecBinary()
				_ = yym3405
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3397)
		} // end switch yys3397
	} // end for yyj3397
	if !yyhl3397 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3406 int
	var yyb3406 bool
	var yyhl3406 bool = l >= 0
	yyj3406++
	if yyhl3406 {
		yyb3406 = yyj3406 > l
	} else {
		yyb3406 = r.CheckBreak()
	}
	if yyb3406 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3406++
	if yyhl3406 {
		yyb3406 = yyj3406 > l
	} else {
		yyb3406 = r.CheckBreak()
	}
	if yyb3406 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3409 := z.DecBinary()
		_ = yym3409
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3406++
	if yyhl3406 {
		yyb3406 = yyj3406 > l
	} else {
		yyb3406 = r.CheckBreak()
	}
	if yyb3406 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3406++
	if yyhl3406 {
		yyb3406 = yyj3406 > l
	} else {
		yyb3406 = r.CheckBreak()
	}
	if yyb3406 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3412 := z.DecBinary()
		_ = yym3412
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3406++
	if yyhl3406 {
		yyb3406 = yyj3406 > l
	} else {
		yyb3406 = r.CheckBreak()
	}
	if yyb3406 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3414 := z.DecBinary()
		_ = yym3414
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3406++
		if yyhl3406 {
			yyb3406 = yyj3406 > l
		} else {
			yyb3406 = r.CheckBreak()
		}
		if yyb3406 {
			break
		}
		z.DecStructFieldNotFound(yyj3406-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3415 := z.EncBinary()
		_ = yym3415
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3416 := !z.EncBinary()
			yy2arr3416 := z.EncBasicHandle().StructToArray
			var yyq3416 [4]bool
			_, _, _ = yysep3416, yyq3416, yy2arr3416
			const yyr3416 bool = false
			yyq3416[0] = x.User != ""
			yyq3416[1] = x.Role != ""
			yyq3416[2] = x.Type != ""
			yyq3416[3] = x.Level != ""
			if yyr3416 || yy2arr3416 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3416 int = 0
				for _, b := range yyq3416 {
					if b {
						yynn3416++
					}
				}
				r.EncodeMapStart(yynn3416)
			}
			if yyr3416 || yy2arr3416 {
				if yyq3416[0] {
					yym3418 := z.EncBinary()
					_ = yym3418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3416[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3419 := z.EncBinary()
					_ = yym3419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3416 || yy2arr3416 {
				if yyq3416[1] {
					yym3421 := z.EncBinary()
					_ = yym3421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3416[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3422 := z.EncBinary()
					_ = yym3422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3416 || yy2arr3416 {
				if yyq3416[2] {
					yym3424 := z.EncBinary()
					_ = yym3424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3416[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3416 || yy2arr3416 {
				if yyq3416[3] {
					yym3427 := z.EncBinary()
					_ = yym3427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3416[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3428 := z.EncBinary()
					_ = yym3428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3416 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3429 := z.DecBinary()
	_ = yym3429
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3430 := r.ReadMapStart()
			if yyl3430 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3430, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3430 := r.ReadArrayStart()
			if yyl3430 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3430, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3431Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3431Slc
	var yyhl3431 bool = l >= 0
	for yyj3431 := 0; ; yyj3431++ {
		if yyhl3431 {
			if yyj3431 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3431Slc = r.DecodeBytes(yys3431Slc, true, true)
		yys3431 := string(yys3431Slc)
		switch yys3431 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3431)
		} // end switch yys3431
	} // end for yyj3431
	if !yyhl3431 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3436 int
	var yyb3436 bool
	var yyhl3436 bool = l >= 0
	yyj3436++
	if yyhl3436 {
		yyb3436 = yyj3436 > l
	} else {
		yyb3436 = r.CheckBreak()
	}
	if yyb3436 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3436++
	if yyhl3436 {
		yyb3436 = yyj3436 > l
	} else {
		yyb3436 = r.CheckBreak()
	}
	if yyb3436 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3436++
	if yyhl3436 {
		yyb3436 = yyj3436 > l
	} else {
		yyb3436 = r.CheckBreak()
	}
	if yyb3436 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3436++
	if yyhl3436 {
		yyb3436 = yyj3436 > l
	} else {
		yyb3436 = r.CheckBreak()
	}
	if yyb3436 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3436++
		if yyhl3436 {
			yyb3436 = yyj3436 > l
		} else {
			yyb3436 = r.CheckBreak()
		}
		if yyb3436 {
			break
		}
		z.DecStructFieldNotFound(yyj3436-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3441 := z.EncBinary()
		_ = yym3441
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3442 := !z.EncBinary()
			yy2arr3442 := z.EncBasicHandle().StructToArray
			var yyq3442 [5]bool
			_, _, _ = yysep3442, yyq3442, yy2arr3442
			const yyr3442 bool = false
			yyq3442[0] = x.Kind != ""
			yyq3442[1] = x.APIVersion != ""
			yyq3442[2] = true
			if yyr3442 || yy2arr3442 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3442 int = 2
				for _, b := range yyq3442 {
					if b {
						yynn3442++
					}
				}
				r.EncodeMapStart(yynn3442)
			}
			if yyr3442 || yy2arr3442 {
				if yyq3442[0] {
					yym3444 := z.EncBinary()
					_ = yym3444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3442[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3445 := z.EncBinary()
					_ = yym3445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3442 || yy2arr3442 {
				if yyq3442[1] {
					yym3447 := z.EncBinary()
					_ = yym3447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3442[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3448 := z.EncBinary()
					_ = yym3448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3442 || yy2arr3442 {
				if yyq3442[2] {
					yy3450 := &x.ObjectMeta
					yy3450.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3442[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3451 := &x.ObjectMeta
					yy3451.CodecEncodeSelf(e)
				}
			}
			if yyr3442 || yy2arr3442 {
				yym3453 := z.EncBinary()
				_ = yym3453
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3454 := z.EncBinary()
				_ = yym3454
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3442 || yy2arr3442 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3456 := z.EncBinary()
					_ = yym3456
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3457 := z.EncBinary()
					_ = yym3457
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3442 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3458 := z.DecBinary()
	_ = yym3458
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3459 := r.ReadMapStart()
			if yyl3459 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3459, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3459 := r.ReadArrayStart()
			if yyl3459 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3459, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3460Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3460Slc
	var yyhl3460 bool = l >= 0
	for yyj3460 := 0; ; yyj3460++ {
		if yyhl3460 {
			if yyj3460 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3460Slc = r.DecodeBytes(yys3460Slc, true, true)
		yys3460 := string(yys3460Slc)
		switch yys3460 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3463 := &x.ObjectMeta
				yyv3463.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3465 := &x.Data
				yym3466 := z.DecBinary()
				_ = yym3466
				if false {
				} else {
					*yyv3465 = r.DecodeBytes(*(*[]byte)(yyv3465), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3460)
		} // end switch yys3460
	} // end for yyj3460
	if !yyhl3460 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3467 int
	var yyb3467 bool
	var yyhl3467 bool = l >= 0
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3470 := &x.ObjectMeta
		yyv3470.CodecDecodeSelf(d)
	}
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3472 := &x.Data
		yym3473 := z.DecBinary()
		_ = yym3473
		if false {
		} else {
			*yyv3472 = r.DecodeBytes(*(*[]byte)(yyv3472), false, false)
		}
	}
	for {
		yyj3467++
		if yyhl3467 {
			yyb3467 = yyj3467 > l
		} else {
			yyb3467 = r.CheckBreak()
		}
		if yyb3467 {
			break
		}
		z.DecStructFieldNotFound(yyj3467-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3474 := range v {
		yyv3474.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3475 := *v
	yyh3475, yyl3475 := z.DecSliceHelperStart()

	var yyrr3475, yyrl3475 int
	var yyc3475, yyrt3475 bool
	_, _, _ = yyc3475, yyrt3475, yyrl3475
	yyrr3475 = yyl3475

	if yyv3475 == nil {
		if yyrl3475, yyrt3475 = z.DecInferLen(yyl3475, z.DecBasicHandle().MaxInitLen, 16); yyrt3475 {
			yyrr3475 = yyrl3475
		}
		yyv3475 = make([]PersistentVolumeAccessMode, yyrl3475)
		yyc3475 = true
	}

	if yyl3475 == 0 {
		if len(yyv3475) != 0 {
			yyv3475 = yyv3475[:0]
			yyc3475 = true
		}
	} else if yyl3475 > 0 {

		if yyl3475 > cap(yyv3475) {
			yyrl3475, yyrt3475 = z.DecInferLen(yyl3475, z.DecBasicHandle().MaxInitLen, 16)

			yyv23475 := yyv3475
			yyv3475 = make([]PersistentVolumeAccessMode, yyrl3475)
			if len(yyv3475) > 0 {
				copy(yyv3475, yyv23475[:cap(yyv23475)])
			}
			yyc3475 = true

			yyrr3475 = len(yyv3475)
		} else if yyl3475 != len(yyv3475) {
			yyv3475 = yyv3475[:yyl3475]
			yyc3475 = true
		}
		yyj3475 := 0
		for ; yyj3475 < yyrr3475; yyj3475++ {
			if r.TryDecodeAsNil() {
				yyv3475[yyj3475] = ""
			} else {
				yyv3475[yyj3475] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3475 {
			for ; yyj3475 < yyl3475; yyj3475++ {
				yyv3475 = append(yyv3475, "")
				if r.TryDecodeAsNil() {
					yyv3475[yyj3475] = ""
				} else {
					yyv3475[yyj3475] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3475 := 0; !r.CheckBreak(); yyj3475++ {
			if yyj3475 >= len(yyv3475) {
				yyv3475 = append(yyv3475, "") // var yyz3475 PersistentVolumeAccessMode
				yyc3475 = true
			}

			if yyj3475 < len(yyv3475) {
				if r.TryDecodeAsNil() {
					yyv3475[yyj3475] = ""
				} else {
					yyv3475[yyj3475] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3475.End()
	}
	if yyc3475 {
		*v = yyv3475
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3479 := range v {
		yy3480 := &yyv3479
		yy3480.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3481 := *v
	yyh3481, yyl3481 := z.DecSliceHelperStart()

	var yyrr3481, yyrl3481 int
	var yyc3481, yyrt3481 bool
	_, _, _ = yyc3481, yyrt3481, yyrl3481
	yyrr3481 = yyl3481

	if yyv3481 == nil {
		if yyrl3481, yyrt3481 = z.DecInferLen(yyl3481, z.DecBasicHandle().MaxInitLen, 384); yyrt3481 {
			yyrr3481 = yyrl3481
		}
		yyv3481 = make([]PersistentVolume, yyrl3481)
		yyc3481 = true
	}

	if yyl3481 == 0 {
		if len(yyv3481) != 0 {
			yyv3481 = yyv3481[:0]
			yyc3481 = true
		}
	} else if yyl3481 > 0 {

		if yyl3481 > cap(yyv3481) {
			yyrl3481, yyrt3481 = z.DecInferLen(yyl3481, z.DecBasicHandle().MaxInitLen, 384)
			yyv3481 = make([]PersistentVolume, yyrl3481)
			yyc3481 = true

			yyrr3481 = len(yyv3481)
		} else if yyl3481 != len(yyv3481) {
			yyv3481 = yyv3481[:yyl3481]
			yyc3481 = true
		}
		yyj3481 := 0
		for ; yyj3481 < yyrr3481; yyj3481++ {
			if r.TryDecodeAsNil() {
				yyv3481[yyj3481] = PersistentVolume{}
			} else {
				yyv3482 := &yyv3481[yyj3481]
				yyv3482.CodecDecodeSelf(d)
			}

		}
		if yyrt3481 {
			for ; yyj3481 < yyl3481; yyj3481++ {
				yyv3481 = append(yyv3481, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3481[yyj3481] = PersistentVolume{}
				} else {
					yyv3483 := &yyv3481[yyj3481]
					yyv3483.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3481 := 0; !r.CheckBreak(); yyj3481++ {
			if yyj3481 >= len(yyv3481) {
				yyv3481 = append(yyv3481, PersistentVolume{}) // var yyz3481 PersistentVolume
				yyc3481 = true
			}

			if yyj3481 < len(yyv3481) {
				if r.TryDecodeAsNil() {
					yyv3481[yyj3481] = PersistentVolume{}
				} else {
					yyv3484 := &yyv3481[yyj3481]
					yyv3484.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3481.End()
	}
	if yyc3481 {
		*v = yyv3481
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3485 := range v {
		yy3486 := &yyv3485
		yy3486.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3487 := *v
	yyh3487, yyl3487 := z.DecSliceHelperStart()

	var yyrr3487, yyrl3487 int
	var yyc3487, yyrt3487 bool
	_, _, _ = yyc3487, yyrt3487, yyrl3487
	yyrr3487 = yyl3487

	if yyv3487 == nil {
		if yyrl3487, yyrt3487 = z.DecInferLen(yyl3487, z.DecBasicHandle().MaxInitLen, 296); yyrt3487 {
			yyrr3487 = yyrl3487
		}
		yyv3487 = make([]PersistentVolumeClaim, yyrl3487)
		yyc3487 = true
	}

	if yyl3487 == 0 {
		if len(yyv3487) != 0 {
			yyv3487 = yyv3487[:0]
			yyc3487 = true
		}
	} else if yyl3487 > 0 {

		if yyl3487 > cap(yyv3487) {
			yyrl3487, yyrt3487 = z.DecInferLen(yyl3487, z.DecBasicHandle().MaxInitLen, 296)
			yyv3487 = make([]PersistentVolumeClaim, yyrl3487)
			yyc3487 = true

			yyrr3487 = len(yyv3487)
		} else if yyl3487 != len(yyv3487) {
			yyv3487 = yyv3487[:yyl3487]
			yyc3487 = true
		}
		yyj3487 := 0
		for ; yyj3487 < yyrr3487; yyj3487++ {
			if r.TryDecodeAsNil() {
				yyv3487[yyj3487] = PersistentVolumeClaim{}
			} else {
				yyv3488 := &yyv3487[yyj3487]
				yyv3488.CodecDecodeSelf(d)
			}

		}
		if yyrt3487 {
			for ; yyj3487 < yyl3487; yyj3487++ {
				yyv3487 = append(yyv3487, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3487[yyj3487] = PersistentVolumeClaim{}
				} else {
					yyv3489 := &yyv3487[yyj3487]
					yyv3489.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3487 := 0; !r.CheckBreak(); yyj3487++ {
			if yyj3487 >= len(yyv3487) {
				yyv3487 = append(yyv3487, PersistentVolumeClaim{}) // var yyz3487 PersistentVolumeClaim
				yyc3487 = true
			}

			if yyj3487 < len(yyv3487) {
				if r.TryDecodeAsNil() {
					yyv3487[yyj3487] = PersistentVolumeClaim{}
				} else {
					yyv3490 := &yyv3487[yyj3487]
					yyv3490.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3487.End()
	}
	if yyc3487 {
		*v = yyv3487
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3491 := range v {
		yyv3491.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3492 := *v
	yyh3492, yyl3492 := z.DecSliceHelperStart()

	var yyrr3492, yyrl3492 int
	var yyc3492, yyrt3492 bool
	_, _, _ = yyc3492, yyrt3492, yyrl3492
	yyrr3492 = yyl3492

	if yyv3492 == nil {
		if yyrl3492, yyrt3492 = z.DecInferLen(yyl3492, z.DecBasicHandle().MaxInitLen, 16); yyrt3492 {
			yyrr3492 = yyrl3492
		}
		yyv3492 = make([]Capability, yyrl3492)
		yyc3492 = true
	}

	if yyl3492 == 0 {
		if len(yyv3492) != 0 {
			yyv3492 = yyv3492[:0]
			yyc3492 = true
		}
	} else if yyl3492 > 0 {

		if yyl3492 > cap(yyv3492) {
			yyrl3492, yyrt3492 = z.DecInferLen(yyl3492, z.DecBasicHandle().MaxInitLen, 16)

			yyv23492 := yyv3492
			yyv3492 = make([]Capability, yyrl3492)
			if len(yyv3492) > 0 {
				copy(yyv3492, yyv23492[:cap(yyv23492)])
			}
			yyc3492 = true

			yyrr3492 = len(yyv3492)
		} else if yyl3492 != len(yyv3492) {
			yyv3492 = yyv3492[:yyl3492]
			yyc3492 = true
		}
		yyj3492 := 0
		for ; yyj3492 < yyrr3492; yyj3492++ {
			if r.TryDecodeAsNil() {
				yyv3492[yyj3492] = ""
			} else {
				yyv3492[yyj3492] = Capability(r.DecodeString())
			}

		}
		if yyrt3492 {
			for ; yyj3492 < yyl3492; yyj3492++ {
				yyv3492 = append(yyv3492, "")
				if r.TryDecodeAsNil() {
					yyv3492[yyj3492] = ""
				} else {
					yyv3492[yyj3492] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3492 := 0; !r.CheckBreak(); yyj3492++ {
			if yyj3492 >= len(yyv3492) {
				yyv3492 = append(yyv3492, "") // var yyz3492 Capability
				yyc3492 = true
			}

			if yyj3492 < len(yyv3492) {
				if r.TryDecodeAsNil() {
					yyv3492[yyj3492] = ""
				} else {
					yyv3492[yyj3492] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3492.End()
	}
	if yyc3492 {
		*v = yyv3492
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3496 := range v {
		yy3497 := &yyv3496
		yy3497.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3498 := *v
	yyh3498, yyl3498 := z.DecSliceHelperStart()

	var yyrr3498, yyrl3498 int
	var yyc3498, yyrt3498 bool
	_, _, _ = yyc3498, yyrt3498, yyrl3498
	yyrr3498 = yyl3498

	if yyv3498 == nil {
		if yyrl3498, yyrt3498 = z.DecInferLen(yyl3498, z.DecBasicHandle().MaxInitLen, 64); yyrt3498 {
			yyrr3498 = yyrl3498
		}
		yyv3498 = make([]ContainerPort, yyrl3498)
		yyc3498 = true
	}

	if yyl3498 == 0 {
		if len(yyv3498) != 0 {
			yyv3498 = yyv3498[:0]
			yyc3498 = true
		}
	} else if yyl3498 > 0 {

		if yyl3498 > cap(yyv3498) {
			yyrl3498, yyrt3498 = z.DecInferLen(yyl3498, z.DecBasicHandle().MaxInitLen, 64)
			yyv3498 = make([]ContainerPort, yyrl3498)
			yyc3498 = true

			yyrr3498 = len(yyv3498)
		} else if yyl3498 != len(yyv3498) {
			yyv3498 = yyv3498[:yyl3498]
			yyc3498 = true
		}
		yyj3498 := 0
		for ; yyj3498 < yyrr3498; yyj3498++ {
			if r.TryDecodeAsNil() {
				yyv3498[yyj3498] = ContainerPort{}
			} else {
				yyv3499 := &yyv3498[yyj3498]
				yyv3499.CodecDecodeSelf(d)
			}

		}
		if yyrt3498 {
			for ; yyj3498 < yyl3498; yyj3498++ {
				yyv3498 = append(yyv3498, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3498[yyj3498] = ContainerPort{}
				} else {
					yyv3500 := &yyv3498[yyj3498]
					yyv3500.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3498 := 0; !r.CheckBreak(); yyj3498++ {
			if yyj3498 >= len(yyv3498) {
				yyv3498 = append(yyv3498, ContainerPort{}) // var yyz3498 ContainerPort
				yyc3498 = true
			}

			if yyj3498 < len(yyv3498) {
				if r.TryDecodeAsNil() {
					yyv3498[yyj3498] = ContainerPort{}
				} else {
					yyv3501 := &yyv3498[yyj3498]
					yyv3501.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3498.End()
	}
	if yyc3498 {
		*v = yyv3498
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3502 := range v {
		yy3503 := &yyv3502
		yy3503.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3504 := *v
	yyh3504, yyl3504 := z.DecSliceHelperStart()

	var yyrr3504, yyrl3504 int
	var yyc3504, yyrt3504 bool
	_, _, _ = yyc3504, yyrt3504, yyrl3504
	yyrr3504 = yyl3504

	if yyv3504 == nil {
		if yyrl3504, yyrt3504 = z.DecInferLen(yyl3504, z.DecBasicHandle().MaxInitLen, 40); yyrt3504 {
			yyrr3504 = yyrl3504
		}
		yyv3504 = make([]EnvVar, yyrl3504)
		yyc3504 = true
	}

	if yyl3504 == 0 {
		if len(yyv3504) != 0 {
			yyv3504 = yyv3504[:0]
			yyc3504 = true
		}
	} else if yyl3504 > 0 {

		if yyl3504 > cap(yyv3504) {
			yyrl3504, yyrt3504 = z.DecInferLen(yyl3504, z.DecBasicHandle().MaxInitLen, 40)
			yyv3504 = make([]EnvVar, yyrl3504)
			yyc3504 = true

			yyrr3504 = len(yyv3504)
		} else if yyl3504 != len(yyv3504) {
			yyv3504 = yyv3504[:yyl3504]
			yyc3504 = true
		}
		yyj3504 := 0
		for ; yyj3504 < yyrr3504; yyj3504++ {
			if r.TryDecodeAsNil() {
				yyv3504[yyj3504] = EnvVar{}
			} else {
				yyv3505 := &yyv3504[yyj3504]
				yyv3505.CodecDecodeSelf(d)
			}

		}
		if yyrt3504 {
			for ; yyj3504 < yyl3504; yyj3504++ {
				yyv3504 = append(yyv3504, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3504[yyj3504] = EnvVar{}
				} else {
					yyv3506 := &yyv3504[yyj3504]
					yyv3506.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3504 := 0; !r.CheckBreak(); yyj3504++ {
			if yyj3504 >= len(yyv3504) {
				yyv3504 = append(yyv3504, EnvVar{}) // var yyz3504 EnvVar
				yyc3504 = true
			}

			if yyj3504 < len(yyv3504) {
				if r.TryDecodeAsNil() {
					yyv3504[yyj3504] = EnvVar{}
				} else {
					yyv3507 := &yyv3504[yyj3504]
					yyv3507.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3504.End()
	}
	if yyc3504 {
		*v = yyv3504
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3508 := range v {
		yy3509 := &yyv3508
		yy3509.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3510 := *v
	yyh3510, yyl3510 := z.DecSliceHelperStart()

	var yyrr3510, yyrl3510 int
	var yyc3510, yyrt3510 bool
	_, _, _ = yyc3510, yyrt3510, yyrl3510
	yyrr3510 = yyl3510

	if yyv3510 == nil {
		if yyrl3510, yyrt3510 = z.DecInferLen(yyl3510, z.DecBasicHandle().MaxInitLen, 40); yyrt3510 {
			yyrr3510 = yyrl3510
		}
		yyv3510 = make([]VolumeMount, yyrl3510)
		yyc3510 = true
	}

	if yyl3510 == 0 {
		if len(yyv3510) != 0 {
			yyv3510 = yyv3510[:0]
			yyc3510 = true
		}
	} else if yyl3510 > 0 {

		if yyl3510 > cap(yyv3510) {
			yyrl3510, yyrt3510 = z.DecInferLen(yyl3510, z.DecBasicHandle().MaxInitLen, 40)
			yyv3510 = make([]VolumeMount, yyrl3510)
			yyc3510 = true

			yyrr3510 = len(yyv3510)
		} else if yyl3510 != len(yyv3510) {
			yyv3510 = yyv3510[:yyl3510]
			yyc3510 = true
		}
		yyj3510 := 0
		for ; yyj3510 < yyrr3510; yyj3510++ {
			if r.TryDecodeAsNil() {
				yyv3510[yyj3510] = VolumeMount{}
			} else {
				yyv3511 := &yyv3510[yyj3510]
				yyv3511.CodecDecodeSelf(d)
			}

		}
		if yyrt3510 {
			for ; yyj3510 < yyl3510; yyj3510++ {
				yyv3510 = append(yyv3510, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3510[yyj3510] = VolumeMount{}
				} else {
					yyv3512 := &yyv3510[yyj3510]
					yyv3512.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3510 := 0; !r.CheckBreak(); yyj3510++ {
			if yyj3510 >= len(yyv3510) {
				yyv3510 = append(yyv3510, VolumeMount{}) // var yyz3510 VolumeMount
				yyc3510 = true
			}

			if yyj3510 < len(yyv3510) {
				if r.TryDecodeAsNil() {
					yyv3510[yyj3510] = VolumeMount{}
				} else {
					yyv3513 := &yyv3510[yyj3510]
					yyv3513.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3510.End()
	}
	if yyc3510 {
		*v = yyv3510
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3514 := range v {
		yy3515 := &yyv3514
		yy3515.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3516 := *v
	yyh3516, yyl3516 := z.DecSliceHelperStart()

	var yyrr3516, yyrl3516 int
	var yyc3516, yyrt3516 bool
	_, _, _ = yyc3516, yyrt3516, yyrl3516
	yyrr3516 = yyl3516

	if yyv3516 == nil {
		if yyrl3516, yyrt3516 = z.DecInferLen(yyl3516, z.DecBasicHandle().MaxInitLen, 144); yyrt3516 {
			yyrr3516 = yyrl3516
		}
		yyv3516 = make([]Volume, yyrl3516)
		yyc3516 = true
	}

	if yyl3516 == 0 {
		if len(yyv3516) != 0 {
			yyv3516 = yyv3516[:0]
			yyc3516 = true
		}
	} else if yyl3516 > 0 {

		if yyl3516 > cap(yyv3516) {
			yyrl3516, yyrt3516 = z.DecInferLen(yyl3516, z.DecBasicHandle().MaxInitLen, 144)
			yyv3516 = make([]Volume, yyrl3516)
			yyc3516 = true

			yyrr3516 = len(yyv3516)
		} else if yyl3516 != len(yyv3516) {
			yyv3516 = yyv3516[:yyl3516]
			yyc3516 = true
		}
		yyj3516 := 0
		for ; yyj3516 < yyrr3516; yyj3516++ {
			if r.TryDecodeAsNil() {
				yyv3516[yyj3516] = Volume{}
			} else {
				yyv3517 := &yyv3516[yyj3516]
				yyv3517.CodecDecodeSelf(d)
			}

		}
		if yyrt3516 {
			for ; yyj3516 < yyl3516; yyj3516++ {
				yyv3516 = append(yyv3516, Volume{})
				if r.TryDecodeAsNil() {
					yyv3516[yyj3516] = Volume{}
				} else {
					yyv3518 := &yyv3516[yyj3516]
					yyv3518.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3516 := 0; !r.CheckBreak(); yyj3516++ {
			if yyj3516 >= len(yyv3516) {
				yyv3516 = append(yyv3516, Volume{}) // var yyz3516 Volume
				yyc3516 = true
			}

			if yyj3516 < len(yyv3516) {
				if r.TryDecodeAsNil() {
					yyv3516[yyj3516] = Volume{}
				} else {
					yyv3519 := &yyv3516[yyj3516]
					yyv3519.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3516.End()
	}
	if yyc3516 {
		*v = yyv3516
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3520 := range v {
		yy3521 := &yyv3520
		yy3521.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3522 := *v
	yyh3522, yyl3522 := z.DecSliceHelperStart()

	var yyrr3522, yyrl3522 int
	var yyc3522, yyrt3522 bool
	_, _, _ = yyc3522, yyrt3522, yyrl3522
	yyrr3522 = yyl3522

	if yyv3522 == nil {
		if yyrl3522, yyrt3522 = z.DecInferLen(yyl3522, z.DecBasicHandle().MaxInitLen, 256); yyrt3522 {
			yyrr3522 = yyrl3522
		}
		yyv3522 = make([]Container, yyrl3522)
		yyc3522 = true
	}

	if yyl3522 == 0 {
		if len(yyv3522) != 0 {
			yyv3522 = yyv3522[:0]
			yyc3522 = true
		}
	} else if yyl3522 > 0 {

		if yyl3522 > cap(yyv3522) {
			yyrl3522, yyrt3522 = z.DecInferLen(yyl3522, z.DecBasicHandle().MaxInitLen, 256)
			yyv3522 = make([]Container, yyrl3522)
			yyc3522 = true

			yyrr3522 = len(yyv3522)
		} else if yyl3522 != len(yyv3522) {
			yyv3522 = yyv3522[:yyl3522]
			yyc3522 = true
		}
		yyj3522 := 0
		for ; yyj3522 < yyrr3522; yyj3522++ {
			if r.TryDecodeAsNil() {
				yyv3522[yyj3522] = Container{}
			} else {
				yyv3523 := &yyv3522[yyj3522]
				yyv3523.CodecDecodeSelf(d)
			}

		}
		if yyrt3522 {
			for ; yyj3522 < yyl3522; yyj3522++ {
				yyv3522 = append(yyv3522, Container{})
				if r.TryDecodeAsNil() {
					yyv3522[yyj3522] = Container{}
				} else {
					yyv3524 := &yyv3522[yyj3522]
					yyv3524.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3522 := 0; !r.CheckBreak(); yyj3522++ {
			if yyj3522 >= len(yyv3522) {
				yyv3522 = append(yyv3522, Container{}) // var yyz3522 Container
				yyc3522 = true
			}

			if yyj3522 < len(yyv3522) {
				if r.TryDecodeAsNil() {
					yyv3522[yyj3522] = Container{}
				} else {
					yyv3525 := &yyv3522[yyj3522]
					yyv3525.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3522.End()
	}
	if yyc3522 {
		*v = yyv3522
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3526 := range v {
		yy3527 := &yyv3526
		yy3527.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3528 := *v
	yyh3528, yyl3528 := z.DecSliceHelperStart()

	var yyrr3528, yyrl3528 int
	var yyc3528, yyrt3528 bool
	_, _, _ = yyc3528, yyrt3528, yyrl3528
	yyrr3528 = yyl3528

	if yyv3528 == nil {
		if yyrl3528, yyrt3528 = z.DecInferLen(yyl3528, z.DecBasicHandle().MaxInitLen, 16); yyrt3528 {
			yyrr3528 = yyrl3528
		}
		yyv3528 = make([]LocalObjectReference, yyrl3528)
		yyc3528 = true
	}

	if yyl3528 == 0 {
		if len(yyv3528) != 0 {
			yyv3528 = yyv3528[:0]
			yyc3528 = true
		}
	} else if yyl3528 > 0 {

		if yyl3528 > cap(yyv3528) {
			yyrl3528, yyrt3528 = z.DecInferLen(yyl3528, z.DecBasicHandle().MaxInitLen, 16)
			yyv3528 = make([]LocalObjectReference, yyrl3528)
			yyc3528 = true

			yyrr3528 = len(yyv3528)
		} else if yyl3528 != len(yyv3528) {
			yyv3528 = yyv3528[:yyl3528]
			yyc3528 = true
		}
		yyj3528 := 0
		for ; yyj3528 < yyrr3528; yyj3528++ {
			if r.TryDecodeAsNil() {
				yyv3528[yyj3528] = LocalObjectReference{}
			} else {
				yyv3529 := &yyv3528[yyj3528]
				yyv3529.CodecDecodeSelf(d)
			}

		}
		if yyrt3528 {
			for ; yyj3528 < yyl3528; yyj3528++ {
				yyv3528 = append(yyv3528, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3528[yyj3528] = LocalObjectReference{}
				} else {
					yyv3530 := &yyv3528[yyj3528]
					yyv3530.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3528 := 0; !r.CheckBreak(); yyj3528++ {
			if yyj3528 >= len(yyv3528) {
				yyv3528 = append(yyv3528, LocalObjectReference{}) // var yyz3528 LocalObjectReference
				yyc3528 = true
			}

			if yyj3528 < len(yyv3528) {
				if r.TryDecodeAsNil() {
					yyv3528[yyj3528] = LocalObjectReference{}
				} else {
					yyv3531 := &yyv3528[yyj3528]
					yyv3531.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3528.End()
	}
	if yyc3528 {
		*v = yyv3528
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3532 := range v {
		yy3533 := &yyv3532
		yy3533.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3534 := *v
	yyh3534, yyl3534 := z.DecSliceHelperStart()

	var yyrr3534, yyrl3534 int
	var yyc3534, yyrt3534 bool
	_, _, _ = yyc3534, yyrt3534, yyrl3534
	yyrr3534 = yyl3534

	if yyv3534 == nil {
		if yyrl3534, yyrt3534 = z.DecInferLen(yyl3534, z.DecBasicHandle().MaxInitLen, 112); yyrt3534 {
			yyrr3534 = yyrl3534
		}
		yyv3534 = make([]PodCondition, yyrl3534)
		yyc3534 = true
	}

	if yyl3534 == 0 {
		if len(yyv3534) != 0 {
			yyv3534 = yyv3534[:0]
			yyc3534 = true
		}
	} else if yyl3534 > 0 {

		if yyl3534 > cap(yyv3534) {
			yyrl3534, yyrt3534 = z.DecInferLen(yyl3534, z.DecBasicHandle().MaxInitLen, 112)
			yyv3534 = make([]PodCondition, yyrl3534)
			yyc3534 = true

			yyrr3534 = len(yyv3534)
		} else if yyl3534 != len(yyv3534) {
			yyv3534 = yyv3534[:yyl3534]
			yyc3534 = true
		}
		yyj3534 := 0
		for ; yyj3534 < yyrr3534; yyj3534++ {
			if r.TryDecodeAsNil() {
				yyv3534[yyj3534] = PodCondition{}
			} else {
				yyv3535 := &yyv3534[yyj3534]
				yyv3535.CodecDecodeSelf(d)
			}

		}
		if yyrt3534 {
			for ; yyj3534 < yyl3534; yyj3534++ {
				yyv3534 = append(yyv3534, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3534[yyj3534] = PodCondition{}
				} else {
					yyv3536 := &yyv3534[yyj3534]
					yyv3536.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3534 := 0; !r.CheckBreak(); yyj3534++ {
			if yyj3534 >= len(yyv3534) {
				yyv3534 = append(yyv3534, PodCondition{}) // var yyz3534 PodCondition
				yyc3534 = true
			}

			if yyj3534 < len(yyv3534) {
				if r.TryDecodeAsNil() {
					yyv3534[yyj3534] = PodCondition{}
				} else {
					yyv3537 := &yyv3534[yyj3534]
					yyv3537.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3534.End()
	}
	if yyc3534 {
		*v = yyv3534
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3538 := range v {
		yy3539 := &yyv3538
		yy3539.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3540 := *v
	yyh3540, yyl3540 := z.DecSliceHelperStart()

	var yyrr3540, yyrl3540 int
	var yyc3540, yyrt3540 bool
	_, _, _ = yyc3540, yyrt3540, yyrl3540
	yyrr3540 = yyl3540

	if yyv3540 == nil {
		if yyrl3540, yyrt3540 = z.DecInferLen(yyl3540, z.DecBasicHandle().MaxInitLen, 128); yyrt3540 {
			yyrr3540 = yyrl3540
		}
		yyv3540 = make([]ContainerStatus, yyrl3540)
		yyc3540 = true
	}

	if yyl3540 == 0 {
		if len(yyv3540) != 0 {
			yyv3540 = yyv3540[:0]
			yyc3540 = true
		}
	} else if yyl3540 > 0 {

		if yyl3540 > cap(yyv3540) {
			yyrl3540, yyrt3540 = z.DecInferLen(yyl3540, z.DecBasicHandle().MaxInitLen, 128)
			yyv3540 = make([]ContainerStatus, yyrl3540)
			yyc3540 = true

			yyrr3540 = len(yyv3540)
		} else if yyl3540 != len(yyv3540) {
			yyv3540 = yyv3540[:yyl3540]
			yyc3540 = true
		}
		yyj3540 := 0
		for ; yyj3540 < yyrr3540; yyj3540++ {
			if r.TryDecodeAsNil() {
				yyv3540[yyj3540] = ContainerStatus{}
			} else {
				yyv3541 := &yyv3540[yyj3540]
				yyv3541.CodecDecodeSelf(d)
			}

		}
		if yyrt3540 {
			for ; yyj3540 < yyl3540; yyj3540++ {
				yyv3540 = append(yyv3540, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3540[yyj3540] = ContainerStatus{}
				} else {
					yyv3542 := &yyv3540[yyj3540]
					yyv3542.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3540 := 0; !r.CheckBreak(); yyj3540++ {
			if yyj3540 >= len(yyv3540) {
				yyv3540 = append(yyv3540, ContainerStatus{}) // var yyz3540 ContainerStatus
				yyc3540 = true
			}

			if yyj3540 < len(yyv3540) {
				if r.TryDecodeAsNil() {
					yyv3540[yyj3540] = ContainerStatus{}
				} else {
					yyv3543 := &yyv3540[yyj3540]
					yyv3543.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3540.End()
	}
	if yyc3540 {
		*v = yyv3540
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3544 := range v {
		yy3545 := &yyv3544
		yy3545.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3546 := *v
	yyh3546, yyl3546 := z.DecSliceHelperStart()

	var yyrr3546, yyrl3546 int
	var yyc3546, yyrt3546 bool
	_, _, _ = yyc3546, yyrt3546, yyrl3546
	yyrr3546 = yyl3546

	if yyv3546 == nil {
		if yyrl3546, yyrt3546 = z.DecInferLen(yyl3546, z.DecBasicHandle().MaxInitLen, 528); yyrt3546 {
			yyrr3546 = yyrl3546
		}
		yyv3546 = make([]Pod, yyrl3546)
		yyc3546 = true
	}

	if yyl3546 == 0 {
		if len(yyv3546) != 0 {
			yyv3546 = yyv3546[:0]
			yyc3546 = true
		}
	} else if yyl3546 > 0 {

		if yyl3546 > cap(yyv3546) {
			yyrl3546, yyrt3546 = z.DecInferLen(yyl3546, z.DecBasicHandle().MaxInitLen, 528)
			yyv3546 = make([]Pod, yyrl3546)
			yyc3546 = true

			yyrr3546 = len(yyv3546)
		} else if yyl3546 != len(yyv3546) {
			yyv3546 = yyv3546[:yyl3546]
			yyc3546 = true
		}
		yyj3546 := 0
		for ; yyj3546 < yyrr3546; yyj3546++ {
			if r.TryDecodeAsNil() {
				yyv3546[yyj3546] = Pod{}
			} else {
				yyv3547 := &yyv3546[yyj3546]
				yyv3547.CodecDecodeSelf(d)
			}

		}
		if yyrt3546 {
			for ; yyj3546 < yyl3546; yyj3546++ {
				yyv3546 = append(yyv3546, Pod{})
				if r.TryDecodeAsNil() {
					yyv3546[yyj3546] = Pod{}
				} else {
					yyv3548 := &yyv3546[yyj3546]
					yyv3548.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3546 := 0; !r.CheckBreak(); yyj3546++ {
			if yyj3546 >= len(yyv3546) {
				yyv3546 = append(yyv3546, Pod{}) // var yyz3546 Pod
				yyc3546 = true
			}

			if yyj3546 < len(yyv3546) {
				if r.TryDecodeAsNil() {
					yyv3546[yyj3546] = Pod{}
				} else {
					yyv3549 := &yyv3546[yyj3546]
					yyv3549.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3546.End()
	}
	if yyc3546 {
		*v = yyv3546
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3550 := range v {
		yy3551 := &yyv3550
		yy3551.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3552 := *v
	yyh3552, yyl3552 := z.DecSliceHelperStart()

	var yyrr3552, yyrl3552 int
	var yyc3552, yyrt3552 bool
	_, _, _ = yyc3552, yyrt3552, yyrl3552
	yyrr3552 = yyl3552

	if yyv3552 == nil {
		if yyrl3552, yyrt3552 = z.DecInferLen(yyl3552, z.DecBasicHandle().MaxInitLen, 552); yyrt3552 {
			yyrr3552 = yyrl3552
		}
		yyv3552 = make([]PodTemplate, yyrl3552)
		yyc3552 = true
	}

	if yyl3552 == 0 {
		if len(yyv3552) != 0 {
			yyv3552 = yyv3552[:0]
			yyc3552 = true
		}
	} else if yyl3552 > 0 {

		if yyl3552 > cap(yyv3552) {
			yyrl3552, yyrt3552 = z.DecInferLen(yyl3552, z.DecBasicHandle().MaxInitLen, 552)
			yyv3552 = make([]PodTemplate, yyrl3552)
			yyc3552 = true

			yyrr3552 = len(yyv3552)
		} else if yyl3552 != len(yyv3552) {
			yyv3552 = yyv3552[:yyl3552]
			yyc3552 = true
		}
		yyj3552 := 0
		for ; yyj3552 < yyrr3552; yyj3552++ {
			if r.TryDecodeAsNil() {
				yyv3552[yyj3552] = PodTemplate{}
			} else {
				yyv3553 := &yyv3552[yyj3552]
				yyv3553.CodecDecodeSelf(d)
			}

		}
		if yyrt3552 {
			for ; yyj3552 < yyl3552; yyj3552++ {
				yyv3552 = append(yyv3552, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3552[yyj3552] = PodTemplate{}
				} else {
					yyv3554 := &yyv3552[yyj3552]
					yyv3554.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3552 := 0; !r.CheckBreak(); yyj3552++ {
			if yyj3552 >= len(yyv3552) {
				yyv3552 = append(yyv3552, PodTemplate{}) // var yyz3552 PodTemplate
				yyc3552 = true
			}

			if yyj3552 < len(yyv3552) {
				if r.TryDecodeAsNil() {
					yyv3552[yyj3552] = PodTemplate{}
				} else {
					yyv3555 := &yyv3552[yyj3552]
					yyv3555.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3552.End()
	}
	if yyc3552 {
		*v = yyv3552
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3556 := range v {
		yy3557 := &yyv3556
		yy3557.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3558 := *v
	yyh3558, yyl3558 := z.DecSliceHelperStart()

	var yyrr3558, yyrl3558 int
	var yyc3558, yyrt3558 bool
	_, _, _ = yyc3558, yyrt3558, yyrl3558
	yyrr3558 = yyl3558

	if yyv3558 == nil {
		if yyrl3558, yyrt3558 = z.DecInferLen(yyl3558, z.DecBasicHandle().MaxInitLen, 232); yyrt3558 {
			yyrr3558 = yyrl3558
		}
		yyv3558 = make([]ReplicationController, yyrl3558)
		yyc3558 = true
	}

	if yyl3558 == 0 {
		if len(yyv3558) != 0 {
			yyv3558 = yyv3558[:0]
			yyc3558 = true
		}
	} else if yyl3558 > 0 {

		if yyl3558 > cap(yyv3558) {
			yyrl3558, yyrt3558 = z.DecInferLen(yyl3558, z.DecBasicHandle().MaxInitLen, 232)
			yyv3558 = make([]ReplicationController, yyrl3558)
			yyc3558 = true

			yyrr3558 = len(yyv3558)
		} else if yyl3558 != len(yyv3558) {
			yyv3558 = yyv3558[:yyl3558]
			yyc3558 = true
		}
		yyj3558 := 0
		for ; yyj3558 < yyrr3558; yyj3558++ {
			if r.TryDecodeAsNil() {
				yyv3558[yyj3558] = ReplicationController{}
			} else {
				yyv3559 := &yyv3558[yyj3558]
				yyv3559.CodecDecodeSelf(d)
			}

		}
		if yyrt3558 {
			for ; yyj3558 < yyl3558; yyj3558++ {
				yyv3558 = append(yyv3558, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3558[yyj3558] = ReplicationController{}
				} else {
					yyv3560 := &yyv3558[yyj3558]
					yyv3560.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3558 := 0; !r.CheckBreak(); yyj3558++ {
			if yyj3558 >= len(yyv3558) {
				yyv3558 = append(yyv3558, ReplicationController{}) // var yyz3558 ReplicationController
				yyc3558 = true
			}

			if yyj3558 < len(yyv3558) {
				if r.TryDecodeAsNil() {
					yyv3558[yyj3558] = ReplicationController{}
				} else {
					yyv3561 := &yyv3558[yyj3558]
					yyv3561.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3558.End()
	}
	if yyc3558 {
		*v = yyv3558
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3562 := range v {
		yy3563 := &yyv3562
		yy3563.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3564 := *v
	yyh3564, yyl3564 := z.DecSliceHelperStart()

	var yyrr3564, yyrl3564 int
	var yyc3564, yyrt3564 bool
	_, _, _ = yyc3564, yyrt3564, yyrl3564
	yyrr3564 = yyl3564

	if yyv3564 == nil {
		if yyrl3564, yyrt3564 = z.DecInferLen(yyl3564, z.DecBasicHandle().MaxInitLen, 32); yyrt3564 {
			yyrr3564 = yyrl3564
		}
		yyv3564 = make([]LoadBalancerIngress, yyrl3564)
		yyc3564 = true
	}

	if yyl3564 == 0 {
		if len(yyv3564) != 0 {
			yyv3564 = yyv3564[:0]
			yyc3564 = true
		}
	} else if yyl3564 > 0 {

		if yyl3564 > cap(yyv3564) {
			yyrl3564, yyrt3564 = z.DecInferLen(yyl3564, z.DecBasicHandle().MaxInitLen, 32)
			yyv3564 = make([]LoadBalancerIngress, yyrl3564)
			yyc3564 = true

			yyrr3564 = len(yyv3564)
		} else if yyl3564 != len(yyv3564) {
			yyv3564 = yyv3564[:yyl3564]
			yyc3564 = true
		}
		yyj3564 := 0
		for ; yyj3564 < yyrr3564; yyj3564++ {
			if r.TryDecodeAsNil() {
				yyv3564[yyj3564] = LoadBalancerIngress{}
			} else {
				yyv3565 := &yyv3564[yyj3564]
				yyv3565.CodecDecodeSelf(d)
			}

		}
		if yyrt3564 {
			for ; yyj3564 < yyl3564; yyj3564++ {
				yyv3564 = append(yyv3564, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3564[yyj3564] = LoadBalancerIngress{}
				} else {
					yyv3566 := &yyv3564[yyj3564]
					yyv3566.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3564 := 0; !r.CheckBreak(); yyj3564++ {
			if yyj3564 >= len(yyv3564) {
				yyv3564 = append(yyv3564, LoadBalancerIngress{}) // var yyz3564 LoadBalancerIngress
				yyc3564 = true
			}

			if yyj3564 < len(yyv3564) {
				if r.TryDecodeAsNil() {
					yyv3564[yyj3564] = LoadBalancerIngress{}
				} else {
					yyv3567 := &yyv3564[yyj3564]
					yyv3567.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3564.End()
	}
	if yyc3564 {
		*v = yyv3564
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3568 := range v {
		yy3569 := &yyv3568
		yy3569.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3570 := *v
	yyh3570, yyl3570 := z.DecSliceHelperStart()

	var yyrr3570, yyrl3570 int
	var yyc3570, yyrt3570 bool
	_, _, _ = yyc3570, yyrt3570, yyrl3570
	yyrr3570 = yyl3570

	if yyv3570 == nil {
		if yyrl3570, yyrt3570 = z.DecInferLen(yyl3570, z.DecBasicHandle().MaxInitLen, 80); yyrt3570 {
			yyrr3570 = yyrl3570
		}
		yyv3570 = make([]ServicePort, yyrl3570)
		yyc3570 = true
	}

	if yyl3570 == 0 {
		if len(yyv3570) != 0 {
			yyv3570 = yyv3570[:0]
			yyc3570 = true
		}
	} else if yyl3570 > 0 {

		if yyl3570 > cap(yyv3570) {
			yyrl3570, yyrt3570 = z.DecInferLen(yyl3570, z.DecBasicHandle().MaxInitLen, 80)
			yyv3570 = make([]ServicePort, yyrl3570)
			yyc3570 = true

			yyrr3570 = len(yyv3570)
		} else if yyl3570 != len(yyv3570) {
			yyv3570 = yyv3570[:yyl3570]
			yyc3570 = true
		}
		yyj3570 := 0
		for ; yyj3570 < yyrr3570; yyj3570++ {
			if r.TryDecodeAsNil() {
				yyv3570[yyj3570] = ServicePort{}
			} else {
				yyv3571 := &yyv3570[yyj3570]
				yyv3571.CodecDecodeSelf(d)
			}

		}
		if yyrt3570 {
			for ; yyj3570 < yyl3570; yyj3570++ {
				yyv3570 = append(yyv3570, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3570[yyj3570] = ServicePort{}
				} else {
					yyv3572 := &yyv3570[yyj3570]
					yyv3572.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3570 := 0; !r.CheckBreak(); yyj3570++ {
			if yyj3570 >= len(yyv3570) {
				yyv3570 = append(yyv3570, ServicePort{}) // var yyz3570 ServicePort
				yyc3570 = true
			}

			if yyj3570 < len(yyv3570) {
				if r.TryDecodeAsNil() {
					yyv3570[yyj3570] = ServicePort{}
				} else {
					yyv3573 := &yyv3570[yyj3570]
					yyv3573.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3570.End()
	}
	if yyc3570 {
		*v = yyv3570
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3574 := range v {
		yy3575 := &yyv3574
		yy3575.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3576 := *v
	yyh3576, yyl3576 := z.DecSliceHelperStart()

	var yyrr3576, yyrl3576 int
	var yyc3576, yyrt3576 bool
	_, _, _ = yyc3576, yyrt3576, yyrl3576
	yyrr3576 = yyl3576

	if yyv3576 == nil {
		if yyrl3576, yyrt3576 = z.DecInferLen(yyl3576, z.DecBasicHandle().MaxInitLen, 360); yyrt3576 {
			yyrr3576 = yyrl3576
		}
		yyv3576 = make([]Service, yyrl3576)
		yyc3576 = true
	}

	if yyl3576 == 0 {
		if len(yyv3576) != 0 {
			yyv3576 = yyv3576[:0]
			yyc3576 = true
		}
	} else if yyl3576 > 0 {

		if yyl3576 > cap(yyv3576) {
			yyrl3576, yyrt3576 = z.DecInferLen(yyl3576, z.DecBasicHandle().MaxInitLen, 360)
			yyv3576 = make([]Service, yyrl3576)
			yyc3576 = true

			yyrr3576 = len(yyv3576)
		} else if yyl3576 != len(yyv3576) {
			yyv3576 = yyv3576[:yyl3576]
			yyc3576 = true
		}
		yyj3576 := 0
		for ; yyj3576 < yyrr3576; yyj3576++ {
			if r.TryDecodeAsNil() {
				yyv3576[yyj3576] = Service{}
			} else {
				yyv3577 := &yyv3576[yyj3576]
				yyv3577.CodecDecodeSelf(d)
			}

		}
		if yyrt3576 {
			for ; yyj3576 < yyl3576; yyj3576++ {
				yyv3576 = append(yyv3576, Service{})
				if r.TryDecodeAsNil() {
					yyv3576[yyj3576] = Service{}
				} else {
					yyv3578 := &yyv3576[yyj3576]
					yyv3578.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3576 := 0; !r.CheckBreak(); yyj3576++ {
			if yyj3576 >= len(yyv3576) {
				yyv3576 = append(yyv3576, Service{}) // var yyz3576 Service
				yyc3576 = true
			}

			if yyj3576 < len(yyv3576) {
				if r.TryDecodeAsNil() {
					yyv3576[yyj3576] = Service{}
				} else {
					yyv3579 := &yyv3576[yyj3576]
					yyv3579.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3576.End()
	}
	if yyc3576 {
		*v = yyv3576
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3580 := range v {
		yy3581 := &yyv3580
		yy3581.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3582 := *v
	yyh3582, yyl3582 := z.DecSliceHelperStart()

	var yyrr3582, yyrl3582 int
	var yyc3582, yyrt3582 bool
	_, _, _ = yyc3582, yyrt3582, yyrl3582
	yyrr3582 = yyl3582

	if yyv3582 == nil {
		if yyrl3582, yyrt3582 = z.DecInferLen(yyl3582, z.DecBasicHandle().MaxInitLen, 112); yyrt3582 {
			yyrr3582 = yyrl3582
		}
		yyv3582 = make([]ObjectReference, yyrl3582)
		yyc3582 = true
	}

	if yyl3582 == 0 {
		if len(yyv3582) != 0 {
			yyv3582 = yyv3582[:0]
			yyc3582 = true
		}
	} else if yyl3582 > 0 {

		if yyl3582 > cap(yyv3582) {
			yyrl3582, yyrt3582 = z.DecInferLen(yyl3582, z.DecBasicHandle().MaxInitLen, 112)
			yyv3582 = make([]ObjectReference, yyrl3582)
			yyc3582 = true

			yyrr3582 = len(yyv3582)
		} else if yyl3582 != len(yyv3582) {
			yyv3582 = yyv3582[:yyl3582]
			yyc3582 = true
		}
		yyj3582 := 0
		for ; yyj3582 < yyrr3582; yyj3582++ {
			if r.TryDecodeAsNil() {
				yyv3582[yyj3582] = ObjectReference{}
			} else {
				yyv3583 := &yyv3582[yyj3582]
				yyv3583.CodecDecodeSelf(d)
			}

		}
		if yyrt3582 {
			for ; yyj3582 < yyl3582; yyj3582++ {
				yyv3582 = append(yyv3582, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3582[yyj3582] = ObjectReference{}
				} else {
					yyv3584 := &yyv3582[yyj3582]
					yyv3584.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3582 := 0; !r.CheckBreak(); yyj3582++ {
			if yyj3582 >= len(yyv3582) {
				yyv3582 = append(yyv3582, ObjectReference{}) // var yyz3582 ObjectReference
				yyc3582 = true
			}

			if yyj3582 < len(yyv3582) {
				if r.TryDecodeAsNil() {
					yyv3582[yyj3582] = ObjectReference{}
				} else {
					yyv3585 := &yyv3582[yyj3582]
					yyv3585.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3582.End()
	}
	if yyc3582 {
		*v = yyv3582
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3586 := range v {
		yy3587 := &yyv3586
		yy3587.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3588 := *v
	yyh3588, yyl3588 := z.DecSliceHelperStart()

	var yyrr3588, yyrl3588 int
	var yyc3588, yyrt3588 bool
	_, _, _ = yyc3588, yyrt3588, yyrl3588
	yyrr3588 = yyl3588

	if yyv3588 == nil {
		if yyrl3588, yyrt3588 = z.DecInferLen(yyl3588, z.DecBasicHandle().MaxInitLen, 240); yyrt3588 {
			yyrr3588 = yyrl3588
		}
		yyv3588 = make([]ServiceAccount, yyrl3588)
		yyc3588 = true
	}

	if yyl3588 == 0 {
		if len(yyv3588) != 0 {
			yyv3588 = yyv3588[:0]
			yyc3588 = true
		}
	} else if yyl3588 > 0 {

		if yyl3588 > cap(yyv3588) {
			yyrl3588, yyrt3588 = z.DecInferLen(yyl3588, z.DecBasicHandle().MaxInitLen, 240)
			yyv3588 = make([]ServiceAccount, yyrl3588)
			yyc3588 = true

			yyrr3588 = len(yyv3588)
		} else if yyl3588 != len(yyv3588) {
			yyv3588 = yyv3588[:yyl3588]
			yyc3588 = true
		}
		yyj3588 := 0
		for ; yyj3588 < yyrr3588; yyj3588++ {
			if r.TryDecodeAsNil() {
				yyv3588[yyj3588] = ServiceAccount{}
			} else {
				yyv3589 := &yyv3588[yyj3588]
				yyv3589.CodecDecodeSelf(d)
			}

		}
		if yyrt3588 {
			for ; yyj3588 < yyl3588; yyj3588++ {
				yyv3588 = append(yyv3588, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3588[yyj3588] = ServiceAccount{}
				} else {
					yyv3590 := &yyv3588[yyj3588]
					yyv3590.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3588 := 0; !r.CheckBreak(); yyj3588++ {
			if yyj3588 >= len(yyv3588) {
				yyv3588 = append(yyv3588, ServiceAccount{}) // var yyz3588 ServiceAccount
				yyc3588 = true
			}

			if yyj3588 < len(yyv3588) {
				if r.TryDecodeAsNil() {
					yyv3588[yyj3588] = ServiceAccount{}
				} else {
					yyv3591 := &yyv3588[yyj3588]
					yyv3591.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3588.End()
	}
	if yyc3588 {
		*v = yyv3588
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3592 := range v {
		yy3593 := &yyv3592
		yy3593.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3594 := *v
	yyh3594, yyl3594 := z.DecSliceHelperStart()

	var yyrr3594, yyrl3594 int
	var yyc3594, yyrt3594 bool
	_, _, _ = yyc3594, yyrt3594, yyrl3594
	yyrr3594 = yyl3594

	if yyv3594 == nil {
		if yyrl3594, yyrt3594 = z.DecInferLen(yyl3594, z.DecBasicHandle().MaxInitLen, 72); yyrt3594 {
			yyrr3594 = yyrl3594
		}
		yyv3594 = make([]EndpointSubset, yyrl3594)
		yyc3594 = true
	}

	if yyl3594 == 0 {
		if len(yyv3594) != 0 {
			yyv3594 = yyv3594[:0]
			yyc3594 = true
		}
	} else if yyl3594 > 0 {

		if yyl3594 > cap(yyv3594) {
			yyrl3594, yyrt3594 = z.DecInferLen(yyl3594, z.DecBasicHandle().MaxInitLen, 72)
			yyv3594 = make([]EndpointSubset, yyrl3594)
			yyc3594 = true

			yyrr3594 = len(yyv3594)
		} else if yyl3594 != len(yyv3594) {
			yyv3594 = yyv3594[:yyl3594]
			yyc3594 = true
		}
		yyj3594 := 0
		for ; yyj3594 < yyrr3594; yyj3594++ {
			if r.TryDecodeAsNil() {
				yyv3594[yyj3594] = EndpointSubset{}
			} else {
				yyv3595 := &yyv3594[yyj3594]
				yyv3595.CodecDecodeSelf(d)
			}

		}
		if yyrt3594 {
			for ; yyj3594 < yyl3594; yyj3594++ {
				yyv3594 = append(yyv3594, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3594[yyj3594] = EndpointSubset{}
				} else {
					yyv3596 := &yyv3594[yyj3594]
					yyv3596.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3594 := 0; !r.CheckBreak(); yyj3594++ {
			if yyj3594 >= len(yyv3594) {
				yyv3594 = append(yyv3594, EndpointSubset{}) // var yyz3594 EndpointSubset
				yyc3594 = true
			}

			if yyj3594 < len(yyv3594) {
				if r.TryDecodeAsNil() {
					yyv3594[yyj3594] = EndpointSubset{}
				} else {
					yyv3597 := &yyv3594[yyj3594]
					yyv3597.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3594.End()
	}
	if yyc3594 {
		*v = yyv3594
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3598 := range v {
		yy3599 := &yyv3598
		yy3599.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3600 := *v
	yyh3600, yyl3600 := z.DecSliceHelperStart()

	var yyrr3600, yyrl3600 int
	var yyc3600, yyrt3600 bool
	_, _, _ = yyc3600, yyrt3600, yyrl3600
	yyrr3600 = yyl3600

	if yyv3600 == nil {
		if yyrl3600, yyrt3600 = z.DecInferLen(yyl3600, z.DecBasicHandle().MaxInitLen, 24); yyrt3600 {
			yyrr3600 = yyrl3600
		}
		yyv3600 = make([]EndpointAddress, yyrl3600)
		yyc3600 = true
	}

	if yyl3600 == 0 {
		if len(yyv3600) != 0 {
			yyv3600 = yyv3600[:0]
			yyc3600 = true
		}
	} else if yyl3600 > 0 {

		if yyl3600 > cap(yyv3600) {
			yyrl3600, yyrt3600 = z.DecInferLen(yyl3600, z.DecBasicHandle().MaxInitLen, 24)
			yyv3600 = make([]EndpointAddress, yyrl3600)
			yyc3600 = true

			yyrr3600 = len(yyv3600)
		} else if yyl3600 != len(yyv3600) {
			yyv3600 = yyv3600[:yyl3600]
			yyc3600 = true
		}
		yyj3600 := 0
		for ; yyj3600 < yyrr3600; yyj3600++ {
			if r.TryDecodeAsNil() {
				yyv3600[yyj3600] = EndpointAddress{}
			} else {
				yyv3601 := &yyv3600[yyj3600]
				yyv3601.CodecDecodeSelf(d)
			}

		}
		if yyrt3600 {
			for ; yyj3600 < yyl3600; yyj3600++ {
				yyv3600 = append(yyv3600, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3600[yyj3600] = EndpointAddress{}
				} else {
					yyv3602 := &yyv3600[yyj3600]
					yyv3602.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3600 := 0; !r.CheckBreak(); yyj3600++ {
			if yyj3600 >= len(yyv3600) {
				yyv3600 = append(yyv3600, EndpointAddress{}) // var yyz3600 EndpointAddress
				yyc3600 = true
			}

			if yyj3600 < len(yyv3600) {
				if r.TryDecodeAsNil() {
					yyv3600[yyj3600] = EndpointAddress{}
				} else {
					yyv3603 := &yyv3600[yyj3600]
					yyv3603.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3600.End()
	}
	if yyc3600 {
		*v = yyv3600
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3604 := range v {
		yy3605 := &yyv3604
		yy3605.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3606 := *v
	yyh3606, yyl3606 := z.DecSliceHelperStart()

	var yyrr3606, yyrl3606 int
	var yyc3606, yyrt3606 bool
	_, _, _ = yyc3606, yyrt3606, yyrl3606
	yyrr3606 = yyl3606

	if yyv3606 == nil {
		if yyrl3606, yyrt3606 = z.DecInferLen(yyl3606, z.DecBasicHandle().MaxInitLen, 40); yyrt3606 {
			yyrr3606 = yyrl3606
		}
		yyv3606 = make([]EndpointPort, yyrl3606)
		yyc3606 = true
	}

	if yyl3606 == 0 {
		if len(yyv3606) != 0 {
			yyv3606 = yyv3606[:0]
			yyc3606 = true
		}
	} else if yyl3606 > 0 {

		if yyl3606 > cap(yyv3606) {
			yyrl3606, yyrt3606 = z.DecInferLen(yyl3606, z.DecBasicHandle().MaxInitLen, 40)
			yyv3606 = make([]EndpointPort, yyrl3606)
			yyc3606 = true

			yyrr3606 = len(yyv3606)
		} else if yyl3606 != len(yyv3606) {
			yyv3606 = yyv3606[:yyl3606]
			yyc3606 = true
		}
		yyj3606 := 0
		for ; yyj3606 < yyrr3606; yyj3606++ {
			if r.TryDecodeAsNil() {
				yyv3606[yyj3606] = EndpointPort{}
			} else {
				yyv3607 := &yyv3606[yyj3606]
				yyv3607.CodecDecodeSelf(d)
			}

		}
		if yyrt3606 {
			for ; yyj3606 < yyl3606; yyj3606++ {
				yyv3606 = append(yyv3606, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3606[yyj3606] = EndpointPort{}
				} else {
					yyv3608 := &yyv3606[yyj3606]
					yyv3608.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3606 := 0; !r.CheckBreak(); yyj3606++ {
			if yyj3606 >= len(yyv3606) {
				yyv3606 = append(yyv3606, EndpointPort{}) // var yyz3606 EndpointPort
				yyc3606 = true
			}

			if yyj3606 < len(yyv3606) {
				if r.TryDecodeAsNil() {
					yyv3606[yyj3606] = EndpointPort{}
				} else {
					yyv3609 := &yyv3606[yyj3606]
					yyv3609.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3606.End()
	}
	if yyc3606 {
		*v = yyv3606
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3610 := range v {
		yy3611 := &yyv3610
		yy3611.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3612 := *v
	yyh3612, yyl3612 := z.DecSliceHelperStart()

	var yyrr3612, yyrl3612 int
	var yyc3612, yyrt3612 bool
	_, _, _ = yyc3612, yyrt3612, yyrl3612
	yyrr3612 = yyl3612

	if yyv3612 == nil {
		if yyrl3612, yyrt3612 = z.DecInferLen(yyl3612, z.DecBasicHandle().MaxInitLen, 216); yyrt3612 {
			yyrr3612 = yyrl3612
		}
		yyv3612 = make([]Endpoints, yyrl3612)
		yyc3612 = true
	}

	if yyl3612 == 0 {
		if len(yyv3612) != 0 {
			yyv3612 = yyv3612[:0]
			yyc3612 = true
		}
	} else if yyl3612 > 0 {

		if yyl3612 > cap(yyv3612) {
			yyrl3612, yyrt3612 = z.DecInferLen(yyl3612, z.DecBasicHandle().MaxInitLen, 216)
			yyv3612 = make([]Endpoints, yyrl3612)
			yyc3612 = true

			yyrr3612 = len(yyv3612)
		} else if yyl3612 != len(yyv3612) {
			yyv3612 = yyv3612[:yyl3612]
			yyc3612 = true
		}
		yyj3612 := 0
		for ; yyj3612 < yyrr3612; yyj3612++ {
			if r.TryDecodeAsNil() {
				yyv3612[yyj3612] = Endpoints{}
			} else {
				yyv3613 := &yyv3612[yyj3612]
				yyv3613.CodecDecodeSelf(d)
			}

		}
		if yyrt3612 {
			for ; yyj3612 < yyl3612; yyj3612++ {
				yyv3612 = append(yyv3612, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3612[yyj3612] = Endpoints{}
				} else {
					yyv3614 := &yyv3612[yyj3612]
					yyv3614.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3612 := 0; !r.CheckBreak(); yyj3612++ {
			if yyj3612 >= len(yyv3612) {
				yyv3612 = append(yyv3612, Endpoints{}) // var yyz3612 Endpoints
				yyc3612 = true
			}

			if yyj3612 < len(yyv3612) {
				if r.TryDecodeAsNil() {
					yyv3612[yyj3612] = Endpoints{}
				} else {
					yyv3615 := &yyv3612[yyj3612]
					yyv3615.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3612.End()
	}
	if yyc3612 {
		*v = yyv3612
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3616 := range v {
		yy3617 := &yyv3616
		yy3617.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3618 := *v
	yyh3618, yyl3618 := z.DecSliceHelperStart()

	var yyrr3618, yyrl3618 int
	var yyc3618, yyrt3618 bool
	_, _, _ = yyc3618, yyrt3618, yyrl3618
	yyrr3618 = yyl3618

	if yyv3618 == nil {
		if yyrl3618, yyrt3618 = z.DecInferLen(yyl3618, z.DecBasicHandle().MaxInitLen, 112); yyrt3618 {
			yyrr3618 = yyrl3618
		}
		yyv3618 = make([]NodeCondition, yyrl3618)
		yyc3618 = true
	}

	if yyl3618 == 0 {
		if len(yyv3618) != 0 {
			yyv3618 = yyv3618[:0]
			yyc3618 = true
		}
	} else if yyl3618 > 0 {

		if yyl3618 > cap(yyv3618) {
			yyrl3618, yyrt3618 = z.DecInferLen(yyl3618, z.DecBasicHandle().MaxInitLen, 112)
			yyv3618 = make([]NodeCondition, yyrl3618)
			yyc3618 = true

			yyrr3618 = len(yyv3618)
		} else if yyl3618 != len(yyv3618) {
			yyv3618 = yyv3618[:yyl3618]
			yyc3618 = true
		}
		yyj3618 := 0
		for ; yyj3618 < yyrr3618; yyj3618++ {
			if r.TryDecodeAsNil() {
				yyv3618[yyj3618] = NodeCondition{}
			} else {
				yyv3619 := &yyv3618[yyj3618]
				yyv3619.CodecDecodeSelf(d)
			}

		}
		if yyrt3618 {
			for ; yyj3618 < yyl3618; yyj3618++ {
				yyv3618 = append(yyv3618, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3618[yyj3618] = NodeCondition{}
				} else {
					yyv3620 := &yyv3618[yyj3618]
					yyv3620.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3618 := 0; !r.CheckBreak(); yyj3618++ {
			if yyj3618 >= len(yyv3618) {
				yyv3618 = append(yyv3618, NodeCondition{}) // var yyz3618 NodeCondition
				yyc3618 = true
			}

			if yyj3618 < len(yyv3618) {
				if r.TryDecodeAsNil() {
					yyv3618[yyj3618] = NodeCondition{}
				} else {
					yyv3621 := &yyv3618[yyj3618]
					yyv3621.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3618.End()
	}
	if yyc3618 {
		*v = yyv3618
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3622 := range v {
		yy3623 := &yyv3622
		yy3623.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3624 := *v
	yyh3624, yyl3624 := z.DecSliceHelperStart()

	var yyrr3624, yyrl3624 int
	var yyc3624, yyrt3624 bool
	_, _, _ = yyc3624, yyrt3624, yyrl3624
	yyrr3624 = yyl3624

	if yyv3624 == nil {
		if yyrl3624, yyrt3624 = z.DecInferLen(yyl3624, z.DecBasicHandle().MaxInitLen, 32); yyrt3624 {
			yyrr3624 = yyrl3624
		}
		yyv3624 = make([]NodeAddress, yyrl3624)
		yyc3624 = true
	}

	if yyl3624 == 0 {
		if len(yyv3624) != 0 {
			yyv3624 = yyv3624[:0]
			yyc3624 = true
		}
	} else if yyl3624 > 0 {

		if yyl3624 > cap(yyv3624) {
			yyrl3624, yyrt3624 = z.DecInferLen(yyl3624, z.DecBasicHandle().MaxInitLen, 32)
			yyv3624 = make([]NodeAddress, yyrl3624)
			yyc3624 = true

			yyrr3624 = len(yyv3624)
		} else if yyl3624 != len(yyv3624) {
			yyv3624 = yyv3624[:yyl3624]
			yyc3624 = true
		}
		yyj3624 := 0
		for ; yyj3624 < yyrr3624; yyj3624++ {
			if r.TryDecodeAsNil() {
				yyv3624[yyj3624] = NodeAddress{}
			} else {
				yyv3625 := &yyv3624[yyj3624]
				yyv3625.CodecDecodeSelf(d)
			}

		}
		if yyrt3624 {
			for ; yyj3624 < yyl3624; yyj3624++ {
				yyv3624 = append(yyv3624, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3624[yyj3624] = NodeAddress{}
				} else {
					yyv3626 := &yyv3624[yyj3624]
					yyv3626.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3624 := 0; !r.CheckBreak(); yyj3624++ {
			if yyj3624 >= len(yyv3624) {
				yyv3624 = append(yyv3624, NodeAddress{}) // var yyz3624 NodeAddress
				yyc3624 = true
			}

			if yyj3624 < len(yyv3624) {
				if r.TryDecodeAsNil() {
					yyv3624[yyj3624] = NodeAddress{}
				} else {
					yyv3627 := &yyv3624[yyj3624]
					yyv3627.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3624.End()
	}
	if yyc3624 {
		*v = yyv3624
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3628, yyv3628 := range v {
		yyk3628.CodecEncodeSelf(e)
		yy3629 := &yyv3628
		yym3630 := z.EncBinary()
		_ = yym3630
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3629) {
		} else if !yym3630 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3629)
		} else {
			z.EncFallback(yy3629)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3631 := *v
	yyl3631 := r.ReadMapStart()
	yybh3631 := z.DecBasicHandle()
	if yyv3631 == nil {
		yyrl3631, _ := z.DecInferLen(yyl3631, yybh3631.MaxInitLen, 40)
		yyv3631 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3631)
		*v = yyv3631
	}
	var yymk3631 ResourceName
	var yymv3631 pkg3_resource.Quantity
	var yymg3631 bool
	if yybh3631.MapValueReset {
		yymg3631 = true
	}
	if yyl3631 > 0 {
		for yyj3631 := 0; yyj3631 < yyl3631; yyj3631++ {
			if r.TryDecodeAsNil() {
				yymk3631 = ""
			} else {
				yymk3631 = ResourceName(r.DecodeString())
			}

			if yymg3631 {
				yymv3631 = yyv3631[yymk3631]
			} else {
				yymv3631 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3631 = pkg3_resource.Quantity{}
			} else {
				yyv3633 := &yymv3631
				yym3634 := z.DecBinary()
				_ = yym3634
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3633) {
				} else if !yym3634 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3633)
				} else {
					z.DecFallback(yyv3633, false)
				}
			}

			if yyv3631 != nil {
				yyv3631[yymk3631] = yymv3631
			}
		}
	} else if yyl3631 < 0 {
		for yyj3631 := 0; !r.CheckBreak(); yyj3631++ {
			if r.TryDecodeAsNil() {
				yymk3631 = ""
			} else {
				yymk3631 = ResourceName(r.DecodeString())
			}

			if yymg3631 {
				yymv3631 = yyv3631[yymk3631]
			} else {
				yymv3631 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3631 = pkg3_resource.Quantity{}
			} else {
				yyv3636 := &yymv3631
				yym3637 := z.DecBinary()
				_ = yym3637
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3636) {
				} else if !yym3637 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3636)
				} else {
					z.DecFallback(yyv3636, false)
				}
			}

			if yyv3631 != nil {
				yyv3631[yymk3631] = yymv3631
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3638 := range v {
		yy3639 := &yyv3638
		yy3639.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3640 := *v
	yyh3640, yyl3640 := z.DecSliceHelperStart()

	var yyrr3640, yyrl3640 int
	var yyc3640, yyrt3640 bool
	_, _, _ = yyc3640, yyrt3640, yyrl3640
	yyrr3640 = yyl3640

	if yyv3640 == nil {
		if yyrl3640, yyrt3640 = z.DecInferLen(yyl3640, z.DecBasicHandle().MaxInitLen, 456); yyrt3640 {
			yyrr3640 = yyrl3640
		}
		yyv3640 = make([]Node, yyrl3640)
		yyc3640 = true
	}

	if yyl3640 == 0 {
		if len(yyv3640) != 0 {
			yyv3640 = yyv3640[:0]
			yyc3640 = true
		}
	} else if yyl3640 > 0 {

		if yyl3640 > cap(yyv3640) {
			yyrl3640, yyrt3640 = z.DecInferLen(yyl3640, z.DecBasicHandle().MaxInitLen, 456)
			yyv3640 = make([]Node, yyrl3640)
			yyc3640 = true

			yyrr3640 = len(yyv3640)
		} else if yyl3640 != len(yyv3640) {
			yyv3640 = yyv3640[:yyl3640]
			yyc3640 = true
		}
		yyj3640 := 0
		for ; yyj3640 < yyrr3640; yyj3640++ {
			if r.TryDecodeAsNil() {
				yyv3640[yyj3640] = Node{}
			} else {
				yyv3641 := &yyv3640[yyj3640]
				yyv3641.CodecDecodeSelf(d)
			}

		}
		if yyrt3640 {
			for ; yyj3640 < yyl3640; yyj3640++ {
				yyv3640 = append(yyv3640, Node{})
				if r.TryDecodeAsNil() {
					yyv3640[yyj3640] = Node{}
				} else {
					yyv3642 := &yyv3640[yyj3640]
					yyv3642.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3640 := 0; !r.CheckBreak(); yyj3640++ {
			if yyj3640 >= len(yyv3640) {
				yyv3640 = append(yyv3640, Node{}) // var yyz3640 Node
				yyc3640 = true
			}

			if yyj3640 < len(yyv3640) {
				if r.TryDecodeAsNil() {
					yyv3640[yyj3640] = Node{}
				} else {
					yyv3643 := &yyv3640[yyj3640]
					yyv3643.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3640.End()
	}
	if yyc3640 {
		*v = yyv3640
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3644 := range v {
		yyv3644.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3645 := *v
	yyh3645, yyl3645 := z.DecSliceHelperStart()

	var yyrr3645, yyrl3645 int
	var yyc3645, yyrt3645 bool
	_, _, _ = yyc3645, yyrt3645, yyrl3645
	yyrr3645 = yyl3645

	if yyv3645 == nil {
		if yyrl3645, yyrt3645 = z.DecInferLen(yyl3645, z.DecBasicHandle().MaxInitLen, 16); yyrt3645 {
			yyrr3645 = yyrl3645
		}
		yyv3645 = make([]FinalizerName, yyrl3645)
		yyc3645 = true
	}

	if yyl3645 == 0 {
		if len(yyv3645) != 0 {
			yyv3645 = yyv3645[:0]
			yyc3645 = true
		}
	} else if yyl3645 > 0 {

		if yyl3645 > cap(yyv3645) {
			yyrl3645, yyrt3645 = z.DecInferLen(yyl3645, z.DecBasicHandle().MaxInitLen, 16)

			yyv23645 := yyv3645
			yyv3645 = make([]FinalizerName, yyrl3645)
			if len(yyv3645) > 0 {
				copy(yyv3645, yyv23645[:cap(yyv23645)])
			}
			yyc3645 = true

			yyrr3645 = len(yyv3645)
		} else if yyl3645 != len(yyv3645) {
			yyv3645 = yyv3645[:yyl3645]
			yyc3645 = true
		}
		yyj3645 := 0
		for ; yyj3645 < yyrr3645; yyj3645++ {
			if r.TryDecodeAsNil() {
				yyv3645[yyj3645] = ""
			} else {
				yyv3645[yyj3645] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3645 {
			for ; yyj3645 < yyl3645; yyj3645++ {
				yyv3645 = append(yyv3645, "")
				if r.TryDecodeAsNil() {
					yyv3645[yyj3645] = ""
				} else {
					yyv3645[yyj3645] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3645 := 0; !r.CheckBreak(); yyj3645++ {
			if yyj3645 >= len(yyv3645) {
				yyv3645 = append(yyv3645, "") // var yyz3645 FinalizerName
				yyc3645 = true
			}

			if yyj3645 < len(yyv3645) {
				if r.TryDecodeAsNil() {
					yyv3645[yyj3645] = ""
				} else {
					yyv3645[yyj3645] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3645.End()
	}
	if yyc3645 {
		*v = yyv3645
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3649 := range v {
		yy3650 := &yyv3649
		yy3650.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3651 := *v
	yyh3651, yyl3651 := z.DecSliceHelperStart()

	var yyrr3651, yyrl3651 int
	var yyc3651, yyrt3651 bool
	_, _, _ = yyc3651, yyrt3651, yyrl3651
	yyrr3651 = yyl3651

	if yyv3651 == nil {
		if yyrl3651, yyrt3651 = z.DecInferLen(yyl3651, z.DecBasicHandle().MaxInitLen, 232); yyrt3651 {
			yyrr3651 = yyrl3651
		}
		yyv3651 = make([]Namespace, yyrl3651)
		yyc3651 = true
	}

	if yyl3651 == 0 {
		if len(yyv3651) != 0 {
			yyv3651 = yyv3651[:0]
			yyc3651 = true
		}
	} else if yyl3651 > 0 {

		if yyl3651 > cap(yyv3651) {
			yyrl3651, yyrt3651 = z.DecInferLen(yyl3651, z.DecBasicHandle().MaxInitLen, 232)
			yyv3651 = make([]Namespace, yyrl3651)
			yyc3651 = true

			yyrr3651 = len(yyv3651)
		} else if yyl3651 != len(yyv3651) {
			yyv3651 = yyv3651[:yyl3651]
			yyc3651 = true
		}
		yyj3651 := 0
		for ; yyj3651 < yyrr3651; yyj3651++ {
			if r.TryDecodeAsNil() {
				yyv3651[yyj3651] = Namespace{}
			} else {
				yyv3652 := &yyv3651[yyj3651]
				yyv3652.CodecDecodeSelf(d)
			}

		}
		if yyrt3651 {
			for ; yyj3651 < yyl3651; yyj3651++ {
				yyv3651 = append(yyv3651, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3651[yyj3651] = Namespace{}
				} else {
					yyv3653 := &yyv3651[yyj3651]
					yyv3653.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3651 := 0; !r.CheckBreak(); yyj3651++ {
			if yyj3651 >= len(yyv3651) {
				yyv3651 = append(yyv3651, Namespace{}) // var yyz3651 Namespace
				yyc3651 = true
			}

			if yyj3651 < len(yyv3651) {
				if r.TryDecodeAsNil() {
					yyv3651[yyj3651] = Namespace{}
				} else {
					yyv3654 := &yyv3651[yyj3651]
					yyv3654.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3651.End()
	}
	if yyc3651 {
		*v = yyv3651
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3655 := range v {
		yy3656 := &yyv3655
		yy3656.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3657 := *v
	yyh3657, yyl3657 := z.DecSliceHelperStart()

	var yyrr3657, yyrl3657 int
	var yyc3657, yyrt3657 bool
	_, _, _ = yyc3657, yyrt3657, yyrl3657
	yyrr3657 = yyl3657

	if yyv3657 == nil {
		if yyrl3657, yyrt3657 = z.DecInferLen(yyl3657, z.DecBasicHandle().MaxInitLen, 424); yyrt3657 {
			yyrr3657 = yyrl3657
		}
		yyv3657 = make([]Event, yyrl3657)
		yyc3657 = true
	}

	if yyl3657 == 0 {
		if len(yyv3657) != 0 {
			yyv3657 = yyv3657[:0]
			yyc3657 = true
		}
	} else if yyl3657 > 0 {

		if yyl3657 > cap(yyv3657) {
			yyrl3657, yyrt3657 = z.DecInferLen(yyl3657, z.DecBasicHandle().MaxInitLen, 424)
			yyv3657 = make([]Event, yyrl3657)
			yyc3657 = true

			yyrr3657 = len(yyv3657)
		} else if yyl3657 != len(yyv3657) {
			yyv3657 = yyv3657[:yyl3657]
			yyc3657 = true
		}
		yyj3657 := 0
		for ; yyj3657 < yyrr3657; yyj3657++ {
			if r.TryDecodeAsNil() {
				yyv3657[yyj3657] = Event{}
			} else {
				yyv3658 := &yyv3657[yyj3657]
				yyv3658.CodecDecodeSelf(d)
			}

		}
		if yyrt3657 {
			for ; yyj3657 < yyl3657; yyj3657++ {
				yyv3657 = append(yyv3657, Event{})
				if r.TryDecodeAsNil() {
					yyv3657[yyj3657] = Event{}
				} else {
					yyv3659 := &yyv3657[yyj3657]
					yyv3659.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3657 := 0; !r.CheckBreak(); yyj3657++ {
			if yyj3657 >= len(yyv3657) {
				yyv3657 = append(yyv3657, Event{}) // var yyz3657 Event
				yyc3657 = true
			}

			if yyj3657 < len(yyv3657) {
				if r.TryDecodeAsNil() {
					yyv3657[yyj3657] = Event{}
				} else {
					yyv3660 := &yyv3657[yyj3657]
					yyv3660.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3657.End()
	}
	if yyc3657 {
		*v = yyv3657
	}

}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg6_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3661 := range v {
		yy3662 := &yyv3661
		yym3663 := z.EncBinary()
		_ = yym3663
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3662) {
		} else if !yym3663 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3662)
		} else {
			z.EncFallback(yy3662)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg6_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3664 := *v
	yyh3664, yyl3664 := z.DecSliceHelperStart()

	var yyrr3664, yyrl3664 int
	var yyc3664, yyrt3664 bool
	_, _, _ = yyc3664, yyrt3664, yyrl3664
	yyrr3664 = yyl3664

	if yyv3664 == nil {
		if yyrl3664, yyrt3664 = z.DecInferLen(yyl3664, z.DecBasicHandle().MaxInitLen, 24); yyrt3664 {
			yyrr3664 = yyrl3664
		}
		yyv3664 = make([]pkg6_runtime.RawExtension, yyrl3664)
		yyc3664 = true
	}

	if yyl3664 == 0 {
		if len(yyv3664) != 0 {
			yyv3664 = yyv3664[:0]
			yyc3664 = true
		}
	} else if yyl3664 > 0 {

		if yyl3664 > cap(yyv3664) {
			yyrl3664, yyrt3664 = z.DecInferLen(yyl3664, z.DecBasicHandle().MaxInitLen, 24)
			yyv3664 = make([]pkg6_runtime.RawExtension, yyrl3664)
			yyc3664 = true

			yyrr3664 = len(yyv3664)
		} else if yyl3664 != len(yyv3664) {
			yyv3664 = yyv3664[:yyl3664]
			yyc3664 = true
		}
		yyj3664 := 0
		for ; yyj3664 < yyrr3664; yyj3664++ {
			if r.TryDecodeAsNil() {
				yyv3664[yyj3664] = pkg6_runtime.RawExtension{}
			} else {
				yyv3665 := &yyv3664[yyj3664]
				yym3666 := z.DecBinary()
				_ = yym3666
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3665) {
				} else if !yym3666 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3665)
				} else {
					z.DecFallback(yyv3665, false)
				}
			}

		}
		if yyrt3664 {
			for ; yyj3664 < yyl3664; yyj3664++ {
				yyv3664 = append(yyv3664, pkg6_runtime.RawExtension{})
				if r.TryDecodeAsNil() {
					yyv3664[yyj3664] = pkg6_runtime.RawExtension{}
				} else {
					yyv3667 := &yyv3664[yyj3664]
					yym3668 := z.DecBinary()
					_ = yym3668
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3667) {
					} else if !yym3668 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3667)
					} else {
						z.DecFallback(yyv3667, false)
					}
				}

			}
		}

	} else {
		for yyj3664 := 0; !r.CheckBreak(); yyj3664++ {
			if yyj3664 >= len(yyv3664) {
				yyv3664 = append(yyv3664, pkg6_runtime.RawExtension{}) // var yyz3664 pkg6_runtime.RawExtension
				yyc3664 = true
			}

			if yyj3664 < len(yyv3664) {
				if r.TryDecodeAsNil() {
					yyv3664[yyj3664] = pkg6_runtime.RawExtension{}
				} else {
					yyv3669 := &yyv3664[yyj3664]
					yym3670 := z.DecBinary()
					_ = yym3670
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3669) {
					} else if !yym3670 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3669)
					} else {
						z.DecFallback(yyv3669, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3664.End()
	}
	if yyc3664 {
		*v = yyv3664
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3671 := range v {
		yy3672 := &yyv3671
		yy3672.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3673 := *v
	yyh3673, yyl3673 := z.DecSliceHelperStart()

	var yyrr3673, yyrl3673 int
	var yyc3673, yyrt3673 bool
	_, _, _ = yyc3673, yyrt3673, yyrl3673
	yyrr3673 = yyl3673

	if yyv3673 == nil {
		if yyrl3673, yyrt3673 = z.DecInferLen(yyl3673, z.DecBasicHandle().MaxInitLen, 56); yyrt3673 {
			yyrr3673 = yyrl3673
		}
		yyv3673 = make([]LimitRangeItem, yyrl3673)
		yyc3673 = true
	}

	if yyl3673 == 0 {
		if len(yyv3673) != 0 {
			yyv3673 = yyv3673[:0]
			yyc3673 = true
		}
	} else if yyl3673 > 0 {

		if yyl3673 > cap(yyv3673) {
			yyrl3673, yyrt3673 = z.DecInferLen(yyl3673, z.DecBasicHandle().MaxInitLen, 56)
			yyv3673 = make([]LimitRangeItem, yyrl3673)
			yyc3673 = true

			yyrr3673 = len(yyv3673)
		} else if yyl3673 != len(yyv3673) {
			yyv3673 = yyv3673[:yyl3673]
			yyc3673 = true
		}
		yyj3673 := 0
		for ; yyj3673 < yyrr3673; yyj3673++ {
			if r.TryDecodeAsNil() {
				yyv3673[yyj3673] = LimitRangeItem{}
			} else {
				yyv3674 := &yyv3673[yyj3673]
				yyv3674.CodecDecodeSelf(d)
			}

		}
		if yyrt3673 {
			for ; yyj3673 < yyl3673; yyj3673++ {
				yyv3673 = append(yyv3673, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3673[yyj3673] = LimitRangeItem{}
				} else {
					yyv3675 := &yyv3673[yyj3673]
					yyv3675.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3673 := 0; !r.CheckBreak(); yyj3673++ {
			if yyj3673 >= len(yyv3673) {
				yyv3673 = append(yyv3673, LimitRangeItem{}) // var yyz3673 LimitRangeItem
				yyc3673 = true
			}

			if yyj3673 < len(yyv3673) {
				if r.TryDecodeAsNil() {
					yyv3673[yyj3673] = LimitRangeItem{}
				} else {
					yyv3676 := &yyv3673[yyj3673]
					yyv3676.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3673.End()
	}
	if yyc3673 {
		*v = yyv3673
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3677 := range v {
		yy3678 := &yyv3677
		yy3678.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3679 := *v
	yyh3679, yyl3679 := z.DecSliceHelperStart()

	var yyrr3679, yyrl3679 int
	var yyc3679, yyrt3679 bool
	_, _, _ = yyc3679, yyrt3679, yyrl3679
	yyrr3679 = yyl3679

	if yyv3679 == nil {
		if yyrl3679, yyrt3679 = z.DecInferLen(yyl3679, z.DecBasicHandle().MaxInitLen, 216); yyrt3679 {
			yyrr3679 = yyrl3679
		}
		yyv3679 = make([]LimitRange, yyrl3679)
		yyc3679 = true
	}

	if yyl3679 == 0 {
		if len(yyv3679) != 0 {
			yyv3679 = yyv3679[:0]
			yyc3679 = true
		}
	} else if yyl3679 > 0 {

		if yyl3679 > cap(yyv3679) {
			yyrl3679, yyrt3679 = z.DecInferLen(yyl3679, z.DecBasicHandle().MaxInitLen, 216)
			yyv3679 = make([]LimitRange, yyrl3679)
			yyc3679 = true

			yyrr3679 = len(yyv3679)
		} else if yyl3679 != len(yyv3679) {
			yyv3679 = yyv3679[:yyl3679]
			yyc3679 = true
		}
		yyj3679 := 0
		for ; yyj3679 < yyrr3679; yyj3679++ {
			if r.TryDecodeAsNil() {
				yyv3679[yyj3679] = LimitRange{}
			} else {
				yyv3680 := &yyv3679[yyj3679]
				yyv3680.CodecDecodeSelf(d)
			}

		}
		if yyrt3679 {
			for ; yyj3679 < yyl3679; yyj3679++ {
				yyv3679 = append(yyv3679, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3679[yyj3679] = LimitRange{}
				} else {
					yyv3681 := &yyv3679[yyj3679]
					yyv3681.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3679 := 0; !r.CheckBreak(); yyj3679++ {
			if yyj3679 >= len(yyv3679) {
				yyv3679 = append(yyv3679, LimitRange{}) // var yyz3679 LimitRange
				yyc3679 = true
			}

			if yyj3679 < len(yyv3679) {
				if r.TryDecodeAsNil() {
					yyv3679[yyj3679] = LimitRange{}
				} else {
					yyv3682 := &yyv3679[yyj3679]
					yyv3682.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3679.End()
	}
	if yyc3679 {
		*v = yyv3679
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3683 := range v {
		yy3684 := &yyv3683
		yy3684.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3685 := *v
	yyh3685, yyl3685 := z.DecSliceHelperStart()

	var yyrr3685, yyrl3685 int
	var yyc3685, yyrt3685 bool
	_, _, _ = yyc3685, yyrt3685, yyrl3685
	yyrr3685 = yyl3685

	if yyv3685 == nil {
		if yyrl3685, yyrt3685 = z.DecInferLen(yyl3685, z.DecBasicHandle().MaxInitLen, 216); yyrt3685 {
			yyrr3685 = yyrl3685
		}
		yyv3685 = make([]ResourceQuota, yyrl3685)
		yyc3685 = true
	}

	if yyl3685 == 0 {
		if len(yyv3685) != 0 {
			yyv3685 = yyv3685[:0]
			yyc3685 = true
		}
	} else if yyl3685 > 0 {

		if yyl3685 > cap(yyv3685) {
			yyrl3685, yyrt3685 = z.DecInferLen(yyl3685, z.DecBasicHandle().MaxInitLen, 216)
			yyv3685 = make([]ResourceQuota, yyrl3685)
			yyc3685 = true

			yyrr3685 = len(yyv3685)
		} else if yyl3685 != len(yyv3685) {
			yyv3685 = yyv3685[:yyl3685]
			yyc3685 = true
		}
		yyj3685 := 0
		for ; yyj3685 < yyrr3685; yyj3685++ {
			if r.TryDecodeAsNil() {
				yyv3685[yyj3685] = ResourceQuota{}
			} else {
				yyv3686 := &yyv3685[yyj3685]
				yyv3686.CodecDecodeSelf(d)
			}

		}
		if yyrt3685 {
			for ; yyj3685 < yyl3685; yyj3685++ {
				yyv3685 = append(yyv3685, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3685[yyj3685] = ResourceQuota{}
				} else {
					yyv3687 := &yyv3685[yyj3685]
					yyv3687.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3685 := 0; !r.CheckBreak(); yyj3685++ {
			if yyj3685 >= len(yyv3685) {
				yyv3685 = append(yyv3685, ResourceQuota{}) // var yyz3685 ResourceQuota
				yyc3685 = true
			}

			if yyj3685 < len(yyv3685) {
				if r.TryDecodeAsNil() {
					yyv3685[yyj3685] = ResourceQuota{}
				} else {
					yyv3688 := &yyv3685[yyj3685]
					yyv3688.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3685.End()
	}
	if yyc3685 {
		*v = yyv3685
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3689, yyv3689 := range v {
		yym3690 := z.EncBinary()
		_ = yym3690
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3689))
		}
		if yyv3689 == nil {
			r.EncodeNil()
		} else {
			yym3691 := z.EncBinary()
			_ = yym3691
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3689))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3692 := *v
	yyl3692 := r.ReadMapStart()
	yybh3692 := z.DecBasicHandle()
	if yyv3692 == nil {
		yyrl3692, _ := z.DecInferLen(yyl3692, yybh3692.MaxInitLen, 40)
		yyv3692 = make(map[string][]uint8, yyrl3692)
		*v = yyv3692
	}
	var yymk3692 string
	var yymv3692 []uint8
	var yymg3692 bool
	if yybh3692.MapValueReset {
		yymg3692 = true
	}
	if yyl3692 > 0 {
		for yyj3692 := 0; yyj3692 < yyl3692; yyj3692++ {
			if r.TryDecodeAsNil() {
				yymk3692 = ""
			} else {
				yymk3692 = string(r.DecodeString())
			}

			if yymg3692 {
				yymv3692 = yyv3692[yymk3692]
			} else {
				yymv3692 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3692 = nil
			} else {
				yyv3694 := &yymv3692
				yym3695 := z.DecBinary()
				_ = yym3695
				if false {
				} else {
					*yyv3694 = r.DecodeBytes(*(*[]byte)(yyv3694), false, false)
				}
			}

			if yyv3692 != nil {
				yyv3692[yymk3692] = yymv3692
			}
		}
	} else if yyl3692 < 0 {
		for yyj3692 := 0; !r.CheckBreak(); yyj3692++ {
			if r.TryDecodeAsNil() {
				yymk3692 = ""
			} else {
				yymk3692 = string(r.DecodeString())
			}

			if yymg3692 {
				yymv3692 = yyv3692[yymk3692]
			} else {
				yymv3692 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3692 = nil
			} else {
				yyv3697 := &yymv3692
				yym3698 := z.DecBinary()
				_ = yym3698
				if false {
				} else {
					*yyv3697 = r.DecodeBytes(*(*[]byte)(yyv3697), false, false)
				}
			}

			if yyv3692 != nil {
				yyv3692[yymk3692] = yymv3692
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3699 := range v {
		yy3700 := &yyv3699
		yy3700.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3701 := *v
	yyh3701, yyl3701 := z.DecSliceHelperStart()

	var yyrr3701, yyrl3701 int
	var yyc3701, yyrt3701 bool
	_, _, _ = yyc3701, yyrt3701, yyrl3701
	yyrr3701 = yyl3701

	if yyv3701 == nil {
		if yyrl3701, yyrt3701 = z.DecInferLen(yyl3701, z.DecBasicHandle().MaxInitLen, 216); yyrt3701 {
			yyrr3701 = yyrl3701
		}
		yyv3701 = make([]Secret, yyrl3701)
		yyc3701 = true
	}

	if yyl3701 == 0 {
		if len(yyv3701) != 0 {
			yyv3701 = yyv3701[:0]
			yyc3701 = true
		}
	} else if yyl3701 > 0 {

		if yyl3701 > cap(yyv3701) {
			yyrl3701, yyrt3701 = z.DecInferLen(yyl3701, z.DecBasicHandle().MaxInitLen, 216)
			yyv3701 = make([]Secret, yyrl3701)
			yyc3701 = true

			yyrr3701 = len(yyv3701)
		} else if yyl3701 != len(yyv3701) {
			yyv3701 = yyv3701[:yyl3701]
			yyc3701 = true
		}
		yyj3701 := 0
		for ; yyj3701 < yyrr3701; yyj3701++ {
			if r.TryDecodeAsNil() {
				yyv3701[yyj3701] = Secret{}
			} else {
				yyv3702 := &yyv3701[yyj3701]
				yyv3702.CodecDecodeSelf(d)
			}

		}
		if yyrt3701 {
			for ; yyj3701 < yyl3701; yyj3701++ {
				yyv3701 = append(yyv3701, Secret{})
				if r.TryDecodeAsNil() {
					yyv3701[yyj3701] = Secret{}
				} else {
					yyv3703 := &yyv3701[yyj3701]
					yyv3703.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3701 := 0; !r.CheckBreak(); yyj3701++ {
			if yyj3701 >= len(yyv3701) {
				yyv3701 = append(yyv3701, Secret{}) // var yyz3701 Secret
				yyc3701 = true
			}

			if yyj3701 < len(yyv3701) {
				if r.TryDecodeAsNil() {
					yyv3701[yyj3701] = Secret{}
				} else {
					yyv3704 := &yyv3701[yyj3701]
					yyv3704.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3701.End()
	}
	if yyc3701 {
		*v = yyv3701
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3705 := range v {
		yy3706 := &yyv3705
		yy3706.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3707 := *v
	yyh3707, yyl3707 := z.DecSliceHelperStart()

	var yyrr3707, yyrl3707 int
	var yyc3707, yyrt3707 bool
	_, _, _ = yyc3707, yyrt3707, yyrl3707
	yyrr3707 = yyl3707

	if yyv3707 == nil {
		if yyrl3707, yyrt3707 = z.DecInferLen(yyl3707, z.DecBasicHandle().MaxInitLen, 64); yyrt3707 {
			yyrr3707 = yyrl3707
		}
		yyv3707 = make([]ComponentCondition, yyrl3707)
		yyc3707 = true
	}

	if yyl3707 == 0 {
		if len(yyv3707) != 0 {
			yyv3707 = yyv3707[:0]
			yyc3707 = true
		}
	} else if yyl3707 > 0 {

		if yyl3707 > cap(yyv3707) {
			yyrl3707, yyrt3707 = z.DecInferLen(yyl3707, z.DecBasicHandle().MaxInitLen, 64)
			yyv3707 = make([]ComponentCondition, yyrl3707)
			yyc3707 = true

			yyrr3707 = len(yyv3707)
		} else if yyl3707 != len(yyv3707) {
			yyv3707 = yyv3707[:yyl3707]
			yyc3707 = true
		}
		yyj3707 := 0
		for ; yyj3707 < yyrr3707; yyj3707++ {
			if r.TryDecodeAsNil() {
				yyv3707[yyj3707] = ComponentCondition{}
			} else {
				yyv3708 := &yyv3707[yyj3707]
				yyv3708.CodecDecodeSelf(d)
			}

		}
		if yyrt3707 {
			for ; yyj3707 < yyl3707; yyj3707++ {
				yyv3707 = append(yyv3707, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3707[yyj3707] = ComponentCondition{}
				} else {
					yyv3709 := &yyv3707[yyj3707]
					yyv3709.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3707 := 0; !r.CheckBreak(); yyj3707++ {
			if yyj3707 >= len(yyv3707) {
				yyv3707 = append(yyv3707, ComponentCondition{}) // var yyz3707 ComponentCondition
				yyc3707 = true
			}

			if yyj3707 < len(yyv3707) {
				if r.TryDecodeAsNil() {
					yyv3707[yyj3707] = ComponentCondition{}
				} else {
					yyv3710 := &yyv3707[yyj3707]
					yyv3710.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3707.End()
	}
	if yyc3707 {
		*v = yyv3707
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3711 := range v {
		yy3712 := &yyv3711
		yy3712.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3713 := *v
	yyh3713, yyl3713 := z.DecSliceHelperStart()

	var yyrr3713, yyrl3713 int
	var yyc3713, yyrt3713 bool
	_, _, _ = yyc3713, yyrt3713, yyrl3713
	yyrr3713 = yyl3713

	if yyv3713 == nil {
		if yyrl3713, yyrt3713 = z.DecInferLen(yyl3713, z.DecBasicHandle().MaxInitLen, 216); yyrt3713 {
			yyrr3713 = yyrl3713
		}
		yyv3713 = make([]ComponentStatus, yyrl3713)
		yyc3713 = true
	}

	if yyl3713 == 0 {
		if len(yyv3713) != 0 {
			yyv3713 = yyv3713[:0]
			yyc3713 = true
		}
	} else if yyl3713 > 0 {

		if yyl3713 > cap(yyv3713) {
			yyrl3713, yyrt3713 = z.DecInferLen(yyl3713, z.DecBasicHandle().MaxInitLen, 216)
			yyv3713 = make([]ComponentStatus, yyrl3713)
			yyc3713 = true

			yyrr3713 = len(yyv3713)
		} else if yyl3713 != len(yyv3713) {
			yyv3713 = yyv3713[:yyl3713]
			yyc3713 = true
		}
		yyj3713 := 0
		for ; yyj3713 < yyrr3713; yyj3713++ {
			if r.TryDecodeAsNil() {
				yyv3713[yyj3713] = ComponentStatus{}
			} else {
				yyv3714 := &yyv3713[yyj3713]
				yyv3714.CodecDecodeSelf(d)
			}

		}
		if yyrt3713 {
			for ; yyj3713 < yyl3713; yyj3713++ {
				yyv3713 = append(yyv3713, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3713[yyj3713] = ComponentStatus{}
				} else {
					yyv3715 := &yyv3713[yyj3713]
					yyv3715.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3713 := 0; !r.CheckBreak(); yyj3713++ {
			if yyj3713 >= len(yyv3713) {
				yyv3713 = append(yyv3713, ComponentStatus{}) // var yyz3713 ComponentStatus
				yyc3713 = true
			}

			if yyj3713 < len(yyv3713) {
				if r.TryDecodeAsNil() {
					yyv3713[yyj3713] = ComponentStatus{}
				} else {
					yyv3716 := &yyv3713[yyj3713]
					yyv3716.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3713.End()
	}
	if yyc3713 {
		*v = yyv3713
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3717 := range v {
		yy3718 := &yyv3717
		yy3718.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3719 := *v
	yyh3719, yyl3719 := z.DecSliceHelperStart()

	var yyrr3719, yyrl3719 int
	var yyc3719, yyrt3719 bool
	_, _, _ = yyc3719, yyrt3719, yyrl3719
	yyrr3719 = yyl3719

	if yyv3719 == nil {
		if yyrl3719, yyrt3719 = z.DecInferLen(yyl3719, z.DecBasicHandle().MaxInitLen, 48); yyrt3719 {
			yyrr3719 = yyrl3719
		}
		yyv3719 = make([]DownwardAPIVolumeFile, yyrl3719)
		yyc3719 = true
	}

	if yyl3719 == 0 {
		if len(yyv3719) != 0 {
			yyv3719 = yyv3719[:0]
			yyc3719 = true
		}
	} else if yyl3719 > 0 {

		if yyl3719 > cap(yyv3719) {
			yyrl3719, yyrt3719 = z.DecInferLen(yyl3719, z.DecBasicHandle().MaxInitLen, 48)
			yyv3719 = make([]DownwardAPIVolumeFile, yyrl3719)
			yyc3719 = true

			yyrr3719 = len(yyv3719)
		} else if yyl3719 != len(yyv3719) {
			yyv3719 = yyv3719[:yyl3719]
			yyc3719 = true
		}
		yyj3719 := 0
		for ; yyj3719 < yyrr3719; yyj3719++ {
			if r.TryDecodeAsNil() {
				yyv3719[yyj3719] = DownwardAPIVolumeFile{}
			} else {
				yyv3720 := &yyv3719[yyj3719]
				yyv3720.CodecDecodeSelf(d)
			}

		}
		if yyrt3719 {
			for ; yyj3719 < yyl3719; yyj3719++ {
				yyv3719 = append(yyv3719, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3719[yyj3719] = DownwardAPIVolumeFile{}
				} else {
					yyv3721 := &yyv3719[yyj3719]
					yyv3721.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3719 := 0; !r.CheckBreak(); yyj3719++ {
			if yyj3719 >= len(yyv3719) {
				yyv3719 = append(yyv3719, DownwardAPIVolumeFile{}) // var yyz3719 DownwardAPIVolumeFile
				yyc3719 = true
			}

			if yyj3719 < len(yyv3719) {
				if r.TryDecodeAsNil() {
					yyv3719[yyj3719] = DownwardAPIVolumeFile{}
				} else {
					yyv3722 := &yyv3719[yyj3719]
					yyv3722.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3719.End()
	}
	if yyc3719 {
		*v = yyv3719
	}

}
