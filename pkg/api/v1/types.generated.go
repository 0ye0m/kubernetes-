/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [14]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(14)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv59 := &x.CreationTimestamp
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv59) {
				} else if yym60 {
					z.DecBinaryUnmarshal(yyv59)
				} else if !yym60 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv59)
				} else {
					z.DecFallback(yyv59, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym62 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym62 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv65 := &x.Labels
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else {
					z.F.DecMapStringStringX(yyv65, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv67 := &x.Annotations
				yym68 := z.DecBinary()
				_ = yym68
				if false {
				} else {
					z.F.DecMapStringStringX(yyv67, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv69 := &x.OwnerReferences
				yym70 := z.DecBinary()
				_ = yym70
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv69), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv71 := &x.Finalizers
				yym72 := z.DecBinary()
				_ = yym72
				if false {
				} else {
					z.F.DecSliceStringX(yyv71, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj73 int
	var yyb73 bool
	var yyhl73 bool = l >= 0
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv81 := &x.CreationTimestamp
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv81) {
		} else if yym82 {
			z.DecBinaryUnmarshal(yyv81)
		} else if !yym82 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv81)
		} else {
			z.DecFallback(yyv81, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym84 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym84 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv87 := &x.Labels
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			z.F.DecMapStringStringX(yyv87, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv89 := &x.Annotations
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			z.F.DecMapStringStringX(yyv89, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv91 := &x.OwnerReferences
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv91), d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv93 := &x.Finalizers
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecSliceStringX(yyv93, false, d)
		}
	}
	for {
		yyj73++
		if yyhl73 {
			yyb73 = yyj73 > l
		} else {
			yyb73 = r.CheckBreak()
		}
		if yyb73 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj73-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym95 := z.EncBinary()
		_ = yym95
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep96 := !z.EncBinary()
			yy2arr96 := z.EncBasicHandle().StructToArray
			var yyq96 [22]bool
			_, _, _ = yysep96, yyq96, yy2arr96
			const yyr96 bool = false
			yyq96[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq96[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq96[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq96[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq96[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq96[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq96[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq96[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq96[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq96[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq96[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq96[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq96[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq96[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq96[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq96[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq96[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq96[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq96[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq96[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq96[21] = x.VolumeSource.DockerVolume != nil && x.DockerVolume != nil
			var yynn96 int
			if yyr96 || yy2arr96 {
				r.EncodeArrayStart(22)
			} else {
				yynn96 = 1
				for _, b := range yyq96 {
					if b {
						yynn96++
					}
				}
				r.EncodeMapStart(yynn96)
				yynn96 = 0
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym98 := z.EncBinary()
				_ = yym98
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym99 := z.EncBinary()
				_ = yym99
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn100 bool
			if x.VolumeSource.HostPath == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr96 || yy2arr96 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr96 || yy2arr96 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr96 || yy2arr96 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr96 || yy2arr96 {
				if yyn103 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn104 bool
			if x.VolumeSource.GitRepo == nil {
				yyn104 = true
				goto LABEL104
			}
		LABEL104:
			if yyr96 || yy2arr96 {
				if yyn104 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn104 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn105 bool
			if x.VolumeSource.Secret == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr96 || yy2arr96 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.NFS == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr96 || yy2arr96 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.ISCSI == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr96 || yy2arr96 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr96 || yy2arr96 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr96 || yy2arr96 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.RBD == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr96 || yy2arr96 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr96 || yy2arr96 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.Cinder == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr96 || yy2arr96 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.CephFS == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr96 || yy2arr96 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.Flocker == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr96 || yy2arr96 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr96 || yy2arr96 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FC == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr96 || yy2arr96 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.AzureFile == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr96 || yy2arr96 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr96 || yy2arr96 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr96 || yy2arr96 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.DockerVolume == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr96 || yy2arr96 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[21] {
						if x.DockerVolume == nil {
							r.EncodeNil()
						} else {
							x.DockerVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dockerVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.DockerVolume == nil {
							r.EncodeNil()
						} else {
							x.DockerVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym121 := z.DecBinary()
	_ = yym121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct122 := r.ContainerType()
		if yyct122 == codecSelferValueTypeMap1234 {
			yyl122 := r.ReadMapStart()
			if yyl122 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl122, d)
			}
		} else if yyct122 == codecSelferValueTypeArray1234 {
			yyl122 := r.ReadArrayStart()
			if yyl122 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl122, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys123Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys123Slc
	var yyhl123 bool = l >= 0
	for yyj123 := 0; ; yyj123++ {
		if yyhl123 {
			if yyj123 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys123Slc = r.DecodeBytes(yys123Slc, true, true)
		yys123 := string(yys123Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys123 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "dockerVolume":
			if x.VolumeSource.DockerVolume == nil {
				x.VolumeSource.DockerVolume = new(DockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DockerVolume != nil {
					x.DockerVolume = nil
				}
			} else {
				if x.DockerVolume == nil {
					x.DockerVolume = new(DockerVolumeSource)
				}
				x.DockerVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys123)
		} // end switch yys123
	} // end for yyj123
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj146 int
	var yyb146 bool
	var yyhl146 bool = l >= 0
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DockerVolume == nil {
		x.VolumeSource.DockerVolume = new(DockerVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DockerVolume != nil {
			x.DockerVolume = nil
		}
	} else {
		if x.DockerVolume == nil {
			x.DockerVolume = new(DockerVolumeSource)
		}
		x.DockerVolume.CodecDecodeSelf(d)
	}
	for {
		yyj146++
		if yyhl146 {
			yyb146 = yyj146 > l
		} else {
			yyb146 = r.CheckBreak()
		}
		if yyb146 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj146-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym169 := z.EncBinary()
		_ = yym169
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep170 := !z.EncBinary()
			yy2arr170 := z.EncBasicHandle().StructToArray
			var yyq170 [21]bool
			_, _, _ = yysep170, yyq170, yy2arr170
			const yyr170 bool = false
			yyq170[0] = x.HostPath != nil
			yyq170[1] = x.EmptyDir != nil
			yyq170[2] = x.GCEPersistentDisk != nil
			yyq170[3] = x.AWSElasticBlockStore != nil
			yyq170[4] = x.GitRepo != nil
			yyq170[5] = x.Secret != nil
			yyq170[6] = x.NFS != nil
			yyq170[7] = x.ISCSI != nil
			yyq170[8] = x.Glusterfs != nil
			yyq170[9] = x.PersistentVolumeClaim != nil
			yyq170[10] = x.RBD != nil
			yyq170[11] = x.FlexVolume != nil
			yyq170[12] = x.Cinder != nil
			yyq170[13] = x.CephFS != nil
			yyq170[14] = x.Flocker != nil
			yyq170[15] = x.DownwardAPI != nil
			yyq170[16] = x.FC != nil
			yyq170[17] = x.AzureFile != nil
			yyq170[18] = x.ConfigMap != nil
			yyq170[19] = x.VsphereVolume != nil
			yyq170[20] = x.DockerVolume != nil
			var yynn170 int
			if yyr170 || yy2arr170 {
				r.EncodeArrayStart(21)
			} else {
				yynn170 = 0
				for _, b := range yyq170 {
					if b {
						yynn170++
					}
				}
				r.EncodeMapStart(yynn170)
				yynn170 = 0
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[20] {
					if x.DockerVolume == nil {
						r.EncodeNil()
					} else {
						x.DockerVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dockerVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DockerVolume == nil {
						r.EncodeNil()
					} else {
						x.DockerVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym192 := z.DecBinary()
	_ = yym192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct193 := r.ContainerType()
		if yyct193 == codecSelferValueTypeMap1234 {
			yyl193 := r.ReadMapStart()
			if yyl193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl193, d)
			}
		} else if yyct193 == codecSelferValueTypeArray1234 {
			yyl193 := r.ReadArrayStart()
			if yyl193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys194Slc
	var yyhl194 bool = l >= 0
	for yyj194 := 0; ; yyj194++ {
		if yyhl194 {
			if yyj194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys194Slc = r.DecodeBytes(yys194Slc, true, true)
		yys194 := string(yys194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys194 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "dockerVolume":
			if r.TryDecodeAsNil() {
				if x.DockerVolume != nil {
					x.DockerVolume = nil
				}
			} else {
				if x.DockerVolume == nil {
					x.DockerVolume = new(DockerVolumeSource)
				}
				x.DockerVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys194)
		} // end switch yys194
	} // end for yyj194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj216 int
	var yyb216 bool
	var yyhl216 bool = l >= 0
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DockerVolume != nil {
			x.DockerVolume = nil
		}
	} else {
		if x.DockerVolume == nil {
			x.DockerVolume = new(DockerVolumeSource)
		}
		x.DockerVolume.CodecDecodeSelf(d)
	}
	for {
		yyj216++
		if yyhl216 {
			yyb216 = yyj216 > l
		} else {
			yyb216 = r.CheckBreak()
		}
		if yyb216 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj216-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym238 := z.EncBinary()
		_ = yym238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep239 := !z.EncBinary()
			yy2arr239 := z.EncBasicHandle().StructToArray
			var yyq239 [2]bool
			_, _, _ = yysep239, yyq239, yy2arr239
			const yyr239 bool = false
			yyq239[1] = x.ReadOnly != false
			var yynn239 int
			if yyr239 || yy2arr239 {
				r.EncodeArrayStart(2)
			} else {
				yynn239 = 1
				for _, b := range yyq239 {
					if b {
						yynn239++
					}
				}
				r.EncodeMapStart(yynn239)
				yynn239 = 0
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym241 := z.EncBinary()
				_ = yym241
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym242 := z.EncBinary()
				_ = yym242
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[1] {
					yym244 := z.EncBinary()
					_ = yym244
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq239[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym245 := z.EncBinary()
					_ = yym245
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym246 := z.DecBinary()
	_ = yym246
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct247 := r.ContainerType()
		if yyct247 == codecSelferValueTypeMap1234 {
			yyl247 := r.ReadMapStart()
			if yyl247 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl247, d)
			}
		} else if yyct247 == codecSelferValueTypeArray1234 {
			yyl247 := r.ReadArrayStart()
			if yyl247 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl247, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys248Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys248Slc
	var yyhl248 bool = l >= 0
	for yyj248 := 0; ; yyj248++ {
		if yyhl248 {
			if yyj248 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys248Slc = r.DecodeBytes(yys248Slc, true, true)
		yys248 := string(yys248Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys248 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys248)
		} // end switch yys248
	} // end for yyj248
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj251 int
	var yyb251 bool
	var yyhl251 bool = l >= 0
	yyj251++
	if yyhl251 {
		yyb251 = yyj251 > l
	} else {
		yyb251 = r.CheckBreak()
	}
	if yyb251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj251++
	if yyhl251 {
		yyb251 = yyj251 > l
	} else {
		yyb251 = r.CheckBreak()
	}
	if yyb251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj251++
		if yyhl251 {
			yyb251 = yyj251 > l
		} else {
			yyb251 = r.CheckBreak()
		}
		if yyb251 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj251-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym254 := z.EncBinary()
		_ = yym254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep255 := !z.EncBinary()
			yy2arr255 := z.EncBasicHandle().StructToArray
			var yyq255 [14]bool
			_, _, _ = yysep255, yyq255, yy2arr255
			const yyr255 bool = false
			yyq255[0] = x.GCEPersistentDisk != nil
			yyq255[1] = x.AWSElasticBlockStore != nil
			yyq255[2] = x.HostPath != nil
			yyq255[3] = x.Glusterfs != nil
			yyq255[4] = x.NFS != nil
			yyq255[5] = x.RBD != nil
			yyq255[6] = x.ISCSI != nil
			yyq255[7] = x.Cinder != nil
			yyq255[8] = x.CephFS != nil
			yyq255[9] = x.FC != nil
			yyq255[10] = x.Flocker != nil
			yyq255[11] = x.FlexVolume != nil
			yyq255[12] = x.AzureFile != nil
			yyq255[13] = x.VsphereVolume != nil
			var yynn255 int
			if yyr255 || yy2arr255 {
				r.EncodeArrayStart(14)
			} else {
				yynn255 = 0
				for _, b := range yyq255 {
					if b {
						yynn255++
					}
				}
				r.EncodeMapStart(yynn255)
				yynn255 = 0
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym270 := z.DecBinary()
	_ = yym270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct271 := r.ContainerType()
		if yyct271 == codecSelferValueTypeMap1234 {
			yyl271 := r.ReadMapStart()
			if yyl271 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl271, d)
			}
		} else if yyct271 == codecSelferValueTypeArray1234 {
			yyl271 := r.ReadArrayStart()
			if yyl271 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl271, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys272Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys272Slc
	var yyhl272 bool = l >= 0
	for yyj272 := 0; ; yyj272++ {
		if yyhl272 {
			if yyj272 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys272Slc = r.DecodeBytes(yys272Slc, true, true)
		yys272 := string(yys272Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys272 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys272)
		} // end switch yys272
	} // end for yyj272
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj287 int
	var yyb287 bool
	var yyhl287 bool = l >= 0
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj287++
		if yyhl287 {
			yyb287 = yyj287 > l
		} else {
			yyb287 = r.CheckBreak()
		}
		if yyb287 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj287-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym302 := z.EncBinary()
		_ = yym302
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep303 := !z.EncBinary()
			yy2arr303 := z.EncBasicHandle().StructToArray
			var yyq303 [5]bool
			_, _, _ = yysep303, yyq303, yy2arr303
			const yyr303 bool = false
			yyq303[0] = x.Kind != ""
			yyq303[1] = x.APIVersion != ""
			yyq303[2] = true
			yyq303[3] = true
			yyq303[4] = true
			var yynn303 int
			if yyr303 || yy2arr303 {
				r.EncodeArrayStart(5)
			} else {
				yynn303 = 0
				for _, b := range yyq303 {
					if b {
						yynn303++
					}
				}
				r.EncodeMapStart(yynn303)
				yynn303 = 0
			}
			if yyr303 || yy2arr303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq303[0] {
					yym305 := z.EncBinary()
					_ = yym305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq303[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym306 := z.EncBinary()
					_ = yym306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr303 || yy2arr303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq303[1] {
					yym308 := z.EncBinary()
					_ = yym308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq303[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym309 := z.EncBinary()
					_ = yym309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr303 || yy2arr303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq303[2] {
					yy311 := &x.ObjectMeta
					yy311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq303[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy312 := &x.ObjectMeta
					yy312.CodecEncodeSelf(e)
				}
			}
			if yyr303 || yy2arr303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq303[3] {
					yy314 := &x.Spec
					yy314.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq303[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy315 := &x.Spec
					yy315.CodecEncodeSelf(e)
				}
			}
			if yyr303 || yy2arr303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq303[4] {
					yy317 := &x.Status
					yy317.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq303[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy318 := &x.Status
					yy318.CodecEncodeSelf(e)
				}
			}
			if yyr303 || yy2arr303 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym319 := z.DecBinary()
	_ = yym319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct320 := r.ContainerType()
		if yyct320 == codecSelferValueTypeMap1234 {
			yyl320 := r.ReadMapStart()
			if yyl320 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl320, d)
			}
		} else if yyct320 == codecSelferValueTypeArray1234 {
			yyl320 := r.ReadArrayStart()
			if yyl320 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys321Slc
	var yyhl321 bool = l >= 0
	for yyj321 := 0; ; yyj321++ {
		if yyhl321 {
			if yyj321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys321Slc = r.DecodeBytes(yys321Slc, true, true)
		yys321 := string(yys321Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys321 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv324 := &x.ObjectMeta
				yyv324.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv325 := &x.Spec
				yyv325.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv326 := &x.Status
				yyv326.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys321)
		} // end switch yys321
	} // end for yyj321
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj327 int
	var yyb327 bool
	var yyhl327 bool = l >= 0
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv330 := &x.ObjectMeta
		yyv330.CodecDecodeSelf(d)
	}
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv331 := &x.Spec
		yyv331.CodecDecodeSelf(d)
	}
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv332 := &x.Status
		yyv332.CodecDecodeSelf(d)
	}
	for {
		yyj327++
		if yyhl327 {
			yyb327 = yyj327 > l
		} else {
			yyb327 = r.CheckBreak()
		}
		if yyb327 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj327-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym333 := z.EncBinary()
		_ = yym333
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep334 := !z.EncBinary()
			yy2arr334 := z.EncBasicHandle().StructToArray
			var yyq334 [18]bool
			_, _, _ = yysep334, yyq334, yy2arr334
			const yyr334 bool = false
			yyq334[0] = len(x.Capacity) != 0
			yyq334[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq334[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq334[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq334[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq334[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq334[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq334[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq334[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq334[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq334[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq334[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq334[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq334[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq334[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq334[15] = len(x.AccessModes) != 0
			yyq334[16] = x.ClaimRef != nil
			yyq334[17] = x.PersistentVolumeReclaimPolicy != ""
			var yynn334 int
			if yyr334 || yy2arr334 {
				r.EncodeArrayStart(18)
			} else {
				yynn334 = 0
				for _, b := range yyq334 {
					if b {
						yynn334++
					}
				}
				r.EncodeMapStart(yynn334)
				yynn334 = 0
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq334[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq334[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn336 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn336 = true
				goto LABEL336
			}
		LABEL336:
			if yyr334 || yy2arr334 {
				if yyn336 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn336 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn337 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn337 = true
				goto LABEL337
			}
		LABEL337:
			if yyr334 || yy2arr334 {
				if yyn337 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn337 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn338 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn338 = true
				goto LABEL338
			}
		LABEL338:
			if yyr334 || yy2arr334 {
				if yyn338 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn338 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn339 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn339 = true
				goto LABEL339
			}
		LABEL339:
			if yyr334 || yy2arr334 {
				if yyn339 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn339 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn340 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn340 = true
				goto LABEL340
			}
		LABEL340:
			if yyr334 || yy2arr334 {
				if yyn340 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn340 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn341 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn341 = true
				goto LABEL341
			}
		LABEL341:
			if yyr334 || yy2arr334 {
				if yyn341 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn341 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn342 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn342 = true
				goto LABEL342
			}
		LABEL342:
			if yyr334 || yy2arr334 {
				if yyn342 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn342 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn343 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn343 = true
				goto LABEL343
			}
		LABEL343:
			if yyr334 || yy2arr334 {
				if yyn343 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn343 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn344 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn344 = true
				goto LABEL344
			}
		LABEL344:
			if yyr334 || yy2arr334 {
				if yyn344 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn344 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn345 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn345 = true
				goto LABEL345
			}
		LABEL345:
			if yyr334 || yy2arr334 {
				if yyn345 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn345 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn346 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn346 = true
				goto LABEL346
			}
		LABEL346:
			if yyr334 || yy2arr334 {
				if yyn346 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn346 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn347 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn347 = true
				goto LABEL347
			}
		LABEL347:
			if yyr334 || yy2arr334 {
				if yyn347 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn347 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn348 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn348 = true
				goto LABEL348
			}
		LABEL348:
			if yyr334 || yy2arr334 {
				if yyn348 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn348 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn349 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn349 = true
				goto LABEL349
			}
		LABEL349:
			if yyr334 || yy2arr334 {
				if yyn349 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn349 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq334[15] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym351 := z.EncBinary()
						_ = yym351
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq334[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym352 := z.EncBinary()
						_ = yym352
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq334[16] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq334[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq334[17] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq334[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym355 := z.DecBinary()
	_ = yym355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct356 := r.ContainerType()
		if yyct356 == codecSelferValueTypeMap1234 {
			yyl356 := r.ReadMapStart()
			if yyl356 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl356, d)
			}
		} else if yyct356 == codecSelferValueTypeArray1234 {
			yyl356 := r.ReadArrayStart()
			if yyl356 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl356, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys357Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys357Slc
	var yyhl357 bool = l >= 0
	for yyj357 := 0; ; yyj357++ {
		if yyhl357 {
			if yyj357 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys357Slc = r.DecodeBytes(yys357Slc, true, true)
		yys357 := string(yys357Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys357 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv358 := &x.Capacity
				yyv358.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv373 := &x.AccessModes
				yym374 := z.DecBinary()
				_ = yym374
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv373), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys357)
		} // end switch yys357
	} // end for yyj357
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj377 int
	var yyb377 bool
	var yyhl377 bool = l >= 0
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv378 := &x.Capacity
		yyv378.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv393 := &x.AccessModes
		yym394 := z.DecBinary()
		_ = yym394
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv393), d)
		}
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj377++
		if yyhl377 {
			yyb377 = yyj377 > l
		} else {
			yyb377 = r.CheckBreak()
		}
		if yyb377 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj377-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym397 := z.EncBinary()
	_ = yym397
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym398 := z.DecBinary()
	_ = yym398
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym399 := z.EncBinary()
		_ = yym399
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep400 := !z.EncBinary()
			yy2arr400 := z.EncBasicHandle().StructToArray
			var yyq400 [3]bool
			_, _, _ = yysep400, yyq400, yy2arr400
			const yyr400 bool = false
			yyq400[0] = x.Phase != ""
			yyq400[1] = x.Message != ""
			yyq400[2] = x.Reason != ""
			var yynn400 int
			if yyr400 || yy2arr400 {
				r.EncodeArrayStart(3)
			} else {
				yynn400 = 0
				for _, b := range yyq400 {
					if b {
						yynn400++
					}
				}
				r.EncodeMapStart(yynn400)
				yynn400 = 0
			}
			if yyr400 || yy2arr400 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq400[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq400[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr400 || yy2arr400 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq400[1] {
					yym403 := z.EncBinary()
					_ = yym403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq400[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym404 := z.EncBinary()
					_ = yym404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr400 || yy2arr400 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq400[2] {
					yym406 := z.EncBinary()
					_ = yym406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq400[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym407 := z.EncBinary()
					_ = yym407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr400 || yy2arr400 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym408 := z.DecBinary()
	_ = yym408
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct409 := r.ContainerType()
		if yyct409 == codecSelferValueTypeMap1234 {
			yyl409 := r.ReadMapStart()
			if yyl409 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl409, d)
			}
		} else if yyct409 == codecSelferValueTypeArray1234 {
			yyl409 := r.ReadArrayStart()
			if yyl409 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl409, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys410Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys410Slc
	var yyhl410 bool = l >= 0
	for yyj410 := 0; ; yyj410++ {
		if yyhl410 {
			if yyj410 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys410Slc = r.DecodeBytes(yys410Slc, true, true)
		yys410 := string(yys410Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys410 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys410)
		} // end switch yys410
	} // end for yyj410
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj414 int
	var yyb414 bool
	var yyhl414 bool = l >= 0
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj414++
		if yyhl414 {
			yyb414 = yyj414 > l
		} else {
			yyb414 = r.CheckBreak()
		}
		if yyb414 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj414-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym418 := z.EncBinary()
		_ = yym418
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep419 := !z.EncBinary()
			yy2arr419 := z.EncBasicHandle().StructToArray
			var yyq419 [4]bool
			_, _, _ = yysep419, yyq419, yy2arr419
			const yyr419 bool = false
			yyq419[0] = x.Kind != ""
			yyq419[1] = x.APIVersion != ""
			yyq419[2] = true
			var yynn419 int
			if yyr419 || yy2arr419 {
				r.EncodeArrayStart(4)
			} else {
				yynn419 = 1
				for _, b := range yyq419 {
					if b {
						yynn419++
					}
				}
				r.EncodeMapStart(yynn419)
				yynn419 = 0
			}
			if yyr419 || yy2arr419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq419[0] {
					yym421 := z.EncBinary()
					_ = yym421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq419[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr419 || yy2arr419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq419[1] {
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq419[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr419 || yy2arr419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq419[2] {
					yy427 := &x.ListMeta
					yym428 := z.EncBinary()
					_ = yym428
					if false {
					} else if z.HasExtensions() && z.EncExt(yy427) {
					} else {
						z.EncFallback(yy427)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq419[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy429 := &x.ListMeta
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else if z.HasExtensions() && z.EncExt(yy429) {
					} else {
						z.EncFallback(yy429)
					}
				}
			}
			if yyr419 || yy2arr419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym432 := z.EncBinary()
					_ = yym432
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr419 || yy2arr419 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym434 := z.DecBinary()
	_ = yym434
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct435 := r.ContainerType()
		if yyct435 == codecSelferValueTypeMap1234 {
			yyl435 := r.ReadMapStart()
			if yyl435 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl435, d)
			}
		} else if yyct435 == codecSelferValueTypeArray1234 {
			yyl435 := r.ReadArrayStart()
			if yyl435 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl435, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys436Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys436Slc
	var yyhl436 bool = l >= 0
	for yyj436 := 0; ; yyj436++ {
		if yyhl436 {
			if yyj436 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys436Slc = r.DecodeBytes(yys436Slc, true, true)
		yys436 := string(yys436Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys436 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv439 := &x.ListMeta
				yym440 := z.DecBinary()
				_ = yym440
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv439) {
				} else {
					z.DecFallback(yyv439, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv441 := &x.Items
				yym442 := z.DecBinary()
				_ = yym442
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv441), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys436)
		} // end switch yys436
	} // end for yyj436
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj443 int
	var yyb443 bool
	var yyhl443 bool = l >= 0
	yyj443++
	if yyhl443 {
		yyb443 = yyj443 > l
	} else {
		yyb443 = r.CheckBreak()
	}
	if yyb443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj443++
	if yyhl443 {
		yyb443 = yyj443 > l
	} else {
		yyb443 = r.CheckBreak()
	}
	if yyb443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj443++
	if yyhl443 {
		yyb443 = yyj443 > l
	} else {
		yyb443 = r.CheckBreak()
	}
	if yyb443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv446 := &x.ListMeta
		yym447 := z.DecBinary()
		_ = yym447
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv446) {
		} else {
			z.DecFallback(yyv446, false)
		}
	}
	yyj443++
	if yyhl443 {
		yyb443 = yyj443 > l
	} else {
		yyb443 = r.CheckBreak()
	}
	if yyb443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv448 := &x.Items
		yym449 := z.DecBinary()
		_ = yym449
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv448), d)
		}
	}
	for {
		yyj443++
		if yyhl443 {
			yyb443 = yyj443 > l
		} else {
			yyb443 = r.CheckBreak()
		}
		if yyb443 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj443-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym450 := z.EncBinary()
		_ = yym450
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep451 := !z.EncBinary()
			yy2arr451 := z.EncBasicHandle().StructToArray
			var yyq451 [5]bool
			_, _, _ = yysep451, yyq451, yy2arr451
			const yyr451 bool = false
			yyq451[0] = x.Kind != ""
			yyq451[1] = x.APIVersion != ""
			yyq451[2] = true
			yyq451[3] = true
			yyq451[4] = true
			var yynn451 int
			if yyr451 || yy2arr451 {
				r.EncodeArrayStart(5)
			} else {
				yynn451 = 0
				for _, b := range yyq451 {
					if b {
						yynn451++
					}
				}
				r.EncodeMapStart(yynn451)
				yynn451 = 0
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[0] {
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq451[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym454 := z.EncBinary()
					_ = yym454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[1] {
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq451[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym457 := z.EncBinary()
					_ = yym457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[2] {
					yy459 := &x.ObjectMeta
					yy459.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq451[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy460 := &x.ObjectMeta
					yy460.CodecEncodeSelf(e)
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[3] {
					yy462 := &x.Spec
					yy462.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq451[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy463 := &x.Spec
					yy463.CodecEncodeSelf(e)
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[4] {
					yy465 := &x.Status
					yy465.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq451[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy466 := &x.Status
					yy466.CodecEncodeSelf(e)
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym467 := z.DecBinary()
	_ = yym467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct468 := r.ContainerType()
		if yyct468 == codecSelferValueTypeMap1234 {
			yyl468 := r.ReadMapStart()
			if yyl468 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl468, d)
			}
		} else if yyct468 == codecSelferValueTypeArray1234 {
			yyl468 := r.ReadArrayStart()
			if yyl468 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl468, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys469Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys469Slc
	var yyhl469 bool = l >= 0
	for yyj469 := 0; ; yyj469++ {
		if yyhl469 {
			if yyj469 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys469Slc = r.DecodeBytes(yys469Slc, true, true)
		yys469 := string(yys469Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys469 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv472 := &x.ObjectMeta
				yyv472.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv473 := &x.Spec
				yyv473.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv474 := &x.Status
				yyv474.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys469)
		} // end switch yys469
	} // end for yyj469
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj475 int
	var yyb475 bool
	var yyhl475 bool = l >= 0
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv478 := &x.ObjectMeta
		yyv478.CodecDecodeSelf(d)
	}
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv479 := &x.Spec
		yyv479.CodecDecodeSelf(d)
	}
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv480 := &x.Status
		yyv480.CodecDecodeSelf(d)
	}
	for {
		yyj475++
		if yyhl475 {
			yyb475 = yyj475 > l
		} else {
			yyb475 = r.CheckBreak()
		}
		if yyb475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym481 := z.EncBinary()
		_ = yym481
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep482 := !z.EncBinary()
			yy2arr482 := z.EncBasicHandle().StructToArray
			var yyq482 [4]bool
			_, _, _ = yysep482, yyq482, yy2arr482
			const yyr482 bool = false
			yyq482[0] = x.Kind != ""
			yyq482[1] = x.APIVersion != ""
			yyq482[2] = true
			var yynn482 int
			if yyr482 || yy2arr482 {
				r.EncodeArrayStart(4)
			} else {
				yynn482 = 1
				for _, b := range yyq482 {
					if b {
						yynn482++
					}
				}
				r.EncodeMapStart(yynn482)
				yynn482 = 0
			}
			if yyr482 || yy2arr482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq482[0] {
					yym484 := z.EncBinary()
					_ = yym484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq482[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym485 := z.EncBinary()
					_ = yym485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr482 || yy2arr482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq482[1] {
					yym487 := z.EncBinary()
					_ = yym487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq482[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym488 := z.EncBinary()
					_ = yym488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr482 || yy2arr482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq482[2] {
					yy490 := &x.ListMeta
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else if z.HasExtensions() && z.EncExt(yy490) {
					} else {
						z.EncFallback(yy490)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq482[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy492 := &x.ListMeta
					yym493 := z.EncBinary()
					_ = yym493
					if false {
					} else if z.HasExtensions() && z.EncExt(yy492) {
					} else {
						z.EncFallback(yy492)
					}
				}
			}
			if yyr482 || yy2arr482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym495 := z.EncBinary()
					_ = yym495
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym496 := z.EncBinary()
					_ = yym496
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr482 || yy2arr482 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym497 := z.DecBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct498 := r.ContainerType()
		if yyct498 == codecSelferValueTypeMap1234 {
			yyl498 := r.ReadMapStart()
			if yyl498 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl498, d)
			}
		} else if yyct498 == codecSelferValueTypeArray1234 {
			yyl498 := r.ReadArrayStart()
			if yyl498 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl498, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys499Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys499Slc
	var yyhl499 bool = l >= 0
	for yyj499 := 0; ; yyj499++ {
		if yyhl499 {
			if yyj499 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys499Slc = r.DecodeBytes(yys499Slc, true, true)
		yys499 := string(yys499Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys499 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv502 := &x.ListMeta
				yym503 := z.DecBinary()
				_ = yym503
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv502) {
				} else {
					z.DecFallback(yyv502, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv504 := &x.Items
				yym505 := z.DecBinary()
				_ = yym505
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv504), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys499)
		} // end switch yys499
	} // end for yyj499
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj506 int
	var yyb506 bool
	var yyhl506 bool = l >= 0
	yyj506++
	if yyhl506 {
		yyb506 = yyj506 > l
	} else {
		yyb506 = r.CheckBreak()
	}
	if yyb506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj506++
	if yyhl506 {
		yyb506 = yyj506 > l
	} else {
		yyb506 = r.CheckBreak()
	}
	if yyb506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj506++
	if yyhl506 {
		yyb506 = yyj506 > l
	} else {
		yyb506 = r.CheckBreak()
	}
	if yyb506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv509 := &x.ListMeta
		yym510 := z.DecBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv509) {
		} else {
			z.DecFallback(yyv509, false)
		}
	}
	yyj506++
	if yyhl506 {
		yyb506 = yyj506 > l
	} else {
		yyb506 = r.CheckBreak()
	}
	if yyb506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv511 := &x.Items
		yym512 := z.DecBinary()
		_ = yym512
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv511), d)
		}
	}
	for {
		yyj506++
		if yyhl506 {
			yyb506 = yyj506 > l
		} else {
			yyb506 = r.CheckBreak()
		}
		if yyb506 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj506-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym513 := z.EncBinary()
		_ = yym513
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep514 := !z.EncBinary()
			yy2arr514 := z.EncBasicHandle().StructToArray
			var yyq514 [4]bool
			_, _, _ = yysep514, yyq514, yy2arr514
			const yyr514 bool = false
			yyq514[0] = len(x.AccessModes) != 0
			yyq514[1] = x.Selector != nil
			yyq514[2] = true
			yyq514[3] = x.VolumeName != ""
			var yynn514 int
			if yyr514 || yy2arr514 {
				r.EncodeArrayStart(4)
			} else {
				yynn514 = 0
				for _, b := range yyq514 {
					if b {
						yynn514++
					}
				}
				r.EncodeMapStart(yynn514)
				yynn514 = 0
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq514[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym516 := z.EncBinary()
						_ = yym516
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq514[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym517 := z.EncBinary()
						_ = yym517
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq514[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym519 := z.EncBinary()
						_ = yym519
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq514[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym520 := z.EncBinary()
						_ = yym520
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq514[2] {
					yy522 := &x.Resources
					yy522.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq514[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy523 := &x.Resources
					yy523.CodecEncodeSelf(e)
				}
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq514[3] {
					yym525 := z.EncBinary()
					_ = yym525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq514[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym526 := z.EncBinary()
					_ = yym526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym527 := z.DecBinary()
	_ = yym527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct528 := r.ContainerType()
		if yyct528 == codecSelferValueTypeMap1234 {
			yyl528 := r.ReadMapStart()
			if yyl528 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl528, d)
			}
		} else if yyct528 == codecSelferValueTypeArray1234 {
			yyl528 := r.ReadArrayStart()
			if yyl528 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl528, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys529Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys529Slc
	var yyhl529 bool = l >= 0
	for yyj529 := 0; ; yyj529++ {
		if yyhl529 {
			if yyj529 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys529Slc = r.DecodeBytes(yys529Slc, true, true)
		yys529 := string(yys529Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys529 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv530 := &x.AccessModes
				yym531 := z.DecBinary()
				_ = yym531
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv530), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym533 := z.DecBinary()
				_ = yym533
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv534 := &x.Resources
				yyv534.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys529)
		} // end switch yys529
	} // end for yyj529
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj536 int
	var yyb536 bool
	var yyhl536 bool = l >= 0
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv537 := &x.AccessModes
		yym538 := z.DecBinary()
		_ = yym538
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv537), d)
		}
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym540 := z.DecBinary()
		_ = yym540
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv541 := &x.Resources
		yyv541.CodecDecodeSelf(d)
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj536++
		if yyhl536 {
			yyb536 = yyj536 > l
		} else {
			yyb536 = r.CheckBreak()
		}
		if yyb536 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj536-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym543 := z.EncBinary()
		_ = yym543
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep544 := !z.EncBinary()
			yy2arr544 := z.EncBasicHandle().StructToArray
			var yyq544 [3]bool
			_, _, _ = yysep544, yyq544, yy2arr544
			const yyr544 bool = false
			yyq544[0] = x.Phase != ""
			yyq544[1] = len(x.AccessModes) != 0
			yyq544[2] = len(x.Capacity) != 0
			var yynn544 int
			if yyr544 || yy2arr544 {
				r.EncodeArrayStart(3)
			} else {
				yynn544 = 0
				for _, b := range yyq544 {
					if b {
						yynn544++
					}
				}
				r.EncodeMapStart(yynn544)
				yynn544 = 0
			}
			if yyr544 || yy2arr544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq544[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq544[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr544 || yy2arr544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq544[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym547 := z.EncBinary()
						_ = yym547
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq544[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym548 := z.EncBinary()
						_ = yym548
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr544 || yy2arr544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq544[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq544[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr544 || yy2arr544 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym550 := z.DecBinary()
	_ = yym550
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct551 := r.ContainerType()
		if yyct551 == codecSelferValueTypeMap1234 {
			yyl551 := r.ReadMapStart()
			if yyl551 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl551, d)
			}
		} else if yyct551 == codecSelferValueTypeArray1234 {
			yyl551 := r.ReadArrayStart()
			if yyl551 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl551, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys552Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys552Slc
	var yyhl552 bool = l >= 0
	for yyj552 := 0; ; yyj552++ {
		if yyhl552 {
			if yyj552 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys552Slc = r.DecodeBytes(yys552Slc, true, true)
		yys552 := string(yys552Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys552 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv554 := &x.AccessModes
				yym555 := z.DecBinary()
				_ = yym555
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv554), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv556 := &x.Capacity
				yyv556.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys552)
		} // end switch yys552
	} // end for yyj552
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj557 int
	var yyb557 bool
	var yyhl557 bool = l >= 0
	yyj557++
	if yyhl557 {
		yyb557 = yyj557 > l
	} else {
		yyb557 = r.CheckBreak()
	}
	if yyb557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj557++
	if yyhl557 {
		yyb557 = yyj557 > l
	} else {
		yyb557 = r.CheckBreak()
	}
	if yyb557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv559 := &x.AccessModes
		yym560 := z.DecBinary()
		_ = yym560
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv559), d)
		}
	}
	yyj557++
	if yyhl557 {
		yyb557 = yyj557 > l
	} else {
		yyb557 = r.CheckBreak()
	}
	if yyb557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv561 := &x.Capacity
		yyv561.CodecDecodeSelf(d)
	}
	for {
		yyj557++
		if yyhl557 {
			yyb557 = yyj557 > l
		} else {
			yyb557 = r.CheckBreak()
		}
		if yyb557 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj557-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym562 := z.EncBinary()
	_ = yym562
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym563 := z.DecBinary()
	_ = yym563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym564 := z.EncBinary()
	_ = yym564
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym565 := z.DecBinary()
	_ = yym565
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym566 := z.EncBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym567 := z.DecBinary()
	_ = yym567
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym568 := z.EncBinary()
		_ = yym568
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep569 := !z.EncBinary()
			yy2arr569 := z.EncBasicHandle().StructToArray
			var yyq569 [1]bool
			_, _, _ = yysep569, yyq569, yy2arr569
			const yyr569 bool = false
			var yynn569 int
			if yyr569 || yy2arr569 {
				r.EncodeArrayStart(1)
			} else {
				yynn569 = 1
				for _, b := range yyq569 {
					if b {
						yynn569++
					}
				}
				r.EncodeMapStart(yynn569)
				yynn569 = 0
			}
			if yyr569 || yy2arr569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym571 := z.EncBinary()
				_ = yym571
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym572 := z.EncBinary()
				_ = yym572
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr569 || yy2arr569 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym573 := z.DecBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct574 := r.ContainerType()
		if yyct574 == codecSelferValueTypeMap1234 {
			yyl574 := r.ReadMapStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl574, d)
			}
		} else if yyct574 == codecSelferValueTypeArray1234 {
			yyl574 := r.ReadArrayStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl574, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys575Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys575Slc
	var yyhl575 bool = l >= 0
	for yyj575 := 0; ; yyj575++ {
		if yyhl575 {
			if yyj575 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys575Slc = r.DecodeBytes(yys575Slc, true, true)
		yys575 := string(yys575Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys575 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys575)
		} // end switch yys575
	} // end for yyj575
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj577 int
	var yyb577 bool
	var yyhl577 bool = l >= 0
	yyj577++
	if yyhl577 {
		yyb577 = yyj577 > l
	} else {
		yyb577 = r.CheckBreak()
	}
	if yyb577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj577++
		if yyhl577 {
			yyb577 = yyj577 > l
		} else {
			yyb577 = r.CheckBreak()
		}
		if yyb577 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj577-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym579 := z.EncBinary()
		_ = yym579
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep580 := !z.EncBinary()
			yy2arr580 := z.EncBasicHandle().StructToArray
			var yyq580 [1]bool
			_, _, _ = yysep580, yyq580, yy2arr580
			const yyr580 bool = false
			yyq580[0] = x.Medium != ""
			var yynn580 int
			if yyr580 || yy2arr580 {
				r.EncodeArrayStart(1)
			} else {
				yynn580 = 0
				for _, b := range yyq580 {
					if b {
						yynn580++
					}
				}
				r.EncodeMapStart(yynn580)
				yynn580 = 0
			}
			if yyr580 || yy2arr580 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq580[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq580[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr580 || yy2arr580 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym582 := z.DecBinary()
	_ = yym582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct583 := r.ContainerType()
		if yyct583 == codecSelferValueTypeMap1234 {
			yyl583 := r.ReadMapStart()
			if yyl583 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl583, d)
			}
		} else if yyct583 == codecSelferValueTypeArray1234 {
			yyl583 := r.ReadArrayStart()
			if yyl583 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl583, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys584Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys584Slc
	var yyhl584 bool = l >= 0
	for yyj584 := 0; ; yyj584++ {
		if yyhl584 {
			if yyj584 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys584Slc = r.DecodeBytes(yys584Slc, true, true)
		yys584 := string(yys584Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys584 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys584)
		} // end switch yys584
	} // end for yyj584
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj586 int
	var yyb586 bool
	var yyhl586 bool = l >= 0
	yyj586++
	if yyhl586 {
		yyb586 = yyj586 > l
	} else {
		yyb586 = r.CheckBreak()
	}
	if yyb586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj586++
		if yyhl586 {
			yyb586 = yyj586 > l
		} else {
			yyb586 = r.CheckBreak()
		}
		if yyb586 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj586-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym588 := z.EncBinary()
		_ = yym588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep589 := !z.EncBinary()
			yy2arr589 := z.EncBasicHandle().StructToArray
			var yyq589 [3]bool
			_, _, _ = yysep589, yyq589, yy2arr589
			const yyr589 bool = false
			yyq589[2] = x.ReadOnly != false
			var yynn589 int
			if yyr589 || yy2arr589 {
				r.EncodeArrayStart(3)
			} else {
				yynn589 = 2
				for _, b := range yyq589 {
					if b {
						yynn589++
					}
				}
				r.EncodeMapStart(yynn589)
				yynn589 = 0
			}
			if yyr589 || yy2arr589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr589 || yy2arr589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym594 := z.EncBinary()
				_ = yym594
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym595 := z.EncBinary()
				_ = yym595
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr589 || yy2arr589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq589[2] {
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq589[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr589 || yy2arr589 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym599 := z.DecBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct600 := r.ContainerType()
		if yyct600 == codecSelferValueTypeMap1234 {
			yyl600 := r.ReadMapStart()
			if yyl600 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl600, d)
			}
		} else if yyct600 == codecSelferValueTypeArray1234 {
			yyl600 := r.ReadArrayStart()
			if yyl600 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys601Slc
	var yyhl601 bool = l >= 0
	for yyj601 := 0; ; yyj601++ {
		if yyhl601 {
			if yyj601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys601Slc = r.DecodeBytes(yys601Slc, true, true)
		yys601 := string(yys601Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys601 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys601)
		} // end switch yys601
	} // end for yyj601
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym609 := z.EncBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep610 := !z.EncBinary()
			yy2arr610 := z.EncBasicHandle().StructToArray
			var yyq610 [8]bool
			_, _, _ = yysep610, yyq610, yy2arr610
			const yyr610 bool = false
			yyq610[2] = x.FSType != ""
			yyq610[3] = x.RBDPool != ""
			yyq610[4] = x.RadosUser != ""
			yyq610[5] = x.Keyring != ""
			yyq610[6] = x.SecretRef != nil
			yyq610[7] = x.ReadOnly != false
			var yynn610 int
			if yyr610 || yy2arr610 {
				r.EncodeArrayStart(8)
			} else {
				yynn610 = 2
				for _, b := range yyq610 {
					if b {
						yynn610++
					}
				}
				r.EncodeMapStart(yynn610)
				yynn610 = 0
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym615 := z.EncBinary()
				_ = yym615
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym616 := z.EncBinary()
				_ = yym616
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq610[2] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq610[3] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq610[4] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq610[5] {
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym628 := z.EncBinary()
					_ = yym628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq610[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq610[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq610[7] {
					yym631 := z.EncBinary()
					_ = yym631
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq610[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym633 := z.DecBinary()
	_ = yym633
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct634 := r.ContainerType()
		if yyct634 == codecSelferValueTypeMap1234 {
			yyl634 := r.ReadMapStart()
			if yyl634 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl634, d)
			}
		} else if yyct634 == codecSelferValueTypeArray1234 {
			yyl634 := r.ReadArrayStart()
			if yyl634 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl634, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys635Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys635Slc
	var yyhl635 bool = l >= 0
	for yyj635 := 0; ; yyj635++ {
		if yyhl635 {
			if yyj635 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys635Slc = r.DecodeBytes(yys635Slc, true, true)
		yys635 := string(yys635Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys635 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv636 := &x.CephMonitors
				yym637 := z.DecBinary()
				_ = yym637
				if false {
				} else {
					z.F.DecSliceStringX(yyv636, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys635)
		} // end switch yys635
	} // end for yyj635
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj645 int
	var yyb645 bool
	var yyhl645 bool = l >= 0
	yyj645++
	if yyhl645 {
		yyb645 = yyj645 > l
	} else {
		yyb645 = r.CheckBreak()
	}
	if yyb645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv646 := &x.CephMonitors
		yym647 := z.DecBinary()
		_ = yym647
		if false {
		} else {
			z.F.DecSliceStringX(yyv646, false, d)
		}
	}
	yyj645++
	if yyhl645 {
		yyb645 = yyj645 > l
	} else {
		yyb645 = r.CheckBreak()
	}
	if yyb645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj645++
	if yyhl645 {
		yyb645 = yyj645 > l
	} else {
		yyb645 = r.CheckBreak()
	}
	if yyb645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj645++
	if yyhl645 {
		yyb645 = yyj645 > l
	} else {
		yyb645 = r.CheckBreak()
	}
	if yyb645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj645++
	if yyhl645 {
		yyb645 = yyj645 > l
	} else {
		yyb645 = r.CheckBreak()
	}
	if yyb645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj645++
	if yyhl645 {
		yyb645 = yyj645 > l
	} else {
		yyb645 = r.CheckBreak()
	}
	if yyb645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj645++
	if yyhl645 {
		yyb645 = yyj645 > l
	} else {
		yyb645 = r.CheckBreak()
	}
	if yyb645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj645++
	if yyhl645 {
		yyb645 = yyj645 > l
	} else {
		yyb645 = r.CheckBreak()
	}
	if yyb645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj645++
		if yyhl645 {
			yyb645 = yyj645 > l
		} else {
			yyb645 = r.CheckBreak()
		}
		if yyb645 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj645-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym655 := z.EncBinary()
		_ = yym655
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep656 := !z.EncBinary()
			yy2arr656 := z.EncBasicHandle().StructToArray
			var yyq656 [3]bool
			_, _, _ = yysep656, yyq656, yy2arr656
			const yyr656 bool = false
			yyq656[1] = x.FSType != ""
			yyq656[2] = x.ReadOnly != false
			var yynn656 int
			if yyr656 || yy2arr656 {
				r.EncodeArrayStart(3)
			} else {
				yynn656 = 1
				for _, b := range yyq656 {
					if b {
						yynn656++
					}
				}
				r.EncodeMapStart(yynn656)
				yynn656 = 0
			}
			if yyr656 || yy2arr656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym658 := z.EncBinary()
				_ = yym658
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym659 := z.EncBinary()
				_ = yym659
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr656 || yy2arr656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq656[1] {
					yym661 := z.EncBinary()
					_ = yym661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq656[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr656 || yy2arr656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq656[2] {
					yym664 := z.EncBinary()
					_ = yym664
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq656[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr656 || yy2arr656 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym666 := z.DecBinary()
	_ = yym666
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct667 := r.ContainerType()
		if yyct667 == codecSelferValueTypeMap1234 {
			yyl667 := r.ReadMapStart()
			if yyl667 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl667, d)
			}
		} else if yyct667 == codecSelferValueTypeArray1234 {
			yyl667 := r.ReadArrayStart()
			if yyl667 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl667, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys668Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys668Slc
	var yyhl668 bool = l >= 0
	for yyj668 := 0; ; yyj668++ {
		if yyhl668 {
			if yyj668 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys668Slc = r.DecodeBytes(yys668Slc, true, true)
		yys668 := string(yys668Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys668 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys668)
		} // end switch yys668
	} // end for yyj668
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj672 int
	var yyb672 bool
	var yyhl672 bool = l >= 0
	yyj672++
	if yyhl672 {
		yyb672 = yyj672 > l
	} else {
		yyb672 = r.CheckBreak()
	}
	if yyb672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj672++
	if yyhl672 {
		yyb672 = yyj672 > l
	} else {
		yyb672 = r.CheckBreak()
	}
	if yyb672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj672++
	if yyhl672 {
		yyb672 = yyj672 > l
	} else {
		yyb672 = r.CheckBreak()
	}
	if yyb672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj672++
		if yyhl672 {
			yyb672 = yyj672 > l
		} else {
			yyb672 = r.CheckBreak()
		}
		if yyb672 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj672-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym676 := z.EncBinary()
		_ = yym676
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep677 := !z.EncBinary()
			yy2arr677 := z.EncBasicHandle().StructToArray
			var yyq677 [6]bool
			_, _, _ = yysep677, yyq677, yy2arr677
			const yyr677 bool = false
			yyq677[1] = x.Path != ""
			yyq677[2] = x.User != ""
			yyq677[3] = x.SecretFile != ""
			yyq677[4] = x.SecretRef != nil
			yyq677[5] = x.ReadOnly != false
			var yynn677 int
			if yyr677 || yy2arr677 {
				r.EncodeArrayStart(6)
			} else {
				yynn677 = 1
				for _, b := range yyq677 {
					if b {
						yynn677++
					}
				}
				r.EncodeMapStart(yynn677)
				yynn677 = 0
			}
			if yyr677 || yy2arr677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr677 || yy2arr677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq677[1] {
					yym682 := z.EncBinary()
					_ = yym682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq677[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym683 := z.EncBinary()
					_ = yym683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr677 || yy2arr677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq677[2] {
					yym685 := z.EncBinary()
					_ = yym685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq677[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym686 := z.EncBinary()
					_ = yym686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr677 || yy2arr677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq677[3] {
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq677[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr677 || yy2arr677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq677[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq677[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr677 || yy2arr677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq677[5] {
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq677[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr677 || yy2arr677 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym694 := z.DecBinary()
	_ = yym694
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct695 := r.ContainerType()
		if yyct695 == codecSelferValueTypeMap1234 {
			yyl695 := r.ReadMapStart()
			if yyl695 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl695, d)
			}
		} else if yyct695 == codecSelferValueTypeArray1234 {
			yyl695 := r.ReadArrayStart()
			if yyl695 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl695, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys696Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys696Slc
	var yyhl696 bool = l >= 0
	for yyj696 := 0; ; yyj696++ {
		if yyhl696 {
			if yyj696 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys696Slc = r.DecodeBytes(yys696Slc, true, true)
		yys696 := string(yys696Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys696 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv697 := &x.Monitors
				yym698 := z.DecBinary()
				_ = yym698
				if false {
				} else {
					z.F.DecSliceStringX(yyv697, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys696)
		} // end switch yys696
	} // end for yyj696
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj704 int
	var yyb704 bool
	var yyhl704 bool = l >= 0
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv705 := &x.Monitors
		yym706 := z.DecBinary()
		_ = yym706
		if false {
		} else {
			z.F.DecSliceStringX(yyv705, false, d)
		}
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj704++
		if yyhl704 {
			yyb704 = yyj704 > l
		} else {
			yyb704 = r.CheckBreak()
		}
		if yyb704 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj704-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym712 := z.EncBinary()
		_ = yym712
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep713 := !z.EncBinary()
			yy2arr713 := z.EncBasicHandle().StructToArray
			var yyq713 [1]bool
			_, _, _ = yysep713, yyq713, yy2arr713
			const yyr713 bool = false
			var yynn713 int
			if yyr713 || yy2arr713 {
				r.EncodeArrayStart(1)
			} else {
				yynn713 = 1
				for _, b := range yyq713 {
					if b {
						yynn713++
					}
				}
				r.EncodeMapStart(yynn713)
				yynn713 = 0
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym715 := z.EncBinary()
				_ = yym715
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym716 := z.EncBinary()
				_ = yym716
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym717 := z.DecBinary()
	_ = yym717
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct718 := r.ContainerType()
		if yyct718 == codecSelferValueTypeMap1234 {
			yyl718 := r.ReadMapStart()
			if yyl718 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl718, d)
			}
		} else if yyct718 == codecSelferValueTypeArray1234 {
			yyl718 := r.ReadArrayStart()
			if yyl718 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl718, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys719Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys719Slc
	var yyhl719 bool = l >= 0
	for yyj719 := 0; ; yyj719++ {
		if yyhl719 {
			if yyj719 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys719Slc = r.DecodeBytes(yys719Slc, true, true)
		yys719 := string(yys719Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys719 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys719)
		} // end switch yys719
	} // end for yyj719
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj721 int
	var yyb721 bool
	var yyhl721 bool = l >= 0
	yyj721++
	if yyhl721 {
		yyb721 = yyj721 > l
	} else {
		yyb721 = r.CheckBreak()
	}
	if yyb721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj721++
		if yyhl721 {
			yyb721 = yyj721 > l
		} else {
			yyb721 = r.CheckBreak()
		}
		if yyb721 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj721-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym723 := z.EncBinary()
	_ = yym723
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym724 := z.DecBinary()
	_ = yym724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym725 := z.EncBinary()
	_ = yym725
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym726 := z.DecBinary()
	_ = yym726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym727 := z.EncBinary()
		_ = yym727
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep728 := !z.EncBinary()
			yy2arr728 := z.EncBasicHandle().StructToArray
			var yyq728 [4]bool
			_, _, _ = yysep728, yyq728, yy2arr728
			const yyr728 bool = false
			yyq728[1] = x.FSType != ""
			yyq728[2] = x.Partition != 0
			yyq728[3] = x.ReadOnly != false
			var yynn728 int
			if yyr728 || yy2arr728 {
				r.EncodeArrayStart(4)
			} else {
				yynn728 = 1
				for _, b := range yyq728 {
					if b {
						yynn728++
					}
				}
				r.EncodeMapStart(yynn728)
				yynn728 = 0
			}
			if yyr728 || yy2arr728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym730 := z.EncBinary()
				_ = yym730
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym731 := z.EncBinary()
				_ = yym731
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr728 || yy2arr728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq728[1] {
					yym733 := z.EncBinary()
					_ = yym733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq728[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr728 || yy2arr728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq728[2] {
					yym736 := z.EncBinary()
					_ = yym736
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq728[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym737 := z.EncBinary()
					_ = yym737
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr728 || yy2arr728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq728[3] {
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq728[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym740 := z.EncBinary()
					_ = yym740
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr728 || yy2arr728 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym741 := z.DecBinary()
	_ = yym741
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct742 := r.ContainerType()
		if yyct742 == codecSelferValueTypeMap1234 {
			yyl742 := r.ReadMapStart()
			if yyl742 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl742, d)
			}
		} else if yyct742 == codecSelferValueTypeArray1234 {
			yyl742 := r.ReadArrayStart()
			if yyl742 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl742, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys743Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys743Slc
	var yyhl743 bool = l >= 0
	for yyj743 := 0; ; yyj743++ {
		if yyhl743 {
			if yyj743 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys743Slc = r.DecodeBytes(yys743Slc, true, true)
		yys743 := string(yys743Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys743 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys743)
		} // end switch yys743
	} // end for yyj743
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj748 int
	var yyb748 bool
	var yyhl748 bool = l >= 0
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj748++
		if yyhl748 {
			yyb748 = yyj748 > l
		} else {
			yyb748 = r.CheckBreak()
		}
		if yyb748 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj748-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym753 := z.EncBinary()
		_ = yym753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep754 := !z.EncBinary()
			yy2arr754 := z.EncBasicHandle().StructToArray
			var yyq754 [5]bool
			_, _, _ = yysep754, yyq754, yy2arr754
			const yyr754 bool = false
			yyq754[1] = x.FSType != ""
			yyq754[2] = x.SecretRef != nil
			yyq754[3] = x.ReadOnly != false
			yyq754[4] = len(x.Options) != 0
			var yynn754 int
			if yyr754 || yy2arr754 {
				r.EncodeArrayStart(5)
			} else {
				yynn754 = 1
				for _, b := range yyq754 {
					if b {
						yynn754++
					}
				}
				r.EncodeMapStart(yynn754)
				yynn754 = 0
			}
			if yyr754 || yy2arr754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr754 || yy2arr754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq754[1] {
					yym759 := z.EncBinary()
					_ = yym759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq754[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym760 := z.EncBinary()
					_ = yym760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr754 || yy2arr754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq754[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq754[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr754 || yy2arr754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq754[3] {
					yym763 := z.EncBinary()
					_ = yym763
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq754[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr754 || yy2arr754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq754[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym766 := z.EncBinary()
						_ = yym766
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq754[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym767 := z.EncBinary()
						_ = yym767
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr754 || yy2arr754 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym768 := z.DecBinary()
	_ = yym768
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct769 := r.ContainerType()
		if yyct769 == codecSelferValueTypeMap1234 {
			yyl769 := r.ReadMapStart()
			if yyl769 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl769, d)
			}
		} else if yyct769 == codecSelferValueTypeArray1234 {
			yyl769 := r.ReadArrayStart()
			if yyl769 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl769, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys770Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys770Slc
	var yyhl770 bool = l >= 0
	for yyj770 := 0; ; yyj770++ {
		if yyhl770 {
			if yyj770 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys770Slc = r.DecodeBytes(yys770Slc, true, true)
		yys770 := string(yys770Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys770 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv775 := &x.Options
				yym776 := z.DecBinary()
				_ = yym776
				if false {
				} else {
					z.F.DecMapStringStringX(yyv775, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys770)
		} // end switch yys770
	} // end for yyj770
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj777 int
	var yyb777 bool
	var yyhl777 bool = l >= 0
	yyj777++
	if yyhl777 {
		yyb777 = yyj777 > l
	} else {
		yyb777 = r.CheckBreak()
	}
	if yyb777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj777++
	if yyhl777 {
		yyb777 = yyj777 > l
	} else {
		yyb777 = r.CheckBreak()
	}
	if yyb777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj777++
	if yyhl777 {
		yyb777 = yyj777 > l
	} else {
		yyb777 = r.CheckBreak()
	}
	if yyb777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj777++
	if yyhl777 {
		yyb777 = yyj777 > l
	} else {
		yyb777 = r.CheckBreak()
	}
	if yyb777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj777++
	if yyhl777 {
		yyb777 = yyj777 > l
	} else {
		yyb777 = r.CheckBreak()
	}
	if yyb777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv782 := &x.Options
		yym783 := z.DecBinary()
		_ = yym783
		if false {
		} else {
			z.F.DecMapStringStringX(yyv782, false, d)
		}
	}
	for {
		yyj777++
		if yyhl777 {
			yyb777 = yyj777 > l
		} else {
			yyb777 = r.CheckBreak()
		}
		if yyb777 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj777-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym784 := z.EncBinary()
		_ = yym784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep785 := !z.EncBinary()
			yy2arr785 := z.EncBasicHandle().StructToArray
			var yyq785 [4]bool
			_, _, _ = yysep785, yyq785, yy2arr785
			const yyr785 bool = false
			yyq785[1] = x.FSType != ""
			yyq785[2] = x.Partition != 0
			yyq785[3] = x.ReadOnly != false
			var yynn785 int
			if yyr785 || yy2arr785 {
				r.EncodeArrayStart(4)
			} else {
				yynn785 = 1
				for _, b := range yyq785 {
					if b {
						yynn785++
					}
				}
				r.EncodeMapStart(yynn785)
				yynn785 = 0
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym787 := z.EncBinary()
				_ = yym787
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym788 := z.EncBinary()
				_ = yym788
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq785[1] {
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq785[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq785[2] {
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq785[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym794 := z.EncBinary()
					_ = yym794
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq785[3] {
					yym796 := z.EncBinary()
					_ = yym796
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq785[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym798 := z.DecBinary()
	_ = yym798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct799 := r.ContainerType()
		if yyct799 == codecSelferValueTypeMap1234 {
			yyl799 := r.ReadMapStart()
			if yyl799 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl799, d)
			}
		} else if yyct799 == codecSelferValueTypeArray1234 {
			yyl799 := r.ReadArrayStart()
			if yyl799 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl799, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys800Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys800Slc
	var yyhl800 bool = l >= 0
	for yyj800 := 0; ; yyj800++ {
		if yyhl800 {
			if yyj800 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys800Slc = r.DecodeBytes(yys800Slc, true, true)
		yys800 := string(yys800Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys800 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys800)
		} // end switch yys800
	} // end for yyj800
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj805 int
	var yyb805 bool
	var yyhl805 bool = l >= 0
	yyj805++
	if yyhl805 {
		yyb805 = yyj805 > l
	} else {
		yyb805 = r.CheckBreak()
	}
	if yyb805 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj805++
	if yyhl805 {
		yyb805 = yyj805 > l
	} else {
		yyb805 = r.CheckBreak()
	}
	if yyb805 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj805++
	if yyhl805 {
		yyb805 = yyj805 > l
	} else {
		yyb805 = r.CheckBreak()
	}
	if yyb805 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj805++
	if yyhl805 {
		yyb805 = yyj805 > l
	} else {
		yyb805 = r.CheckBreak()
	}
	if yyb805 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj805++
		if yyhl805 {
			yyb805 = yyj805 > l
		} else {
			yyb805 = r.CheckBreak()
		}
		if yyb805 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj805-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym810 := z.EncBinary()
		_ = yym810
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep811 := !z.EncBinary()
			yy2arr811 := z.EncBasicHandle().StructToArray
			var yyq811 [3]bool
			_, _, _ = yysep811, yyq811, yy2arr811
			const yyr811 bool = false
			yyq811[1] = x.Revision != ""
			yyq811[2] = x.Directory != ""
			var yynn811 int
			if yyr811 || yy2arr811 {
				r.EncodeArrayStart(3)
			} else {
				yynn811 = 1
				for _, b := range yyq811 {
					if b {
						yynn811++
					}
				}
				r.EncodeMapStart(yynn811)
				yynn811 = 0
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym813 := z.EncBinary()
				_ = yym813
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym814 := z.EncBinary()
				_ = yym814
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq811[1] {
					yym816 := z.EncBinary()
					_ = yym816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq811[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym817 := z.EncBinary()
					_ = yym817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq811[2] {
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq811[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym821 := z.DecBinary()
	_ = yym821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct822 := r.ContainerType()
		if yyct822 == codecSelferValueTypeMap1234 {
			yyl822 := r.ReadMapStart()
			if yyl822 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl822, d)
			}
		} else if yyct822 == codecSelferValueTypeArray1234 {
			yyl822 := r.ReadArrayStart()
			if yyl822 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys823Slc
	var yyhl823 bool = l >= 0
	for yyj823 := 0; ; yyj823++ {
		if yyhl823 {
			if yyj823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys823Slc = r.DecodeBytes(yys823Slc, true, true)
		yys823 := string(yys823Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys823 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys823)
		} // end switch yys823
	} // end for yyj823
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj827 int
	var yyb827 bool
	var yyhl827 bool = l >= 0
	yyj827++
	if yyhl827 {
		yyb827 = yyj827 > l
	} else {
		yyb827 = r.CheckBreak()
	}
	if yyb827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj827++
	if yyhl827 {
		yyb827 = yyj827 > l
	} else {
		yyb827 = r.CheckBreak()
	}
	if yyb827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj827++
	if yyhl827 {
		yyb827 = yyj827 > l
	} else {
		yyb827 = r.CheckBreak()
	}
	if yyb827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj827++
		if yyhl827 {
			yyb827 = yyj827 > l
		} else {
			yyb827 = r.CheckBreak()
		}
		if yyb827 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj827-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym831 := z.EncBinary()
		_ = yym831
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep832 := !z.EncBinary()
			yy2arr832 := z.EncBasicHandle().StructToArray
			var yyq832 [2]bool
			_, _, _ = yysep832, yyq832, yy2arr832
			const yyr832 bool = false
			yyq832[0] = x.SecretName != ""
			yyq832[1] = len(x.Items) != 0
			var yynn832 int
			if yyr832 || yy2arr832 {
				r.EncodeArrayStart(2)
			} else {
				yynn832 = 0
				for _, b := range yyq832 {
					if b {
						yynn832++
					}
				}
				r.EncodeMapStart(yynn832)
				yynn832 = 0
			}
			if yyr832 || yy2arr832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq832[0] {
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq832[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr832 || yy2arr832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq832[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym837 := z.EncBinary()
						_ = yym837
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq832[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym838 := z.EncBinary()
						_ = yym838
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr832 || yy2arr832 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym839 := z.DecBinary()
	_ = yym839
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct840 := r.ContainerType()
		if yyct840 == codecSelferValueTypeMap1234 {
			yyl840 := r.ReadMapStart()
			if yyl840 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl840, d)
			}
		} else if yyct840 == codecSelferValueTypeArray1234 {
			yyl840 := r.ReadArrayStart()
			if yyl840 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl840, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys841Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys841Slc
	var yyhl841 bool = l >= 0
	for yyj841 := 0; ; yyj841++ {
		if yyhl841 {
			if yyj841 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys841Slc = r.DecodeBytes(yys841Slc, true, true)
		yys841 := string(yys841Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys841 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv843 := &x.Items
				yym844 := z.DecBinary()
				_ = yym844
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv843), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys841)
		} // end switch yys841
	} // end for yyj841
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj845 int
	var yyb845 bool
	var yyhl845 bool = l >= 0
	yyj845++
	if yyhl845 {
		yyb845 = yyj845 > l
	} else {
		yyb845 = r.CheckBreak()
	}
	if yyb845 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj845++
	if yyhl845 {
		yyb845 = yyj845 > l
	} else {
		yyb845 = r.CheckBreak()
	}
	if yyb845 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv847 := &x.Items
		yym848 := z.DecBinary()
		_ = yym848
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv847), d)
		}
	}
	for {
		yyj845++
		if yyhl845 {
			yyb845 = yyj845 > l
		} else {
			yyb845 = r.CheckBreak()
		}
		if yyb845 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj845-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym849 := z.EncBinary()
		_ = yym849
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep850 := !z.EncBinary()
			yy2arr850 := z.EncBasicHandle().StructToArray
			var yyq850 [3]bool
			_, _, _ = yysep850, yyq850, yy2arr850
			const yyr850 bool = false
			yyq850[2] = x.ReadOnly != false
			var yynn850 int
			if yyr850 || yy2arr850 {
				r.EncodeArrayStart(3)
			} else {
				yynn850 = 2
				for _, b := range yyq850 {
					if b {
						yynn850++
					}
				}
				r.EncodeMapStart(yynn850)
				yynn850 = 0
			}
			if yyr850 || yy2arr850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym852 := z.EncBinary()
				_ = yym852
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym853 := z.EncBinary()
				_ = yym853
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr850 || yy2arr850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym856 := z.EncBinary()
				_ = yym856
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr850 || yy2arr850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq850[2] {
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq850[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr850 || yy2arr850 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym860 := z.DecBinary()
	_ = yym860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct861 := r.ContainerType()
		if yyct861 == codecSelferValueTypeMap1234 {
			yyl861 := r.ReadMapStart()
			if yyl861 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl861, d)
			}
		} else if yyct861 == codecSelferValueTypeArray1234 {
			yyl861 := r.ReadArrayStart()
			if yyl861 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl861, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys862Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys862Slc
	var yyhl862 bool = l >= 0
	for yyj862 := 0; ; yyj862++ {
		if yyhl862 {
			if yyj862 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys862Slc = r.DecodeBytes(yys862Slc, true, true)
		yys862 := string(yys862Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys862 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys862)
		} // end switch yys862
	} // end for yyj862
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj866 int
	var yyb866 bool
	var yyhl866 bool = l >= 0
	yyj866++
	if yyhl866 {
		yyb866 = yyj866 > l
	} else {
		yyb866 = r.CheckBreak()
	}
	if yyb866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj866++
	if yyhl866 {
		yyb866 = yyj866 > l
	} else {
		yyb866 = r.CheckBreak()
	}
	if yyb866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj866++
	if yyhl866 {
		yyb866 = yyj866 > l
	} else {
		yyb866 = r.CheckBreak()
	}
	if yyb866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj866++
		if yyhl866 {
			yyb866 = yyj866 > l
		} else {
			yyb866 = r.CheckBreak()
		}
		if yyb866 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj866-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym870 := z.EncBinary()
		_ = yym870
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep871 := !z.EncBinary()
			yy2arr871 := z.EncBasicHandle().StructToArray
			var yyq871 [6]bool
			_, _, _ = yysep871, yyq871, yy2arr871
			const yyr871 bool = false
			yyq871[3] = x.ISCSIInterface != ""
			yyq871[4] = x.FSType != ""
			yyq871[5] = x.ReadOnly != false
			var yynn871 int
			if yyr871 || yy2arr871 {
				r.EncodeArrayStart(6)
			} else {
				yynn871 = 3
				for _, b := range yyq871 {
					if b {
						yynn871++
					}
				}
				r.EncodeMapStart(yynn871)
				yynn871 = 0
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym873 := z.EncBinary()
				_ = yym873
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym874 := z.EncBinary()
				_ = yym874
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym876 := z.EncBinary()
				_ = yym876
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym877 := z.EncBinary()
				_ = yym877
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym879 := z.EncBinary()
				_ = yym879
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym880 := z.EncBinary()
				_ = yym880
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq871[3] {
					yym882 := z.EncBinary()
					_ = yym882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq871[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym883 := z.EncBinary()
					_ = yym883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq871[4] {
					yym885 := z.EncBinary()
					_ = yym885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq871[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym886 := z.EncBinary()
					_ = yym886
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq871[5] {
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq871[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym889 := z.EncBinary()
					_ = yym889
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym890 := z.DecBinary()
	_ = yym890
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct891 := r.ContainerType()
		if yyct891 == codecSelferValueTypeMap1234 {
			yyl891 := r.ReadMapStart()
			if yyl891 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl891, d)
			}
		} else if yyct891 == codecSelferValueTypeArray1234 {
			yyl891 := r.ReadArrayStart()
			if yyl891 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl891, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys892Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys892Slc
	var yyhl892 bool = l >= 0
	for yyj892 := 0; ; yyj892++ {
		if yyhl892 {
			if yyj892 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys892Slc = r.DecodeBytes(yys892Slc, true, true)
		yys892 := string(yys892Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys892 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys892)
		} // end switch yys892
	} // end for yyj892
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj899 int
	var yyb899 bool
	var yyhl899 bool = l >= 0
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj899++
		if yyhl899 {
			yyb899 = yyj899 > l
		} else {
			yyb899 = r.CheckBreak()
		}
		if yyb899 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj899-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym906 := z.EncBinary()
		_ = yym906
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep907 := !z.EncBinary()
			yy2arr907 := z.EncBasicHandle().StructToArray
			var yyq907 [4]bool
			_, _, _ = yysep907, yyq907, yy2arr907
			const yyr907 bool = false
			yyq907[2] = x.FSType != ""
			yyq907[3] = x.ReadOnly != false
			var yynn907 int
			if yyr907 || yy2arr907 {
				r.EncodeArrayStart(4)
			} else {
				yynn907 = 2
				for _, b := range yyq907 {
					if b {
						yynn907++
					}
				}
				r.EncodeMapStart(yynn907)
				yynn907 = 0
			}
			if yyr907 || yy2arr907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym910 := z.EncBinary()
					_ = yym910
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr907 || yy2arr907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy912 := *x.Lun
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						r.EncodeInt(int64(yy912))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy914 := *x.Lun
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else {
						r.EncodeInt(int64(yy914))
					}
				}
			}
			if yyr907 || yy2arr907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq907[2] {
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq907[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym918 := z.EncBinary()
					_ = yym918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr907 || yy2arr907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq907[3] {
					yym920 := z.EncBinary()
					_ = yym920
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq907[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr907 || yy2arr907 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym922 := z.DecBinary()
	_ = yym922
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct923 := r.ContainerType()
		if yyct923 == codecSelferValueTypeMap1234 {
			yyl923 := r.ReadMapStart()
			if yyl923 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl923, d)
			}
		} else if yyct923 == codecSelferValueTypeArray1234 {
			yyl923 := r.ReadArrayStart()
			if yyl923 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl923, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys924Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys924Slc
	var yyhl924 bool = l >= 0
	for yyj924 := 0; ; yyj924++ {
		if yyhl924 {
			if yyj924 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys924Slc = r.DecodeBytes(yys924Slc, true, true)
		yys924 := string(yys924Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys924 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv925 := &x.TargetWWNs
				yym926 := z.DecBinary()
				_ = yym926
				if false {
				} else {
					z.F.DecSliceStringX(yyv925, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym928 := z.DecBinary()
				_ = yym928
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys924)
		} // end switch yys924
	} // end for yyj924
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj931 int
	var yyb931 bool
	var yyhl931 bool = l >= 0
	yyj931++
	if yyhl931 {
		yyb931 = yyj931 > l
	} else {
		yyb931 = r.CheckBreak()
	}
	if yyb931 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv932 := &x.TargetWWNs
		yym933 := z.DecBinary()
		_ = yym933
		if false {
		} else {
			z.F.DecSliceStringX(yyv932, false, d)
		}
	}
	yyj931++
	if yyhl931 {
		yyb931 = yyj931 > l
	} else {
		yyb931 = r.CheckBreak()
	}
	if yyb931 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym935 := z.DecBinary()
		_ = yym935
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj931++
	if yyhl931 {
		yyb931 = yyj931 > l
	} else {
		yyb931 = r.CheckBreak()
	}
	if yyb931 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj931++
	if yyhl931 {
		yyb931 = yyj931 > l
	} else {
		yyb931 = r.CheckBreak()
	}
	if yyb931 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj931++
		if yyhl931 {
			yyb931 = yyj931 > l
		} else {
			yyb931 = r.CheckBreak()
		}
		if yyb931 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj931-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym938 := z.EncBinary()
		_ = yym938
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep939 := !z.EncBinary()
			yy2arr939 := z.EncBasicHandle().StructToArray
			var yyq939 [3]bool
			_, _, _ = yysep939, yyq939, yy2arr939
			const yyr939 bool = false
			yyq939[2] = x.ReadOnly != false
			var yynn939 int
			if yyr939 || yy2arr939 {
				r.EncodeArrayStart(3)
			} else {
				yynn939 = 2
				for _, b := range yyq939 {
					if b {
						yynn939++
					}
				}
				r.EncodeMapStart(yynn939)
				yynn939 = 0
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym941 := z.EncBinary()
				_ = yym941
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym942 := z.EncBinary()
				_ = yym942
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym944 := z.EncBinary()
				_ = yym944
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym945 := z.EncBinary()
				_ = yym945
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq939[2] {
					yym947 := z.EncBinary()
					_ = yym947
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq939[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym948 := z.EncBinary()
					_ = yym948
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym949 := z.DecBinary()
	_ = yym949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct950 := r.ContainerType()
		if yyct950 == codecSelferValueTypeMap1234 {
			yyl950 := r.ReadMapStart()
			if yyl950 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl950, d)
			}
		} else if yyct950 == codecSelferValueTypeArray1234 {
			yyl950 := r.ReadArrayStart()
			if yyl950 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl950, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys951Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys951Slc
	var yyhl951 bool = l >= 0
	for yyj951 := 0; ; yyj951++ {
		if yyhl951 {
			if yyj951 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys951Slc = r.DecodeBytes(yys951Slc, true, true)
		yys951 := string(yys951Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys951 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys951)
		} // end switch yys951
	} // end for yyj951
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj955 int
	var yyb955 bool
	var yyhl955 bool = l >= 0
	yyj955++
	if yyhl955 {
		yyb955 = yyj955 > l
	} else {
		yyb955 = r.CheckBreak()
	}
	if yyb955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj955++
	if yyhl955 {
		yyb955 = yyj955 > l
	} else {
		yyb955 = r.CheckBreak()
	}
	if yyb955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj955++
	if yyhl955 {
		yyb955 = yyj955 > l
	} else {
		yyb955 = r.CheckBreak()
	}
	if yyb955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj955++
		if yyhl955 {
			yyb955 = yyj955 > l
		} else {
			yyb955 = r.CheckBreak()
		}
		if yyb955 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj955-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym959 := z.EncBinary()
		_ = yym959
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep960 := !z.EncBinary()
			yy2arr960 := z.EncBasicHandle().StructToArray
			var yyq960 [2]bool
			_, _, _ = yysep960, yyq960, yy2arr960
			const yyr960 bool = false
			yyq960[1] = x.FSType != ""
			var yynn960 int
			if yyr960 || yy2arr960 {
				r.EncodeArrayStart(2)
			} else {
				yynn960 = 1
				for _, b := range yyq960 {
					if b {
						yynn960++
					}
				}
				r.EncodeMapStart(yynn960)
				yynn960 = 0
			}
			if yyr960 || yy2arr960 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym962 := z.EncBinary()
				_ = yym962
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym963 := z.EncBinary()
				_ = yym963
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr960 || yy2arr960 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq960[1] {
					yym965 := z.EncBinary()
					_ = yym965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq960[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym966 := z.EncBinary()
					_ = yym966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr960 || yy2arr960 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym967 := z.DecBinary()
	_ = yym967
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct968 := r.ContainerType()
		if yyct968 == codecSelferValueTypeMap1234 {
			yyl968 := r.ReadMapStart()
			if yyl968 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl968, d)
			}
		} else if yyct968 == codecSelferValueTypeArray1234 {
			yyl968 := r.ReadArrayStart()
			if yyl968 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl968, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys969Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys969Slc
	var yyhl969 bool = l >= 0
	for yyj969 := 0; ; yyj969++ {
		if yyhl969 {
			if yyj969 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys969Slc = r.DecodeBytes(yys969Slc, true, true)
		yys969 := string(yys969Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys969 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys969)
		} // end switch yys969
	} // end for yyj969
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj972 int
	var yyb972 bool
	var yyhl972 bool = l >= 0
	yyj972++
	if yyhl972 {
		yyb972 = yyj972 > l
	} else {
		yyb972 = r.CheckBreak()
	}
	if yyb972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj972++
	if yyhl972 {
		yyb972 = yyj972 > l
	} else {
		yyb972 = r.CheckBreak()
	}
	if yyb972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj972++
		if yyhl972 {
			yyb972 = yyj972 > l
		} else {
			yyb972 = r.CheckBreak()
		}
		if yyb972 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj972-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym975 := z.EncBinary()
		_ = yym975
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep976 := !z.EncBinary()
			yy2arr976 := z.EncBasicHandle().StructToArray
			var yyq976 [2]bool
			_, _, _ = yysep976, yyq976, yy2arr976
			const yyr976 bool = false
			yyq976[0] = x.Name != ""
			yyq976[1] = len(x.Items) != 0
			var yynn976 int
			if yyr976 || yy2arr976 {
				r.EncodeArrayStart(2)
			} else {
				yynn976 = 0
				for _, b := range yyq976 {
					if b {
						yynn976++
					}
				}
				r.EncodeMapStart(yynn976)
				yynn976 = 0
			}
			if yyr976 || yy2arr976 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq976[0] {
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq976[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym979 := z.EncBinary()
					_ = yym979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr976 || yy2arr976 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq976[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym981 := z.EncBinary()
						_ = yym981
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq976[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym982 := z.EncBinary()
						_ = yym982
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr976 || yy2arr976 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym983 := z.DecBinary()
	_ = yym983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct984 := r.ContainerType()
		if yyct984 == codecSelferValueTypeMap1234 {
			yyl984 := r.ReadMapStart()
			if yyl984 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl984, d)
			}
		} else if yyct984 == codecSelferValueTypeArray1234 {
			yyl984 := r.ReadArrayStart()
			if yyl984 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl984, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys985Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys985Slc
	var yyhl985 bool = l >= 0
	for yyj985 := 0; ; yyj985++ {
		if yyhl985 {
			if yyj985 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys985Slc = r.DecodeBytes(yys985Slc, true, true)
		yys985 := string(yys985Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys985 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv987 := &x.Items
				yym988 := z.DecBinary()
				_ = yym988
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv987), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys985)
		} // end switch yys985
	} // end for yyj985
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj989 int
	var yyb989 bool
	var yyhl989 bool = l >= 0
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv991 := &x.Items
		yym992 := z.DecBinary()
		_ = yym992
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv991), d)
		}
	}
	for {
		yyj989++
		if yyhl989 {
			yyb989 = yyj989 > l
		} else {
			yyb989 = r.CheckBreak()
		}
		if yyb989 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj989-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym993 := z.EncBinary()
		_ = yym993
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep994 := !z.EncBinary()
			yy2arr994 := z.EncBasicHandle().StructToArray
			var yyq994 [2]bool
			_, _, _ = yysep994, yyq994, yy2arr994
			const yyr994 bool = false
			yyq994[1] = len(x.Options) != 0
			var yynn994 int
			if yyr994 || yy2arr994 {
				r.EncodeArrayStart(2)
			} else {
				yynn994 = 1
				for _, b := range yyq994 {
					if b {
						yynn994++
					}
				}
				r.EncodeMapStart(yynn994)
				yynn994 = 0
			}
			if yyr994 || yy2arr994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym996 := z.EncBinary()
				_ = yym996
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym997 := z.EncBinary()
				_ = yym997
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr994 || yy2arr994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq994[1] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym999 := z.EncBinary()
						_ = yym999
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq994[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym1000 := z.EncBinary()
						_ = yym1000
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr994 || yy2arr994 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1001 := z.DecBinary()
	_ = yym1001
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1002 := r.ContainerType()
		if yyct1002 == codecSelferValueTypeMap1234 {
			yyl1002 := r.ReadMapStart()
			if yyl1002 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1002, d)
			}
		} else if yyct1002 == codecSelferValueTypeArray1234 {
			yyl1002 := r.ReadArrayStart()
			if yyl1002 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1002, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1003Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1003Slc
	var yyhl1003 bool = l >= 0
	for yyj1003 := 0; ; yyj1003++ {
		if yyhl1003 {
			if yyj1003 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1003Slc = r.DecodeBytes(yys1003Slc, true, true)
		yys1003 := string(yys1003Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1003 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv1005 := &x.Options
				yym1006 := z.DecBinary()
				_ = yym1006
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1005, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1003)
		} // end switch yys1003
	} // end for yyj1003
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1007 int
	var yyb1007 bool
	var yyhl1007 bool = l >= 0
	yyj1007++
	if yyhl1007 {
		yyb1007 = yyj1007 > l
	} else {
		yyb1007 = r.CheckBreak()
	}
	if yyb1007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj1007++
	if yyhl1007 {
		yyb1007 = yyj1007 > l
	} else {
		yyb1007 = r.CheckBreak()
	}
	if yyb1007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv1009 := &x.Options
		yym1010 := z.DecBinary()
		_ = yym1010
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1009, false, d)
		}
	}
	for {
		yyj1007++
		if yyhl1007 {
			yyb1007 = yyj1007 > l
		} else {
			yyb1007 = r.CheckBreak()
		}
		if yyb1007 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1007-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1011 := z.EncBinary()
		_ = yym1011
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1012 := !z.EncBinary()
			yy2arr1012 := z.EncBasicHandle().StructToArray
			var yyq1012 [2]bool
			_, _, _ = yysep1012, yyq1012, yy2arr1012
			const yyr1012 bool = false
			var yynn1012 int
			if yyr1012 || yy2arr1012 {
				r.EncodeArrayStart(2)
			} else {
				yynn1012 = 2
				for _, b := range yyq1012 {
					if b {
						yynn1012++
					}
				}
				r.EncodeMapStart(yynn1012)
				yynn1012 = 0
			}
			if yyr1012 || yy2arr1012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1014 := z.EncBinary()
				_ = yym1014
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1015 := z.EncBinary()
				_ = yym1015
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1012 || yy2arr1012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1017 := z.EncBinary()
				_ = yym1017
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1018 := z.EncBinary()
				_ = yym1018
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1012 || yy2arr1012 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1019 := z.DecBinary()
	_ = yym1019
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1020 := r.ContainerType()
		if yyct1020 == codecSelferValueTypeMap1234 {
			yyl1020 := r.ReadMapStart()
			if yyl1020 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1020, d)
			}
		} else if yyct1020 == codecSelferValueTypeArray1234 {
			yyl1020 := r.ReadArrayStart()
			if yyl1020 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1020, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1021Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1021Slc
	var yyhl1021 bool = l >= 0
	for yyj1021 := 0; ; yyj1021++ {
		if yyhl1021 {
			if yyj1021 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1021Slc = r.DecodeBytes(yys1021Slc, true, true)
		yys1021 := string(yys1021Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1021 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1021)
		} // end switch yys1021
	} // end for yyj1021
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1024 int
	var yyb1024 bool
	var yyhl1024 bool = l >= 0
	yyj1024++
	if yyhl1024 {
		yyb1024 = yyj1024 > l
	} else {
		yyb1024 = r.CheckBreak()
	}
	if yyb1024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1024++
	if yyhl1024 {
		yyb1024 = yyj1024 > l
	} else {
		yyb1024 = r.CheckBreak()
	}
	if yyb1024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj1024++
		if yyhl1024 {
			yyb1024 = yyj1024 > l
		} else {
			yyb1024 = r.CheckBreak()
		}
		if yyb1024 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1024-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1027 := z.EncBinary()
		_ = yym1027
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1028 := !z.EncBinary()
			yy2arr1028 := z.EncBasicHandle().StructToArray
			var yyq1028 [5]bool
			_, _, _ = yysep1028, yyq1028, yy2arr1028
			const yyr1028 bool = false
			yyq1028[0] = x.Name != ""
			yyq1028[1] = x.HostPort != 0
			yyq1028[3] = x.Protocol != ""
			yyq1028[4] = x.HostIP != ""
			var yynn1028 int
			if yyr1028 || yy2arr1028 {
				r.EncodeArrayStart(5)
			} else {
				yynn1028 = 1
				for _, b := range yyq1028 {
					if b {
						yynn1028++
					}
				}
				r.EncodeMapStart(yynn1028)
				yynn1028 = 0
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1028[0] {
					yym1030 := z.EncBinary()
					_ = yym1030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1028[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1031 := z.EncBinary()
					_ = yym1031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1028[1] {
					yym1033 := z.EncBinary()
					_ = yym1033
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1028[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1034 := z.EncBinary()
					_ = yym1034
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1036 := z.EncBinary()
				_ = yym1036
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1037 := z.EncBinary()
				_ = yym1037
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1028[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1028[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1028[4] {
					yym1040 := z.EncBinary()
					_ = yym1040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1028[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1041 := z.EncBinary()
					_ = yym1041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1042 := z.DecBinary()
	_ = yym1042
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1043 := r.ContainerType()
		if yyct1043 == codecSelferValueTypeMap1234 {
			yyl1043 := r.ReadMapStart()
			if yyl1043 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1043, d)
			}
		} else if yyct1043 == codecSelferValueTypeArray1234 {
			yyl1043 := r.ReadArrayStart()
			if yyl1043 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1043, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1044Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1044Slc
	var yyhl1044 bool = l >= 0
	for yyj1044 := 0; ; yyj1044++ {
		if yyhl1044 {
			if yyj1044 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1044Slc = r.DecodeBytes(yys1044Slc, true, true)
		yys1044 := string(yys1044Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1044 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1044)
		} // end switch yys1044
	} // end for yyj1044
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1050 int
	var yyb1050 bool
	var yyhl1050 bool = l >= 0
	yyj1050++
	if yyhl1050 {
		yyb1050 = yyj1050 > l
	} else {
		yyb1050 = r.CheckBreak()
	}
	if yyb1050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1050++
	if yyhl1050 {
		yyb1050 = yyj1050 > l
	} else {
		yyb1050 = r.CheckBreak()
	}
	if yyb1050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1050++
	if yyhl1050 {
		yyb1050 = yyj1050 > l
	} else {
		yyb1050 = r.CheckBreak()
	}
	if yyb1050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1050++
	if yyhl1050 {
		yyb1050 = yyj1050 > l
	} else {
		yyb1050 = r.CheckBreak()
	}
	if yyb1050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1050++
	if yyhl1050 {
		yyb1050 = yyj1050 > l
	} else {
		yyb1050 = r.CheckBreak()
	}
	if yyb1050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1050++
		if yyhl1050 {
			yyb1050 = yyj1050 > l
		} else {
			yyb1050 = r.CheckBreak()
		}
		if yyb1050 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1050-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1056 := z.EncBinary()
		_ = yym1056
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1057 := !z.EncBinary()
			yy2arr1057 := z.EncBasicHandle().StructToArray
			var yyq1057 [4]bool
			_, _, _ = yysep1057, yyq1057, yy2arr1057
			const yyr1057 bool = false
			yyq1057[1] = x.ReadOnly != false
			yyq1057[3] = x.SubPath != ""
			var yynn1057 int
			if yyr1057 || yy2arr1057 {
				r.EncodeArrayStart(4)
			} else {
				yynn1057 = 2
				for _, b := range yyq1057 {
					if b {
						yynn1057++
					}
				}
				r.EncodeMapStart(yynn1057)
				yynn1057 = 0
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1059 := z.EncBinary()
				_ = yym1059
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1060 := z.EncBinary()
				_ = yym1060
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1057[1] {
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1057[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1063 := z.EncBinary()
					_ = yym1063
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1065 := z.EncBinary()
				_ = yym1065
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1066 := z.EncBinary()
				_ = yym1066
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1057[3] {
					yym1068 := z.EncBinary()
					_ = yym1068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1057[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1069 := z.EncBinary()
					_ = yym1069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1070 := z.DecBinary()
	_ = yym1070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1071 := r.ContainerType()
		if yyct1071 == codecSelferValueTypeMap1234 {
			yyl1071 := r.ReadMapStart()
			if yyl1071 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1071, d)
			}
		} else if yyct1071 == codecSelferValueTypeArray1234 {
			yyl1071 := r.ReadArrayStart()
			if yyl1071 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1071, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1072Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1072Slc
	var yyhl1072 bool = l >= 0
	for yyj1072 := 0; ; yyj1072++ {
		if yyhl1072 {
			if yyj1072 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1072Slc = r.DecodeBytes(yys1072Slc, true, true)
		yys1072 := string(yys1072Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1072 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1072)
		} // end switch yys1072
	} // end for yyj1072
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1077 int
	var yyb1077 bool
	var yyhl1077 bool = l >= 0
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1077++
		if yyhl1077 {
			yyb1077 = yyj1077 > l
		} else {
			yyb1077 = r.CheckBreak()
		}
		if yyb1077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1082 := z.EncBinary()
		_ = yym1082
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1083 := !z.EncBinary()
			yy2arr1083 := z.EncBasicHandle().StructToArray
			var yyq1083 [3]bool
			_, _, _ = yysep1083, yyq1083, yy2arr1083
			const yyr1083 bool = false
			yyq1083[1] = x.Value != ""
			yyq1083[2] = x.ValueFrom != nil
			var yynn1083 int
			if yyr1083 || yy2arr1083 {
				r.EncodeArrayStart(3)
			} else {
				yynn1083 = 1
				for _, b := range yyq1083 {
					if b {
						yynn1083++
					}
				}
				r.EncodeMapStart(yynn1083)
				yynn1083 = 0
			}
			if yyr1083 || yy2arr1083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1085 := z.EncBinary()
				_ = yym1085
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1086 := z.EncBinary()
				_ = yym1086
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1083 || yy2arr1083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1083[1] {
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1083[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1089 := z.EncBinary()
					_ = yym1089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1083 || yy2arr1083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1083[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1083[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1083 || yy2arr1083 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1091 := z.DecBinary()
	_ = yym1091
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1092 := r.ContainerType()
		if yyct1092 == codecSelferValueTypeMap1234 {
			yyl1092 := r.ReadMapStart()
			if yyl1092 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1092, d)
			}
		} else if yyct1092 == codecSelferValueTypeArray1234 {
			yyl1092 := r.ReadArrayStart()
			if yyl1092 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1092, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1093Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1093Slc
	var yyhl1093 bool = l >= 0
	for yyj1093 := 0; ; yyj1093++ {
		if yyhl1093 {
			if yyj1093 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1093Slc = r.DecodeBytes(yys1093Slc, true, true)
		yys1093 := string(yys1093Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1093 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1093)
		} // end switch yys1093
	} // end for yyj1093
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1097 int
	var yyb1097 bool
	var yyhl1097 bool = l >= 0
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1097++
		if yyhl1097 {
			yyb1097 = yyj1097 > l
		} else {
			yyb1097 = r.CheckBreak()
		}
		if yyb1097 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1097-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1101 := z.EncBinary()
		_ = yym1101
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1102 := !z.EncBinary()
			yy2arr1102 := z.EncBasicHandle().StructToArray
			var yyq1102 [4]bool
			_, _, _ = yysep1102, yyq1102, yy2arr1102
			const yyr1102 bool = false
			yyq1102[0] = x.FieldRef != nil
			yyq1102[1] = x.ResourceFieldRef != nil
			yyq1102[2] = x.ConfigMapKeyRef != nil
			yyq1102[3] = x.SecretKeyRef != nil
			var yynn1102 int
			if yyr1102 || yy2arr1102 {
				r.EncodeArrayStart(4)
			} else {
				yynn1102 = 0
				for _, b := range yyq1102 {
					if b {
						yynn1102++
					}
				}
				r.EncodeMapStart(yynn1102)
				yynn1102 = 0
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1102[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1102[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1102[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1102[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1102[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1102[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1102[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1102[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1107 := z.DecBinary()
	_ = yym1107
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1108 := r.ContainerType()
		if yyct1108 == codecSelferValueTypeMap1234 {
			yyl1108 := r.ReadMapStart()
			if yyl1108 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1108, d)
			}
		} else if yyct1108 == codecSelferValueTypeArray1234 {
			yyl1108 := r.ReadArrayStart()
			if yyl1108 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1108, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1109Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1109Slc
	var yyhl1109 bool = l >= 0
	for yyj1109 := 0; ; yyj1109++ {
		if yyhl1109 {
			if yyj1109 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1109Slc = r.DecodeBytes(yys1109Slc, true, true)
		yys1109 := string(yys1109Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1109 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1109)
		} // end switch yys1109
	} // end for yyj1109
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1114 int
	var yyb1114 bool
	var yyhl1114 bool = l >= 0
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1114++
		if yyhl1114 {
			yyb1114 = yyj1114 > l
		} else {
			yyb1114 = r.CheckBreak()
		}
		if yyb1114 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1114-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1119 := z.EncBinary()
		_ = yym1119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1120 := !z.EncBinary()
			yy2arr1120 := z.EncBasicHandle().StructToArray
			var yyq1120 [2]bool
			_, _, _ = yysep1120, yyq1120, yy2arr1120
			const yyr1120 bool = false
			yyq1120[0] = x.APIVersion != ""
			var yynn1120 int
			if yyr1120 || yy2arr1120 {
				r.EncodeArrayStart(2)
			} else {
				yynn1120 = 1
				for _, b := range yyq1120 {
					if b {
						yynn1120++
					}
				}
				r.EncodeMapStart(yynn1120)
				yynn1120 = 0
			}
			if yyr1120 || yy2arr1120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1120[0] {
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1120[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1123 := z.EncBinary()
					_ = yym1123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1120 || yy2arr1120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1125 := z.EncBinary()
				_ = yym1125
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1126 := z.EncBinary()
				_ = yym1126
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1120 || yy2arr1120 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1127 := z.DecBinary()
	_ = yym1127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1128 := r.ContainerType()
		if yyct1128 == codecSelferValueTypeMap1234 {
			yyl1128 := r.ReadMapStart()
			if yyl1128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1128, d)
			}
		} else if yyct1128 == codecSelferValueTypeArray1234 {
			yyl1128 := r.ReadArrayStart()
			if yyl1128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1129Slc
	var yyhl1129 bool = l >= 0
	for yyj1129 := 0; ; yyj1129++ {
		if yyhl1129 {
			if yyj1129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1129Slc = r.DecodeBytes(yys1129Slc, true, true)
		yys1129 := string(yys1129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1129 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1129)
		} // end switch yys1129
	} // end for yyj1129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1132 int
	var yyb1132 bool
	var yyhl1132 bool = l >= 0
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1132++
		if yyhl1132 {
			yyb1132 = yyj1132 > l
		} else {
			yyb1132 = r.CheckBreak()
		}
		if yyb1132 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1132-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1135 := z.EncBinary()
		_ = yym1135
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1136 := !z.EncBinary()
			yy2arr1136 := z.EncBasicHandle().StructToArray
			var yyq1136 [3]bool
			_, _, _ = yysep1136, yyq1136, yy2arr1136
			const yyr1136 bool = false
			yyq1136[0] = x.ContainerName != ""
			yyq1136[2] = true
			var yynn1136 int
			if yyr1136 || yy2arr1136 {
				r.EncodeArrayStart(3)
			} else {
				yynn1136 = 1
				for _, b := range yyq1136 {
					if b {
						yynn1136++
					}
				}
				r.EncodeMapStart(yynn1136)
				yynn1136 = 0
			}
			if yyr1136 || yy2arr1136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1136[0] {
					yym1138 := z.EncBinary()
					_ = yym1138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1136[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1139 := z.EncBinary()
					_ = yym1139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1136 || yy2arr1136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1141 := z.EncBinary()
				_ = yym1141
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1142 := z.EncBinary()
				_ = yym1142
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1136 || yy2arr1136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1136[2] {
					yy1144 := &x.Divisor
					yym1145 := z.EncBinary()
					_ = yym1145
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1144) {
					} else if !yym1145 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1144)
					} else {
						z.EncFallback(yy1144)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1136[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1146 := &x.Divisor
					yym1147 := z.EncBinary()
					_ = yym1147
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1146) {
					} else if !yym1147 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1146)
					} else {
						z.EncFallback(yy1146)
					}
				}
			}
			if yyr1136 || yy2arr1136 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1148 := z.DecBinary()
	_ = yym1148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1149 := r.ContainerType()
		if yyct1149 == codecSelferValueTypeMap1234 {
			yyl1149 := r.ReadMapStart()
			if yyl1149 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1149, d)
			}
		} else if yyct1149 == codecSelferValueTypeArray1234 {
			yyl1149 := r.ReadArrayStart()
			if yyl1149 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1150Slc
	var yyhl1150 bool = l >= 0
	for yyj1150 := 0; ; yyj1150++ {
		if yyhl1150 {
			if yyj1150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1150Slc = r.DecodeBytes(yys1150Slc, true, true)
		yys1150 := string(yys1150Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1150 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1153 := &x.Divisor
				yym1154 := z.DecBinary()
				_ = yym1154
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1153) {
				} else if !yym1154 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1153)
				} else {
					z.DecFallback(yyv1153, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1150)
		} // end switch yys1150
	} // end for yyj1150
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1155 int
	var yyb1155 bool
	var yyhl1155 bool = l >= 0
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1158 := &x.Divisor
		yym1159 := z.DecBinary()
		_ = yym1159
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1158) {
		} else if !yym1159 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1158)
		} else {
			z.DecFallback(yyv1158, false)
		}
	}
	for {
		yyj1155++
		if yyhl1155 {
			yyb1155 = yyj1155 > l
		} else {
			yyb1155 = r.CheckBreak()
		}
		if yyb1155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1160 := z.EncBinary()
		_ = yym1160
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1161 := !z.EncBinary()
			yy2arr1161 := z.EncBasicHandle().StructToArray
			var yyq1161 [2]bool
			_, _, _ = yysep1161, yyq1161, yy2arr1161
			const yyr1161 bool = false
			yyq1161[0] = x.Name != ""
			var yynn1161 int
			if yyr1161 || yy2arr1161 {
				r.EncodeArrayStart(2)
			} else {
				yynn1161 = 1
				for _, b := range yyq1161 {
					if b {
						yynn1161++
					}
				}
				r.EncodeMapStart(yynn1161)
				yynn1161 = 0
			}
			if yyr1161 || yy2arr1161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1161[0] {
					yym1163 := z.EncBinary()
					_ = yym1163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1161[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1164 := z.EncBinary()
					_ = yym1164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1161 || yy2arr1161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1166 := z.EncBinary()
				_ = yym1166
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1167 := z.EncBinary()
				_ = yym1167
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1161 || yy2arr1161 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1168 := z.DecBinary()
	_ = yym1168
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1169 := r.ContainerType()
		if yyct1169 == codecSelferValueTypeMap1234 {
			yyl1169 := r.ReadMapStart()
			if yyl1169 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1169, d)
			}
		} else if yyct1169 == codecSelferValueTypeArray1234 {
			yyl1169 := r.ReadArrayStart()
			if yyl1169 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1169, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1170Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1170Slc
	var yyhl1170 bool = l >= 0
	for yyj1170 := 0; ; yyj1170++ {
		if yyhl1170 {
			if yyj1170 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1170Slc = r.DecodeBytes(yys1170Slc, true, true)
		yys1170 := string(yys1170Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1170 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1170)
		} // end switch yys1170
	} // end for yyj1170
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1173 int
	var yyb1173 bool
	var yyhl1173 bool = l >= 0
	yyj1173++
	if yyhl1173 {
		yyb1173 = yyj1173 > l
	} else {
		yyb1173 = r.CheckBreak()
	}
	if yyb1173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1173++
	if yyhl1173 {
		yyb1173 = yyj1173 > l
	} else {
		yyb1173 = r.CheckBreak()
	}
	if yyb1173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1173++
		if yyhl1173 {
			yyb1173 = yyj1173 > l
		} else {
			yyb1173 = r.CheckBreak()
		}
		if yyb1173 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1173-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1176 := z.EncBinary()
		_ = yym1176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1177 := !z.EncBinary()
			yy2arr1177 := z.EncBasicHandle().StructToArray
			var yyq1177 [2]bool
			_, _, _ = yysep1177, yyq1177, yy2arr1177
			const yyr1177 bool = false
			yyq1177[0] = x.Name != ""
			var yynn1177 int
			if yyr1177 || yy2arr1177 {
				r.EncodeArrayStart(2)
			} else {
				yynn1177 = 1
				for _, b := range yyq1177 {
					if b {
						yynn1177++
					}
				}
				r.EncodeMapStart(yynn1177)
				yynn1177 = 0
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1177[0] {
					yym1179 := z.EncBinary()
					_ = yym1179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1177[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1180 := z.EncBinary()
					_ = yym1180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1182 := z.EncBinary()
				_ = yym1182
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1183 := z.EncBinary()
				_ = yym1183
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1184 := z.DecBinary()
	_ = yym1184
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1185 := r.ContainerType()
		if yyct1185 == codecSelferValueTypeMap1234 {
			yyl1185 := r.ReadMapStart()
			if yyl1185 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1185, d)
			}
		} else if yyct1185 == codecSelferValueTypeArray1234 {
			yyl1185 := r.ReadArrayStart()
			if yyl1185 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1185, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1186Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1186Slc
	var yyhl1186 bool = l >= 0
	for yyj1186 := 0; ; yyj1186++ {
		if yyhl1186 {
			if yyj1186 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1186Slc = r.DecodeBytes(yys1186Slc, true, true)
		yys1186 := string(yys1186Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1186 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1186)
		} // end switch yys1186
	} // end for yyj1186
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1189 int
	var yyb1189 bool
	var yyhl1189 bool = l >= 0
	yyj1189++
	if yyhl1189 {
		yyb1189 = yyj1189 > l
	} else {
		yyb1189 = r.CheckBreak()
	}
	if yyb1189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1189++
	if yyhl1189 {
		yyb1189 = yyj1189 > l
	} else {
		yyb1189 = r.CheckBreak()
	}
	if yyb1189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1189++
		if yyhl1189 {
			yyb1189 = yyj1189 > l
		} else {
			yyb1189 = r.CheckBreak()
		}
		if yyb1189 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1189-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1192 := z.EncBinary()
		_ = yym1192
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1193 := !z.EncBinary()
			yy2arr1193 := z.EncBasicHandle().StructToArray
			var yyq1193 [2]bool
			_, _, _ = yysep1193, yyq1193, yy2arr1193
			const yyr1193 bool = false
			var yynn1193 int
			if yyr1193 || yy2arr1193 {
				r.EncodeArrayStart(2)
			} else {
				yynn1193 = 2
				for _, b := range yyq1193 {
					if b {
						yynn1193++
					}
				}
				r.EncodeMapStart(yynn1193)
				yynn1193 = 0
			}
			if yyr1193 || yy2arr1193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1195 := z.EncBinary()
				_ = yym1195
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1196 := z.EncBinary()
				_ = yym1196
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1193 || yy2arr1193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1198 := z.EncBinary()
				_ = yym1198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1199 := z.EncBinary()
				_ = yym1199
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1193 || yy2arr1193 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1200 := z.DecBinary()
	_ = yym1200
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1201 := r.ContainerType()
		if yyct1201 == codecSelferValueTypeMap1234 {
			yyl1201 := r.ReadMapStart()
			if yyl1201 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1201, d)
			}
		} else if yyct1201 == codecSelferValueTypeArray1234 {
			yyl1201 := r.ReadArrayStart()
			if yyl1201 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1201, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1202Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1202Slc
	var yyhl1202 bool = l >= 0
	for yyj1202 := 0; ; yyj1202++ {
		if yyhl1202 {
			if yyj1202 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1202Slc = r.DecodeBytes(yys1202Slc, true, true)
		yys1202 := string(yys1202Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1202 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1202)
		} // end switch yys1202
	} // end for yyj1202
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1205 int
	var yyb1205 bool
	var yyhl1205 bool = l >= 0
	yyj1205++
	if yyhl1205 {
		yyb1205 = yyj1205 > l
	} else {
		yyb1205 = r.CheckBreak()
	}
	if yyb1205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1205++
	if yyhl1205 {
		yyb1205 = yyj1205 > l
	} else {
		yyb1205 = r.CheckBreak()
	}
	if yyb1205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1205++
		if yyhl1205 {
			yyb1205 = yyj1205 > l
		} else {
			yyb1205 = r.CheckBreak()
		}
		if yyb1205 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1205-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1208 := z.EncBinary()
		_ = yym1208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1209 := !z.EncBinary()
			yy2arr1209 := z.EncBasicHandle().StructToArray
			var yyq1209 [5]bool
			_, _, _ = yysep1209, yyq1209, yy2arr1209
			const yyr1209 bool = false
			yyq1209[0] = x.Path != ""
			yyq1209[2] = x.Host != ""
			yyq1209[3] = x.Scheme != ""
			yyq1209[4] = len(x.HTTPHeaders) != 0
			var yynn1209 int
			if yyr1209 || yy2arr1209 {
				r.EncodeArrayStart(5)
			} else {
				yynn1209 = 1
				for _, b := range yyq1209 {
					if b {
						yynn1209++
					}
				}
				r.EncodeMapStart(yynn1209)
				yynn1209 = 0
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1209[0] {
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1209[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1212 := z.EncBinary()
					_ = yym1212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1214 := &x.Port
				yym1215 := z.EncBinary()
				_ = yym1215
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1214) {
				} else if !yym1215 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1214)
				} else {
					z.EncFallback(yy1214)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1216 := &x.Port
				yym1217 := z.EncBinary()
				_ = yym1217
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1216) {
				} else if !yym1217 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1216)
				} else {
					z.EncFallback(yy1216)
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1209[2] {
					yym1219 := z.EncBinary()
					_ = yym1219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1209[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1209[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1209[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1209[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1223 := z.EncBinary()
						_ = yym1223
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1209[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1224 := z.EncBinary()
						_ = yym1224
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1225 := z.DecBinary()
	_ = yym1225
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1226 := r.ContainerType()
		if yyct1226 == codecSelferValueTypeMap1234 {
			yyl1226 := r.ReadMapStart()
			if yyl1226 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1226, d)
			}
		} else if yyct1226 == codecSelferValueTypeArray1234 {
			yyl1226 := r.ReadArrayStart()
			if yyl1226 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1226, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1227Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1227Slc
	var yyhl1227 bool = l >= 0
	for yyj1227 := 0; ; yyj1227++ {
		if yyhl1227 {
			if yyj1227 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1227Slc = r.DecodeBytes(yys1227Slc, true, true)
		yys1227 := string(yys1227Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1227 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1229 := &x.Port
				yym1230 := z.DecBinary()
				_ = yym1230
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1229) {
				} else if !yym1230 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1229)
				} else {
					z.DecFallback(yyv1229, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1233 := &x.HTTPHeaders
				yym1234 := z.DecBinary()
				_ = yym1234
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1233), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1227)
		} // end switch yys1227
	} // end for yyj1227
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1235 int
	var yyb1235 bool
	var yyhl1235 bool = l >= 0
	yyj1235++
	if yyhl1235 {
		yyb1235 = yyj1235 > l
	} else {
		yyb1235 = r.CheckBreak()
	}
	if yyb1235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1235++
	if yyhl1235 {
		yyb1235 = yyj1235 > l
	} else {
		yyb1235 = r.CheckBreak()
	}
	if yyb1235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1237 := &x.Port
		yym1238 := z.DecBinary()
		_ = yym1238
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1237) {
		} else if !yym1238 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1237)
		} else {
			z.DecFallback(yyv1237, false)
		}
	}
	yyj1235++
	if yyhl1235 {
		yyb1235 = yyj1235 > l
	} else {
		yyb1235 = r.CheckBreak()
	}
	if yyb1235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1235++
	if yyhl1235 {
		yyb1235 = yyj1235 > l
	} else {
		yyb1235 = r.CheckBreak()
	}
	if yyb1235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1235++
	if yyhl1235 {
		yyb1235 = yyj1235 > l
	} else {
		yyb1235 = r.CheckBreak()
	}
	if yyb1235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1241 := &x.HTTPHeaders
		yym1242 := z.DecBinary()
		_ = yym1242
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1241), d)
		}
	}
	for {
		yyj1235++
		if yyhl1235 {
			yyb1235 = yyj1235 > l
		} else {
			yyb1235 = r.CheckBreak()
		}
		if yyb1235 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1235-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1243 := z.EncBinary()
	_ = yym1243
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1244 := z.DecBinary()
	_ = yym1244
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1245 := z.EncBinary()
		_ = yym1245
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1246 := !z.EncBinary()
			yy2arr1246 := z.EncBasicHandle().StructToArray
			var yyq1246 [1]bool
			_, _, _ = yysep1246, yyq1246, yy2arr1246
			const yyr1246 bool = false
			var yynn1246 int
			if yyr1246 || yy2arr1246 {
				r.EncodeArrayStart(1)
			} else {
				yynn1246 = 1
				for _, b := range yyq1246 {
					if b {
						yynn1246++
					}
				}
				r.EncodeMapStart(yynn1246)
				yynn1246 = 0
			}
			if yyr1246 || yy2arr1246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1248 := &x.Port
				yym1249 := z.EncBinary()
				_ = yym1249
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1248) {
				} else if !yym1249 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1248)
				} else {
					z.EncFallback(yy1248)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1250 := &x.Port
				yym1251 := z.EncBinary()
				_ = yym1251
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1250) {
				} else if !yym1251 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1250)
				} else {
					z.EncFallback(yy1250)
				}
			}
			if yyr1246 || yy2arr1246 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1252 := z.DecBinary()
	_ = yym1252
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1253 := r.ContainerType()
		if yyct1253 == codecSelferValueTypeMap1234 {
			yyl1253 := r.ReadMapStart()
			if yyl1253 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1253, d)
			}
		} else if yyct1253 == codecSelferValueTypeArray1234 {
			yyl1253 := r.ReadArrayStart()
			if yyl1253 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1253, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1254Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1254Slc
	var yyhl1254 bool = l >= 0
	for yyj1254 := 0; ; yyj1254++ {
		if yyhl1254 {
			if yyj1254 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1254Slc = r.DecodeBytes(yys1254Slc, true, true)
		yys1254 := string(yys1254Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1254 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1255 := &x.Port
				yym1256 := z.DecBinary()
				_ = yym1256
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1255) {
				} else if !yym1256 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1255)
				} else {
					z.DecFallback(yyv1255, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1254)
		} // end switch yys1254
	} // end for yyj1254
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1257 int
	var yyb1257 bool
	var yyhl1257 bool = l >= 0
	yyj1257++
	if yyhl1257 {
		yyb1257 = yyj1257 > l
	} else {
		yyb1257 = r.CheckBreak()
	}
	if yyb1257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1258 := &x.Port
		yym1259 := z.DecBinary()
		_ = yym1259
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1258) {
		} else if !yym1259 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1258)
		} else {
			z.DecFallback(yyv1258, false)
		}
	}
	for {
		yyj1257++
		if yyhl1257 {
			yyb1257 = yyj1257 > l
		} else {
			yyb1257 = r.CheckBreak()
		}
		if yyb1257 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1257-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1260 := z.EncBinary()
		_ = yym1260
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1261 := !z.EncBinary()
			yy2arr1261 := z.EncBasicHandle().StructToArray
			var yyq1261 [1]bool
			_, _, _ = yysep1261, yyq1261, yy2arr1261
			const yyr1261 bool = false
			yyq1261[0] = len(x.Command) != 0
			var yynn1261 int
			if yyr1261 || yy2arr1261 {
				r.EncodeArrayStart(1)
			} else {
				yynn1261 = 0
				for _, b := range yyq1261 {
					if b {
						yynn1261++
					}
				}
				r.EncodeMapStart(yynn1261)
				yynn1261 = 0
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1263 := z.EncBinary()
						_ = yym1263
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1261[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1264 := z.EncBinary()
						_ = yym1264
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1265 := z.DecBinary()
	_ = yym1265
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1266 := r.ContainerType()
		if yyct1266 == codecSelferValueTypeMap1234 {
			yyl1266 := r.ReadMapStart()
			if yyl1266 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1266, d)
			}
		} else if yyct1266 == codecSelferValueTypeArray1234 {
			yyl1266 := r.ReadArrayStart()
			if yyl1266 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1266, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1267Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1267Slc
	var yyhl1267 bool = l >= 0
	for yyj1267 := 0; ; yyj1267++ {
		if yyhl1267 {
			if yyj1267 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1267Slc = r.DecodeBytes(yys1267Slc, true, true)
		yys1267 := string(yys1267Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1267 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1268 := &x.Command
				yym1269 := z.DecBinary()
				_ = yym1269
				if false {
				} else {
					z.F.DecSliceStringX(yyv1268, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1267)
		} // end switch yys1267
	} // end for yyj1267
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1270 int
	var yyb1270 bool
	var yyhl1270 bool = l >= 0
	yyj1270++
	if yyhl1270 {
		yyb1270 = yyj1270 > l
	} else {
		yyb1270 = r.CheckBreak()
	}
	if yyb1270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1271 := &x.Command
		yym1272 := z.DecBinary()
		_ = yym1272
		if false {
		} else {
			z.F.DecSliceStringX(yyv1271, false, d)
		}
	}
	for {
		yyj1270++
		if yyhl1270 {
			yyb1270 = yyj1270 > l
		} else {
			yyb1270 = r.CheckBreak()
		}
		if yyb1270 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1270-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1273 := z.EncBinary()
		_ = yym1273
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1274 := !z.EncBinary()
			yy2arr1274 := z.EncBasicHandle().StructToArray
			var yyq1274 [8]bool
			_, _, _ = yysep1274, yyq1274, yy2arr1274
			const yyr1274 bool = false
			yyq1274[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1274[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1274[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1274[3] = x.InitialDelaySeconds != 0
			yyq1274[4] = x.TimeoutSeconds != 0
			yyq1274[5] = x.PeriodSeconds != 0
			yyq1274[6] = x.SuccessThreshold != 0
			yyq1274[7] = x.FailureThreshold != 0
			var yynn1274 int
			if yyr1274 || yy2arr1274 {
				r.EncodeArrayStart(8)
			} else {
				yynn1274 = 0
				for _, b := range yyq1274 {
					if b {
						yynn1274++
					}
				}
				r.EncodeMapStart(yynn1274)
				yynn1274 = 0
			}
			var yyn1275 bool
			if x.Handler.Exec == nil {
				yyn1275 = true
				goto LABEL1275
			}
		LABEL1275:
			if yyr1274 || yy2arr1274 {
				if yyn1275 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1274[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1274[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1275 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1276 bool
			if x.Handler.HTTPGet == nil {
				yyn1276 = true
				goto LABEL1276
			}
		LABEL1276:
			if yyr1274 || yy2arr1274 {
				if yyn1276 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1274[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1274[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1276 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1277 bool
			if x.Handler.TCPSocket == nil {
				yyn1277 = true
				goto LABEL1277
			}
		LABEL1277:
			if yyr1274 || yy2arr1274 {
				if yyn1277 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1274[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1274[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1277 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[3] {
					yym1279 := z.EncBinary()
					_ = yym1279
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1274[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1280 := z.EncBinary()
					_ = yym1280
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[4] {
					yym1282 := z.EncBinary()
					_ = yym1282
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1274[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1283 := z.EncBinary()
					_ = yym1283
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[5] {
					yym1285 := z.EncBinary()
					_ = yym1285
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1274[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1286 := z.EncBinary()
					_ = yym1286
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[6] {
					yym1288 := z.EncBinary()
					_ = yym1288
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1274[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1289 := z.EncBinary()
					_ = yym1289
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[7] {
					yym1291 := z.EncBinary()
					_ = yym1291
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1274[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1292 := z.EncBinary()
					_ = yym1292
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1293 := z.DecBinary()
	_ = yym1293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1294 := r.ContainerType()
		if yyct1294 == codecSelferValueTypeMap1234 {
			yyl1294 := r.ReadMapStart()
			if yyl1294 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1294, d)
			}
		} else if yyct1294 == codecSelferValueTypeArray1234 {
			yyl1294 := r.ReadArrayStart()
			if yyl1294 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1295Slc
	var yyhl1295 bool = l >= 0
	for yyj1295 := 0; ; yyj1295++ {
		if yyhl1295 {
			if yyj1295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1295Slc = r.DecodeBytes(yys1295Slc, true, true)
		yys1295 := string(yys1295Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1295 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1295)
		} // end switch yys1295
	} // end for yyj1295
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1304 int
	var yyb1304 bool
	var yyhl1304 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1304++
		if yyhl1304 {
			yyb1304 = yyj1304 > l
		} else {
			yyb1304 = r.CheckBreak()
		}
		if yyb1304 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1304-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1313 := z.EncBinary()
	_ = yym1313
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1314 := z.DecBinary()
	_ = yym1314
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1315 := z.EncBinary()
	_ = yym1315
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1316 := z.DecBinary()
	_ = yym1316
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1317 := z.EncBinary()
		_ = yym1317
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1318 := !z.EncBinary()
			yy2arr1318 := z.EncBasicHandle().StructToArray
			var yyq1318 [2]bool
			_, _, _ = yysep1318, yyq1318, yy2arr1318
			const yyr1318 bool = false
			yyq1318[0] = len(x.Add) != 0
			yyq1318[1] = len(x.Drop) != 0
			var yynn1318 int
			if yyr1318 || yy2arr1318 {
				r.EncodeArrayStart(2)
			} else {
				yynn1318 = 0
				for _, b := range yyq1318 {
					if b {
						yynn1318++
					}
				}
				r.EncodeMapStart(yynn1318)
				yynn1318 = 0
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1320 := z.EncBinary()
						_ = yym1320
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1318[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1321 := z.EncBinary()
						_ = yym1321
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1323 := z.EncBinary()
						_ = yym1323
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1318[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1324 := z.EncBinary()
						_ = yym1324
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1325 := z.DecBinary()
	_ = yym1325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1326 := r.ContainerType()
		if yyct1326 == codecSelferValueTypeMap1234 {
			yyl1326 := r.ReadMapStart()
			if yyl1326 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1326, d)
			}
		} else if yyct1326 == codecSelferValueTypeArray1234 {
			yyl1326 := r.ReadArrayStart()
			if yyl1326 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1326, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1327Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1327Slc
	var yyhl1327 bool = l >= 0
	for yyj1327 := 0; ; yyj1327++ {
		if yyhl1327 {
			if yyj1327 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1327Slc = r.DecodeBytes(yys1327Slc, true, true)
		yys1327 := string(yys1327Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1327 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1328 := &x.Add
				yym1329 := z.DecBinary()
				_ = yym1329
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1328), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1330 := &x.Drop
				yym1331 := z.DecBinary()
				_ = yym1331
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1330), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1327)
		} // end switch yys1327
	} // end for yyj1327
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1332 int
	var yyb1332 bool
	var yyhl1332 bool = l >= 0
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1333 := &x.Add
		yym1334 := z.DecBinary()
		_ = yym1334
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1333), d)
		}
	}
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1335 := &x.Drop
		yym1336 := z.DecBinary()
		_ = yym1336
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1335), d)
		}
	}
	for {
		yyj1332++
		if yyhl1332 {
			yyb1332 = yyj1332 > l
		} else {
			yyb1332 = r.CheckBreak()
		}
		if yyb1332 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1332-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1337 := z.EncBinary()
		_ = yym1337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1338 := !z.EncBinary()
			yy2arr1338 := z.EncBasicHandle().StructToArray
			var yyq1338 [2]bool
			_, _, _ = yysep1338, yyq1338, yy2arr1338
			const yyr1338 bool = false
			yyq1338[0] = len(x.Limits) != 0
			yyq1338[1] = len(x.Requests) != 0
			var yynn1338 int
			if yyr1338 || yy2arr1338 {
				r.EncodeArrayStart(2)
			} else {
				yynn1338 = 0
				for _, b := range yyq1338 {
					if b {
						yynn1338++
					}
				}
				r.EncodeMapStart(yynn1338)
				yynn1338 = 0
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1338[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1338[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1338[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1341 := z.DecBinary()
	_ = yym1341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1342 := r.ContainerType()
		if yyct1342 == codecSelferValueTypeMap1234 {
			yyl1342 := r.ReadMapStart()
			if yyl1342 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1342, d)
			}
		} else if yyct1342 == codecSelferValueTypeArray1234 {
			yyl1342 := r.ReadArrayStart()
			if yyl1342 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1342, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1343Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1343Slc
	var yyhl1343 bool = l >= 0
	for yyj1343 := 0; ; yyj1343++ {
		if yyhl1343 {
			if yyj1343 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1343Slc = r.DecodeBytes(yys1343Slc, true, true)
		yys1343 := string(yys1343Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1343 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1344 := &x.Limits
				yyv1344.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1345 := &x.Requests
				yyv1345.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1343)
		} // end switch yys1343
	} // end for yyj1343
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1346 int
	var yyb1346 bool
	var yyhl1346 bool = l >= 0
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1347 := &x.Limits
		yyv1347.CodecDecodeSelf(d)
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1348 := &x.Requests
		yyv1348.CodecDecodeSelf(d)
	}
	for {
		yyj1346++
		if yyhl1346 {
			yyb1346 = yyj1346 > l
		} else {
			yyb1346 = r.CheckBreak()
		}
		if yyb1346 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1346-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1349 := z.EncBinary()
		_ = yym1349
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1350 := !z.EncBinary()
			yy2arr1350 := z.EncBasicHandle().StructToArray
			var yyq1350 [18]bool
			_, _, _ = yysep1350, yyq1350, yy2arr1350
			const yyr1350 bool = false
			yyq1350[1] = x.Image != ""
			yyq1350[2] = len(x.Command) != 0
			yyq1350[3] = len(x.Args) != 0
			yyq1350[4] = x.WorkingDir != ""
			yyq1350[5] = len(x.Ports) != 0
			yyq1350[6] = len(x.Env) != 0
			yyq1350[7] = true
			yyq1350[8] = len(x.VolumeMounts) != 0
			yyq1350[9] = x.LivenessProbe != nil
			yyq1350[10] = x.ReadinessProbe != nil
			yyq1350[11] = x.Lifecycle != nil
			yyq1350[12] = x.TerminationMessagePath != ""
			yyq1350[13] = x.ImagePullPolicy != ""
			yyq1350[14] = x.SecurityContext != nil
			yyq1350[15] = x.Stdin != false
			yyq1350[16] = x.StdinOnce != false
			yyq1350[17] = x.TTY != false
			var yynn1350 int
			if yyr1350 || yy2arr1350 {
				r.EncodeArrayStart(18)
			} else {
				yynn1350 = 1
				for _, b := range yyq1350 {
					if b {
						yynn1350++
					}
				}
				r.EncodeMapStart(yynn1350)
				yynn1350 = 0
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1352 := z.EncBinary()
				_ = yym1352
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1353 := z.EncBinary()
				_ = yym1353
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[1] {
					yym1355 := z.EncBinary()
					_ = yym1355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1350[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1356 := z.EncBinary()
					_ = yym1356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1358 := z.EncBinary()
						_ = yym1358
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1350[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1359 := z.EncBinary()
						_ = yym1359
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1361 := z.EncBinary()
						_ = yym1361
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1350[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1362 := z.EncBinary()
						_ = yym1362
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[4] {
					yym1364 := z.EncBinary()
					_ = yym1364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1350[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1365 := z.EncBinary()
					_ = yym1365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1367 := z.EncBinary()
						_ = yym1367
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1350[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1368 := z.EncBinary()
						_ = yym1368
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1370 := z.EncBinary()
						_ = yym1370
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1350[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1371 := z.EncBinary()
						_ = yym1371
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[7] {
					yy1373 := &x.Resources
					yy1373.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1350[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1374 := &x.Resources
					yy1374.CodecEncodeSelf(e)
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1376 := z.EncBinary()
						_ = yym1376
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1350[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1377 := z.EncBinary()
						_ = yym1377
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1350[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1350[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1350[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[12] {
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1350[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1383 := z.EncBinary()
					_ = yym1383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1350[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1350[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[15] {
					yym1387 := z.EncBinary()
					_ = yym1387
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1350[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[16] {
					yym1390 := z.EncBinary()
					_ = yym1390
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1350[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[17] {
					yym1393 := z.EncBinary()
					_ = yym1393
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1350[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1395 := z.DecBinary()
	_ = yym1395
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1396 := r.ContainerType()
		if yyct1396 == codecSelferValueTypeMap1234 {
			yyl1396 := r.ReadMapStart()
			if yyl1396 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1396, d)
			}
		} else if yyct1396 == codecSelferValueTypeArray1234 {
			yyl1396 := r.ReadArrayStart()
			if yyl1396 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1396, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1397Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1397Slc
	var yyhl1397 bool = l >= 0
	for yyj1397 := 0; ; yyj1397++ {
		if yyhl1397 {
			if yyj1397 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1397Slc = r.DecodeBytes(yys1397Slc, true, true)
		yys1397 := string(yys1397Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1397 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1400 := &x.Command
				yym1401 := z.DecBinary()
				_ = yym1401
				if false {
				} else {
					z.F.DecSliceStringX(yyv1400, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1402 := &x.Args
				yym1403 := z.DecBinary()
				_ = yym1403
				if false {
				} else {
					z.F.DecSliceStringX(yyv1402, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1405 := &x.Ports
				yym1406 := z.DecBinary()
				_ = yym1406
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1405), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1407 := &x.Env
				yym1408 := z.DecBinary()
				_ = yym1408
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1407), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1409 := &x.Resources
				yyv1409.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1410 := &x.VolumeMounts
				yym1411 := z.DecBinary()
				_ = yym1411
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1410), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1397)
		} // end switch yys1397
	} // end for yyj1397
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1421 int
	var yyb1421 bool
	var yyhl1421 bool = l >= 0
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1424 := &x.Command
		yym1425 := z.DecBinary()
		_ = yym1425
		if false {
		} else {
			z.F.DecSliceStringX(yyv1424, false, d)
		}
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1426 := &x.Args
		yym1427 := z.DecBinary()
		_ = yym1427
		if false {
		} else {
			z.F.DecSliceStringX(yyv1426, false, d)
		}
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1429 := &x.Ports
		yym1430 := z.DecBinary()
		_ = yym1430
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1429), d)
		}
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1431 := &x.Env
		yym1432 := z.DecBinary()
		_ = yym1432
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1431), d)
		}
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1433 := &x.Resources
		yyv1433.CodecDecodeSelf(d)
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1434 := &x.VolumeMounts
		yym1435 := z.DecBinary()
		_ = yym1435
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1434), d)
		}
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1421++
		if yyhl1421 {
			yyb1421 = yyj1421 > l
		} else {
			yyb1421 = r.CheckBreak()
		}
		if yyb1421 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1421-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1445 := z.EncBinary()
		_ = yym1445
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1446 := !z.EncBinary()
			yy2arr1446 := z.EncBasicHandle().StructToArray
			var yyq1446 [3]bool
			_, _, _ = yysep1446, yyq1446, yy2arr1446
			const yyr1446 bool = false
			yyq1446[0] = x.Exec != nil
			yyq1446[1] = x.HTTPGet != nil
			yyq1446[2] = x.TCPSocket != nil
			var yynn1446 int
			if yyr1446 || yy2arr1446 {
				r.EncodeArrayStart(3)
			} else {
				yynn1446 = 0
				for _, b := range yyq1446 {
					if b {
						yynn1446++
					}
				}
				r.EncodeMapStart(yynn1446)
				yynn1446 = 0
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1446[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1446[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1446[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1446[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1446[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1446[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1450 := z.DecBinary()
	_ = yym1450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1451 := r.ContainerType()
		if yyct1451 == codecSelferValueTypeMap1234 {
			yyl1451 := r.ReadMapStart()
			if yyl1451 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1451, d)
			}
		} else if yyct1451 == codecSelferValueTypeArray1234 {
			yyl1451 := r.ReadArrayStart()
			if yyl1451 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1451, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1452Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1452Slc
	var yyhl1452 bool = l >= 0
	for yyj1452 := 0; ; yyj1452++ {
		if yyhl1452 {
			if yyj1452 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1452Slc = r.DecodeBytes(yys1452Slc, true, true)
		yys1452 := string(yys1452Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1452 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1452)
		} // end switch yys1452
	} // end for yyj1452
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1456 int
	var yyb1456 bool
	var yyhl1456 bool = l >= 0
	yyj1456++
	if yyhl1456 {
		yyb1456 = yyj1456 > l
	} else {
		yyb1456 = r.CheckBreak()
	}
	if yyb1456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1456++
	if yyhl1456 {
		yyb1456 = yyj1456 > l
	} else {
		yyb1456 = r.CheckBreak()
	}
	if yyb1456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1456++
	if yyhl1456 {
		yyb1456 = yyj1456 > l
	} else {
		yyb1456 = r.CheckBreak()
	}
	if yyb1456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1456++
		if yyhl1456 {
			yyb1456 = yyj1456 > l
		} else {
			yyb1456 = r.CheckBreak()
		}
		if yyb1456 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1456-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1460 := z.EncBinary()
		_ = yym1460
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1461 := !z.EncBinary()
			yy2arr1461 := z.EncBasicHandle().StructToArray
			var yyq1461 [2]bool
			_, _, _ = yysep1461, yyq1461, yy2arr1461
			const yyr1461 bool = false
			yyq1461[0] = x.PostStart != nil
			yyq1461[1] = x.PreStop != nil
			var yynn1461 int
			if yyr1461 || yy2arr1461 {
				r.EncodeArrayStart(2)
			} else {
				yynn1461 = 0
				for _, b := range yyq1461 {
					if b {
						yynn1461++
					}
				}
				r.EncodeMapStart(yynn1461)
				yynn1461 = 0
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1461[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1461[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1464 := z.DecBinary()
	_ = yym1464
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1465 := r.ContainerType()
		if yyct1465 == codecSelferValueTypeMap1234 {
			yyl1465 := r.ReadMapStart()
			if yyl1465 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1465, d)
			}
		} else if yyct1465 == codecSelferValueTypeArray1234 {
			yyl1465 := r.ReadArrayStart()
			if yyl1465 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1465, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1466Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1466Slc
	var yyhl1466 bool = l >= 0
	for yyj1466 := 0; ; yyj1466++ {
		if yyhl1466 {
			if yyj1466 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1466Slc = r.DecodeBytes(yys1466Slc, true, true)
		yys1466 := string(yys1466Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1466 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1466)
		} // end switch yys1466
	} // end for yyj1466
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1469 int
	var yyb1469 bool
	var yyhl1469 bool = l >= 0
	yyj1469++
	if yyhl1469 {
		yyb1469 = yyj1469 > l
	} else {
		yyb1469 = r.CheckBreak()
	}
	if yyb1469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1469++
	if yyhl1469 {
		yyb1469 = yyj1469 > l
	} else {
		yyb1469 = r.CheckBreak()
	}
	if yyb1469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1469++
		if yyhl1469 {
			yyb1469 = yyj1469 > l
		} else {
			yyb1469 = r.CheckBreak()
		}
		if yyb1469 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1469-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1472 := z.EncBinary()
	_ = yym1472
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1473 := z.DecBinary()
	_ = yym1473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1474 := z.EncBinary()
		_ = yym1474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1475 := !z.EncBinary()
			yy2arr1475 := z.EncBasicHandle().StructToArray
			var yyq1475 [2]bool
			_, _, _ = yysep1475, yyq1475, yy2arr1475
			const yyr1475 bool = false
			yyq1475[0] = x.Reason != ""
			yyq1475[1] = x.Message != ""
			var yynn1475 int
			if yyr1475 || yy2arr1475 {
				r.EncodeArrayStart(2)
			} else {
				yynn1475 = 0
				for _, b := range yyq1475 {
					if b {
						yynn1475++
					}
				}
				r.EncodeMapStart(yynn1475)
				yynn1475 = 0
			}
			if yyr1475 || yy2arr1475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1475[0] {
					yym1477 := z.EncBinary()
					_ = yym1477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1475[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1478 := z.EncBinary()
					_ = yym1478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1475 || yy2arr1475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1475[1] {
					yym1480 := z.EncBinary()
					_ = yym1480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1475[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1481 := z.EncBinary()
					_ = yym1481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1475 || yy2arr1475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1482 := z.DecBinary()
	_ = yym1482
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1483 := r.ContainerType()
		if yyct1483 == codecSelferValueTypeMap1234 {
			yyl1483 := r.ReadMapStart()
			if yyl1483 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1483, d)
			}
		} else if yyct1483 == codecSelferValueTypeArray1234 {
			yyl1483 := r.ReadArrayStart()
			if yyl1483 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1483, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1484Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1484Slc
	var yyhl1484 bool = l >= 0
	for yyj1484 := 0; ; yyj1484++ {
		if yyhl1484 {
			if yyj1484 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1484Slc = r.DecodeBytes(yys1484Slc, true, true)
		yys1484 := string(yys1484Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1484 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1484)
		} // end switch yys1484
	} // end for yyj1484
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1487 int
	var yyb1487 bool
	var yyhl1487 bool = l >= 0
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1487++
		if yyhl1487 {
			yyb1487 = yyj1487 > l
		} else {
			yyb1487 = r.CheckBreak()
		}
		if yyb1487 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1487-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1490 := z.EncBinary()
		_ = yym1490
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1491 := !z.EncBinary()
			yy2arr1491 := z.EncBasicHandle().StructToArray
			var yyq1491 [1]bool
			_, _, _ = yysep1491, yyq1491, yy2arr1491
			const yyr1491 bool = false
			yyq1491[0] = true
			var yynn1491 int
			if yyr1491 || yy2arr1491 {
				r.EncodeArrayStart(1)
			} else {
				yynn1491 = 0
				for _, b := range yyq1491 {
					if b {
						yynn1491++
					}
				}
				r.EncodeMapStart(yynn1491)
				yynn1491 = 0
			}
			if yyr1491 || yy2arr1491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1491[0] {
					yy1493 := &x.StartedAt
					yym1494 := z.EncBinary()
					_ = yym1494
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1493) {
					} else if yym1494 {
						z.EncBinaryMarshal(yy1493)
					} else if !yym1494 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1493)
					} else {
						z.EncFallback(yy1493)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1491[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1495 := &x.StartedAt
					yym1496 := z.EncBinary()
					_ = yym1496
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1495) {
					} else if yym1496 {
						z.EncBinaryMarshal(yy1495)
					} else if !yym1496 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1495)
					} else {
						z.EncFallback(yy1495)
					}
				}
			}
			if yyr1491 || yy2arr1491 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1497 := z.DecBinary()
	_ = yym1497
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1498 := r.ContainerType()
		if yyct1498 == codecSelferValueTypeMap1234 {
			yyl1498 := r.ReadMapStart()
			if yyl1498 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1498, d)
			}
		} else if yyct1498 == codecSelferValueTypeArray1234 {
			yyl1498 := r.ReadArrayStart()
			if yyl1498 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1498, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1499Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1499Slc
	var yyhl1499 bool = l >= 0
	for yyj1499 := 0; ; yyj1499++ {
		if yyhl1499 {
			if yyj1499 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1499Slc = r.DecodeBytes(yys1499Slc, true, true)
		yys1499 := string(yys1499Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1499 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1500 := &x.StartedAt
				yym1501 := z.DecBinary()
				_ = yym1501
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1500) {
				} else if yym1501 {
					z.DecBinaryUnmarshal(yyv1500)
				} else if !yym1501 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1500)
				} else {
					z.DecFallback(yyv1500, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1499)
		} // end switch yys1499
	} // end for yyj1499
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1502 int
	var yyb1502 bool
	var yyhl1502 bool = l >= 0
	yyj1502++
	if yyhl1502 {
		yyb1502 = yyj1502 > l
	} else {
		yyb1502 = r.CheckBreak()
	}
	if yyb1502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1503 := &x.StartedAt
		yym1504 := z.DecBinary()
		_ = yym1504
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1503) {
		} else if yym1504 {
			z.DecBinaryUnmarshal(yyv1503)
		} else if !yym1504 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1503)
		} else {
			z.DecFallback(yyv1503, false)
		}
	}
	for {
		yyj1502++
		if yyhl1502 {
			yyb1502 = yyj1502 > l
		} else {
			yyb1502 = r.CheckBreak()
		}
		if yyb1502 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1502-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1505 := z.EncBinary()
		_ = yym1505
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1506 := !z.EncBinary()
			yy2arr1506 := z.EncBasicHandle().StructToArray
			var yyq1506 [7]bool
			_, _, _ = yysep1506, yyq1506, yy2arr1506
			const yyr1506 bool = false
			yyq1506[1] = x.Signal != 0
			yyq1506[2] = x.Reason != ""
			yyq1506[3] = x.Message != ""
			yyq1506[4] = true
			yyq1506[5] = true
			yyq1506[6] = x.ContainerID != ""
			var yynn1506 int
			if yyr1506 || yy2arr1506 {
				r.EncodeArrayStart(7)
			} else {
				yynn1506 = 1
				for _, b := range yyq1506 {
					if b {
						yynn1506++
					}
				}
				r.EncodeMapStart(yynn1506)
				yynn1506 = 0
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1508 := z.EncBinary()
				_ = yym1508
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1509 := z.EncBinary()
				_ = yym1509
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1506[1] {
					yym1511 := z.EncBinary()
					_ = yym1511
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1506[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1512 := z.EncBinary()
					_ = yym1512
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1506[2] {
					yym1514 := z.EncBinary()
					_ = yym1514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1506[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1515 := z.EncBinary()
					_ = yym1515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1506[3] {
					yym1517 := z.EncBinary()
					_ = yym1517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1506[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1518 := z.EncBinary()
					_ = yym1518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1506[4] {
					yy1520 := &x.StartedAt
					yym1521 := z.EncBinary()
					_ = yym1521
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1520) {
					} else if yym1521 {
						z.EncBinaryMarshal(yy1520)
					} else if !yym1521 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1520)
					} else {
						z.EncFallback(yy1520)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1506[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1522 := &x.StartedAt
					yym1523 := z.EncBinary()
					_ = yym1523
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1522) {
					} else if yym1523 {
						z.EncBinaryMarshal(yy1522)
					} else if !yym1523 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1522)
					} else {
						z.EncFallback(yy1522)
					}
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1506[5] {
					yy1525 := &x.FinishedAt
					yym1526 := z.EncBinary()
					_ = yym1526
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1525) {
					} else if yym1526 {
						z.EncBinaryMarshal(yy1525)
					} else if !yym1526 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1525)
					} else {
						z.EncFallback(yy1525)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1506[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1527 := &x.FinishedAt
					yym1528 := z.EncBinary()
					_ = yym1528
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1527) {
					} else if yym1528 {
						z.EncBinaryMarshal(yy1527)
					} else if !yym1528 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1527)
					} else {
						z.EncFallback(yy1527)
					}
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1506[6] {
					yym1530 := z.EncBinary()
					_ = yym1530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1506[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1531 := z.EncBinary()
					_ = yym1531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1532 := z.DecBinary()
	_ = yym1532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1533 := r.ContainerType()
		if yyct1533 == codecSelferValueTypeMap1234 {
			yyl1533 := r.ReadMapStart()
			if yyl1533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1533, d)
			}
		} else if yyct1533 == codecSelferValueTypeArray1234 {
			yyl1533 := r.ReadArrayStart()
			if yyl1533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1534Slc
	var yyhl1534 bool = l >= 0
	for yyj1534 := 0; ; yyj1534++ {
		if yyhl1534 {
			if yyj1534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1534Slc = r.DecodeBytes(yys1534Slc, true, true)
		yys1534 := string(yys1534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1534 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1539 := &x.StartedAt
				yym1540 := z.DecBinary()
				_ = yym1540
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1539) {
				} else if yym1540 {
					z.DecBinaryUnmarshal(yyv1539)
				} else if !yym1540 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1539)
				} else {
					z.DecFallback(yyv1539, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1541 := &x.FinishedAt
				yym1542 := z.DecBinary()
				_ = yym1542
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1541) {
				} else if yym1542 {
					z.DecBinaryUnmarshal(yyv1541)
				} else if !yym1542 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1541)
				} else {
					z.DecFallback(yyv1541, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1534)
		} // end switch yys1534
	} // end for yyj1534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1544 int
	var yyb1544 bool
	var yyhl1544 bool = l >= 0
	yyj1544++
	if yyhl1544 {
		yyb1544 = yyj1544 > l
	} else {
		yyb1544 = r.CheckBreak()
	}
	if yyb1544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1544++
	if yyhl1544 {
		yyb1544 = yyj1544 > l
	} else {
		yyb1544 = r.CheckBreak()
	}
	if yyb1544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1544++
	if yyhl1544 {
		yyb1544 = yyj1544 > l
	} else {
		yyb1544 = r.CheckBreak()
	}
	if yyb1544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1544++
	if yyhl1544 {
		yyb1544 = yyj1544 > l
	} else {
		yyb1544 = r.CheckBreak()
	}
	if yyb1544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1544++
	if yyhl1544 {
		yyb1544 = yyj1544 > l
	} else {
		yyb1544 = r.CheckBreak()
	}
	if yyb1544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1549 := &x.StartedAt
		yym1550 := z.DecBinary()
		_ = yym1550
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1549) {
		} else if yym1550 {
			z.DecBinaryUnmarshal(yyv1549)
		} else if !yym1550 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1549)
		} else {
			z.DecFallback(yyv1549, false)
		}
	}
	yyj1544++
	if yyhl1544 {
		yyb1544 = yyj1544 > l
	} else {
		yyb1544 = r.CheckBreak()
	}
	if yyb1544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1551 := &x.FinishedAt
		yym1552 := z.DecBinary()
		_ = yym1552
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1551) {
		} else if yym1552 {
			z.DecBinaryUnmarshal(yyv1551)
		} else if !yym1552 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1551)
		} else {
			z.DecFallback(yyv1551, false)
		}
	}
	yyj1544++
	if yyhl1544 {
		yyb1544 = yyj1544 > l
	} else {
		yyb1544 = r.CheckBreak()
	}
	if yyb1544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1544++
		if yyhl1544 {
			yyb1544 = yyj1544 > l
		} else {
			yyb1544 = r.CheckBreak()
		}
		if yyb1544 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1544-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1554 := z.EncBinary()
		_ = yym1554
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1555 := !z.EncBinary()
			yy2arr1555 := z.EncBasicHandle().StructToArray
			var yyq1555 [3]bool
			_, _, _ = yysep1555, yyq1555, yy2arr1555
			const yyr1555 bool = false
			yyq1555[0] = x.Waiting != nil
			yyq1555[1] = x.Running != nil
			yyq1555[2] = x.Terminated != nil
			var yynn1555 int
			if yyr1555 || yy2arr1555 {
				r.EncodeArrayStart(3)
			} else {
				yynn1555 = 0
				for _, b := range yyq1555 {
					if b {
						yynn1555++
					}
				}
				r.EncodeMapStart(yynn1555)
				yynn1555 = 0
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1555[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1555[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1555[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1555[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1555[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1555[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1559 := z.DecBinary()
	_ = yym1559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1560 := r.ContainerType()
		if yyct1560 == codecSelferValueTypeMap1234 {
			yyl1560 := r.ReadMapStart()
			if yyl1560 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1560, d)
			}
		} else if yyct1560 == codecSelferValueTypeArray1234 {
			yyl1560 := r.ReadArrayStart()
			if yyl1560 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1561Slc
	var yyhl1561 bool = l >= 0
	for yyj1561 := 0; ; yyj1561++ {
		if yyhl1561 {
			if yyj1561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1561Slc = r.DecodeBytes(yys1561Slc, true, true)
		yys1561 := string(yys1561Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1561 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1561)
		} // end switch yys1561
	} // end for yyj1561
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1565 int
	var yyb1565 bool
	var yyhl1565 bool = l >= 0
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1565++
		if yyhl1565 {
			yyb1565 = yyj1565 > l
		} else {
			yyb1565 = r.CheckBreak()
		}
		if yyb1565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1569 := z.EncBinary()
		_ = yym1569
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1570 := !z.EncBinary()
			yy2arr1570 := z.EncBasicHandle().StructToArray
			var yyq1570 [8]bool
			_, _, _ = yysep1570, yyq1570, yy2arr1570
			const yyr1570 bool = false
			yyq1570[1] = true
			yyq1570[2] = true
			yyq1570[7] = x.ContainerID != ""
			var yynn1570 int
			if yyr1570 || yy2arr1570 {
				r.EncodeArrayStart(8)
			} else {
				yynn1570 = 5
				for _, b := range yyq1570 {
					if b {
						yynn1570++
					}
				}
				r.EncodeMapStart(yynn1570)
				yynn1570 = 0
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1572 := z.EncBinary()
				_ = yym1572
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1573 := z.EncBinary()
				_ = yym1573
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1570[1] {
					yy1575 := &x.State
					yy1575.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1570[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1576 := &x.State
					yy1576.CodecEncodeSelf(e)
				}
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1570[2] {
					yy1578 := &x.LastTerminationState
					yy1578.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1570[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1579 := &x.LastTerminationState
					yy1579.CodecEncodeSelf(e)
				}
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1581 := z.EncBinary()
				_ = yym1581
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1582 := z.EncBinary()
				_ = yym1582
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1584 := z.EncBinary()
				_ = yym1584
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1585 := z.EncBinary()
				_ = yym1585
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1587 := z.EncBinary()
				_ = yym1587
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1588 := z.EncBinary()
				_ = yym1588
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1590 := z.EncBinary()
				_ = yym1590
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1591 := z.EncBinary()
				_ = yym1591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1570[7] {
					yym1593 := z.EncBinary()
					_ = yym1593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1570[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1594 := z.EncBinary()
					_ = yym1594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1595 := z.DecBinary()
	_ = yym1595
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1596 := r.ContainerType()
		if yyct1596 == codecSelferValueTypeMap1234 {
			yyl1596 := r.ReadMapStart()
			if yyl1596 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1596, d)
			}
		} else if yyct1596 == codecSelferValueTypeArray1234 {
			yyl1596 := r.ReadArrayStart()
			if yyl1596 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1596, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1597Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1597Slc
	var yyhl1597 bool = l >= 0
	for yyj1597 := 0; ; yyj1597++ {
		if yyhl1597 {
			if yyj1597 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1597Slc = r.DecodeBytes(yys1597Slc, true, true)
		yys1597 := string(yys1597Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1597 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1599 := &x.State
				yyv1599.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1600 := &x.LastTerminationState
				yyv1600.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1597)
		} // end switch yys1597
	} // end for yyj1597
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1606 int
	var yyb1606 bool
	var yyhl1606 bool = l >= 0
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1608 := &x.State
		yyv1608.CodecDecodeSelf(d)
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1609 := &x.LastTerminationState
		yyv1609.CodecDecodeSelf(d)
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1606++
		if yyhl1606 {
			yyb1606 = yyj1606 > l
		} else {
			yyb1606 = r.CheckBreak()
		}
		if yyb1606 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1606-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1615 := z.EncBinary()
	_ = yym1615
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1616 := z.DecBinary()
	_ = yym1616
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1617 := z.EncBinary()
	_ = yym1617
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1618 := z.DecBinary()
	_ = yym1618
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1619 := z.EncBinary()
		_ = yym1619
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1620 := !z.EncBinary()
			yy2arr1620 := z.EncBasicHandle().StructToArray
			var yyq1620 [6]bool
			_, _, _ = yysep1620, yyq1620, yy2arr1620
			const yyr1620 bool = false
			yyq1620[2] = true
			yyq1620[3] = true
			yyq1620[4] = x.Reason != ""
			yyq1620[5] = x.Message != ""
			var yynn1620 int
			if yyr1620 || yy2arr1620 {
				r.EncodeArrayStart(6)
			} else {
				yynn1620 = 2
				for _, b := range yyq1620 {
					if b {
						yynn1620++
					}
				}
				r.EncodeMapStart(yynn1620)
				yynn1620 = 0
			}
			if yyr1620 || yy2arr1620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1620 || yy2arr1620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1620 || yy2arr1620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1620[2] {
					yy1624 := &x.LastProbeTime
					yym1625 := z.EncBinary()
					_ = yym1625
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1624) {
					} else if yym1625 {
						z.EncBinaryMarshal(yy1624)
					} else if !yym1625 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1624)
					} else {
						z.EncFallback(yy1624)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1620[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1626 := &x.LastProbeTime
					yym1627 := z.EncBinary()
					_ = yym1627
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1626) {
					} else if yym1627 {
						z.EncBinaryMarshal(yy1626)
					} else if !yym1627 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1626)
					} else {
						z.EncFallback(yy1626)
					}
				}
			}
			if yyr1620 || yy2arr1620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1620[3] {
					yy1629 := &x.LastTransitionTime
					yym1630 := z.EncBinary()
					_ = yym1630
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1629) {
					} else if yym1630 {
						z.EncBinaryMarshal(yy1629)
					} else if !yym1630 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1629)
					} else {
						z.EncFallback(yy1629)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1620[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1631 := &x.LastTransitionTime
					yym1632 := z.EncBinary()
					_ = yym1632
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1631) {
					} else if yym1632 {
						z.EncBinaryMarshal(yy1631)
					} else if !yym1632 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1631)
					} else {
						z.EncFallback(yy1631)
					}
				}
			}
			if yyr1620 || yy2arr1620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1620[4] {
					yym1634 := z.EncBinary()
					_ = yym1634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1620[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1635 := z.EncBinary()
					_ = yym1635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1620 || yy2arr1620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1620[5] {
					yym1637 := z.EncBinary()
					_ = yym1637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1620[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1638 := z.EncBinary()
					_ = yym1638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1620 || yy2arr1620 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1639 := z.DecBinary()
	_ = yym1639
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1640 := r.ContainerType()
		if yyct1640 == codecSelferValueTypeMap1234 {
			yyl1640 := r.ReadMapStart()
			if yyl1640 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1640, d)
			}
		} else if yyct1640 == codecSelferValueTypeArray1234 {
			yyl1640 := r.ReadArrayStart()
			if yyl1640 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1640, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1641Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1641Slc
	var yyhl1641 bool = l >= 0
	for yyj1641 := 0; ; yyj1641++ {
		if yyhl1641 {
			if yyj1641 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1641Slc = r.DecodeBytes(yys1641Slc, true, true)
		yys1641 := string(yys1641Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1641 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1644 := &x.LastProbeTime
				yym1645 := z.DecBinary()
				_ = yym1645
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1644) {
				} else if yym1645 {
					z.DecBinaryUnmarshal(yyv1644)
				} else if !yym1645 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1644)
				} else {
					z.DecFallback(yyv1644, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1646 := &x.LastTransitionTime
				yym1647 := z.DecBinary()
				_ = yym1647
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1646) {
				} else if yym1647 {
					z.DecBinaryUnmarshal(yyv1646)
				} else if !yym1647 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1646)
				} else {
					z.DecFallback(yyv1646, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1641)
		} // end switch yys1641
	} // end for yyj1641
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1650 int
	var yyb1650 bool
	var yyhl1650 bool = l >= 0
	yyj1650++
	if yyhl1650 {
		yyb1650 = yyj1650 > l
	} else {
		yyb1650 = r.CheckBreak()
	}
	if yyb1650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1650++
	if yyhl1650 {
		yyb1650 = yyj1650 > l
	} else {
		yyb1650 = r.CheckBreak()
	}
	if yyb1650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1650++
	if yyhl1650 {
		yyb1650 = yyj1650 > l
	} else {
		yyb1650 = r.CheckBreak()
	}
	if yyb1650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1653 := &x.LastProbeTime
		yym1654 := z.DecBinary()
		_ = yym1654
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1653) {
		} else if yym1654 {
			z.DecBinaryUnmarshal(yyv1653)
		} else if !yym1654 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1653)
		} else {
			z.DecFallback(yyv1653, false)
		}
	}
	yyj1650++
	if yyhl1650 {
		yyb1650 = yyj1650 > l
	} else {
		yyb1650 = r.CheckBreak()
	}
	if yyb1650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1655 := &x.LastTransitionTime
		yym1656 := z.DecBinary()
		_ = yym1656
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1655) {
		} else if yym1656 {
			z.DecBinaryUnmarshal(yyv1655)
		} else if !yym1656 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1655)
		} else {
			z.DecFallback(yyv1655, false)
		}
	}
	yyj1650++
	if yyhl1650 {
		yyb1650 = yyj1650 > l
	} else {
		yyb1650 = r.CheckBreak()
	}
	if yyb1650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1650++
	if yyhl1650 {
		yyb1650 = yyj1650 > l
	} else {
		yyb1650 = r.CheckBreak()
	}
	if yyb1650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1650++
		if yyhl1650 {
			yyb1650 = yyj1650 > l
		} else {
			yyb1650 = r.CheckBreak()
		}
		if yyb1650 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1650-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1659 := z.EncBinary()
	_ = yym1659
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1660 := z.DecBinary()
	_ = yym1660
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1661 := z.EncBinary()
	_ = yym1661
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1662 := z.DecBinary()
	_ = yym1662
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1663 := z.EncBinary()
		_ = yym1663
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1664 := !z.EncBinary()
			yy2arr1664 := z.EncBasicHandle().StructToArray
			var yyq1664 [1]bool
			_, _, _ = yysep1664, yyq1664, yy2arr1664
			const yyr1664 bool = false
			var yynn1664 int
			if yyr1664 || yy2arr1664 {
				r.EncodeArrayStart(1)
			} else {
				yynn1664 = 1
				for _, b := range yyq1664 {
					if b {
						yynn1664++
					}
				}
				r.EncodeMapStart(yynn1664)
				yynn1664 = 0
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1666 := z.EncBinary()
					_ = yym1666
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1667 := z.EncBinary()
					_ = yym1667
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1668 := z.DecBinary()
	_ = yym1668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1669 := r.ContainerType()
		if yyct1669 == codecSelferValueTypeMap1234 {
			yyl1669 := r.ReadMapStart()
			if yyl1669 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1669, d)
			}
		} else if yyct1669 == codecSelferValueTypeArray1234 {
			yyl1669 := r.ReadArrayStart()
			if yyl1669 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1670Slc
	var yyhl1670 bool = l >= 0
	for yyj1670 := 0; ; yyj1670++ {
		if yyhl1670 {
			if yyj1670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1670Slc = r.DecodeBytes(yys1670Slc, true, true)
		yys1670 := string(yys1670Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1670 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1671 := &x.NodeSelectorTerms
				yym1672 := z.DecBinary()
				_ = yym1672
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1671), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1670)
		} // end switch yys1670
	} // end for yyj1670
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1673 int
	var yyb1673 bool
	var yyhl1673 bool = l >= 0
	yyj1673++
	if yyhl1673 {
		yyb1673 = yyj1673 > l
	} else {
		yyb1673 = r.CheckBreak()
	}
	if yyb1673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1674 := &x.NodeSelectorTerms
		yym1675 := z.DecBinary()
		_ = yym1675
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1674), d)
		}
	}
	for {
		yyj1673++
		if yyhl1673 {
			yyb1673 = yyj1673 > l
		} else {
			yyb1673 = r.CheckBreak()
		}
		if yyb1673 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1673-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1676 := z.EncBinary()
		_ = yym1676
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1677 := !z.EncBinary()
			yy2arr1677 := z.EncBasicHandle().StructToArray
			var yyq1677 [1]bool
			_, _, _ = yysep1677, yyq1677, yy2arr1677
			const yyr1677 bool = false
			var yynn1677 int
			if yyr1677 || yy2arr1677 {
				r.EncodeArrayStart(1)
			} else {
				yynn1677 = 1
				for _, b := range yyq1677 {
					if b {
						yynn1677++
					}
				}
				r.EncodeMapStart(yynn1677)
				yynn1677 = 0
			}
			if yyr1677 || yy2arr1677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1679 := z.EncBinary()
					_ = yym1679
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1680 := z.EncBinary()
					_ = yym1680
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1677 || yy2arr1677 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1681 := z.DecBinary()
	_ = yym1681
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1682 := r.ContainerType()
		if yyct1682 == codecSelferValueTypeMap1234 {
			yyl1682 := r.ReadMapStart()
			if yyl1682 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1682, d)
			}
		} else if yyct1682 == codecSelferValueTypeArray1234 {
			yyl1682 := r.ReadArrayStart()
			if yyl1682 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1682, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1683Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1683Slc
	var yyhl1683 bool = l >= 0
	for yyj1683 := 0; ; yyj1683++ {
		if yyhl1683 {
			if yyj1683 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1683Slc = r.DecodeBytes(yys1683Slc, true, true)
		yys1683 := string(yys1683Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1683 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1684 := &x.MatchExpressions
				yym1685 := z.DecBinary()
				_ = yym1685
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1684), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1683)
		} // end switch yys1683
	} // end for yyj1683
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1686 int
	var yyb1686 bool
	var yyhl1686 bool = l >= 0
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1687 := &x.MatchExpressions
		yym1688 := z.DecBinary()
		_ = yym1688
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1687), d)
		}
	}
	for {
		yyj1686++
		if yyhl1686 {
			yyb1686 = yyj1686 > l
		} else {
			yyb1686 = r.CheckBreak()
		}
		if yyb1686 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1686-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1689 := z.EncBinary()
		_ = yym1689
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1690 := !z.EncBinary()
			yy2arr1690 := z.EncBasicHandle().StructToArray
			var yyq1690 [3]bool
			_, _, _ = yysep1690, yyq1690, yy2arr1690
			const yyr1690 bool = false
			yyq1690[2] = len(x.Values) != 0
			var yynn1690 int
			if yyr1690 || yy2arr1690 {
				r.EncodeArrayStart(3)
			} else {
				yynn1690 = 2
				for _, b := range yyq1690 {
					if b {
						yynn1690++
					}
				}
				r.EncodeMapStart(yynn1690)
				yynn1690 = 0
			}
			if yyr1690 || yy2arr1690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1692 := z.EncBinary()
				_ = yym1692
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1693 := z.EncBinary()
				_ = yym1693
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1690 || yy2arr1690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1690 || yy2arr1690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1690[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1696 := z.EncBinary()
						_ = yym1696
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1690[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1697 := z.EncBinary()
						_ = yym1697
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1690 || yy2arr1690 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1698 := z.DecBinary()
	_ = yym1698
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1699 := r.ContainerType()
		if yyct1699 == codecSelferValueTypeMap1234 {
			yyl1699 := r.ReadMapStart()
			if yyl1699 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1699, d)
			}
		} else if yyct1699 == codecSelferValueTypeArray1234 {
			yyl1699 := r.ReadArrayStart()
			if yyl1699 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1699, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1700Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1700Slc
	var yyhl1700 bool = l >= 0
	for yyj1700 := 0; ; yyj1700++ {
		if yyhl1700 {
			if yyj1700 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1700Slc = r.DecodeBytes(yys1700Slc, true, true)
		yys1700 := string(yys1700Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1700 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1703 := &x.Values
				yym1704 := z.DecBinary()
				_ = yym1704
				if false {
				} else {
					z.F.DecSliceStringX(yyv1703, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1700)
		} // end switch yys1700
	} // end for yyj1700
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1705 int
	var yyb1705 bool
	var yyhl1705 bool = l >= 0
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1708 := &x.Values
		yym1709 := z.DecBinary()
		_ = yym1709
		if false {
		} else {
			z.F.DecSliceStringX(yyv1708, false, d)
		}
	}
	for {
		yyj1705++
		if yyhl1705 {
			yyb1705 = yyj1705 > l
		} else {
			yyb1705 = r.CheckBreak()
		}
		if yyb1705 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1705-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1710 := z.EncBinary()
	_ = yym1710
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1711 := z.DecBinary()
	_ = yym1711
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1712 := z.EncBinary()
		_ = yym1712
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1713 := !z.EncBinary()
			yy2arr1713 := z.EncBasicHandle().StructToArray
			var yyq1713 [3]bool
			_, _, _ = yysep1713, yyq1713, yy2arr1713
			const yyr1713 bool = false
			yyq1713[0] = x.NodeAffinity != nil
			yyq1713[1] = x.PodAffinity != nil
			yyq1713[2] = x.PodAntiAffinity != nil
			var yynn1713 int
			if yyr1713 || yy2arr1713 {
				r.EncodeArrayStart(3)
			} else {
				yynn1713 = 0
				for _, b := range yyq1713 {
					if b {
						yynn1713++
					}
				}
				r.EncodeMapStart(yynn1713)
				yynn1713 = 0
			}
			if yyr1713 || yy2arr1713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1713[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1713[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1713 || yy2arr1713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1713[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1713[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1713 || yy2arr1713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1713[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1713[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1713 || yy2arr1713 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1717 := z.DecBinary()
	_ = yym1717
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1718 := r.ContainerType()
		if yyct1718 == codecSelferValueTypeMap1234 {
			yyl1718 := r.ReadMapStart()
			if yyl1718 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1718, d)
			}
		} else if yyct1718 == codecSelferValueTypeArray1234 {
			yyl1718 := r.ReadArrayStart()
			if yyl1718 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1718, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1719Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1719Slc
	var yyhl1719 bool = l >= 0
	for yyj1719 := 0; ; yyj1719++ {
		if yyhl1719 {
			if yyj1719 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1719Slc = r.DecodeBytes(yys1719Slc, true, true)
		yys1719 := string(yys1719Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1719 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1719)
		} // end switch yys1719
	} // end for yyj1719
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1723 int
	var yyb1723 bool
	var yyhl1723 bool = l >= 0
	yyj1723++
	if yyhl1723 {
		yyb1723 = yyj1723 > l
	} else {
		yyb1723 = r.CheckBreak()
	}
	if yyb1723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1723++
	if yyhl1723 {
		yyb1723 = yyj1723 > l
	} else {
		yyb1723 = r.CheckBreak()
	}
	if yyb1723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1723++
	if yyhl1723 {
		yyb1723 = yyj1723 > l
	} else {
		yyb1723 = r.CheckBreak()
	}
	if yyb1723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1723++
		if yyhl1723 {
			yyb1723 = yyj1723 > l
		} else {
			yyb1723 = r.CheckBreak()
		}
		if yyb1723 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1723-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1727 := z.EncBinary()
		_ = yym1727
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1728 := !z.EncBinary()
			yy2arr1728 := z.EncBasicHandle().StructToArray
			var yyq1728 [2]bool
			_, _, _ = yysep1728, yyq1728, yy2arr1728
			const yyr1728 bool = false
			yyq1728[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1728[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1728 int
			if yyr1728 || yy2arr1728 {
				r.EncodeArrayStart(2)
			} else {
				yynn1728 = 0
				for _, b := range yyq1728 {
					if b {
						yynn1728++
					}
				}
				r.EncodeMapStart(yynn1728)
				yynn1728 = 0
			}
			if yyr1728 || yy2arr1728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1728[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1730 := z.EncBinary()
						_ = yym1730
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1728[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1731 := z.EncBinary()
						_ = yym1731
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1728 || yy2arr1728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1728[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1733 := z.EncBinary()
						_ = yym1733
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1728[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1734 := z.EncBinary()
						_ = yym1734
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1728 || yy2arr1728 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1735 := z.DecBinary()
	_ = yym1735
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1736 := r.ContainerType()
		if yyct1736 == codecSelferValueTypeMap1234 {
			yyl1736 := r.ReadMapStart()
			if yyl1736 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1736, d)
			}
		} else if yyct1736 == codecSelferValueTypeArray1234 {
			yyl1736 := r.ReadArrayStart()
			if yyl1736 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1736, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1737Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1737Slc
	var yyhl1737 bool = l >= 0
	for yyj1737 := 0; ; yyj1737++ {
		if yyhl1737 {
			if yyj1737 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1737Slc = r.DecodeBytes(yys1737Slc, true, true)
		yys1737 := string(yys1737Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1737 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1738 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1739 := z.DecBinary()
				_ = yym1739
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1738), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1740 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1741 := z.DecBinary()
				_ = yym1741
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1740), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1737)
		} // end switch yys1737
	} // end for yyj1737
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1742 int
	var yyb1742 bool
	var yyhl1742 bool = l >= 0
	yyj1742++
	if yyhl1742 {
		yyb1742 = yyj1742 > l
	} else {
		yyb1742 = r.CheckBreak()
	}
	if yyb1742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1743 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1744 := z.DecBinary()
		_ = yym1744
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1743), d)
		}
	}
	yyj1742++
	if yyhl1742 {
		yyb1742 = yyj1742 > l
	} else {
		yyb1742 = r.CheckBreak()
	}
	if yyb1742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1745 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1746 := z.DecBinary()
		_ = yym1746
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1745), d)
		}
	}
	for {
		yyj1742++
		if yyhl1742 {
			yyb1742 = yyj1742 > l
		} else {
			yyb1742 = r.CheckBreak()
		}
		if yyb1742 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1742-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1747 := z.EncBinary()
		_ = yym1747
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1748 := !z.EncBinary()
			yy2arr1748 := z.EncBasicHandle().StructToArray
			var yyq1748 [2]bool
			_, _, _ = yysep1748, yyq1748, yy2arr1748
			const yyr1748 bool = false
			yyq1748[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1748[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1748 int
			if yyr1748 || yy2arr1748 {
				r.EncodeArrayStart(2)
			} else {
				yynn1748 = 0
				for _, b := range yyq1748 {
					if b {
						yynn1748++
					}
				}
				r.EncodeMapStart(yynn1748)
				yynn1748 = 0
			}
			if yyr1748 || yy2arr1748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1748[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1750 := z.EncBinary()
						_ = yym1750
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1748[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1751 := z.EncBinary()
						_ = yym1751
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1748 || yy2arr1748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1748[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1753 := z.EncBinary()
						_ = yym1753
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1748[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1754 := z.EncBinary()
						_ = yym1754
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1748 || yy2arr1748 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1755 := z.DecBinary()
	_ = yym1755
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1756 := r.ContainerType()
		if yyct1756 == codecSelferValueTypeMap1234 {
			yyl1756 := r.ReadMapStart()
			if yyl1756 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1756, d)
			}
		} else if yyct1756 == codecSelferValueTypeArray1234 {
			yyl1756 := r.ReadArrayStart()
			if yyl1756 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1756, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1757Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1757Slc
	var yyhl1757 bool = l >= 0
	for yyj1757 := 0; ; yyj1757++ {
		if yyhl1757 {
			if yyj1757 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1757Slc = r.DecodeBytes(yys1757Slc, true, true)
		yys1757 := string(yys1757Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1757 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1758 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1759 := z.DecBinary()
				_ = yym1759
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1758), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1760 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1761 := z.DecBinary()
				_ = yym1761
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1760), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1757)
		} // end switch yys1757
	} // end for yyj1757
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1762 int
	var yyb1762 bool
	var yyhl1762 bool = l >= 0
	yyj1762++
	if yyhl1762 {
		yyb1762 = yyj1762 > l
	} else {
		yyb1762 = r.CheckBreak()
	}
	if yyb1762 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1763 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1764 := z.DecBinary()
		_ = yym1764
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1763), d)
		}
	}
	yyj1762++
	if yyhl1762 {
		yyb1762 = yyj1762 > l
	} else {
		yyb1762 = r.CheckBreak()
	}
	if yyb1762 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1765 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1766 := z.DecBinary()
		_ = yym1766
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1765), d)
		}
	}
	for {
		yyj1762++
		if yyhl1762 {
			yyb1762 = yyj1762 > l
		} else {
			yyb1762 = r.CheckBreak()
		}
		if yyb1762 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1762-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1767 := z.EncBinary()
		_ = yym1767
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1768 := !z.EncBinary()
			yy2arr1768 := z.EncBasicHandle().StructToArray
			var yyq1768 [2]bool
			_, _, _ = yysep1768, yyq1768, yy2arr1768
			const yyr1768 bool = false
			var yynn1768 int
			if yyr1768 || yy2arr1768 {
				r.EncodeArrayStart(2)
			} else {
				yynn1768 = 2
				for _, b := range yyq1768 {
					if b {
						yynn1768++
					}
				}
				r.EncodeMapStart(yynn1768)
				yynn1768 = 0
			}
			if yyr1768 || yy2arr1768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1770 := z.EncBinary()
				_ = yym1770
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1771 := z.EncBinary()
				_ = yym1771
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1768 || yy2arr1768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1773 := &x.PodAffinityTerm
				yy1773.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1774 := &x.PodAffinityTerm
				yy1774.CodecEncodeSelf(e)
			}
			if yyr1768 || yy2arr1768 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1775 := z.DecBinary()
	_ = yym1775
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1776 := r.ContainerType()
		if yyct1776 == codecSelferValueTypeMap1234 {
			yyl1776 := r.ReadMapStart()
			if yyl1776 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1776, d)
			}
		} else if yyct1776 == codecSelferValueTypeArray1234 {
			yyl1776 := r.ReadArrayStart()
			if yyl1776 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1776, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1777Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1777Slc
	var yyhl1777 bool = l >= 0
	for yyj1777 := 0; ; yyj1777++ {
		if yyhl1777 {
			if yyj1777 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1777Slc = r.DecodeBytes(yys1777Slc, true, true)
		yys1777 := string(yys1777Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1777 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1779 := &x.PodAffinityTerm
				yyv1779.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1777)
		} // end switch yys1777
	} // end for yyj1777
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1780 int
	var yyb1780 bool
	var yyhl1780 bool = l >= 0
	yyj1780++
	if yyhl1780 {
		yyb1780 = yyj1780 > l
	} else {
		yyb1780 = r.CheckBreak()
	}
	if yyb1780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1780++
	if yyhl1780 {
		yyb1780 = yyj1780 > l
	} else {
		yyb1780 = r.CheckBreak()
	}
	if yyb1780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1782 := &x.PodAffinityTerm
		yyv1782.CodecDecodeSelf(d)
	}
	for {
		yyj1780++
		if yyhl1780 {
			yyb1780 = yyj1780 > l
		} else {
			yyb1780 = r.CheckBreak()
		}
		if yyb1780 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1780-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1783 := z.EncBinary()
		_ = yym1783
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1784 := !z.EncBinary()
			yy2arr1784 := z.EncBasicHandle().StructToArray
			var yyq1784 [3]bool
			_, _, _ = yysep1784, yyq1784, yy2arr1784
			const yyr1784 bool = false
			yyq1784[0] = x.LabelSelector != nil
			yyq1784[2] = x.TopologyKey != ""
			var yynn1784 int
			if yyr1784 || yy2arr1784 {
				r.EncodeArrayStart(3)
			} else {
				yynn1784 = 1
				for _, b := range yyq1784 {
					if b {
						yynn1784++
					}
				}
				r.EncodeMapStart(yynn1784)
				yynn1784 = 0
			}
			if yyr1784 || yy2arr1784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1784[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1786 := z.EncBinary()
						_ = yym1786
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1784[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1787 := z.EncBinary()
						_ = yym1787
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1784 || yy2arr1784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1789 := z.EncBinary()
					_ = yym1789
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1790 := z.EncBinary()
					_ = yym1790
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1784 || yy2arr1784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1784[2] {
					yym1792 := z.EncBinary()
					_ = yym1792
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1784[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1793 := z.EncBinary()
					_ = yym1793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1784 || yy2arr1784 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1794 := z.DecBinary()
	_ = yym1794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1795 := r.ContainerType()
		if yyct1795 == codecSelferValueTypeMap1234 {
			yyl1795 := r.ReadMapStart()
			if yyl1795 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1795, d)
			}
		} else if yyct1795 == codecSelferValueTypeArray1234 {
			yyl1795 := r.ReadArrayStart()
			if yyl1795 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1796Slc
	var yyhl1796 bool = l >= 0
	for yyj1796 := 0; ; yyj1796++ {
		if yyhl1796 {
			if yyj1796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1796Slc = r.DecodeBytes(yys1796Slc, true, true)
		yys1796 := string(yys1796Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1796 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1798 := z.DecBinary()
				_ = yym1798
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1799 := &x.Namespaces
				yym1800 := z.DecBinary()
				_ = yym1800
				if false {
				} else {
					z.F.DecSliceStringX(yyv1799, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1796)
		} // end switch yys1796
	} // end for yyj1796
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1802 int
	var yyb1802 bool
	var yyhl1802 bool = l >= 0
	yyj1802++
	if yyhl1802 {
		yyb1802 = yyj1802 > l
	} else {
		yyb1802 = r.CheckBreak()
	}
	if yyb1802 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1804 := z.DecBinary()
		_ = yym1804
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1802++
	if yyhl1802 {
		yyb1802 = yyj1802 > l
	} else {
		yyb1802 = r.CheckBreak()
	}
	if yyb1802 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1805 := &x.Namespaces
		yym1806 := z.DecBinary()
		_ = yym1806
		if false {
		} else {
			z.F.DecSliceStringX(yyv1805, false, d)
		}
	}
	yyj1802++
	if yyhl1802 {
		yyb1802 = yyj1802 > l
	} else {
		yyb1802 = r.CheckBreak()
	}
	if yyb1802 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1802++
		if yyhl1802 {
			yyb1802 = yyj1802 > l
		} else {
			yyb1802 = r.CheckBreak()
		}
		if yyb1802 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1802-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1808 := z.EncBinary()
		_ = yym1808
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1809 := !z.EncBinary()
			yy2arr1809 := z.EncBasicHandle().StructToArray
			var yyq1809 [2]bool
			_, _, _ = yysep1809, yyq1809, yy2arr1809
			const yyr1809 bool = false
			yyq1809[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1809[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1809 int
			if yyr1809 || yy2arr1809 {
				r.EncodeArrayStart(2)
			} else {
				yynn1809 = 0
				for _, b := range yyq1809 {
					if b {
						yynn1809++
					}
				}
				r.EncodeMapStart(yynn1809)
				yynn1809 = 0
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1809[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1809[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1809[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1812 := z.EncBinary()
						_ = yym1812
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1809[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1813 := z.EncBinary()
						_ = yym1813
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1814 := z.DecBinary()
	_ = yym1814
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1815 := r.ContainerType()
		if yyct1815 == codecSelferValueTypeMap1234 {
			yyl1815 := r.ReadMapStart()
			if yyl1815 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1815, d)
			}
		} else if yyct1815 == codecSelferValueTypeArray1234 {
			yyl1815 := r.ReadArrayStart()
			if yyl1815 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1815, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1816Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1816Slc
	var yyhl1816 bool = l >= 0
	for yyj1816 := 0; ; yyj1816++ {
		if yyhl1816 {
			if yyj1816 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1816Slc = r.DecodeBytes(yys1816Slc, true, true)
		yys1816 := string(yys1816Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1816 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1818 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1819 := z.DecBinary()
				_ = yym1819
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1818), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1816)
		} // end switch yys1816
	} // end for yyj1816
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1820 int
	var yyb1820 bool
	var yyhl1820 bool = l >= 0
	yyj1820++
	if yyhl1820 {
		yyb1820 = yyj1820 > l
	} else {
		yyb1820 = r.CheckBreak()
	}
	if yyb1820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1820++
	if yyhl1820 {
		yyb1820 = yyj1820 > l
	} else {
		yyb1820 = r.CheckBreak()
	}
	if yyb1820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1822 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1823 := z.DecBinary()
		_ = yym1823
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1822), d)
		}
	}
	for {
		yyj1820++
		if yyhl1820 {
			yyb1820 = yyj1820 > l
		} else {
			yyb1820 = r.CheckBreak()
		}
		if yyb1820 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1820-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1824 := z.EncBinary()
		_ = yym1824
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1825 := !z.EncBinary()
			yy2arr1825 := z.EncBasicHandle().StructToArray
			var yyq1825 [2]bool
			_, _, _ = yysep1825, yyq1825, yy2arr1825
			const yyr1825 bool = false
			var yynn1825 int
			if yyr1825 || yy2arr1825 {
				r.EncodeArrayStart(2)
			} else {
				yynn1825 = 2
				for _, b := range yyq1825 {
					if b {
						yynn1825++
					}
				}
				r.EncodeMapStart(yynn1825)
				yynn1825 = 0
			}
			if yyr1825 || yy2arr1825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1827 := z.EncBinary()
				_ = yym1827
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1828 := z.EncBinary()
				_ = yym1828
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1825 || yy2arr1825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1830 := &x.Preference
				yy1830.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1831 := &x.Preference
				yy1831.CodecEncodeSelf(e)
			}
			if yyr1825 || yy2arr1825 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1832 := z.DecBinary()
	_ = yym1832
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1833 := r.ContainerType()
		if yyct1833 == codecSelferValueTypeMap1234 {
			yyl1833 := r.ReadMapStart()
			if yyl1833 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1833, d)
			}
		} else if yyct1833 == codecSelferValueTypeArray1234 {
			yyl1833 := r.ReadArrayStart()
			if yyl1833 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1833, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1834Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1834Slc
	var yyhl1834 bool = l >= 0
	for yyj1834 := 0; ; yyj1834++ {
		if yyhl1834 {
			if yyj1834 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1834Slc = r.DecodeBytes(yys1834Slc, true, true)
		yys1834 := string(yys1834Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1834 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1836 := &x.Preference
				yyv1836.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1834)
		} // end switch yys1834
	} // end for yyj1834
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1837 int
	var yyb1837 bool
	var yyhl1837 bool = l >= 0
	yyj1837++
	if yyhl1837 {
		yyb1837 = yyj1837 > l
	} else {
		yyb1837 = r.CheckBreak()
	}
	if yyb1837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1837++
	if yyhl1837 {
		yyb1837 = yyj1837 > l
	} else {
		yyb1837 = r.CheckBreak()
	}
	if yyb1837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1839 := &x.Preference
		yyv1839.CodecDecodeSelf(d)
	}
	for {
		yyj1837++
		if yyhl1837 {
			yyb1837 = yyj1837 > l
		} else {
			yyb1837 = r.CheckBreak()
		}
		if yyb1837 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1837-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1840 := z.EncBinary()
		_ = yym1840
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1841 := !z.EncBinary()
			yy2arr1841 := z.EncBasicHandle().StructToArray
			var yyq1841 [3]bool
			_, _, _ = yysep1841, yyq1841, yy2arr1841
			const yyr1841 bool = false
			yyq1841[1] = x.Value != ""
			var yynn1841 int
			if yyr1841 || yy2arr1841 {
				r.EncodeArrayStart(3)
			} else {
				yynn1841 = 2
				for _, b := range yyq1841 {
					if b {
						yynn1841++
					}
				}
				r.EncodeMapStart(yynn1841)
				yynn1841 = 0
			}
			if yyr1841 || yy2arr1841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1843 := z.EncBinary()
				_ = yym1843
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1844 := z.EncBinary()
				_ = yym1844
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1841 || yy2arr1841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1841[1] {
					yym1846 := z.EncBinary()
					_ = yym1846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1841[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1847 := z.EncBinary()
					_ = yym1847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1841 || yy2arr1841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1841 || yy2arr1841 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1849 := z.DecBinary()
	_ = yym1849
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1850 := r.ContainerType()
		if yyct1850 == codecSelferValueTypeMap1234 {
			yyl1850 := r.ReadMapStart()
			if yyl1850 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1850, d)
			}
		} else if yyct1850 == codecSelferValueTypeArray1234 {
			yyl1850 := r.ReadArrayStart()
			if yyl1850 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1850, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1851Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1851Slc
	var yyhl1851 bool = l >= 0
	for yyj1851 := 0; ; yyj1851++ {
		if yyhl1851 {
			if yyj1851 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1851Slc = r.DecodeBytes(yys1851Slc, true, true)
		yys1851 := string(yys1851Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1851 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1851)
		} // end switch yys1851
	} // end for yyj1851
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1855 int
	var yyb1855 bool
	var yyhl1855 bool = l >= 0
	yyj1855++
	if yyhl1855 {
		yyb1855 = yyj1855 > l
	} else {
		yyb1855 = r.CheckBreak()
	}
	if yyb1855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1855++
	if yyhl1855 {
		yyb1855 = yyj1855 > l
	} else {
		yyb1855 = r.CheckBreak()
	}
	if yyb1855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1855++
	if yyhl1855 {
		yyb1855 = yyj1855 > l
	} else {
		yyb1855 = r.CheckBreak()
	}
	if yyb1855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1855++
		if yyhl1855 {
			yyb1855 = yyj1855 > l
		} else {
			yyb1855 = r.CheckBreak()
		}
		if yyb1855 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1855-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1859 := z.EncBinary()
	_ = yym1859
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1860 := z.DecBinary()
	_ = yym1860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1861 := z.EncBinary()
		_ = yym1861
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1862 := !z.EncBinary()
			yy2arr1862 := z.EncBasicHandle().StructToArray
			var yyq1862 [4]bool
			_, _, _ = yysep1862, yyq1862, yy2arr1862
			const yyr1862 bool = false
			yyq1862[0] = x.Key != ""
			yyq1862[1] = x.Operator != ""
			yyq1862[2] = x.Value != ""
			yyq1862[3] = x.Effect != ""
			var yynn1862 int
			if yyr1862 || yy2arr1862 {
				r.EncodeArrayStart(4)
			} else {
				yynn1862 = 0
				for _, b := range yyq1862 {
					if b {
						yynn1862++
					}
				}
				r.EncodeMapStart(yynn1862)
				yynn1862 = 0
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[0] {
					yym1864 := z.EncBinary()
					_ = yym1864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1862[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1865 := z.EncBinary()
					_ = yym1865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1862[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[2] {
					yym1868 := z.EncBinary()
					_ = yym1868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1862[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1869 := z.EncBinary()
					_ = yym1869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1862[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1871 := z.DecBinary()
	_ = yym1871
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1872 := r.ContainerType()
		if yyct1872 == codecSelferValueTypeMap1234 {
			yyl1872 := r.ReadMapStart()
			if yyl1872 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1872, d)
			}
		} else if yyct1872 == codecSelferValueTypeArray1234 {
			yyl1872 := r.ReadArrayStart()
			if yyl1872 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1872, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1873Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1873Slc
	var yyhl1873 bool = l >= 0
	for yyj1873 := 0; ; yyj1873++ {
		if yyhl1873 {
			if yyj1873 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1873Slc = r.DecodeBytes(yys1873Slc, true, true)
		yys1873 := string(yys1873Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1873 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1873)
		} // end switch yys1873
	} // end for yyj1873
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1878 int
	var yyb1878 bool
	var yyhl1878 bool = l >= 0
	yyj1878++
	if yyhl1878 {
		yyb1878 = yyj1878 > l
	} else {
		yyb1878 = r.CheckBreak()
	}
	if yyb1878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1878++
	if yyhl1878 {
		yyb1878 = yyj1878 > l
	} else {
		yyb1878 = r.CheckBreak()
	}
	if yyb1878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj1878++
	if yyhl1878 {
		yyb1878 = yyj1878 > l
	} else {
		yyb1878 = r.CheckBreak()
	}
	if yyb1878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1878++
	if yyhl1878 {
		yyb1878 = yyj1878 > l
	} else {
		yyb1878 = r.CheckBreak()
	}
	if yyb1878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1878++
		if yyhl1878 {
			yyb1878 = yyj1878 > l
		} else {
			yyb1878 = r.CheckBreak()
		}
		if yyb1878 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1878-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1883 := z.EncBinary()
	_ = yym1883
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1884 := z.DecBinary()
	_ = yym1884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1885 := z.EncBinary()
		_ = yym1885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1886 := !z.EncBinary()
			yy2arr1886 := z.EncBasicHandle().StructToArray
			var yyq1886 [17]bool
			_, _, _ = yysep1886, yyq1886, yy2arr1886
			const yyr1886 bool = false
			yyq1886[0] = len(x.Volumes) != 0
			yyq1886[2] = x.RestartPolicy != ""
			yyq1886[3] = x.TerminationGracePeriodSeconds != nil
			yyq1886[4] = x.ActiveDeadlineSeconds != nil
			yyq1886[5] = x.DNSPolicy != ""
			yyq1886[6] = len(x.NodeSelector) != 0
			yyq1886[7] = x.ServiceAccountName != ""
			yyq1886[8] = x.DeprecatedServiceAccount != ""
			yyq1886[9] = x.NodeName != ""
			yyq1886[10] = x.HostNetwork != false
			yyq1886[11] = x.HostPID != false
			yyq1886[12] = x.HostIPC != false
			yyq1886[13] = x.SecurityContext != nil
			yyq1886[14] = len(x.ImagePullSecrets) != 0
			yyq1886[15] = x.Hostname != ""
			yyq1886[16] = x.Subdomain != ""
			var yynn1886 int
			if yyr1886 || yy2arr1886 {
				r.EncodeArrayStart(17)
			} else {
				yynn1886 = 1
				for _, b := range yyq1886 {
					if b {
						yynn1886++
					}
				}
				r.EncodeMapStart(yynn1886)
				yynn1886 = 0
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1888 := z.EncBinary()
						_ = yym1888
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1886[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1889 := z.EncBinary()
						_ = yym1889
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1891 := z.EncBinary()
					_ = yym1891
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1892 := z.EncBinary()
					_ = yym1892
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1886[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1895 := *x.TerminationGracePeriodSeconds
						yym1896 := z.EncBinary()
						_ = yym1896
						if false {
						} else {
							r.EncodeInt(int64(yy1895))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1886[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1897 := *x.TerminationGracePeriodSeconds
						yym1898 := z.EncBinary()
						_ = yym1898
						if false {
						} else {
							r.EncodeInt(int64(yy1897))
						}
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1900 := *x.ActiveDeadlineSeconds
						yym1901 := z.EncBinary()
						_ = yym1901
						if false {
						} else {
							r.EncodeInt(int64(yy1900))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1886[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1902 := *x.ActiveDeadlineSeconds
						yym1903 := z.EncBinary()
						_ = yym1903
						if false {
						} else {
							r.EncodeInt(int64(yy1902))
						}
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1886[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1906 := z.EncBinary()
						_ = yym1906
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1886[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1907 := z.EncBinary()
						_ = yym1907
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[7] {
					yym1909 := z.EncBinary()
					_ = yym1909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1886[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1910 := z.EncBinary()
					_ = yym1910
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[8] {
					yym1912 := z.EncBinary()
					_ = yym1912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1886[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1913 := z.EncBinary()
					_ = yym1913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[9] {
					yym1915 := z.EncBinary()
					_ = yym1915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1886[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1916 := z.EncBinary()
					_ = yym1916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[10] {
					yym1918 := z.EncBinary()
					_ = yym1918
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1886[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1919 := z.EncBinary()
					_ = yym1919
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[11] {
					yym1921 := z.EncBinary()
					_ = yym1921
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1886[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1922 := z.EncBinary()
					_ = yym1922
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[12] {
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1886[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1925 := z.EncBinary()
					_ = yym1925
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1886[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1928 := z.EncBinary()
						_ = yym1928
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1886[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1929 := z.EncBinary()
						_ = yym1929
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[15] {
					yym1931 := z.EncBinary()
					_ = yym1931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1886[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1932 := z.EncBinary()
					_ = yym1932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[16] {
					yym1934 := z.EncBinary()
					_ = yym1934
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1886[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1935 := z.EncBinary()
					_ = yym1935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1936 := z.DecBinary()
	_ = yym1936
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1937 := r.ContainerType()
		if yyct1937 == codecSelferValueTypeMap1234 {
			yyl1937 := r.ReadMapStart()
			if yyl1937 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1937, d)
			}
		} else if yyct1937 == codecSelferValueTypeArray1234 {
			yyl1937 := r.ReadArrayStart()
			if yyl1937 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1937, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1938Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1938Slc
	var yyhl1938 bool = l >= 0
	for yyj1938 := 0; ; yyj1938++ {
		if yyhl1938 {
			if yyj1938 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1938Slc = r.DecodeBytes(yys1938Slc, true, true)
		yys1938 := string(yys1938Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1938 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1939 := &x.Volumes
				yym1940 := z.DecBinary()
				_ = yym1940
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1939), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1941 := &x.Containers
				yym1942 := z.DecBinary()
				_ = yym1942
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1941), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1945 := z.DecBinary()
				_ = yym1945
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1947 := z.DecBinary()
				_ = yym1947
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1949 := &x.NodeSelector
				yym1950 := z.DecBinary()
				_ = yym1950
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1949, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1958 := &x.ImagePullSecrets
				yym1959 := z.DecBinary()
				_ = yym1959
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1958), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1938)
		} // end switch yys1938
	} // end for yyj1938
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1962 int
	var yyb1962 bool
	var yyhl1962 bool = l >= 0
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1963 := &x.Volumes
		yym1964 := z.DecBinary()
		_ = yym1964
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1963), d)
		}
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1965 := &x.Containers
		yym1966 := z.DecBinary()
		_ = yym1966
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1965), d)
		}
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1969 := z.DecBinary()
		_ = yym1969
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1971 := z.DecBinary()
		_ = yym1971
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1973 := &x.NodeSelector
		yym1974 := z.DecBinary()
		_ = yym1974
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1973, false, d)
		}
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1982 := &x.ImagePullSecrets
		yym1983 := z.DecBinary()
		_ = yym1983
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1982), d)
		}
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj1962++
		if yyhl1962 {
			yyb1962 = yyj1962 > l
		} else {
			yyb1962 = r.CheckBreak()
		}
		if yyb1962 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1962-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1986 := z.EncBinary()
		_ = yym1986
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1987 := !z.EncBinary()
			yy2arr1987 := z.EncBasicHandle().StructToArray
			var yyq1987 [5]bool
			_, _, _ = yysep1987, yyq1987, yy2arr1987
			const yyr1987 bool = false
			yyq1987[0] = x.SELinuxOptions != nil
			yyq1987[1] = x.RunAsUser != nil
			yyq1987[2] = x.RunAsNonRoot != nil
			yyq1987[3] = len(x.SupplementalGroups) != 0
			yyq1987[4] = x.FSGroup != nil
			var yynn1987 int
			if yyr1987 || yy2arr1987 {
				r.EncodeArrayStart(5)
			} else {
				yynn1987 = 0
				for _, b := range yyq1987 {
					if b {
						yynn1987++
					}
				}
				r.EncodeMapStart(yynn1987)
				yynn1987 = 0
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1987[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1987[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1987[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1990 := *x.RunAsUser
						yym1991 := z.EncBinary()
						_ = yym1991
						if false {
						} else {
							r.EncodeInt(int64(yy1990))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1987[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1992 := *x.RunAsUser
						yym1993 := z.EncBinary()
						_ = yym1993
						if false {
						} else {
							r.EncodeInt(int64(yy1992))
						}
					}
				}
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1987[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1995 := *x.RunAsNonRoot
						yym1996 := z.EncBinary()
						_ = yym1996
						if false {
						} else {
							r.EncodeBool(bool(yy1995))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1987[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1997 := *x.RunAsNonRoot
						yym1998 := z.EncBinary()
						_ = yym1998
						if false {
						} else {
							r.EncodeBool(bool(yy1997))
						}
					}
				}
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1987[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2000 := z.EncBinary()
						_ = yym2000
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1987[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2001 := z.EncBinary()
						_ = yym2001
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1987[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2003 := *x.FSGroup
						yym2004 := z.EncBinary()
						_ = yym2004
						if false {
						} else {
							r.EncodeInt(int64(yy2003))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1987[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2005 := *x.FSGroup
						yym2006 := z.EncBinary()
						_ = yym2006
						if false {
						} else {
							r.EncodeInt(int64(yy2005))
						}
					}
				}
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2007 := z.DecBinary()
	_ = yym2007
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2008 := r.ContainerType()
		if yyct2008 == codecSelferValueTypeMap1234 {
			yyl2008 := r.ReadMapStart()
			if yyl2008 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2008, d)
			}
		} else if yyct2008 == codecSelferValueTypeArray1234 {
			yyl2008 := r.ReadArrayStart()
			if yyl2008 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2008, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2009Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2009Slc
	var yyhl2009 bool = l >= 0
	for yyj2009 := 0; ; yyj2009++ {
		if yyhl2009 {
			if yyj2009 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2009Slc = r.DecodeBytes(yys2009Slc, true, true)
		yys2009 := string(yys2009Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2009 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2012 := z.DecBinary()
				_ = yym2012
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2014 := z.DecBinary()
				_ = yym2014
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2015 := &x.SupplementalGroups
				yym2016 := z.DecBinary()
				_ = yym2016
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2015, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2018 := z.DecBinary()
				_ = yym2018
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2009)
		} // end switch yys2009
	} // end for yyj2009
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2019 int
	var yyb2019 bool
	var yyhl2019 bool = l >= 0
	yyj2019++
	if yyhl2019 {
		yyb2019 = yyj2019 > l
	} else {
		yyb2019 = r.CheckBreak()
	}
	if yyb2019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2019++
	if yyhl2019 {
		yyb2019 = yyj2019 > l
	} else {
		yyb2019 = r.CheckBreak()
	}
	if yyb2019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2022 := z.DecBinary()
		_ = yym2022
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2019++
	if yyhl2019 {
		yyb2019 = yyj2019 > l
	} else {
		yyb2019 = r.CheckBreak()
	}
	if yyb2019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2024 := z.DecBinary()
		_ = yym2024
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2019++
	if yyhl2019 {
		yyb2019 = yyj2019 > l
	} else {
		yyb2019 = r.CheckBreak()
	}
	if yyb2019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2025 := &x.SupplementalGroups
		yym2026 := z.DecBinary()
		_ = yym2026
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2025, false, d)
		}
	}
	yyj2019++
	if yyhl2019 {
		yyb2019 = yyj2019 > l
	} else {
		yyb2019 = r.CheckBreak()
	}
	if yyb2019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2028 := z.DecBinary()
		_ = yym2028
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2019++
		if yyhl2019 {
			yyb2019 = yyj2019 > l
		} else {
			yyb2019 = r.CheckBreak()
		}
		if yyb2019 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2019-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2029 := z.EncBinary()
		_ = yym2029
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2030 := !z.EncBinary()
			yy2arr2030 := z.EncBasicHandle().StructToArray
			var yyq2030 [8]bool
			_, _, _ = yysep2030, yyq2030, yy2arr2030
			const yyr2030 bool = false
			yyq2030[0] = x.Phase != ""
			yyq2030[1] = len(x.Conditions) != 0
			yyq2030[2] = x.Message != ""
			yyq2030[3] = x.Reason != ""
			yyq2030[4] = x.HostIP != ""
			yyq2030[5] = x.PodIP != ""
			yyq2030[6] = x.StartTime != nil
			yyq2030[7] = len(x.ContainerStatuses) != 0
			var yynn2030 int
			if yyr2030 || yy2arr2030 {
				r.EncodeArrayStart(8)
			} else {
				yynn2030 = 0
				for _, b := range yyq2030 {
					if b {
						yynn2030++
					}
				}
				r.EncodeMapStart(yynn2030)
				yynn2030 = 0
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2030[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2033 := z.EncBinary()
						_ = yym2033
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2030[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2034 := z.EncBinary()
						_ = yym2034
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[2] {
					yym2036 := z.EncBinary()
					_ = yym2036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2030[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2037 := z.EncBinary()
					_ = yym2037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[3] {
					yym2039 := z.EncBinary()
					_ = yym2039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2030[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2040 := z.EncBinary()
					_ = yym2040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[4] {
					yym2042 := z.EncBinary()
					_ = yym2042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2030[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2043 := z.EncBinary()
					_ = yym2043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[5] {
					yym2045 := z.EncBinary()
					_ = yym2045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2030[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2046 := z.EncBinary()
					_ = yym2046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2048 := z.EncBinary()
						_ = yym2048
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2048 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2048 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2030[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2049 := z.EncBinary()
						_ = yym2049
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2049 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2049 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2051 := z.EncBinary()
						_ = yym2051
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2030[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2052 := z.EncBinary()
						_ = yym2052
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2053 := z.DecBinary()
	_ = yym2053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2054 := r.ContainerType()
		if yyct2054 == codecSelferValueTypeMap1234 {
			yyl2054 := r.ReadMapStart()
			if yyl2054 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2054, d)
			}
		} else if yyct2054 == codecSelferValueTypeArray1234 {
			yyl2054 := r.ReadArrayStart()
			if yyl2054 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2054, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2055Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2055Slc
	var yyhl2055 bool = l >= 0
	for yyj2055 := 0; ; yyj2055++ {
		if yyhl2055 {
			if yyj2055 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2055Slc = r.DecodeBytes(yys2055Slc, true, true)
		yys2055 := string(yys2055Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2055 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2057 := &x.Conditions
				yym2058 := z.DecBinary()
				_ = yym2058
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2057), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2064 := z.DecBinary()
				_ = yym2064
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2064 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2064 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2065 := &x.ContainerStatuses
				yym2066 := z.DecBinary()
				_ = yym2066
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2065), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2055)
		} // end switch yys2055
	} // end for yyj2055
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2067 int
	var yyb2067 bool
	var yyhl2067 bool = l >= 0
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2069 := &x.Conditions
		yym2070 := z.DecBinary()
		_ = yym2070
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2069), d)
		}
	}
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2076 := z.DecBinary()
		_ = yym2076
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2076 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2076 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2077 := &x.ContainerStatuses
		yym2078 := z.DecBinary()
		_ = yym2078
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2077), d)
		}
	}
	for {
		yyj2067++
		if yyhl2067 {
			yyb2067 = yyj2067 > l
		} else {
			yyb2067 = r.CheckBreak()
		}
		if yyb2067 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2067-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2079 := z.EncBinary()
		_ = yym2079
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2080 := !z.EncBinary()
			yy2arr2080 := z.EncBasicHandle().StructToArray
			var yyq2080 [4]bool
			_, _, _ = yysep2080, yyq2080, yy2arr2080
			const yyr2080 bool = false
			yyq2080[0] = x.Kind != ""
			yyq2080[1] = x.APIVersion != ""
			yyq2080[2] = true
			yyq2080[3] = true
			var yynn2080 int
			if yyr2080 || yy2arr2080 {
				r.EncodeArrayStart(4)
			} else {
				yynn2080 = 0
				for _, b := range yyq2080 {
					if b {
						yynn2080++
					}
				}
				r.EncodeMapStart(yynn2080)
				yynn2080 = 0
			}
			if yyr2080 || yy2arr2080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2080[0] {
					yym2082 := z.EncBinary()
					_ = yym2082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2080[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2083 := z.EncBinary()
					_ = yym2083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2080 || yy2arr2080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2080[1] {
					yym2085 := z.EncBinary()
					_ = yym2085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2080[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2086 := z.EncBinary()
					_ = yym2086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2080 || yy2arr2080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2080[2] {
					yy2088 := &x.ObjectMeta
					yy2088.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2080[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2089 := &x.ObjectMeta
					yy2089.CodecEncodeSelf(e)
				}
			}
			if yyr2080 || yy2arr2080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2080[3] {
					yy2091 := &x.Status
					yy2091.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2080[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2092 := &x.Status
					yy2092.CodecEncodeSelf(e)
				}
			}
			if yyr2080 || yy2arr2080 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2093 := z.DecBinary()
	_ = yym2093
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2094 := r.ContainerType()
		if yyct2094 == codecSelferValueTypeMap1234 {
			yyl2094 := r.ReadMapStart()
			if yyl2094 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2094, d)
			}
		} else if yyct2094 == codecSelferValueTypeArray1234 {
			yyl2094 := r.ReadArrayStart()
			if yyl2094 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2094, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2095Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2095Slc
	var yyhl2095 bool = l >= 0
	for yyj2095 := 0; ; yyj2095++ {
		if yyhl2095 {
			if yyj2095 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2095Slc = r.DecodeBytes(yys2095Slc, true, true)
		yys2095 := string(yys2095Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2095 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2098 := &x.ObjectMeta
				yyv2098.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2099 := &x.Status
				yyv2099.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2095)
		} // end switch yys2095
	} // end for yyj2095
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2100 int
	var yyb2100 bool
	var yyhl2100 bool = l >= 0
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2103 := &x.ObjectMeta
		yyv2103.CodecDecodeSelf(d)
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2104 := &x.Status
		yyv2104.CodecDecodeSelf(d)
	}
	for {
		yyj2100++
		if yyhl2100 {
			yyb2100 = yyj2100 > l
		} else {
			yyb2100 = r.CheckBreak()
		}
		if yyb2100 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2100-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2105 := z.EncBinary()
		_ = yym2105
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2106 := !z.EncBinary()
			yy2arr2106 := z.EncBasicHandle().StructToArray
			var yyq2106 [5]bool
			_, _, _ = yysep2106, yyq2106, yy2arr2106
			const yyr2106 bool = false
			yyq2106[0] = x.Kind != ""
			yyq2106[1] = x.APIVersion != ""
			yyq2106[2] = true
			yyq2106[3] = true
			yyq2106[4] = true
			var yynn2106 int
			if yyr2106 || yy2arr2106 {
				r.EncodeArrayStart(5)
			} else {
				yynn2106 = 0
				for _, b := range yyq2106 {
					if b {
						yynn2106++
					}
				}
				r.EncodeMapStart(yynn2106)
				yynn2106 = 0
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2106[0] {
					yym2108 := z.EncBinary()
					_ = yym2108
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2106[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2109 := z.EncBinary()
					_ = yym2109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2106[1] {
					yym2111 := z.EncBinary()
					_ = yym2111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2106[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2112 := z.EncBinary()
					_ = yym2112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2106[2] {
					yy2114 := &x.ObjectMeta
					yy2114.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2106[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2115 := &x.ObjectMeta
					yy2115.CodecEncodeSelf(e)
				}
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2106[3] {
					yy2117 := &x.Spec
					yy2117.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2106[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2118 := &x.Spec
					yy2118.CodecEncodeSelf(e)
				}
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2106[4] {
					yy2120 := &x.Status
					yy2120.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2106[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2121 := &x.Status
					yy2121.CodecEncodeSelf(e)
				}
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2122 := z.DecBinary()
	_ = yym2122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2123 := r.ContainerType()
		if yyct2123 == codecSelferValueTypeMap1234 {
			yyl2123 := r.ReadMapStart()
			if yyl2123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2123, d)
			}
		} else if yyct2123 == codecSelferValueTypeArray1234 {
			yyl2123 := r.ReadArrayStart()
			if yyl2123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2124Slc
	var yyhl2124 bool = l >= 0
	for yyj2124 := 0; ; yyj2124++ {
		if yyhl2124 {
			if yyj2124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2124Slc = r.DecodeBytes(yys2124Slc, true, true)
		yys2124 := string(yys2124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2124 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2127 := &x.ObjectMeta
				yyv2127.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2128 := &x.Spec
				yyv2128.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2129 := &x.Status
				yyv2129.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2124)
		} // end switch yys2124
	} // end for yyj2124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2130 int
	var yyb2130 bool
	var yyhl2130 bool = l >= 0
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2133 := &x.ObjectMeta
		yyv2133.CodecDecodeSelf(d)
	}
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2134 := &x.Spec
		yyv2134.CodecDecodeSelf(d)
	}
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2135 := &x.Status
		yyv2135.CodecDecodeSelf(d)
	}
	for {
		yyj2130++
		if yyhl2130 {
			yyb2130 = yyj2130 > l
		} else {
			yyb2130 = r.CheckBreak()
		}
		if yyb2130 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2130-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2136 := z.EncBinary()
		_ = yym2136
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2137 := !z.EncBinary()
			yy2arr2137 := z.EncBasicHandle().StructToArray
			var yyq2137 [4]bool
			_, _, _ = yysep2137, yyq2137, yy2arr2137
			const yyr2137 bool = false
			yyq2137[0] = x.Kind != ""
			yyq2137[1] = x.APIVersion != ""
			yyq2137[2] = true
			var yynn2137 int
			if yyr2137 || yy2arr2137 {
				r.EncodeArrayStart(4)
			} else {
				yynn2137 = 1
				for _, b := range yyq2137 {
					if b {
						yynn2137++
					}
				}
				r.EncodeMapStart(yynn2137)
				yynn2137 = 0
			}
			if yyr2137 || yy2arr2137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2137[0] {
					yym2139 := z.EncBinary()
					_ = yym2139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2137[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2140 := z.EncBinary()
					_ = yym2140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2137 || yy2arr2137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2137[1] {
					yym2142 := z.EncBinary()
					_ = yym2142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2137[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2143 := z.EncBinary()
					_ = yym2143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2137 || yy2arr2137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2137[2] {
					yy2145 := &x.ListMeta
					yym2146 := z.EncBinary()
					_ = yym2146
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2145) {
					} else {
						z.EncFallback(yy2145)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2137[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2147 := &x.ListMeta
					yym2148 := z.EncBinary()
					_ = yym2148
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2147) {
					} else {
						z.EncFallback(yy2147)
					}
				}
			}
			if yyr2137 || yy2arr2137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2150 := z.EncBinary()
					_ = yym2150
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2151 := z.EncBinary()
					_ = yym2151
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2137 || yy2arr2137 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2152 := z.DecBinary()
	_ = yym2152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2153 := r.ContainerType()
		if yyct2153 == codecSelferValueTypeMap1234 {
			yyl2153 := r.ReadMapStart()
			if yyl2153 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2153, d)
			}
		} else if yyct2153 == codecSelferValueTypeArray1234 {
			yyl2153 := r.ReadArrayStart()
			if yyl2153 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2153, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2154Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2154Slc
	var yyhl2154 bool = l >= 0
	for yyj2154 := 0; ; yyj2154++ {
		if yyhl2154 {
			if yyj2154 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2154Slc = r.DecodeBytes(yys2154Slc, true, true)
		yys2154 := string(yys2154Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2154 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2157 := &x.ListMeta
				yym2158 := z.DecBinary()
				_ = yym2158
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2157) {
				} else {
					z.DecFallback(yyv2157, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2159 := &x.Items
				yym2160 := z.DecBinary()
				_ = yym2160
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2159), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2154)
		} // end switch yys2154
	} // end for yyj2154
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2161 int
	var yyb2161 bool
	var yyhl2161 bool = l >= 0
	yyj2161++
	if yyhl2161 {
		yyb2161 = yyj2161 > l
	} else {
		yyb2161 = r.CheckBreak()
	}
	if yyb2161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2161++
	if yyhl2161 {
		yyb2161 = yyj2161 > l
	} else {
		yyb2161 = r.CheckBreak()
	}
	if yyb2161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2161++
	if yyhl2161 {
		yyb2161 = yyj2161 > l
	} else {
		yyb2161 = r.CheckBreak()
	}
	if yyb2161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2164 := &x.ListMeta
		yym2165 := z.DecBinary()
		_ = yym2165
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2164) {
		} else {
			z.DecFallback(yyv2164, false)
		}
	}
	yyj2161++
	if yyhl2161 {
		yyb2161 = yyj2161 > l
	} else {
		yyb2161 = r.CheckBreak()
	}
	if yyb2161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2166 := &x.Items
		yym2167 := z.DecBinary()
		_ = yym2167
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2166), d)
		}
	}
	for {
		yyj2161++
		if yyhl2161 {
			yyb2161 = yyj2161 > l
		} else {
			yyb2161 = r.CheckBreak()
		}
		if yyb2161 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2161-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2168 := z.EncBinary()
		_ = yym2168
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2169 := !z.EncBinary()
			yy2arr2169 := z.EncBasicHandle().StructToArray
			var yyq2169 [2]bool
			_, _, _ = yysep2169, yyq2169, yy2arr2169
			const yyr2169 bool = false
			yyq2169[0] = true
			yyq2169[1] = true
			var yynn2169 int
			if yyr2169 || yy2arr2169 {
				r.EncodeArrayStart(2)
			} else {
				yynn2169 = 0
				for _, b := range yyq2169 {
					if b {
						yynn2169++
					}
				}
				r.EncodeMapStart(yynn2169)
				yynn2169 = 0
			}
			if yyr2169 || yy2arr2169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2169[0] {
					yy2171 := &x.ObjectMeta
					yy2171.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2169[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2172 := &x.ObjectMeta
					yy2172.CodecEncodeSelf(e)
				}
			}
			if yyr2169 || yy2arr2169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2169[1] {
					yy2174 := &x.Spec
					yy2174.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2169[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2175 := &x.Spec
					yy2175.CodecEncodeSelf(e)
				}
			}
			if yyr2169 || yy2arr2169 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2176 := z.DecBinary()
	_ = yym2176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2177 := r.ContainerType()
		if yyct2177 == codecSelferValueTypeMap1234 {
			yyl2177 := r.ReadMapStart()
			if yyl2177 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2177, d)
			}
		} else if yyct2177 == codecSelferValueTypeArray1234 {
			yyl2177 := r.ReadArrayStart()
			if yyl2177 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2178Slc
	var yyhl2178 bool = l >= 0
	for yyj2178 := 0; ; yyj2178++ {
		if yyhl2178 {
			if yyj2178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2178Slc = r.DecodeBytes(yys2178Slc, true, true)
		yys2178 := string(yys2178Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2178 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2179 := &x.ObjectMeta
				yyv2179.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2180 := &x.Spec
				yyv2180.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2178)
		} // end switch yys2178
	} // end for yyj2178
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2181 int
	var yyb2181 bool
	var yyhl2181 bool = l >= 0
	yyj2181++
	if yyhl2181 {
		yyb2181 = yyj2181 > l
	} else {
		yyb2181 = r.CheckBreak()
	}
	if yyb2181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2182 := &x.ObjectMeta
		yyv2182.CodecDecodeSelf(d)
	}
	yyj2181++
	if yyhl2181 {
		yyb2181 = yyj2181 > l
	} else {
		yyb2181 = r.CheckBreak()
	}
	if yyb2181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2183 := &x.Spec
		yyv2183.CodecDecodeSelf(d)
	}
	for {
		yyj2181++
		if yyhl2181 {
			yyb2181 = yyj2181 > l
		} else {
			yyb2181 = r.CheckBreak()
		}
		if yyb2181 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2181-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2184 := z.EncBinary()
		_ = yym2184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2185 := !z.EncBinary()
			yy2arr2185 := z.EncBasicHandle().StructToArray
			var yyq2185 [4]bool
			_, _, _ = yysep2185, yyq2185, yy2arr2185
			const yyr2185 bool = false
			yyq2185[0] = x.Kind != ""
			yyq2185[1] = x.APIVersion != ""
			yyq2185[2] = true
			yyq2185[3] = true
			var yynn2185 int
			if yyr2185 || yy2arr2185 {
				r.EncodeArrayStart(4)
			} else {
				yynn2185 = 0
				for _, b := range yyq2185 {
					if b {
						yynn2185++
					}
				}
				r.EncodeMapStart(yynn2185)
				yynn2185 = 0
			}
			if yyr2185 || yy2arr2185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2185[0] {
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2185[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2188 := z.EncBinary()
					_ = yym2188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2185 || yy2arr2185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2185[1] {
					yym2190 := z.EncBinary()
					_ = yym2190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2185[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2191 := z.EncBinary()
					_ = yym2191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2185 || yy2arr2185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2185[2] {
					yy2193 := &x.ObjectMeta
					yy2193.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2185[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2194 := &x.ObjectMeta
					yy2194.CodecEncodeSelf(e)
				}
			}
			if yyr2185 || yy2arr2185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2185[3] {
					yy2196 := &x.Template
					yy2196.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2185[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2197 := &x.Template
					yy2197.CodecEncodeSelf(e)
				}
			}
			if yyr2185 || yy2arr2185 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2198 := z.DecBinary()
	_ = yym2198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2199 := r.ContainerType()
		if yyct2199 == codecSelferValueTypeMap1234 {
			yyl2199 := r.ReadMapStart()
			if yyl2199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2199, d)
			}
		} else if yyct2199 == codecSelferValueTypeArray1234 {
			yyl2199 := r.ReadArrayStart()
			if yyl2199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2200Slc
	var yyhl2200 bool = l >= 0
	for yyj2200 := 0; ; yyj2200++ {
		if yyhl2200 {
			if yyj2200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2200Slc = r.DecodeBytes(yys2200Slc, true, true)
		yys2200 := string(yys2200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2200 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2203 := &x.ObjectMeta
				yyv2203.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2204 := &x.Template
				yyv2204.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2200)
		} // end switch yys2200
	} // end for yyj2200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2205 int
	var yyb2205 bool
	var yyhl2205 bool = l >= 0
	yyj2205++
	if yyhl2205 {
		yyb2205 = yyj2205 > l
	} else {
		yyb2205 = r.CheckBreak()
	}
	if yyb2205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2205++
	if yyhl2205 {
		yyb2205 = yyj2205 > l
	} else {
		yyb2205 = r.CheckBreak()
	}
	if yyb2205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2205++
	if yyhl2205 {
		yyb2205 = yyj2205 > l
	} else {
		yyb2205 = r.CheckBreak()
	}
	if yyb2205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2208 := &x.ObjectMeta
		yyv2208.CodecDecodeSelf(d)
	}
	yyj2205++
	if yyhl2205 {
		yyb2205 = yyj2205 > l
	} else {
		yyb2205 = r.CheckBreak()
	}
	if yyb2205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2209 := &x.Template
		yyv2209.CodecDecodeSelf(d)
	}
	for {
		yyj2205++
		if yyhl2205 {
			yyb2205 = yyj2205 > l
		} else {
			yyb2205 = r.CheckBreak()
		}
		if yyb2205 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2205-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2210 := z.EncBinary()
		_ = yym2210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2211 := !z.EncBinary()
			yy2arr2211 := z.EncBasicHandle().StructToArray
			var yyq2211 [4]bool
			_, _, _ = yysep2211, yyq2211, yy2arr2211
			const yyr2211 bool = false
			yyq2211[0] = x.Kind != ""
			yyq2211[1] = x.APIVersion != ""
			yyq2211[2] = true
			var yynn2211 int
			if yyr2211 || yy2arr2211 {
				r.EncodeArrayStart(4)
			} else {
				yynn2211 = 1
				for _, b := range yyq2211 {
					if b {
						yynn2211++
					}
				}
				r.EncodeMapStart(yynn2211)
				yynn2211 = 0
			}
			if yyr2211 || yy2arr2211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2211[0] {
					yym2213 := z.EncBinary()
					_ = yym2213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2211[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2214 := z.EncBinary()
					_ = yym2214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2211 || yy2arr2211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2211[1] {
					yym2216 := z.EncBinary()
					_ = yym2216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2211[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2217 := z.EncBinary()
					_ = yym2217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2211 || yy2arr2211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2211[2] {
					yy2219 := &x.ListMeta
					yym2220 := z.EncBinary()
					_ = yym2220
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2219) {
					} else {
						z.EncFallback(yy2219)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2211[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2221 := &x.ListMeta
					yym2222 := z.EncBinary()
					_ = yym2222
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2221) {
					} else {
						z.EncFallback(yy2221)
					}
				}
			}
			if yyr2211 || yy2arr2211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2224 := z.EncBinary()
					_ = yym2224
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2225 := z.EncBinary()
					_ = yym2225
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2211 || yy2arr2211 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2226 := z.DecBinary()
	_ = yym2226
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2227 := r.ContainerType()
		if yyct2227 == codecSelferValueTypeMap1234 {
			yyl2227 := r.ReadMapStart()
			if yyl2227 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2227, d)
			}
		} else if yyct2227 == codecSelferValueTypeArray1234 {
			yyl2227 := r.ReadArrayStart()
			if yyl2227 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2227, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2228Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2228Slc
	var yyhl2228 bool = l >= 0
	for yyj2228 := 0; ; yyj2228++ {
		if yyhl2228 {
			if yyj2228 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2228Slc = r.DecodeBytes(yys2228Slc, true, true)
		yys2228 := string(yys2228Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2228 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2231 := &x.ListMeta
				yym2232 := z.DecBinary()
				_ = yym2232
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2231) {
				} else {
					z.DecFallback(yyv2231, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2233 := &x.Items
				yym2234 := z.DecBinary()
				_ = yym2234
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2233), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2228)
		} // end switch yys2228
	} // end for yyj2228
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2235 int
	var yyb2235 bool
	var yyhl2235 bool = l >= 0
	yyj2235++
	if yyhl2235 {
		yyb2235 = yyj2235 > l
	} else {
		yyb2235 = r.CheckBreak()
	}
	if yyb2235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2235++
	if yyhl2235 {
		yyb2235 = yyj2235 > l
	} else {
		yyb2235 = r.CheckBreak()
	}
	if yyb2235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2235++
	if yyhl2235 {
		yyb2235 = yyj2235 > l
	} else {
		yyb2235 = r.CheckBreak()
	}
	if yyb2235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2238 := &x.ListMeta
		yym2239 := z.DecBinary()
		_ = yym2239
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2238) {
		} else {
			z.DecFallback(yyv2238, false)
		}
	}
	yyj2235++
	if yyhl2235 {
		yyb2235 = yyj2235 > l
	} else {
		yyb2235 = r.CheckBreak()
	}
	if yyb2235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2240 := &x.Items
		yym2241 := z.DecBinary()
		_ = yym2241
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2240), d)
		}
	}
	for {
		yyj2235++
		if yyhl2235 {
			yyb2235 = yyj2235 > l
		} else {
			yyb2235 = r.CheckBreak()
		}
		if yyb2235 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2235-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2242 := z.EncBinary()
		_ = yym2242
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2243 := !z.EncBinary()
			yy2arr2243 := z.EncBasicHandle().StructToArray
			var yyq2243 [3]bool
			_, _, _ = yysep2243, yyq2243, yy2arr2243
			const yyr2243 bool = false
			yyq2243[0] = x.Replicas != nil
			yyq2243[1] = len(x.Selector) != 0
			yyq2243[2] = x.Template != nil
			var yynn2243 int
			if yyr2243 || yy2arr2243 {
				r.EncodeArrayStart(3)
			} else {
				yynn2243 = 0
				for _, b := range yyq2243 {
					if b {
						yynn2243++
					}
				}
				r.EncodeMapStart(yynn2243)
				yynn2243 = 0
			}
			if yyr2243 || yy2arr2243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2243[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2245 := *x.Replicas
						yym2246 := z.EncBinary()
						_ = yym2246
						if false {
						} else {
							r.EncodeInt(int64(yy2245))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2243[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2247 := *x.Replicas
						yym2248 := z.EncBinary()
						_ = yym2248
						if false {
						} else {
							r.EncodeInt(int64(yy2247))
						}
					}
				}
			}
			if yyr2243 || yy2arr2243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2243[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2250 := z.EncBinary()
						_ = yym2250
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2243[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2251 := z.EncBinary()
						_ = yym2251
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2243 || yy2arr2243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2243[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2243[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2243 || yy2arr2243 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2253 := z.DecBinary()
	_ = yym2253
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2254 := r.ContainerType()
		if yyct2254 == codecSelferValueTypeMap1234 {
			yyl2254 := r.ReadMapStart()
			if yyl2254 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2254, d)
			}
		} else if yyct2254 == codecSelferValueTypeArray1234 {
			yyl2254 := r.ReadArrayStart()
			if yyl2254 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2254, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2255Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2255Slc
	var yyhl2255 bool = l >= 0
	for yyj2255 := 0; ; yyj2255++ {
		if yyhl2255 {
			if yyj2255 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2255Slc = r.DecodeBytes(yys2255Slc, true, true)
		yys2255 := string(yys2255Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2255 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2257 := z.DecBinary()
				_ = yym2257
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2258 := &x.Selector
				yym2259 := z.DecBinary()
				_ = yym2259
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2258, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2255)
		} // end switch yys2255
	} // end for yyj2255
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2261 int
	var yyb2261 bool
	var yyhl2261 bool = l >= 0
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2263 := z.DecBinary()
		_ = yym2263
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2264 := &x.Selector
		yym2265 := z.DecBinary()
		_ = yym2265
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2264, false, d)
		}
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2261++
		if yyhl2261 {
			yyb2261 = yyj2261 > l
		} else {
			yyb2261 = r.CheckBreak()
		}
		if yyb2261 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2261-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2267 := z.EncBinary()
		_ = yym2267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2268 := !z.EncBinary()
			yy2arr2268 := z.EncBasicHandle().StructToArray
			var yyq2268 [3]bool
			_, _, _ = yysep2268, yyq2268, yy2arr2268
			const yyr2268 bool = false
			yyq2268[1] = x.FullyLabeledReplicas != 0
			yyq2268[2] = x.ObservedGeneration != 0
			var yynn2268 int
			if yyr2268 || yy2arr2268 {
				r.EncodeArrayStart(3)
			} else {
				yynn2268 = 1
				for _, b := range yyq2268 {
					if b {
						yynn2268++
					}
				}
				r.EncodeMapStart(yynn2268)
				yynn2268 = 0
			}
			if yyr2268 || yy2arr2268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2270 := z.EncBinary()
				_ = yym2270
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2271 := z.EncBinary()
				_ = yym2271
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2268 || yy2arr2268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2268[1] {
					yym2273 := z.EncBinary()
					_ = yym2273
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2268[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2274 := z.EncBinary()
					_ = yym2274
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2268 || yy2arr2268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2268[2] {
					yym2276 := z.EncBinary()
					_ = yym2276
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2268[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2277 := z.EncBinary()
					_ = yym2277
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2268 || yy2arr2268 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2278 := z.DecBinary()
	_ = yym2278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2279 := r.ContainerType()
		if yyct2279 == codecSelferValueTypeMap1234 {
			yyl2279 := r.ReadMapStart()
			if yyl2279 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2279, d)
			}
		} else if yyct2279 == codecSelferValueTypeArray1234 {
			yyl2279 := r.ReadArrayStart()
			if yyl2279 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2279, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2280Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2280Slc
	var yyhl2280 bool = l >= 0
	for yyj2280 := 0; ; yyj2280++ {
		if yyhl2280 {
			if yyj2280 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2280Slc = r.DecodeBytes(yys2280Slc, true, true)
		yys2280 := string(yys2280Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2280 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2280)
		} // end switch yys2280
	} // end for yyj2280
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2284 int
	var yyb2284 bool
	var yyhl2284 bool = l >= 0
	yyj2284++
	if yyhl2284 {
		yyb2284 = yyj2284 > l
	} else {
		yyb2284 = r.CheckBreak()
	}
	if yyb2284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2284++
	if yyhl2284 {
		yyb2284 = yyj2284 > l
	} else {
		yyb2284 = r.CheckBreak()
	}
	if yyb2284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2284++
	if yyhl2284 {
		yyb2284 = yyj2284 > l
	} else {
		yyb2284 = r.CheckBreak()
	}
	if yyb2284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2284++
		if yyhl2284 {
			yyb2284 = yyj2284 > l
		} else {
			yyb2284 = r.CheckBreak()
		}
		if yyb2284 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2284-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2288 := z.EncBinary()
		_ = yym2288
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2289 := !z.EncBinary()
			yy2arr2289 := z.EncBasicHandle().StructToArray
			var yyq2289 [5]bool
			_, _, _ = yysep2289, yyq2289, yy2arr2289
			const yyr2289 bool = false
			yyq2289[0] = x.Kind != ""
			yyq2289[1] = x.APIVersion != ""
			yyq2289[2] = true
			yyq2289[3] = true
			yyq2289[4] = true
			var yynn2289 int
			if yyr2289 || yy2arr2289 {
				r.EncodeArrayStart(5)
			} else {
				yynn2289 = 0
				for _, b := range yyq2289 {
					if b {
						yynn2289++
					}
				}
				r.EncodeMapStart(yynn2289)
				yynn2289 = 0
			}
			if yyr2289 || yy2arr2289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2289[0] {
					yym2291 := z.EncBinary()
					_ = yym2291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2289[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2292 := z.EncBinary()
					_ = yym2292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2289 || yy2arr2289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2289[1] {
					yym2294 := z.EncBinary()
					_ = yym2294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2289[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2295 := z.EncBinary()
					_ = yym2295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2289 || yy2arr2289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2289[2] {
					yy2297 := &x.ObjectMeta
					yy2297.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2289[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2298 := &x.ObjectMeta
					yy2298.CodecEncodeSelf(e)
				}
			}
			if yyr2289 || yy2arr2289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2289[3] {
					yy2300 := &x.Spec
					yy2300.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2289[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2301 := &x.Spec
					yy2301.CodecEncodeSelf(e)
				}
			}
			if yyr2289 || yy2arr2289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2289[4] {
					yy2303 := &x.Status
					yy2303.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2289[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2304 := &x.Status
					yy2304.CodecEncodeSelf(e)
				}
			}
			if yyr2289 || yy2arr2289 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2305 := z.DecBinary()
	_ = yym2305
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2306 := r.ContainerType()
		if yyct2306 == codecSelferValueTypeMap1234 {
			yyl2306 := r.ReadMapStart()
			if yyl2306 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2306, d)
			}
		} else if yyct2306 == codecSelferValueTypeArray1234 {
			yyl2306 := r.ReadArrayStart()
			if yyl2306 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2306, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2307Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2307Slc
	var yyhl2307 bool = l >= 0
	for yyj2307 := 0; ; yyj2307++ {
		if yyhl2307 {
			if yyj2307 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2307Slc = r.DecodeBytes(yys2307Slc, true, true)
		yys2307 := string(yys2307Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2307 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2310 := &x.ObjectMeta
				yyv2310.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2311 := &x.Spec
				yyv2311.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2312 := &x.Status
				yyv2312.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2307)
		} // end switch yys2307
	} // end for yyj2307
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2313 int
	var yyb2313 bool
	var yyhl2313 bool = l >= 0
	yyj2313++
	if yyhl2313 {
		yyb2313 = yyj2313 > l
	} else {
		yyb2313 = r.CheckBreak()
	}
	if yyb2313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2313++
	if yyhl2313 {
		yyb2313 = yyj2313 > l
	} else {
		yyb2313 = r.CheckBreak()
	}
	if yyb2313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2313++
	if yyhl2313 {
		yyb2313 = yyj2313 > l
	} else {
		yyb2313 = r.CheckBreak()
	}
	if yyb2313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2316 := &x.ObjectMeta
		yyv2316.CodecDecodeSelf(d)
	}
	yyj2313++
	if yyhl2313 {
		yyb2313 = yyj2313 > l
	} else {
		yyb2313 = r.CheckBreak()
	}
	if yyb2313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2317 := &x.Spec
		yyv2317.CodecDecodeSelf(d)
	}
	yyj2313++
	if yyhl2313 {
		yyb2313 = yyj2313 > l
	} else {
		yyb2313 = r.CheckBreak()
	}
	if yyb2313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2318 := &x.Status
		yyv2318.CodecDecodeSelf(d)
	}
	for {
		yyj2313++
		if yyhl2313 {
			yyb2313 = yyj2313 > l
		} else {
			yyb2313 = r.CheckBreak()
		}
		if yyb2313 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2313-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2319 := z.EncBinary()
		_ = yym2319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2320 := !z.EncBinary()
			yy2arr2320 := z.EncBasicHandle().StructToArray
			var yyq2320 [4]bool
			_, _, _ = yysep2320, yyq2320, yy2arr2320
			const yyr2320 bool = false
			yyq2320[0] = x.Kind != ""
			yyq2320[1] = x.APIVersion != ""
			yyq2320[2] = true
			var yynn2320 int
			if yyr2320 || yy2arr2320 {
				r.EncodeArrayStart(4)
			} else {
				yynn2320 = 1
				for _, b := range yyq2320 {
					if b {
						yynn2320++
					}
				}
				r.EncodeMapStart(yynn2320)
				yynn2320 = 0
			}
			if yyr2320 || yy2arr2320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2320[0] {
					yym2322 := z.EncBinary()
					_ = yym2322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2320[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2323 := z.EncBinary()
					_ = yym2323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2320 || yy2arr2320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2320[1] {
					yym2325 := z.EncBinary()
					_ = yym2325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2320[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2326 := z.EncBinary()
					_ = yym2326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2320 || yy2arr2320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2320[2] {
					yy2328 := &x.ListMeta
					yym2329 := z.EncBinary()
					_ = yym2329
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2328) {
					} else {
						z.EncFallback(yy2328)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2320[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2330 := &x.ListMeta
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2330) {
					} else {
						z.EncFallback(yy2330)
					}
				}
			}
			if yyr2320 || yy2arr2320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2333 := z.EncBinary()
					_ = yym2333
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2334 := z.EncBinary()
					_ = yym2334
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2320 || yy2arr2320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2335 := z.DecBinary()
	_ = yym2335
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2336 := r.ContainerType()
		if yyct2336 == codecSelferValueTypeMap1234 {
			yyl2336 := r.ReadMapStart()
			if yyl2336 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2336, d)
			}
		} else if yyct2336 == codecSelferValueTypeArray1234 {
			yyl2336 := r.ReadArrayStart()
			if yyl2336 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2336, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2337Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2337Slc
	var yyhl2337 bool = l >= 0
	for yyj2337 := 0; ; yyj2337++ {
		if yyhl2337 {
			if yyj2337 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2337Slc = r.DecodeBytes(yys2337Slc, true, true)
		yys2337 := string(yys2337Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2337 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2340 := &x.ListMeta
				yym2341 := z.DecBinary()
				_ = yym2341
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2340) {
				} else {
					z.DecFallback(yyv2340, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2342 := &x.Items
				yym2343 := z.DecBinary()
				_ = yym2343
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2342), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2337)
		} // end switch yys2337
	} // end for yyj2337
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2344 int
	var yyb2344 bool
	var yyhl2344 bool = l >= 0
	yyj2344++
	if yyhl2344 {
		yyb2344 = yyj2344 > l
	} else {
		yyb2344 = r.CheckBreak()
	}
	if yyb2344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2344++
	if yyhl2344 {
		yyb2344 = yyj2344 > l
	} else {
		yyb2344 = r.CheckBreak()
	}
	if yyb2344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2344++
	if yyhl2344 {
		yyb2344 = yyj2344 > l
	} else {
		yyb2344 = r.CheckBreak()
	}
	if yyb2344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2347 := &x.ListMeta
		yym2348 := z.DecBinary()
		_ = yym2348
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2347) {
		} else {
			z.DecFallback(yyv2347, false)
		}
	}
	yyj2344++
	if yyhl2344 {
		yyb2344 = yyj2344 > l
	} else {
		yyb2344 = r.CheckBreak()
	}
	if yyb2344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2349 := &x.Items
		yym2350 := z.DecBinary()
		_ = yym2350
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2349), d)
		}
	}
	for {
		yyj2344++
		if yyhl2344 {
			yyb2344 = yyj2344 > l
		} else {
			yyb2344 = r.CheckBreak()
		}
		if yyb2344 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2344-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2351 := z.EncBinary()
	_ = yym2351
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2352 := z.DecBinary()
	_ = yym2352
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2353 := z.EncBinary()
	_ = yym2353
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2354 := z.DecBinary()
	_ = yym2354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2355 := z.EncBinary()
		_ = yym2355
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2356 := !z.EncBinary()
			yy2arr2356 := z.EncBasicHandle().StructToArray
			var yyq2356 [1]bool
			_, _, _ = yysep2356, yyq2356, yy2arr2356
			const yyr2356 bool = false
			yyq2356[0] = true
			var yynn2356 int
			if yyr2356 || yy2arr2356 {
				r.EncodeArrayStart(1)
			} else {
				yynn2356 = 0
				for _, b := range yyq2356 {
					if b {
						yynn2356++
					}
				}
				r.EncodeMapStart(yynn2356)
				yynn2356 = 0
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2356[0] {
					yy2358 := &x.LoadBalancer
					yy2358.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2356[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2359 := &x.LoadBalancer
					yy2359.CodecEncodeSelf(e)
				}
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2360 := z.DecBinary()
	_ = yym2360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2361 := r.ContainerType()
		if yyct2361 == codecSelferValueTypeMap1234 {
			yyl2361 := r.ReadMapStart()
			if yyl2361 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2361, d)
			}
		} else if yyct2361 == codecSelferValueTypeArray1234 {
			yyl2361 := r.ReadArrayStart()
			if yyl2361 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2361, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2362Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2362Slc
	var yyhl2362 bool = l >= 0
	for yyj2362 := 0; ; yyj2362++ {
		if yyhl2362 {
			if yyj2362 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2362Slc = r.DecodeBytes(yys2362Slc, true, true)
		yys2362 := string(yys2362Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2362 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2363 := &x.LoadBalancer
				yyv2363.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2362)
		} // end switch yys2362
	} // end for yyj2362
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2364 int
	var yyb2364 bool
	var yyhl2364 bool = l >= 0
	yyj2364++
	if yyhl2364 {
		yyb2364 = yyj2364 > l
	} else {
		yyb2364 = r.CheckBreak()
	}
	if yyb2364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2365 := &x.LoadBalancer
		yyv2365.CodecDecodeSelf(d)
	}
	for {
		yyj2364++
		if yyhl2364 {
			yyb2364 = yyj2364 > l
		} else {
			yyb2364 = r.CheckBreak()
		}
		if yyb2364 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2364-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2366 := z.EncBinary()
		_ = yym2366
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2367 := !z.EncBinary()
			yy2arr2367 := z.EncBasicHandle().StructToArray
			var yyq2367 [1]bool
			_, _, _ = yysep2367, yyq2367, yy2arr2367
			const yyr2367 bool = false
			yyq2367[0] = len(x.Ingress) != 0
			var yynn2367 int
			if yyr2367 || yy2arr2367 {
				r.EncodeArrayStart(1)
			} else {
				yynn2367 = 0
				for _, b := range yyq2367 {
					if b {
						yynn2367++
					}
				}
				r.EncodeMapStart(yynn2367)
				yynn2367 = 0
			}
			if yyr2367 || yy2arr2367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2367[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2369 := z.EncBinary()
						_ = yym2369
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2367[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2370 := z.EncBinary()
						_ = yym2370
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2367 || yy2arr2367 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2371 := z.DecBinary()
	_ = yym2371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2372 := r.ContainerType()
		if yyct2372 == codecSelferValueTypeMap1234 {
			yyl2372 := r.ReadMapStart()
			if yyl2372 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2372, d)
			}
		} else if yyct2372 == codecSelferValueTypeArray1234 {
			yyl2372 := r.ReadArrayStart()
			if yyl2372 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2373Slc
	var yyhl2373 bool = l >= 0
	for yyj2373 := 0; ; yyj2373++ {
		if yyhl2373 {
			if yyj2373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2373Slc = r.DecodeBytes(yys2373Slc, true, true)
		yys2373 := string(yys2373Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2373 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2374 := &x.Ingress
				yym2375 := z.DecBinary()
				_ = yym2375
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2374), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2373)
		} // end switch yys2373
	} // end for yyj2373
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2376 int
	var yyb2376 bool
	var yyhl2376 bool = l >= 0
	yyj2376++
	if yyhl2376 {
		yyb2376 = yyj2376 > l
	} else {
		yyb2376 = r.CheckBreak()
	}
	if yyb2376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2377 := &x.Ingress
		yym2378 := z.DecBinary()
		_ = yym2378
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2377), d)
		}
	}
	for {
		yyj2376++
		if yyhl2376 {
			yyb2376 = yyj2376 > l
		} else {
			yyb2376 = r.CheckBreak()
		}
		if yyb2376 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2376-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2379 := z.EncBinary()
		_ = yym2379
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2380 := !z.EncBinary()
			yy2arr2380 := z.EncBasicHandle().StructToArray
			var yyq2380 [2]bool
			_, _, _ = yysep2380, yyq2380, yy2arr2380
			const yyr2380 bool = false
			yyq2380[0] = x.IP != ""
			yyq2380[1] = x.Hostname != ""
			var yynn2380 int
			if yyr2380 || yy2arr2380 {
				r.EncodeArrayStart(2)
			} else {
				yynn2380 = 0
				for _, b := range yyq2380 {
					if b {
						yynn2380++
					}
				}
				r.EncodeMapStart(yynn2380)
				yynn2380 = 0
			}
			if yyr2380 || yy2arr2380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2380[0] {
					yym2382 := z.EncBinary()
					_ = yym2382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2380[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2383 := z.EncBinary()
					_ = yym2383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2380 || yy2arr2380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2380[1] {
					yym2385 := z.EncBinary()
					_ = yym2385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2380[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2386 := z.EncBinary()
					_ = yym2386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2380 || yy2arr2380 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2387 := z.DecBinary()
	_ = yym2387
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2388 := r.ContainerType()
		if yyct2388 == codecSelferValueTypeMap1234 {
			yyl2388 := r.ReadMapStart()
			if yyl2388 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2388, d)
			}
		} else if yyct2388 == codecSelferValueTypeArray1234 {
			yyl2388 := r.ReadArrayStart()
			if yyl2388 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2388, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2389Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2389Slc
	var yyhl2389 bool = l >= 0
	for yyj2389 := 0; ; yyj2389++ {
		if yyhl2389 {
			if yyj2389 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2389Slc = r.DecodeBytes(yys2389Slc, true, true)
		yys2389 := string(yys2389Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2389 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2389)
		} // end switch yys2389
	} // end for yyj2389
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2392 int
	var yyb2392 bool
	var yyhl2392 bool = l >= 0
	yyj2392++
	if yyhl2392 {
		yyb2392 = yyj2392 > l
	} else {
		yyb2392 = r.CheckBreak()
	}
	if yyb2392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2392++
	if yyhl2392 {
		yyb2392 = yyj2392 > l
	} else {
		yyb2392 = r.CheckBreak()
	}
	if yyb2392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2392++
		if yyhl2392 {
			yyb2392 = yyj2392 > l
		} else {
			yyb2392 = r.CheckBreak()
		}
		if yyb2392 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2392-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2395 := z.EncBinary()
		_ = yym2395
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2396 := !z.EncBinary()
			yy2arr2396 := z.EncBasicHandle().StructToArray
			var yyq2396 [9]bool
			_, _, _ = yysep2396, yyq2396, yy2arr2396
			const yyr2396 bool = false
			yyq2396[1] = len(x.Selector) != 0
			yyq2396[2] = x.ClusterIP != ""
			yyq2396[3] = x.Type != ""
			yyq2396[4] = len(x.ExternalIPs) != 0
			yyq2396[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2396[6] = x.SessionAffinity != ""
			yyq2396[7] = x.LoadBalancerIP != ""
			yyq2396[8] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2396 int
			if yyr2396 || yy2arr2396 {
				r.EncodeArrayStart(9)
			} else {
				yynn2396 = 1
				for _, b := range yyq2396 {
					if b {
						yynn2396++
					}
				}
				r.EncodeMapStart(yynn2396)
				yynn2396 = 0
			}
			if yyr2396 || yy2arr2396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2398 := z.EncBinary()
					_ = yym2398
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2399 := z.EncBinary()
					_ = yym2399
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2396 || yy2arr2396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2396[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2401 := z.EncBinary()
						_ = yym2401
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2396[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2402 := z.EncBinary()
						_ = yym2402
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2396 || yy2arr2396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2396[2] {
					yym2404 := z.EncBinary()
					_ = yym2404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2396[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2405 := z.EncBinary()
					_ = yym2405
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2396 || yy2arr2396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2396[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2396[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2396 || yy2arr2396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2396[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2408 := z.EncBinary()
						_ = yym2408
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2396[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2409 := z.EncBinary()
						_ = yym2409
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2396 || yy2arr2396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2396[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2411 := z.EncBinary()
						_ = yym2411
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2396[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2412 := z.EncBinary()
						_ = yym2412
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2396 || yy2arr2396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2396[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2396[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2396 || yy2arr2396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2396[7] {
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2396[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2416 := z.EncBinary()
					_ = yym2416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2396 || yy2arr2396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2396[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2418 := z.EncBinary()
						_ = yym2418
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2396[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2419 := z.EncBinary()
						_ = yym2419
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2396 || yy2arr2396 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2420 := z.DecBinary()
	_ = yym2420
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2421 := r.ContainerType()
		if yyct2421 == codecSelferValueTypeMap1234 {
			yyl2421 := r.ReadMapStart()
			if yyl2421 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2421, d)
			}
		} else if yyct2421 == codecSelferValueTypeArray1234 {
			yyl2421 := r.ReadArrayStart()
			if yyl2421 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2421, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2422Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2422Slc
	var yyhl2422 bool = l >= 0
	for yyj2422 := 0; ; yyj2422++ {
		if yyhl2422 {
			if yyj2422 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2422Slc = r.DecodeBytes(yys2422Slc, true, true)
		yys2422 := string(yys2422Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2422 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2423 := &x.Ports
				yym2424 := z.DecBinary()
				_ = yym2424
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2423), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2425 := &x.Selector
				yym2426 := z.DecBinary()
				_ = yym2426
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2425, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2429 := &x.ExternalIPs
				yym2430 := z.DecBinary()
				_ = yym2430
				if false {
				} else {
					z.F.DecSliceStringX(yyv2429, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2431 := &x.DeprecatedPublicIPs
				yym2432 := z.DecBinary()
				_ = yym2432
				if false {
				} else {
					z.F.DecSliceStringX(yyv2431, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2435 := &x.LoadBalancerSourceRanges
				yym2436 := z.DecBinary()
				_ = yym2436
				if false {
				} else {
					z.F.DecSliceStringX(yyv2435, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2422)
		} // end switch yys2422
	} // end for yyj2422
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2437 int
	var yyb2437 bool
	var yyhl2437 bool = l >= 0
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2438 := &x.Ports
		yym2439 := z.DecBinary()
		_ = yym2439
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2438), d)
		}
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2440 := &x.Selector
		yym2441 := z.DecBinary()
		_ = yym2441
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2440, false, d)
		}
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2444 := &x.ExternalIPs
		yym2445 := z.DecBinary()
		_ = yym2445
		if false {
		} else {
			z.F.DecSliceStringX(yyv2444, false, d)
		}
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2446 := &x.DeprecatedPublicIPs
		yym2447 := z.DecBinary()
		_ = yym2447
		if false {
		} else {
			z.F.DecSliceStringX(yyv2446, false, d)
		}
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2450 := &x.LoadBalancerSourceRanges
		yym2451 := z.DecBinary()
		_ = yym2451
		if false {
		} else {
			z.F.DecSliceStringX(yyv2450, false, d)
		}
	}
	for {
		yyj2437++
		if yyhl2437 {
			yyb2437 = yyj2437 > l
		} else {
			yyb2437 = r.CheckBreak()
		}
		if yyb2437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2452 := z.EncBinary()
		_ = yym2452
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2453 := !z.EncBinary()
			yy2arr2453 := z.EncBasicHandle().StructToArray
			var yyq2453 [5]bool
			_, _, _ = yysep2453, yyq2453, yy2arr2453
			const yyr2453 bool = false
			yyq2453[0] = x.Name != ""
			yyq2453[1] = x.Protocol != ""
			yyq2453[3] = true
			yyq2453[4] = x.NodePort != 0
			var yynn2453 int
			if yyr2453 || yy2arr2453 {
				r.EncodeArrayStart(5)
			} else {
				yynn2453 = 1
				for _, b := range yyq2453 {
					if b {
						yynn2453++
					}
				}
				r.EncodeMapStart(yynn2453)
				yynn2453 = 0
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2453[0] {
					yym2455 := z.EncBinary()
					_ = yym2455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2453[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2456 := z.EncBinary()
					_ = yym2456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2453[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2453[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2459 := z.EncBinary()
				_ = yym2459
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2460 := z.EncBinary()
				_ = yym2460
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2453[3] {
					yy2462 := &x.TargetPort
					yym2463 := z.EncBinary()
					_ = yym2463
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2462) {
					} else if !yym2463 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2462)
					} else {
						z.EncFallback(yy2462)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2453[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2464 := &x.TargetPort
					yym2465 := z.EncBinary()
					_ = yym2465
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2464) {
					} else if !yym2465 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2464)
					} else {
						z.EncFallback(yy2464)
					}
				}
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2453[4] {
					yym2467 := z.EncBinary()
					_ = yym2467
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2453[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2468 := z.EncBinary()
					_ = yym2468
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2469 := z.DecBinary()
	_ = yym2469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2470 := r.ContainerType()
		if yyct2470 == codecSelferValueTypeMap1234 {
			yyl2470 := r.ReadMapStart()
			if yyl2470 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2470, d)
			}
		} else if yyct2470 == codecSelferValueTypeArray1234 {
			yyl2470 := r.ReadArrayStart()
			if yyl2470 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2470, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2471Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2471Slc
	var yyhl2471 bool = l >= 0
	for yyj2471 := 0; ; yyj2471++ {
		if yyhl2471 {
			if yyj2471 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2471Slc = r.DecodeBytes(yys2471Slc, true, true)
		yys2471 := string(yys2471Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2471 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2475 := &x.TargetPort
				yym2476 := z.DecBinary()
				_ = yym2476
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2475) {
				} else if !yym2476 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2475)
				} else {
					z.DecFallback(yyv2475, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2471)
		} // end switch yys2471
	} // end for yyj2471
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2478 int
	var yyb2478 bool
	var yyhl2478 bool = l >= 0
	yyj2478++
	if yyhl2478 {
		yyb2478 = yyj2478 > l
	} else {
		yyb2478 = r.CheckBreak()
	}
	if yyb2478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2478++
	if yyhl2478 {
		yyb2478 = yyj2478 > l
	} else {
		yyb2478 = r.CheckBreak()
	}
	if yyb2478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2478++
	if yyhl2478 {
		yyb2478 = yyj2478 > l
	} else {
		yyb2478 = r.CheckBreak()
	}
	if yyb2478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2478++
	if yyhl2478 {
		yyb2478 = yyj2478 > l
	} else {
		yyb2478 = r.CheckBreak()
	}
	if yyb2478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2482 := &x.TargetPort
		yym2483 := z.DecBinary()
		_ = yym2483
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2482) {
		} else if !yym2483 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2482)
		} else {
			z.DecFallback(yyv2482, false)
		}
	}
	yyj2478++
	if yyhl2478 {
		yyb2478 = yyj2478 > l
	} else {
		yyb2478 = r.CheckBreak()
	}
	if yyb2478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2478++
		if yyhl2478 {
			yyb2478 = yyj2478 > l
		} else {
			yyb2478 = r.CheckBreak()
		}
		if yyb2478 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2478-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2485 := z.EncBinary()
		_ = yym2485
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2486 := !z.EncBinary()
			yy2arr2486 := z.EncBasicHandle().StructToArray
			var yyq2486 [5]bool
			_, _, _ = yysep2486, yyq2486, yy2arr2486
			const yyr2486 bool = false
			yyq2486[0] = x.Kind != ""
			yyq2486[1] = x.APIVersion != ""
			yyq2486[2] = true
			yyq2486[3] = true
			yyq2486[4] = true
			var yynn2486 int
			if yyr2486 || yy2arr2486 {
				r.EncodeArrayStart(5)
			} else {
				yynn2486 = 0
				for _, b := range yyq2486 {
					if b {
						yynn2486++
					}
				}
				r.EncodeMapStart(yynn2486)
				yynn2486 = 0
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2486[0] {
					yym2488 := z.EncBinary()
					_ = yym2488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2486[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2489 := z.EncBinary()
					_ = yym2489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2486[1] {
					yym2491 := z.EncBinary()
					_ = yym2491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2486[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2492 := z.EncBinary()
					_ = yym2492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2486[2] {
					yy2494 := &x.ObjectMeta
					yy2494.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2486[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2495 := &x.ObjectMeta
					yy2495.CodecEncodeSelf(e)
				}
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2486[3] {
					yy2497 := &x.Spec
					yy2497.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2486[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2498 := &x.Spec
					yy2498.CodecEncodeSelf(e)
				}
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2486[4] {
					yy2500 := &x.Status
					yy2500.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2486[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2501 := &x.Status
					yy2501.CodecEncodeSelf(e)
				}
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2502 := z.DecBinary()
	_ = yym2502
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2503 := r.ContainerType()
		if yyct2503 == codecSelferValueTypeMap1234 {
			yyl2503 := r.ReadMapStart()
			if yyl2503 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2503, d)
			}
		} else if yyct2503 == codecSelferValueTypeArray1234 {
			yyl2503 := r.ReadArrayStart()
			if yyl2503 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2503, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2504Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2504Slc
	var yyhl2504 bool = l >= 0
	for yyj2504 := 0; ; yyj2504++ {
		if yyhl2504 {
			if yyj2504 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2504Slc = r.DecodeBytes(yys2504Slc, true, true)
		yys2504 := string(yys2504Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2504 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2507 := &x.ObjectMeta
				yyv2507.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2508 := &x.Spec
				yyv2508.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2509 := &x.Status
				yyv2509.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2504)
		} // end switch yys2504
	} // end for yyj2504
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2510 int
	var yyb2510 bool
	var yyhl2510 bool = l >= 0
	yyj2510++
	if yyhl2510 {
		yyb2510 = yyj2510 > l
	} else {
		yyb2510 = r.CheckBreak()
	}
	if yyb2510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2510++
	if yyhl2510 {
		yyb2510 = yyj2510 > l
	} else {
		yyb2510 = r.CheckBreak()
	}
	if yyb2510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2510++
	if yyhl2510 {
		yyb2510 = yyj2510 > l
	} else {
		yyb2510 = r.CheckBreak()
	}
	if yyb2510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2513 := &x.ObjectMeta
		yyv2513.CodecDecodeSelf(d)
	}
	yyj2510++
	if yyhl2510 {
		yyb2510 = yyj2510 > l
	} else {
		yyb2510 = r.CheckBreak()
	}
	if yyb2510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2514 := &x.Spec
		yyv2514.CodecDecodeSelf(d)
	}
	yyj2510++
	if yyhl2510 {
		yyb2510 = yyj2510 > l
	} else {
		yyb2510 = r.CheckBreak()
	}
	if yyb2510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2515 := &x.Status
		yyv2515.CodecDecodeSelf(d)
	}
	for {
		yyj2510++
		if yyhl2510 {
			yyb2510 = yyj2510 > l
		} else {
			yyb2510 = r.CheckBreak()
		}
		if yyb2510 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2510-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2516 := z.EncBinary()
		_ = yym2516
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2517 := !z.EncBinary()
			yy2arr2517 := z.EncBasicHandle().StructToArray
			var yyq2517 [4]bool
			_, _, _ = yysep2517, yyq2517, yy2arr2517
			const yyr2517 bool = false
			yyq2517[0] = x.Kind != ""
			yyq2517[1] = x.APIVersion != ""
			yyq2517[2] = true
			var yynn2517 int
			if yyr2517 || yy2arr2517 {
				r.EncodeArrayStart(4)
			} else {
				yynn2517 = 1
				for _, b := range yyq2517 {
					if b {
						yynn2517++
					}
				}
				r.EncodeMapStart(yynn2517)
				yynn2517 = 0
			}
			if yyr2517 || yy2arr2517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2517[0] {
					yym2519 := z.EncBinary()
					_ = yym2519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2517[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2517 || yy2arr2517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2517[1] {
					yym2522 := z.EncBinary()
					_ = yym2522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2517[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2523 := z.EncBinary()
					_ = yym2523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2517 || yy2arr2517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2517[2] {
					yy2525 := &x.ListMeta
					yym2526 := z.EncBinary()
					_ = yym2526
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2525) {
					} else {
						z.EncFallback(yy2525)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2517[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2527 := &x.ListMeta
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2527) {
					} else {
						z.EncFallback(yy2527)
					}
				}
			}
			if yyr2517 || yy2arr2517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2530 := z.EncBinary()
					_ = yym2530
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2531 := z.EncBinary()
					_ = yym2531
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2517 || yy2arr2517 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2532 := z.DecBinary()
	_ = yym2532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2533 := r.ContainerType()
		if yyct2533 == codecSelferValueTypeMap1234 {
			yyl2533 := r.ReadMapStart()
			if yyl2533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2533, d)
			}
		} else if yyct2533 == codecSelferValueTypeArray1234 {
			yyl2533 := r.ReadArrayStart()
			if yyl2533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2534Slc
	var yyhl2534 bool = l >= 0
	for yyj2534 := 0; ; yyj2534++ {
		if yyhl2534 {
			if yyj2534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2534Slc = r.DecodeBytes(yys2534Slc, true, true)
		yys2534 := string(yys2534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2534 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2537 := &x.ListMeta
				yym2538 := z.DecBinary()
				_ = yym2538
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2537) {
				} else {
					z.DecFallback(yyv2537, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2539 := &x.Items
				yym2540 := z.DecBinary()
				_ = yym2540
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2539), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2534)
		} // end switch yys2534
	} // end for yyj2534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2541 int
	var yyb2541 bool
	var yyhl2541 bool = l >= 0
	yyj2541++
	if yyhl2541 {
		yyb2541 = yyj2541 > l
	} else {
		yyb2541 = r.CheckBreak()
	}
	if yyb2541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2541++
	if yyhl2541 {
		yyb2541 = yyj2541 > l
	} else {
		yyb2541 = r.CheckBreak()
	}
	if yyb2541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2541++
	if yyhl2541 {
		yyb2541 = yyj2541 > l
	} else {
		yyb2541 = r.CheckBreak()
	}
	if yyb2541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2544 := &x.ListMeta
		yym2545 := z.DecBinary()
		_ = yym2545
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2544) {
		} else {
			z.DecFallback(yyv2544, false)
		}
	}
	yyj2541++
	if yyhl2541 {
		yyb2541 = yyj2541 > l
	} else {
		yyb2541 = r.CheckBreak()
	}
	if yyb2541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2546 := &x.Items
		yym2547 := z.DecBinary()
		_ = yym2547
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2546), d)
		}
	}
	for {
		yyj2541++
		if yyhl2541 {
			yyb2541 = yyj2541 > l
		} else {
			yyb2541 = r.CheckBreak()
		}
		if yyb2541 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2541-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2548 := z.EncBinary()
		_ = yym2548
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2549 := !z.EncBinary()
			yy2arr2549 := z.EncBasicHandle().StructToArray
			var yyq2549 [5]bool
			_, _, _ = yysep2549, yyq2549, yy2arr2549
			const yyr2549 bool = false
			yyq2549[0] = x.Kind != ""
			yyq2549[1] = x.APIVersion != ""
			yyq2549[2] = true
			yyq2549[3] = len(x.Secrets) != 0
			yyq2549[4] = len(x.ImagePullSecrets) != 0
			var yynn2549 int
			if yyr2549 || yy2arr2549 {
				r.EncodeArrayStart(5)
			} else {
				yynn2549 = 0
				for _, b := range yyq2549 {
					if b {
						yynn2549++
					}
				}
				r.EncodeMapStart(yynn2549)
				yynn2549 = 0
			}
			if yyr2549 || yy2arr2549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2549[0] {
					yym2551 := z.EncBinary()
					_ = yym2551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2549[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2552 := z.EncBinary()
					_ = yym2552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2549 || yy2arr2549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2549[1] {
					yym2554 := z.EncBinary()
					_ = yym2554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2549[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2555 := z.EncBinary()
					_ = yym2555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2549 || yy2arr2549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2549[2] {
					yy2557 := &x.ObjectMeta
					yy2557.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2549[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2558 := &x.ObjectMeta
					yy2558.CodecEncodeSelf(e)
				}
			}
			if yyr2549 || yy2arr2549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2549[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2560 := z.EncBinary()
						_ = yym2560
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2549[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2561 := z.EncBinary()
						_ = yym2561
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2549 || yy2arr2549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2549[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2563 := z.EncBinary()
						_ = yym2563
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2549[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2564 := z.EncBinary()
						_ = yym2564
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2549 || yy2arr2549 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2565 := z.DecBinary()
	_ = yym2565
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2566 := r.ContainerType()
		if yyct2566 == codecSelferValueTypeMap1234 {
			yyl2566 := r.ReadMapStart()
			if yyl2566 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2566, d)
			}
		} else if yyct2566 == codecSelferValueTypeArray1234 {
			yyl2566 := r.ReadArrayStart()
			if yyl2566 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2566, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2567Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2567Slc
	var yyhl2567 bool = l >= 0
	for yyj2567 := 0; ; yyj2567++ {
		if yyhl2567 {
			if yyj2567 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2567Slc = r.DecodeBytes(yys2567Slc, true, true)
		yys2567 := string(yys2567Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2567 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2570 := &x.ObjectMeta
				yyv2570.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2571 := &x.Secrets
				yym2572 := z.DecBinary()
				_ = yym2572
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2571), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2573 := &x.ImagePullSecrets
				yym2574 := z.DecBinary()
				_ = yym2574
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2573), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2567)
		} // end switch yys2567
	} // end for yyj2567
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2575 int
	var yyb2575 bool
	var yyhl2575 bool = l >= 0
	yyj2575++
	if yyhl2575 {
		yyb2575 = yyj2575 > l
	} else {
		yyb2575 = r.CheckBreak()
	}
	if yyb2575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2575++
	if yyhl2575 {
		yyb2575 = yyj2575 > l
	} else {
		yyb2575 = r.CheckBreak()
	}
	if yyb2575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2575++
	if yyhl2575 {
		yyb2575 = yyj2575 > l
	} else {
		yyb2575 = r.CheckBreak()
	}
	if yyb2575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2578 := &x.ObjectMeta
		yyv2578.CodecDecodeSelf(d)
	}
	yyj2575++
	if yyhl2575 {
		yyb2575 = yyj2575 > l
	} else {
		yyb2575 = r.CheckBreak()
	}
	if yyb2575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2579 := &x.Secrets
		yym2580 := z.DecBinary()
		_ = yym2580
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2579), d)
		}
	}
	yyj2575++
	if yyhl2575 {
		yyb2575 = yyj2575 > l
	} else {
		yyb2575 = r.CheckBreak()
	}
	if yyb2575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2581 := &x.ImagePullSecrets
		yym2582 := z.DecBinary()
		_ = yym2582
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2581), d)
		}
	}
	for {
		yyj2575++
		if yyhl2575 {
			yyb2575 = yyj2575 > l
		} else {
			yyb2575 = r.CheckBreak()
		}
		if yyb2575 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2575-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2583 := z.EncBinary()
		_ = yym2583
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2584 := !z.EncBinary()
			yy2arr2584 := z.EncBasicHandle().StructToArray
			var yyq2584 [4]bool
			_, _, _ = yysep2584, yyq2584, yy2arr2584
			const yyr2584 bool = false
			yyq2584[0] = x.Kind != ""
			yyq2584[1] = x.APIVersion != ""
			yyq2584[2] = true
			var yynn2584 int
			if yyr2584 || yy2arr2584 {
				r.EncodeArrayStart(4)
			} else {
				yynn2584 = 1
				for _, b := range yyq2584 {
					if b {
						yynn2584++
					}
				}
				r.EncodeMapStart(yynn2584)
				yynn2584 = 0
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2584[0] {
					yym2586 := z.EncBinary()
					_ = yym2586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2584[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2587 := z.EncBinary()
					_ = yym2587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2584[1] {
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2584[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2590 := z.EncBinary()
					_ = yym2590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2584[2] {
					yy2592 := &x.ListMeta
					yym2593 := z.EncBinary()
					_ = yym2593
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2592) {
					} else {
						z.EncFallback(yy2592)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2584[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2594 := &x.ListMeta
					yym2595 := z.EncBinary()
					_ = yym2595
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2594) {
					} else {
						z.EncFallback(yy2594)
					}
				}
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2598 := z.EncBinary()
					_ = yym2598
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2599 := z.DecBinary()
	_ = yym2599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2600 := r.ContainerType()
		if yyct2600 == codecSelferValueTypeMap1234 {
			yyl2600 := r.ReadMapStart()
			if yyl2600 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2600, d)
			}
		} else if yyct2600 == codecSelferValueTypeArray1234 {
			yyl2600 := r.ReadArrayStart()
			if yyl2600 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2601Slc
	var yyhl2601 bool = l >= 0
	for yyj2601 := 0; ; yyj2601++ {
		if yyhl2601 {
			if yyj2601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2601Slc = r.DecodeBytes(yys2601Slc, true, true)
		yys2601 := string(yys2601Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2601 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2604 := &x.ListMeta
				yym2605 := z.DecBinary()
				_ = yym2605
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2604) {
				} else {
					z.DecFallback(yyv2604, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2606 := &x.Items
				yym2607 := z.DecBinary()
				_ = yym2607
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2606), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2601)
		} // end switch yys2601
	} // end for yyj2601
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2608 int
	var yyb2608 bool
	var yyhl2608 bool = l >= 0
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2611 := &x.ListMeta
		yym2612 := z.DecBinary()
		_ = yym2612
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2611) {
		} else {
			z.DecFallback(yyv2611, false)
		}
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2613 := &x.Items
		yym2614 := z.DecBinary()
		_ = yym2614
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2613), d)
		}
	}
	for {
		yyj2608++
		if yyhl2608 {
			yyb2608 = yyj2608 > l
		} else {
			yyb2608 = r.CheckBreak()
		}
		if yyb2608 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2608-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2615 := z.EncBinary()
		_ = yym2615
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2616 := !z.EncBinary()
			yy2arr2616 := z.EncBasicHandle().StructToArray
			var yyq2616 [4]bool
			_, _, _ = yysep2616, yyq2616, yy2arr2616
			const yyr2616 bool = false
			yyq2616[0] = x.Kind != ""
			yyq2616[1] = x.APIVersion != ""
			yyq2616[2] = true
			var yynn2616 int
			if yyr2616 || yy2arr2616 {
				r.EncodeArrayStart(4)
			} else {
				yynn2616 = 1
				for _, b := range yyq2616 {
					if b {
						yynn2616++
					}
				}
				r.EncodeMapStart(yynn2616)
				yynn2616 = 0
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2616[0] {
					yym2618 := z.EncBinary()
					_ = yym2618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2616[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2619 := z.EncBinary()
					_ = yym2619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2616[1] {
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2616[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2622 := z.EncBinary()
					_ = yym2622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2616[2] {
					yy2624 := &x.ObjectMeta
					yy2624.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2616[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2625 := &x.ObjectMeta
					yy2625.CodecEncodeSelf(e)
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2627 := z.EncBinary()
					_ = yym2627
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2628 := z.EncBinary()
					_ = yym2628
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2629 := z.DecBinary()
	_ = yym2629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2630 := r.ContainerType()
		if yyct2630 == codecSelferValueTypeMap1234 {
			yyl2630 := r.ReadMapStart()
			if yyl2630 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2630, d)
			}
		} else if yyct2630 == codecSelferValueTypeArray1234 {
			yyl2630 := r.ReadArrayStart()
			if yyl2630 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2631Slc
	var yyhl2631 bool = l >= 0
	for yyj2631 := 0; ; yyj2631++ {
		if yyhl2631 {
			if yyj2631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2631Slc = r.DecodeBytes(yys2631Slc, true, true)
		yys2631 := string(yys2631Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2631 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2634 := &x.ObjectMeta
				yyv2634.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2635 := &x.Subsets
				yym2636 := z.DecBinary()
				_ = yym2636
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2635), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2631)
		} // end switch yys2631
	} // end for yyj2631
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2637 int
	var yyb2637 bool
	var yyhl2637 bool = l >= 0
	yyj2637++
	if yyhl2637 {
		yyb2637 = yyj2637 > l
	} else {
		yyb2637 = r.CheckBreak()
	}
	if yyb2637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2637++
	if yyhl2637 {
		yyb2637 = yyj2637 > l
	} else {
		yyb2637 = r.CheckBreak()
	}
	if yyb2637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2637++
	if yyhl2637 {
		yyb2637 = yyj2637 > l
	} else {
		yyb2637 = r.CheckBreak()
	}
	if yyb2637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2640 := &x.ObjectMeta
		yyv2640.CodecDecodeSelf(d)
	}
	yyj2637++
	if yyhl2637 {
		yyb2637 = yyj2637 > l
	} else {
		yyb2637 = r.CheckBreak()
	}
	if yyb2637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2641 := &x.Subsets
		yym2642 := z.DecBinary()
		_ = yym2642
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2641), d)
		}
	}
	for {
		yyj2637++
		if yyhl2637 {
			yyb2637 = yyj2637 > l
		} else {
			yyb2637 = r.CheckBreak()
		}
		if yyb2637 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2637-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2643 := z.EncBinary()
		_ = yym2643
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2644 := !z.EncBinary()
			yy2arr2644 := z.EncBasicHandle().StructToArray
			var yyq2644 [3]bool
			_, _, _ = yysep2644, yyq2644, yy2arr2644
			const yyr2644 bool = false
			yyq2644[0] = len(x.Addresses) != 0
			yyq2644[1] = len(x.NotReadyAddresses) != 0
			yyq2644[2] = len(x.Ports) != 0
			var yynn2644 int
			if yyr2644 || yy2arr2644 {
				r.EncodeArrayStart(3)
			} else {
				yynn2644 = 0
				for _, b := range yyq2644 {
					if b {
						yynn2644++
					}
				}
				r.EncodeMapStart(yynn2644)
				yynn2644 = 0
			}
			if yyr2644 || yy2arr2644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2644[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2646 := z.EncBinary()
						_ = yym2646
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2644[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2647 := z.EncBinary()
						_ = yym2647
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2644 || yy2arr2644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2644[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2649 := z.EncBinary()
						_ = yym2649
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2644[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2650 := z.EncBinary()
						_ = yym2650
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2644 || yy2arr2644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2644[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2652 := z.EncBinary()
						_ = yym2652
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2644[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2653 := z.EncBinary()
						_ = yym2653
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2644 || yy2arr2644 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2654 := z.DecBinary()
	_ = yym2654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2655 := r.ContainerType()
		if yyct2655 == codecSelferValueTypeMap1234 {
			yyl2655 := r.ReadMapStart()
			if yyl2655 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2655, d)
			}
		} else if yyct2655 == codecSelferValueTypeArray1234 {
			yyl2655 := r.ReadArrayStart()
			if yyl2655 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2656Slc
	var yyhl2656 bool = l >= 0
	for yyj2656 := 0; ; yyj2656++ {
		if yyhl2656 {
			if yyj2656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2656Slc = r.DecodeBytes(yys2656Slc, true, true)
		yys2656 := string(yys2656Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2656 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2657 := &x.Addresses
				yym2658 := z.DecBinary()
				_ = yym2658
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2657), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2659 := &x.NotReadyAddresses
				yym2660 := z.DecBinary()
				_ = yym2660
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2659), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2661 := &x.Ports
				yym2662 := z.DecBinary()
				_ = yym2662
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2661), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2656)
		} // end switch yys2656
	} // end for yyj2656
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2663 int
	var yyb2663 bool
	var yyhl2663 bool = l >= 0
	yyj2663++
	if yyhl2663 {
		yyb2663 = yyj2663 > l
	} else {
		yyb2663 = r.CheckBreak()
	}
	if yyb2663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2664 := &x.Addresses
		yym2665 := z.DecBinary()
		_ = yym2665
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2664), d)
		}
	}
	yyj2663++
	if yyhl2663 {
		yyb2663 = yyj2663 > l
	} else {
		yyb2663 = r.CheckBreak()
	}
	if yyb2663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2666 := &x.NotReadyAddresses
		yym2667 := z.DecBinary()
		_ = yym2667
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2666), d)
		}
	}
	yyj2663++
	if yyhl2663 {
		yyb2663 = yyj2663 > l
	} else {
		yyb2663 = r.CheckBreak()
	}
	if yyb2663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2668 := &x.Ports
		yym2669 := z.DecBinary()
		_ = yym2669
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2668), d)
		}
	}
	for {
		yyj2663++
		if yyhl2663 {
			yyb2663 = yyj2663 > l
		} else {
			yyb2663 = r.CheckBreak()
		}
		if yyb2663 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2663-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2670 := z.EncBinary()
		_ = yym2670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2671 := !z.EncBinary()
			yy2arr2671 := z.EncBasicHandle().StructToArray
			var yyq2671 [4]bool
			_, _, _ = yysep2671, yyq2671, yy2arr2671
			const yyr2671 bool = false
			yyq2671[1] = x.Hostname != ""
			yyq2671[2] = x.NodeName != nil
			yyq2671[3] = x.TargetRef != nil
			var yynn2671 int
			if yyr2671 || yy2arr2671 {
				r.EncodeArrayStart(4)
			} else {
				yynn2671 = 1
				for _, b := range yyq2671 {
					if b {
						yynn2671++
					}
				}
				r.EncodeMapStart(yynn2671)
				yynn2671 = 0
			}
			if yyr2671 || yy2arr2671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2673 := z.EncBinary()
				_ = yym2673
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2674 := z.EncBinary()
				_ = yym2674
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2671 || yy2arr2671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2671[1] {
					yym2676 := z.EncBinary()
					_ = yym2676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2671[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2677 := z.EncBinary()
					_ = yym2677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2671 || yy2arr2671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2671[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2679 := *x.NodeName
						yym2680 := z.EncBinary()
						_ = yym2680
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2679))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2671[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2681 := *x.NodeName
						yym2682 := z.EncBinary()
						_ = yym2682
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2681))
						}
					}
				}
			}
			if yyr2671 || yy2arr2671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2671[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2671[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2671 || yy2arr2671 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2684 := z.DecBinary()
	_ = yym2684
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2685 := r.ContainerType()
		if yyct2685 == codecSelferValueTypeMap1234 {
			yyl2685 := r.ReadMapStart()
			if yyl2685 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2685, d)
			}
		} else if yyct2685 == codecSelferValueTypeArray1234 {
			yyl2685 := r.ReadArrayStart()
			if yyl2685 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2685, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2686Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2686Slc
	var yyhl2686 bool = l >= 0
	for yyj2686 := 0; ; yyj2686++ {
		if yyhl2686 {
			if yyj2686 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2686Slc = r.DecodeBytes(yys2686Slc, true, true)
		yys2686 := string(yys2686Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2686 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2690 := z.DecBinary()
				_ = yym2690
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2686)
		} // end switch yys2686
	} // end for yyj2686
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2692 int
	var yyb2692 bool
	var yyhl2692 bool = l >= 0
	yyj2692++
	if yyhl2692 {
		yyb2692 = yyj2692 > l
	} else {
		yyb2692 = r.CheckBreak()
	}
	if yyb2692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2692++
	if yyhl2692 {
		yyb2692 = yyj2692 > l
	} else {
		yyb2692 = r.CheckBreak()
	}
	if yyb2692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2692++
	if yyhl2692 {
		yyb2692 = yyj2692 > l
	} else {
		yyb2692 = r.CheckBreak()
	}
	if yyb2692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2696 := z.DecBinary()
		_ = yym2696
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2692++
	if yyhl2692 {
		yyb2692 = yyj2692 > l
	} else {
		yyb2692 = r.CheckBreak()
	}
	if yyb2692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2692++
		if yyhl2692 {
			yyb2692 = yyj2692 > l
		} else {
			yyb2692 = r.CheckBreak()
		}
		if yyb2692 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2692-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2698 := z.EncBinary()
		_ = yym2698
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2699 := !z.EncBinary()
			yy2arr2699 := z.EncBasicHandle().StructToArray
			var yyq2699 [3]bool
			_, _, _ = yysep2699, yyq2699, yy2arr2699
			const yyr2699 bool = false
			yyq2699[0] = x.Name != ""
			yyq2699[2] = x.Protocol != ""
			var yynn2699 int
			if yyr2699 || yy2arr2699 {
				r.EncodeArrayStart(3)
			} else {
				yynn2699 = 1
				for _, b := range yyq2699 {
					if b {
						yynn2699++
					}
				}
				r.EncodeMapStart(yynn2699)
				yynn2699 = 0
			}
			if yyr2699 || yy2arr2699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2699[0] {
					yym2701 := z.EncBinary()
					_ = yym2701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2699[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2699 || yy2arr2699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2704 := z.EncBinary()
				_ = yym2704
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2705 := z.EncBinary()
				_ = yym2705
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2699 || yy2arr2699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2699[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2699[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2699 || yy2arr2699 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2707 := z.DecBinary()
	_ = yym2707
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2708 := r.ContainerType()
		if yyct2708 == codecSelferValueTypeMap1234 {
			yyl2708 := r.ReadMapStart()
			if yyl2708 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2708, d)
			}
		} else if yyct2708 == codecSelferValueTypeArray1234 {
			yyl2708 := r.ReadArrayStart()
			if yyl2708 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2708, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2709Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2709Slc
	var yyhl2709 bool = l >= 0
	for yyj2709 := 0; ; yyj2709++ {
		if yyhl2709 {
			if yyj2709 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2709Slc = r.DecodeBytes(yys2709Slc, true, true)
		yys2709 := string(yys2709Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2709 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2709)
		} // end switch yys2709
	} // end for yyj2709
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2713 int
	var yyb2713 bool
	var yyhl2713 bool = l >= 0
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2713++
		if yyhl2713 {
			yyb2713 = yyj2713 > l
		} else {
			yyb2713 = r.CheckBreak()
		}
		if yyb2713 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2713-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2717 := z.EncBinary()
		_ = yym2717
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2718 := !z.EncBinary()
			yy2arr2718 := z.EncBasicHandle().StructToArray
			var yyq2718 [4]bool
			_, _, _ = yysep2718, yyq2718, yy2arr2718
			const yyr2718 bool = false
			yyq2718[0] = x.Kind != ""
			yyq2718[1] = x.APIVersion != ""
			yyq2718[2] = true
			var yynn2718 int
			if yyr2718 || yy2arr2718 {
				r.EncodeArrayStart(4)
			} else {
				yynn2718 = 1
				for _, b := range yyq2718 {
					if b {
						yynn2718++
					}
				}
				r.EncodeMapStart(yynn2718)
				yynn2718 = 0
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2718[0] {
					yym2720 := z.EncBinary()
					_ = yym2720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2718[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2718[1] {
					yym2723 := z.EncBinary()
					_ = yym2723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2718[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2718[2] {
					yy2726 := &x.ListMeta
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2726) {
					} else {
						z.EncFallback(yy2726)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2718[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2728 := &x.ListMeta
					yym2729 := z.EncBinary()
					_ = yym2729
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2728) {
					} else {
						z.EncFallback(yy2728)
					}
				}
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2733 := z.DecBinary()
	_ = yym2733
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2734 := r.ContainerType()
		if yyct2734 == codecSelferValueTypeMap1234 {
			yyl2734 := r.ReadMapStart()
			if yyl2734 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2734, d)
			}
		} else if yyct2734 == codecSelferValueTypeArray1234 {
			yyl2734 := r.ReadArrayStart()
			if yyl2734 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2734, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2735Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2735Slc
	var yyhl2735 bool = l >= 0
	for yyj2735 := 0; ; yyj2735++ {
		if yyhl2735 {
			if yyj2735 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2735Slc = r.DecodeBytes(yys2735Slc, true, true)
		yys2735 := string(yys2735Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2735 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2738 := &x.ListMeta
				yym2739 := z.DecBinary()
				_ = yym2739
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2738) {
				} else {
					z.DecFallback(yyv2738, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2740 := &x.Items
				yym2741 := z.DecBinary()
				_ = yym2741
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2740), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2735)
		} // end switch yys2735
	} // end for yyj2735
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2742 int
	var yyb2742 bool
	var yyhl2742 bool = l >= 0
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2745 := &x.ListMeta
		yym2746 := z.DecBinary()
		_ = yym2746
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2745) {
		} else {
			z.DecFallback(yyv2745, false)
		}
	}
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2747 := &x.Items
		yym2748 := z.DecBinary()
		_ = yym2748
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2747), d)
		}
	}
	for {
		yyj2742++
		if yyhl2742 {
			yyb2742 = yyj2742 > l
		} else {
			yyb2742 = r.CheckBreak()
		}
		if yyb2742 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2742-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2749 := z.EncBinary()
		_ = yym2749
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2750 := !z.EncBinary()
			yy2arr2750 := z.EncBasicHandle().StructToArray
			var yyq2750 [4]bool
			_, _, _ = yysep2750, yyq2750, yy2arr2750
			const yyr2750 bool = false
			yyq2750[0] = x.PodCIDR != ""
			yyq2750[1] = x.ExternalID != ""
			yyq2750[2] = x.ProviderID != ""
			yyq2750[3] = x.Unschedulable != false
			var yynn2750 int
			if yyr2750 || yy2arr2750 {
				r.EncodeArrayStart(4)
			} else {
				yynn2750 = 0
				for _, b := range yyq2750 {
					if b {
						yynn2750++
					}
				}
				r.EncodeMapStart(yynn2750)
				yynn2750 = 0
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2750[0] {
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2750[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2753 := z.EncBinary()
					_ = yym2753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2750[1] {
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2750[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2750[2] {
					yym2758 := z.EncBinary()
					_ = yym2758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2750[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2759 := z.EncBinary()
					_ = yym2759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2750[3] {
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2750[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2762 := z.EncBinary()
					_ = yym2762
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2763 := z.DecBinary()
	_ = yym2763
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2764 := r.ContainerType()
		if yyct2764 == codecSelferValueTypeMap1234 {
			yyl2764 := r.ReadMapStart()
			if yyl2764 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2764, d)
			}
		} else if yyct2764 == codecSelferValueTypeArray1234 {
			yyl2764 := r.ReadArrayStart()
			if yyl2764 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2764, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2765Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2765Slc
	var yyhl2765 bool = l >= 0
	for yyj2765 := 0; ; yyj2765++ {
		if yyhl2765 {
			if yyj2765 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2765Slc = r.DecodeBytes(yys2765Slc, true, true)
		yys2765 := string(yys2765Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2765 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2765)
		} // end switch yys2765
	} // end for yyj2765
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2770 int
	var yyb2770 bool
	var yyhl2770 bool = l >= 0
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2770++
		if yyhl2770 {
			yyb2770 = yyj2770 > l
		} else {
			yyb2770 = r.CheckBreak()
		}
		if yyb2770 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2770-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2775 := z.EncBinary()
		_ = yym2775
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2776 := !z.EncBinary()
			yy2arr2776 := z.EncBasicHandle().StructToArray
			var yyq2776 [1]bool
			_, _, _ = yysep2776, yyq2776, yy2arr2776
			const yyr2776 bool = false
			var yynn2776 int
			if yyr2776 || yy2arr2776 {
				r.EncodeArrayStart(1)
			} else {
				yynn2776 = 1
				for _, b := range yyq2776 {
					if b {
						yynn2776++
					}
				}
				r.EncodeMapStart(yynn2776)
				yynn2776 = 0
			}
			if yyr2776 || yy2arr2776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2778 := z.EncBinary()
				_ = yym2778
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2779 := z.EncBinary()
				_ = yym2779
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2776 || yy2arr2776 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2780 := z.DecBinary()
	_ = yym2780
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2781 := r.ContainerType()
		if yyct2781 == codecSelferValueTypeMap1234 {
			yyl2781 := r.ReadMapStart()
			if yyl2781 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2781, d)
			}
		} else if yyct2781 == codecSelferValueTypeArray1234 {
			yyl2781 := r.ReadArrayStart()
			if yyl2781 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2781, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2782Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2782Slc
	var yyhl2782 bool = l >= 0
	for yyj2782 := 0; ; yyj2782++ {
		if yyhl2782 {
			if yyj2782 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2782Slc = r.DecodeBytes(yys2782Slc, true, true)
		yys2782 := string(yys2782Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2782 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2782)
		} // end switch yys2782
	} // end for yyj2782
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2784 int
	var yyb2784 bool
	var yyhl2784 bool = l >= 0
	yyj2784++
	if yyhl2784 {
		yyb2784 = yyj2784 > l
	} else {
		yyb2784 = r.CheckBreak()
	}
	if yyb2784 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2784++
		if yyhl2784 {
			yyb2784 = yyj2784 > l
		} else {
			yyb2784 = r.CheckBreak()
		}
		if yyb2784 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2784-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2786 := z.EncBinary()
		_ = yym2786
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2787 := !z.EncBinary()
			yy2arr2787 := z.EncBasicHandle().StructToArray
			var yyq2787 [1]bool
			_, _, _ = yysep2787, yyq2787, yy2arr2787
			const yyr2787 bool = false
			yyq2787[0] = true
			var yynn2787 int
			if yyr2787 || yy2arr2787 {
				r.EncodeArrayStart(1)
			} else {
				yynn2787 = 0
				for _, b := range yyq2787 {
					if b {
						yynn2787++
					}
				}
				r.EncodeMapStart(yynn2787)
				yynn2787 = 0
			}
			if yyr2787 || yy2arr2787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2787[0] {
					yy2789 := &x.KubeletEndpoint
					yy2789.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2787[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2790 := &x.KubeletEndpoint
					yy2790.CodecEncodeSelf(e)
				}
			}
			if yyr2787 || yy2arr2787 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2791 := z.DecBinary()
	_ = yym2791
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2792 := r.ContainerType()
		if yyct2792 == codecSelferValueTypeMap1234 {
			yyl2792 := r.ReadMapStart()
			if yyl2792 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2792, d)
			}
		} else if yyct2792 == codecSelferValueTypeArray1234 {
			yyl2792 := r.ReadArrayStart()
			if yyl2792 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2792, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2793Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2793Slc
	var yyhl2793 bool = l >= 0
	for yyj2793 := 0; ; yyj2793++ {
		if yyhl2793 {
			if yyj2793 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2793Slc = r.DecodeBytes(yys2793Slc, true, true)
		yys2793 := string(yys2793Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2793 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2794 := &x.KubeletEndpoint
				yyv2794.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2793)
		} // end switch yys2793
	} // end for yyj2793
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2795 int
	var yyb2795 bool
	var yyhl2795 bool = l >= 0
	yyj2795++
	if yyhl2795 {
		yyb2795 = yyj2795 > l
	} else {
		yyb2795 = r.CheckBreak()
	}
	if yyb2795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2796 := &x.KubeletEndpoint
		yyv2796.CodecDecodeSelf(d)
	}
	for {
		yyj2795++
		if yyhl2795 {
			yyb2795 = yyj2795 > l
		} else {
			yyb2795 = r.CheckBreak()
		}
		if yyb2795 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2795-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2797 := z.EncBinary()
		_ = yym2797
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2798 := !z.EncBinary()
			yy2arr2798 := z.EncBasicHandle().StructToArray
			var yyq2798 [10]bool
			_, _, _ = yysep2798, yyq2798, yy2arr2798
			const yyr2798 bool = false
			var yynn2798 int
			if yyr2798 || yy2arr2798 {
				r.EncodeArrayStart(10)
			} else {
				yynn2798 = 10
				for _, b := range yyq2798 {
					if b {
						yynn2798++
					}
				}
				r.EncodeMapStart(yynn2798)
				yynn2798 = 0
			}
			if yyr2798 || yy2arr2798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2800 := z.EncBinary()
				_ = yym2800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2801 := z.EncBinary()
				_ = yym2801
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2798 || yy2arr2798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2803 := z.EncBinary()
				_ = yym2803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2804 := z.EncBinary()
				_ = yym2804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2798 || yy2arr2798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2806 := z.EncBinary()
				_ = yym2806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2807 := z.EncBinary()
				_ = yym2807
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2798 || yy2arr2798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2809 := z.EncBinary()
				_ = yym2809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2810 := z.EncBinary()
				_ = yym2810
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2798 || yy2arr2798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2812 := z.EncBinary()
				_ = yym2812
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2813 := z.EncBinary()
				_ = yym2813
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2798 || yy2arr2798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2815 := z.EncBinary()
				_ = yym2815
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2816 := z.EncBinary()
				_ = yym2816
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2798 || yy2arr2798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2818 := z.EncBinary()
				_ = yym2818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2819 := z.EncBinary()
				_ = yym2819
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2798 || yy2arr2798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2821 := z.EncBinary()
				_ = yym2821
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2822 := z.EncBinary()
				_ = yym2822
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2798 || yy2arr2798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2824 := z.EncBinary()
				_ = yym2824
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2825 := z.EncBinary()
				_ = yym2825
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2798 || yy2arr2798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2827 := z.EncBinary()
				_ = yym2827
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2828 := z.EncBinary()
				_ = yym2828
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2798 || yy2arr2798 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2829 := z.DecBinary()
	_ = yym2829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2830 := r.ContainerType()
		if yyct2830 == codecSelferValueTypeMap1234 {
			yyl2830 := r.ReadMapStart()
			if yyl2830 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2830, d)
			}
		} else if yyct2830 == codecSelferValueTypeArray1234 {
			yyl2830 := r.ReadArrayStart()
			if yyl2830 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2830, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2831Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2831Slc
	var yyhl2831 bool = l >= 0
	for yyj2831 := 0; ; yyj2831++ {
		if yyhl2831 {
			if yyj2831 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2831Slc = r.DecodeBytes(yys2831Slc, true, true)
		yys2831 := string(yys2831Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2831 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2831)
		} // end switch yys2831
	} // end for yyj2831
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2842 int
	var yyb2842 bool
	var yyhl2842 bool = l >= 0
	yyj2842++
	if yyhl2842 {
		yyb2842 = yyj2842 > l
	} else {
		yyb2842 = r.CheckBreak()
	}
	if yyb2842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2842++
	if yyhl2842 {
		yyb2842 = yyj2842 > l
	} else {
		yyb2842 = r.CheckBreak()
	}
	if yyb2842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2842++
	if yyhl2842 {
		yyb2842 = yyj2842 > l
	} else {
		yyb2842 = r.CheckBreak()
	}
	if yyb2842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2842++
	if yyhl2842 {
		yyb2842 = yyj2842 > l
	} else {
		yyb2842 = r.CheckBreak()
	}
	if yyb2842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2842++
	if yyhl2842 {
		yyb2842 = yyj2842 > l
	} else {
		yyb2842 = r.CheckBreak()
	}
	if yyb2842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2842++
	if yyhl2842 {
		yyb2842 = yyj2842 > l
	} else {
		yyb2842 = r.CheckBreak()
	}
	if yyb2842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2842++
	if yyhl2842 {
		yyb2842 = yyj2842 > l
	} else {
		yyb2842 = r.CheckBreak()
	}
	if yyb2842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2842++
	if yyhl2842 {
		yyb2842 = yyj2842 > l
	} else {
		yyb2842 = r.CheckBreak()
	}
	if yyb2842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2842++
	if yyhl2842 {
		yyb2842 = yyj2842 > l
	} else {
		yyb2842 = r.CheckBreak()
	}
	if yyb2842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2842++
	if yyhl2842 {
		yyb2842 = yyj2842 > l
	} else {
		yyb2842 = r.CheckBreak()
	}
	if yyb2842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2842++
		if yyhl2842 {
			yyb2842 = yyj2842 > l
		} else {
			yyb2842 = r.CheckBreak()
		}
		if yyb2842 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2842-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2853 := z.EncBinary()
		_ = yym2853
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2854 := !z.EncBinary()
			yy2arr2854 := z.EncBasicHandle().StructToArray
			var yyq2854 [10]bool
			_, _, _ = yysep2854, yyq2854, yy2arr2854
			const yyr2854 bool = false
			yyq2854[0] = len(x.Capacity) != 0
			yyq2854[1] = len(x.Allocatable) != 0
			yyq2854[2] = x.Phase != ""
			yyq2854[3] = len(x.Conditions) != 0
			yyq2854[4] = len(x.Addresses) != 0
			yyq2854[5] = true
			yyq2854[6] = true
			yyq2854[7] = len(x.Images) != 0
			yyq2854[8] = len(x.VolumesInUse) != 0
			yyq2854[9] = len(x.VolumesAttached) != 0
			var yynn2854 int
			if yyr2854 || yy2arr2854 {
				r.EncodeArrayStart(10)
			} else {
				yynn2854 = 0
				for _, b := range yyq2854 {
					if b {
						yynn2854++
					}
				}
				r.EncodeMapStart(yynn2854)
				yynn2854 = 0
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2854[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2854[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2854[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2854[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2854[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2854[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2854[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2859 := z.EncBinary()
						_ = yym2859
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2854[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2860 := z.EncBinary()
						_ = yym2860
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2854[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2862 := z.EncBinary()
						_ = yym2862
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2854[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2863 := z.EncBinary()
						_ = yym2863
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2854[5] {
					yy2865 := &x.DaemonEndpoints
					yy2865.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2854[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2866 := &x.DaemonEndpoints
					yy2866.CodecEncodeSelf(e)
				}
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2854[6] {
					yy2868 := &x.NodeInfo
					yy2868.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2854[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2869 := &x.NodeInfo
					yy2869.CodecEncodeSelf(e)
				}
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2854[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2871 := z.EncBinary()
						_ = yym2871
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2854[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2872 := z.EncBinary()
						_ = yym2872
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2854[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2874 := z.EncBinary()
						_ = yym2874
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2854[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2875 := z.EncBinary()
						_ = yym2875
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2854[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2877 := z.EncBinary()
						_ = yym2877
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2854[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2878 := z.EncBinary()
						_ = yym2878
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2879 := z.DecBinary()
	_ = yym2879
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2880 := r.ContainerType()
		if yyct2880 == codecSelferValueTypeMap1234 {
			yyl2880 := r.ReadMapStart()
			if yyl2880 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2880, d)
			}
		} else if yyct2880 == codecSelferValueTypeArray1234 {
			yyl2880 := r.ReadArrayStart()
			if yyl2880 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2880, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2881Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2881Slc
	var yyhl2881 bool = l >= 0
	for yyj2881 := 0; ; yyj2881++ {
		if yyhl2881 {
			if yyj2881 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2881Slc = r.DecodeBytes(yys2881Slc, true, true)
		yys2881 := string(yys2881Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2881 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2882 := &x.Capacity
				yyv2882.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2883 := &x.Allocatable
				yyv2883.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2885 := &x.Conditions
				yym2886 := z.DecBinary()
				_ = yym2886
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2885), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2887 := &x.Addresses
				yym2888 := z.DecBinary()
				_ = yym2888
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2887), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2889 := &x.DaemonEndpoints
				yyv2889.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2890 := &x.NodeInfo
				yyv2890.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2891 := &x.Images
				yym2892 := z.DecBinary()
				_ = yym2892
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2891), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv2893 := &x.VolumesInUse
				yym2894 := z.DecBinary()
				_ = yym2894
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2893), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv2895 := &x.VolumesAttached
				yym2896 := z.DecBinary()
				_ = yym2896
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2895), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2881)
		} // end switch yys2881
	} // end for yyj2881
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2897 int
	var yyb2897 bool
	var yyhl2897 bool = l >= 0
	yyj2897++
	if yyhl2897 {
		yyb2897 = yyj2897 > l
	} else {
		yyb2897 = r.CheckBreak()
	}
	if yyb2897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2898 := &x.Capacity
		yyv2898.CodecDecodeSelf(d)
	}
	yyj2897++
	if yyhl2897 {
		yyb2897 = yyj2897 > l
	} else {
		yyb2897 = r.CheckBreak()
	}
	if yyb2897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2899 := &x.Allocatable
		yyv2899.CodecDecodeSelf(d)
	}
	yyj2897++
	if yyhl2897 {
		yyb2897 = yyj2897 > l
	} else {
		yyb2897 = r.CheckBreak()
	}
	if yyb2897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2897++
	if yyhl2897 {
		yyb2897 = yyj2897 > l
	} else {
		yyb2897 = r.CheckBreak()
	}
	if yyb2897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2901 := &x.Conditions
		yym2902 := z.DecBinary()
		_ = yym2902
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2901), d)
		}
	}
	yyj2897++
	if yyhl2897 {
		yyb2897 = yyj2897 > l
	} else {
		yyb2897 = r.CheckBreak()
	}
	if yyb2897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2903 := &x.Addresses
		yym2904 := z.DecBinary()
		_ = yym2904
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2903), d)
		}
	}
	yyj2897++
	if yyhl2897 {
		yyb2897 = yyj2897 > l
	} else {
		yyb2897 = r.CheckBreak()
	}
	if yyb2897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2905 := &x.DaemonEndpoints
		yyv2905.CodecDecodeSelf(d)
	}
	yyj2897++
	if yyhl2897 {
		yyb2897 = yyj2897 > l
	} else {
		yyb2897 = r.CheckBreak()
	}
	if yyb2897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2906 := &x.NodeInfo
		yyv2906.CodecDecodeSelf(d)
	}
	yyj2897++
	if yyhl2897 {
		yyb2897 = yyj2897 > l
	} else {
		yyb2897 = r.CheckBreak()
	}
	if yyb2897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2907 := &x.Images
		yym2908 := z.DecBinary()
		_ = yym2908
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2907), d)
		}
	}
	yyj2897++
	if yyhl2897 {
		yyb2897 = yyj2897 > l
	} else {
		yyb2897 = r.CheckBreak()
	}
	if yyb2897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv2909 := &x.VolumesInUse
		yym2910 := z.DecBinary()
		_ = yym2910
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2909), d)
		}
	}
	yyj2897++
	if yyhl2897 {
		yyb2897 = yyj2897 > l
	} else {
		yyb2897 = r.CheckBreak()
	}
	if yyb2897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv2911 := &x.VolumesAttached
		yym2912 := z.DecBinary()
		_ = yym2912
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2911), d)
		}
	}
	for {
		yyj2897++
		if yyhl2897 {
			yyb2897 = yyj2897 > l
		} else {
			yyb2897 = r.CheckBreak()
		}
		if yyb2897 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2897-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2913 := z.EncBinary()
	_ = yym2913
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2914 := z.DecBinary()
	_ = yym2914
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2915 := z.EncBinary()
		_ = yym2915
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2916 := !z.EncBinary()
			yy2arr2916 := z.EncBasicHandle().StructToArray
			var yyq2916 [2]bool
			_, _, _ = yysep2916, yyq2916, yy2arr2916
			const yyr2916 bool = false
			var yynn2916 int
			if yyr2916 || yy2arr2916 {
				r.EncodeArrayStart(2)
			} else {
				yynn2916 = 2
				for _, b := range yyq2916 {
					if b {
						yynn2916++
					}
				}
				r.EncodeMapStart(yynn2916)
				yynn2916 = 0
			}
			if yyr2916 || yy2arr2916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr2916 || yy2arr2916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2919 := z.EncBinary()
				_ = yym2919
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2920 := z.EncBinary()
				_ = yym2920
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr2916 || yy2arr2916 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2921 := z.DecBinary()
	_ = yym2921
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2922 := r.ContainerType()
		if yyct2922 == codecSelferValueTypeMap1234 {
			yyl2922 := r.ReadMapStart()
			if yyl2922 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2922, d)
			}
		} else if yyct2922 == codecSelferValueTypeArray1234 {
			yyl2922 := r.ReadArrayStart()
			if yyl2922 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2922, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2923Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2923Slc
	var yyhl2923 bool = l >= 0
	for yyj2923 := 0; ; yyj2923++ {
		if yyhl2923 {
			if yyj2923 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2923Slc = r.DecodeBytes(yys2923Slc, true, true)
		yys2923 := string(yys2923Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2923 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2923)
		} // end switch yys2923
	} // end for yyj2923
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2926 int
	var yyb2926 bool
	var yyhl2926 bool = l >= 0
	yyj2926++
	if yyhl2926 {
		yyb2926 = yyj2926 > l
	} else {
		yyb2926 = r.CheckBreak()
	}
	if yyb2926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj2926++
	if yyhl2926 {
		yyb2926 = yyj2926 > l
	} else {
		yyb2926 = r.CheckBreak()
	}
	if yyb2926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj2926++
		if yyhl2926 {
			yyb2926 = yyj2926 > l
		} else {
			yyb2926 = r.CheckBreak()
		}
		if yyb2926 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2926-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2929 := z.EncBinary()
		_ = yym2929
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2930 := !z.EncBinary()
			yy2arr2930 := z.EncBasicHandle().StructToArray
			var yyq2930 [1]bool
			_, _, _ = yysep2930, yyq2930, yy2arr2930
			const yyr2930 bool = false
			yyq2930[0] = len(x.PreferAvoidPods) != 0
			var yynn2930 int
			if yyr2930 || yy2arr2930 {
				r.EncodeArrayStart(1)
			} else {
				yynn2930 = 0
				for _, b := range yyq2930 {
					if b {
						yynn2930++
					}
				}
				r.EncodeMapStart(yynn2930)
				yynn2930 = 0
			}
			if yyr2930 || yy2arr2930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2930[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2932 := z.EncBinary()
						_ = yym2932
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2930[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2933 := z.EncBinary()
						_ = yym2933
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr2930 || yy2arr2930 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2934 := z.DecBinary()
	_ = yym2934
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2935 := r.ContainerType()
		if yyct2935 == codecSelferValueTypeMap1234 {
			yyl2935 := r.ReadMapStart()
			if yyl2935 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2935, d)
			}
		} else if yyct2935 == codecSelferValueTypeArray1234 {
			yyl2935 := r.ReadArrayStart()
			if yyl2935 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2935, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2936Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2936Slc
	var yyhl2936 bool = l >= 0
	for yyj2936 := 0; ; yyj2936++ {
		if yyhl2936 {
			if yyj2936 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2936Slc = r.DecodeBytes(yys2936Slc, true, true)
		yys2936 := string(yys2936Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2936 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv2937 := &x.PreferAvoidPods
				yym2938 := z.DecBinary()
				_ = yym2938
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2937), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2936)
		} // end switch yys2936
	} // end for yyj2936
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2939 int
	var yyb2939 bool
	var yyhl2939 bool = l >= 0
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv2940 := &x.PreferAvoidPods
		yym2941 := z.DecBinary()
		_ = yym2941
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2940), d)
		}
	}
	for {
		yyj2939++
		if yyhl2939 {
			yyb2939 = yyj2939 > l
		} else {
			yyb2939 = r.CheckBreak()
		}
		if yyb2939 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2939-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2942 := z.EncBinary()
		_ = yym2942
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2943 := !z.EncBinary()
			yy2arr2943 := z.EncBasicHandle().StructToArray
			var yyq2943 [4]bool
			_, _, _ = yysep2943, yyq2943, yy2arr2943
			const yyr2943 bool = false
			yyq2943[1] = true
			yyq2943[2] = x.Reason != ""
			yyq2943[3] = x.Message != ""
			var yynn2943 int
			if yyr2943 || yy2arr2943 {
				r.EncodeArrayStart(4)
			} else {
				yynn2943 = 1
				for _, b := range yyq2943 {
					if b {
						yynn2943++
					}
				}
				r.EncodeMapStart(yynn2943)
				yynn2943 = 0
			}
			if yyr2943 || yy2arr2943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2945 := &x.PodSignature
				yy2945.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2946 := &x.PodSignature
				yy2946.CodecEncodeSelf(e)
			}
			if yyr2943 || yy2arr2943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2943[1] {
					yy2948 := &x.EvictionTime
					yym2949 := z.EncBinary()
					_ = yym2949
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2948) {
					} else if yym2949 {
						z.EncBinaryMarshal(yy2948)
					} else if !yym2949 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2948)
					} else {
						z.EncFallback(yy2948)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2943[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2950 := &x.EvictionTime
					yym2951 := z.EncBinary()
					_ = yym2951
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2950) {
					} else if yym2951 {
						z.EncBinaryMarshal(yy2950)
					} else if !yym2951 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2950)
					} else {
						z.EncFallback(yy2950)
					}
				}
			}
			if yyr2943 || yy2arr2943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2943[2] {
					yym2953 := z.EncBinary()
					_ = yym2953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2943[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2954 := z.EncBinary()
					_ = yym2954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2943 || yy2arr2943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2943[3] {
					yym2956 := z.EncBinary()
					_ = yym2956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2943[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2957 := z.EncBinary()
					_ = yym2957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2943 || yy2arr2943 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2958 := z.DecBinary()
	_ = yym2958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2959 := r.ContainerType()
		if yyct2959 == codecSelferValueTypeMap1234 {
			yyl2959 := r.ReadMapStart()
			if yyl2959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2959, d)
			}
		} else if yyct2959 == codecSelferValueTypeArray1234 {
			yyl2959 := r.ReadArrayStart()
			if yyl2959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2960Slc
	var yyhl2960 bool = l >= 0
	for yyj2960 := 0; ; yyj2960++ {
		if yyhl2960 {
			if yyj2960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2960Slc = r.DecodeBytes(yys2960Slc, true, true)
		yys2960 := string(yys2960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2960 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv2961 := &x.PodSignature
				yyv2961.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv2962 := &x.EvictionTime
				yym2963 := z.DecBinary()
				_ = yym2963
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2962) {
				} else if yym2963 {
					z.DecBinaryUnmarshal(yyv2962)
				} else if !yym2963 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2962)
				} else {
					z.DecFallback(yyv2962, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2960)
		} // end switch yys2960
	} // end for yyj2960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2966 int
	var yyb2966 bool
	var yyhl2966 bool = l >= 0
	yyj2966++
	if yyhl2966 {
		yyb2966 = yyj2966 > l
	} else {
		yyb2966 = r.CheckBreak()
	}
	if yyb2966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv2967 := &x.PodSignature
		yyv2967.CodecDecodeSelf(d)
	}
	yyj2966++
	if yyhl2966 {
		yyb2966 = yyj2966 > l
	} else {
		yyb2966 = r.CheckBreak()
	}
	if yyb2966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv2968 := &x.EvictionTime
		yym2969 := z.DecBinary()
		_ = yym2969
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2968) {
		} else if yym2969 {
			z.DecBinaryUnmarshal(yyv2968)
		} else if !yym2969 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2968)
		} else {
			z.DecFallback(yyv2968, false)
		}
	}
	yyj2966++
	if yyhl2966 {
		yyb2966 = yyj2966 > l
	} else {
		yyb2966 = r.CheckBreak()
	}
	if yyb2966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2966++
	if yyhl2966 {
		yyb2966 = yyj2966 > l
	} else {
		yyb2966 = r.CheckBreak()
	}
	if yyb2966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2966++
		if yyhl2966 {
			yyb2966 = yyj2966 > l
		} else {
			yyb2966 = r.CheckBreak()
		}
		if yyb2966 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2966-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2972 := z.EncBinary()
		_ = yym2972
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2973 := !z.EncBinary()
			yy2arr2973 := z.EncBasicHandle().StructToArray
			var yyq2973 [1]bool
			_, _, _ = yysep2973, yyq2973, yy2arr2973
			const yyr2973 bool = false
			yyq2973[0] = x.PodController != nil
			var yynn2973 int
			if yyr2973 || yy2arr2973 {
				r.EncodeArrayStart(1)
			} else {
				yynn2973 = 0
				for _, b := range yyq2973 {
					if b {
						yynn2973++
					}
				}
				r.EncodeMapStart(yynn2973)
				yynn2973 = 0
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2973[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2973[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2975 := z.DecBinary()
	_ = yym2975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2976 := r.ContainerType()
		if yyct2976 == codecSelferValueTypeMap1234 {
			yyl2976 := r.ReadMapStart()
			if yyl2976 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2976, d)
			}
		} else if yyct2976 == codecSelferValueTypeArray1234 {
			yyl2976 := r.ReadArrayStart()
			if yyl2976 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2977Slc
	var yyhl2977 bool = l >= 0
	for yyj2977 := 0; ; yyj2977++ {
		if yyhl2977 {
			if yyj2977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2977Slc = r.DecodeBytes(yys2977Slc, true, true)
		yys2977 := string(yys2977Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2977 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2977)
		} // end switch yys2977
	} // end for yyj2977
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2979 int
	var yyb2979 bool
	var yyhl2979 bool = l >= 0
	yyj2979++
	if yyhl2979 {
		yyb2979 = yyj2979 > l
	} else {
		yyb2979 = r.CheckBreak()
	}
	if yyb2979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj2979++
		if yyhl2979 {
			yyb2979 = yyj2979 > l
		} else {
			yyb2979 = r.CheckBreak()
		}
		if yyb2979 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2979-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2981 := z.EncBinary()
		_ = yym2981
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2982 := !z.EncBinary()
			yy2arr2982 := z.EncBasicHandle().StructToArray
			var yyq2982 [2]bool
			_, _, _ = yysep2982, yyq2982, yy2arr2982
			const yyr2982 bool = false
			yyq2982[1] = x.SizeBytes != 0
			var yynn2982 int
			if yyr2982 || yy2arr2982 {
				r.EncodeArrayStart(2)
			} else {
				yynn2982 = 1
				for _, b := range yyq2982 {
					if b {
						yynn2982++
					}
				}
				r.EncodeMapStart(yynn2982)
				yynn2982 = 0
			}
			if yyr2982 || yy2arr2982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2984 := z.EncBinary()
					_ = yym2984
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2985 := z.EncBinary()
					_ = yym2985
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr2982 || yy2arr2982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2982[1] {
					yym2987 := z.EncBinary()
					_ = yym2987
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2982[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2988 := z.EncBinary()
					_ = yym2988
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr2982 || yy2arr2982 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2989 := z.DecBinary()
	_ = yym2989
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2990 := r.ContainerType()
		if yyct2990 == codecSelferValueTypeMap1234 {
			yyl2990 := r.ReadMapStart()
			if yyl2990 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2990, d)
			}
		} else if yyct2990 == codecSelferValueTypeArray1234 {
			yyl2990 := r.ReadArrayStart()
			if yyl2990 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2990, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2991Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2991Slc
	var yyhl2991 bool = l >= 0
	for yyj2991 := 0; ; yyj2991++ {
		if yyhl2991 {
			if yyj2991 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2991Slc = r.DecodeBytes(yys2991Slc, true, true)
		yys2991 := string(yys2991Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2991 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv2992 := &x.Names
				yym2993 := z.DecBinary()
				_ = yym2993
				if false {
				} else {
					z.F.DecSliceStringX(yyv2992, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2991)
		} // end switch yys2991
	} // end for yyj2991
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2995 int
	var yyb2995 bool
	var yyhl2995 bool = l >= 0
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv2996 := &x.Names
		yym2997 := z.DecBinary()
		_ = yym2997
		if false {
		} else {
			z.F.DecSliceStringX(yyv2996, false, d)
		}
	}
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj2995++
		if yyhl2995 {
			yyb2995 = yyj2995 > l
		} else {
			yyb2995 = r.CheckBreak()
		}
		if yyb2995 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2995-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2999 := z.EncBinary()
	_ = yym2999
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3000 := z.DecBinary()
	_ = yym3000
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3001 := z.EncBinary()
	_ = yym3001
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3002 := z.DecBinary()
	_ = yym3002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3003 := z.EncBinary()
		_ = yym3003
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3004 := !z.EncBinary()
			yy2arr3004 := z.EncBasicHandle().StructToArray
			var yyq3004 [6]bool
			_, _, _ = yysep3004, yyq3004, yy2arr3004
			const yyr3004 bool = false
			yyq3004[2] = true
			yyq3004[3] = true
			yyq3004[4] = x.Reason != ""
			yyq3004[5] = x.Message != ""
			var yynn3004 int
			if yyr3004 || yy2arr3004 {
				r.EncodeArrayStart(6)
			} else {
				yynn3004 = 2
				for _, b := range yyq3004 {
					if b {
						yynn3004++
					}
				}
				r.EncodeMapStart(yynn3004)
				yynn3004 = 0
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3004[2] {
					yy3008 := &x.LastHeartbeatTime
					yym3009 := z.EncBinary()
					_ = yym3009
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3008) {
					} else if yym3009 {
						z.EncBinaryMarshal(yy3008)
					} else if !yym3009 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3008)
					} else {
						z.EncFallback(yy3008)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3004[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3010 := &x.LastHeartbeatTime
					yym3011 := z.EncBinary()
					_ = yym3011
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3010) {
					} else if yym3011 {
						z.EncBinaryMarshal(yy3010)
					} else if !yym3011 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3010)
					} else {
						z.EncFallback(yy3010)
					}
				}
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3004[3] {
					yy3013 := &x.LastTransitionTime
					yym3014 := z.EncBinary()
					_ = yym3014
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3013) {
					} else if yym3014 {
						z.EncBinaryMarshal(yy3013)
					} else if !yym3014 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3013)
					} else {
						z.EncFallback(yy3013)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3004[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3015 := &x.LastTransitionTime
					yym3016 := z.EncBinary()
					_ = yym3016
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3015) {
					} else if yym3016 {
						z.EncBinaryMarshal(yy3015)
					} else if !yym3016 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3015)
					} else {
						z.EncFallback(yy3015)
					}
				}
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3004[4] {
					yym3018 := z.EncBinary()
					_ = yym3018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3004[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3019 := z.EncBinary()
					_ = yym3019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3004[5] {
					yym3021 := z.EncBinary()
					_ = yym3021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3004[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3022 := z.EncBinary()
					_ = yym3022
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3023 := z.DecBinary()
	_ = yym3023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3024 := r.ContainerType()
		if yyct3024 == codecSelferValueTypeMap1234 {
			yyl3024 := r.ReadMapStart()
			if yyl3024 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3024, d)
			}
		} else if yyct3024 == codecSelferValueTypeArray1234 {
			yyl3024 := r.ReadArrayStart()
			if yyl3024 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3024, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3025Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3025Slc
	var yyhl3025 bool = l >= 0
	for yyj3025 := 0; ; yyj3025++ {
		if yyhl3025 {
			if yyj3025 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3025Slc = r.DecodeBytes(yys3025Slc, true, true)
		yys3025 := string(yys3025Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3025 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3028 := &x.LastHeartbeatTime
				yym3029 := z.DecBinary()
				_ = yym3029
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3028) {
				} else if yym3029 {
					z.DecBinaryUnmarshal(yyv3028)
				} else if !yym3029 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3028)
				} else {
					z.DecFallback(yyv3028, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3030 := &x.LastTransitionTime
				yym3031 := z.DecBinary()
				_ = yym3031
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3030) {
				} else if yym3031 {
					z.DecBinaryUnmarshal(yyv3030)
				} else if !yym3031 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3030)
				} else {
					z.DecFallback(yyv3030, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3025)
		} // end switch yys3025
	} // end for yyj3025
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3034 int
	var yyb3034 bool
	var yyhl3034 bool = l >= 0
	yyj3034++
	if yyhl3034 {
		yyb3034 = yyj3034 > l
	} else {
		yyb3034 = r.CheckBreak()
	}
	if yyb3034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3034++
	if yyhl3034 {
		yyb3034 = yyj3034 > l
	} else {
		yyb3034 = r.CheckBreak()
	}
	if yyb3034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3034++
	if yyhl3034 {
		yyb3034 = yyj3034 > l
	} else {
		yyb3034 = r.CheckBreak()
	}
	if yyb3034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3037 := &x.LastHeartbeatTime
		yym3038 := z.DecBinary()
		_ = yym3038
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3037) {
		} else if yym3038 {
			z.DecBinaryUnmarshal(yyv3037)
		} else if !yym3038 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3037)
		} else {
			z.DecFallback(yyv3037, false)
		}
	}
	yyj3034++
	if yyhl3034 {
		yyb3034 = yyj3034 > l
	} else {
		yyb3034 = r.CheckBreak()
	}
	if yyb3034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3039 := &x.LastTransitionTime
		yym3040 := z.DecBinary()
		_ = yym3040
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3039) {
		} else if yym3040 {
			z.DecBinaryUnmarshal(yyv3039)
		} else if !yym3040 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3039)
		} else {
			z.DecFallback(yyv3039, false)
		}
	}
	yyj3034++
	if yyhl3034 {
		yyb3034 = yyj3034 > l
	} else {
		yyb3034 = r.CheckBreak()
	}
	if yyb3034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3034++
	if yyhl3034 {
		yyb3034 = yyj3034 > l
	} else {
		yyb3034 = r.CheckBreak()
	}
	if yyb3034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3034++
		if yyhl3034 {
			yyb3034 = yyj3034 > l
		} else {
			yyb3034 = r.CheckBreak()
		}
		if yyb3034 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3034-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3043 := z.EncBinary()
	_ = yym3043
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3044 := z.DecBinary()
	_ = yym3044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3045 := z.EncBinary()
		_ = yym3045
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3046 := !z.EncBinary()
			yy2arr3046 := z.EncBasicHandle().StructToArray
			var yyq3046 [2]bool
			_, _, _ = yysep3046, yyq3046, yy2arr3046
			const yyr3046 bool = false
			var yynn3046 int
			if yyr3046 || yy2arr3046 {
				r.EncodeArrayStart(2)
			} else {
				yynn3046 = 2
				for _, b := range yyq3046 {
					if b {
						yynn3046++
					}
				}
				r.EncodeMapStart(yynn3046)
				yynn3046 = 0
			}
			if yyr3046 || yy2arr3046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3046 || yy2arr3046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3049 := z.EncBinary()
				_ = yym3049
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3050 := z.EncBinary()
				_ = yym3050
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3046 || yy2arr3046 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3051 := z.DecBinary()
	_ = yym3051
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3052 := r.ContainerType()
		if yyct3052 == codecSelferValueTypeMap1234 {
			yyl3052 := r.ReadMapStart()
			if yyl3052 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3052, d)
			}
		} else if yyct3052 == codecSelferValueTypeArray1234 {
			yyl3052 := r.ReadArrayStart()
			if yyl3052 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3052, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3053Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3053Slc
	var yyhl3053 bool = l >= 0
	for yyj3053 := 0; ; yyj3053++ {
		if yyhl3053 {
			if yyj3053 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3053Slc = r.DecodeBytes(yys3053Slc, true, true)
		yys3053 := string(yys3053Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3053 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3053)
		} // end switch yys3053
	} // end for yyj3053
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3056 int
	var yyb3056 bool
	var yyhl3056 bool = l >= 0
	yyj3056++
	if yyhl3056 {
		yyb3056 = yyj3056 > l
	} else {
		yyb3056 = r.CheckBreak()
	}
	if yyb3056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3056++
	if yyhl3056 {
		yyb3056 = yyj3056 > l
	} else {
		yyb3056 = r.CheckBreak()
	}
	if yyb3056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3056++
		if yyhl3056 {
			yyb3056 = yyj3056 > l
		} else {
			yyb3056 = r.CheckBreak()
		}
		if yyb3056 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3056-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3059 := z.EncBinary()
	_ = yym3059
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3060 := z.DecBinary()
	_ = yym3060
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3061 := z.EncBinary()
		_ = yym3061
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3062 := z.DecBinary()
	_ = yym3062
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3063 := z.EncBinary()
		_ = yym3063
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3064 := !z.EncBinary()
			yy2arr3064 := z.EncBasicHandle().StructToArray
			var yyq3064 [5]bool
			_, _, _ = yysep3064, yyq3064, yy2arr3064
			const yyr3064 bool = false
			yyq3064[0] = x.Kind != ""
			yyq3064[1] = x.APIVersion != ""
			yyq3064[2] = true
			yyq3064[3] = true
			yyq3064[4] = true
			var yynn3064 int
			if yyr3064 || yy2arr3064 {
				r.EncodeArrayStart(5)
			} else {
				yynn3064 = 0
				for _, b := range yyq3064 {
					if b {
						yynn3064++
					}
				}
				r.EncodeMapStart(yynn3064)
				yynn3064 = 0
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[0] {
					yym3066 := z.EncBinary()
					_ = yym3066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3064[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3067 := z.EncBinary()
					_ = yym3067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[1] {
					yym3069 := z.EncBinary()
					_ = yym3069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3064[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3070 := z.EncBinary()
					_ = yym3070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[2] {
					yy3072 := &x.ObjectMeta
					yy3072.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3073 := &x.ObjectMeta
					yy3073.CodecEncodeSelf(e)
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[3] {
					yy3075 := &x.Spec
					yy3075.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3076 := &x.Spec
					yy3076.CodecEncodeSelf(e)
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[4] {
					yy3078 := &x.Status
					yy3078.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3079 := &x.Status
					yy3079.CodecEncodeSelf(e)
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3080 := z.DecBinary()
	_ = yym3080
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3081 := r.ContainerType()
		if yyct3081 == codecSelferValueTypeMap1234 {
			yyl3081 := r.ReadMapStart()
			if yyl3081 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3081, d)
			}
		} else if yyct3081 == codecSelferValueTypeArray1234 {
			yyl3081 := r.ReadArrayStart()
			if yyl3081 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3081, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3082Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3082Slc
	var yyhl3082 bool = l >= 0
	for yyj3082 := 0; ; yyj3082++ {
		if yyhl3082 {
			if yyj3082 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3082Slc = r.DecodeBytes(yys3082Slc, true, true)
		yys3082 := string(yys3082Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3082 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3085 := &x.ObjectMeta
				yyv3085.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3086 := &x.Spec
				yyv3086.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3087 := &x.Status
				yyv3087.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3082)
		} // end switch yys3082
	} // end for yyj3082
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3088 int
	var yyb3088 bool
	var yyhl3088 bool = l >= 0
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3091 := &x.ObjectMeta
		yyv3091.CodecDecodeSelf(d)
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3092 := &x.Spec
		yyv3092.CodecDecodeSelf(d)
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3093 := &x.Status
		yyv3093.CodecDecodeSelf(d)
	}
	for {
		yyj3088++
		if yyhl3088 {
			yyb3088 = yyj3088 > l
		} else {
			yyb3088 = r.CheckBreak()
		}
		if yyb3088 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3088-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3094 := z.EncBinary()
		_ = yym3094
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3095 := !z.EncBinary()
			yy2arr3095 := z.EncBasicHandle().StructToArray
			var yyq3095 [4]bool
			_, _, _ = yysep3095, yyq3095, yy2arr3095
			const yyr3095 bool = false
			yyq3095[0] = x.Kind != ""
			yyq3095[1] = x.APIVersion != ""
			yyq3095[2] = true
			var yynn3095 int
			if yyr3095 || yy2arr3095 {
				r.EncodeArrayStart(4)
			} else {
				yynn3095 = 1
				for _, b := range yyq3095 {
					if b {
						yynn3095++
					}
				}
				r.EncodeMapStart(yynn3095)
				yynn3095 = 0
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3095[0] {
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3095[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3098 := z.EncBinary()
					_ = yym3098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3095[1] {
					yym3100 := z.EncBinary()
					_ = yym3100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3095[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3101 := z.EncBinary()
					_ = yym3101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3095[2] {
					yy3103 := &x.ListMeta
					yym3104 := z.EncBinary()
					_ = yym3104
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3103) {
					} else {
						z.EncFallback(yy3103)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3095[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3105 := &x.ListMeta
					yym3106 := z.EncBinary()
					_ = yym3106
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3105) {
					} else {
						z.EncFallback(yy3105)
					}
				}
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3108 := z.EncBinary()
					_ = yym3108
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3109 := z.EncBinary()
					_ = yym3109
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3110 := z.DecBinary()
	_ = yym3110
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3111 := r.ContainerType()
		if yyct3111 == codecSelferValueTypeMap1234 {
			yyl3111 := r.ReadMapStart()
			if yyl3111 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3111, d)
			}
		} else if yyct3111 == codecSelferValueTypeArray1234 {
			yyl3111 := r.ReadArrayStart()
			if yyl3111 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3111, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3112Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3112Slc
	var yyhl3112 bool = l >= 0
	for yyj3112 := 0; ; yyj3112++ {
		if yyhl3112 {
			if yyj3112 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3112Slc = r.DecodeBytes(yys3112Slc, true, true)
		yys3112 := string(yys3112Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3112 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3115 := &x.ListMeta
				yym3116 := z.DecBinary()
				_ = yym3116
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3115) {
				} else {
					z.DecFallback(yyv3115, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3117 := &x.Items
				yym3118 := z.DecBinary()
				_ = yym3118
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3117), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3112)
		} // end switch yys3112
	} // end for yyj3112
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3119 int
	var yyb3119 bool
	var yyhl3119 bool = l >= 0
	yyj3119++
	if yyhl3119 {
		yyb3119 = yyj3119 > l
	} else {
		yyb3119 = r.CheckBreak()
	}
	if yyb3119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3119++
	if yyhl3119 {
		yyb3119 = yyj3119 > l
	} else {
		yyb3119 = r.CheckBreak()
	}
	if yyb3119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3119++
	if yyhl3119 {
		yyb3119 = yyj3119 > l
	} else {
		yyb3119 = r.CheckBreak()
	}
	if yyb3119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3122 := &x.ListMeta
		yym3123 := z.DecBinary()
		_ = yym3123
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3122) {
		} else {
			z.DecFallback(yyv3122, false)
		}
	}
	yyj3119++
	if yyhl3119 {
		yyb3119 = yyj3119 > l
	} else {
		yyb3119 = r.CheckBreak()
	}
	if yyb3119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3124 := &x.Items
		yym3125 := z.DecBinary()
		_ = yym3125
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3124), d)
		}
	}
	for {
		yyj3119++
		if yyhl3119 {
			yyb3119 = yyj3119 > l
		} else {
			yyb3119 = r.CheckBreak()
		}
		if yyb3119 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3119-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3126 := z.EncBinary()
	_ = yym3126
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3127 := z.DecBinary()
	_ = yym3127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3128 := z.EncBinary()
		_ = yym3128
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3129 := !z.EncBinary()
			yy2arr3129 := z.EncBasicHandle().StructToArray
			var yyq3129 [1]bool
			_, _, _ = yysep3129, yyq3129, yy2arr3129
			const yyr3129 bool = false
			yyq3129[0] = len(x.Finalizers) != 0
			var yynn3129 int
			if yyr3129 || yy2arr3129 {
				r.EncodeArrayStart(1)
			} else {
				yynn3129 = 0
				for _, b := range yyq3129 {
					if b {
						yynn3129++
					}
				}
				r.EncodeMapStart(yynn3129)
				yynn3129 = 0
			}
			if yyr3129 || yy2arr3129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3129[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3131 := z.EncBinary()
						_ = yym3131
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3129[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3132 := z.EncBinary()
						_ = yym3132
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3129 || yy2arr3129 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3133 := z.DecBinary()
	_ = yym3133
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3134 := r.ContainerType()
		if yyct3134 == codecSelferValueTypeMap1234 {
			yyl3134 := r.ReadMapStart()
			if yyl3134 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3134, d)
			}
		} else if yyct3134 == codecSelferValueTypeArray1234 {
			yyl3134 := r.ReadArrayStart()
			if yyl3134 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3134, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3135Slc
	var yyhl3135 bool = l >= 0
	for yyj3135 := 0; ; yyj3135++ {
		if yyhl3135 {
			if yyj3135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3135Slc = r.DecodeBytes(yys3135Slc, true, true)
		yys3135 := string(yys3135Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3135 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3136 := &x.Finalizers
				yym3137 := z.DecBinary()
				_ = yym3137
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3136), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3135)
		} // end switch yys3135
	} // end for yyj3135
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3138 int
	var yyb3138 bool
	var yyhl3138 bool = l >= 0
	yyj3138++
	if yyhl3138 {
		yyb3138 = yyj3138 > l
	} else {
		yyb3138 = r.CheckBreak()
	}
	if yyb3138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3139 := &x.Finalizers
		yym3140 := z.DecBinary()
		_ = yym3140
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3139), d)
		}
	}
	for {
		yyj3138++
		if yyhl3138 {
			yyb3138 = yyj3138 > l
		} else {
			yyb3138 = r.CheckBreak()
		}
		if yyb3138 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3138-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3141 := z.EncBinary()
		_ = yym3141
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3142 := !z.EncBinary()
			yy2arr3142 := z.EncBasicHandle().StructToArray
			var yyq3142 [1]bool
			_, _, _ = yysep3142, yyq3142, yy2arr3142
			const yyr3142 bool = false
			yyq3142[0] = x.Phase != ""
			var yynn3142 int
			if yyr3142 || yy2arr3142 {
				r.EncodeArrayStart(1)
			} else {
				yynn3142 = 0
				for _, b := range yyq3142 {
					if b {
						yynn3142++
					}
				}
				r.EncodeMapStart(yynn3142)
				yynn3142 = 0
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3142[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3142[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3144 := z.DecBinary()
	_ = yym3144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3145 := r.ContainerType()
		if yyct3145 == codecSelferValueTypeMap1234 {
			yyl3145 := r.ReadMapStart()
			if yyl3145 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3145, d)
			}
		} else if yyct3145 == codecSelferValueTypeArray1234 {
			yyl3145 := r.ReadArrayStart()
			if yyl3145 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3145, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3146Slc
	var yyhl3146 bool = l >= 0
	for yyj3146 := 0; ; yyj3146++ {
		if yyhl3146 {
			if yyj3146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3146Slc = r.DecodeBytes(yys3146Slc, true, true)
		yys3146 := string(yys3146Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3146 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3146)
		} // end switch yys3146
	} // end for yyj3146
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3148 int
	var yyb3148 bool
	var yyhl3148 bool = l >= 0
	yyj3148++
	if yyhl3148 {
		yyb3148 = yyj3148 > l
	} else {
		yyb3148 = r.CheckBreak()
	}
	if yyb3148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3148++
		if yyhl3148 {
			yyb3148 = yyj3148 > l
		} else {
			yyb3148 = r.CheckBreak()
		}
		if yyb3148 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3148-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3150 := z.EncBinary()
	_ = yym3150
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3151 := z.DecBinary()
	_ = yym3151
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3152 := z.EncBinary()
		_ = yym3152
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3153 := !z.EncBinary()
			yy2arr3153 := z.EncBasicHandle().StructToArray
			var yyq3153 [5]bool
			_, _, _ = yysep3153, yyq3153, yy2arr3153
			const yyr3153 bool = false
			yyq3153[0] = x.Kind != ""
			yyq3153[1] = x.APIVersion != ""
			yyq3153[2] = true
			yyq3153[3] = true
			yyq3153[4] = true
			var yynn3153 int
			if yyr3153 || yy2arr3153 {
				r.EncodeArrayStart(5)
			} else {
				yynn3153 = 0
				for _, b := range yyq3153 {
					if b {
						yynn3153++
					}
				}
				r.EncodeMapStart(yynn3153)
				yynn3153 = 0
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3153[0] {
					yym3155 := z.EncBinary()
					_ = yym3155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3153[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3156 := z.EncBinary()
					_ = yym3156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3153[1] {
					yym3158 := z.EncBinary()
					_ = yym3158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3153[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3159 := z.EncBinary()
					_ = yym3159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3153[2] {
					yy3161 := &x.ObjectMeta
					yy3161.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3153[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3162 := &x.ObjectMeta
					yy3162.CodecEncodeSelf(e)
				}
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3153[3] {
					yy3164 := &x.Spec
					yy3164.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3153[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3165 := &x.Spec
					yy3165.CodecEncodeSelf(e)
				}
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3153[4] {
					yy3167 := &x.Status
					yy3167.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3153[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3168 := &x.Status
					yy3168.CodecEncodeSelf(e)
				}
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3169 := z.DecBinary()
	_ = yym3169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3170 := r.ContainerType()
		if yyct3170 == codecSelferValueTypeMap1234 {
			yyl3170 := r.ReadMapStart()
			if yyl3170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3170, d)
			}
		} else if yyct3170 == codecSelferValueTypeArray1234 {
			yyl3170 := r.ReadArrayStart()
			if yyl3170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3171Slc
	var yyhl3171 bool = l >= 0
	for yyj3171 := 0; ; yyj3171++ {
		if yyhl3171 {
			if yyj3171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3171Slc = r.DecodeBytes(yys3171Slc, true, true)
		yys3171 := string(yys3171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3171 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3174 := &x.ObjectMeta
				yyv3174.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3175 := &x.Spec
				yyv3175.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3176 := &x.Status
				yyv3176.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3171)
		} // end switch yys3171
	} // end for yyj3171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3177 int
	var yyb3177 bool
	var yyhl3177 bool = l >= 0
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3180 := &x.ObjectMeta
		yyv3180.CodecDecodeSelf(d)
	}
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3181 := &x.Spec
		yyv3181.CodecDecodeSelf(d)
	}
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3182 := &x.Status
		yyv3182.CodecDecodeSelf(d)
	}
	for {
		yyj3177++
		if yyhl3177 {
			yyb3177 = yyj3177 > l
		} else {
			yyb3177 = r.CheckBreak()
		}
		if yyb3177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3183 := z.EncBinary()
		_ = yym3183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3184 := !z.EncBinary()
			yy2arr3184 := z.EncBasicHandle().StructToArray
			var yyq3184 [4]bool
			_, _, _ = yysep3184, yyq3184, yy2arr3184
			const yyr3184 bool = false
			yyq3184[0] = x.Kind != ""
			yyq3184[1] = x.APIVersion != ""
			yyq3184[2] = true
			var yynn3184 int
			if yyr3184 || yy2arr3184 {
				r.EncodeArrayStart(4)
			} else {
				yynn3184 = 1
				for _, b := range yyq3184 {
					if b {
						yynn3184++
					}
				}
				r.EncodeMapStart(yynn3184)
				yynn3184 = 0
			}
			if yyr3184 || yy2arr3184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3184[0] {
					yym3186 := z.EncBinary()
					_ = yym3186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3184[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3184 || yy2arr3184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3184[1] {
					yym3189 := z.EncBinary()
					_ = yym3189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3184[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3190 := z.EncBinary()
					_ = yym3190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3184 || yy2arr3184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3184[2] {
					yy3192 := &x.ListMeta
					yym3193 := z.EncBinary()
					_ = yym3193
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3192) {
					} else {
						z.EncFallback(yy3192)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3184[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3194 := &x.ListMeta
					yym3195 := z.EncBinary()
					_ = yym3195
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3194) {
					} else {
						z.EncFallback(yy3194)
					}
				}
			}
			if yyr3184 || yy2arr3184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3197 := z.EncBinary()
					_ = yym3197
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3198 := z.EncBinary()
					_ = yym3198
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3184 || yy2arr3184 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3199 := z.DecBinary()
	_ = yym3199
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3200 := r.ContainerType()
		if yyct3200 == codecSelferValueTypeMap1234 {
			yyl3200 := r.ReadMapStart()
			if yyl3200 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3200, d)
			}
		} else if yyct3200 == codecSelferValueTypeArray1234 {
			yyl3200 := r.ReadArrayStart()
			if yyl3200 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3200, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3201Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3201Slc
	var yyhl3201 bool = l >= 0
	for yyj3201 := 0; ; yyj3201++ {
		if yyhl3201 {
			if yyj3201 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3201Slc = r.DecodeBytes(yys3201Slc, true, true)
		yys3201 := string(yys3201Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3201 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3204 := &x.ListMeta
				yym3205 := z.DecBinary()
				_ = yym3205
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3204) {
				} else {
					z.DecFallback(yyv3204, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3206 := &x.Items
				yym3207 := z.DecBinary()
				_ = yym3207
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3206), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3201)
		} // end switch yys3201
	} // end for yyj3201
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3208 int
	var yyb3208 bool
	var yyhl3208 bool = l >= 0
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3211 := &x.ListMeta
		yym3212 := z.DecBinary()
		_ = yym3212
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3211) {
		} else {
			z.DecFallback(yyv3211, false)
		}
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3213 := &x.Items
		yym3214 := z.DecBinary()
		_ = yym3214
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3213), d)
		}
	}
	for {
		yyj3208++
		if yyhl3208 {
			yyb3208 = yyj3208 > l
		} else {
			yyb3208 = r.CheckBreak()
		}
		if yyb3208 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3208-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3215 := z.EncBinary()
		_ = yym3215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3216 := !z.EncBinary()
			yy2arr3216 := z.EncBasicHandle().StructToArray
			var yyq3216 [4]bool
			_, _, _ = yysep3216, yyq3216, yy2arr3216
			const yyr3216 bool = false
			yyq3216[0] = x.Kind != ""
			yyq3216[1] = x.APIVersion != ""
			yyq3216[2] = true
			var yynn3216 int
			if yyr3216 || yy2arr3216 {
				r.EncodeArrayStart(4)
			} else {
				yynn3216 = 1
				for _, b := range yyq3216 {
					if b {
						yynn3216++
					}
				}
				r.EncodeMapStart(yynn3216)
				yynn3216 = 0
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[0] {
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3216[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3219 := z.EncBinary()
					_ = yym3219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[1] {
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3216[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[2] {
					yy3224 := &x.ObjectMeta
					yy3224.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3216[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3225 := &x.ObjectMeta
					yy3225.CodecEncodeSelf(e)
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3227 := &x.Target
				yy3227.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3228 := &x.Target
				yy3228.CodecEncodeSelf(e)
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3229 := z.DecBinary()
	_ = yym3229
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3230 := r.ContainerType()
		if yyct3230 == codecSelferValueTypeMap1234 {
			yyl3230 := r.ReadMapStart()
			if yyl3230 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3230, d)
			}
		} else if yyct3230 == codecSelferValueTypeArray1234 {
			yyl3230 := r.ReadArrayStart()
			if yyl3230 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3230, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3231Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3231Slc
	var yyhl3231 bool = l >= 0
	for yyj3231 := 0; ; yyj3231++ {
		if yyhl3231 {
			if yyj3231 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3231Slc = r.DecodeBytes(yys3231Slc, true, true)
		yys3231 := string(yys3231Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3231 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3234 := &x.ObjectMeta
				yyv3234.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3235 := &x.Target
				yyv3235.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3231)
		} // end switch yys3231
	} // end for yyj3231
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3236 int
	var yyb3236 bool
	var yyhl3236 bool = l >= 0
	yyj3236++
	if yyhl3236 {
		yyb3236 = yyj3236 > l
	} else {
		yyb3236 = r.CheckBreak()
	}
	if yyb3236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3236++
	if yyhl3236 {
		yyb3236 = yyj3236 > l
	} else {
		yyb3236 = r.CheckBreak()
	}
	if yyb3236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3236++
	if yyhl3236 {
		yyb3236 = yyj3236 > l
	} else {
		yyb3236 = r.CheckBreak()
	}
	if yyb3236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3239 := &x.ObjectMeta
		yyv3239.CodecDecodeSelf(d)
	}
	yyj3236++
	if yyhl3236 {
		yyb3236 = yyj3236 > l
	} else {
		yyb3236 = r.CheckBreak()
	}
	if yyb3236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3240 := &x.Target
		yyv3240.CodecDecodeSelf(d)
	}
	for {
		yyj3236++
		if yyhl3236 {
			yyb3236 = yyj3236 > l
		} else {
			yyb3236 = r.CheckBreak()
		}
		if yyb3236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3241 := z.EncBinary()
		_ = yym3241
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3242 := !z.EncBinary()
			yy2arr3242 := z.EncBasicHandle().StructToArray
			var yyq3242 [1]bool
			_, _, _ = yysep3242, yyq3242, yy2arr3242
			const yyr3242 bool = false
			yyq3242[0] = x.UID != nil
			var yynn3242 int
			if yyr3242 || yy2arr3242 {
				r.EncodeArrayStart(1)
			} else {
				yynn3242 = 0
				for _, b := range yyq3242 {
					if b {
						yynn3242++
					}
				}
				r.EncodeMapStart(yynn3242)
				yynn3242 = 0
			}
			if yyr3242 || yy2arr3242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3242[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3244 := *x.UID
						yym3245 := z.EncBinary()
						_ = yym3245
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3244) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3244))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3242[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3246 := *x.UID
						yym3247 := z.EncBinary()
						_ = yym3247
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3246) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3246))
						}
					}
				}
			}
			if yyr3242 || yy2arr3242 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3248 := z.DecBinary()
	_ = yym3248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3249 := r.ContainerType()
		if yyct3249 == codecSelferValueTypeMap1234 {
			yyl3249 := r.ReadMapStart()
			if yyl3249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3249, d)
			}
		} else if yyct3249 == codecSelferValueTypeArray1234 {
			yyl3249 := r.ReadArrayStart()
			if yyl3249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3250Slc
	var yyhl3250 bool = l >= 0
	for yyj3250 := 0; ; yyj3250++ {
		if yyhl3250 {
			if yyj3250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3250Slc = r.DecodeBytes(yys3250Slc, true, true)
		yys3250 := string(yys3250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3250 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3252 := z.DecBinary()
				_ = yym3252
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3250)
		} // end switch yys3250
	} // end for yyj3250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3253 int
	var yyb3253 bool
	var yyhl3253 bool = l >= 0
	yyj3253++
	if yyhl3253 {
		yyb3253 = yyj3253 > l
	} else {
		yyb3253 = r.CheckBreak()
	}
	if yyb3253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3255 := z.DecBinary()
		_ = yym3255
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3253++
		if yyhl3253 {
			yyb3253 = yyj3253 > l
		} else {
			yyb3253 = r.CheckBreak()
		}
		if yyb3253 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3253-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3256 := z.EncBinary()
		_ = yym3256
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3257 := !z.EncBinary()
			yy2arr3257 := z.EncBasicHandle().StructToArray
			var yyq3257 [5]bool
			_, _, _ = yysep3257, yyq3257, yy2arr3257
			const yyr3257 bool = false
			yyq3257[0] = x.Kind != ""
			yyq3257[1] = x.APIVersion != ""
			yyq3257[2] = x.GracePeriodSeconds != nil
			yyq3257[3] = x.Preconditions != nil
			yyq3257[4] = x.OrphanDependents != nil
			var yynn3257 int
			if yyr3257 || yy2arr3257 {
				r.EncodeArrayStart(5)
			} else {
				yynn3257 = 0
				for _, b := range yyq3257 {
					if b {
						yynn3257++
					}
				}
				r.EncodeMapStart(yynn3257)
				yynn3257 = 0
			}
			if yyr3257 || yy2arr3257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3257[0] {
					yym3259 := z.EncBinary()
					_ = yym3259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3257[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3260 := z.EncBinary()
					_ = yym3260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3257 || yy2arr3257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3257[1] {
					yym3262 := z.EncBinary()
					_ = yym3262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3257[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3263 := z.EncBinary()
					_ = yym3263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3257 || yy2arr3257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3257[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3265 := *x.GracePeriodSeconds
						yym3266 := z.EncBinary()
						_ = yym3266
						if false {
						} else {
							r.EncodeInt(int64(yy3265))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3257[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3267 := *x.GracePeriodSeconds
						yym3268 := z.EncBinary()
						_ = yym3268
						if false {
						} else {
							r.EncodeInt(int64(yy3267))
						}
					}
				}
			}
			if yyr3257 || yy2arr3257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3257[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3257[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3257 || yy2arr3257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3257[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3271 := *x.OrphanDependents
						yym3272 := z.EncBinary()
						_ = yym3272
						if false {
						} else {
							r.EncodeBool(bool(yy3271))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3257[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3273 := *x.OrphanDependents
						yym3274 := z.EncBinary()
						_ = yym3274
						if false {
						} else {
							r.EncodeBool(bool(yy3273))
						}
					}
				}
			}
			if yyr3257 || yy2arr3257 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3275 := z.DecBinary()
	_ = yym3275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3276 := r.ContainerType()
		if yyct3276 == codecSelferValueTypeMap1234 {
			yyl3276 := r.ReadMapStart()
			if yyl3276 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3276, d)
			}
		} else if yyct3276 == codecSelferValueTypeArray1234 {
			yyl3276 := r.ReadArrayStart()
			if yyl3276 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3277Slc
	var yyhl3277 bool = l >= 0
	for yyj3277 := 0; ; yyj3277++ {
		if yyhl3277 {
			if yyj3277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3277Slc = r.DecodeBytes(yys3277Slc, true, true)
		yys3277 := string(yys3277Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3277 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3281 := z.DecBinary()
				_ = yym3281
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3284 := z.DecBinary()
				_ = yym3284
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3277)
		} // end switch yys3277
	} // end for yyj3277
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3285 int
	var yyb3285 bool
	var yyhl3285 bool = l >= 0
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3289 := z.DecBinary()
		_ = yym3289
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3292 := z.DecBinary()
		_ = yym3292
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3285++
		if yyhl3285 {
			yyb3285 = yyj3285 > l
		} else {
			yyb3285 = r.CheckBreak()
		}
		if yyb3285 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3285-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3293 := z.EncBinary()
		_ = yym3293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3294 := !z.EncBinary()
			yy2arr3294 := z.EncBasicHandle().StructToArray
			var yyq3294 [4]bool
			_, _, _ = yysep3294, yyq3294, yy2arr3294
			const yyr3294 bool = false
			yyq3294[0] = x.Kind != ""
			yyq3294[1] = x.APIVersion != ""
			var yynn3294 int
			if yyr3294 || yy2arr3294 {
				r.EncodeArrayStart(4)
			} else {
				yynn3294 = 2
				for _, b := range yyq3294 {
					if b {
						yynn3294++
					}
				}
				r.EncodeMapStart(yynn3294)
				yynn3294 = 0
			}
			if yyr3294 || yy2arr3294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3294[0] {
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3294[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3297 := z.EncBinary()
					_ = yym3297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3294 || yy2arr3294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3294[1] {
					yym3299 := z.EncBinary()
					_ = yym3299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3294[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3300 := z.EncBinary()
					_ = yym3300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3294 || yy2arr3294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3302 := z.EncBinary()
				_ = yym3302
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3303 := z.EncBinary()
				_ = yym3303
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3294 || yy2arr3294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3305 := z.EncBinary()
				_ = yym3305
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3306 := z.EncBinary()
				_ = yym3306
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3294 || yy2arr3294 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3307 := z.DecBinary()
	_ = yym3307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3308 := r.ContainerType()
		if yyct3308 == codecSelferValueTypeMap1234 {
			yyl3308 := r.ReadMapStart()
			if yyl3308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3308, d)
			}
		} else if yyct3308 == codecSelferValueTypeArray1234 {
			yyl3308 := r.ReadArrayStart()
			if yyl3308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3309Slc
	var yyhl3309 bool = l >= 0
	for yyj3309 := 0; ; yyj3309++ {
		if yyhl3309 {
			if yyj3309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3309Slc = r.DecodeBytes(yys3309Slc, true, true)
		yys3309 := string(yys3309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3309 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3309)
		} // end switch yys3309
	} // end for yyj3309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3314 int
	var yyb3314 bool
	var yyhl3314 bool = l >= 0
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3314++
		if yyhl3314 {
			yyb3314 = yyj3314 > l
		} else {
			yyb3314 = r.CheckBreak()
		}
		if yyb3314 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3314-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3319 := z.EncBinary()
		_ = yym3319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3320 := !z.EncBinary()
			yy2arr3320 := z.EncBasicHandle().StructToArray
			var yyq3320 [7]bool
			_, _, _ = yysep3320, yyq3320, yy2arr3320
			const yyr3320 bool = false
			yyq3320[0] = x.Kind != ""
			yyq3320[1] = x.APIVersion != ""
			yyq3320[2] = x.LabelSelector != ""
			yyq3320[3] = x.FieldSelector != ""
			yyq3320[4] = x.Watch != false
			yyq3320[5] = x.ResourceVersion != ""
			yyq3320[6] = x.TimeoutSeconds != nil
			var yynn3320 int
			if yyr3320 || yy2arr3320 {
				r.EncodeArrayStart(7)
			} else {
				yynn3320 = 0
				for _, b := range yyq3320 {
					if b {
						yynn3320++
					}
				}
				r.EncodeMapStart(yynn3320)
				yynn3320 = 0
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3320[0] {
					yym3322 := z.EncBinary()
					_ = yym3322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3320[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3323 := z.EncBinary()
					_ = yym3323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3320[1] {
					yym3325 := z.EncBinary()
					_ = yym3325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3320[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3326 := z.EncBinary()
					_ = yym3326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3320[2] {
					yym3328 := z.EncBinary()
					_ = yym3328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3320[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3329 := z.EncBinary()
					_ = yym3329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3320[3] {
					yym3331 := z.EncBinary()
					_ = yym3331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3320[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3332 := z.EncBinary()
					_ = yym3332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3320[4] {
					yym3334 := z.EncBinary()
					_ = yym3334
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3320[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3335 := z.EncBinary()
					_ = yym3335
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3320[5] {
					yym3337 := z.EncBinary()
					_ = yym3337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3320[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3338 := z.EncBinary()
					_ = yym3338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3320[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3340 := *x.TimeoutSeconds
						yym3341 := z.EncBinary()
						_ = yym3341
						if false {
						} else {
							r.EncodeInt(int64(yy3340))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3320[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3342 := *x.TimeoutSeconds
						yym3343 := z.EncBinary()
						_ = yym3343
						if false {
						} else {
							r.EncodeInt(int64(yy3342))
						}
					}
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3344 := z.DecBinary()
	_ = yym3344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3345 := r.ContainerType()
		if yyct3345 == codecSelferValueTypeMap1234 {
			yyl3345 := r.ReadMapStart()
			if yyl3345 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3345, d)
			}
		} else if yyct3345 == codecSelferValueTypeArray1234 {
			yyl3345 := r.ReadArrayStart()
			if yyl3345 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3346Slc
	var yyhl3346 bool = l >= 0
	for yyj3346 := 0; ; yyj3346++ {
		if yyhl3346 {
			if yyj3346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3346Slc = r.DecodeBytes(yys3346Slc, true, true)
		yys3346 := string(yys3346Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3346 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3354 := z.DecBinary()
				_ = yym3354
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3346)
		} // end switch yys3346
	} // end for yyj3346
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3355 int
	var yyb3355 bool
	var yyhl3355 bool = l >= 0
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3363 := z.DecBinary()
		_ = yym3363
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3355++
		if yyhl3355 {
			yyb3355 = yyj3355 > l
		} else {
			yyb3355 = r.CheckBreak()
		}
		if yyb3355 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3355-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3364 := z.EncBinary()
		_ = yym3364
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3365 := !z.EncBinary()
			yy2arr3365 := z.EncBasicHandle().StructToArray
			var yyq3365 [10]bool
			_, _, _ = yysep3365, yyq3365, yy2arr3365
			const yyr3365 bool = false
			yyq3365[0] = x.Kind != ""
			yyq3365[1] = x.APIVersion != ""
			yyq3365[2] = x.Container != ""
			yyq3365[3] = x.Follow != false
			yyq3365[4] = x.Previous != false
			yyq3365[5] = x.SinceSeconds != nil
			yyq3365[6] = x.SinceTime != nil
			yyq3365[7] = x.Timestamps != false
			yyq3365[8] = x.TailLines != nil
			yyq3365[9] = x.LimitBytes != nil
			var yynn3365 int
			if yyr3365 || yy2arr3365 {
				r.EncodeArrayStart(10)
			} else {
				yynn3365 = 0
				for _, b := range yyq3365 {
					if b {
						yynn3365++
					}
				}
				r.EncodeMapStart(yynn3365)
				yynn3365 = 0
			}
			if yyr3365 || yy2arr3365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3365[0] {
					yym3367 := z.EncBinary()
					_ = yym3367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3365[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3368 := z.EncBinary()
					_ = yym3368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3365 || yy2arr3365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3365[1] {
					yym3370 := z.EncBinary()
					_ = yym3370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3365[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3365 || yy2arr3365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3365[2] {
					yym3373 := z.EncBinary()
					_ = yym3373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3365[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3374 := z.EncBinary()
					_ = yym3374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3365 || yy2arr3365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3365[3] {
					yym3376 := z.EncBinary()
					_ = yym3376
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3365[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3377 := z.EncBinary()
					_ = yym3377
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3365 || yy2arr3365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3365[4] {
					yym3379 := z.EncBinary()
					_ = yym3379
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3365[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3380 := z.EncBinary()
					_ = yym3380
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3365 || yy2arr3365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3365[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3382 := *x.SinceSeconds
						yym3383 := z.EncBinary()
						_ = yym3383
						if false {
						} else {
							r.EncodeInt(int64(yy3382))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3365[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3384 := *x.SinceSeconds
						yym3385 := z.EncBinary()
						_ = yym3385
						if false {
						} else {
							r.EncodeInt(int64(yy3384))
						}
					}
				}
			}
			if yyr3365 || yy2arr3365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3365[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3387 := z.EncBinary()
						_ = yym3387
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3387 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3387 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3365[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3388 := z.EncBinary()
						_ = yym3388
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3388 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3388 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3365 || yy2arr3365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3365[7] {
					yym3390 := z.EncBinary()
					_ = yym3390
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3365[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3391 := z.EncBinary()
					_ = yym3391
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3365 || yy2arr3365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3365[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3393 := *x.TailLines
						yym3394 := z.EncBinary()
						_ = yym3394
						if false {
						} else {
							r.EncodeInt(int64(yy3393))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3365[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3395 := *x.TailLines
						yym3396 := z.EncBinary()
						_ = yym3396
						if false {
						} else {
							r.EncodeInt(int64(yy3395))
						}
					}
				}
			}
			if yyr3365 || yy2arr3365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3365[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3398 := *x.LimitBytes
						yym3399 := z.EncBinary()
						_ = yym3399
						if false {
						} else {
							r.EncodeInt(int64(yy3398))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3365[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3400 := *x.LimitBytes
						yym3401 := z.EncBinary()
						_ = yym3401
						if false {
						} else {
							r.EncodeInt(int64(yy3400))
						}
					}
				}
			}
			if yyr3365 || yy2arr3365 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3402 := z.DecBinary()
	_ = yym3402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3403 := r.ContainerType()
		if yyct3403 == codecSelferValueTypeMap1234 {
			yyl3403 := r.ReadMapStart()
			if yyl3403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3403, d)
			}
		} else if yyct3403 == codecSelferValueTypeArray1234 {
			yyl3403 := r.ReadArrayStart()
			if yyl3403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3404Slc
	var yyhl3404 bool = l >= 0
	for yyj3404 := 0; ; yyj3404++ {
		if yyhl3404 {
			if yyj3404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3404Slc = r.DecodeBytes(yys3404Slc, true, true)
		yys3404 := string(yys3404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3404 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3411 := z.DecBinary()
				_ = yym3411
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3413 := z.DecBinary()
				_ = yym3413
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3413 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3413 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3416 := z.DecBinary()
				_ = yym3416
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3418 := z.DecBinary()
				_ = yym3418
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3404)
		} // end switch yys3404
	} // end for yyj3404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3419 int
	var yyb3419 bool
	var yyhl3419 bool = l >= 0
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3426 := z.DecBinary()
		_ = yym3426
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3428 := z.DecBinary()
		_ = yym3428
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3428 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3428 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3431 := z.DecBinary()
		_ = yym3431
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3433 := z.DecBinary()
		_ = yym3433
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3419++
		if yyhl3419 {
			yyb3419 = yyj3419 > l
		} else {
			yyb3419 = r.CheckBreak()
		}
		if yyb3419 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3419-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3434 := z.EncBinary()
		_ = yym3434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3435 := !z.EncBinary()
			yy2arr3435 := z.EncBasicHandle().StructToArray
			var yyq3435 [7]bool
			_, _, _ = yysep3435, yyq3435, yy2arr3435
			const yyr3435 bool = false
			yyq3435[0] = x.Kind != ""
			yyq3435[1] = x.APIVersion != ""
			yyq3435[2] = x.Stdin != false
			yyq3435[3] = x.Stdout != false
			yyq3435[4] = x.Stderr != false
			yyq3435[5] = x.TTY != false
			yyq3435[6] = x.Container != ""
			var yynn3435 int
			if yyr3435 || yy2arr3435 {
				r.EncodeArrayStart(7)
			} else {
				yynn3435 = 0
				for _, b := range yyq3435 {
					if b {
						yynn3435++
					}
				}
				r.EncodeMapStart(yynn3435)
				yynn3435 = 0
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[0] {
					yym3437 := z.EncBinary()
					_ = yym3437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3435[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3438 := z.EncBinary()
					_ = yym3438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[1] {
					yym3440 := z.EncBinary()
					_ = yym3440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3435[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3441 := z.EncBinary()
					_ = yym3441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[2] {
					yym3443 := z.EncBinary()
					_ = yym3443
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3435[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3444 := z.EncBinary()
					_ = yym3444
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[3] {
					yym3446 := z.EncBinary()
					_ = yym3446
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3435[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3447 := z.EncBinary()
					_ = yym3447
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[4] {
					yym3449 := z.EncBinary()
					_ = yym3449
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3435[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3450 := z.EncBinary()
					_ = yym3450
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[5] {
					yym3452 := z.EncBinary()
					_ = yym3452
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3435[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3453 := z.EncBinary()
					_ = yym3453
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[6] {
					yym3455 := z.EncBinary()
					_ = yym3455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3435[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3456 := z.EncBinary()
					_ = yym3456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3457 := z.DecBinary()
	_ = yym3457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3458 := r.ContainerType()
		if yyct3458 == codecSelferValueTypeMap1234 {
			yyl3458 := r.ReadMapStart()
			if yyl3458 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3458, d)
			}
		} else if yyct3458 == codecSelferValueTypeArray1234 {
			yyl3458 := r.ReadArrayStart()
			if yyl3458 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3458, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3459Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3459Slc
	var yyhl3459 bool = l >= 0
	for yyj3459 := 0; ; yyj3459++ {
		if yyhl3459 {
			if yyj3459 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3459Slc = r.DecodeBytes(yys3459Slc, true, true)
		yys3459 := string(yys3459Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3459 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3459)
		} // end switch yys3459
	} // end for yyj3459
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3467 int
	var yyb3467 bool
	var yyhl3467 bool = l >= 0
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3467++
		if yyhl3467 {
			yyb3467 = yyj3467 > l
		} else {
			yyb3467 = r.CheckBreak()
		}
		if yyb3467 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3467-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3475 := z.EncBinary()
		_ = yym3475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3476 := !z.EncBinary()
			yy2arr3476 := z.EncBasicHandle().StructToArray
			var yyq3476 [8]bool
			_, _, _ = yysep3476, yyq3476, yy2arr3476
			const yyr3476 bool = false
			yyq3476[0] = x.Kind != ""
			yyq3476[1] = x.APIVersion != ""
			yyq3476[2] = x.Stdin != false
			yyq3476[3] = x.Stdout != false
			yyq3476[4] = x.Stderr != false
			yyq3476[5] = x.TTY != false
			yyq3476[6] = x.Container != ""
			var yynn3476 int
			if yyr3476 || yy2arr3476 {
				r.EncodeArrayStart(8)
			} else {
				yynn3476 = 1
				for _, b := range yyq3476 {
					if b {
						yynn3476++
					}
				}
				r.EncodeMapStart(yynn3476)
				yynn3476 = 0
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3476[0] {
					yym3478 := z.EncBinary()
					_ = yym3478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3479 := z.EncBinary()
					_ = yym3479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3476[1] {
					yym3481 := z.EncBinary()
					_ = yym3481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3476[2] {
					yym3484 := z.EncBinary()
					_ = yym3484
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3485 := z.EncBinary()
					_ = yym3485
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3476[3] {
					yym3487 := z.EncBinary()
					_ = yym3487
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3476[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3488 := z.EncBinary()
					_ = yym3488
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3476[4] {
					yym3490 := z.EncBinary()
					_ = yym3490
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3476[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3491 := z.EncBinary()
					_ = yym3491
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3476[5] {
					yym3493 := z.EncBinary()
					_ = yym3493
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3476[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3494 := z.EncBinary()
					_ = yym3494
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3476[6] {
					yym3496 := z.EncBinary()
					_ = yym3496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3476[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3497 := z.EncBinary()
					_ = yym3497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3499 := z.EncBinary()
					_ = yym3499
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3500 := z.EncBinary()
					_ = yym3500
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3501 := z.DecBinary()
	_ = yym3501
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3502 := r.ContainerType()
		if yyct3502 == codecSelferValueTypeMap1234 {
			yyl3502 := r.ReadMapStart()
			if yyl3502 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3502, d)
			}
		} else if yyct3502 == codecSelferValueTypeArray1234 {
			yyl3502 := r.ReadArrayStart()
			if yyl3502 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3502, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3503Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3503Slc
	var yyhl3503 bool = l >= 0
	for yyj3503 := 0; ; yyj3503++ {
		if yyhl3503 {
			if yyj3503 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3503Slc = r.DecodeBytes(yys3503Slc, true, true)
		yys3503 := string(yys3503Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3503 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3511 := &x.Command
				yym3512 := z.DecBinary()
				_ = yym3512
				if false {
				} else {
					z.F.DecSliceStringX(yyv3511, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3503)
		} // end switch yys3503
	} // end for yyj3503
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3513 int
	var yyb3513 bool
	var yyhl3513 bool = l >= 0
	yyj3513++
	if yyhl3513 {
		yyb3513 = yyj3513 > l
	} else {
		yyb3513 = r.CheckBreak()
	}
	if yyb3513 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3513++
	if yyhl3513 {
		yyb3513 = yyj3513 > l
	} else {
		yyb3513 = r.CheckBreak()
	}
	if yyb3513 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3513++
	if yyhl3513 {
		yyb3513 = yyj3513 > l
	} else {
		yyb3513 = r.CheckBreak()
	}
	if yyb3513 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3513++
	if yyhl3513 {
		yyb3513 = yyj3513 > l
	} else {
		yyb3513 = r.CheckBreak()
	}
	if yyb3513 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3513++
	if yyhl3513 {
		yyb3513 = yyj3513 > l
	} else {
		yyb3513 = r.CheckBreak()
	}
	if yyb3513 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3513++
	if yyhl3513 {
		yyb3513 = yyj3513 > l
	} else {
		yyb3513 = r.CheckBreak()
	}
	if yyb3513 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3513++
	if yyhl3513 {
		yyb3513 = yyj3513 > l
	} else {
		yyb3513 = r.CheckBreak()
	}
	if yyb3513 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3513++
	if yyhl3513 {
		yyb3513 = yyj3513 > l
	} else {
		yyb3513 = r.CheckBreak()
	}
	if yyb3513 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3521 := &x.Command
		yym3522 := z.DecBinary()
		_ = yym3522
		if false {
		} else {
			z.F.DecSliceStringX(yyv3521, false, d)
		}
	}
	for {
		yyj3513++
		if yyhl3513 {
			yyb3513 = yyj3513 > l
		} else {
			yyb3513 = r.CheckBreak()
		}
		if yyb3513 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3513-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3523 := z.EncBinary()
		_ = yym3523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3524 := !z.EncBinary()
			yy2arr3524 := z.EncBasicHandle().StructToArray
			var yyq3524 [3]bool
			_, _, _ = yysep3524, yyq3524, yy2arr3524
			const yyr3524 bool = false
			yyq3524[0] = x.Kind != ""
			yyq3524[1] = x.APIVersion != ""
			yyq3524[2] = x.Path != ""
			var yynn3524 int
			if yyr3524 || yy2arr3524 {
				r.EncodeArrayStart(3)
			} else {
				yynn3524 = 0
				for _, b := range yyq3524 {
					if b {
						yynn3524++
					}
				}
				r.EncodeMapStart(yynn3524)
				yynn3524 = 0
			}
			if yyr3524 || yy2arr3524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3524[0] {
					yym3526 := z.EncBinary()
					_ = yym3526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3524[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3527 := z.EncBinary()
					_ = yym3527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3524 || yy2arr3524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3524[1] {
					yym3529 := z.EncBinary()
					_ = yym3529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3524[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3530 := z.EncBinary()
					_ = yym3530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3524 || yy2arr3524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3524[2] {
					yym3532 := z.EncBinary()
					_ = yym3532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3524[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3533 := z.EncBinary()
					_ = yym3533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3524 || yy2arr3524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3534 := z.DecBinary()
	_ = yym3534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3535 := r.ContainerType()
		if yyct3535 == codecSelferValueTypeMap1234 {
			yyl3535 := r.ReadMapStart()
			if yyl3535 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3535, d)
			}
		} else if yyct3535 == codecSelferValueTypeArray1234 {
			yyl3535 := r.ReadArrayStart()
			if yyl3535 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3535, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3536Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3536Slc
	var yyhl3536 bool = l >= 0
	for yyj3536 := 0; ; yyj3536++ {
		if yyhl3536 {
			if yyj3536 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3536Slc = r.DecodeBytes(yys3536Slc, true, true)
		yys3536 := string(yys3536Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3536 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3536)
		} // end switch yys3536
	} // end for yyj3536
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3540 int
	var yyb3540 bool
	var yyhl3540 bool = l >= 0
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3540++
		if yyhl3540 {
			yyb3540 = yyj3540 > l
		} else {
			yyb3540 = r.CheckBreak()
		}
		if yyb3540 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3540-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3544 := z.EncBinary()
		_ = yym3544
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3545 := !z.EncBinary()
			yy2arr3545 := z.EncBasicHandle().StructToArray
			var yyq3545 [3]bool
			_, _, _ = yysep3545, yyq3545, yy2arr3545
			const yyr3545 bool = false
			yyq3545[0] = x.Kind != ""
			yyq3545[1] = x.APIVersion != ""
			yyq3545[2] = x.Path != ""
			var yynn3545 int
			if yyr3545 || yy2arr3545 {
				r.EncodeArrayStart(3)
			} else {
				yynn3545 = 0
				for _, b := range yyq3545 {
					if b {
						yynn3545++
					}
				}
				r.EncodeMapStart(yynn3545)
				yynn3545 = 0
			}
			if yyr3545 || yy2arr3545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3545[0] {
					yym3547 := z.EncBinary()
					_ = yym3547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3545[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3548 := z.EncBinary()
					_ = yym3548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3545 || yy2arr3545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3545[1] {
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3545[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3551 := z.EncBinary()
					_ = yym3551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3545 || yy2arr3545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3545[2] {
					yym3553 := z.EncBinary()
					_ = yym3553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3545[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3554 := z.EncBinary()
					_ = yym3554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3545 || yy2arr3545 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3555 := z.DecBinary()
	_ = yym3555
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3556 := r.ContainerType()
		if yyct3556 == codecSelferValueTypeMap1234 {
			yyl3556 := r.ReadMapStart()
			if yyl3556 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3556, d)
			}
		} else if yyct3556 == codecSelferValueTypeArray1234 {
			yyl3556 := r.ReadArrayStart()
			if yyl3556 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3556, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3557Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3557Slc
	var yyhl3557 bool = l >= 0
	for yyj3557 := 0; ; yyj3557++ {
		if yyhl3557 {
			if yyj3557 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3557Slc = r.DecodeBytes(yys3557Slc, true, true)
		yys3557 := string(yys3557Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3557 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3557)
		} // end switch yys3557
	} // end for yyj3557
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3561 int
	var yyb3561 bool
	var yyhl3561 bool = l >= 0
	yyj3561++
	if yyhl3561 {
		yyb3561 = yyj3561 > l
	} else {
		yyb3561 = r.CheckBreak()
	}
	if yyb3561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3561++
	if yyhl3561 {
		yyb3561 = yyj3561 > l
	} else {
		yyb3561 = r.CheckBreak()
	}
	if yyb3561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3561++
	if yyhl3561 {
		yyb3561 = yyj3561 > l
	} else {
		yyb3561 = r.CheckBreak()
	}
	if yyb3561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3561++
		if yyhl3561 {
			yyb3561 = yyj3561 > l
		} else {
			yyb3561 = r.CheckBreak()
		}
		if yyb3561 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3561-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3565 := z.EncBinary()
		_ = yym3565
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3566 := !z.EncBinary()
			yy2arr3566 := z.EncBasicHandle().StructToArray
			var yyq3566 [3]bool
			_, _, _ = yysep3566, yyq3566, yy2arr3566
			const yyr3566 bool = false
			yyq3566[0] = x.Kind != ""
			yyq3566[1] = x.APIVersion != ""
			yyq3566[2] = x.Path != ""
			var yynn3566 int
			if yyr3566 || yy2arr3566 {
				r.EncodeArrayStart(3)
			} else {
				yynn3566 = 0
				for _, b := range yyq3566 {
					if b {
						yynn3566++
					}
				}
				r.EncodeMapStart(yynn3566)
				yynn3566 = 0
			}
			if yyr3566 || yy2arr3566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3566[0] {
					yym3568 := z.EncBinary()
					_ = yym3568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3566[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3569 := z.EncBinary()
					_ = yym3569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3566 || yy2arr3566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3566[1] {
					yym3571 := z.EncBinary()
					_ = yym3571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3566[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3572 := z.EncBinary()
					_ = yym3572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3566 || yy2arr3566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3566[2] {
					yym3574 := z.EncBinary()
					_ = yym3574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3566[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3575 := z.EncBinary()
					_ = yym3575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3566 || yy2arr3566 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3576 := z.DecBinary()
	_ = yym3576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3577 := r.ContainerType()
		if yyct3577 == codecSelferValueTypeMap1234 {
			yyl3577 := r.ReadMapStart()
			if yyl3577 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3577, d)
			}
		} else if yyct3577 == codecSelferValueTypeArray1234 {
			yyl3577 := r.ReadArrayStart()
			if yyl3577 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3578Slc
	var yyhl3578 bool = l >= 0
	for yyj3578 := 0; ; yyj3578++ {
		if yyhl3578 {
			if yyj3578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3578Slc = r.DecodeBytes(yys3578Slc, true, true)
		yys3578 := string(yys3578Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3578 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3578)
		} // end switch yys3578
	} // end for yyj3578
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3582 int
	var yyb3582 bool
	var yyhl3582 bool = l >= 0
	yyj3582++
	if yyhl3582 {
		yyb3582 = yyj3582 > l
	} else {
		yyb3582 = r.CheckBreak()
	}
	if yyb3582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3582++
	if yyhl3582 {
		yyb3582 = yyj3582 > l
	} else {
		yyb3582 = r.CheckBreak()
	}
	if yyb3582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3582++
	if yyhl3582 {
		yyb3582 = yyj3582 > l
	} else {
		yyb3582 = r.CheckBreak()
	}
	if yyb3582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3582++
		if yyhl3582 {
			yyb3582 = yyj3582 > l
		} else {
			yyb3582 = r.CheckBreak()
		}
		if yyb3582 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3582-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3586 := z.EncBinary()
		_ = yym3586
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3587 := !z.EncBinary()
			yy2arr3587 := z.EncBasicHandle().StructToArray
			var yyq3587 [5]bool
			_, _, _ = yysep3587, yyq3587, yy2arr3587
			const yyr3587 bool = false
			yyq3587[4] = x.Controller != nil
			var yynn3587 int
			if yyr3587 || yy2arr3587 {
				r.EncodeArrayStart(5)
			} else {
				yynn3587 = 4
				for _, b := range yyq3587 {
					if b {
						yynn3587++
					}
				}
				r.EncodeMapStart(yynn3587)
				yynn3587 = 0
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3589 := z.EncBinary()
				_ = yym3589
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3590 := z.EncBinary()
				_ = yym3590
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3592 := z.EncBinary()
				_ = yym3592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3593 := z.EncBinary()
				_ = yym3593
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3595 := z.EncBinary()
				_ = yym3595
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3596 := z.EncBinary()
				_ = yym3596
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3598 := z.EncBinary()
				_ = yym3598
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3599 := z.EncBinary()
				_ = yym3599
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3587[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3601 := *x.Controller
						yym3602 := z.EncBinary()
						_ = yym3602
						if false {
						} else {
							r.EncodeBool(bool(yy3601))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3587[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3603 := *x.Controller
						yym3604 := z.EncBinary()
						_ = yym3604
						if false {
						} else {
							r.EncodeBool(bool(yy3603))
						}
					}
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3605 := z.DecBinary()
	_ = yym3605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3606 := r.ContainerType()
		if yyct3606 == codecSelferValueTypeMap1234 {
			yyl3606 := r.ReadMapStart()
			if yyl3606 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3606, d)
			}
		} else if yyct3606 == codecSelferValueTypeArray1234 {
			yyl3606 := r.ReadArrayStart()
			if yyl3606 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3606, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3607Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3607Slc
	var yyhl3607 bool = l >= 0
	for yyj3607 := 0; ; yyj3607++ {
		if yyhl3607 {
			if yyj3607 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3607Slc = r.DecodeBytes(yys3607Slc, true, true)
		yys3607 := string(yys3607Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3607 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3613 := z.DecBinary()
				_ = yym3613
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3607)
		} // end switch yys3607
	} // end for yyj3607
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3614 int
	var yyb3614 bool
	var yyhl3614 bool = l >= 0
	yyj3614++
	if yyhl3614 {
		yyb3614 = yyj3614 > l
	} else {
		yyb3614 = r.CheckBreak()
	}
	if yyb3614 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3614++
	if yyhl3614 {
		yyb3614 = yyj3614 > l
	} else {
		yyb3614 = r.CheckBreak()
	}
	if yyb3614 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3614++
	if yyhl3614 {
		yyb3614 = yyj3614 > l
	} else {
		yyb3614 = r.CheckBreak()
	}
	if yyb3614 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3614++
	if yyhl3614 {
		yyb3614 = yyj3614 > l
	} else {
		yyb3614 = r.CheckBreak()
	}
	if yyb3614 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3614++
	if yyhl3614 {
		yyb3614 = yyj3614 > l
	} else {
		yyb3614 = r.CheckBreak()
	}
	if yyb3614 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3620 := z.DecBinary()
		_ = yym3620
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3614++
		if yyhl3614 {
			yyb3614 = yyj3614 > l
		} else {
			yyb3614 = r.CheckBreak()
		}
		if yyb3614 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3614-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3621 := z.EncBinary()
		_ = yym3621
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3622 := !z.EncBinary()
			yy2arr3622 := z.EncBasicHandle().StructToArray
			var yyq3622 [7]bool
			_, _, _ = yysep3622, yyq3622, yy2arr3622
			const yyr3622 bool = false
			yyq3622[0] = x.Kind != ""
			yyq3622[1] = x.Namespace != ""
			yyq3622[2] = x.Name != ""
			yyq3622[3] = x.UID != ""
			yyq3622[4] = x.APIVersion != ""
			yyq3622[5] = x.ResourceVersion != ""
			yyq3622[6] = x.FieldPath != ""
			var yynn3622 int
			if yyr3622 || yy2arr3622 {
				r.EncodeArrayStart(7)
			} else {
				yynn3622 = 0
				for _, b := range yyq3622 {
					if b {
						yynn3622++
					}
				}
				r.EncodeMapStart(yynn3622)
				yynn3622 = 0
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[0] {
					yym3624 := z.EncBinary()
					_ = yym3624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3622[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3625 := z.EncBinary()
					_ = yym3625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[1] {
					yym3627 := z.EncBinary()
					_ = yym3627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3622[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3628 := z.EncBinary()
					_ = yym3628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[2] {
					yym3630 := z.EncBinary()
					_ = yym3630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3622[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3631 := z.EncBinary()
					_ = yym3631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[3] {
					yym3633 := z.EncBinary()
					_ = yym3633
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3622[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3634 := z.EncBinary()
					_ = yym3634
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[4] {
					yym3636 := z.EncBinary()
					_ = yym3636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3622[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3637 := z.EncBinary()
					_ = yym3637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[5] {
					yym3639 := z.EncBinary()
					_ = yym3639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3622[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3640 := z.EncBinary()
					_ = yym3640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[6] {
					yym3642 := z.EncBinary()
					_ = yym3642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3622[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3643 := z.EncBinary()
					_ = yym3643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3644 := z.DecBinary()
	_ = yym3644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3645 := r.ContainerType()
		if yyct3645 == codecSelferValueTypeMap1234 {
			yyl3645 := r.ReadMapStart()
			if yyl3645 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3645, d)
			}
		} else if yyct3645 == codecSelferValueTypeArray1234 {
			yyl3645 := r.ReadArrayStart()
			if yyl3645 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3646Slc
	var yyhl3646 bool = l >= 0
	for yyj3646 := 0; ; yyj3646++ {
		if yyhl3646 {
			if yyj3646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3646Slc = r.DecodeBytes(yys3646Slc, true, true)
		yys3646 := string(yys3646Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3646 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3646)
		} // end switch yys3646
	} // end for yyj3646
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3654 int
	var yyb3654 bool
	var yyhl3654 bool = l >= 0
	yyj3654++
	if yyhl3654 {
		yyb3654 = yyj3654 > l
	} else {
		yyb3654 = r.CheckBreak()
	}
	if yyb3654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3654++
	if yyhl3654 {
		yyb3654 = yyj3654 > l
	} else {
		yyb3654 = r.CheckBreak()
	}
	if yyb3654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3654++
	if yyhl3654 {
		yyb3654 = yyj3654 > l
	} else {
		yyb3654 = r.CheckBreak()
	}
	if yyb3654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3654++
	if yyhl3654 {
		yyb3654 = yyj3654 > l
	} else {
		yyb3654 = r.CheckBreak()
	}
	if yyb3654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3654++
	if yyhl3654 {
		yyb3654 = yyj3654 > l
	} else {
		yyb3654 = r.CheckBreak()
	}
	if yyb3654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3654++
	if yyhl3654 {
		yyb3654 = yyj3654 > l
	} else {
		yyb3654 = r.CheckBreak()
	}
	if yyb3654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3654++
	if yyhl3654 {
		yyb3654 = yyj3654 > l
	} else {
		yyb3654 = r.CheckBreak()
	}
	if yyb3654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3654++
		if yyhl3654 {
			yyb3654 = yyj3654 > l
		} else {
			yyb3654 = r.CheckBreak()
		}
		if yyb3654 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3654-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3662 := z.EncBinary()
		_ = yym3662
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3663 := !z.EncBinary()
			yy2arr3663 := z.EncBasicHandle().StructToArray
			var yyq3663 [1]bool
			_, _, _ = yysep3663, yyq3663, yy2arr3663
			const yyr3663 bool = false
			yyq3663[0] = x.Name != ""
			var yynn3663 int
			if yyr3663 || yy2arr3663 {
				r.EncodeArrayStart(1)
			} else {
				yynn3663 = 0
				for _, b := range yyq3663 {
					if b {
						yynn3663++
					}
				}
				r.EncodeMapStart(yynn3663)
				yynn3663 = 0
			}
			if yyr3663 || yy2arr3663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3663[0] {
					yym3665 := z.EncBinary()
					_ = yym3665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3663[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3666 := z.EncBinary()
					_ = yym3666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3663 || yy2arr3663 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3667 := z.DecBinary()
	_ = yym3667
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3668 := r.ContainerType()
		if yyct3668 == codecSelferValueTypeMap1234 {
			yyl3668 := r.ReadMapStart()
			if yyl3668 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3668, d)
			}
		} else if yyct3668 == codecSelferValueTypeArray1234 {
			yyl3668 := r.ReadArrayStart()
			if yyl3668 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3668, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3669Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3669Slc
	var yyhl3669 bool = l >= 0
	for yyj3669 := 0; ; yyj3669++ {
		if yyhl3669 {
			if yyj3669 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3669Slc = r.DecodeBytes(yys3669Slc, true, true)
		yys3669 := string(yys3669Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3669 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3669)
		} // end switch yys3669
	} // end for yyj3669
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3671 int
	var yyb3671 bool
	var yyhl3671 bool = l >= 0
	yyj3671++
	if yyhl3671 {
		yyb3671 = yyj3671 > l
	} else {
		yyb3671 = r.CheckBreak()
	}
	if yyb3671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3671++
		if yyhl3671 {
			yyb3671 = yyj3671 > l
		} else {
			yyb3671 = r.CheckBreak()
		}
		if yyb3671 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3671-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3673 := z.EncBinary()
		_ = yym3673
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3674 := !z.EncBinary()
			yy2arr3674 := z.EncBasicHandle().StructToArray
			var yyq3674 [3]bool
			_, _, _ = yysep3674, yyq3674, yy2arr3674
			const yyr3674 bool = false
			yyq3674[0] = x.Kind != ""
			yyq3674[1] = x.APIVersion != ""
			yyq3674[2] = true
			var yynn3674 int
			if yyr3674 || yy2arr3674 {
				r.EncodeArrayStart(3)
			} else {
				yynn3674 = 0
				for _, b := range yyq3674 {
					if b {
						yynn3674++
					}
				}
				r.EncodeMapStart(yynn3674)
				yynn3674 = 0
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3674[0] {
					yym3676 := z.EncBinary()
					_ = yym3676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3674[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3677 := z.EncBinary()
					_ = yym3677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3674[1] {
					yym3679 := z.EncBinary()
					_ = yym3679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3674[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3680 := z.EncBinary()
					_ = yym3680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3674[2] {
					yy3682 := &x.Reference
					yy3682.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3674[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3683 := &x.Reference
					yy3683.CodecEncodeSelf(e)
				}
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3684 := z.DecBinary()
	_ = yym3684
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3685 := r.ContainerType()
		if yyct3685 == codecSelferValueTypeMap1234 {
			yyl3685 := r.ReadMapStart()
			if yyl3685 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3685, d)
			}
		} else if yyct3685 == codecSelferValueTypeArray1234 {
			yyl3685 := r.ReadArrayStart()
			if yyl3685 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3685, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3686Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3686Slc
	var yyhl3686 bool = l >= 0
	for yyj3686 := 0; ; yyj3686++ {
		if yyhl3686 {
			if yyj3686 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3686Slc = r.DecodeBytes(yys3686Slc, true, true)
		yys3686 := string(yys3686Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3686 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3689 := &x.Reference
				yyv3689.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3686)
		} // end switch yys3686
	} // end for yyj3686
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3690 int
	var yyb3690 bool
	var yyhl3690 bool = l >= 0
	yyj3690++
	if yyhl3690 {
		yyb3690 = yyj3690 > l
	} else {
		yyb3690 = r.CheckBreak()
	}
	if yyb3690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3690++
	if yyhl3690 {
		yyb3690 = yyj3690 > l
	} else {
		yyb3690 = r.CheckBreak()
	}
	if yyb3690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3690++
	if yyhl3690 {
		yyb3690 = yyj3690 > l
	} else {
		yyb3690 = r.CheckBreak()
	}
	if yyb3690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3693 := &x.Reference
		yyv3693.CodecDecodeSelf(d)
	}
	for {
		yyj3690++
		if yyhl3690 {
			yyb3690 = yyj3690 > l
		} else {
			yyb3690 = r.CheckBreak()
		}
		if yyb3690 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3690-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3694 := z.EncBinary()
		_ = yym3694
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3695 := !z.EncBinary()
			yy2arr3695 := z.EncBasicHandle().StructToArray
			var yyq3695 [2]bool
			_, _, _ = yysep3695, yyq3695, yy2arr3695
			const yyr3695 bool = false
			yyq3695[0] = x.Component != ""
			yyq3695[1] = x.Host != ""
			var yynn3695 int
			if yyr3695 || yy2arr3695 {
				r.EncodeArrayStart(2)
			} else {
				yynn3695 = 0
				for _, b := range yyq3695 {
					if b {
						yynn3695++
					}
				}
				r.EncodeMapStart(yynn3695)
				yynn3695 = 0
			}
			if yyr3695 || yy2arr3695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3695[0] {
					yym3697 := z.EncBinary()
					_ = yym3697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3695[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3698 := z.EncBinary()
					_ = yym3698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3695 || yy2arr3695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3695[1] {
					yym3700 := z.EncBinary()
					_ = yym3700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3695[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3701 := z.EncBinary()
					_ = yym3701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3695 || yy2arr3695 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3702 := z.DecBinary()
	_ = yym3702
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3703 := r.ContainerType()
		if yyct3703 == codecSelferValueTypeMap1234 {
			yyl3703 := r.ReadMapStart()
			if yyl3703 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3703, d)
			}
		} else if yyct3703 == codecSelferValueTypeArray1234 {
			yyl3703 := r.ReadArrayStart()
			if yyl3703 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3703, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3704Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3704Slc
	var yyhl3704 bool = l >= 0
	for yyj3704 := 0; ; yyj3704++ {
		if yyhl3704 {
			if yyj3704 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3704Slc = r.DecodeBytes(yys3704Slc, true, true)
		yys3704 := string(yys3704Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3704 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3704)
		} // end switch yys3704
	} // end for yyj3704
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3707 int
	var yyb3707 bool
	var yyhl3707 bool = l >= 0
	yyj3707++
	if yyhl3707 {
		yyb3707 = yyj3707 > l
	} else {
		yyb3707 = r.CheckBreak()
	}
	if yyb3707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3707++
	if yyhl3707 {
		yyb3707 = yyj3707 > l
	} else {
		yyb3707 = r.CheckBreak()
	}
	if yyb3707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3707++
		if yyhl3707 {
			yyb3707 = yyj3707 > l
		} else {
			yyb3707 = r.CheckBreak()
		}
		if yyb3707 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3707-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3710 := z.EncBinary()
		_ = yym3710
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3711 := !z.EncBinary()
			yy2arr3711 := z.EncBasicHandle().StructToArray
			var yyq3711 [11]bool
			_, _, _ = yysep3711, yyq3711, yy2arr3711
			const yyr3711 bool = false
			yyq3711[0] = x.Kind != ""
			yyq3711[1] = x.APIVersion != ""
			yyq3711[4] = x.Reason != ""
			yyq3711[5] = x.Message != ""
			yyq3711[6] = true
			yyq3711[7] = true
			yyq3711[8] = true
			yyq3711[9] = x.Count != 0
			yyq3711[10] = x.Type != ""
			var yynn3711 int
			if yyr3711 || yy2arr3711 {
				r.EncodeArrayStart(11)
			} else {
				yynn3711 = 2
				for _, b := range yyq3711 {
					if b {
						yynn3711++
					}
				}
				r.EncodeMapStart(yynn3711)
				yynn3711 = 0
			}
			if yyr3711 || yy2arr3711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3711[0] {
					yym3713 := z.EncBinary()
					_ = yym3713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3711[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3714 := z.EncBinary()
					_ = yym3714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3711 || yy2arr3711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3711[1] {
					yym3716 := z.EncBinary()
					_ = yym3716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3711[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3717 := z.EncBinary()
					_ = yym3717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3711 || yy2arr3711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3719 := &x.ObjectMeta
				yy3719.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3720 := &x.ObjectMeta
				yy3720.CodecEncodeSelf(e)
			}
			if yyr3711 || yy2arr3711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3722 := &x.InvolvedObject
				yy3722.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3723 := &x.InvolvedObject
				yy3723.CodecEncodeSelf(e)
			}
			if yyr3711 || yy2arr3711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3711[4] {
					yym3725 := z.EncBinary()
					_ = yym3725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3711[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3726 := z.EncBinary()
					_ = yym3726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3711 || yy2arr3711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3711[5] {
					yym3728 := z.EncBinary()
					_ = yym3728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3711[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3729 := z.EncBinary()
					_ = yym3729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3711 || yy2arr3711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3711[6] {
					yy3731 := &x.Source
					yy3731.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3711[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3732 := &x.Source
					yy3732.CodecEncodeSelf(e)
				}
			}
			if yyr3711 || yy2arr3711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3711[7] {
					yy3734 := &x.FirstTimestamp
					yym3735 := z.EncBinary()
					_ = yym3735
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3734) {
					} else if yym3735 {
						z.EncBinaryMarshal(yy3734)
					} else if !yym3735 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3734)
					} else {
						z.EncFallback(yy3734)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3711[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3736 := &x.FirstTimestamp
					yym3737 := z.EncBinary()
					_ = yym3737
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3736) {
					} else if yym3737 {
						z.EncBinaryMarshal(yy3736)
					} else if !yym3737 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3736)
					} else {
						z.EncFallback(yy3736)
					}
				}
			}
			if yyr3711 || yy2arr3711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3711[8] {
					yy3739 := &x.LastTimestamp
					yym3740 := z.EncBinary()
					_ = yym3740
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3739) {
					} else if yym3740 {
						z.EncBinaryMarshal(yy3739)
					} else if !yym3740 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3739)
					} else {
						z.EncFallback(yy3739)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3711[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3741 := &x.LastTimestamp
					yym3742 := z.EncBinary()
					_ = yym3742
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3741) {
					} else if yym3742 {
						z.EncBinaryMarshal(yy3741)
					} else if !yym3742 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3741)
					} else {
						z.EncFallback(yy3741)
					}
				}
			}
			if yyr3711 || yy2arr3711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3711[9] {
					yym3744 := z.EncBinary()
					_ = yym3744
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3711[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3745 := z.EncBinary()
					_ = yym3745
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3711 || yy2arr3711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3711[10] {
					yym3747 := z.EncBinary()
					_ = yym3747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3711[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3748 := z.EncBinary()
					_ = yym3748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3711 || yy2arr3711 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3749 := z.DecBinary()
	_ = yym3749
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3750 := r.ContainerType()
		if yyct3750 == codecSelferValueTypeMap1234 {
			yyl3750 := r.ReadMapStart()
			if yyl3750 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3750, d)
			}
		} else if yyct3750 == codecSelferValueTypeArray1234 {
			yyl3750 := r.ReadArrayStart()
			if yyl3750 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3750, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3751Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3751Slc
	var yyhl3751 bool = l >= 0
	for yyj3751 := 0; ; yyj3751++ {
		if yyhl3751 {
			if yyj3751 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3751Slc = r.DecodeBytes(yys3751Slc, true, true)
		yys3751 := string(yys3751Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3751 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3754 := &x.ObjectMeta
				yyv3754.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3755 := &x.InvolvedObject
				yyv3755.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3758 := &x.Source
				yyv3758.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3759 := &x.FirstTimestamp
				yym3760 := z.DecBinary()
				_ = yym3760
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3759) {
				} else if yym3760 {
					z.DecBinaryUnmarshal(yyv3759)
				} else if !yym3760 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3759)
				} else {
					z.DecFallback(yyv3759, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3761 := &x.LastTimestamp
				yym3762 := z.DecBinary()
				_ = yym3762
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3761) {
				} else if yym3762 {
					z.DecBinaryUnmarshal(yyv3761)
				} else if !yym3762 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3761)
				} else {
					z.DecFallback(yyv3761, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3751)
		} // end switch yys3751
	} // end for yyj3751
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3765 int
	var yyb3765 bool
	var yyhl3765 bool = l >= 0
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3768 := &x.ObjectMeta
		yyv3768.CodecDecodeSelf(d)
	}
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3769 := &x.InvolvedObject
		yyv3769.CodecDecodeSelf(d)
	}
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3772 := &x.Source
		yyv3772.CodecDecodeSelf(d)
	}
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3773 := &x.FirstTimestamp
		yym3774 := z.DecBinary()
		_ = yym3774
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3773) {
		} else if yym3774 {
			z.DecBinaryUnmarshal(yyv3773)
		} else if !yym3774 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3773)
		} else {
			z.DecFallback(yyv3773, false)
		}
	}
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3775 := &x.LastTimestamp
		yym3776 := z.DecBinary()
		_ = yym3776
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3775) {
		} else if yym3776 {
			z.DecBinaryUnmarshal(yyv3775)
		} else if !yym3776 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3775)
		} else {
			z.DecFallback(yyv3775, false)
		}
	}
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3765++
		if yyhl3765 {
			yyb3765 = yyj3765 > l
		} else {
			yyb3765 = r.CheckBreak()
		}
		if yyb3765 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3765-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3779 := z.EncBinary()
		_ = yym3779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3780 := !z.EncBinary()
			yy2arr3780 := z.EncBasicHandle().StructToArray
			var yyq3780 [4]bool
			_, _, _ = yysep3780, yyq3780, yy2arr3780
			const yyr3780 bool = false
			yyq3780[0] = x.Kind != ""
			yyq3780[1] = x.APIVersion != ""
			yyq3780[2] = true
			var yynn3780 int
			if yyr3780 || yy2arr3780 {
				r.EncodeArrayStart(4)
			} else {
				yynn3780 = 1
				for _, b := range yyq3780 {
					if b {
						yynn3780++
					}
				}
				r.EncodeMapStart(yynn3780)
				yynn3780 = 0
			}
			if yyr3780 || yy2arr3780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3780[0] {
					yym3782 := z.EncBinary()
					_ = yym3782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3780[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3783 := z.EncBinary()
					_ = yym3783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3780 || yy2arr3780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3780[1] {
					yym3785 := z.EncBinary()
					_ = yym3785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3780[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3786 := z.EncBinary()
					_ = yym3786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3780 || yy2arr3780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3780[2] {
					yy3788 := &x.ListMeta
					yym3789 := z.EncBinary()
					_ = yym3789
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3788) {
					} else {
						z.EncFallback(yy3788)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3780[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3790 := &x.ListMeta
					yym3791 := z.EncBinary()
					_ = yym3791
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3790) {
					} else {
						z.EncFallback(yy3790)
					}
				}
			}
			if yyr3780 || yy2arr3780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3793 := z.EncBinary()
					_ = yym3793
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3794 := z.EncBinary()
					_ = yym3794
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3780 || yy2arr3780 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3795 := z.DecBinary()
	_ = yym3795
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3796 := r.ContainerType()
		if yyct3796 == codecSelferValueTypeMap1234 {
			yyl3796 := r.ReadMapStart()
			if yyl3796 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3796, d)
			}
		} else if yyct3796 == codecSelferValueTypeArray1234 {
			yyl3796 := r.ReadArrayStart()
			if yyl3796 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3796, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3797Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3797Slc
	var yyhl3797 bool = l >= 0
	for yyj3797 := 0; ; yyj3797++ {
		if yyhl3797 {
			if yyj3797 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3797Slc = r.DecodeBytes(yys3797Slc, true, true)
		yys3797 := string(yys3797Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3797 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3800 := &x.ListMeta
				yym3801 := z.DecBinary()
				_ = yym3801
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3800) {
				} else {
					z.DecFallback(yyv3800, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3802 := &x.Items
				yym3803 := z.DecBinary()
				_ = yym3803
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3802), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3797)
		} // end switch yys3797
	} // end for yyj3797
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3804 int
	var yyb3804 bool
	var yyhl3804 bool = l >= 0
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3807 := &x.ListMeta
		yym3808 := z.DecBinary()
		_ = yym3808
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3807) {
		} else {
			z.DecFallback(yyv3807, false)
		}
	}
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3809 := &x.Items
		yym3810 := z.DecBinary()
		_ = yym3810
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3809), d)
		}
	}
	for {
		yyj3804++
		if yyhl3804 {
			yyb3804 = yyj3804 > l
		} else {
			yyb3804 = r.CheckBreak()
		}
		if yyb3804 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3804-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3811 := z.EncBinary()
		_ = yym3811
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3812 := !z.EncBinary()
			yy2arr3812 := z.EncBasicHandle().StructToArray
			var yyq3812 [4]bool
			_, _, _ = yysep3812, yyq3812, yy2arr3812
			const yyr3812 bool = false
			yyq3812[0] = x.Kind != ""
			yyq3812[1] = x.APIVersion != ""
			yyq3812[2] = true
			var yynn3812 int
			if yyr3812 || yy2arr3812 {
				r.EncodeArrayStart(4)
			} else {
				yynn3812 = 1
				for _, b := range yyq3812 {
					if b {
						yynn3812++
					}
				}
				r.EncodeMapStart(yynn3812)
				yynn3812 = 0
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3812[0] {
					yym3814 := z.EncBinary()
					_ = yym3814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3812[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3815 := z.EncBinary()
					_ = yym3815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3812[1] {
					yym3817 := z.EncBinary()
					_ = yym3817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3812[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3818 := z.EncBinary()
					_ = yym3818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3812[2] {
					yy3820 := &x.ListMeta
					yym3821 := z.EncBinary()
					_ = yym3821
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3820) {
					} else {
						z.EncFallback(yy3820)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3812[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3822 := &x.ListMeta
					yym3823 := z.EncBinary()
					_ = yym3823
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3822) {
					} else {
						z.EncFallback(yy3822)
					}
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3825 := z.EncBinary()
					_ = yym3825
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3826 := z.EncBinary()
					_ = yym3826
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3827 := z.DecBinary()
	_ = yym3827
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3828 := r.ContainerType()
		if yyct3828 == codecSelferValueTypeMap1234 {
			yyl3828 := r.ReadMapStart()
			if yyl3828 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3828, d)
			}
		} else if yyct3828 == codecSelferValueTypeArray1234 {
			yyl3828 := r.ReadArrayStart()
			if yyl3828 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3828, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3829Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3829Slc
	var yyhl3829 bool = l >= 0
	for yyj3829 := 0; ; yyj3829++ {
		if yyhl3829 {
			if yyj3829 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3829Slc = r.DecodeBytes(yys3829Slc, true, true)
		yys3829 := string(yys3829Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3829 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3832 := &x.ListMeta
				yym3833 := z.DecBinary()
				_ = yym3833
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3832) {
				} else {
					z.DecFallback(yyv3832, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3834 := &x.Items
				yym3835 := z.DecBinary()
				_ = yym3835
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3834), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3829)
		} // end switch yys3829
	} // end for yyj3829
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3836 int
	var yyb3836 bool
	var yyhl3836 bool = l >= 0
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3839 := &x.ListMeta
		yym3840 := z.DecBinary()
		_ = yym3840
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3839) {
		} else {
			z.DecFallback(yyv3839, false)
		}
	}
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3841 := &x.Items
		yym3842 := z.DecBinary()
		_ = yym3842
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3841), d)
		}
	}
	for {
		yyj3836++
		if yyhl3836 {
			yyb3836 = yyj3836 > l
		} else {
			yyb3836 = r.CheckBreak()
		}
		if yyb3836 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3836-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3843 := z.EncBinary()
	_ = yym3843
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3844 := z.DecBinary()
	_ = yym3844
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3845 := z.EncBinary()
		_ = yym3845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3846 := !z.EncBinary()
			yy2arr3846 := z.EncBasicHandle().StructToArray
			var yyq3846 [6]bool
			_, _, _ = yysep3846, yyq3846, yy2arr3846
			const yyr3846 bool = false
			yyq3846[0] = x.Type != ""
			yyq3846[1] = len(x.Max) != 0
			yyq3846[2] = len(x.Min) != 0
			yyq3846[3] = len(x.Default) != 0
			yyq3846[4] = len(x.DefaultRequest) != 0
			yyq3846[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3846 int
			if yyr3846 || yy2arr3846 {
				r.EncodeArrayStart(6)
			} else {
				yynn3846 = 0
				for _, b := range yyq3846 {
					if b {
						yynn3846++
					}
				}
				r.EncodeMapStart(yynn3846)
				yynn3846 = 0
			}
			if yyr3846 || yy2arr3846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3846[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3846[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3846 || yy2arr3846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3846[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3846[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3846 || yy2arr3846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3846[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3846[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3846 || yy2arr3846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3846[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3846[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3846 || yy2arr3846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3846[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3846[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3846 || yy2arr3846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3846[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3846[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3846 || yy2arr3846 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3853 := z.DecBinary()
	_ = yym3853
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3854 := r.ContainerType()
		if yyct3854 == codecSelferValueTypeMap1234 {
			yyl3854 := r.ReadMapStart()
			if yyl3854 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3854, d)
			}
		} else if yyct3854 == codecSelferValueTypeArray1234 {
			yyl3854 := r.ReadArrayStart()
			if yyl3854 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3854, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3855Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3855Slc
	var yyhl3855 bool = l >= 0
	for yyj3855 := 0; ; yyj3855++ {
		if yyhl3855 {
			if yyj3855 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3855Slc = r.DecodeBytes(yys3855Slc, true, true)
		yys3855 := string(yys3855Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3855 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3857 := &x.Max
				yyv3857.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3858 := &x.Min
				yyv3858.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3859 := &x.Default
				yyv3859.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3860 := &x.DefaultRequest
				yyv3860.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3861 := &x.MaxLimitRequestRatio
				yyv3861.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3855)
		} // end switch yys3855
	} // end for yyj3855
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3862 int
	var yyb3862 bool
	var yyhl3862 bool = l >= 0
	yyj3862++
	if yyhl3862 {
		yyb3862 = yyj3862 > l
	} else {
		yyb3862 = r.CheckBreak()
	}
	if yyb3862 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3862++
	if yyhl3862 {
		yyb3862 = yyj3862 > l
	} else {
		yyb3862 = r.CheckBreak()
	}
	if yyb3862 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3864 := &x.Max
		yyv3864.CodecDecodeSelf(d)
	}
	yyj3862++
	if yyhl3862 {
		yyb3862 = yyj3862 > l
	} else {
		yyb3862 = r.CheckBreak()
	}
	if yyb3862 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3865 := &x.Min
		yyv3865.CodecDecodeSelf(d)
	}
	yyj3862++
	if yyhl3862 {
		yyb3862 = yyj3862 > l
	} else {
		yyb3862 = r.CheckBreak()
	}
	if yyb3862 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3866 := &x.Default
		yyv3866.CodecDecodeSelf(d)
	}
	yyj3862++
	if yyhl3862 {
		yyb3862 = yyj3862 > l
	} else {
		yyb3862 = r.CheckBreak()
	}
	if yyb3862 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3867 := &x.DefaultRequest
		yyv3867.CodecDecodeSelf(d)
	}
	yyj3862++
	if yyhl3862 {
		yyb3862 = yyj3862 > l
	} else {
		yyb3862 = r.CheckBreak()
	}
	if yyb3862 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3868 := &x.MaxLimitRequestRatio
		yyv3868.CodecDecodeSelf(d)
	}
	for {
		yyj3862++
		if yyhl3862 {
			yyb3862 = yyj3862 > l
		} else {
			yyb3862 = r.CheckBreak()
		}
		if yyb3862 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3862-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3869 := z.EncBinary()
		_ = yym3869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3870 := !z.EncBinary()
			yy2arr3870 := z.EncBasicHandle().StructToArray
			var yyq3870 [1]bool
			_, _, _ = yysep3870, yyq3870, yy2arr3870
			const yyr3870 bool = false
			var yynn3870 int
			if yyr3870 || yy2arr3870 {
				r.EncodeArrayStart(1)
			} else {
				yynn3870 = 1
				for _, b := range yyq3870 {
					if b {
						yynn3870++
					}
				}
				r.EncodeMapStart(yynn3870)
				yynn3870 = 0
			}
			if yyr3870 || yy2arr3870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3872 := z.EncBinary()
					_ = yym3872
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3873 := z.EncBinary()
					_ = yym3873
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3870 || yy2arr3870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3874 := z.DecBinary()
	_ = yym3874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3875 := r.ContainerType()
		if yyct3875 == codecSelferValueTypeMap1234 {
			yyl3875 := r.ReadMapStart()
			if yyl3875 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3875, d)
			}
		} else if yyct3875 == codecSelferValueTypeArray1234 {
			yyl3875 := r.ReadArrayStart()
			if yyl3875 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3876Slc
	var yyhl3876 bool = l >= 0
	for yyj3876 := 0; ; yyj3876++ {
		if yyhl3876 {
			if yyj3876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3876Slc = r.DecodeBytes(yys3876Slc, true, true)
		yys3876 := string(yys3876Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3876 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3877 := &x.Limits
				yym3878 := z.DecBinary()
				_ = yym3878
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3877), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3876)
		} // end switch yys3876
	} // end for yyj3876
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3879 int
	var yyb3879 bool
	var yyhl3879 bool = l >= 0
	yyj3879++
	if yyhl3879 {
		yyb3879 = yyj3879 > l
	} else {
		yyb3879 = r.CheckBreak()
	}
	if yyb3879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3880 := &x.Limits
		yym3881 := z.DecBinary()
		_ = yym3881
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3880), d)
		}
	}
	for {
		yyj3879++
		if yyhl3879 {
			yyb3879 = yyj3879 > l
		} else {
			yyb3879 = r.CheckBreak()
		}
		if yyb3879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3882 := z.EncBinary()
		_ = yym3882
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3883 := !z.EncBinary()
			yy2arr3883 := z.EncBasicHandle().StructToArray
			var yyq3883 [4]bool
			_, _, _ = yysep3883, yyq3883, yy2arr3883
			const yyr3883 bool = false
			yyq3883[0] = x.Kind != ""
			yyq3883[1] = x.APIVersion != ""
			yyq3883[2] = true
			yyq3883[3] = true
			var yynn3883 int
			if yyr3883 || yy2arr3883 {
				r.EncodeArrayStart(4)
			} else {
				yynn3883 = 0
				for _, b := range yyq3883 {
					if b {
						yynn3883++
					}
				}
				r.EncodeMapStart(yynn3883)
				yynn3883 = 0
			}
			if yyr3883 || yy2arr3883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3883[0] {
					yym3885 := z.EncBinary()
					_ = yym3885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3883[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3886 := z.EncBinary()
					_ = yym3886
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3883 || yy2arr3883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3883[1] {
					yym3888 := z.EncBinary()
					_ = yym3888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3883[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3889 := z.EncBinary()
					_ = yym3889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3883 || yy2arr3883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3883[2] {
					yy3891 := &x.ObjectMeta
					yy3891.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3883[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3892 := &x.ObjectMeta
					yy3892.CodecEncodeSelf(e)
				}
			}
			if yyr3883 || yy2arr3883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3883[3] {
					yy3894 := &x.Spec
					yy3894.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3883[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3895 := &x.Spec
					yy3895.CodecEncodeSelf(e)
				}
			}
			if yyr3883 || yy2arr3883 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3896 := z.DecBinary()
	_ = yym3896
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3897 := r.ContainerType()
		if yyct3897 == codecSelferValueTypeMap1234 {
			yyl3897 := r.ReadMapStart()
			if yyl3897 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3897, d)
			}
		} else if yyct3897 == codecSelferValueTypeArray1234 {
			yyl3897 := r.ReadArrayStart()
			if yyl3897 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3897, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3898Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3898Slc
	var yyhl3898 bool = l >= 0
	for yyj3898 := 0; ; yyj3898++ {
		if yyhl3898 {
			if yyj3898 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3898Slc = r.DecodeBytes(yys3898Slc, true, true)
		yys3898 := string(yys3898Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3898 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3901 := &x.ObjectMeta
				yyv3901.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3902 := &x.Spec
				yyv3902.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3898)
		} // end switch yys3898
	} // end for yyj3898
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3903 int
	var yyb3903 bool
	var yyhl3903 bool = l >= 0
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3906 := &x.ObjectMeta
		yyv3906.CodecDecodeSelf(d)
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3907 := &x.Spec
		yyv3907.CodecDecodeSelf(d)
	}
	for {
		yyj3903++
		if yyhl3903 {
			yyb3903 = yyj3903 > l
		} else {
			yyb3903 = r.CheckBreak()
		}
		if yyb3903 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3903-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3908 := z.EncBinary()
		_ = yym3908
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3909 := !z.EncBinary()
			yy2arr3909 := z.EncBasicHandle().StructToArray
			var yyq3909 [4]bool
			_, _, _ = yysep3909, yyq3909, yy2arr3909
			const yyr3909 bool = false
			yyq3909[0] = x.Kind != ""
			yyq3909[1] = x.APIVersion != ""
			yyq3909[2] = true
			var yynn3909 int
			if yyr3909 || yy2arr3909 {
				r.EncodeArrayStart(4)
			} else {
				yynn3909 = 1
				for _, b := range yyq3909 {
					if b {
						yynn3909++
					}
				}
				r.EncodeMapStart(yynn3909)
				yynn3909 = 0
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[0] {
					yym3911 := z.EncBinary()
					_ = yym3911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3909[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3912 := z.EncBinary()
					_ = yym3912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[1] {
					yym3914 := z.EncBinary()
					_ = yym3914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3909[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3915 := z.EncBinary()
					_ = yym3915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[2] {
					yy3917 := &x.ListMeta
					yym3918 := z.EncBinary()
					_ = yym3918
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3917) {
					} else {
						z.EncFallback(yy3917)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3909[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3919 := &x.ListMeta
					yym3920 := z.EncBinary()
					_ = yym3920
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3919) {
					} else {
						z.EncFallback(yy3919)
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3922 := z.EncBinary()
					_ = yym3922
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3923 := z.EncBinary()
					_ = yym3923
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3924 := z.DecBinary()
	_ = yym3924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3925 := r.ContainerType()
		if yyct3925 == codecSelferValueTypeMap1234 {
			yyl3925 := r.ReadMapStart()
			if yyl3925 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3925, d)
			}
		} else if yyct3925 == codecSelferValueTypeArray1234 {
			yyl3925 := r.ReadArrayStart()
			if yyl3925 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3926Slc
	var yyhl3926 bool = l >= 0
	for yyj3926 := 0; ; yyj3926++ {
		if yyhl3926 {
			if yyj3926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3926Slc = r.DecodeBytes(yys3926Slc, true, true)
		yys3926 := string(yys3926Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3926 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3929 := &x.ListMeta
				yym3930 := z.DecBinary()
				_ = yym3930
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3929) {
				} else {
					z.DecFallback(yyv3929, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3931 := &x.Items
				yym3932 := z.DecBinary()
				_ = yym3932
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3931), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3926)
		} // end switch yys3926
	} // end for yyj3926
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3933 int
	var yyb3933 bool
	var yyhl3933 bool = l >= 0
	yyj3933++
	if yyhl3933 {
		yyb3933 = yyj3933 > l
	} else {
		yyb3933 = r.CheckBreak()
	}
	if yyb3933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3933++
	if yyhl3933 {
		yyb3933 = yyj3933 > l
	} else {
		yyb3933 = r.CheckBreak()
	}
	if yyb3933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3933++
	if yyhl3933 {
		yyb3933 = yyj3933 > l
	} else {
		yyb3933 = r.CheckBreak()
	}
	if yyb3933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3936 := &x.ListMeta
		yym3937 := z.DecBinary()
		_ = yym3937
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3936) {
		} else {
			z.DecFallback(yyv3936, false)
		}
	}
	yyj3933++
	if yyhl3933 {
		yyb3933 = yyj3933 > l
	} else {
		yyb3933 = r.CheckBreak()
	}
	if yyb3933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3938 := &x.Items
		yym3939 := z.DecBinary()
		_ = yym3939
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3938), d)
		}
	}
	for {
		yyj3933++
		if yyhl3933 {
			yyb3933 = yyj3933 > l
		} else {
			yyb3933 = r.CheckBreak()
		}
		if yyb3933 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3933-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3940 := z.EncBinary()
	_ = yym3940
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3941 := z.DecBinary()
	_ = yym3941
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3942 := z.EncBinary()
		_ = yym3942
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3943 := !z.EncBinary()
			yy2arr3943 := z.EncBasicHandle().StructToArray
			var yyq3943 [2]bool
			_, _, _ = yysep3943, yyq3943, yy2arr3943
			const yyr3943 bool = false
			yyq3943[0] = len(x.Hard) != 0
			yyq3943[1] = len(x.Scopes) != 0
			var yynn3943 int
			if yyr3943 || yy2arr3943 {
				r.EncodeArrayStart(2)
			} else {
				yynn3943 = 0
				for _, b := range yyq3943 {
					if b {
						yynn3943++
					}
				}
				r.EncodeMapStart(yynn3943)
				yynn3943 = 0
			}
			if yyr3943 || yy2arr3943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3943[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3943[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3943 || yy2arr3943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3943[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3946 := z.EncBinary()
						_ = yym3946
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3943[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3947 := z.EncBinary()
						_ = yym3947
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr3943 || yy2arr3943 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3948 := z.DecBinary()
	_ = yym3948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3949 := r.ContainerType()
		if yyct3949 == codecSelferValueTypeMap1234 {
			yyl3949 := r.ReadMapStart()
			if yyl3949 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3949, d)
			}
		} else if yyct3949 == codecSelferValueTypeArray1234 {
			yyl3949 := r.ReadArrayStart()
			if yyl3949 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3950Slc
	var yyhl3950 bool = l >= 0
	for yyj3950 := 0; ; yyj3950++ {
		if yyhl3950 {
			if yyj3950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3950Slc = r.DecodeBytes(yys3950Slc, true, true)
		yys3950 := string(yys3950Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3950 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3951 := &x.Hard
				yyv3951.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv3952 := &x.Scopes
				yym3953 := z.DecBinary()
				_ = yym3953
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3952), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3950)
		} // end switch yys3950
	} // end for yyj3950
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3954 int
	var yyb3954 bool
	var yyhl3954 bool = l >= 0
	yyj3954++
	if yyhl3954 {
		yyb3954 = yyj3954 > l
	} else {
		yyb3954 = r.CheckBreak()
	}
	if yyb3954 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3955 := &x.Hard
		yyv3955.CodecDecodeSelf(d)
	}
	yyj3954++
	if yyhl3954 {
		yyb3954 = yyj3954 > l
	} else {
		yyb3954 = r.CheckBreak()
	}
	if yyb3954 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv3956 := &x.Scopes
		yym3957 := z.DecBinary()
		_ = yym3957
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3956), d)
		}
	}
	for {
		yyj3954++
		if yyhl3954 {
			yyb3954 = yyj3954 > l
		} else {
			yyb3954 = r.CheckBreak()
		}
		if yyb3954 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3954-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3958 := z.EncBinary()
		_ = yym3958
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3959 := !z.EncBinary()
			yy2arr3959 := z.EncBasicHandle().StructToArray
			var yyq3959 [2]bool
			_, _, _ = yysep3959, yyq3959, yy2arr3959
			const yyr3959 bool = false
			yyq3959[0] = len(x.Hard) != 0
			yyq3959[1] = len(x.Used) != 0
			var yynn3959 int
			if yyr3959 || yy2arr3959 {
				r.EncodeArrayStart(2)
			} else {
				yynn3959 = 0
				for _, b := range yyq3959 {
					if b {
						yynn3959++
					}
				}
				r.EncodeMapStart(yynn3959)
				yynn3959 = 0
			}
			if yyr3959 || yy2arr3959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3959[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3959[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3959 || yy2arr3959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3959[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3959[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3959 || yy2arr3959 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3962 := z.DecBinary()
	_ = yym3962
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3963 := r.ContainerType()
		if yyct3963 == codecSelferValueTypeMap1234 {
			yyl3963 := r.ReadMapStart()
			if yyl3963 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3963, d)
			}
		} else if yyct3963 == codecSelferValueTypeArray1234 {
			yyl3963 := r.ReadArrayStart()
			if yyl3963 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3963, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3964Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3964Slc
	var yyhl3964 bool = l >= 0
	for yyj3964 := 0; ; yyj3964++ {
		if yyhl3964 {
			if yyj3964 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3964Slc = r.DecodeBytes(yys3964Slc, true, true)
		yys3964 := string(yys3964Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3964 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3965 := &x.Hard
				yyv3965.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3966 := &x.Used
				yyv3966.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3964)
		} // end switch yys3964
	} // end for yyj3964
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3967 int
	var yyb3967 bool
	var yyhl3967 bool = l >= 0
	yyj3967++
	if yyhl3967 {
		yyb3967 = yyj3967 > l
	} else {
		yyb3967 = r.CheckBreak()
	}
	if yyb3967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3968 := &x.Hard
		yyv3968.CodecDecodeSelf(d)
	}
	yyj3967++
	if yyhl3967 {
		yyb3967 = yyj3967 > l
	} else {
		yyb3967 = r.CheckBreak()
	}
	if yyb3967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3969 := &x.Used
		yyv3969.CodecDecodeSelf(d)
	}
	for {
		yyj3967++
		if yyhl3967 {
			yyb3967 = yyj3967 > l
		} else {
			yyb3967 = r.CheckBreak()
		}
		if yyb3967 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3967-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3970 := z.EncBinary()
		_ = yym3970
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3971 := !z.EncBinary()
			yy2arr3971 := z.EncBasicHandle().StructToArray
			var yyq3971 [5]bool
			_, _, _ = yysep3971, yyq3971, yy2arr3971
			const yyr3971 bool = false
			yyq3971[0] = x.Kind != ""
			yyq3971[1] = x.APIVersion != ""
			yyq3971[2] = true
			yyq3971[3] = true
			yyq3971[4] = true
			var yynn3971 int
			if yyr3971 || yy2arr3971 {
				r.EncodeArrayStart(5)
			} else {
				yynn3971 = 0
				for _, b := range yyq3971 {
					if b {
						yynn3971++
					}
				}
				r.EncodeMapStart(yynn3971)
				yynn3971 = 0
			}
			if yyr3971 || yy2arr3971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3971[0] {
					yym3973 := z.EncBinary()
					_ = yym3973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3971[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3974 := z.EncBinary()
					_ = yym3974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3971 || yy2arr3971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3971[1] {
					yym3976 := z.EncBinary()
					_ = yym3976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3971[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3977 := z.EncBinary()
					_ = yym3977
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3971 || yy2arr3971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3971[2] {
					yy3979 := &x.ObjectMeta
					yy3979.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3971[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3980 := &x.ObjectMeta
					yy3980.CodecEncodeSelf(e)
				}
			}
			if yyr3971 || yy2arr3971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3971[3] {
					yy3982 := &x.Spec
					yy3982.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3971[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3983 := &x.Spec
					yy3983.CodecEncodeSelf(e)
				}
			}
			if yyr3971 || yy2arr3971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3971[4] {
					yy3985 := &x.Status
					yy3985.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3971[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3986 := &x.Status
					yy3986.CodecEncodeSelf(e)
				}
			}
			if yyr3971 || yy2arr3971 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3987 := z.DecBinary()
	_ = yym3987
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3988 := r.ContainerType()
		if yyct3988 == codecSelferValueTypeMap1234 {
			yyl3988 := r.ReadMapStart()
			if yyl3988 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3988, d)
			}
		} else if yyct3988 == codecSelferValueTypeArray1234 {
			yyl3988 := r.ReadArrayStart()
			if yyl3988 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3988, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3989Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3989Slc
	var yyhl3989 bool = l >= 0
	for yyj3989 := 0; ; yyj3989++ {
		if yyhl3989 {
			if yyj3989 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3989Slc = r.DecodeBytes(yys3989Slc, true, true)
		yys3989 := string(yys3989Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3989 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3992 := &x.ObjectMeta
				yyv3992.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3993 := &x.Spec
				yyv3993.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3994 := &x.Status
				yyv3994.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3989)
		} // end switch yys3989
	} // end for yyj3989
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3995 int
	var yyb3995 bool
	var yyhl3995 bool = l >= 0
	yyj3995++
	if yyhl3995 {
		yyb3995 = yyj3995 > l
	} else {
		yyb3995 = r.CheckBreak()
	}
	if yyb3995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3995++
	if yyhl3995 {
		yyb3995 = yyj3995 > l
	} else {
		yyb3995 = r.CheckBreak()
	}
	if yyb3995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3995++
	if yyhl3995 {
		yyb3995 = yyj3995 > l
	} else {
		yyb3995 = r.CheckBreak()
	}
	if yyb3995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3998 := &x.ObjectMeta
		yyv3998.CodecDecodeSelf(d)
	}
	yyj3995++
	if yyhl3995 {
		yyb3995 = yyj3995 > l
	} else {
		yyb3995 = r.CheckBreak()
	}
	if yyb3995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3999 := &x.Spec
		yyv3999.CodecDecodeSelf(d)
	}
	yyj3995++
	if yyhl3995 {
		yyb3995 = yyj3995 > l
	} else {
		yyb3995 = r.CheckBreak()
	}
	if yyb3995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4000 := &x.Status
		yyv4000.CodecDecodeSelf(d)
	}
	for {
		yyj3995++
		if yyhl3995 {
			yyb3995 = yyj3995 > l
		} else {
			yyb3995 = r.CheckBreak()
		}
		if yyb3995 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3995-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4001 := z.EncBinary()
		_ = yym4001
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4002 := !z.EncBinary()
			yy2arr4002 := z.EncBasicHandle().StructToArray
			var yyq4002 [4]bool
			_, _, _ = yysep4002, yyq4002, yy2arr4002
			const yyr4002 bool = false
			yyq4002[0] = x.Kind != ""
			yyq4002[1] = x.APIVersion != ""
			yyq4002[2] = true
			var yynn4002 int
			if yyr4002 || yy2arr4002 {
				r.EncodeArrayStart(4)
			} else {
				yynn4002 = 1
				for _, b := range yyq4002 {
					if b {
						yynn4002++
					}
				}
				r.EncodeMapStart(yynn4002)
				yynn4002 = 0
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[0] {
					yym4004 := z.EncBinary()
					_ = yym4004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4002[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4005 := z.EncBinary()
					_ = yym4005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[1] {
					yym4007 := z.EncBinary()
					_ = yym4007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4002[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4008 := z.EncBinary()
					_ = yym4008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[2] {
					yy4010 := &x.ListMeta
					yym4011 := z.EncBinary()
					_ = yym4011
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4010) {
					} else {
						z.EncFallback(yy4010)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4002[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4012 := &x.ListMeta
					yym4013 := z.EncBinary()
					_ = yym4013
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4012) {
					} else {
						z.EncFallback(yy4012)
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4015 := z.EncBinary()
					_ = yym4015
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4016 := z.EncBinary()
					_ = yym4016
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4017 := z.DecBinary()
	_ = yym4017
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4018 := r.ContainerType()
		if yyct4018 == codecSelferValueTypeMap1234 {
			yyl4018 := r.ReadMapStart()
			if yyl4018 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4018, d)
			}
		} else if yyct4018 == codecSelferValueTypeArray1234 {
			yyl4018 := r.ReadArrayStart()
			if yyl4018 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4018, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4019Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4019Slc
	var yyhl4019 bool = l >= 0
	for yyj4019 := 0; ; yyj4019++ {
		if yyhl4019 {
			if yyj4019 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4019Slc = r.DecodeBytes(yys4019Slc, true, true)
		yys4019 := string(yys4019Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4019 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4022 := &x.ListMeta
				yym4023 := z.DecBinary()
				_ = yym4023
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4022) {
				} else {
					z.DecFallback(yyv4022, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4024 := &x.Items
				yym4025 := z.DecBinary()
				_ = yym4025
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4024), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4019)
		} // end switch yys4019
	} // end for yyj4019
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4026 int
	var yyb4026 bool
	var yyhl4026 bool = l >= 0
	yyj4026++
	if yyhl4026 {
		yyb4026 = yyj4026 > l
	} else {
		yyb4026 = r.CheckBreak()
	}
	if yyb4026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4026++
	if yyhl4026 {
		yyb4026 = yyj4026 > l
	} else {
		yyb4026 = r.CheckBreak()
	}
	if yyb4026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4026++
	if yyhl4026 {
		yyb4026 = yyj4026 > l
	} else {
		yyb4026 = r.CheckBreak()
	}
	if yyb4026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4029 := &x.ListMeta
		yym4030 := z.DecBinary()
		_ = yym4030
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4029) {
		} else {
			z.DecFallback(yyv4029, false)
		}
	}
	yyj4026++
	if yyhl4026 {
		yyb4026 = yyj4026 > l
	} else {
		yyb4026 = r.CheckBreak()
	}
	if yyb4026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4031 := &x.Items
		yym4032 := z.DecBinary()
		_ = yym4032
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4031), d)
		}
	}
	for {
		yyj4026++
		if yyhl4026 {
			yyb4026 = yyj4026 > l
		} else {
			yyb4026 = r.CheckBreak()
		}
		if yyb4026 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4026-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4033 := z.EncBinary()
		_ = yym4033
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4034 := !z.EncBinary()
			yy2arr4034 := z.EncBasicHandle().StructToArray
			var yyq4034 [6]bool
			_, _, _ = yysep4034, yyq4034, yy2arr4034
			const yyr4034 bool = false
			yyq4034[0] = x.Kind != ""
			yyq4034[1] = x.APIVersion != ""
			yyq4034[2] = true
			yyq4034[3] = len(x.Data) != 0
			yyq4034[4] = len(x.StringData) != 0
			yyq4034[5] = x.Type != ""
			var yynn4034 int
			if yyr4034 || yy2arr4034 {
				r.EncodeArrayStart(6)
			} else {
				yynn4034 = 0
				for _, b := range yyq4034 {
					if b {
						yynn4034++
					}
				}
				r.EncodeMapStart(yynn4034)
				yynn4034 = 0
			}
			if yyr4034 || yy2arr4034 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4034[0] {
					yym4036 := z.EncBinary()
					_ = yym4036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4034[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4037 := z.EncBinary()
					_ = yym4037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4034 || yy2arr4034 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4034[1] {
					yym4039 := z.EncBinary()
					_ = yym4039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4034[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4040 := z.EncBinary()
					_ = yym4040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4034 || yy2arr4034 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4034[2] {
					yy4042 := &x.ObjectMeta
					yy4042.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4034[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4043 := &x.ObjectMeta
					yy4043.CodecEncodeSelf(e)
				}
			}
			if yyr4034 || yy2arr4034 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4034[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4045 := z.EncBinary()
						_ = yym4045
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4034[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4046 := z.EncBinary()
						_ = yym4046
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4034 || yy2arr4034 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4034[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4048 := z.EncBinary()
						_ = yym4048
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4034[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4049 := z.EncBinary()
						_ = yym4049
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4034 || yy2arr4034 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4034[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4034[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4034 || yy2arr4034 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4051 := z.DecBinary()
	_ = yym4051
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4052 := r.ContainerType()
		if yyct4052 == codecSelferValueTypeMap1234 {
			yyl4052 := r.ReadMapStart()
			if yyl4052 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4052, d)
			}
		} else if yyct4052 == codecSelferValueTypeArray1234 {
			yyl4052 := r.ReadArrayStart()
			if yyl4052 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4052, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4053Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4053Slc
	var yyhl4053 bool = l >= 0
	for yyj4053 := 0; ; yyj4053++ {
		if yyhl4053 {
			if yyj4053 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4053Slc = r.DecodeBytes(yys4053Slc, true, true)
		yys4053 := string(yys4053Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4053 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4056 := &x.ObjectMeta
				yyv4056.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4057 := &x.Data
				yym4058 := z.DecBinary()
				_ = yym4058
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4057), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4059 := &x.StringData
				yym4060 := z.DecBinary()
				_ = yym4060
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4059, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4053)
		} // end switch yys4053
	} // end for yyj4053
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4062 int
	var yyb4062 bool
	var yyhl4062 bool = l >= 0
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4065 := &x.ObjectMeta
		yyv4065.CodecDecodeSelf(d)
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4066 := &x.Data
		yym4067 := z.DecBinary()
		_ = yym4067
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4066), d)
		}
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4068 := &x.StringData
		yym4069 := z.DecBinary()
		_ = yym4069
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4068, false, d)
		}
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4062++
		if yyhl4062 {
			yyb4062 = yyj4062 > l
		} else {
			yyb4062 = r.CheckBreak()
		}
		if yyb4062 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4062-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4071 := z.EncBinary()
	_ = yym4071
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4072 := z.DecBinary()
	_ = yym4072
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4073 := z.EncBinary()
		_ = yym4073
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4074 := !z.EncBinary()
			yy2arr4074 := z.EncBasicHandle().StructToArray
			var yyq4074 [4]bool
			_, _, _ = yysep4074, yyq4074, yy2arr4074
			const yyr4074 bool = false
			yyq4074[0] = x.Kind != ""
			yyq4074[1] = x.APIVersion != ""
			yyq4074[2] = true
			var yynn4074 int
			if yyr4074 || yy2arr4074 {
				r.EncodeArrayStart(4)
			} else {
				yynn4074 = 1
				for _, b := range yyq4074 {
					if b {
						yynn4074++
					}
				}
				r.EncodeMapStart(yynn4074)
				yynn4074 = 0
			}
			if yyr4074 || yy2arr4074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4074[0] {
					yym4076 := z.EncBinary()
					_ = yym4076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4074[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4077 := z.EncBinary()
					_ = yym4077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4074 || yy2arr4074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4074[1] {
					yym4079 := z.EncBinary()
					_ = yym4079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4074[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4080 := z.EncBinary()
					_ = yym4080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4074 || yy2arr4074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4074[2] {
					yy4082 := &x.ListMeta
					yym4083 := z.EncBinary()
					_ = yym4083
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4082) {
					} else {
						z.EncFallback(yy4082)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4074[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4084 := &x.ListMeta
					yym4085 := z.EncBinary()
					_ = yym4085
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4084) {
					} else {
						z.EncFallback(yy4084)
					}
				}
			}
			if yyr4074 || yy2arr4074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4087 := z.EncBinary()
					_ = yym4087
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4088 := z.EncBinary()
					_ = yym4088
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4074 || yy2arr4074 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4089 := z.DecBinary()
	_ = yym4089
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4090 := r.ContainerType()
		if yyct4090 == codecSelferValueTypeMap1234 {
			yyl4090 := r.ReadMapStart()
			if yyl4090 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4090, d)
			}
		} else if yyct4090 == codecSelferValueTypeArray1234 {
			yyl4090 := r.ReadArrayStart()
			if yyl4090 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4090, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4091Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4091Slc
	var yyhl4091 bool = l >= 0
	for yyj4091 := 0; ; yyj4091++ {
		if yyhl4091 {
			if yyj4091 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4091Slc = r.DecodeBytes(yys4091Slc, true, true)
		yys4091 := string(yys4091Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4091 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4094 := &x.ListMeta
				yym4095 := z.DecBinary()
				_ = yym4095
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4094) {
				} else {
					z.DecFallback(yyv4094, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4096 := &x.Items
				yym4097 := z.DecBinary()
				_ = yym4097
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4096), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4091)
		} // end switch yys4091
	} // end for yyj4091
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4098 int
	var yyb4098 bool
	var yyhl4098 bool = l >= 0
	yyj4098++
	if yyhl4098 {
		yyb4098 = yyj4098 > l
	} else {
		yyb4098 = r.CheckBreak()
	}
	if yyb4098 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4098++
	if yyhl4098 {
		yyb4098 = yyj4098 > l
	} else {
		yyb4098 = r.CheckBreak()
	}
	if yyb4098 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4098++
	if yyhl4098 {
		yyb4098 = yyj4098 > l
	} else {
		yyb4098 = r.CheckBreak()
	}
	if yyb4098 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4101 := &x.ListMeta
		yym4102 := z.DecBinary()
		_ = yym4102
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4101) {
		} else {
			z.DecFallback(yyv4101, false)
		}
	}
	yyj4098++
	if yyhl4098 {
		yyb4098 = yyj4098 > l
	} else {
		yyb4098 = r.CheckBreak()
	}
	if yyb4098 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4103 := &x.Items
		yym4104 := z.DecBinary()
		_ = yym4104
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4103), d)
		}
	}
	for {
		yyj4098++
		if yyhl4098 {
			yyb4098 = yyj4098 > l
		} else {
			yyb4098 = r.CheckBreak()
		}
		if yyb4098 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4098-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4105 := z.EncBinary()
		_ = yym4105
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4106 := !z.EncBinary()
			yy2arr4106 := z.EncBasicHandle().StructToArray
			var yyq4106 [4]bool
			_, _, _ = yysep4106, yyq4106, yy2arr4106
			const yyr4106 bool = false
			yyq4106[0] = x.Kind != ""
			yyq4106[1] = x.APIVersion != ""
			yyq4106[2] = true
			yyq4106[3] = len(x.Data) != 0
			var yynn4106 int
			if yyr4106 || yy2arr4106 {
				r.EncodeArrayStart(4)
			} else {
				yynn4106 = 0
				for _, b := range yyq4106 {
					if b {
						yynn4106++
					}
				}
				r.EncodeMapStart(yynn4106)
				yynn4106 = 0
			}
			if yyr4106 || yy2arr4106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4106[0] {
					yym4108 := z.EncBinary()
					_ = yym4108
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4106[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4109 := z.EncBinary()
					_ = yym4109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4106 || yy2arr4106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4106[1] {
					yym4111 := z.EncBinary()
					_ = yym4111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4106[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4112 := z.EncBinary()
					_ = yym4112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4106 || yy2arr4106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4106[2] {
					yy4114 := &x.ObjectMeta
					yy4114.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4106[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4115 := &x.ObjectMeta
					yy4115.CodecEncodeSelf(e)
				}
			}
			if yyr4106 || yy2arr4106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4106[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4117 := z.EncBinary()
						_ = yym4117
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4106[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4118 := z.EncBinary()
						_ = yym4118
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4106 || yy2arr4106 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4119 := z.DecBinary()
	_ = yym4119
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4120 := r.ContainerType()
		if yyct4120 == codecSelferValueTypeMap1234 {
			yyl4120 := r.ReadMapStart()
			if yyl4120 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4120, d)
			}
		} else if yyct4120 == codecSelferValueTypeArray1234 {
			yyl4120 := r.ReadArrayStart()
			if yyl4120 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4120, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4121Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4121Slc
	var yyhl4121 bool = l >= 0
	for yyj4121 := 0; ; yyj4121++ {
		if yyhl4121 {
			if yyj4121 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4121Slc = r.DecodeBytes(yys4121Slc, true, true)
		yys4121 := string(yys4121Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4121 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4124 := &x.ObjectMeta
				yyv4124.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4125 := &x.Data
				yym4126 := z.DecBinary()
				_ = yym4126
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4125, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4121)
		} // end switch yys4121
	} // end for yyj4121
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4127 int
	var yyb4127 bool
	var yyhl4127 bool = l >= 0
	yyj4127++
	if yyhl4127 {
		yyb4127 = yyj4127 > l
	} else {
		yyb4127 = r.CheckBreak()
	}
	if yyb4127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4127++
	if yyhl4127 {
		yyb4127 = yyj4127 > l
	} else {
		yyb4127 = r.CheckBreak()
	}
	if yyb4127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4127++
	if yyhl4127 {
		yyb4127 = yyj4127 > l
	} else {
		yyb4127 = r.CheckBreak()
	}
	if yyb4127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4130 := &x.ObjectMeta
		yyv4130.CodecDecodeSelf(d)
	}
	yyj4127++
	if yyhl4127 {
		yyb4127 = yyj4127 > l
	} else {
		yyb4127 = r.CheckBreak()
	}
	if yyb4127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4131 := &x.Data
		yym4132 := z.DecBinary()
		_ = yym4132
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4131, false, d)
		}
	}
	for {
		yyj4127++
		if yyhl4127 {
			yyb4127 = yyj4127 > l
		} else {
			yyb4127 = r.CheckBreak()
		}
		if yyb4127 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4127-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4133 := z.EncBinary()
		_ = yym4133
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4134 := !z.EncBinary()
			yy2arr4134 := z.EncBasicHandle().StructToArray
			var yyq4134 [4]bool
			_, _, _ = yysep4134, yyq4134, yy2arr4134
			const yyr4134 bool = false
			yyq4134[0] = x.Kind != ""
			yyq4134[1] = x.APIVersion != ""
			yyq4134[2] = true
			var yynn4134 int
			if yyr4134 || yy2arr4134 {
				r.EncodeArrayStart(4)
			} else {
				yynn4134 = 1
				for _, b := range yyq4134 {
					if b {
						yynn4134++
					}
				}
				r.EncodeMapStart(yynn4134)
				yynn4134 = 0
			}
			if yyr4134 || yy2arr4134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4134[0] {
					yym4136 := z.EncBinary()
					_ = yym4136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4134[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4137 := z.EncBinary()
					_ = yym4137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4134 || yy2arr4134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4134[1] {
					yym4139 := z.EncBinary()
					_ = yym4139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4134[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4140 := z.EncBinary()
					_ = yym4140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4134 || yy2arr4134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4134[2] {
					yy4142 := &x.ListMeta
					yym4143 := z.EncBinary()
					_ = yym4143
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4142) {
					} else {
						z.EncFallback(yy4142)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4134[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4144 := &x.ListMeta
					yym4145 := z.EncBinary()
					_ = yym4145
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4144) {
					} else {
						z.EncFallback(yy4144)
					}
				}
			}
			if yyr4134 || yy2arr4134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4147 := z.EncBinary()
					_ = yym4147
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4148 := z.EncBinary()
					_ = yym4148
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4134 || yy2arr4134 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4149 := z.DecBinary()
	_ = yym4149
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4150 := r.ContainerType()
		if yyct4150 == codecSelferValueTypeMap1234 {
			yyl4150 := r.ReadMapStart()
			if yyl4150 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4150, d)
			}
		} else if yyct4150 == codecSelferValueTypeArray1234 {
			yyl4150 := r.ReadArrayStart()
			if yyl4150 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4150, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4151Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4151Slc
	var yyhl4151 bool = l >= 0
	for yyj4151 := 0; ; yyj4151++ {
		if yyhl4151 {
			if yyj4151 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4151Slc = r.DecodeBytes(yys4151Slc, true, true)
		yys4151 := string(yys4151Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4151 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4154 := &x.ListMeta
				yym4155 := z.DecBinary()
				_ = yym4155
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4154) {
				} else {
					z.DecFallback(yyv4154, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4156 := &x.Items
				yym4157 := z.DecBinary()
				_ = yym4157
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4156), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4151)
		} // end switch yys4151
	} // end for yyj4151
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4158 int
	var yyb4158 bool
	var yyhl4158 bool = l >= 0
	yyj4158++
	if yyhl4158 {
		yyb4158 = yyj4158 > l
	} else {
		yyb4158 = r.CheckBreak()
	}
	if yyb4158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4158++
	if yyhl4158 {
		yyb4158 = yyj4158 > l
	} else {
		yyb4158 = r.CheckBreak()
	}
	if yyb4158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4158++
	if yyhl4158 {
		yyb4158 = yyj4158 > l
	} else {
		yyb4158 = r.CheckBreak()
	}
	if yyb4158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4161 := &x.ListMeta
		yym4162 := z.DecBinary()
		_ = yym4162
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4161) {
		} else {
			z.DecFallback(yyv4161, false)
		}
	}
	yyj4158++
	if yyhl4158 {
		yyb4158 = yyj4158 > l
	} else {
		yyb4158 = r.CheckBreak()
	}
	if yyb4158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4163 := &x.Items
		yym4164 := z.DecBinary()
		_ = yym4164
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4163), d)
		}
	}
	for {
		yyj4158++
		if yyhl4158 {
			yyb4158 = yyj4158 > l
		} else {
			yyb4158 = r.CheckBreak()
		}
		if yyb4158 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4158-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4165 := z.EncBinary()
	_ = yym4165
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4166 := z.DecBinary()
	_ = yym4166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4167 := z.EncBinary()
		_ = yym4167
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4168 := !z.EncBinary()
			yy2arr4168 := z.EncBasicHandle().StructToArray
			var yyq4168 [4]bool
			_, _, _ = yysep4168, yyq4168, yy2arr4168
			const yyr4168 bool = false
			yyq4168[2] = x.Message != ""
			yyq4168[3] = x.Error != ""
			var yynn4168 int
			if yyr4168 || yy2arr4168 {
				r.EncodeArrayStart(4)
			} else {
				yynn4168 = 2
				for _, b := range yyq4168 {
					if b {
						yynn4168++
					}
				}
				r.EncodeMapStart(yynn4168)
				yynn4168 = 0
			}
			if yyr4168 || yy2arr4168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4168 || yy2arr4168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4168 || yy2arr4168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4168[2] {
					yym4172 := z.EncBinary()
					_ = yym4172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4168[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4173 := z.EncBinary()
					_ = yym4173
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4168 || yy2arr4168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4168[3] {
					yym4175 := z.EncBinary()
					_ = yym4175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4168[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4176 := z.EncBinary()
					_ = yym4176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4168 || yy2arr4168 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4177 := z.DecBinary()
	_ = yym4177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4178 := r.ContainerType()
		if yyct4178 == codecSelferValueTypeMap1234 {
			yyl4178 := r.ReadMapStart()
			if yyl4178 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4178, d)
			}
		} else if yyct4178 == codecSelferValueTypeArray1234 {
			yyl4178 := r.ReadArrayStart()
			if yyl4178 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4178, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4179Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4179Slc
	var yyhl4179 bool = l >= 0
	for yyj4179 := 0; ; yyj4179++ {
		if yyhl4179 {
			if yyj4179 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4179Slc = r.DecodeBytes(yys4179Slc, true, true)
		yys4179 := string(yys4179Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4179 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4179)
		} // end switch yys4179
	} // end for yyj4179
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4184 int
	var yyb4184 bool
	var yyhl4184 bool = l >= 0
	yyj4184++
	if yyhl4184 {
		yyb4184 = yyj4184 > l
	} else {
		yyb4184 = r.CheckBreak()
	}
	if yyb4184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4184++
	if yyhl4184 {
		yyb4184 = yyj4184 > l
	} else {
		yyb4184 = r.CheckBreak()
	}
	if yyb4184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4184++
	if yyhl4184 {
		yyb4184 = yyj4184 > l
	} else {
		yyb4184 = r.CheckBreak()
	}
	if yyb4184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4184++
	if yyhl4184 {
		yyb4184 = yyj4184 > l
	} else {
		yyb4184 = r.CheckBreak()
	}
	if yyb4184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4184++
		if yyhl4184 {
			yyb4184 = yyj4184 > l
		} else {
			yyb4184 = r.CheckBreak()
		}
		if yyb4184 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4184-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4189 := z.EncBinary()
		_ = yym4189
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4190 := !z.EncBinary()
			yy2arr4190 := z.EncBasicHandle().StructToArray
			var yyq4190 [4]bool
			_, _, _ = yysep4190, yyq4190, yy2arr4190
			const yyr4190 bool = false
			yyq4190[0] = x.Kind != ""
			yyq4190[1] = x.APIVersion != ""
			yyq4190[2] = true
			yyq4190[3] = len(x.Conditions) != 0
			var yynn4190 int
			if yyr4190 || yy2arr4190 {
				r.EncodeArrayStart(4)
			} else {
				yynn4190 = 0
				for _, b := range yyq4190 {
					if b {
						yynn4190++
					}
				}
				r.EncodeMapStart(yynn4190)
				yynn4190 = 0
			}
			if yyr4190 || yy2arr4190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4190[0] {
					yym4192 := z.EncBinary()
					_ = yym4192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4190[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4193 := z.EncBinary()
					_ = yym4193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4190 || yy2arr4190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4190[1] {
					yym4195 := z.EncBinary()
					_ = yym4195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4190[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4196 := z.EncBinary()
					_ = yym4196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4190 || yy2arr4190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4190[2] {
					yy4198 := &x.ObjectMeta
					yy4198.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4190[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4199 := &x.ObjectMeta
					yy4199.CodecEncodeSelf(e)
				}
			}
			if yyr4190 || yy2arr4190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4190[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4201 := z.EncBinary()
						_ = yym4201
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4190[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4202 := z.EncBinary()
						_ = yym4202
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4190 || yy2arr4190 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4203 := z.DecBinary()
	_ = yym4203
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4204 := r.ContainerType()
		if yyct4204 == codecSelferValueTypeMap1234 {
			yyl4204 := r.ReadMapStart()
			if yyl4204 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4204, d)
			}
		} else if yyct4204 == codecSelferValueTypeArray1234 {
			yyl4204 := r.ReadArrayStart()
			if yyl4204 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4204, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4205Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4205Slc
	var yyhl4205 bool = l >= 0
	for yyj4205 := 0; ; yyj4205++ {
		if yyhl4205 {
			if yyj4205 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4205Slc = r.DecodeBytes(yys4205Slc, true, true)
		yys4205 := string(yys4205Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4205 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4208 := &x.ObjectMeta
				yyv4208.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4209 := &x.Conditions
				yym4210 := z.DecBinary()
				_ = yym4210
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4209), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4205)
		} // end switch yys4205
	} // end for yyj4205
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4211 int
	var yyb4211 bool
	var yyhl4211 bool = l >= 0
	yyj4211++
	if yyhl4211 {
		yyb4211 = yyj4211 > l
	} else {
		yyb4211 = r.CheckBreak()
	}
	if yyb4211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4211++
	if yyhl4211 {
		yyb4211 = yyj4211 > l
	} else {
		yyb4211 = r.CheckBreak()
	}
	if yyb4211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4211++
	if yyhl4211 {
		yyb4211 = yyj4211 > l
	} else {
		yyb4211 = r.CheckBreak()
	}
	if yyb4211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4214 := &x.ObjectMeta
		yyv4214.CodecDecodeSelf(d)
	}
	yyj4211++
	if yyhl4211 {
		yyb4211 = yyj4211 > l
	} else {
		yyb4211 = r.CheckBreak()
	}
	if yyb4211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4215 := &x.Conditions
		yym4216 := z.DecBinary()
		_ = yym4216
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4215), d)
		}
	}
	for {
		yyj4211++
		if yyhl4211 {
			yyb4211 = yyj4211 > l
		} else {
			yyb4211 = r.CheckBreak()
		}
		if yyb4211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4217 := z.EncBinary()
		_ = yym4217
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4218 := !z.EncBinary()
			yy2arr4218 := z.EncBasicHandle().StructToArray
			var yyq4218 [4]bool
			_, _, _ = yysep4218, yyq4218, yy2arr4218
			const yyr4218 bool = false
			yyq4218[0] = x.Kind != ""
			yyq4218[1] = x.APIVersion != ""
			yyq4218[2] = true
			var yynn4218 int
			if yyr4218 || yy2arr4218 {
				r.EncodeArrayStart(4)
			} else {
				yynn4218 = 1
				for _, b := range yyq4218 {
					if b {
						yynn4218++
					}
				}
				r.EncodeMapStart(yynn4218)
				yynn4218 = 0
			}
			if yyr4218 || yy2arr4218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4218[0] {
					yym4220 := z.EncBinary()
					_ = yym4220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4218[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4221 := z.EncBinary()
					_ = yym4221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4218 || yy2arr4218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4218[1] {
					yym4223 := z.EncBinary()
					_ = yym4223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4218[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4224 := z.EncBinary()
					_ = yym4224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4218 || yy2arr4218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4218[2] {
					yy4226 := &x.ListMeta
					yym4227 := z.EncBinary()
					_ = yym4227
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4226) {
					} else {
						z.EncFallback(yy4226)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4218[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4228 := &x.ListMeta
					yym4229 := z.EncBinary()
					_ = yym4229
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4228) {
					} else {
						z.EncFallback(yy4228)
					}
				}
			}
			if yyr4218 || yy2arr4218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4231 := z.EncBinary()
					_ = yym4231
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4232 := z.EncBinary()
					_ = yym4232
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4218 || yy2arr4218 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4233 := z.DecBinary()
	_ = yym4233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4234 := r.ContainerType()
		if yyct4234 == codecSelferValueTypeMap1234 {
			yyl4234 := r.ReadMapStart()
			if yyl4234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4234, d)
			}
		} else if yyct4234 == codecSelferValueTypeArray1234 {
			yyl4234 := r.ReadArrayStart()
			if yyl4234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4235Slc
	var yyhl4235 bool = l >= 0
	for yyj4235 := 0; ; yyj4235++ {
		if yyhl4235 {
			if yyj4235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4235Slc = r.DecodeBytes(yys4235Slc, true, true)
		yys4235 := string(yys4235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4235 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4238 := &x.ListMeta
				yym4239 := z.DecBinary()
				_ = yym4239
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4238) {
				} else {
					z.DecFallback(yyv4238, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4240 := &x.Items
				yym4241 := z.DecBinary()
				_ = yym4241
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4240), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4235)
		} // end switch yys4235
	} // end for yyj4235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4242 int
	var yyb4242 bool
	var yyhl4242 bool = l >= 0
	yyj4242++
	if yyhl4242 {
		yyb4242 = yyj4242 > l
	} else {
		yyb4242 = r.CheckBreak()
	}
	if yyb4242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4242++
	if yyhl4242 {
		yyb4242 = yyj4242 > l
	} else {
		yyb4242 = r.CheckBreak()
	}
	if yyb4242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4242++
	if yyhl4242 {
		yyb4242 = yyj4242 > l
	} else {
		yyb4242 = r.CheckBreak()
	}
	if yyb4242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4245 := &x.ListMeta
		yym4246 := z.DecBinary()
		_ = yym4246
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4245) {
		} else {
			z.DecFallback(yyv4245, false)
		}
	}
	yyj4242++
	if yyhl4242 {
		yyb4242 = yyj4242 > l
	} else {
		yyb4242 = r.CheckBreak()
	}
	if yyb4242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4247 := &x.Items
		yym4248 := z.DecBinary()
		_ = yym4248
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4247), d)
		}
	}
	for {
		yyj4242++
		if yyhl4242 {
			yyb4242 = yyj4242 > l
		} else {
			yyb4242 = r.CheckBreak()
		}
		if yyb4242 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4242-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4249 := z.EncBinary()
		_ = yym4249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4250 := !z.EncBinary()
			yy2arr4250 := z.EncBasicHandle().StructToArray
			var yyq4250 [1]bool
			_, _, _ = yysep4250, yyq4250, yy2arr4250
			const yyr4250 bool = false
			yyq4250[0] = len(x.Items) != 0
			var yynn4250 int
			if yyr4250 || yy2arr4250 {
				r.EncodeArrayStart(1)
			} else {
				yynn4250 = 0
				for _, b := range yyq4250 {
					if b {
						yynn4250++
					}
				}
				r.EncodeMapStart(yynn4250)
				yynn4250 = 0
			}
			if yyr4250 || yy2arr4250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4250[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4252 := z.EncBinary()
						_ = yym4252
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4253 := z.EncBinary()
						_ = yym4253
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4250 || yy2arr4250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4254 := z.DecBinary()
	_ = yym4254
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4255 := r.ContainerType()
		if yyct4255 == codecSelferValueTypeMap1234 {
			yyl4255 := r.ReadMapStart()
			if yyl4255 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4255, d)
			}
		} else if yyct4255 == codecSelferValueTypeArray1234 {
			yyl4255 := r.ReadArrayStart()
			if yyl4255 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4255, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4256Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4256Slc
	var yyhl4256 bool = l >= 0
	for yyj4256 := 0; ; yyj4256++ {
		if yyhl4256 {
			if yyj4256 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4256Slc = r.DecodeBytes(yys4256Slc, true, true)
		yys4256 := string(yys4256Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4256 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4257 := &x.Items
				yym4258 := z.DecBinary()
				_ = yym4258
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4257), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4256)
		} // end switch yys4256
	} // end for yyj4256
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4259 int
	var yyb4259 bool
	var yyhl4259 bool = l >= 0
	yyj4259++
	if yyhl4259 {
		yyb4259 = yyj4259 > l
	} else {
		yyb4259 = r.CheckBreak()
	}
	if yyb4259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4260 := &x.Items
		yym4261 := z.DecBinary()
		_ = yym4261
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4260), d)
		}
	}
	for {
		yyj4259++
		if yyhl4259 {
			yyb4259 = yyj4259 > l
		} else {
			yyb4259 = r.CheckBreak()
		}
		if yyb4259 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4259-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4262 := z.EncBinary()
		_ = yym4262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4263 := !z.EncBinary()
			yy2arr4263 := z.EncBasicHandle().StructToArray
			var yyq4263 [3]bool
			_, _, _ = yysep4263, yyq4263, yy2arr4263
			const yyr4263 bool = false
			yyq4263[1] = x.FieldRef != nil
			yyq4263[2] = x.ResourceFieldRef != nil
			var yynn4263 int
			if yyr4263 || yy2arr4263 {
				r.EncodeArrayStart(3)
			} else {
				yynn4263 = 1
				for _, b := range yyq4263 {
					if b {
						yynn4263++
					}
				}
				r.EncodeMapStart(yynn4263)
				yynn4263 = 0
			}
			if yyr4263 || yy2arr4263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4265 := z.EncBinary()
				_ = yym4265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4266 := z.EncBinary()
				_ = yym4266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4263 || yy2arr4263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4263[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4263[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4263 || yy2arr4263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4263[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4263[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4263 || yy2arr4263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4269 := z.DecBinary()
	_ = yym4269
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4270 := r.ContainerType()
		if yyct4270 == codecSelferValueTypeMap1234 {
			yyl4270 := r.ReadMapStart()
			if yyl4270 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4270, d)
			}
		} else if yyct4270 == codecSelferValueTypeArray1234 {
			yyl4270 := r.ReadArrayStart()
			if yyl4270 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4270, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4271Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4271Slc
	var yyhl4271 bool = l >= 0
	for yyj4271 := 0; ; yyj4271++ {
		if yyhl4271 {
			if yyj4271 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4271Slc = r.DecodeBytes(yys4271Slc, true, true)
		yys4271 := string(yys4271Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4271 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4271)
		} // end switch yys4271
	} // end for yyj4271
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4275 int
	var yyb4275 bool
	var yyhl4275 bool = l >= 0
	yyj4275++
	if yyhl4275 {
		yyb4275 = yyj4275 > l
	} else {
		yyb4275 = r.CheckBreak()
	}
	if yyb4275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4275++
	if yyhl4275 {
		yyb4275 = yyj4275 > l
	} else {
		yyb4275 = r.CheckBreak()
	}
	if yyb4275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4275++
	if yyhl4275 {
		yyb4275 = yyj4275 > l
	} else {
		yyb4275 = r.CheckBreak()
	}
	if yyb4275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj4275++
		if yyhl4275 {
			yyb4275 = yyj4275 > l
		} else {
			yyb4275 = r.CheckBreak()
		}
		if yyb4275 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4275-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4279 := z.EncBinary()
		_ = yym4279
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4280 := !z.EncBinary()
			yy2arr4280 := z.EncBasicHandle().StructToArray
			var yyq4280 [6]bool
			_, _, _ = yysep4280, yyq4280, yy2arr4280
			const yyr4280 bool = false
			yyq4280[0] = x.Capabilities != nil
			yyq4280[1] = x.Privileged != nil
			yyq4280[2] = x.SELinuxOptions != nil
			yyq4280[3] = x.RunAsUser != nil
			yyq4280[4] = x.RunAsNonRoot != nil
			yyq4280[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4280 int
			if yyr4280 || yy2arr4280 {
				r.EncodeArrayStart(6)
			} else {
				yynn4280 = 0
				for _, b := range yyq4280 {
					if b {
						yynn4280++
					}
				}
				r.EncodeMapStart(yynn4280)
				yynn4280 = 0
			}
			if yyr4280 || yy2arr4280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4280[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4280[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4280 || yy2arr4280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4280[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4283 := *x.Privileged
						yym4284 := z.EncBinary()
						_ = yym4284
						if false {
						} else {
							r.EncodeBool(bool(yy4283))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4280[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4285 := *x.Privileged
						yym4286 := z.EncBinary()
						_ = yym4286
						if false {
						} else {
							r.EncodeBool(bool(yy4285))
						}
					}
				}
			}
			if yyr4280 || yy2arr4280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4280[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4280[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4280 || yy2arr4280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4280[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4289 := *x.RunAsUser
						yym4290 := z.EncBinary()
						_ = yym4290
						if false {
						} else {
							r.EncodeInt(int64(yy4289))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4280[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4291 := *x.RunAsUser
						yym4292 := z.EncBinary()
						_ = yym4292
						if false {
						} else {
							r.EncodeInt(int64(yy4291))
						}
					}
				}
			}
			if yyr4280 || yy2arr4280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4280[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4294 := *x.RunAsNonRoot
						yym4295 := z.EncBinary()
						_ = yym4295
						if false {
						} else {
							r.EncodeBool(bool(yy4294))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4280[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4296 := *x.RunAsNonRoot
						yym4297 := z.EncBinary()
						_ = yym4297
						if false {
						} else {
							r.EncodeBool(bool(yy4296))
						}
					}
				}
			}
			if yyr4280 || yy2arr4280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4280[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4299 := *x.ReadOnlyRootFilesystem
						yym4300 := z.EncBinary()
						_ = yym4300
						if false {
						} else {
							r.EncodeBool(bool(yy4299))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4280[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4301 := *x.ReadOnlyRootFilesystem
						yym4302 := z.EncBinary()
						_ = yym4302
						if false {
						} else {
							r.EncodeBool(bool(yy4301))
						}
					}
				}
			}
			if yyr4280 || yy2arr4280 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4303 := z.DecBinary()
	_ = yym4303
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4304 := r.ContainerType()
		if yyct4304 == codecSelferValueTypeMap1234 {
			yyl4304 := r.ReadMapStart()
			if yyl4304 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4304, d)
			}
		} else if yyct4304 == codecSelferValueTypeArray1234 {
			yyl4304 := r.ReadArrayStart()
			if yyl4304 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4304, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4305Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4305Slc
	var yyhl4305 bool = l >= 0
	for yyj4305 := 0; ; yyj4305++ {
		if yyhl4305 {
			if yyj4305 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4305Slc = r.DecodeBytes(yys4305Slc, true, true)
		yys4305 := string(yys4305Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4305 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4308 := z.DecBinary()
				_ = yym4308
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4311 := z.DecBinary()
				_ = yym4311
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4313 := z.DecBinary()
				_ = yym4313
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4315 := z.DecBinary()
				_ = yym4315
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4305)
		} // end switch yys4305
	} // end for yyj4305
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4316 int
	var yyb4316 bool
	var yyhl4316 bool = l >= 0
	yyj4316++
	if yyhl4316 {
		yyb4316 = yyj4316 > l
	} else {
		yyb4316 = r.CheckBreak()
	}
	if yyb4316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4316++
	if yyhl4316 {
		yyb4316 = yyj4316 > l
	} else {
		yyb4316 = r.CheckBreak()
	}
	if yyb4316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4319 := z.DecBinary()
		_ = yym4319
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4316++
	if yyhl4316 {
		yyb4316 = yyj4316 > l
	} else {
		yyb4316 = r.CheckBreak()
	}
	if yyb4316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4316++
	if yyhl4316 {
		yyb4316 = yyj4316 > l
	} else {
		yyb4316 = r.CheckBreak()
	}
	if yyb4316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4322 := z.DecBinary()
		_ = yym4322
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4316++
	if yyhl4316 {
		yyb4316 = yyj4316 > l
	} else {
		yyb4316 = r.CheckBreak()
	}
	if yyb4316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4324 := z.DecBinary()
		_ = yym4324
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4316++
	if yyhl4316 {
		yyb4316 = yyj4316 > l
	} else {
		yyb4316 = r.CheckBreak()
	}
	if yyb4316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4326 := z.DecBinary()
		_ = yym4326
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4316++
		if yyhl4316 {
			yyb4316 = yyj4316 > l
		} else {
			yyb4316 = r.CheckBreak()
		}
		if yyb4316 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4316-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4327 := z.EncBinary()
		_ = yym4327
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4328 := !z.EncBinary()
			yy2arr4328 := z.EncBasicHandle().StructToArray
			var yyq4328 [4]bool
			_, _, _ = yysep4328, yyq4328, yy2arr4328
			const yyr4328 bool = false
			yyq4328[0] = x.User != ""
			yyq4328[1] = x.Role != ""
			yyq4328[2] = x.Type != ""
			yyq4328[3] = x.Level != ""
			var yynn4328 int
			if yyr4328 || yy2arr4328 {
				r.EncodeArrayStart(4)
			} else {
				yynn4328 = 0
				for _, b := range yyq4328 {
					if b {
						yynn4328++
					}
				}
				r.EncodeMapStart(yynn4328)
				yynn4328 = 0
			}
			if yyr4328 || yy2arr4328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4328[0] {
					yym4330 := z.EncBinary()
					_ = yym4330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4328[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4331 := z.EncBinary()
					_ = yym4331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4328 || yy2arr4328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4328[1] {
					yym4333 := z.EncBinary()
					_ = yym4333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4328[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4334 := z.EncBinary()
					_ = yym4334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4328 || yy2arr4328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4328[2] {
					yym4336 := z.EncBinary()
					_ = yym4336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4328[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4337 := z.EncBinary()
					_ = yym4337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4328 || yy2arr4328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4328[3] {
					yym4339 := z.EncBinary()
					_ = yym4339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4328[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4340 := z.EncBinary()
					_ = yym4340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4328 || yy2arr4328 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4341 := z.DecBinary()
	_ = yym4341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4342 := r.ContainerType()
		if yyct4342 == codecSelferValueTypeMap1234 {
			yyl4342 := r.ReadMapStart()
			if yyl4342 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4342, d)
			}
		} else if yyct4342 == codecSelferValueTypeArray1234 {
			yyl4342 := r.ReadArrayStart()
			if yyl4342 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4342, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4343Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4343Slc
	var yyhl4343 bool = l >= 0
	for yyj4343 := 0; ; yyj4343++ {
		if yyhl4343 {
			if yyj4343 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4343Slc = r.DecodeBytes(yys4343Slc, true, true)
		yys4343 := string(yys4343Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4343 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4343)
		} // end switch yys4343
	} // end for yyj4343
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4348 int
	var yyb4348 bool
	var yyhl4348 bool = l >= 0
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4348++
		if yyhl4348 {
			yyb4348 = yyj4348 > l
		} else {
			yyb4348 = r.CheckBreak()
		}
		if yyb4348 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4348-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4353 := z.EncBinary()
		_ = yym4353
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4354 := !z.EncBinary()
			yy2arr4354 := z.EncBasicHandle().StructToArray
			var yyq4354 [5]bool
			_, _, _ = yysep4354, yyq4354, yy2arr4354
			const yyr4354 bool = false
			yyq4354[0] = x.Kind != ""
			yyq4354[1] = x.APIVersion != ""
			yyq4354[2] = true
			var yynn4354 int
			if yyr4354 || yy2arr4354 {
				r.EncodeArrayStart(5)
			} else {
				yynn4354 = 2
				for _, b := range yyq4354 {
					if b {
						yynn4354++
					}
				}
				r.EncodeMapStart(yynn4354)
				yynn4354 = 0
			}
			if yyr4354 || yy2arr4354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4354[0] {
					yym4356 := z.EncBinary()
					_ = yym4356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4354[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4357 := z.EncBinary()
					_ = yym4357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4354 || yy2arr4354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4354[1] {
					yym4359 := z.EncBinary()
					_ = yym4359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4354[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4360 := z.EncBinary()
					_ = yym4360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4354 || yy2arr4354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4354[2] {
					yy4362 := &x.ObjectMeta
					yy4362.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4354[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4363 := &x.ObjectMeta
					yy4363.CodecEncodeSelf(e)
				}
			}
			if yyr4354 || yy2arr4354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4365 := z.EncBinary()
				_ = yym4365
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4366 := z.EncBinary()
				_ = yym4366
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4354 || yy2arr4354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4368 := z.EncBinary()
					_ = yym4368
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4369 := z.EncBinary()
					_ = yym4369
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4354 || yy2arr4354 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4370 := z.DecBinary()
	_ = yym4370
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4371 := r.ContainerType()
		if yyct4371 == codecSelferValueTypeMap1234 {
			yyl4371 := r.ReadMapStart()
			if yyl4371 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4371, d)
			}
		} else if yyct4371 == codecSelferValueTypeArray1234 {
			yyl4371 := r.ReadArrayStart()
			if yyl4371 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4371, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4372Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4372Slc
	var yyhl4372 bool = l >= 0
	for yyj4372 := 0; ; yyj4372++ {
		if yyhl4372 {
			if yyj4372 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4372Slc = r.DecodeBytes(yys4372Slc, true, true)
		yys4372 := string(yys4372Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4372 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4375 := &x.ObjectMeta
				yyv4375.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4377 := &x.Data
				yym4378 := z.DecBinary()
				_ = yym4378
				if false {
				} else {
					*yyv4377 = r.DecodeBytes(*(*[]byte)(yyv4377), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4372)
		} // end switch yys4372
	} // end for yyj4372
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4379 int
	var yyb4379 bool
	var yyhl4379 bool = l >= 0
	yyj4379++
	if yyhl4379 {
		yyb4379 = yyj4379 > l
	} else {
		yyb4379 = r.CheckBreak()
	}
	if yyb4379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4379++
	if yyhl4379 {
		yyb4379 = yyj4379 > l
	} else {
		yyb4379 = r.CheckBreak()
	}
	if yyb4379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4379++
	if yyhl4379 {
		yyb4379 = yyj4379 > l
	} else {
		yyb4379 = r.CheckBreak()
	}
	if yyb4379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4382 := &x.ObjectMeta
		yyv4382.CodecDecodeSelf(d)
	}
	yyj4379++
	if yyhl4379 {
		yyb4379 = yyj4379 > l
	} else {
		yyb4379 = r.CheckBreak()
	}
	if yyb4379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4379++
	if yyhl4379 {
		yyb4379 = yyj4379 > l
	} else {
		yyb4379 = r.CheckBreak()
	}
	if yyb4379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4384 := &x.Data
		yym4385 := z.DecBinary()
		_ = yym4385
		if false {
		} else {
			*yyv4384 = r.DecodeBytes(*(*[]byte)(yyv4384), false, false)
		}
	}
	for {
		yyj4379++
		if yyhl4379 {
			yyb4379 = yyj4379 > l
		} else {
			yyb4379 = r.CheckBreak()
		}
		if yyb4379 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4379-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4386 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4387 := &yyv4386
		yy4387.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4388 := *v
	yyh4388, yyl4388 := z.DecSliceHelperStart()
	var yyc4388 bool
	if yyl4388 == 0 {
		if yyv4388 == nil {
			yyv4388 = []OwnerReference{}
			yyc4388 = true
		} else if len(yyv4388) != 0 {
			yyv4388 = yyv4388[:0]
			yyc4388 = true
		}
	} else if yyl4388 > 0 {
		var yyrr4388, yyrl4388 int
		var yyrt4388 bool
		if yyl4388 > cap(yyv4388) {

			yyrg4388 := len(yyv4388) > 0
			yyv24388 := yyv4388
			yyrl4388, yyrt4388 = z.DecInferLen(yyl4388, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4388 {
				if yyrl4388 <= cap(yyv4388) {
					yyv4388 = yyv4388[:yyrl4388]
				} else {
					yyv4388 = make([]OwnerReference, yyrl4388)
				}
			} else {
				yyv4388 = make([]OwnerReference, yyrl4388)
			}
			yyc4388 = true
			yyrr4388 = len(yyv4388)
			if yyrg4388 {
				copy(yyv4388, yyv24388)
			}
		} else if yyl4388 != len(yyv4388) {
			yyv4388 = yyv4388[:yyl4388]
			yyc4388 = true
		}
		yyj4388 := 0
		for ; yyj4388 < yyrr4388; yyj4388++ {
			yyh4388.ElemContainerState(yyj4388)
			if r.TryDecodeAsNil() {
				yyv4388[yyj4388] = OwnerReference{}
			} else {
				yyv4389 := &yyv4388[yyj4388]
				yyv4389.CodecDecodeSelf(d)
			}

		}
		if yyrt4388 {
			for ; yyj4388 < yyl4388; yyj4388++ {
				yyv4388 = append(yyv4388, OwnerReference{})
				yyh4388.ElemContainerState(yyj4388)
				if r.TryDecodeAsNil() {
					yyv4388[yyj4388] = OwnerReference{}
				} else {
					yyv4390 := &yyv4388[yyj4388]
					yyv4390.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4388 := 0
		for ; !r.CheckBreak(); yyj4388++ {

			if yyj4388 >= len(yyv4388) {
				yyv4388 = append(yyv4388, OwnerReference{}) // var yyz4388 OwnerReference
				yyc4388 = true
			}
			yyh4388.ElemContainerState(yyj4388)
			if yyj4388 < len(yyv4388) {
				if r.TryDecodeAsNil() {
					yyv4388[yyj4388] = OwnerReference{}
				} else {
					yyv4391 := &yyv4388[yyj4388]
					yyv4391.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4388 < len(yyv4388) {
			yyv4388 = yyv4388[:yyj4388]
			yyc4388 = true
		} else if yyj4388 == 0 && yyv4388 == nil {
			yyv4388 = []OwnerReference{}
			yyc4388 = true
		}
	}
	yyh4388.End()
	if yyc4388 {
		*v = yyv4388
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4392 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4392.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4393 := *v
	yyh4393, yyl4393 := z.DecSliceHelperStart()
	var yyc4393 bool
	if yyl4393 == 0 {
		if yyv4393 == nil {
			yyv4393 = []PersistentVolumeAccessMode{}
			yyc4393 = true
		} else if len(yyv4393) != 0 {
			yyv4393 = yyv4393[:0]
			yyc4393 = true
		}
	} else if yyl4393 > 0 {
		var yyrr4393, yyrl4393 int
		var yyrt4393 bool
		if yyl4393 > cap(yyv4393) {

			yyrl4393, yyrt4393 = z.DecInferLen(yyl4393, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4393 {
				if yyrl4393 <= cap(yyv4393) {
					yyv4393 = yyv4393[:yyrl4393]
				} else {
					yyv4393 = make([]PersistentVolumeAccessMode, yyrl4393)
				}
			} else {
				yyv4393 = make([]PersistentVolumeAccessMode, yyrl4393)
			}
			yyc4393 = true
			yyrr4393 = len(yyv4393)
		} else if yyl4393 != len(yyv4393) {
			yyv4393 = yyv4393[:yyl4393]
			yyc4393 = true
		}
		yyj4393 := 0
		for ; yyj4393 < yyrr4393; yyj4393++ {
			yyh4393.ElemContainerState(yyj4393)
			if r.TryDecodeAsNil() {
				yyv4393[yyj4393] = ""
			} else {
				yyv4393[yyj4393] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4393 {
			for ; yyj4393 < yyl4393; yyj4393++ {
				yyv4393 = append(yyv4393, "")
				yyh4393.ElemContainerState(yyj4393)
				if r.TryDecodeAsNil() {
					yyv4393[yyj4393] = ""
				} else {
					yyv4393[yyj4393] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4393 := 0
		for ; !r.CheckBreak(); yyj4393++ {

			if yyj4393 >= len(yyv4393) {
				yyv4393 = append(yyv4393, "") // var yyz4393 PersistentVolumeAccessMode
				yyc4393 = true
			}
			yyh4393.ElemContainerState(yyj4393)
			if yyj4393 < len(yyv4393) {
				if r.TryDecodeAsNil() {
					yyv4393[yyj4393] = ""
				} else {
					yyv4393[yyj4393] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4393 < len(yyv4393) {
			yyv4393 = yyv4393[:yyj4393]
			yyc4393 = true
		} else if yyj4393 == 0 && yyv4393 == nil {
			yyv4393 = []PersistentVolumeAccessMode{}
			yyc4393 = true
		}
	}
	yyh4393.End()
	if yyc4393 {
		*v = yyv4393
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4397 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4398 := &yyv4397
		yy4398.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4399 := *v
	yyh4399, yyl4399 := z.DecSliceHelperStart()
	var yyc4399 bool
	if yyl4399 == 0 {
		if yyv4399 == nil {
			yyv4399 = []PersistentVolume{}
			yyc4399 = true
		} else if len(yyv4399) != 0 {
			yyv4399 = yyv4399[:0]
			yyc4399 = true
		}
	} else if yyl4399 > 0 {
		var yyrr4399, yyrl4399 int
		var yyrt4399 bool
		if yyl4399 > cap(yyv4399) {

			yyrg4399 := len(yyv4399) > 0
			yyv24399 := yyv4399
			yyrl4399, yyrt4399 = z.DecInferLen(yyl4399, z.DecBasicHandle().MaxInitLen, 456)
			if yyrt4399 {
				if yyrl4399 <= cap(yyv4399) {
					yyv4399 = yyv4399[:yyrl4399]
				} else {
					yyv4399 = make([]PersistentVolume, yyrl4399)
				}
			} else {
				yyv4399 = make([]PersistentVolume, yyrl4399)
			}
			yyc4399 = true
			yyrr4399 = len(yyv4399)
			if yyrg4399 {
				copy(yyv4399, yyv24399)
			}
		} else if yyl4399 != len(yyv4399) {
			yyv4399 = yyv4399[:yyl4399]
			yyc4399 = true
		}
		yyj4399 := 0
		for ; yyj4399 < yyrr4399; yyj4399++ {
			yyh4399.ElemContainerState(yyj4399)
			if r.TryDecodeAsNil() {
				yyv4399[yyj4399] = PersistentVolume{}
			} else {
				yyv4400 := &yyv4399[yyj4399]
				yyv4400.CodecDecodeSelf(d)
			}

		}
		if yyrt4399 {
			for ; yyj4399 < yyl4399; yyj4399++ {
				yyv4399 = append(yyv4399, PersistentVolume{})
				yyh4399.ElemContainerState(yyj4399)
				if r.TryDecodeAsNil() {
					yyv4399[yyj4399] = PersistentVolume{}
				} else {
					yyv4401 := &yyv4399[yyj4399]
					yyv4401.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4399 := 0
		for ; !r.CheckBreak(); yyj4399++ {

			if yyj4399 >= len(yyv4399) {
				yyv4399 = append(yyv4399, PersistentVolume{}) // var yyz4399 PersistentVolume
				yyc4399 = true
			}
			yyh4399.ElemContainerState(yyj4399)
			if yyj4399 < len(yyv4399) {
				if r.TryDecodeAsNil() {
					yyv4399[yyj4399] = PersistentVolume{}
				} else {
					yyv4402 := &yyv4399[yyj4399]
					yyv4402.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4399 < len(yyv4399) {
			yyv4399 = yyv4399[:yyj4399]
			yyc4399 = true
		} else if yyj4399 == 0 && yyv4399 == nil {
			yyv4399 = []PersistentVolume{}
			yyc4399 = true
		}
	}
	yyh4399.End()
	if yyc4399 {
		*v = yyv4399
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4403 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4404 := &yyv4403
		yy4404.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4405 := *v
	yyh4405, yyl4405 := z.DecSliceHelperStart()
	var yyc4405 bool
	if yyl4405 == 0 {
		if yyv4405 == nil {
			yyv4405 = []PersistentVolumeClaim{}
			yyc4405 = true
		} else if len(yyv4405) != 0 {
			yyv4405 = yyv4405[:0]
			yyc4405 = true
		}
	} else if yyl4405 > 0 {
		var yyrr4405, yyrl4405 int
		var yyrt4405 bool
		if yyl4405 > cap(yyv4405) {

			yyrg4405 := len(yyv4405) > 0
			yyv24405 := yyv4405
			yyrl4405, yyrt4405 = z.DecInferLen(yyl4405, z.DecBasicHandle().MaxInitLen, 352)
			if yyrt4405 {
				if yyrl4405 <= cap(yyv4405) {
					yyv4405 = yyv4405[:yyrl4405]
				} else {
					yyv4405 = make([]PersistentVolumeClaim, yyrl4405)
				}
			} else {
				yyv4405 = make([]PersistentVolumeClaim, yyrl4405)
			}
			yyc4405 = true
			yyrr4405 = len(yyv4405)
			if yyrg4405 {
				copy(yyv4405, yyv24405)
			}
		} else if yyl4405 != len(yyv4405) {
			yyv4405 = yyv4405[:yyl4405]
			yyc4405 = true
		}
		yyj4405 := 0
		for ; yyj4405 < yyrr4405; yyj4405++ {
			yyh4405.ElemContainerState(yyj4405)
			if r.TryDecodeAsNil() {
				yyv4405[yyj4405] = PersistentVolumeClaim{}
			} else {
				yyv4406 := &yyv4405[yyj4405]
				yyv4406.CodecDecodeSelf(d)
			}

		}
		if yyrt4405 {
			for ; yyj4405 < yyl4405; yyj4405++ {
				yyv4405 = append(yyv4405, PersistentVolumeClaim{})
				yyh4405.ElemContainerState(yyj4405)
				if r.TryDecodeAsNil() {
					yyv4405[yyj4405] = PersistentVolumeClaim{}
				} else {
					yyv4407 := &yyv4405[yyj4405]
					yyv4407.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4405 := 0
		for ; !r.CheckBreak(); yyj4405++ {

			if yyj4405 >= len(yyv4405) {
				yyv4405 = append(yyv4405, PersistentVolumeClaim{}) // var yyz4405 PersistentVolumeClaim
				yyc4405 = true
			}
			yyh4405.ElemContainerState(yyj4405)
			if yyj4405 < len(yyv4405) {
				if r.TryDecodeAsNil() {
					yyv4405[yyj4405] = PersistentVolumeClaim{}
				} else {
					yyv4408 := &yyv4405[yyj4405]
					yyv4408.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4405 < len(yyv4405) {
			yyv4405 = yyv4405[:yyj4405]
			yyc4405 = true
		} else if yyj4405 == 0 && yyv4405 == nil {
			yyv4405 = []PersistentVolumeClaim{}
			yyc4405 = true
		}
	}
	yyh4405.End()
	if yyc4405 {
		*v = yyv4405
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4409 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4410 := &yyv4409
		yy4410.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4411 := *v
	yyh4411, yyl4411 := z.DecSliceHelperStart()
	var yyc4411 bool
	if yyl4411 == 0 {
		if yyv4411 == nil {
			yyv4411 = []KeyToPath{}
			yyc4411 = true
		} else if len(yyv4411) != 0 {
			yyv4411 = yyv4411[:0]
			yyc4411 = true
		}
	} else if yyl4411 > 0 {
		var yyrr4411, yyrl4411 int
		var yyrt4411 bool
		if yyl4411 > cap(yyv4411) {

			yyrg4411 := len(yyv4411) > 0
			yyv24411 := yyv4411
			yyrl4411, yyrt4411 = z.DecInferLen(yyl4411, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4411 {
				if yyrl4411 <= cap(yyv4411) {
					yyv4411 = yyv4411[:yyrl4411]
				} else {
					yyv4411 = make([]KeyToPath, yyrl4411)
				}
			} else {
				yyv4411 = make([]KeyToPath, yyrl4411)
			}
			yyc4411 = true
			yyrr4411 = len(yyv4411)
			if yyrg4411 {
				copy(yyv4411, yyv24411)
			}
		} else if yyl4411 != len(yyv4411) {
			yyv4411 = yyv4411[:yyl4411]
			yyc4411 = true
		}
		yyj4411 := 0
		for ; yyj4411 < yyrr4411; yyj4411++ {
			yyh4411.ElemContainerState(yyj4411)
			if r.TryDecodeAsNil() {
				yyv4411[yyj4411] = KeyToPath{}
			} else {
				yyv4412 := &yyv4411[yyj4411]
				yyv4412.CodecDecodeSelf(d)
			}

		}
		if yyrt4411 {
			for ; yyj4411 < yyl4411; yyj4411++ {
				yyv4411 = append(yyv4411, KeyToPath{})
				yyh4411.ElemContainerState(yyj4411)
				if r.TryDecodeAsNil() {
					yyv4411[yyj4411] = KeyToPath{}
				} else {
					yyv4413 := &yyv4411[yyj4411]
					yyv4413.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4411 := 0
		for ; !r.CheckBreak(); yyj4411++ {

			if yyj4411 >= len(yyv4411) {
				yyv4411 = append(yyv4411, KeyToPath{}) // var yyz4411 KeyToPath
				yyc4411 = true
			}
			yyh4411.ElemContainerState(yyj4411)
			if yyj4411 < len(yyv4411) {
				if r.TryDecodeAsNil() {
					yyv4411[yyj4411] = KeyToPath{}
				} else {
					yyv4414 := &yyv4411[yyj4411]
					yyv4414.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4411 < len(yyv4411) {
			yyv4411 = yyv4411[:yyj4411]
			yyc4411 = true
		} else if yyj4411 == 0 && yyv4411 == nil {
			yyv4411 = []KeyToPath{}
			yyc4411 = true
		}
	}
	yyh4411.End()
	if yyc4411 {
		*v = yyv4411
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4415 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4416 := &yyv4415
		yy4416.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4417 := *v
	yyh4417, yyl4417 := z.DecSliceHelperStart()
	var yyc4417 bool
	if yyl4417 == 0 {
		if yyv4417 == nil {
			yyv4417 = []HTTPHeader{}
			yyc4417 = true
		} else if len(yyv4417) != 0 {
			yyv4417 = yyv4417[:0]
			yyc4417 = true
		}
	} else if yyl4417 > 0 {
		var yyrr4417, yyrl4417 int
		var yyrt4417 bool
		if yyl4417 > cap(yyv4417) {

			yyrg4417 := len(yyv4417) > 0
			yyv24417 := yyv4417
			yyrl4417, yyrt4417 = z.DecInferLen(yyl4417, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4417 {
				if yyrl4417 <= cap(yyv4417) {
					yyv4417 = yyv4417[:yyrl4417]
				} else {
					yyv4417 = make([]HTTPHeader, yyrl4417)
				}
			} else {
				yyv4417 = make([]HTTPHeader, yyrl4417)
			}
			yyc4417 = true
			yyrr4417 = len(yyv4417)
			if yyrg4417 {
				copy(yyv4417, yyv24417)
			}
		} else if yyl4417 != len(yyv4417) {
			yyv4417 = yyv4417[:yyl4417]
			yyc4417 = true
		}
		yyj4417 := 0
		for ; yyj4417 < yyrr4417; yyj4417++ {
			yyh4417.ElemContainerState(yyj4417)
			if r.TryDecodeAsNil() {
				yyv4417[yyj4417] = HTTPHeader{}
			} else {
				yyv4418 := &yyv4417[yyj4417]
				yyv4418.CodecDecodeSelf(d)
			}

		}
		if yyrt4417 {
			for ; yyj4417 < yyl4417; yyj4417++ {
				yyv4417 = append(yyv4417, HTTPHeader{})
				yyh4417.ElemContainerState(yyj4417)
				if r.TryDecodeAsNil() {
					yyv4417[yyj4417] = HTTPHeader{}
				} else {
					yyv4419 := &yyv4417[yyj4417]
					yyv4419.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4417 := 0
		for ; !r.CheckBreak(); yyj4417++ {

			if yyj4417 >= len(yyv4417) {
				yyv4417 = append(yyv4417, HTTPHeader{}) // var yyz4417 HTTPHeader
				yyc4417 = true
			}
			yyh4417.ElemContainerState(yyj4417)
			if yyj4417 < len(yyv4417) {
				if r.TryDecodeAsNil() {
					yyv4417[yyj4417] = HTTPHeader{}
				} else {
					yyv4420 := &yyv4417[yyj4417]
					yyv4420.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4417 < len(yyv4417) {
			yyv4417 = yyv4417[:yyj4417]
			yyc4417 = true
		} else if yyj4417 == 0 && yyv4417 == nil {
			yyv4417 = []HTTPHeader{}
			yyc4417 = true
		}
	}
	yyh4417.End()
	if yyc4417 {
		*v = yyv4417
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4421 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4421.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4422 := *v
	yyh4422, yyl4422 := z.DecSliceHelperStart()
	var yyc4422 bool
	if yyl4422 == 0 {
		if yyv4422 == nil {
			yyv4422 = []Capability{}
			yyc4422 = true
		} else if len(yyv4422) != 0 {
			yyv4422 = yyv4422[:0]
			yyc4422 = true
		}
	} else if yyl4422 > 0 {
		var yyrr4422, yyrl4422 int
		var yyrt4422 bool
		if yyl4422 > cap(yyv4422) {

			yyrl4422, yyrt4422 = z.DecInferLen(yyl4422, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4422 {
				if yyrl4422 <= cap(yyv4422) {
					yyv4422 = yyv4422[:yyrl4422]
				} else {
					yyv4422 = make([]Capability, yyrl4422)
				}
			} else {
				yyv4422 = make([]Capability, yyrl4422)
			}
			yyc4422 = true
			yyrr4422 = len(yyv4422)
		} else if yyl4422 != len(yyv4422) {
			yyv4422 = yyv4422[:yyl4422]
			yyc4422 = true
		}
		yyj4422 := 0
		for ; yyj4422 < yyrr4422; yyj4422++ {
			yyh4422.ElemContainerState(yyj4422)
			if r.TryDecodeAsNil() {
				yyv4422[yyj4422] = ""
			} else {
				yyv4422[yyj4422] = Capability(r.DecodeString())
			}

		}
		if yyrt4422 {
			for ; yyj4422 < yyl4422; yyj4422++ {
				yyv4422 = append(yyv4422, "")
				yyh4422.ElemContainerState(yyj4422)
				if r.TryDecodeAsNil() {
					yyv4422[yyj4422] = ""
				} else {
					yyv4422[yyj4422] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4422 := 0
		for ; !r.CheckBreak(); yyj4422++ {

			if yyj4422 >= len(yyv4422) {
				yyv4422 = append(yyv4422, "") // var yyz4422 Capability
				yyc4422 = true
			}
			yyh4422.ElemContainerState(yyj4422)
			if yyj4422 < len(yyv4422) {
				if r.TryDecodeAsNil() {
					yyv4422[yyj4422] = ""
				} else {
					yyv4422[yyj4422] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4422 < len(yyv4422) {
			yyv4422 = yyv4422[:yyj4422]
			yyc4422 = true
		} else if yyj4422 == 0 && yyv4422 == nil {
			yyv4422 = []Capability{}
			yyc4422 = true
		}
	}
	yyh4422.End()
	if yyc4422 {
		*v = yyv4422
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4426 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4427 := &yyv4426
		yy4427.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4428 := *v
	yyh4428, yyl4428 := z.DecSliceHelperStart()
	var yyc4428 bool
	if yyl4428 == 0 {
		if yyv4428 == nil {
			yyv4428 = []ContainerPort{}
			yyc4428 = true
		} else if len(yyv4428) != 0 {
			yyv4428 = yyv4428[:0]
			yyc4428 = true
		}
	} else if yyl4428 > 0 {
		var yyrr4428, yyrl4428 int
		var yyrt4428 bool
		if yyl4428 > cap(yyv4428) {

			yyrg4428 := len(yyv4428) > 0
			yyv24428 := yyv4428
			yyrl4428, yyrt4428 = z.DecInferLen(yyl4428, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4428 {
				if yyrl4428 <= cap(yyv4428) {
					yyv4428 = yyv4428[:yyrl4428]
				} else {
					yyv4428 = make([]ContainerPort, yyrl4428)
				}
			} else {
				yyv4428 = make([]ContainerPort, yyrl4428)
			}
			yyc4428 = true
			yyrr4428 = len(yyv4428)
			if yyrg4428 {
				copy(yyv4428, yyv24428)
			}
		} else if yyl4428 != len(yyv4428) {
			yyv4428 = yyv4428[:yyl4428]
			yyc4428 = true
		}
		yyj4428 := 0
		for ; yyj4428 < yyrr4428; yyj4428++ {
			yyh4428.ElemContainerState(yyj4428)
			if r.TryDecodeAsNil() {
				yyv4428[yyj4428] = ContainerPort{}
			} else {
				yyv4429 := &yyv4428[yyj4428]
				yyv4429.CodecDecodeSelf(d)
			}

		}
		if yyrt4428 {
			for ; yyj4428 < yyl4428; yyj4428++ {
				yyv4428 = append(yyv4428, ContainerPort{})
				yyh4428.ElemContainerState(yyj4428)
				if r.TryDecodeAsNil() {
					yyv4428[yyj4428] = ContainerPort{}
				} else {
					yyv4430 := &yyv4428[yyj4428]
					yyv4430.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4428 := 0
		for ; !r.CheckBreak(); yyj4428++ {

			if yyj4428 >= len(yyv4428) {
				yyv4428 = append(yyv4428, ContainerPort{}) // var yyz4428 ContainerPort
				yyc4428 = true
			}
			yyh4428.ElemContainerState(yyj4428)
			if yyj4428 < len(yyv4428) {
				if r.TryDecodeAsNil() {
					yyv4428[yyj4428] = ContainerPort{}
				} else {
					yyv4431 := &yyv4428[yyj4428]
					yyv4431.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4428 < len(yyv4428) {
			yyv4428 = yyv4428[:yyj4428]
			yyc4428 = true
		} else if yyj4428 == 0 && yyv4428 == nil {
			yyv4428 = []ContainerPort{}
			yyc4428 = true
		}
	}
	yyh4428.End()
	if yyc4428 {
		*v = yyv4428
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4432 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4433 := &yyv4432
		yy4433.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4434 := *v
	yyh4434, yyl4434 := z.DecSliceHelperStart()
	var yyc4434 bool
	if yyl4434 == 0 {
		if yyv4434 == nil {
			yyv4434 = []EnvVar{}
			yyc4434 = true
		} else if len(yyv4434) != 0 {
			yyv4434 = yyv4434[:0]
			yyc4434 = true
		}
	} else if yyl4434 > 0 {
		var yyrr4434, yyrl4434 int
		var yyrt4434 bool
		if yyl4434 > cap(yyv4434) {

			yyrg4434 := len(yyv4434) > 0
			yyv24434 := yyv4434
			yyrl4434, yyrt4434 = z.DecInferLen(yyl4434, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4434 {
				if yyrl4434 <= cap(yyv4434) {
					yyv4434 = yyv4434[:yyrl4434]
				} else {
					yyv4434 = make([]EnvVar, yyrl4434)
				}
			} else {
				yyv4434 = make([]EnvVar, yyrl4434)
			}
			yyc4434 = true
			yyrr4434 = len(yyv4434)
			if yyrg4434 {
				copy(yyv4434, yyv24434)
			}
		} else if yyl4434 != len(yyv4434) {
			yyv4434 = yyv4434[:yyl4434]
			yyc4434 = true
		}
		yyj4434 := 0
		for ; yyj4434 < yyrr4434; yyj4434++ {
			yyh4434.ElemContainerState(yyj4434)
			if r.TryDecodeAsNil() {
				yyv4434[yyj4434] = EnvVar{}
			} else {
				yyv4435 := &yyv4434[yyj4434]
				yyv4435.CodecDecodeSelf(d)
			}

		}
		if yyrt4434 {
			for ; yyj4434 < yyl4434; yyj4434++ {
				yyv4434 = append(yyv4434, EnvVar{})
				yyh4434.ElemContainerState(yyj4434)
				if r.TryDecodeAsNil() {
					yyv4434[yyj4434] = EnvVar{}
				} else {
					yyv4436 := &yyv4434[yyj4434]
					yyv4436.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4434 := 0
		for ; !r.CheckBreak(); yyj4434++ {

			if yyj4434 >= len(yyv4434) {
				yyv4434 = append(yyv4434, EnvVar{}) // var yyz4434 EnvVar
				yyc4434 = true
			}
			yyh4434.ElemContainerState(yyj4434)
			if yyj4434 < len(yyv4434) {
				if r.TryDecodeAsNil() {
					yyv4434[yyj4434] = EnvVar{}
				} else {
					yyv4437 := &yyv4434[yyj4434]
					yyv4437.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4434 < len(yyv4434) {
			yyv4434 = yyv4434[:yyj4434]
			yyc4434 = true
		} else if yyj4434 == 0 && yyv4434 == nil {
			yyv4434 = []EnvVar{}
			yyc4434 = true
		}
	}
	yyh4434.End()
	if yyc4434 {
		*v = yyv4434
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4438 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4439 := &yyv4438
		yy4439.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4440 := *v
	yyh4440, yyl4440 := z.DecSliceHelperStart()
	var yyc4440 bool
	if yyl4440 == 0 {
		if yyv4440 == nil {
			yyv4440 = []VolumeMount{}
			yyc4440 = true
		} else if len(yyv4440) != 0 {
			yyv4440 = yyv4440[:0]
			yyc4440 = true
		}
	} else if yyl4440 > 0 {
		var yyrr4440, yyrl4440 int
		var yyrt4440 bool
		if yyl4440 > cap(yyv4440) {

			yyrg4440 := len(yyv4440) > 0
			yyv24440 := yyv4440
			yyrl4440, yyrt4440 = z.DecInferLen(yyl4440, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4440 {
				if yyrl4440 <= cap(yyv4440) {
					yyv4440 = yyv4440[:yyrl4440]
				} else {
					yyv4440 = make([]VolumeMount, yyrl4440)
				}
			} else {
				yyv4440 = make([]VolumeMount, yyrl4440)
			}
			yyc4440 = true
			yyrr4440 = len(yyv4440)
			if yyrg4440 {
				copy(yyv4440, yyv24440)
			}
		} else if yyl4440 != len(yyv4440) {
			yyv4440 = yyv4440[:yyl4440]
			yyc4440 = true
		}
		yyj4440 := 0
		for ; yyj4440 < yyrr4440; yyj4440++ {
			yyh4440.ElemContainerState(yyj4440)
			if r.TryDecodeAsNil() {
				yyv4440[yyj4440] = VolumeMount{}
			} else {
				yyv4441 := &yyv4440[yyj4440]
				yyv4441.CodecDecodeSelf(d)
			}

		}
		if yyrt4440 {
			for ; yyj4440 < yyl4440; yyj4440++ {
				yyv4440 = append(yyv4440, VolumeMount{})
				yyh4440.ElemContainerState(yyj4440)
				if r.TryDecodeAsNil() {
					yyv4440[yyj4440] = VolumeMount{}
				} else {
					yyv4442 := &yyv4440[yyj4440]
					yyv4442.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4440 := 0
		for ; !r.CheckBreak(); yyj4440++ {

			if yyj4440 >= len(yyv4440) {
				yyv4440 = append(yyv4440, VolumeMount{}) // var yyz4440 VolumeMount
				yyc4440 = true
			}
			yyh4440.ElemContainerState(yyj4440)
			if yyj4440 < len(yyv4440) {
				if r.TryDecodeAsNil() {
					yyv4440[yyj4440] = VolumeMount{}
				} else {
					yyv4443 := &yyv4440[yyj4440]
					yyv4443.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4440 < len(yyv4440) {
			yyv4440 = yyv4440[:yyj4440]
			yyc4440 = true
		} else if yyj4440 == 0 && yyv4440 == nil {
			yyv4440 = []VolumeMount{}
			yyc4440 = true
		}
	}
	yyh4440.End()
	if yyc4440 {
		*v = yyv4440
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4444 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4445 := &yyv4444
		yy4445.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4446 := *v
	yyh4446, yyl4446 := z.DecSliceHelperStart()
	var yyc4446 bool
	if yyl4446 == 0 {
		if yyv4446 == nil {
			yyv4446 = []NodeSelectorTerm{}
			yyc4446 = true
		} else if len(yyv4446) != 0 {
			yyv4446 = yyv4446[:0]
			yyc4446 = true
		}
	} else if yyl4446 > 0 {
		var yyrr4446, yyrl4446 int
		var yyrt4446 bool
		if yyl4446 > cap(yyv4446) {

			yyrg4446 := len(yyv4446) > 0
			yyv24446 := yyv4446
			yyrl4446, yyrt4446 = z.DecInferLen(yyl4446, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4446 {
				if yyrl4446 <= cap(yyv4446) {
					yyv4446 = yyv4446[:yyrl4446]
				} else {
					yyv4446 = make([]NodeSelectorTerm, yyrl4446)
				}
			} else {
				yyv4446 = make([]NodeSelectorTerm, yyrl4446)
			}
			yyc4446 = true
			yyrr4446 = len(yyv4446)
			if yyrg4446 {
				copy(yyv4446, yyv24446)
			}
		} else if yyl4446 != len(yyv4446) {
			yyv4446 = yyv4446[:yyl4446]
			yyc4446 = true
		}
		yyj4446 := 0
		for ; yyj4446 < yyrr4446; yyj4446++ {
			yyh4446.ElemContainerState(yyj4446)
			if r.TryDecodeAsNil() {
				yyv4446[yyj4446] = NodeSelectorTerm{}
			} else {
				yyv4447 := &yyv4446[yyj4446]
				yyv4447.CodecDecodeSelf(d)
			}

		}
		if yyrt4446 {
			for ; yyj4446 < yyl4446; yyj4446++ {
				yyv4446 = append(yyv4446, NodeSelectorTerm{})
				yyh4446.ElemContainerState(yyj4446)
				if r.TryDecodeAsNil() {
					yyv4446[yyj4446] = NodeSelectorTerm{}
				} else {
					yyv4448 := &yyv4446[yyj4446]
					yyv4448.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4446 := 0
		for ; !r.CheckBreak(); yyj4446++ {

			if yyj4446 >= len(yyv4446) {
				yyv4446 = append(yyv4446, NodeSelectorTerm{}) // var yyz4446 NodeSelectorTerm
				yyc4446 = true
			}
			yyh4446.ElemContainerState(yyj4446)
			if yyj4446 < len(yyv4446) {
				if r.TryDecodeAsNil() {
					yyv4446[yyj4446] = NodeSelectorTerm{}
				} else {
					yyv4449 := &yyv4446[yyj4446]
					yyv4449.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4446 < len(yyv4446) {
			yyv4446 = yyv4446[:yyj4446]
			yyc4446 = true
		} else if yyj4446 == 0 && yyv4446 == nil {
			yyv4446 = []NodeSelectorTerm{}
			yyc4446 = true
		}
	}
	yyh4446.End()
	if yyc4446 {
		*v = yyv4446
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4450 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4451 := &yyv4450
		yy4451.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4452 := *v
	yyh4452, yyl4452 := z.DecSliceHelperStart()
	var yyc4452 bool
	if yyl4452 == 0 {
		if yyv4452 == nil {
			yyv4452 = []NodeSelectorRequirement{}
			yyc4452 = true
		} else if len(yyv4452) != 0 {
			yyv4452 = yyv4452[:0]
			yyc4452 = true
		}
	} else if yyl4452 > 0 {
		var yyrr4452, yyrl4452 int
		var yyrt4452 bool
		if yyl4452 > cap(yyv4452) {

			yyrg4452 := len(yyv4452) > 0
			yyv24452 := yyv4452
			yyrl4452, yyrt4452 = z.DecInferLen(yyl4452, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4452 {
				if yyrl4452 <= cap(yyv4452) {
					yyv4452 = yyv4452[:yyrl4452]
				} else {
					yyv4452 = make([]NodeSelectorRequirement, yyrl4452)
				}
			} else {
				yyv4452 = make([]NodeSelectorRequirement, yyrl4452)
			}
			yyc4452 = true
			yyrr4452 = len(yyv4452)
			if yyrg4452 {
				copy(yyv4452, yyv24452)
			}
		} else if yyl4452 != len(yyv4452) {
			yyv4452 = yyv4452[:yyl4452]
			yyc4452 = true
		}
		yyj4452 := 0
		for ; yyj4452 < yyrr4452; yyj4452++ {
			yyh4452.ElemContainerState(yyj4452)
			if r.TryDecodeAsNil() {
				yyv4452[yyj4452] = NodeSelectorRequirement{}
			} else {
				yyv4453 := &yyv4452[yyj4452]
				yyv4453.CodecDecodeSelf(d)
			}

		}
		if yyrt4452 {
			for ; yyj4452 < yyl4452; yyj4452++ {
				yyv4452 = append(yyv4452, NodeSelectorRequirement{})
				yyh4452.ElemContainerState(yyj4452)
				if r.TryDecodeAsNil() {
					yyv4452[yyj4452] = NodeSelectorRequirement{}
				} else {
					yyv4454 := &yyv4452[yyj4452]
					yyv4454.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4452 := 0
		for ; !r.CheckBreak(); yyj4452++ {

			if yyj4452 >= len(yyv4452) {
				yyv4452 = append(yyv4452, NodeSelectorRequirement{}) // var yyz4452 NodeSelectorRequirement
				yyc4452 = true
			}
			yyh4452.ElemContainerState(yyj4452)
			if yyj4452 < len(yyv4452) {
				if r.TryDecodeAsNil() {
					yyv4452[yyj4452] = NodeSelectorRequirement{}
				} else {
					yyv4455 := &yyv4452[yyj4452]
					yyv4455.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4452 < len(yyv4452) {
			yyv4452 = yyv4452[:yyj4452]
			yyc4452 = true
		} else if yyj4452 == 0 && yyv4452 == nil {
			yyv4452 = []NodeSelectorRequirement{}
			yyc4452 = true
		}
	}
	yyh4452.End()
	if yyc4452 {
		*v = yyv4452
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4456 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4457 := &yyv4456
		yy4457.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4458 := *v
	yyh4458, yyl4458 := z.DecSliceHelperStart()
	var yyc4458 bool
	if yyl4458 == 0 {
		if yyv4458 == nil {
			yyv4458 = []PodAffinityTerm{}
			yyc4458 = true
		} else if len(yyv4458) != 0 {
			yyv4458 = yyv4458[:0]
			yyc4458 = true
		}
	} else if yyl4458 > 0 {
		var yyrr4458, yyrl4458 int
		var yyrt4458 bool
		if yyl4458 > cap(yyv4458) {

			yyrg4458 := len(yyv4458) > 0
			yyv24458 := yyv4458
			yyrl4458, yyrt4458 = z.DecInferLen(yyl4458, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4458 {
				if yyrl4458 <= cap(yyv4458) {
					yyv4458 = yyv4458[:yyrl4458]
				} else {
					yyv4458 = make([]PodAffinityTerm, yyrl4458)
				}
			} else {
				yyv4458 = make([]PodAffinityTerm, yyrl4458)
			}
			yyc4458 = true
			yyrr4458 = len(yyv4458)
			if yyrg4458 {
				copy(yyv4458, yyv24458)
			}
		} else if yyl4458 != len(yyv4458) {
			yyv4458 = yyv4458[:yyl4458]
			yyc4458 = true
		}
		yyj4458 := 0
		for ; yyj4458 < yyrr4458; yyj4458++ {
			yyh4458.ElemContainerState(yyj4458)
			if r.TryDecodeAsNil() {
				yyv4458[yyj4458] = PodAffinityTerm{}
			} else {
				yyv4459 := &yyv4458[yyj4458]
				yyv4459.CodecDecodeSelf(d)
			}

		}
		if yyrt4458 {
			for ; yyj4458 < yyl4458; yyj4458++ {
				yyv4458 = append(yyv4458, PodAffinityTerm{})
				yyh4458.ElemContainerState(yyj4458)
				if r.TryDecodeAsNil() {
					yyv4458[yyj4458] = PodAffinityTerm{}
				} else {
					yyv4460 := &yyv4458[yyj4458]
					yyv4460.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4458 := 0
		for ; !r.CheckBreak(); yyj4458++ {

			if yyj4458 >= len(yyv4458) {
				yyv4458 = append(yyv4458, PodAffinityTerm{}) // var yyz4458 PodAffinityTerm
				yyc4458 = true
			}
			yyh4458.ElemContainerState(yyj4458)
			if yyj4458 < len(yyv4458) {
				if r.TryDecodeAsNil() {
					yyv4458[yyj4458] = PodAffinityTerm{}
				} else {
					yyv4461 := &yyv4458[yyj4458]
					yyv4461.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4458 < len(yyv4458) {
			yyv4458 = yyv4458[:yyj4458]
			yyc4458 = true
		} else if yyj4458 == 0 && yyv4458 == nil {
			yyv4458 = []PodAffinityTerm{}
			yyc4458 = true
		}
	}
	yyh4458.End()
	if yyc4458 {
		*v = yyv4458
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4462 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4463 := &yyv4462
		yy4463.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4464 := *v
	yyh4464, yyl4464 := z.DecSliceHelperStart()
	var yyc4464 bool
	if yyl4464 == 0 {
		if yyv4464 == nil {
			yyv4464 = []WeightedPodAffinityTerm{}
			yyc4464 = true
		} else if len(yyv4464) != 0 {
			yyv4464 = yyv4464[:0]
			yyc4464 = true
		}
	} else if yyl4464 > 0 {
		var yyrr4464, yyrl4464 int
		var yyrt4464 bool
		if yyl4464 > cap(yyv4464) {

			yyrg4464 := len(yyv4464) > 0
			yyv24464 := yyv4464
			yyrl4464, yyrt4464 = z.DecInferLen(yyl4464, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4464 {
				if yyrl4464 <= cap(yyv4464) {
					yyv4464 = yyv4464[:yyrl4464]
				} else {
					yyv4464 = make([]WeightedPodAffinityTerm, yyrl4464)
				}
			} else {
				yyv4464 = make([]WeightedPodAffinityTerm, yyrl4464)
			}
			yyc4464 = true
			yyrr4464 = len(yyv4464)
			if yyrg4464 {
				copy(yyv4464, yyv24464)
			}
		} else if yyl4464 != len(yyv4464) {
			yyv4464 = yyv4464[:yyl4464]
			yyc4464 = true
		}
		yyj4464 := 0
		for ; yyj4464 < yyrr4464; yyj4464++ {
			yyh4464.ElemContainerState(yyj4464)
			if r.TryDecodeAsNil() {
				yyv4464[yyj4464] = WeightedPodAffinityTerm{}
			} else {
				yyv4465 := &yyv4464[yyj4464]
				yyv4465.CodecDecodeSelf(d)
			}

		}
		if yyrt4464 {
			for ; yyj4464 < yyl4464; yyj4464++ {
				yyv4464 = append(yyv4464, WeightedPodAffinityTerm{})
				yyh4464.ElemContainerState(yyj4464)
				if r.TryDecodeAsNil() {
					yyv4464[yyj4464] = WeightedPodAffinityTerm{}
				} else {
					yyv4466 := &yyv4464[yyj4464]
					yyv4466.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4464 := 0
		for ; !r.CheckBreak(); yyj4464++ {

			if yyj4464 >= len(yyv4464) {
				yyv4464 = append(yyv4464, WeightedPodAffinityTerm{}) // var yyz4464 WeightedPodAffinityTerm
				yyc4464 = true
			}
			yyh4464.ElemContainerState(yyj4464)
			if yyj4464 < len(yyv4464) {
				if r.TryDecodeAsNil() {
					yyv4464[yyj4464] = WeightedPodAffinityTerm{}
				} else {
					yyv4467 := &yyv4464[yyj4464]
					yyv4467.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4464 < len(yyv4464) {
			yyv4464 = yyv4464[:yyj4464]
			yyc4464 = true
		} else if yyj4464 == 0 && yyv4464 == nil {
			yyv4464 = []WeightedPodAffinityTerm{}
			yyc4464 = true
		}
	}
	yyh4464.End()
	if yyc4464 {
		*v = yyv4464
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4468 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4469 := &yyv4468
		yy4469.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4470 := *v
	yyh4470, yyl4470 := z.DecSliceHelperStart()
	var yyc4470 bool
	if yyl4470 == 0 {
		if yyv4470 == nil {
			yyv4470 = []PreferredSchedulingTerm{}
			yyc4470 = true
		} else if len(yyv4470) != 0 {
			yyv4470 = yyv4470[:0]
			yyc4470 = true
		}
	} else if yyl4470 > 0 {
		var yyrr4470, yyrl4470 int
		var yyrt4470 bool
		if yyl4470 > cap(yyv4470) {

			yyrg4470 := len(yyv4470) > 0
			yyv24470 := yyv4470
			yyrl4470, yyrt4470 = z.DecInferLen(yyl4470, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4470 {
				if yyrl4470 <= cap(yyv4470) {
					yyv4470 = yyv4470[:yyrl4470]
				} else {
					yyv4470 = make([]PreferredSchedulingTerm, yyrl4470)
				}
			} else {
				yyv4470 = make([]PreferredSchedulingTerm, yyrl4470)
			}
			yyc4470 = true
			yyrr4470 = len(yyv4470)
			if yyrg4470 {
				copy(yyv4470, yyv24470)
			}
		} else if yyl4470 != len(yyv4470) {
			yyv4470 = yyv4470[:yyl4470]
			yyc4470 = true
		}
		yyj4470 := 0
		for ; yyj4470 < yyrr4470; yyj4470++ {
			yyh4470.ElemContainerState(yyj4470)
			if r.TryDecodeAsNil() {
				yyv4470[yyj4470] = PreferredSchedulingTerm{}
			} else {
				yyv4471 := &yyv4470[yyj4470]
				yyv4471.CodecDecodeSelf(d)
			}

		}
		if yyrt4470 {
			for ; yyj4470 < yyl4470; yyj4470++ {
				yyv4470 = append(yyv4470, PreferredSchedulingTerm{})
				yyh4470.ElemContainerState(yyj4470)
				if r.TryDecodeAsNil() {
					yyv4470[yyj4470] = PreferredSchedulingTerm{}
				} else {
					yyv4472 := &yyv4470[yyj4470]
					yyv4472.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4470 := 0
		for ; !r.CheckBreak(); yyj4470++ {

			if yyj4470 >= len(yyv4470) {
				yyv4470 = append(yyv4470, PreferredSchedulingTerm{}) // var yyz4470 PreferredSchedulingTerm
				yyc4470 = true
			}
			yyh4470.ElemContainerState(yyj4470)
			if yyj4470 < len(yyv4470) {
				if r.TryDecodeAsNil() {
					yyv4470[yyj4470] = PreferredSchedulingTerm{}
				} else {
					yyv4473 := &yyv4470[yyj4470]
					yyv4473.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4470 < len(yyv4470) {
			yyv4470 = yyv4470[:yyj4470]
			yyc4470 = true
		} else if yyj4470 == 0 && yyv4470 == nil {
			yyv4470 = []PreferredSchedulingTerm{}
			yyc4470 = true
		}
	}
	yyh4470.End()
	if yyc4470 {
		*v = yyv4470
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4474 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4475 := &yyv4474
		yy4475.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4476 := *v
	yyh4476, yyl4476 := z.DecSliceHelperStart()
	var yyc4476 bool
	if yyl4476 == 0 {
		if yyv4476 == nil {
			yyv4476 = []Volume{}
			yyc4476 = true
		} else if len(yyv4476) != 0 {
			yyv4476 = yyv4476[:0]
			yyc4476 = true
		}
	} else if yyl4476 > 0 {
		var yyrr4476, yyrl4476 int
		var yyrt4476 bool
		if yyl4476 > cap(yyv4476) {

			yyrg4476 := len(yyv4476) > 0
			yyv24476 := yyv4476
			yyrl4476, yyrt4476 = z.DecInferLen(yyl4476, z.DecBasicHandle().MaxInitLen, 184)
			if yyrt4476 {
				if yyrl4476 <= cap(yyv4476) {
					yyv4476 = yyv4476[:yyrl4476]
				} else {
					yyv4476 = make([]Volume, yyrl4476)
				}
			} else {
				yyv4476 = make([]Volume, yyrl4476)
			}
			yyc4476 = true
			yyrr4476 = len(yyv4476)
			if yyrg4476 {
				copy(yyv4476, yyv24476)
			}
		} else if yyl4476 != len(yyv4476) {
			yyv4476 = yyv4476[:yyl4476]
			yyc4476 = true
		}
		yyj4476 := 0
		for ; yyj4476 < yyrr4476; yyj4476++ {
			yyh4476.ElemContainerState(yyj4476)
			if r.TryDecodeAsNil() {
				yyv4476[yyj4476] = Volume{}
			} else {
				yyv4477 := &yyv4476[yyj4476]
				yyv4477.CodecDecodeSelf(d)
			}

		}
		if yyrt4476 {
			for ; yyj4476 < yyl4476; yyj4476++ {
				yyv4476 = append(yyv4476, Volume{})
				yyh4476.ElemContainerState(yyj4476)
				if r.TryDecodeAsNil() {
					yyv4476[yyj4476] = Volume{}
				} else {
					yyv4478 := &yyv4476[yyj4476]
					yyv4478.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4476 := 0
		for ; !r.CheckBreak(); yyj4476++ {

			if yyj4476 >= len(yyv4476) {
				yyv4476 = append(yyv4476, Volume{}) // var yyz4476 Volume
				yyc4476 = true
			}
			yyh4476.ElemContainerState(yyj4476)
			if yyj4476 < len(yyv4476) {
				if r.TryDecodeAsNil() {
					yyv4476[yyj4476] = Volume{}
				} else {
					yyv4479 := &yyv4476[yyj4476]
					yyv4479.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4476 < len(yyv4476) {
			yyv4476 = yyv4476[:yyj4476]
			yyc4476 = true
		} else if yyj4476 == 0 && yyv4476 == nil {
			yyv4476 = []Volume{}
			yyc4476 = true
		}
	}
	yyh4476.End()
	if yyc4476 {
		*v = yyv4476
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4480 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4481 := &yyv4480
		yy4481.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4482 := *v
	yyh4482, yyl4482 := z.DecSliceHelperStart()
	var yyc4482 bool
	if yyl4482 == 0 {
		if yyv4482 == nil {
			yyv4482 = []Container{}
			yyc4482 = true
		} else if len(yyv4482) != 0 {
			yyv4482 = yyv4482[:0]
			yyc4482 = true
		}
	} else if yyl4482 > 0 {
		var yyrr4482, yyrl4482 int
		var yyrt4482 bool
		if yyl4482 > cap(yyv4482) {

			yyrg4482 := len(yyv4482) > 0
			yyv24482 := yyv4482
			yyrl4482, yyrt4482 = z.DecInferLen(yyl4482, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4482 {
				if yyrl4482 <= cap(yyv4482) {
					yyv4482 = yyv4482[:yyrl4482]
				} else {
					yyv4482 = make([]Container, yyrl4482)
				}
			} else {
				yyv4482 = make([]Container, yyrl4482)
			}
			yyc4482 = true
			yyrr4482 = len(yyv4482)
			if yyrg4482 {
				copy(yyv4482, yyv24482)
			}
		} else if yyl4482 != len(yyv4482) {
			yyv4482 = yyv4482[:yyl4482]
			yyc4482 = true
		}
		yyj4482 := 0
		for ; yyj4482 < yyrr4482; yyj4482++ {
			yyh4482.ElemContainerState(yyj4482)
			if r.TryDecodeAsNil() {
				yyv4482[yyj4482] = Container{}
			} else {
				yyv4483 := &yyv4482[yyj4482]
				yyv4483.CodecDecodeSelf(d)
			}

		}
		if yyrt4482 {
			for ; yyj4482 < yyl4482; yyj4482++ {
				yyv4482 = append(yyv4482, Container{})
				yyh4482.ElemContainerState(yyj4482)
				if r.TryDecodeAsNil() {
					yyv4482[yyj4482] = Container{}
				} else {
					yyv4484 := &yyv4482[yyj4482]
					yyv4484.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4482 := 0
		for ; !r.CheckBreak(); yyj4482++ {

			if yyj4482 >= len(yyv4482) {
				yyv4482 = append(yyv4482, Container{}) // var yyz4482 Container
				yyc4482 = true
			}
			yyh4482.ElemContainerState(yyj4482)
			if yyj4482 < len(yyv4482) {
				if r.TryDecodeAsNil() {
					yyv4482[yyj4482] = Container{}
				} else {
					yyv4485 := &yyv4482[yyj4482]
					yyv4485.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4482 < len(yyv4482) {
			yyv4482 = yyv4482[:yyj4482]
			yyc4482 = true
		} else if yyj4482 == 0 && yyv4482 == nil {
			yyv4482 = []Container{}
			yyc4482 = true
		}
	}
	yyh4482.End()
	if yyc4482 {
		*v = yyv4482
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4486 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4487 := &yyv4486
		yy4487.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4488 := *v
	yyh4488, yyl4488 := z.DecSliceHelperStart()
	var yyc4488 bool
	if yyl4488 == 0 {
		if yyv4488 == nil {
			yyv4488 = []LocalObjectReference{}
			yyc4488 = true
		} else if len(yyv4488) != 0 {
			yyv4488 = yyv4488[:0]
			yyc4488 = true
		}
	} else if yyl4488 > 0 {
		var yyrr4488, yyrl4488 int
		var yyrt4488 bool
		if yyl4488 > cap(yyv4488) {

			yyrg4488 := len(yyv4488) > 0
			yyv24488 := yyv4488
			yyrl4488, yyrt4488 = z.DecInferLen(yyl4488, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4488 {
				if yyrl4488 <= cap(yyv4488) {
					yyv4488 = yyv4488[:yyrl4488]
				} else {
					yyv4488 = make([]LocalObjectReference, yyrl4488)
				}
			} else {
				yyv4488 = make([]LocalObjectReference, yyrl4488)
			}
			yyc4488 = true
			yyrr4488 = len(yyv4488)
			if yyrg4488 {
				copy(yyv4488, yyv24488)
			}
		} else if yyl4488 != len(yyv4488) {
			yyv4488 = yyv4488[:yyl4488]
			yyc4488 = true
		}
		yyj4488 := 0
		for ; yyj4488 < yyrr4488; yyj4488++ {
			yyh4488.ElemContainerState(yyj4488)
			if r.TryDecodeAsNil() {
				yyv4488[yyj4488] = LocalObjectReference{}
			} else {
				yyv4489 := &yyv4488[yyj4488]
				yyv4489.CodecDecodeSelf(d)
			}

		}
		if yyrt4488 {
			for ; yyj4488 < yyl4488; yyj4488++ {
				yyv4488 = append(yyv4488, LocalObjectReference{})
				yyh4488.ElemContainerState(yyj4488)
				if r.TryDecodeAsNil() {
					yyv4488[yyj4488] = LocalObjectReference{}
				} else {
					yyv4490 := &yyv4488[yyj4488]
					yyv4490.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4488 := 0
		for ; !r.CheckBreak(); yyj4488++ {

			if yyj4488 >= len(yyv4488) {
				yyv4488 = append(yyv4488, LocalObjectReference{}) // var yyz4488 LocalObjectReference
				yyc4488 = true
			}
			yyh4488.ElemContainerState(yyj4488)
			if yyj4488 < len(yyv4488) {
				if r.TryDecodeAsNil() {
					yyv4488[yyj4488] = LocalObjectReference{}
				} else {
					yyv4491 := &yyv4488[yyj4488]
					yyv4491.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4488 < len(yyv4488) {
			yyv4488 = yyv4488[:yyj4488]
			yyc4488 = true
		} else if yyj4488 == 0 && yyv4488 == nil {
			yyv4488 = []LocalObjectReference{}
			yyc4488 = true
		}
	}
	yyh4488.End()
	if yyc4488 {
		*v = yyv4488
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4492 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4493 := &yyv4492
		yy4493.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4494 := *v
	yyh4494, yyl4494 := z.DecSliceHelperStart()
	var yyc4494 bool
	if yyl4494 == 0 {
		if yyv4494 == nil {
			yyv4494 = []PodCondition{}
			yyc4494 = true
		} else if len(yyv4494) != 0 {
			yyv4494 = yyv4494[:0]
			yyc4494 = true
		}
	} else if yyl4494 > 0 {
		var yyrr4494, yyrl4494 int
		var yyrt4494 bool
		if yyl4494 > cap(yyv4494) {

			yyrg4494 := len(yyv4494) > 0
			yyv24494 := yyv4494
			yyrl4494, yyrt4494 = z.DecInferLen(yyl4494, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4494 {
				if yyrl4494 <= cap(yyv4494) {
					yyv4494 = yyv4494[:yyrl4494]
				} else {
					yyv4494 = make([]PodCondition, yyrl4494)
				}
			} else {
				yyv4494 = make([]PodCondition, yyrl4494)
			}
			yyc4494 = true
			yyrr4494 = len(yyv4494)
			if yyrg4494 {
				copy(yyv4494, yyv24494)
			}
		} else if yyl4494 != len(yyv4494) {
			yyv4494 = yyv4494[:yyl4494]
			yyc4494 = true
		}
		yyj4494 := 0
		for ; yyj4494 < yyrr4494; yyj4494++ {
			yyh4494.ElemContainerState(yyj4494)
			if r.TryDecodeAsNil() {
				yyv4494[yyj4494] = PodCondition{}
			} else {
				yyv4495 := &yyv4494[yyj4494]
				yyv4495.CodecDecodeSelf(d)
			}

		}
		if yyrt4494 {
			for ; yyj4494 < yyl4494; yyj4494++ {
				yyv4494 = append(yyv4494, PodCondition{})
				yyh4494.ElemContainerState(yyj4494)
				if r.TryDecodeAsNil() {
					yyv4494[yyj4494] = PodCondition{}
				} else {
					yyv4496 := &yyv4494[yyj4494]
					yyv4496.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4494 := 0
		for ; !r.CheckBreak(); yyj4494++ {

			if yyj4494 >= len(yyv4494) {
				yyv4494 = append(yyv4494, PodCondition{}) // var yyz4494 PodCondition
				yyc4494 = true
			}
			yyh4494.ElemContainerState(yyj4494)
			if yyj4494 < len(yyv4494) {
				if r.TryDecodeAsNil() {
					yyv4494[yyj4494] = PodCondition{}
				} else {
					yyv4497 := &yyv4494[yyj4494]
					yyv4497.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4494 < len(yyv4494) {
			yyv4494 = yyv4494[:yyj4494]
			yyc4494 = true
		} else if yyj4494 == 0 && yyv4494 == nil {
			yyv4494 = []PodCondition{}
			yyc4494 = true
		}
	}
	yyh4494.End()
	if yyc4494 {
		*v = yyv4494
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4498 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4499 := &yyv4498
		yy4499.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4500 := *v
	yyh4500, yyl4500 := z.DecSliceHelperStart()
	var yyc4500 bool
	if yyl4500 == 0 {
		if yyv4500 == nil {
			yyv4500 = []ContainerStatus{}
			yyc4500 = true
		} else if len(yyv4500) != 0 {
			yyv4500 = yyv4500[:0]
			yyc4500 = true
		}
	} else if yyl4500 > 0 {
		var yyrr4500, yyrl4500 int
		var yyrt4500 bool
		if yyl4500 > cap(yyv4500) {

			yyrg4500 := len(yyv4500) > 0
			yyv24500 := yyv4500
			yyrl4500, yyrt4500 = z.DecInferLen(yyl4500, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4500 {
				if yyrl4500 <= cap(yyv4500) {
					yyv4500 = yyv4500[:yyrl4500]
				} else {
					yyv4500 = make([]ContainerStatus, yyrl4500)
				}
			} else {
				yyv4500 = make([]ContainerStatus, yyrl4500)
			}
			yyc4500 = true
			yyrr4500 = len(yyv4500)
			if yyrg4500 {
				copy(yyv4500, yyv24500)
			}
		} else if yyl4500 != len(yyv4500) {
			yyv4500 = yyv4500[:yyl4500]
			yyc4500 = true
		}
		yyj4500 := 0
		for ; yyj4500 < yyrr4500; yyj4500++ {
			yyh4500.ElemContainerState(yyj4500)
			if r.TryDecodeAsNil() {
				yyv4500[yyj4500] = ContainerStatus{}
			} else {
				yyv4501 := &yyv4500[yyj4500]
				yyv4501.CodecDecodeSelf(d)
			}

		}
		if yyrt4500 {
			for ; yyj4500 < yyl4500; yyj4500++ {
				yyv4500 = append(yyv4500, ContainerStatus{})
				yyh4500.ElemContainerState(yyj4500)
				if r.TryDecodeAsNil() {
					yyv4500[yyj4500] = ContainerStatus{}
				} else {
					yyv4502 := &yyv4500[yyj4500]
					yyv4502.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4500 := 0
		for ; !r.CheckBreak(); yyj4500++ {

			if yyj4500 >= len(yyv4500) {
				yyv4500 = append(yyv4500, ContainerStatus{}) // var yyz4500 ContainerStatus
				yyc4500 = true
			}
			yyh4500.ElemContainerState(yyj4500)
			if yyj4500 < len(yyv4500) {
				if r.TryDecodeAsNil() {
					yyv4500[yyj4500] = ContainerStatus{}
				} else {
					yyv4503 := &yyv4500[yyj4500]
					yyv4503.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4500 < len(yyv4500) {
			yyv4500 = yyv4500[:yyj4500]
			yyc4500 = true
		} else if yyj4500 == 0 && yyv4500 == nil {
			yyv4500 = []ContainerStatus{}
			yyc4500 = true
		}
	}
	yyh4500.End()
	if yyc4500 {
		*v = yyv4500
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4504 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4505 := &yyv4504
		yy4505.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4506 := *v
	yyh4506, yyl4506 := z.DecSliceHelperStart()
	var yyc4506 bool
	if yyl4506 == 0 {
		if yyv4506 == nil {
			yyv4506 = []Pod{}
			yyc4506 = true
		} else if len(yyv4506) != 0 {
			yyv4506 = yyv4506[:0]
			yyc4506 = true
		}
	} else if yyl4506 > 0 {
		var yyrr4506, yyrl4506 int
		var yyrt4506 bool
		if yyl4506 > cap(yyv4506) {

			yyrg4506 := len(yyv4506) > 0
			yyv24506 := yyv4506
			yyrl4506, yyrt4506 = z.DecInferLen(yyl4506, z.DecBasicHandle().MaxInitLen, 648)
			if yyrt4506 {
				if yyrl4506 <= cap(yyv4506) {
					yyv4506 = yyv4506[:yyrl4506]
				} else {
					yyv4506 = make([]Pod, yyrl4506)
				}
			} else {
				yyv4506 = make([]Pod, yyrl4506)
			}
			yyc4506 = true
			yyrr4506 = len(yyv4506)
			if yyrg4506 {
				copy(yyv4506, yyv24506)
			}
		} else if yyl4506 != len(yyv4506) {
			yyv4506 = yyv4506[:yyl4506]
			yyc4506 = true
		}
		yyj4506 := 0
		for ; yyj4506 < yyrr4506; yyj4506++ {
			yyh4506.ElemContainerState(yyj4506)
			if r.TryDecodeAsNil() {
				yyv4506[yyj4506] = Pod{}
			} else {
				yyv4507 := &yyv4506[yyj4506]
				yyv4507.CodecDecodeSelf(d)
			}

		}
		if yyrt4506 {
			for ; yyj4506 < yyl4506; yyj4506++ {
				yyv4506 = append(yyv4506, Pod{})
				yyh4506.ElemContainerState(yyj4506)
				if r.TryDecodeAsNil() {
					yyv4506[yyj4506] = Pod{}
				} else {
					yyv4508 := &yyv4506[yyj4506]
					yyv4508.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4506 := 0
		for ; !r.CheckBreak(); yyj4506++ {

			if yyj4506 >= len(yyv4506) {
				yyv4506 = append(yyv4506, Pod{}) // var yyz4506 Pod
				yyc4506 = true
			}
			yyh4506.ElemContainerState(yyj4506)
			if yyj4506 < len(yyv4506) {
				if r.TryDecodeAsNil() {
					yyv4506[yyj4506] = Pod{}
				} else {
					yyv4509 := &yyv4506[yyj4506]
					yyv4509.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4506 < len(yyv4506) {
			yyv4506 = yyv4506[:yyj4506]
			yyc4506 = true
		} else if yyj4506 == 0 && yyv4506 == nil {
			yyv4506 = []Pod{}
			yyc4506 = true
		}
	}
	yyh4506.End()
	if yyc4506 {
		*v = yyv4506
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4510 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4511 := &yyv4510
		yy4511.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4512 := *v
	yyh4512, yyl4512 := z.DecSliceHelperStart()
	var yyc4512 bool
	if yyl4512 == 0 {
		if yyv4512 == nil {
			yyv4512 = []PodTemplate{}
			yyc4512 = true
		} else if len(yyv4512) != 0 {
			yyv4512 = yyv4512[:0]
			yyc4512 = true
		}
	} else if yyl4512 > 0 {
		var yyrr4512, yyrl4512 int
		var yyrt4512 bool
		if yyl4512 > cap(yyv4512) {

			yyrg4512 := len(yyv4512) > 0
			yyv24512 := yyv4512
			yyrl4512, yyrt4512 = z.DecInferLen(yyl4512, z.DecBasicHandle().MaxInitLen, 696)
			if yyrt4512 {
				if yyrl4512 <= cap(yyv4512) {
					yyv4512 = yyv4512[:yyrl4512]
				} else {
					yyv4512 = make([]PodTemplate, yyrl4512)
				}
			} else {
				yyv4512 = make([]PodTemplate, yyrl4512)
			}
			yyc4512 = true
			yyrr4512 = len(yyv4512)
			if yyrg4512 {
				copy(yyv4512, yyv24512)
			}
		} else if yyl4512 != len(yyv4512) {
			yyv4512 = yyv4512[:yyl4512]
			yyc4512 = true
		}
		yyj4512 := 0
		for ; yyj4512 < yyrr4512; yyj4512++ {
			yyh4512.ElemContainerState(yyj4512)
			if r.TryDecodeAsNil() {
				yyv4512[yyj4512] = PodTemplate{}
			} else {
				yyv4513 := &yyv4512[yyj4512]
				yyv4513.CodecDecodeSelf(d)
			}

		}
		if yyrt4512 {
			for ; yyj4512 < yyl4512; yyj4512++ {
				yyv4512 = append(yyv4512, PodTemplate{})
				yyh4512.ElemContainerState(yyj4512)
				if r.TryDecodeAsNil() {
					yyv4512[yyj4512] = PodTemplate{}
				} else {
					yyv4514 := &yyv4512[yyj4512]
					yyv4514.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4512 := 0
		for ; !r.CheckBreak(); yyj4512++ {

			if yyj4512 >= len(yyv4512) {
				yyv4512 = append(yyv4512, PodTemplate{}) // var yyz4512 PodTemplate
				yyc4512 = true
			}
			yyh4512.ElemContainerState(yyj4512)
			if yyj4512 < len(yyv4512) {
				if r.TryDecodeAsNil() {
					yyv4512[yyj4512] = PodTemplate{}
				} else {
					yyv4515 := &yyv4512[yyj4512]
					yyv4515.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4512 < len(yyv4512) {
			yyv4512 = yyv4512[:yyj4512]
			yyc4512 = true
		} else if yyj4512 == 0 && yyv4512 == nil {
			yyv4512 = []PodTemplate{}
			yyc4512 = true
		}
	}
	yyh4512.End()
	if yyc4512 {
		*v = yyv4512
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4516 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4517 := &yyv4516
		yy4517.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4518 := *v
	yyh4518, yyl4518 := z.DecSliceHelperStart()
	var yyc4518 bool
	if yyl4518 == 0 {
		if yyv4518 == nil {
			yyv4518 = []ReplicationController{}
			yyc4518 = true
		} else if len(yyv4518) != 0 {
			yyv4518 = yyv4518[:0]
			yyc4518 = true
		}
	} else if yyl4518 > 0 {
		var yyrr4518, yyrl4518 int
		var yyrt4518 bool
		if yyl4518 > cap(yyv4518) {

			yyrg4518 := len(yyv4518) > 0
			yyv24518 := yyv4518
			yyrl4518, yyrt4518 = z.DecInferLen(yyl4518, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4518 {
				if yyrl4518 <= cap(yyv4518) {
					yyv4518 = yyv4518[:yyrl4518]
				} else {
					yyv4518 = make([]ReplicationController, yyrl4518)
				}
			} else {
				yyv4518 = make([]ReplicationController, yyrl4518)
			}
			yyc4518 = true
			yyrr4518 = len(yyv4518)
			if yyrg4518 {
				copy(yyv4518, yyv24518)
			}
		} else if yyl4518 != len(yyv4518) {
			yyv4518 = yyv4518[:yyl4518]
			yyc4518 = true
		}
		yyj4518 := 0
		for ; yyj4518 < yyrr4518; yyj4518++ {
			yyh4518.ElemContainerState(yyj4518)
			if r.TryDecodeAsNil() {
				yyv4518[yyj4518] = ReplicationController{}
			} else {
				yyv4519 := &yyv4518[yyj4518]
				yyv4519.CodecDecodeSelf(d)
			}

		}
		if yyrt4518 {
			for ; yyj4518 < yyl4518; yyj4518++ {
				yyv4518 = append(yyv4518, ReplicationController{})
				yyh4518.ElemContainerState(yyj4518)
				if r.TryDecodeAsNil() {
					yyv4518[yyj4518] = ReplicationController{}
				} else {
					yyv4520 := &yyv4518[yyj4518]
					yyv4520.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4518 := 0
		for ; !r.CheckBreak(); yyj4518++ {

			if yyj4518 >= len(yyv4518) {
				yyv4518 = append(yyv4518, ReplicationController{}) // var yyz4518 ReplicationController
				yyc4518 = true
			}
			yyh4518.ElemContainerState(yyj4518)
			if yyj4518 < len(yyv4518) {
				if r.TryDecodeAsNil() {
					yyv4518[yyj4518] = ReplicationController{}
				} else {
					yyv4521 := &yyv4518[yyj4518]
					yyv4521.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4518 < len(yyv4518) {
			yyv4518 = yyv4518[:yyj4518]
			yyc4518 = true
		} else if yyj4518 == 0 && yyv4518 == nil {
			yyv4518 = []ReplicationController{}
			yyc4518 = true
		}
	}
	yyh4518.End()
	if yyc4518 {
		*v = yyv4518
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4522 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4523 := &yyv4522
		yy4523.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4524 := *v
	yyh4524, yyl4524 := z.DecSliceHelperStart()
	var yyc4524 bool
	if yyl4524 == 0 {
		if yyv4524 == nil {
			yyv4524 = []LoadBalancerIngress{}
			yyc4524 = true
		} else if len(yyv4524) != 0 {
			yyv4524 = yyv4524[:0]
			yyc4524 = true
		}
	} else if yyl4524 > 0 {
		var yyrr4524, yyrl4524 int
		var yyrt4524 bool
		if yyl4524 > cap(yyv4524) {

			yyrg4524 := len(yyv4524) > 0
			yyv24524 := yyv4524
			yyrl4524, yyrt4524 = z.DecInferLen(yyl4524, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4524 {
				if yyrl4524 <= cap(yyv4524) {
					yyv4524 = yyv4524[:yyrl4524]
				} else {
					yyv4524 = make([]LoadBalancerIngress, yyrl4524)
				}
			} else {
				yyv4524 = make([]LoadBalancerIngress, yyrl4524)
			}
			yyc4524 = true
			yyrr4524 = len(yyv4524)
			if yyrg4524 {
				copy(yyv4524, yyv24524)
			}
		} else if yyl4524 != len(yyv4524) {
			yyv4524 = yyv4524[:yyl4524]
			yyc4524 = true
		}
		yyj4524 := 0
		for ; yyj4524 < yyrr4524; yyj4524++ {
			yyh4524.ElemContainerState(yyj4524)
			if r.TryDecodeAsNil() {
				yyv4524[yyj4524] = LoadBalancerIngress{}
			} else {
				yyv4525 := &yyv4524[yyj4524]
				yyv4525.CodecDecodeSelf(d)
			}

		}
		if yyrt4524 {
			for ; yyj4524 < yyl4524; yyj4524++ {
				yyv4524 = append(yyv4524, LoadBalancerIngress{})
				yyh4524.ElemContainerState(yyj4524)
				if r.TryDecodeAsNil() {
					yyv4524[yyj4524] = LoadBalancerIngress{}
				} else {
					yyv4526 := &yyv4524[yyj4524]
					yyv4526.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4524 := 0
		for ; !r.CheckBreak(); yyj4524++ {

			if yyj4524 >= len(yyv4524) {
				yyv4524 = append(yyv4524, LoadBalancerIngress{}) // var yyz4524 LoadBalancerIngress
				yyc4524 = true
			}
			yyh4524.ElemContainerState(yyj4524)
			if yyj4524 < len(yyv4524) {
				if r.TryDecodeAsNil() {
					yyv4524[yyj4524] = LoadBalancerIngress{}
				} else {
					yyv4527 := &yyv4524[yyj4524]
					yyv4527.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4524 < len(yyv4524) {
			yyv4524 = yyv4524[:yyj4524]
			yyc4524 = true
		} else if yyj4524 == 0 && yyv4524 == nil {
			yyv4524 = []LoadBalancerIngress{}
			yyc4524 = true
		}
	}
	yyh4524.End()
	if yyc4524 {
		*v = yyv4524
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4528 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4529 := &yyv4528
		yy4529.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4530 := *v
	yyh4530, yyl4530 := z.DecSliceHelperStart()
	var yyc4530 bool
	if yyl4530 == 0 {
		if yyv4530 == nil {
			yyv4530 = []ServicePort{}
			yyc4530 = true
		} else if len(yyv4530) != 0 {
			yyv4530 = yyv4530[:0]
			yyc4530 = true
		}
	} else if yyl4530 > 0 {
		var yyrr4530, yyrl4530 int
		var yyrt4530 bool
		if yyl4530 > cap(yyv4530) {

			yyrg4530 := len(yyv4530) > 0
			yyv24530 := yyv4530
			yyrl4530, yyrt4530 = z.DecInferLen(yyl4530, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4530 {
				if yyrl4530 <= cap(yyv4530) {
					yyv4530 = yyv4530[:yyrl4530]
				} else {
					yyv4530 = make([]ServicePort, yyrl4530)
				}
			} else {
				yyv4530 = make([]ServicePort, yyrl4530)
			}
			yyc4530 = true
			yyrr4530 = len(yyv4530)
			if yyrg4530 {
				copy(yyv4530, yyv24530)
			}
		} else if yyl4530 != len(yyv4530) {
			yyv4530 = yyv4530[:yyl4530]
			yyc4530 = true
		}
		yyj4530 := 0
		for ; yyj4530 < yyrr4530; yyj4530++ {
			yyh4530.ElemContainerState(yyj4530)
			if r.TryDecodeAsNil() {
				yyv4530[yyj4530] = ServicePort{}
			} else {
				yyv4531 := &yyv4530[yyj4530]
				yyv4531.CodecDecodeSelf(d)
			}

		}
		if yyrt4530 {
			for ; yyj4530 < yyl4530; yyj4530++ {
				yyv4530 = append(yyv4530, ServicePort{})
				yyh4530.ElemContainerState(yyj4530)
				if r.TryDecodeAsNil() {
					yyv4530[yyj4530] = ServicePort{}
				} else {
					yyv4532 := &yyv4530[yyj4530]
					yyv4532.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4530 := 0
		for ; !r.CheckBreak(); yyj4530++ {

			if yyj4530 >= len(yyv4530) {
				yyv4530 = append(yyv4530, ServicePort{}) // var yyz4530 ServicePort
				yyc4530 = true
			}
			yyh4530.ElemContainerState(yyj4530)
			if yyj4530 < len(yyv4530) {
				if r.TryDecodeAsNil() {
					yyv4530[yyj4530] = ServicePort{}
				} else {
					yyv4533 := &yyv4530[yyj4530]
					yyv4533.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4530 < len(yyv4530) {
			yyv4530 = yyv4530[:yyj4530]
			yyc4530 = true
		} else if yyj4530 == 0 && yyv4530 == nil {
			yyv4530 = []ServicePort{}
			yyc4530 = true
		}
	}
	yyh4530.End()
	if yyc4530 {
		*v = yyv4530
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4534 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4535 := &yyv4534
		yy4535.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4536 := *v
	yyh4536, yyl4536 := z.DecSliceHelperStart()
	var yyc4536 bool
	if yyl4536 == 0 {
		if yyv4536 == nil {
			yyv4536 = []Service{}
			yyc4536 = true
		} else if len(yyv4536) != 0 {
			yyv4536 = yyv4536[:0]
			yyc4536 = true
		}
	} else if yyl4536 > 0 {
		var yyrr4536, yyrl4536 int
		var yyrt4536 bool
		if yyl4536 > cap(yyv4536) {

			yyrg4536 := len(yyv4536) > 0
			yyv24536 := yyv4536
			yyrl4536, yyrt4536 = z.DecInferLen(yyl4536, z.DecBasicHandle().MaxInitLen, 432)
			if yyrt4536 {
				if yyrl4536 <= cap(yyv4536) {
					yyv4536 = yyv4536[:yyrl4536]
				} else {
					yyv4536 = make([]Service, yyrl4536)
				}
			} else {
				yyv4536 = make([]Service, yyrl4536)
			}
			yyc4536 = true
			yyrr4536 = len(yyv4536)
			if yyrg4536 {
				copy(yyv4536, yyv24536)
			}
		} else if yyl4536 != len(yyv4536) {
			yyv4536 = yyv4536[:yyl4536]
			yyc4536 = true
		}
		yyj4536 := 0
		for ; yyj4536 < yyrr4536; yyj4536++ {
			yyh4536.ElemContainerState(yyj4536)
			if r.TryDecodeAsNil() {
				yyv4536[yyj4536] = Service{}
			} else {
				yyv4537 := &yyv4536[yyj4536]
				yyv4537.CodecDecodeSelf(d)
			}

		}
		if yyrt4536 {
			for ; yyj4536 < yyl4536; yyj4536++ {
				yyv4536 = append(yyv4536, Service{})
				yyh4536.ElemContainerState(yyj4536)
				if r.TryDecodeAsNil() {
					yyv4536[yyj4536] = Service{}
				} else {
					yyv4538 := &yyv4536[yyj4536]
					yyv4538.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4536 := 0
		for ; !r.CheckBreak(); yyj4536++ {

			if yyj4536 >= len(yyv4536) {
				yyv4536 = append(yyv4536, Service{}) // var yyz4536 Service
				yyc4536 = true
			}
			yyh4536.ElemContainerState(yyj4536)
			if yyj4536 < len(yyv4536) {
				if r.TryDecodeAsNil() {
					yyv4536[yyj4536] = Service{}
				} else {
					yyv4539 := &yyv4536[yyj4536]
					yyv4539.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4536 < len(yyv4536) {
			yyv4536 = yyv4536[:yyj4536]
			yyc4536 = true
		} else if yyj4536 == 0 && yyv4536 == nil {
			yyv4536 = []Service{}
			yyc4536 = true
		}
	}
	yyh4536.End()
	if yyc4536 {
		*v = yyv4536
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4540 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4541 := &yyv4540
		yy4541.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4542 := *v
	yyh4542, yyl4542 := z.DecSliceHelperStart()
	var yyc4542 bool
	if yyl4542 == 0 {
		if yyv4542 == nil {
			yyv4542 = []ObjectReference{}
			yyc4542 = true
		} else if len(yyv4542) != 0 {
			yyv4542 = yyv4542[:0]
			yyc4542 = true
		}
	} else if yyl4542 > 0 {
		var yyrr4542, yyrl4542 int
		var yyrt4542 bool
		if yyl4542 > cap(yyv4542) {

			yyrg4542 := len(yyv4542) > 0
			yyv24542 := yyv4542
			yyrl4542, yyrt4542 = z.DecInferLen(yyl4542, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4542 {
				if yyrl4542 <= cap(yyv4542) {
					yyv4542 = yyv4542[:yyrl4542]
				} else {
					yyv4542 = make([]ObjectReference, yyrl4542)
				}
			} else {
				yyv4542 = make([]ObjectReference, yyrl4542)
			}
			yyc4542 = true
			yyrr4542 = len(yyv4542)
			if yyrg4542 {
				copy(yyv4542, yyv24542)
			}
		} else if yyl4542 != len(yyv4542) {
			yyv4542 = yyv4542[:yyl4542]
			yyc4542 = true
		}
		yyj4542 := 0
		for ; yyj4542 < yyrr4542; yyj4542++ {
			yyh4542.ElemContainerState(yyj4542)
			if r.TryDecodeAsNil() {
				yyv4542[yyj4542] = ObjectReference{}
			} else {
				yyv4543 := &yyv4542[yyj4542]
				yyv4543.CodecDecodeSelf(d)
			}

		}
		if yyrt4542 {
			for ; yyj4542 < yyl4542; yyj4542++ {
				yyv4542 = append(yyv4542, ObjectReference{})
				yyh4542.ElemContainerState(yyj4542)
				if r.TryDecodeAsNil() {
					yyv4542[yyj4542] = ObjectReference{}
				} else {
					yyv4544 := &yyv4542[yyj4542]
					yyv4544.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4542 := 0
		for ; !r.CheckBreak(); yyj4542++ {

			if yyj4542 >= len(yyv4542) {
				yyv4542 = append(yyv4542, ObjectReference{}) // var yyz4542 ObjectReference
				yyc4542 = true
			}
			yyh4542.ElemContainerState(yyj4542)
			if yyj4542 < len(yyv4542) {
				if r.TryDecodeAsNil() {
					yyv4542[yyj4542] = ObjectReference{}
				} else {
					yyv4545 := &yyv4542[yyj4542]
					yyv4545.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4542 < len(yyv4542) {
			yyv4542 = yyv4542[:yyj4542]
			yyc4542 = true
		} else if yyj4542 == 0 && yyv4542 == nil {
			yyv4542 = []ObjectReference{}
			yyc4542 = true
		}
	}
	yyh4542.End()
	if yyc4542 {
		*v = yyv4542
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4546 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4547 := &yyv4546
		yy4547.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4548 := *v
	yyh4548, yyl4548 := z.DecSliceHelperStart()
	var yyc4548 bool
	if yyl4548 == 0 {
		if yyv4548 == nil {
			yyv4548 = []ServiceAccount{}
			yyc4548 = true
		} else if len(yyv4548) != 0 {
			yyv4548 = yyv4548[:0]
			yyc4548 = true
		}
	} else if yyl4548 > 0 {
		var yyrr4548, yyrl4548 int
		var yyrt4548 bool
		if yyl4548 > cap(yyv4548) {

			yyrg4548 := len(yyv4548) > 0
			yyv24548 := yyv4548
			yyrl4548, yyrt4548 = z.DecInferLen(yyl4548, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4548 {
				if yyrl4548 <= cap(yyv4548) {
					yyv4548 = yyv4548[:yyrl4548]
				} else {
					yyv4548 = make([]ServiceAccount, yyrl4548)
				}
			} else {
				yyv4548 = make([]ServiceAccount, yyrl4548)
			}
			yyc4548 = true
			yyrr4548 = len(yyv4548)
			if yyrg4548 {
				copy(yyv4548, yyv24548)
			}
		} else if yyl4548 != len(yyv4548) {
			yyv4548 = yyv4548[:yyl4548]
			yyc4548 = true
		}
		yyj4548 := 0
		for ; yyj4548 < yyrr4548; yyj4548++ {
			yyh4548.ElemContainerState(yyj4548)
			if r.TryDecodeAsNil() {
				yyv4548[yyj4548] = ServiceAccount{}
			} else {
				yyv4549 := &yyv4548[yyj4548]
				yyv4549.CodecDecodeSelf(d)
			}

		}
		if yyrt4548 {
			for ; yyj4548 < yyl4548; yyj4548++ {
				yyv4548 = append(yyv4548, ServiceAccount{})
				yyh4548.ElemContainerState(yyj4548)
				if r.TryDecodeAsNil() {
					yyv4548[yyj4548] = ServiceAccount{}
				} else {
					yyv4550 := &yyv4548[yyj4548]
					yyv4550.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4548 := 0
		for ; !r.CheckBreak(); yyj4548++ {

			if yyj4548 >= len(yyv4548) {
				yyv4548 = append(yyv4548, ServiceAccount{}) // var yyz4548 ServiceAccount
				yyc4548 = true
			}
			yyh4548.ElemContainerState(yyj4548)
			if yyj4548 < len(yyv4548) {
				if r.TryDecodeAsNil() {
					yyv4548[yyj4548] = ServiceAccount{}
				} else {
					yyv4551 := &yyv4548[yyj4548]
					yyv4551.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4548 < len(yyv4548) {
			yyv4548 = yyv4548[:yyj4548]
			yyc4548 = true
		} else if yyj4548 == 0 && yyv4548 == nil {
			yyv4548 = []ServiceAccount{}
			yyc4548 = true
		}
	}
	yyh4548.End()
	if yyc4548 {
		*v = yyv4548
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4552 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4553 := &yyv4552
		yy4553.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4554 := *v
	yyh4554, yyl4554 := z.DecSliceHelperStart()
	var yyc4554 bool
	if yyl4554 == 0 {
		if yyv4554 == nil {
			yyv4554 = []EndpointSubset{}
			yyc4554 = true
		} else if len(yyv4554) != 0 {
			yyv4554 = yyv4554[:0]
			yyc4554 = true
		}
	} else if yyl4554 > 0 {
		var yyrr4554, yyrl4554 int
		var yyrt4554 bool
		if yyl4554 > cap(yyv4554) {

			yyrg4554 := len(yyv4554) > 0
			yyv24554 := yyv4554
			yyrl4554, yyrt4554 = z.DecInferLen(yyl4554, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4554 {
				if yyrl4554 <= cap(yyv4554) {
					yyv4554 = yyv4554[:yyrl4554]
				} else {
					yyv4554 = make([]EndpointSubset, yyrl4554)
				}
			} else {
				yyv4554 = make([]EndpointSubset, yyrl4554)
			}
			yyc4554 = true
			yyrr4554 = len(yyv4554)
			if yyrg4554 {
				copy(yyv4554, yyv24554)
			}
		} else if yyl4554 != len(yyv4554) {
			yyv4554 = yyv4554[:yyl4554]
			yyc4554 = true
		}
		yyj4554 := 0
		for ; yyj4554 < yyrr4554; yyj4554++ {
			yyh4554.ElemContainerState(yyj4554)
			if r.TryDecodeAsNil() {
				yyv4554[yyj4554] = EndpointSubset{}
			} else {
				yyv4555 := &yyv4554[yyj4554]
				yyv4555.CodecDecodeSelf(d)
			}

		}
		if yyrt4554 {
			for ; yyj4554 < yyl4554; yyj4554++ {
				yyv4554 = append(yyv4554, EndpointSubset{})
				yyh4554.ElemContainerState(yyj4554)
				if r.TryDecodeAsNil() {
					yyv4554[yyj4554] = EndpointSubset{}
				} else {
					yyv4556 := &yyv4554[yyj4554]
					yyv4556.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4554 := 0
		for ; !r.CheckBreak(); yyj4554++ {

			if yyj4554 >= len(yyv4554) {
				yyv4554 = append(yyv4554, EndpointSubset{}) // var yyz4554 EndpointSubset
				yyc4554 = true
			}
			yyh4554.ElemContainerState(yyj4554)
			if yyj4554 < len(yyv4554) {
				if r.TryDecodeAsNil() {
					yyv4554[yyj4554] = EndpointSubset{}
				} else {
					yyv4557 := &yyv4554[yyj4554]
					yyv4557.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4554 < len(yyv4554) {
			yyv4554 = yyv4554[:yyj4554]
			yyc4554 = true
		} else if yyj4554 == 0 && yyv4554 == nil {
			yyv4554 = []EndpointSubset{}
			yyc4554 = true
		}
	}
	yyh4554.End()
	if yyc4554 {
		*v = yyv4554
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4558 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4559 := &yyv4558
		yy4559.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4560 := *v
	yyh4560, yyl4560 := z.DecSliceHelperStart()
	var yyc4560 bool
	if yyl4560 == 0 {
		if yyv4560 == nil {
			yyv4560 = []EndpointAddress{}
			yyc4560 = true
		} else if len(yyv4560) != 0 {
			yyv4560 = yyv4560[:0]
			yyc4560 = true
		}
	} else if yyl4560 > 0 {
		var yyrr4560, yyrl4560 int
		var yyrt4560 bool
		if yyl4560 > cap(yyv4560) {

			yyrg4560 := len(yyv4560) > 0
			yyv24560 := yyv4560
			yyrl4560, yyrt4560 = z.DecInferLen(yyl4560, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4560 {
				if yyrl4560 <= cap(yyv4560) {
					yyv4560 = yyv4560[:yyrl4560]
				} else {
					yyv4560 = make([]EndpointAddress, yyrl4560)
				}
			} else {
				yyv4560 = make([]EndpointAddress, yyrl4560)
			}
			yyc4560 = true
			yyrr4560 = len(yyv4560)
			if yyrg4560 {
				copy(yyv4560, yyv24560)
			}
		} else if yyl4560 != len(yyv4560) {
			yyv4560 = yyv4560[:yyl4560]
			yyc4560 = true
		}
		yyj4560 := 0
		for ; yyj4560 < yyrr4560; yyj4560++ {
			yyh4560.ElemContainerState(yyj4560)
			if r.TryDecodeAsNil() {
				yyv4560[yyj4560] = EndpointAddress{}
			} else {
				yyv4561 := &yyv4560[yyj4560]
				yyv4561.CodecDecodeSelf(d)
			}

		}
		if yyrt4560 {
			for ; yyj4560 < yyl4560; yyj4560++ {
				yyv4560 = append(yyv4560, EndpointAddress{})
				yyh4560.ElemContainerState(yyj4560)
				if r.TryDecodeAsNil() {
					yyv4560[yyj4560] = EndpointAddress{}
				} else {
					yyv4562 := &yyv4560[yyj4560]
					yyv4562.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4560 := 0
		for ; !r.CheckBreak(); yyj4560++ {

			if yyj4560 >= len(yyv4560) {
				yyv4560 = append(yyv4560, EndpointAddress{}) // var yyz4560 EndpointAddress
				yyc4560 = true
			}
			yyh4560.ElemContainerState(yyj4560)
			if yyj4560 < len(yyv4560) {
				if r.TryDecodeAsNil() {
					yyv4560[yyj4560] = EndpointAddress{}
				} else {
					yyv4563 := &yyv4560[yyj4560]
					yyv4563.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4560 < len(yyv4560) {
			yyv4560 = yyv4560[:yyj4560]
			yyc4560 = true
		} else if yyj4560 == 0 && yyv4560 == nil {
			yyv4560 = []EndpointAddress{}
			yyc4560 = true
		}
	}
	yyh4560.End()
	if yyc4560 {
		*v = yyv4560
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4564 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4565 := &yyv4564
		yy4565.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4566 := *v
	yyh4566, yyl4566 := z.DecSliceHelperStart()
	var yyc4566 bool
	if yyl4566 == 0 {
		if yyv4566 == nil {
			yyv4566 = []EndpointPort{}
			yyc4566 = true
		} else if len(yyv4566) != 0 {
			yyv4566 = yyv4566[:0]
			yyc4566 = true
		}
	} else if yyl4566 > 0 {
		var yyrr4566, yyrl4566 int
		var yyrt4566 bool
		if yyl4566 > cap(yyv4566) {

			yyrg4566 := len(yyv4566) > 0
			yyv24566 := yyv4566
			yyrl4566, yyrt4566 = z.DecInferLen(yyl4566, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4566 {
				if yyrl4566 <= cap(yyv4566) {
					yyv4566 = yyv4566[:yyrl4566]
				} else {
					yyv4566 = make([]EndpointPort, yyrl4566)
				}
			} else {
				yyv4566 = make([]EndpointPort, yyrl4566)
			}
			yyc4566 = true
			yyrr4566 = len(yyv4566)
			if yyrg4566 {
				copy(yyv4566, yyv24566)
			}
		} else if yyl4566 != len(yyv4566) {
			yyv4566 = yyv4566[:yyl4566]
			yyc4566 = true
		}
		yyj4566 := 0
		for ; yyj4566 < yyrr4566; yyj4566++ {
			yyh4566.ElemContainerState(yyj4566)
			if r.TryDecodeAsNil() {
				yyv4566[yyj4566] = EndpointPort{}
			} else {
				yyv4567 := &yyv4566[yyj4566]
				yyv4567.CodecDecodeSelf(d)
			}

		}
		if yyrt4566 {
			for ; yyj4566 < yyl4566; yyj4566++ {
				yyv4566 = append(yyv4566, EndpointPort{})
				yyh4566.ElemContainerState(yyj4566)
				if r.TryDecodeAsNil() {
					yyv4566[yyj4566] = EndpointPort{}
				} else {
					yyv4568 := &yyv4566[yyj4566]
					yyv4568.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4566 := 0
		for ; !r.CheckBreak(); yyj4566++ {

			if yyj4566 >= len(yyv4566) {
				yyv4566 = append(yyv4566, EndpointPort{}) // var yyz4566 EndpointPort
				yyc4566 = true
			}
			yyh4566.ElemContainerState(yyj4566)
			if yyj4566 < len(yyv4566) {
				if r.TryDecodeAsNil() {
					yyv4566[yyj4566] = EndpointPort{}
				} else {
					yyv4569 := &yyv4566[yyj4566]
					yyv4569.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4566 < len(yyv4566) {
			yyv4566 = yyv4566[:yyj4566]
			yyc4566 = true
		} else if yyj4566 == 0 && yyv4566 == nil {
			yyv4566 = []EndpointPort{}
			yyc4566 = true
		}
	}
	yyh4566.End()
	if yyc4566 {
		*v = yyv4566
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4570 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4571 := &yyv4570
		yy4571.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4572 := *v
	yyh4572, yyl4572 := z.DecSliceHelperStart()
	var yyc4572 bool
	if yyl4572 == 0 {
		if yyv4572 == nil {
			yyv4572 = []Endpoints{}
			yyc4572 = true
		} else if len(yyv4572) != 0 {
			yyv4572 = yyv4572[:0]
			yyc4572 = true
		}
	} else if yyl4572 > 0 {
		var yyrr4572, yyrl4572 int
		var yyrt4572 bool
		if yyl4572 > cap(yyv4572) {

			yyrg4572 := len(yyv4572) > 0
			yyv24572 := yyv4572
			yyrl4572, yyrt4572 = z.DecInferLen(yyl4572, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4572 {
				if yyrl4572 <= cap(yyv4572) {
					yyv4572 = yyv4572[:yyrl4572]
				} else {
					yyv4572 = make([]Endpoints, yyrl4572)
				}
			} else {
				yyv4572 = make([]Endpoints, yyrl4572)
			}
			yyc4572 = true
			yyrr4572 = len(yyv4572)
			if yyrg4572 {
				copy(yyv4572, yyv24572)
			}
		} else if yyl4572 != len(yyv4572) {
			yyv4572 = yyv4572[:yyl4572]
			yyc4572 = true
		}
		yyj4572 := 0
		for ; yyj4572 < yyrr4572; yyj4572++ {
			yyh4572.ElemContainerState(yyj4572)
			if r.TryDecodeAsNil() {
				yyv4572[yyj4572] = Endpoints{}
			} else {
				yyv4573 := &yyv4572[yyj4572]
				yyv4573.CodecDecodeSelf(d)
			}

		}
		if yyrt4572 {
			for ; yyj4572 < yyl4572; yyj4572++ {
				yyv4572 = append(yyv4572, Endpoints{})
				yyh4572.ElemContainerState(yyj4572)
				if r.TryDecodeAsNil() {
					yyv4572[yyj4572] = Endpoints{}
				} else {
					yyv4574 := &yyv4572[yyj4572]
					yyv4574.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4572 := 0
		for ; !r.CheckBreak(); yyj4572++ {

			if yyj4572 >= len(yyv4572) {
				yyv4572 = append(yyv4572, Endpoints{}) // var yyz4572 Endpoints
				yyc4572 = true
			}
			yyh4572.ElemContainerState(yyj4572)
			if yyj4572 < len(yyv4572) {
				if r.TryDecodeAsNil() {
					yyv4572[yyj4572] = Endpoints{}
				} else {
					yyv4575 := &yyv4572[yyj4572]
					yyv4575.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4572 < len(yyv4572) {
			yyv4572 = yyv4572[:yyj4572]
			yyc4572 = true
		} else if yyj4572 == 0 && yyv4572 == nil {
			yyv4572 = []Endpoints{}
			yyc4572 = true
		}
	}
	yyh4572.End()
	if yyc4572 {
		*v = yyv4572
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4576 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4577 := &yyv4576
		yy4577.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4578 := *v
	yyh4578, yyl4578 := z.DecSliceHelperStart()
	var yyc4578 bool
	if yyl4578 == 0 {
		if yyv4578 == nil {
			yyv4578 = []NodeCondition{}
			yyc4578 = true
		} else if len(yyv4578) != 0 {
			yyv4578 = yyv4578[:0]
			yyc4578 = true
		}
	} else if yyl4578 > 0 {
		var yyrr4578, yyrl4578 int
		var yyrt4578 bool
		if yyl4578 > cap(yyv4578) {

			yyrg4578 := len(yyv4578) > 0
			yyv24578 := yyv4578
			yyrl4578, yyrt4578 = z.DecInferLen(yyl4578, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4578 {
				if yyrl4578 <= cap(yyv4578) {
					yyv4578 = yyv4578[:yyrl4578]
				} else {
					yyv4578 = make([]NodeCondition, yyrl4578)
				}
			} else {
				yyv4578 = make([]NodeCondition, yyrl4578)
			}
			yyc4578 = true
			yyrr4578 = len(yyv4578)
			if yyrg4578 {
				copy(yyv4578, yyv24578)
			}
		} else if yyl4578 != len(yyv4578) {
			yyv4578 = yyv4578[:yyl4578]
			yyc4578 = true
		}
		yyj4578 := 0
		for ; yyj4578 < yyrr4578; yyj4578++ {
			yyh4578.ElemContainerState(yyj4578)
			if r.TryDecodeAsNil() {
				yyv4578[yyj4578] = NodeCondition{}
			} else {
				yyv4579 := &yyv4578[yyj4578]
				yyv4579.CodecDecodeSelf(d)
			}

		}
		if yyrt4578 {
			for ; yyj4578 < yyl4578; yyj4578++ {
				yyv4578 = append(yyv4578, NodeCondition{})
				yyh4578.ElemContainerState(yyj4578)
				if r.TryDecodeAsNil() {
					yyv4578[yyj4578] = NodeCondition{}
				} else {
					yyv4580 := &yyv4578[yyj4578]
					yyv4580.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4578 := 0
		for ; !r.CheckBreak(); yyj4578++ {

			if yyj4578 >= len(yyv4578) {
				yyv4578 = append(yyv4578, NodeCondition{}) // var yyz4578 NodeCondition
				yyc4578 = true
			}
			yyh4578.ElemContainerState(yyj4578)
			if yyj4578 < len(yyv4578) {
				if r.TryDecodeAsNil() {
					yyv4578[yyj4578] = NodeCondition{}
				} else {
					yyv4581 := &yyv4578[yyj4578]
					yyv4581.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4578 < len(yyv4578) {
			yyv4578 = yyv4578[:yyj4578]
			yyc4578 = true
		} else if yyj4578 == 0 && yyv4578 == nil {
			yyv4578 = []NodeCondition{}
			yyc4578 = true
		}
	}
	yyh4578.End()
	if yyc4578 {
		*v = yyv4578
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4582 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4583 := &yyv4582
		yy4583.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4584 := *v
	yyh4584, yyl4584 := z.DecSliceHelperStart()
	var yyc4584 bool
	if yyl4584 == 0 {
		if yyv4584 == nil {
			yyv4584 = []NodeAddress{}
			yyc4584 = true
		} else if len(yyv4584) != 0 {
			yyv4584 = yyv4584[:0]
			yyc4584 = true
		}
	} else if yyl4584 > 0 {
		var yyrr4584, yyrl4584 int
		var yyrt4584 bool
		if yyl4584 > cap(yyv4584) {

			yyrg4584 := len(yyv4584) > 0
			yyv24584 := yyv4584
			yyrl4584, yyrt4584 = z.DecInferLen(yyl4584, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4584 {
				if yyrl4584 <= cap(yyv4584) {
					yyv4584 = yyv4584[:yyrl4584]
				} else {
					yyv4584 = make([]NodeAddress, yyrl4584)
				}
			} else {
				yyv4584 = make([]NodeAddress, yyrl4584)
			}
			yyc4584 = true
			yyrr4584 = len(yyv4584)
			if yyrg4584 {
				copy(yyv4584, yyv24584)
			}
		} else if yyl4584 != len(yyv4584) {
			yyv4584 = yyv4584[:yyl4584]
			yyc4584 = true
		}
		yyj4584 := 0
		for ; yyj4584 < yyrr4584; yyj4584++ {
			yyh4584.ElemContainerState(yyj4584)
			if r.TryDecodeAsNil() {
				yyv4584[yyj4584] = NodeAddress{}
			} else {
				yyv4585 := &yyv4584[yyj4584]
				yyv4585.CodecDecodeSelf(d)
			}

		}
		if yyrt4584 {
			for ; yyj4584 < yyl4584; yyj4584++ {
				yyv4584 = append(yyv4584, NodeAddress{})
				yyh4584.ElemContainerState(yyj4584)
				if r.TryDecodeAsNil() {
					yyv4584[yyj4584] = NodeAddress{}
				} else {
					yyv4586 := &yyv4584[yyj4584]
					yyv4586.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4584 := 0
		for ; !r.CheckBreak(); yyj4584++ {

			if yyj4584 >= len(yyv4584) {
				yyv4584 = append(yyv4584, NodeAddress{}) // var yyz4584 NodeAddress
				yyc4584 = true
			}
			yyh4584.ElemContainerState(yyj4584)
			if yyj4584 < len(yyv4584) {
				if r.TryDecodeAsNil() {
					yyv4584[yyj4584] = NodeAddress{}
				} else {
					yyv4587 := &yyv4584[yyj4584]
					yyv4587.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4584 < len(yyv4584) {
			yyv4584 = yyv4584[:yyj4584]
			yyc4584 = true
		} else if yyj4584 == 0 && yyv4584 == nil {
			yyv4584 = []NodeAddress{}
			yyc4584 = true
		}
	}
	yyh4584.End()
	if yyc4584 {
		*v = yyv4584
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4588 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4589 := &yyv4588
		yy4589.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4590 := *v
	yyh4590, yyl4590 := z.DecSliceHelperStart()
	var yyc4590 bool
	if yyl4590 == 0 {
		if yyv4590 == nil {
			yyv4590 = []ContainerImage{}
			yyc4590 = true
		} else if len(yyv4590) != 0 {
			yyv4590 = yyv4590[:0]
			yyc4590 = true
		}
	} else if yyl4590 > 0 {
		var yyrr4590, yyrl4590 int
		var yyrt4590 bool
		if yyl4590 > cap(yyv4590) {

			yyrg4590 := len(yyv4590) > 0
			yyv24590 := yyv4590
			yyrl4590, yyrt4590 = z.DecInferLen(yyl4590, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4590 {
				if yyrl4590 <= cap(yyv4590) {
					yyv4590 = yyv4590[:yyrl4590]
				} else {
					yyv4590 = make([]ContainerImage, yyrl4590)
				}
			} else {
				yyv4590 = make([]ContainerImage, yyrl4590)
			}
			yyc4590 = true
			yyrr4590 = len(yyv4590)
			if yyrg4590 {
				copy(yyv4590, yyv24590)
			}
		} else if yyl4590 != len(yyv4590) {
			yyv4590 = yyv4590[:yyl4590]
			yyc4590 = true
		}
		yyj4590 := 0
		for ; yyj4590 < yyrr4590; yyj4590++ {
			yyh4590.ElemContainerState(yyj4590)
			if r.TryDecodeAsNil() {
				yyv4590[yyj4590] = ContainerImage{}
			} else {
				yyv4591 := &yyv4590[yyj4590]
				yyv4591.CodecDecodeSelf(d)
			}

		}
		if yyrt4590 {
			for ; yyj4590 < yyl4590; yyj4590++ {
				yyv4590 = append(yyv4590, ContainerImage{})
				yyh4590.ElemContainerState(yyj4590)
				if r.TryDecodeAsNil() {
					yyv4590[yyj4590] = ContainerImage{}
				} else {
					yyv4592 := &yyv4590[yyj4590]
					yyv4592.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4590 := 0
		for ; !r.CheckBreak(); yyj4590++ {

			if yyj4590 >= len(yyv4590) {
				yyv4590 = append(yyv4590, ContainerImage{}) // var yyz4590 ContainerImage
				yyc4590 = true
			}
			yyh4590.ElemContainerState(yyj4590)
			if yyj4590 < len(yyv4590) {
				if r.TryDecodeAsNil() {
					yyv4590[yyj4590] = ContainerImage{}
				} else {
					yyv4593 := &yyv4590[yyj4590]
					yyv4593.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4590 < len(yyv4590) {
			yyv4590 = yyv4590[:yyj4590]
			yyc4590 = true
		} else if yyj4590 == 0 && yyv4590 == nil {
			yyv4590 = []ContainerImage{}
			yyc4590 = true
		}
	}
	yyh4590.End()
	if yyc4590 {
		*v = yyv4590
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4594 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4594.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4595 := *v
	yyh4595, yyl4595 := z.DecSliceHelperStart()
	var yyc4595 bool
	if yyl4595 == 0 {
		if yyv4595 == nil {
			yyv4595 = []UniqueVolumeName{}
			yyc4595 = true
		} else if len(yyv4595) != 0 {
			yyv4595 = yyv4595[:0]
			yyc4595 = true
		}
	} else if yyl4595 > 0 {
		var yyrr4595, yyrl4595 int
		var yyrt4595 bool
		if yyl4595 > cap(yyv4595) {

			yyrl4595, yyrt4595 = z.DecInferLen(yyl4595, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4595 {
				if yyrl4595 <= cap(yyv4595) {
					yyv4595 = yyv4595[:yyrl4595]
				} else {
					yyv4595 = make([]UniqueVolumeName, yyrl4595)
				}
			} else {
				yyv4595 = make([]UniqueVolumeName, yyrl4595)
			}
			yyc4595 = true
			yyrr4595 = len(yyv4595)
		} else if yyl4595 != len(yyv4595) {
			yyv4595 = yyv4595[:yyl4595]
			yyc4595 = true
		}
		yyj4595 := 0
		for ; yyj4595 < yyrr4595; yyj4595++ {
			yyh4595.ElemContainerState(yyj4595)
			if r.TryDecodeAsNil() {
				yyv4595[yyj4595] = ""
			} else {
				yyv4595[yyj4595] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4595 {
			for ; yyj4595 < yyl4595; yyj4595++ {
				yyv4595 = append(yyv4595, "")
				yyh4595.ElemContainerState(yyj4595)
				if r.TryDecodeAsNil() {
					yyv4595[yyj4595] = ""
				} else {
					yyv4595[yyj4595] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4595 := 0
		for ; !r.CheckBreak(); yyj4595++ {

			if yyj4595 >= len(yyv4595) {
				yyv4595 = append(yyv4595, "") // var yyz4595 UniqueVolumeName
				yyc4595 = true
			}
			yyh4595.ElemContainerState(yyj4595)
			if yyj4595 < len(yyv4595) {
				if r.TryDecodeAsNil() {
					yyv4595[yyj4595] = ""
				} else {
					yyv4595[yyj4595] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4595 < len(yyv4595) {
			yyv4595 = yyv4595[:yyj4595]
			yyc4595 = true
		} else if yyj4595 == 0 && yyv4595 == nil {
			yyv4595 = []UniqueVolumeName{}
			yyc4595 = true
		}
	}
	yyh4595.End()
	if yyc4595 {
		*v = yyv4595
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4599 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4600 := &yyv4599
		yy4600.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4601 := *v
	yyh4601, yyl4601 := z.DecSliceHelperStart()
	var yyc4601 bool
	if yyl4601 == 0 {
		if yyv4601 == nil {
			yyv4601 = []AttachedVolume{}
			yyc4601 = true
		} else if len(yyv4601) != 0 {
			yyv4601 = yyv4601[:0]
			yyc4601 = true
		}
	} else if yyl4601 > 0 {
		var yyrr4601, yyrl4601 int
		var yyrt4601 bool
		if yyl4601 > cap(yyv4601) {

			yyrg4601 := len(yyv4601) > 0
			yyv24601 := yyv4601
			yyrl4601, yyrt4601 = z.DecInferLen(yyl4601, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4601 {
				if yyrl4601 <= cap(yyv4601) {
					yyv4601 = yyv4601[:yyrl4601]
				} else {
					yyv4601 = make([]AttachedVolume, yyrl4601)
				}
			} else {
				yyv4601 = make([]AttachedVolume, yyrl4601)
			}
			yyc4601 = true
			yyrr4601 = len(yyv4601)
			if yyrg4601 {
				copy(yyv4601, yyv24601)
			}
		} else if yyl4601 != len(yyv4601) {
			yyv4601 = yyv4601[:yyl4601]
			yyc4601 = true
		}
		yyj4601 := 0
		for ; yyj4601 < yyrr4601; yyj4601++ {
			yyh4601.ElemContainerState(yyj4601)
			if r.TryDecodeAsNil() {
				yyv4601[yyj4601] = AttachedVolume{}
			} else {
				yyv4602 := &yyv4601[yyj4601]
				yyv4602.CodecDecodeSelf(d)
			}

		}
		if yyrt4601 {
			for ; yyj4601 < yyl4601; yyj4601++ {
				yyv4601 = append(yyv4601, AttachedVolume{})
				yyh4601.ElemContainerState(yyj4601)
				if r.TryDecodeAsNil() {
					yyv4601[yyj4601] = AttachedVolume{}
				} else {
					yyv4603 := &yyv4601[yyj4601]
					yyv4603.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4601 := 0
		for ; !r.CheckBreak(); yyj4601++ {

			if yyj4601 >= len(yyv4601) {
				yyv4601 = append(yyv4601, AttachedVolume{}) // var yyz4601 AttachedVolume
				yyc4601 = true
			}
			yyh4601.ElemContainerState(yyj4601)
			if yyj4601 < len(yyv4601) {
				if r.TryDecodeAsNil() {
					yyv4601[yyj4601] = AttachedVolume{}
				} else {
					yyv4604 := &yyv4601[yyj4601]
					yyv4604.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4601 < len(yyv4601) {
			yyv4601 = yyv4601[:yyj4601]
			yyc4601 = true
		} else if yyj4601 == 0 && yyv4601 == nil {
			yyv4601 = []AttachedVolume{}
			yyc4601 = true
		}
	}
	yyh4601.End()
	if yyc4601 {
		*v = yyv4601
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4605 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4606 := &yyv4605
		yy4606.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4607 := *v
	yyh4607, yyl4607 := z.DecSliceHelperStart()
	var yyc4607 bool
	if yyl4607 == 0 {
		if yyv4607 == nil {
			yyv4607 = []PreferAvoidPodsEntry{}
			yyc4607 = true
		} else if len(yyv4607) != 0 {
			yyv4607 = yyv4607[:0]
			yyc4607 = true
		}
	} else if yyl4607 > 0 {
		var yyrr4607, yyrl4607 int
		var yyrt4607 bool
		if yyl4607 > cap(yyv4607) {

			yyrg4607 := len(yyv4607) > 0
			yyv24607 := yyv4607
			yyrl4607, yyrt4607 = z.DecInferLen(yyl4607, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4607 {
				if yyrl4607 <= cap(yyv4607) {
					yyv4607 = yyv4607[:yyrl4607]
				} else {
					yyv4607 = make([]PreferAvoidPodsEntry, yyrl4607)
				}
			} else {
				yyv4607 = make([]PreferAvoidPodsEntry, yyrl4607)
			}
			yyc4607 = true
			yyrr4607 = len(yyv4607)
			if yyrg4607 {
				copy(yyv4607, yyv24607)
			}
		} else if yyl4607 != len(yyv4607) {
			yyv4607 = yyv4607[:yyl4607]
			yyc4607 = true
		}
		yyj4607 := 0
		for ; yyj4607 < yyrr4607; yyj4607++ {
			yyh4607.ElemContainerState(yyj4607)
			if r.TryDecodeAsNil() {
				yyv4607[yyj4607] = PreferAvoidPodsEntry{}
			} else {
				yyv4608 := &yyv4607[yyj4607]
				yyv4608.CodecDecodeSelf(d)
			}

		}
		if yyrt4607 {
			for ; yyj4607 < yyl4607; yyj4607++ {
				yyv4607 = append(yyv4607, PreferAvoidPodsEntry{})
				yyh4607.ElemContainerState(yyj4607)
				if r.TryDecodeAsNil() {
					yyv4607[yyj4607] = PreferAvoidPodsEntry{}
				} else {
					yyv4609 := &yyv4607[yyj4607]
					yyv4609.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4607 := 0
		for ; !r.CheckBreak(); yyj4607++ {

			if yyj4607 >= len(yyv4607) {
				yyv4607 = append(yyv4607, PreferAvoidPodsEntry{}) // var yyz4607 PreferAvoidPodsEntry
				yyc4607 = true
			}
			yyh4607.ElemContainerState(yyj4607)
			if yyj4607 < len(yyv4607) {
				if r.TryDecodeAsNil() {
					yyv4607[yyj4607] = PreferAvoidPodsEntry{}
				} else {
					yyv4610 := &yyv4607[yyj4607]
					yyv4610.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4607 < len(yyv4607) {
			yyv4607 = yyv4607[:yyj4607]
			yyc4607 = true
		} else if yyj4607 == 0 && yyv4607 == nil {
			yyv4607 = []PreferAvoidPodsEntry{}
			yyc4607 = true
		}
	}
	yyh4607.End()
	if yyc4607 {
		*v = yyv4607
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4611, yyv4611 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4611.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4612 := &yyv4611
		yym4613 := z.EncBinary()
		_ = yym4613
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4612) {
		} else if !yym4613 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4612)
		} else {
			z.EncFallback(yy4612)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4614 := *v
	yyl4614 := r.ReadMapStart()
	yybh4614 := z.DecBasicHandle()
	if yyv4614 == nil {
		yyrl4614, _ := z.DecInferLen(yyl4614, yybh4614.MaxInitLen, 72)
		yyv4614 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4614)
		*v = yyv4614
	}
	var yymk4614 ResourceName
	var yymv4614 pkg3_resource.Quantity
	var yymg4614 bool
	if yybh4614.MapValueReset {
		yymg4614 = true
	}
	if yyl4614 > 0 {
		for yyj4614 := 0; yyj4614 < yyl4614; yyj4614++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4614 = ""
			} else {
				yymk4614 = ResourceName(r.DecodeString())
			}

			if yymg4614 {
				yymv4614 = yyv4614[yymk4614]
			} else {
				yymv4614 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4614 = pkg3_resource.Quantity{}
			} else {
				yyv4616 := &yymv4614
				yym4617 := z.DecBinary()
				_ = yym4617
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4616) {
				} else if !yym4617 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4616)
				} else {
					z.DecFallback(yyv4616, false)
				}
			}

			if yyv4614 != nil {
				yyv4614[yymk4614] = yymv4614
			}
		}
	} else if yyl4614 < 0 {
		for yyj4614 := 0; !r.CheckBreak(); yyj4614++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4614 = ""
			} else {
				yymk4614 = ResourceName(r.DecodeString())
			}

			if yymg4614 {
				yymv4614 = yyv4614[yymk4614]
			} else {
				yymv4614 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4614 = pkg3_resource.Quantity{}
			} else {
				yyv4619 := &yymv4614
				yym4620 := z.DecBinary()
				_ = yym4620
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4619) {
				} else if !yym4620 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4619)
				} else {
					z.DecFallback(yyv4619, false)
				}
			}

			if yyv4614 != nil {
				yyv4614[yymk4614] = yymv4614
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4621 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4622 := &yyv4621
		yy4622.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4623 := *v
	yyh4623, yyl4623 := z.DecSliceHelperStart()
	var yyc4623 bool
	if yyl4623 == 0 {
		if yyv4623 == nil {
			yyv4623 = []Node{}
			yyc4623 = true
		} else if len(yyv4623) != 0 {
			yyv4623 = yyv4623[:0]
			yyc4623 = true
		}
	} else if yyl4623 > 0 {
		var yyrr4623, yyrl4623 int
		var yyrt4623 bool
		if yyl4623 > cap(yyv4623) {

			yyrg4623 := len(yyv4623) > 0
			yyv24623 := yyv4623
			yyrl4623, yyrt4623 = z.DecInferLen(yyl4623, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt4623 {
				if yyrl4623 <= cap(yyv4623) {
					yyv4623 = yyv4623[:yyrl4623]
				} else {
					yyv4623 = make([]Node, yyrl4623)
				}
			} else {
				yyv4623 = make([]Node, yyrl4623)
			}
			yyc4623 = true
			yyrr4623 = len(yyv4623)
			if yyrg4623 {
				copy(yyv4623, yyv24623)
			}
		} else if yyl4623 != len(yyv4623) {
			yyv4623 = yyv4623[:yyl4623]
			yyc4623 = true
		}
		yyj4623 := 0
		for ; yyj4623 < yyrr4623; yyj4623++ {
			yyh4623.ElemContainerState(yyj4623)
			if r.TryDecodeAsNil() {
				yyv4623[yyj4623] = Node{}
			} else {
				yyv4624 := &yyv4623[yyj4623]
				yyv4624.CodecDecodeSelf(d)
			}

		}
		if yyrt4623 {
			for ; yyj4623 < yyl4623; yyj4623++ {
				yyv4623 = append(yyv4623, Node{})
				yyh4623.ElemContainerState(yyj4623)
				if r.TryDecodeAsNil() {
					yyv4623[yyj4623] = Node{}
				} else {
					yyv4625 := &yyv4623[yyj4623]
					yyv4625.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4623 := 0
		for ; !r.CheckBreak(); yyj4623++ {

			if yyj4623 >= len(yyv4623) {
				yyv4623 = append(yyv4623, Node{}) // var yyz4623 Node
				yyc4623 = true
			}
			yyh4623.ElemContainerState(yyj4623)
			if yyj4623 < len(yyv4623) {
				if r.TryDecodeAsNil() {
					yyv4623[yyj4623] = Node{}
				} else {
					yyv4626 := &yyv4623[yyj4623]
					yyv4626.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4623 < len(yyv4623) {
			yyv4623 = yyv4623[:yyj4623]
			yyc4623 = true
		} else if yyj4623 == 0 && yyv4623 == nil {
			yyv4623 = []Node{}
			yyc4623 = true
		}
	}
	yyh4623.End()
	if yyc4623 {
		*v = yyv4623
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4627 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4627.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4628 := *v
	yyh4628, yyl4628 := z.DecSliceHelperStart()
	var yyc4628 bool
	if yyl4628 == 0 {
		if yyv4628 == nil {
			yyv4628 = []FinalizerName{}
			yyc4628 = true
		} else if len(yyv4628) != 0 {
			yyv4628 = yyv4628[:0]
			yyc4628 = true
		}
	} else if yyl4628 > 0 {
		var yyrr4628, yyrl4628 int
		var yyrt4628 bool
		if yyl4628 > cap(yyv4628) {

			yyrl4628, yyrt4628 = z.DecInferLen(yyl4628, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4628 {
				if yyrl4628 <= cap(yyv4628) {
					yyv4628 = yyv4628[:yyrl4628]
				} else {
					yyv4628 = make([]FinalizerName, yyrl4628)
				}
			} else {
				yyv4628 = make([]FinalizerName, yyrl4628)
			}
			yyc4628 = true
			yyrr4628 = len(yyv4628)
		} else if yyl4628 != len(yyv4628) {
			yyv4628 = yyv4628[:yyl4628]
			yyc4628 = true
		}
		yyj4628 := 0
		for ; yyj4628 < yyrr4628; yyj4628++ {
			yyh4628.ElemContainerState(yyj4628)
			if r.TryDecodeAsNil() {
				yyv4628[yyj4628] = ""
			} else {
				yyv4628[yyj4628] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4628 {
			for ; yyj4628 < yyl4628; yyj4628++ {
				yyv4628 = append(yyv4628, "")
				yyh4628.ElemContainerState(yyj4628)
				if r.TryDecodeAsNil() {
					yyv4628[yyj4628] = ""
				} else {
					yyv4628[yyj4628] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4628 := 0
		for ; !r.CheckBreak(); yyj4628++ {

			if yyj4628 >= len(yyv4628) {
				yyv4628 = append(yyv4628, "") // var yyz4628 FinalizerName
				yyc4628 = true
			}
			yyh4628.ElemContainerState(yyj4628)
			if yyj4628 < len(yyv4628) {
				if r.TryDecodeAsNil() {
					yyv4628[yyj4628] = ""
				} else {
					yyv4628[yyj4628] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4628 < len(yyv4628) {
			yyv4628 = yyv4628[:yyj4628]
			yyc4628 = true
		} else if yyj4628 == 0 && yyv4628 == nil {
			yyv4628 = []FinalizerName{}
			yyc4628 = true
		}
	}
	yyh4628.End()
	if yyc4628 {
		*v = yyv4628
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4632 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4633 := &yyv4632
		yy4633.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4634 := *v
	yyh4634, yyl4634 := z.DecSliceHelperStart()
	var yyc4634 bool
	if yyl4634 == 0 {
		if yyv4634 == nil {
			yyv4634 = []Namespace{}
			yyc4634 = true
		} else if len(yyv4634) != 0 {
			yyv4634 = yyv4634[:0]
			yyc4634 = true
		}
	} else if yyl4634 > 0 {
		var yyrr4634, yyrl4634 int
		var yyrt4634 bool
		if yyl4634 > cap(yyv4634) {

			yyrg4634 := len(yyv4634) > 0
			yyv24634 := yyv4634
			yyrl4634, yyrt4634 = z.DecInferLen(yyl4634, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4634 {
				if yyrl4634 <= cap(yyv4634) {
					yyv4634 = yyv4634[:yyrl4634]
				} else {
					yyv4634 = make([]Namespace, yyrl4634)
				}
			} else {
				yyv4634 = make([]Namespace, yyrl4634)
			}
			yyc4634 = true
			yyrr4634 = len(yyv4634)
			if yyrg4634 {
				copy(yyv4634, yyv24634)
			}
		} else if yyl4634 != len(yyv4634) {
			yyv4634 = yyv4634[:yyl4634]
			yyc4634 = true
		}
		yyj4634 := 0
		for ; yyj4634 < yyrr4634; yyj4634++ {
			yyh4634.ElemContainerState(yyj4634)
			if r.TryDecodeAsNil() {
				yyv4634[yyj4634] = Namespace{}
			} else {
				yyv4635 := &yyv4634[yyj4634]
				yyv4635.CodecDecodeSelf(d)
			}

		}
		if yyrt4634 {
			for ; yyj4634 < yyl4634; yyj4634++ {
				yyv4634 = append(yyv4634, Namespace{})
				yyh4634.ElemContainerState(yyj4634)
				if r.TryDecodeAsNil() {
					yyv4634[yyj4634] = Namespace{}
				} else {
					yyv4636 := &yyv4634[yyj4634]
					yyv4636.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4634 := 0
		for ; !r.CheckBreak(); yyj4634++ {

			if yyj4634 >= len(yyv4634) {
				yyv4634 = append(yyv4634, Namespace{}) // var yyz4634 Namespace
				yyc4634 = true
			}
			yyh4634.ElemContainerState(yyj4634)
			if yyj4634 < len(yyv4634) {
				if r.TryDecodeAsNil() {
					yyv4634[yyj4634] = Namespace{}
				} else {
					yyv4637 := &yyv4634[yyj4634]
					yyv4637.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4634 < len(yyv4634) {
			yyv4634 = yyv4634[:yyj4634]
			yyc4634 = true
		} else if yyj4634 == 0 && yyv4634 == nil {
			yyv4634 = []Namespace{}
			yyc4634 = true
		}
	}
	yyh4634.End()
	if yyc4634 {
		*v = yyv4634
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4638 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4639 := &yyv4638
		yy4639.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4640 := *v
	yyh4640, yyl4640 := z.DecSliceHelperStart()
	var yyc4640 bool
	if yyl4640 == 0 {
		if yyv4640 == nil {
			yyv4640 = []Event{}
			yyc4640 = true
		} else if len(yyv4640) != 0 {
			yyv4640 = yyv4640[:0]
			yyc4640 = true
		}
	} else if yyl4640 > 0 {
		var yyrr4640, yyrl4640 int
		var yyrt4640 bool
		if yyl4640 > cap(yyv4640) {

			yyrg4640 := len(yyv4640) > 0
			yyv24640 := yyv4640
			yyrl4640, yyrt4640 = z.DecInferLen(yyl4640, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4640 {
				if yyrl4640 <= cap(yyv4640) {
					yyv4640 = yyv4640[:yyrl4640]
				} else {
					yyv4640 = make([]Event, yyrl4640)
				}
			} else {
				yyv4640 = make([]Event, yyrl4640)
			}
			yyc4640 = true
			yyrr4640 = len(yyv4640)
			if yyrg4640 {
				copy(yyv4640, yyv24640)
			}
		} else if yyl4640 != len(yyv4640) {
			yyv4640 = yyv4640[:yyl4640]
			yyc4640 = true
		}
		yyj4640 := 0
		for ; yyj4640 < yyrr4640; yyj4640++ {
			yyh4640.ElemContainerState(yyj4640)
			if r.TryDecodeAsNil() {
				yyv4640[yyj4640] = Event{}
			} else {
				yyv4641 := &yyv4640[yyj4640]
				yyv4641.CodecDecodeSelf(d)
			}

		}
		if yyrt4640 {
			for ; yyj4640 < yyl4640; yyj4640++ {
				yyv4640 = append(yyv4640, Event{})
				yyh4640.ElemContainerState(yyj4640)
				if r.TryDecodeAsNil() {
					yyv4640[yyj4640] = Event{}
				} else {
					yyv4642 := &yyv4640[yyj4640]
					yyv4642.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4640 := 0
		for ; !r.CheckBreak(); yyj4640++ {

			if yyj4640 >= len(yyv4640) {
				yyv4640 = append(yyv4640, Event{}) // var yyz4640 Event
				yyc4640 = true
			}
			yyh4640.ElemContainerState(yyj4640)
			if yyj4640 < len(yyv4640) {
				if r.TryDecodeAsNil() {
					yyv4640[yyj4640] = Event{}
				} else {
					yyv4643 := &yyv4640[yyj4640]
					yyv4643.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4640 < len(yyv4640) {
			yyv4640 = yyv4640[:yyj4640]
			yyc4640 = true
		} else if yyj4640 == 0 && yyv4640 == nil {
			yyv4640 = []Event{}
			yyc4640 = true
		}
	}
	yyh4640.End()
	if yyc4640 {
		*v = yyv4640
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4644 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4645 := &yyv4644
		yym4646 := z.EncBinary()
		_ = yym4646
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4645) {
		} else if !yym4646 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4645)
		} else {
			z.EncFallback(yy4645)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4647 := *v
	yyh4647, yyl4647 := z.DecSliceHelperStart()
	var yyc4647 bool
	if yyl4647 == 0 {
		if yyv4647 == nil {
			yyv4647 = []pkg5_runtime.RawExtension{}
			yyc4647 = true
		} else if len(yyv4647) != 0 {
			yyv4647 = yyv4647[:0]
			yyc4647 = true
		}
	} else if yyl4647 > 0 {
		var yyrr4647, yyrl4647 int
		var yyrt4647 bool
		if yyl4647 > cap(yyv4647) {

			yyrg4647 := len(yyv4647) > 0
			yyv24647 := yyv4647
			yyrl4647, yyrt4647 = z.DecInferLen(yyl4647, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4647 {
				if yyrl4647 <= cap(yyv4647) {
					yyv4647 = yyv4647[:yyrl4647]
				} else {
					yyv4647 = make([]pkg5_runtime.RawExtension, yyrl4647)
				}
			} else {
				yyv4647 = make([]pkg5_runtime.RawExtension, yyrl4647)
			}
			yyc4647 = true
			yyrr4647 = len(yyv4647)
			if yyrg4647 {
				copy(yyv4647, yyv24647)
			}
		} else if yyl4647 != len(yyv4647) {
			yyv4647 = yyv4647[:yyl4647]
			yyc4647 = true
		}
		yyj4647 := 0
		for ; yyj4647 < yyrr4647; yyj4647++ {
			yyh4647.ElemContainerState(yyj4647)
			if r.TryDecodeAsNil() {
				yyv4647[yyj4647] = pkg5_runtime.RawExtension{}
			} else {
				yyv4648 := &yyv4647[yyj4647]
				yym4649 := z.DecBinary()
				_ = yym4649
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4648) {
				} else if !yym4649 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4648)
				} else {
					z.DecFallback(yyv4648, false)
				}
			}

		}
		if yyrt4647 {
			for ; yyj4647 < yyl4647; yyj4647++ {
				yyv4647 = append(yyv4647, pkg5_runtime.RawExtension{})
				yyh4647.ElemContainerState(yyj4647)
				if r.TryDecodeAsNil() {
					yyv4647[yyj4647] = pkg5_runtime.RawExtension{}
				} else {
					yyv4650 := &yyv4647[yyj4647]
					yym4651 := z.DecBinary()
					_ = yym4651
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4650) {
					} else if !yym4651 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4650)
					} else {
						z.DecFallback(yyv4650, false)
					}
				}

			}
		}

	} else {
		yyj4647 := 0
		for ; !r.CheckBreak(); yyj4647++ {

			if yyj4647 >= len(yyv4647) {
				yyv4647 = append(yyv4647, pkg5_runtime.RawExtension{}) // var yyz4647 pkg5_runtime.RawExtension
				yyc4647 = true
			}
			yyh4647.ElemContainerState(yyj4647)
			if yyj4647 < len(yyv4647) {
				if r.TryDecodeAsNil() {
					yyv4647[yyj4647] = pkg5_runtime.RawExtension{}
				} else {
					yyv4652 := &yyv4647[yyj4647]
					yym4653 := z.DecBinary()
					_ = yym4653
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4652) {
					} else if !yym4653 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4652)
					} else {
						z.DecFallback(yyv4652, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4647 < len(yyv4647) {
			yyv4647 = yyv4647[:yyj4647]
			yyc4647 = true
		} else if yyj4647 == 0 && yyv4647 == nil {
			yyv4647 = []pkg5_runtime.RawExtension{}
			yyc4647 = true
		}
	}
	yyh4647.End()
	if yyc4647 {
		*v = yyv4647
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4654 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4655 := &yyv4654
		yy4655.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4656 := *v
	yyh4656, yyl4656 := z.DecSliceHelperStart()
	var yyc4656 bool
	if yyl4656 == 0 {
		if yyv4656 == nil {
			yyv4656 = []LimitRangeItem{}
			yyc4656 = true
		} else if len(yyv4656) != 0 {
			yyv4656 = yyv4656[:0]
			yyc4656 = true
		}
	} else if yyl4656 > 0 {
		var yyrr4656, yyrl4656 int
		var yyrt4656 bool
		if yyl4656 > cap(yyv4656) {

			yyrg4656 := len(yyv4656) > 0
			yyv24656 := yyv4656
			yyrl4656, yyrt4656 = z.DecInferLen(yyl4656, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4656 {
				if yyrl4656 <= cap(yyv4656) {
					yyv4656 = yyv4656[:yyrl4656]
				} else {
					yyv4656 = make([]LimitRangeItem, yyrl4656)
				}
			} else {
				yyv4656 = make([]LimitRangeItem, yyrl4656)
			}
			yyc4656 = true
			yyrr4656 = len(yyv4656)
			if yyrg4656 {
				copy(yyv4656, yyv24656)
			}
		} else if yyl4656 != len(yyv4656) {
			yyv4656 = yyv4656[:yyl4656]
			yyc4656 = true
		}
		yyj4656 := 0
		for ; yyj4656 < yyrr4656; yyj4656++ {
			yyh4656.ElemContainerState(yyj4656)
			if r.TryDecodeAsNil() {
				yyv4656[yyj4656] = LimitRangeItem{}
			} else {
				yyv4657 := &yyv4656[yyj4656]
				yyv4657.CodecDecodeSelf(d)
			}

		}
		if yyrt4656 {
			for ; yyj4656 < yyl4656; yyj4656++ {
				yyv4656 = append(yyv4656, LimitRangeItem{})
				yyh4656.ElemContainerState(yyj4656)
				if r.TryDecodeAsNil() {
					yyv4656[yyj4656] = LimitRangeItem{}
				} else {
					yyv4658 := &yyv4656[yyj4656]
					yyv4658.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4656 := 0
		for ; !r.CheckBreak(); yyj4656++ {

			if yyj4656 >= len(yyv4656) {
				yyv4656 = append(yyv4656, LimitRangeItem{}) // var yyz4656 LimitRangeItem
				yyc4656 = true
			}
			yyh4656.ElemContainerState(yyj4656)
			if yyj4656 < len(yyv4656) {
				if r.TryDecodeAsNil() {
					yyv4656[yyj4656] = LimitRangeItem{}
				} else {
					yyv4659 := &yyv4656[yyj4656]
					yyv4659.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4656 < len(yyv4656) {
			yyv4656 = yyv4656[:yyj4656]
			yyc4656 = true
		} else if yyj4656 == 0 && yyv4656 == nil {
			yyv4656 = []LimitRangeItem{}
			yyc4656 = true
		}
	}
	yyh4656.End()
	if yyc4656 {
		*v = yyv4656
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4660 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4661 := &yyv4660
		yy4661.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4662 := *v
	yyh4662, yyl4662 := z.DecSliceHelperStart()
	var yyc4662 bool
	if yyl4662 == 0 {
		if yyv4662 == nil {
			yyv4662 = []LimitRange{}
			yyc4662 = true
		} else if len(yyv4662) != 0 {
			yyv4662 = yyv4662[:0]
			yyc4662 = true
		}
	} else if yyl4662 > 0 {
		var yyrr4662, yyrl4662 int
		var yyrt4662 bool
		if yyl4662 > cap(yyv4662) {

			yyrg4662 := len(yyv4662) > 0
			yyv24662 := yyv4662
			yyrl4662, yyrt4662 = z.DecInferLen(yyl4662, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4662 {
				if yyrl4662 <= cap(yyv4662) {
					yyv4662 = yyv4662[:yyrl4662]
				} else {
					yyv4662 = make([]LimitRange, yyrl4662)
				}
			} else {
				yyv4662 = make([]LimitRange, yyrl4662)
			}
			yyc4662 = true
			yyrr4662 = len(yyv4662)
			if yyrg4662 {
				copy(yyv4662, yyv24662)
			}
		} else if yyl4662 != len(yyv4662) {
			yyv4662 = yyv4662[:yyl4662]
			yyc4662 = true
		}
		yyj4662 := 0
		for ; yyj4662 < yyrr4662; yyj4662++ {
			yyh4662.ElemContainerState(yyj4662)
			if r.TryDecodeAsNil() {
				yyv4662[yyj4662] = LimitRange{}
			} else {
				yyv4663 := &yyv4662[yyj4662]
				yyv4663.CodecDecodeSelf(d)
			}

		}
		if yyrt4662 {
			for ; yyj4662 < yyl4662; yyj4662++ {
				yyv4662 = append(yyv4662, LimitRange{})
				yyh4662.ElemContainerState(yyj4662)
				if r.TryDecodeAsNil() {
					yyv4662[yyj4662] = LimitRange{}
				} else {
					yyv4664 := &yyv4662[yyj4662]
					yyv4664.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4662 := 0
		for ; !r.CheckBreak(); yyj4662++ {

			if yyj4662 >= len(yyv4662) {
				yyv4662 = append(yyv4662, LimitRange{}) // var yyz4662 LimitRange
				yyc4662 = true
			}
			yyh4662.ElemContainerState(yyj4662)
			if yyj4662 < len(yyv4662) {
				if r.TryDecodeAsNil() {
					yyv4662[yyj4662] = LimitRange{}
				} else {
					yyv4665 := &yyv4662[yyj4662]
					yyv4665.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4662 < len(yyv4662) {
			yyv4662 = yyv4662[:yyj4662]
			yyc4662 = true
		} else if yyj4662 == 0 && yyv4662 == nil {
			yyv4662 = []LimitRange{}
			yyc4662 = true
		}
	}
	yyh4662.End()
	if yyc4662 {
		*v = yyv4662
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4666 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4666.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4667 := *v
	yyh4667, yyl4667 := z.DecSliceHelperStart()
	var yyc4667 bool
	if yyl4667 == 0 {
		if yyv4667 == nil {
			yyv4667 = []ResourceQuotaScope{}
			yyc4667 = true
		} else if len(yyv4667) != 0 {
			yyv4667 = yyv4667[:0]
			yyc4667 = true
		}
	} else if yyl4667 > 0 {
		var yyrr4667, yyrl4667 int
		var yyrt4667 bool
		if yyl4667 > cap(yyv4667) {

			yyrl4667, yyrt4667 = z.DecInferLen(yyl4667, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4667 {
				if yyrl4667 <= cap(yyv4667) {
					yyv4667 = yyv4667[:yyrl4667]
				} else {
					yyv4667 = make([]ResourceQuotaScope, yyrl4667)
				}
			} else {
				yyv4667 = make([]ResourceQuotaScope, yyrl4667)
			}
			yyc4667 = true
			yyrr4667 = len(yyv4667)
		} else if yyl4667 != len(yyv4667) {
			yyv4667 = yyv4667[:yyl4667]
			yyc4667 = true
		}
		yyj4667 := 0
		for ; yyj4667 < yyrr4667; yyj4667++ {
			yyh4667.ElemContainerState(yyj4667)
			if r.TryDecodeAsNil() {
				yyv4667[yyj4667] = ""
			} else {
				yyv4667[yyj4667] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4667 {
			for ; yyj4667 < yyl4667; yyj4667++ {
				yyv4667 = append(yyv4667, "")
				yyh4667.ElemContainerState(yyj4667)
				if r.TryDecodeAsNil() {
					yyv4667[yyj4667] = ""
				} else {
					yyv4667[yyj4667] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4667 := 0
		for ; !r.CheckBreak(); yyj4667++ {

			if yyj4667 >= len(yyv4667) {
				yyv4667 = append(yyv4667, "") // var yyz4667 ResourceQuotaScope
				yyc4667 = true
			}
			yyh4667.ElemContainerState(yyj4667)
			if yyj4667 < len(yyv4667) {
				if r.TryDecodeAsNil() {
					yyv4667[yyj4667] = ""
				} else {
					yyv4667[yyj4667] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4667 < len(yyv4667) {
			yyv4667 = yyv4667[:yyj4667]
			yyc4667 = true
		} else if yyj4667 == 0 && yyv4667 == nil {
			yyv4667 = []ResourceQuotaScope{}
			yyc4667 = true
		}
	}
	yyh4667.End()
	if yyc4667 {
		*v = yyv4667
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4671 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4672 := &yyv4671
		yy4672.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4673 := *v
	yyh4673, yyl4673 := z.DecSliceHelperStart()
	var yyc4673 bool
	if yyl4673 == 0 {
		if yyv4673 == nil {
			yyv4673 = []ResourceQuota{}
			yyc4673 = true
		} else if len(yyv4673) != 0 {
			yyv4673 = yyv4673[:0]
			yyc4673 = true
		}
	} else if yyl4673 > 0 {
		var yyrr4673, yyrl4673 int
		var yyrt4673 bool
		if yyl4673 > cap(yyv4673) {

			yyrg4673 := len(yyv4673) > 0
			yyv24673 := yyv4673
			yyrl4673, yyrt4673 = z.DecInferLen(yyl4673, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4673 {
				if yyrl4673 <= cap(yyv4673) {
					yyv4673 = yyv4673[:yyrl4673]
				} else {
					yyv4673 = make([]ResourceQuota, yyrl4673)
				}
			} else {
				yyv4673 = make([]ResourceQuota, yyrl4673)
			}
			yyc4673 = true
			yyrr4673 = len(yyv4673)
			if yyrg4673 {
				copy(yyv4673, yyv24673)
			}
		} else if yyl4673 != len(yyv4673) {
			yyv4673 = yyv4673[:yyl4673]
			yyc4673 = true
		}
		yyj4673 := 0
		for ; yyj4673 < yyrr4673; yyj4673++ {
			yyh4673.ElemContainerState(yyj4673)
			if r.TryDecodeAsNil() {
				yyv4673[yyj4673] = ResourceQuota{}
			} else {
				yyv4674 := &yyv4673[yyj4673]
				yyv4674.CodecDecodeSelf(d)
			}

		}
		if yyrt4673 {
			for ; yyj4673 < yyl4673; yyj4673++ {
				yyv4673 = append(yyv4673, ResourceQuota{})
				yyh4673.ElemContainerState(yyj4673)
				if r.TryDecodeAsNil() {
					yyv4673[yyj4673] = ResourceQuota{}
				} else {
					yyv4675 := &yyv4673[yyj4673]
					yyv4675.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4673 := 0
		for ; !r.CheckBreak(); yyj4673++ {

			if yyj4673 >= len(yyv4673) {
				yyv4673 = append(yyv4673, ResourceQuota{}) // var yyz4673 ResourceQuota
				yyc4673 = true
			}
			yyh4673.ElemContainerState(yyj4673)
			if yyj4673 < len(yyv4673) {
				if r.TryDecodeAsNil() {
					yyv4673[yyj4673] = ResourceQuota{}
				} else {
					yyv4676 := &yyv4673[yyj4673]
					yyv4676.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4673 < len(yyv4673) {
			yyv4673 = yyv4673[:yyj4673]
			yyc4673 = true
		} else if yyj4673 == 0 && yyv4673 == nil {
			yyv4673 = []ResourceQuota{}
			yyc4673 = true
		}
	}
	yyh4673.End()
	if yyc4673 {
		*v = yyv4673
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4677, yyv4677 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4678 := z.EncBinary()
		_ = yym4678
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4677))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4677 == nil {
			r.EncodeNil()
		} else {
			yym4679 := z.EncBinary()
			_ = yym4679
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4677))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4680 := *v
	yyl4680 := r.ReadMapStart()
	yybh4680 := z.DecBasicHandle()
	if yyv4680 == nil {
		yyrl4680, _ := z.DecInferLen(yyl4680, yybh4680.MaxInitLen, 40)
		yyv4680 = make(map[string][]uint8, yyrl4680)
		*v = yyv4680
	}
	var yymk4680 string
	var yymv4680 []uint8
	var yymg4680 bool
	if yybh4680.MapValueReset {
		yymg4680 = true
	}
	if yyl4680 > 0 {
		for yyj4680 := 0; yyj4680 < yyl4680; yyj4680++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4680 = ""
			} else {
				yymk4680 = string(r.DecodeString())
			}

			if yymg4680 {
				yymv4680 = yyv4680[yymk4680]
			} else {
				yymv4680 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4680 = nil
			} else {
				yyv4682 := &yymv4680
				yym4683 := z.DecBinary()
				_ = yym4683
				if false {
				} else {
					*yyv4682 = r.DecodeBytes(*(*[]byte)(yyv4682), false, false)
				}
			}

			if yyv4680 != nil {
				yyv4680[yymk4680] = yymv4680
			}
		}
	} else if yyl4680 < 0 {
		for yyj4680 := 0; !r.CheckBreak(); yyj4680++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4680 = ""
			} else {
				yymk4680 = string(r.DecodeString())
			}

			if yymg4680 {
				yymv4680 = yyv4680[yymk4680]
			} else {
				yymv4680 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4680 = nil
			} else {
				yyv4685 := &yymv4680
				yym4686 := z.DecBinary()
				_ = yym4686
				if false {
				} else {
					*yyv4685 = r.DecodeBytes(*(*[]byte)(yyv4685), false, false)
				}
			}

			if yyv4680 != nil {
				yyv4680[yymk4680] = yymv4680
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4687 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4688 := &yyv4687
		yy4688.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4689 := *v
	yyh4689, yyl4689 := z.DecSliceHelperStart()
	var yyc4689 bool
	if yyl4689 == 0 {
		if yyv4689 == nil {
			yyv4689 = []Secret{}
			yyc4689 = true
		} else if len(yyv4689) != 0 {
			yyv4689 = yyv4689[:0]
			yyc4689 = true
		}
	} else if yyl4689 > 0 {
		var yyrr4689, yyrl4689 int
		var yyrt4689 bool
		if yyl4689 > cap(yyv4689) {

			yyrg4689 := len(yyv4689) > 0
			yyv24689 := yyv4689
			yyrl4689, yyrt4689 = z.DecInferLen(yyl4689, z.DecBasicHandle().MaxInitLen, 272)
			if yyrt4689 {
				if yyrl4689 <= cap(yyv4689) {
					yyv4689 = yyv4689[:yyrl4689]
				} else {
					yyv4689 = make([]Secret, yyrl4689)
				}
			} else {
				yyv4689 = make([]Secret, yyrl4689)
			}
			yyc4689 = true
			yyrr4689 = len(yyv4689)
			if yyrg4689 {
				copy(yyv4689, yyv24689)
			}
		} else if yyl4689 != len(yyv4689) {
			yyv4689 = yyv4689[:yyl4689]
			yyc4689 = true
		}
		yyj4689 := 0
		for ; yyj4689 < yyrr4689; yyj4689++ {
			yyh4689.ElemContainerState(yyj4689)
			if r.TryDecodeAsNil() {
				yyv4689[yyj4689] = Secret{}
			} else {
				yyv4690 := &yyv4689[yyj4689]
				yyv4690.CodecDecodeSelf(d)
			}

		}
		if yyrt4689 {
			for ; yyj4689 < yyl4689; yyj4689++ {
				yyv4689 = append(yyv4689, Secret{})
				yyh4689.ElemContainerState(yyj4689)
				if r.TryDecodeAsNil() {
					yyv4689[yyj4689] = Secret{}
				} else {
					yyv4691 := &yyv4689[yyj4689]
					yyv4691.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4689 := 0
		for ; !r.CheckBreak(); yyj4689++ {

			if yyj4689 >= len(yyv4689) {
				yyv4689 = append(yyv4689, Secret{}) // var yyz4689 Secret
				yyc4689 = true
			}
			yyh4689.ElemContainerState(yyj4689)
			if yyj4689 < len(yyv4689) {
				if r.TryDecodeAsNil() {
					yyv4689[yyj4689] = Secret{}
				} else {
					yyv4692 := &yyv4689[yyj4689]
					yyv4692.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4689 < len(yyv4689) {
			yyv4689 = yyv4689[:yyj4689]
			yyc4689 = true
		} else if yyj4689 == 0 && yyv4689 == nil {
			yyv4689 = []Secret{}
			yyc4689 = true
		}
	}
	yyh4689.End()
	if yyc4689 {
		*v = yyv4689
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4693 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4694 := &yyv4693
		yy4694.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4695 := *v
	yyh4695, yyl4695 := z.DecSliceHelperStart()
	var yyc4695 bool
	if yyl4695 == 0 {
		if yyv4695 == nil {
			yyv4695 = []ConfigMap{}
			yyc4695 = true
		} else if len(yyv4695) != 0 {
			yyv4695 = yyv4695[:0]
			yyc4695 = true
		}
	} else if yyl4695 > 0 {
		var yyrr4695, yyrl4695 int
		var yyrt4695 bool
		if yyl4695 > cap(yyv4695) {

			yyrg4695 := len(yyv4695) > 0
			yyv24695 := yyv4695
			yyrl4695, yyrt4695 = z.DecInferLen(yyl4695, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt4695 {
				if yyrl4695 <= cap(yyv4695) {
					yyv4695 = yyv4695[:yyrl4695]
				} else {
					yyv4695 = make([]ConfigMap, yyrl4695)
				}
			} else {
				yyv4695 = make([]ConfigMap, yyrl4695)
			}
			yyc4695 = true
			yyrr4695 = len(yyv4695)
			if yyrg4695 {
				copy(yyv4695, yyv24695)
			}
		} else if yyl4695 != len(yyv4695) {
			yyv4695 = yyv4695[:yyl4695]
			yyc4695 = true
		}
		yyj4695 := 0
		for ; yyj4695 < yyrr4695; yyj4695++ {
			yyh4695.ElemContainerState(yyj4695)
			if r.TryDecodeAsNil() {
				yyv4695[yyj4695] = ConfigMap{}
			} else {
				yyv4696 := &yyv4695[yyj4695]
				yyv4696.CodecDecodeSelf(d)
			}

		}
		if yyrt4695 {
			for ; yyj4695 < yyl4695; yyj4695++ {
				yyv4695 = append(yyv4695, ConfigMap{})
				yyh4695.ElemContainerState(yyj4695)
				if r.TryDecodeAsNil() {
					yyv4695[yyj4695] = ConfigMap{}
				} else {
					yyv4697 := &yyv4695[yyj4695]
					yyv4697.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4695 := 0
		for ; !r.CheckBreak(); yyj4695++ {

			if yyj4695 >= len(yyv4695) {
				yyv4695 = append(yyv4695, ConfigMap{}) // var yyz4695 ConfigMap
				yyc4695 = true
			}
			yyh4695.ElemContainerState(yyj4695)
			if yyj4695 < len(yyv4695) {
				if r.TryDecodeAsNil() {
					yyv4695[yyj4695] = ConfigMap{}
				} else {
					yyv4698 := &yyv4695[yyj4695]
					yyv4698.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4695 < len(yyv4695) {
			yyv4695 = yyv4695[:yyj4695]
			yyc4695 = true
		} else if yyj4695 == 0 && yyv4695 == nil {
			yyv4695 = []ConfigMap{}
			yyc4695 = true
		}
	}
	yyh4695.End()
	if yyc4695 {
		*v = yyv4695
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4699 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4700 := &yyv4699
		yy4700.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4701 := *v
	yyh4701, yyl4701 := z.DecSliceHelperStart()
	var yyc4701 bool
	if yyl4701 == 0 {
		if yyv4701 == nil {
			yyv4701 = []ComponentCondition{}
			yyc4701 = true
		} else if len(yyv4701) != 0 {
			yyv4701 = yyv4701[:0]
			yyc4701 = true
		}
	} else if yyl4701 > 0 {
		var yyrr4701, yyrl4701 int
		var yyrt4701 bool
		if yyl4701 > cap(yyv4701) {

			yyrg4701 := len(yyv4701) > 0
			yyv24701 := yyv4701
			yyrl4701, yyrt4701 = z.DecInferLen(yyl4701, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4701 {
				if yyrl4701 <= cap(yyv4701) {
					yyv4701 = yyv4701[:yyrl4701]
				} else {
					yyv4701 = make([]ComponentCondition, yyrl4701)
				}
			} else {
				yyv4701 = make([]ComponentCondition, yyrl4701)
			}
			yyc4701 = true
			yyrr4701 = len(yyv4701)
			if yyrg4701 {
				copy(yyv4701, yyv24701)
			}
		} else if yyl4701 != len(yyv4701) {
			yyv4701 = yyv4701[:yyl4701]
			yyc4701 = true
		}
		yyj4701 := 0
		for ; yyj4701 < yyrr4701; yyj4701++ {
			yyh4701.ElemContainerState(yyj4701)
			if r.TryDecodeAsNil() {
				yyv4701[yyj4701] = ComponentCondition{}
			} else {
				yyv4702 := &yyv4701[yyj4701]
				yyv4702.CodecDecodeSelf(d)
			}

		}
		if yyrt4701 {
			for ; yyj4701 < yyl4701; yyj4701++ {
				yyv4701 = append(yyv4701, ComponentCondition{})
				yyh4701.ElemContainerState(yyj4701)
				if r.TryDecodeAsNil() {
					yyv4701[yyj4701] = ComponentCondition{}
				} else {
					yyv4703 := &yyv4701[yyj4701]
					yyv4703.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4701 := 0
		for ; !r.CheckBreak(); yyj4701++ {

			if yyj4701 >= len(yyv4701) {
				yyv4701 = append(yyv4701, ComponentCondition{}) // var yyz4701 ComponentCondition
				yyc4701 = true
			}
			yyh4701.ElemContainerState(yyj4701)
			if yyj4701 < len(yyv4701) {
				if r.TryDecodeAsNil() {
					yyv4701[yyj4701] = ComponentCondition{}
				} else {
					yyv4704 := &yyv4701[yyj4701]
					yyv4704.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4701 < len(yyv4701) {
			yyv4701 = yyv4701[:yyj4701]
			yyc4701 = true
		} else if yyj4701 == 0 && yyv4701 == nil {
			yyv4701 = []ComponentCondition{}
			yyc4701 = true
		}
	}
	yyh4701.End()
	if yyc4701 {
		*v = yyv4701
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4705 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4706 := &yyv4705
		yy4706.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4707 := *v
	yyh4707, yyl4707 := z.DecSliceHelperStart()
	var yyc4707 bool
	if yyl4707 == 0 {
		if yyv4707 == nil {
			yyv4707 = []ComponentStatus{}
			yyc4707 = true
		} else if len(yyv4707) != 0 {
			yyv4707 = yyv4707[:0]
			yyc4707 = true
		}
	} else if yyl4707 > 0 {
		var yyrr4707, yyrl4707 int
		var yyrt4707 bool
		if yyl4707 > cap(yyv4707) {

			yyrg4707 := len(yyv4707) > 0
			yyv24707 := yyv4707
			yyrl4707, yyrt4707 = z.DecInferLen(yyl4707, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4707 {
				if yyrl4707 <= cap(yyv4707) {
					yyv4707 = yyv4707[:yyrl4707]
				} else {
					yyv4707 = make([]ComponentStatus, yyrl4707)
				}
			} else {
				yyv4707 = make([]ComponentStatus, yyrl4707)
			}
			yyc4707 = true
			yyrr4707 = len(yyv4707)
			if yyrg4707 {
				copy(yyv4707, yyv24707)
			}
		} else if yyl4707 != len(yyv4707) {
			yyv4707 = yyv4707[:yyl4707]
			yyc4707 = true
		}
		yyj4707 := 0
		for ; yyj4707 < yyrr4707; yyj4707++ {
			yyh4707.ElemContainerState(yyj4707)
			if r.TryDecodeAsNil() {
				yyv4707[yyj4707] = ComponentStatus{}
			} else {
				yyv4708 := &yyv4707[yyj4707]
				yyv4708.CodecDecodeSelf(d)
			}

		}
		if yyrt4707 {
			for ; yyj4707 < yyl4707; yyj4707++ {
				yyv4707 = append(yyv4707, ComponentStatus{})
				yyh4707.ElemContainerState(yyj4707)
				if r.TryDecodeAsNil() {
					yyv4707[yyj4707] = ComponentStatus{}
				} else {
					yyv4709 := &yyv4707[yyj4707]
					yyv4709.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4707 := 0
		for ; !r.CheckBreak(); yyj4707++ {

			if yyj4707 >= len(yyv4707) {
				yyv4707 = append(yyv4707, ComponentStatus{}) // var yyz4707 ComponentStatus
				yyc4707 = true
			}
			yyh4707.ElemContainerState(yyj4707)
			if yyj4707 < len(yyv4707) {
				if r.TryDecodeAsNil() {
					yyv4707[yyj4707] = ComponentStatus{}
				} else {
					yyv4710 := &yyv4707[yyj4707]
					yyv4710.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4707 < len(yyv4707) {
			yyv4707 = yyv4707[:yyj4707]
			yyc4707 = true
		} else if yyj4707 == 0 && yyv4707 == nil {
			yyv4707 = []ComponentStatus{}
			yyc4707 = true
		}
	}
	yyh4707.End()
	if yyc4707 {
		*v = yyv4707
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4711 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4712 := &yyv4711
		yy4712.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4713 := *v
	yyh4713, yyl4713 := z.DecSliceHelperStart()
	var yyc4713 bool
	if yyl4713 == 0 {
		if yyv4713 == nil {
			yyv4713 = []DownwardAPIVolumeFile{}
			yyc4713 = true
		} else if len(yyv4713) != 0 {
			yyv4713 = yyv4713[:0]
			yyc4713 = true
		}
	} else if yyl4713 > 0 {
		var yyrr4713, yyrl4713 int
		var yyrt4713 bool
		if yyl4713 > cap(yyv4713) {

			yyrg4713 := len(yyv4713) > 0
			yyv24713 := yyv4713
			yyrl4713, yyrt4713 = z.DecInferLen(yyl4713, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4713 {
				if yyrl4713 <= cap(yyv4713) {
					yyv4713 = yyv4713[:yyrl4713]
				} else {
					yyv4713 = make([]DownwardAPIVolumeFile, yyrl4713)
				}
			} else {
				yyv4713 = make([]DownwardAPIVolumeFile, yyrl4713)
			}
			yyc4713 = true
			yyrr4713 = len(yyv4713)
			if yyrg4713 {
				copy(yyv4713, yyv24713)
			}
		} else if yyl4713 != len(yyv4713) {
			yyv4713 = yyv4713[:yyl4713]
			yyc4713 = true
		}
		yyj4713 := 0
		for ; yyj4713 < yyrr4713; yyj4713++ {
			yyh4713.ElemContainerState(yyj4713)
			if r.TryDecodeAsNil() {
				yyv4713[yyj4713] = DownwardAPIVolumeFile{}
			} else {
				yyv4714 := &yyv4713[yyj4713]
				yyv4714.CodecDecodeSelf(d)
			}

		}
		if yyrt4713 {
			for ; yyj4713 < yyl4713; yyj4713++ {
				yyv4713 = append(yyv4713, DownwardAPIVolumeFile{})
				yyh4713.ElemContainerState(yyj4713)
				if r.TryDecodeAsNil() {
					yyv4713[yyj4713] = DownwardAPIVolumeFile{}
				} else {
					yyv4715 := &yyv4713[yyj4713]
					yyv4715.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4713 := 0
		for ; !r.CheckBreak(); yyj4713++ {

			if yyj4713 >= len(yyv4713) {
				yyv4713 = append(yyv4713, DownwardAPIVolumeFile{}) // var yyz4713 DownwardAPIVolumeFile
				yyc4713 = true
			}
			yyh4713.ElemContainerState(yyj4713)
			if yyj4713 < len(yyv4713) {
				if r.TryDecodeAsNil() {
					yyv4713[yyj4713] = DownwardAPIVolumeFile{}
				} else {
					yyv4716 := &yyv4713[yyj4713]
					yyv4716.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4713 < len(yyv4713) {
			yyv4713 = yyv4713[:yyj4713]
			yyc4713 = true
		} else if yyj4713 == 0 && yyv4713 == nil {
			yyv4713 = []DownwardAPIVolumeFile{}
			yyc4713 = true
		}
	}
	yyh4713.End()
	if yyc4713 {
		*v = yyv4713
	}
}
