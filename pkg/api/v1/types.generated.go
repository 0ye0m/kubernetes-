/*
Copyright 2014 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg2_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelverValueTypeArray1234 = 10
	codecSelverValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 2 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			2, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_types.UID
		var v1 pkg2_util.Time
		var v2 time.Time
		var v3 pkg3_resource.Quantity
		var v4 pkg4_inf.Dec
		var v5 pkg5_runtime.RawExtension
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *TypeMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyfirst2 bool
			var yyq2 [2]bool
			_, _, _, _ = yysep2, yyfirst2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					yyfirst2 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2 {
						r.EncodeMapKVSeparator()
					}
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yysep2 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					if yyfirst2 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2 {
						r.EncodeMapKVSeparator()
					}
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yysep2 {
				if yyr2 || yy2arr2 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *TypeMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym9 := z.DecBinary()
	_ = yym9
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl10 := r.ReadMapStart()
			if yyl10 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl10, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl10 := r.ReadArrayStart()
			if yyl10 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl10, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TypeMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys11Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys11Slc
	var yyhl11 bool = l >= 0
	for yyj11 := 0; ; yyj11++ {
		if yyhl11 {
			if yyj11 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj11 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys11Slc = r.DecodeBytes(yys11Slc, true, true)
		yys11 := string(yys11Slc)
		if !yyhl11 {
			r.ReadMapKVSeparator()
		}
		switch yys11 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys11)
		} // end switch yys11
	} // end for yyj11
	if !yyhl11 {
		r.ReadMapEnd()
	}
}

func (x *TypeMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		if yyj14 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ListMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym17 := z.EncBinary()
		_ = yym17
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep18 := !z.EncBinary()
			yy2arr18 := z.EncBasicHandle().StructToArray
			var yyfirst18 bool
			var yyq18 [2]bool
			_, _, _, _ = yysep18, yyfirst18, yyq18, yy2arr18
			const yyr18 bool = false
			yyq18[0] = x.SelfLink != ""
			yyq18[1] = x.ResourceVersion != ""
			if yyr18 || yy2arr18 {
				r.EncodeArrayStart(2)
			} else {
				var yynn18 int = 0
				for _, b := range yyq18 {
					if b {
						yynn18++
					}
				}
				r.EncodeMapStart(yynn18)
			}
			if yyr18 || yy2arr18 {
				if yyq18[0] {
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq18[0] {
					yyfirst18 = true
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					if yysep18 {
						r.EncodeMapKVSeparator()
					}
					yym21 := z.EncBinary()
					_ = yym21
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr18 || yy2arr18 {
				if yysep18 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq18[1] {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq18[1] {
					if yyfirst18 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst18 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					if yysep18 {
						r.EncodeMapKVSeparator()
					}
					yym24 := z.EncBinary()
					_ = yym24
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yysep18 {
				if yyr18 || yy2arr18 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ListMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym25 := z.DecBinary()
	_ = yym25
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl26 := r.ReadMapStart()
			if yyl26 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl26, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl26 := r.ReadArrayStart()
			if yyl26 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl26, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys27Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys27Slc
	var yyhl27 bool = l >= 0
	for yyj27 := 0; ; yyj27++ {
		if yyhl27 {
			if yyj27 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj27 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys27Slc = r.DecodeBytes(yys27Slc, true, true)
		yys27 := string(yys27Slc)
		if !yyhl27 {
			r.ReadMapKVSeparator()
		}
		switch yys27 {
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys27)
		} // end switch yys27
	} // end for yyj27
	if !yyhl27 {
		r.ReadMapEnd()
	}
}

func (x *ListMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = r.CheckBreak()
		}
		if yyb30 {
			break
		}
		if yyj30 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj30-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym33 := z.EncBinary()
		_ = yym33
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep34 := !z.EncBinary()
			yy2arr34 := z.EncBasicHandle().StructToArray
			var yyfirst34 bool
			var yyq34 [12]bool
			_, _, _, _ = yysep34, yyfirst34, yyq34, yy2arr34
			const yyr34 bool = false
			yyq34[0] = x.Name != ""
			yyq34[1] = x.GenerateName != ""
			yyq34[2] = x.Namespace != ""
			yyq34[3] = x.SelfLink != ""
			yyq34[4] = x.UID != ""
			yyq34[5] = x.ResourceVersion != ""
			yyq34[6] = x.Generation != 0
			yyq34[7] = true
			yyq34[8] = x.DeletionTimestamp != nil
			yyq34[9] = x.DeletionGracePeriodSeconds != nil
			yyq34[10] = len(x.Labels) != 0
			yyq34[11] = len(x.Annotations) != 0
			if yyr34 || yy2arr34 {
				r.EncodeArrayStart(12)
			} else {
				var yynn34 int = 0
				for _, b := range yyq34 {
					if b {
						yynn34++
					}
				}
				r.EncodeMapStart(yynn34)
			}
			if yyr34 || yy2arr34 {
				if yyq34[0] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq34[0] {
					yyfirst34 = true
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[1] {
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq34[1] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[2] {
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq34[2] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yym43 := z.EncBinary()
					_ = yym43
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[3] {
					yym45 := z.EncBinary()
					_ = yym45
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq34[3] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[4] {
					yym48 := z.EncBinary()
					_ = yym48
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq34[4] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yym49 := z.EncBinary()
					_ = yym49
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[5] {
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq34[5] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yym52 := z.EncBinary()
					_ = yym52
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[6] {
					yym54 := z.EncBinary()
					_ = yym54
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq34[6] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yym55 := z.EncBinary()
					_ = yym55
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[7] {
					yy57 := &x.CreationTimestamp
					yym58 := z.EncBinary()
					_ = yym58
					if false {
					} else if z.HasExtensions() && z.EncExt(yy57) {
					} else if yym58 {
						z.EncBinaryMarshal(yy57)
					} else if !yym58 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy57)
					} else {
						z.EncFallback(yy57)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq34[7] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yy59 := &x.CreationTimestamp
					yym60 := z.EncBinary()
					_ = yym60
					if false {
					} else if z.HasExtensions() && z.EncExt(yy59) {
					} else if yym60 {
						z.EncBinaryMarshal(yy59)
					} else if !yym60 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy59)
					} else {
						z.EncFallback(yy59)
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym62 := z.EncBinary()
						_ = yym62
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym62 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym62 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq34[8] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym63 := z.EncBinary()
						_ = yym63
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym63 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym63 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy65 := *x.DeletionGracePeriodSeconds
						yym66 := z.EncBinary()
						_ = yym66
						if false {
						} else {
							r.EncodeInt(int64(yy65))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq34[9] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy67 := *x.DeletionGracePeriodSeconds
						yym68 := z.EncBinary()
						_ = yym68
						if false {
						} else {
							r.EncodeInt(int64(yy67))
						}
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym70 := z.EncBinary()
						_ = yym70
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq34[10] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym71 := z.EncBinary()
						_ = yym71
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym73 := z.EncBinary()
						_ = yym73
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq34[11] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym74 := z.EncBinary()
						_ = yym74
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep34 {
				if yyr34 || yy2arr34 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym75 := z.DecBinary()
	_ = yym75
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl76 := r.ReadMapStart()
			if yyl76 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl76, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl76 := r.ReadArrayStart()
			if yyl76 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl76, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys77Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys77Slc
	var yyhl77 bool = l >= 0
	for yyj77 := 0; ; yyj77++ {
		if yyhl77 {
			if yyj77 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj77 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys77Slc = r.DecodeBytes(yys77Slc, true, true)
		yys77 := string(yys77Slc)
		if !yyhl77 {
			r.ReadMapKVSeparator()
		}
		switch yys77 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_util.Time{}
			} else {
				yyv85 := &x.CreationTimestamp
				yym86 := z.DecBinary()
				_ = yym86
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv85) {
				} else if yym86 {
					z.DecBinaryUnmarshal(yyv85)
				} else if !yym86 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv85)
				} else {
					z.DecFallback(yyv85, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_util.Time)
				}
				yym88 := z.DecBinary()
				_ = yym88
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym88 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym88 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym90 := z.DecBinary()
				_ = yym90
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv91 := &x.Labels
				yym92 := z.DecBinary()
				_ = yym92
				if false {
				} else {
					z.F.DecMapStringStringX(yyv91, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv93 := &x.Annotations
				yym94 := z.DecBinary()
				_ = yym94
				if false {
				} else {
					z.F.DecMapStringStringX(yyv93, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys77)
		} // end switch yys77
	} // end for yyj77
	if !yyhl77 {
		r.ReadMapEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj95 int
	var yyb95 bool
	var yyhl95 bool = l >= 0
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_util.Time{}
	} else {
		yyv103 := &x.CreationTimestamp
		yym104 := z.DecBinary()
		_ = yym104
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv103) {
		} else if yym104 {
			z.DecBinaryUnmarshal(yyv103)
		} else if !yym104 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv103)
		} else {
			z.DecFallback(yyv103, false)
		}
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_util.Time)
		}
		yym106 := z.DecBinary()
		_ = yym106
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym106 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym106 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym108 := z.DecBinary()
		_ = yym108
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv109 := &x.Labels
		yym110 := z.DecBinary()
		_ = yym110
		if false {
		} else {
			z.F.DecMapStringStringX(yyv109, false, d)
		}
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv111 := &x.Annotations
		yym112 := z.DecBinary()
		_ = yym112
		if false {
		} else {
			z.F.DecMapStringStringX(yyv111, false, d)
		}
	}
	for {
		yyj95++
		if yyhl95 {
			yyb95 = yyj95 > l
		} else {
			yyb95 = r.CheckBreak()
		}
		if yyb95 {
			break
		}
		if yyj95 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj95-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym113 := z.EncBinary()
		_ = yym113
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep114 := !z.EncBinary()
			yy2arr114 := z.EncBasicHandle().StructToArray
			var yyfirst114 bool
			var yyq114 [15]bool
			_, _, _, _ = yysep114, yyfirst114, yyq114, yy2arr114
			const yyr114 bool = false
			yyq114[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq114[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq114[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq114[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq114[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq114[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq114[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq114[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq114[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq114[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq114[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq114[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq114[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq114[14] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			if yyr114 || yy2arr114 {
				r.EncodeArrayStart(15)
			} else {
				var yynn114 int = 1
				for _, b := range yyq114 {
					if b {
						yynn114++
					}
				}
				r.EncodeMapStart(yynn114)
			}
			if yyr114 || yy2arr114 {
				yym116 := z.EncBinary()
				_ = yym116
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst114 = true
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				if yysep114 {
					r.EncodeMapKVSeparator()
				}
				yym117 := z.EncBinary()
				_ = yym117
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn118 bool
			if x.VolumeSource.HostPath == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn118 {
					r.EncodeNil()
				} else {
					if yyq114[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[1] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn119 {
					r.EncodeNil()
				} else {
					if yyq114[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[2] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn120 {
					r.EncodeNil()
				} else {
					if yyq114[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[3] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn121 {
					r.EncodeNil()
				} else {
					if yyq114[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[4] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.GitRepo == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn122 {
					r.EncodeNil()
				} else {
					if yyq114[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[5] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.Secret == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn123 {
					r.EncodeNil()
				} else {
					if yyq114[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[6] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.NFS == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn124 {
					r.EncodeNil()
				} else {
					if yyq114[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[7] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.ISCSI == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn125 {
					r.EncodeNil()
				} else {
					if yyq114[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[8] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn126 {
					r.EncodeNil()
				} else {
					if yyq114[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[9] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn127 {
					r.EncodeNil()
				} else {
					if yyq114[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[10] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn128 bool
			if x.VolumeSource.RBD == nil {
				yyn128 = true
				goto LABEL128
			}
		LABEL128:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn128 {
					r.EncodeNil()
				} else {
					if yyq114[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[11] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn128 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn129 bool
			if x.VolumeSource.Cinder == nil {
				yyn129 = true
				goto LABEL129
			}
		LABEL129:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn129 {
					r.EncodeNil()
				} else {
					if yyq114[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[12] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn129 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn130 bool
			if x.VolumeSource.CephFS == nil {
				yyn130 = true
				goto LABEL130
			}
		LABEL130:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn130 {
					r.EncodeNil()
				} else {
					if yyq114[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[13] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn130 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn131 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn131 = true
				goto LABEL131
			}
		LABEL131:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn131 {
					r.EncodeNil()
				} else {
					if yyq114[14] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[14] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn131 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep114 {
				if yyr114 || yy2arr114 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym132 := z.DecBinary()
	_ = yym132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl133 := r.ReadMapStart()
			if yyl133 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl133, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl133 := r.ReadArrayStart()
			if yyl133 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl133, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys134Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys134Slc
	var yyhl134 bool = l >= 0
	for yyj134 := 0; ; yyj134++ {
		if yyhl134 {
			if yyj134 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj134 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys134Slc = r.DecodeBytes(yys134Slc, true, true)
		yys134 := string(yys134Slc)
		if !yyhl134 {
			r.ReadMapKVSeparator()
		}
		switch yys134 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys134)
		} // end switch yys134
	} // end for yyj134
	if !yyhl134 {
		r.ReadMapEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj150 int
	var yyb150 bool
	var yyhl150 bool = l >= 0
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	for {
		yyj150++
		if yyhl150 {
			yyb150 = yyj150 > l
		} else {
			yyb150 = r.CheckBreak()
		}
		if yyb150 {
			break
		}
		if yyj150 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj150-1, "")
	}
	r.ReadArrayEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym166 := z.EncBinary()
		_ = yym166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep167 := !z.EncBinary()
			yy2arr167 := z.EncBasicHandle().StructToArray
			var yyfirst167 bool
			var yyq167 [14]bool
			_, _, _, _ = yysep167, yyfirst167, yyq167, yy2arr167
			const yyr167 bool = false
			yyq167[0] = x.HostPath != nil
			yyq167[1] = x.EmptyDir != nil
			yyq167[2] = x.GCEPersistentDisk != nil
			yyq167[3] = x.AWSElasticBlockStore != nil
			yyq167[4] = x.GitRepo != nil
			yyq167[5] = x.Secret != nil
			yyq167[6] = x.NFS != nil
			yyq167[7] = x.ISCSI != nil
			yyq167[8] = x.Glusterfs != nil
			yyq167[9] = x.PersistentVolumeClaim != nil
			yyq167[10] = x.RBD != nil
			yyq167[11] = x.Cinder != nil
			yyq167[12] = x.CephFS != nil
			yyq167[13] = x.DownwardAPI != nil
			if yyr167 || yy2arr167 {
				r.EncodeArrayStart(14)
			} else {
				var yynn167 int = 0
				for _, b := range yyq167 {
					if b {
						yynn167++
					}
				}
				r.EncodeMapStart(yynn167)
			}
			if yyr167 || yy2arr167 {
				if yyq167[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[0] {
					yyfirst167 = true
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[1] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[2] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[3] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[4] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[5] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[6] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[7] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[8] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[9] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[10] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[11] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[12] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[13] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[13] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yysep167 {
				if yyr167 || yy2arr167 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym182 := z.DecBinary()
	_ = yym182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl183 := r.ReadMapStart()
			if yyl183 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl183, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl183 := r.ReadArrayStart()
			if yyl183 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl183, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys184Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys184Slc
	var yyhl184 bool = l >= 0
	for yyj184 := 0; ; yyj184++ {
		if yyhl184 {
			if yyj184 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj184 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys184Slc = r.DecodeBytes(yys184Slc, true, true)
		yys184 := string(yys184Slc)
		if !yyhl184 {
			r.ReadMapKVSeparator()
		}
		switch yys184 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys184)
		} // end switch yys184
	} // end for yyj184
	if !yyhl184 {
		r.ReadMapEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj199 int
	var yyb199 bool
	var yyhl199 bool = l >= 0
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	for {
		yyj199++
		if yyhl199 {
			yyb199 = yyj199 > l
		} else {
			yyb199 = r.CheckBreak()
		}
		if yyb199 {
			break
		}
		if yyj199 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj199-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym214 := z.EncBinary()
		_ = yym214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep215 := !z.EncBinary()
			yy2arr215 := z.EncBasicHandle().StructToArray
			var yyfirst215 bool
			var yyq215 [2]bool
			_, _, _, _ = yysep215, yyfirst215, yyq215, yy2arr215
			const yyr215 bool = false
			yyq215[1] = x.ReadOnly != false
			if yyr215 || yy2arr215 {
				r.EncodeArrayStart(2)
			} else {
				var yynn215 int = 1
				for _, b := range yyq215 {
					if b {
						yynn215++
					}
				}
				r.EncodeMapStart(yynn215)
			}
			if yyr215 || yy2arr215 {
				yym217 := z.EncBinary()
				_ = yym217
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				yyfirst215 = true
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				if yysep215 {
					r.EncodeMapKVSeparator()
				}
				yym218 := z.EncBinary()
				_ = yym218
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr215 || yy2arr215 {
				if yysep215 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq215[1] {
					yym220 := z.EncBinary()
					_ = yym220
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq215[1] {
					if yyfirst215 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst215 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep215 {
						r.EncodeMapKVSeparator()
					}
					yym221 := z.EncBinary()
					_ = yym221
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep215 {
				if yyr215 || yy2arr215 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym222 := z.DecBinary()
	_ = yym222
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl223 := r.ReadMapStart()
			if yyl223 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl223, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl223 := r.ReadArrayStart()
			if yyl223 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl223, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys224Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys224Slc
	var yyhl224 bool = l >= 0
	for yyj224 := 0; ; yyj224++ {
		if yyhl224 {
			if yyj224 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj224 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys224Slc = r.DecodeBytes(yys224Slc, true, true)
		yys224 := string(yys224Slc)
		if !yyhl224 {
			r.ReadMapKVSeparator()
		}
		switch yys224 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys224)
		} // end switch yys224
	} // end for yyj224
	if !yyhl224 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj227 int
	var yyb227 bool
	var yyhl227 bool = l >= 0
	yyj227++
	if yyhl227 {
		yyb227 = yyj227 > l
	} else {
		yyb227 = r.CheckBreak()
	}
	if yyb227 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj227++
	if yyhl227 {
		yyb227 = yyj227 > l
	} else {
		yyb227 = r.CheckBreak()
	}
	if yyb227 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj227++
		if yyhl227 {
			yyb227 = yyj227 > l
		} else {
			yyb227 = r.CheckBreak()
		}
		if yyb227 {
			break
		}
		if yyj227 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj227-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym230 := z.EncBinary()
		_ = yym230
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep231 := !z.EncBinary()
			yy2arr231 := z.EncBasicHandle().StructToArray
			var yyfirst231 bool
			var yyq231 [9]bool
			_, _, _, _ = yysep231, yyfirst231, yyq231, yy2arr231
			const yyr231 bool = false
			yyq231[0] = x.GCEPersistentDisk != nil
			yyq231[1] = x.AWSElasticBlockStore != nil
			yyq231[2] = x.HostPath != nil
			yyq231[3] = x.Glusterfs != nil
			yyq231[4] = x.NFS != nil
			yyq231[5] = x.RBD != nil
			yyq231[6] = x.ISCSI != nil
			yyq231[7] = x.Cinder != nil
			yyq231[8] = x.CephFS != nil
			if yyr231 || yy2arr231 {
				r.EncodeArrayStart(9)
			} else {
				var yynn231 int = 0
				for _, b := range yyq231 {
					if b {
						yynn231++
					}
				}
				r.EncodeMapStart(yynn231)
			}
			if yyr231 || yy2arr231 {
				if yyq231[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq231[0] {
					yyfirst231 = true
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yysep231 {
						r.EncodeMapKVSeparator()
					}
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr231 || yy2arr231 {
				if yysep231 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq231[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq231[1] {
					if yyfirst231 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst231 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yysep231 {
						r.EncodeMapKVSeparator()
					}
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr231 || yy2arr231 {
				if yysep231 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq231[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq231[2] {
					if yyfirst231 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst231 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yysep231 {
						r.EncodeMapKVSeparator()
					}
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr231 || yy2arr231 {
				if yysep231 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq231[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq231[3] {
					if yyfirst231 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst231 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yysep231 {
						r.EncodeMapKVSeparator()
					}
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr231 || yy2arr231 {
				if yysep231 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq231[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq231[4] {
					if yyfirst231 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst231 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yysep231 {
						r.EncodeMapKVSeparator()
					}
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr231 || yy2arr231 {
				if yysep231 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq231[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq231[5] {
					if yyfirst231 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst231 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yysep231 {
						r.EncodeMapKVSeparator()
					}
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr231 || yy2arr231 {
				if yysep231 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq231[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq231[6] {
					if yyfirst231 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst231 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yysep231 {
						r.EncodeMapKVSeparator()
					}
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr231 || yy2arr231 {
				if yysep231 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq231[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq231[7] {
					if yyfirst231 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst231 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yysep231 {
						r.EncodeMapKVSeparator()
					}
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr231 || yy2arr231 {
				if yysep231 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq231[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq231[8] {
					if yyfirst231 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst231 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yysep231 {
						r.EncodeMapKVSeparator()
					}
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yysep231 {
				if yyr231 || yy2arr231 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym241 := z.DecBinary()
	_ = yym241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl242 := r.ReadMapStart()
			if yyl242 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl242, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl242 := r.ReadArrayStart()
			if yyl242 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys243Slc
	var yyhl243 bool = l >= 0
	for yyj243 := 0; ; yyj243++ {
		if yyhl243 {
			if yyj243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj243 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys243Slc = r.DecodeBytes(yys243Slc, true, true)
		yys243 := string(yys243Slc)
		if !yyhl243 {
			r.ReadMapKVSeparator()
		}
		switch yys243 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys243)
		} // end switch yys243
	} // end for yyj243
	if !yyhl243 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj253 int
	var yyb253 bool
	var yyhl253 bool = l >= 0
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	for {
		yyj253++
		if yyhl253 {
			yyb253 = yyj253 > l
		} else {
			yyb253 = r.CheckBreak()
		}
		if yyb253 {
			break
		}
		if yyj253 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj253-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym263 := z.EncBinary()
		_ = yym263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep264 := !z.EncBinary()
			yy2arr264 := z.EncBasicHandle().StructToArray
			var yyfirst264 bool
			var yyq264 [5]bool
			_, _, _, _ = yysep264, yyfirst264, yyq264, yy2arr264
			const yyr264 bool = false
			yyq264[0] = x.Kind != ""
			yyq264[1] = x.APIVersion != ""
			yyq264[2] = true
			yyq264[3] = true
			yyq264[4] = true
			if yyr264 || yy2arr264 {
				r.EncodeArrayStart(5)
			} else {
				var yynn264 int = 0
				for _, b := range yyq264 {
					if b {
						yynn264++
					}
				}
				r.EncodeMapStart(yynn264)
			}
			if yyr264 || yy2arr264 {
				if yyq264[0] {
					yym266 := z.EncBinary()
					_ = yym266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq264[0] {
					yyfirst264 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep264 {
						r.EncodeMapKVSeparator()
					}
					yym267 := z.EncBinary()
					_ = yym267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr264 || yy2arr264 {
				if yysep264 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq264[1] {
					yym269 := z.EncBinary()
					_ = yym269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq264[1] {
					if yyfirst264 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst264 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep264 {
						r.EncodeMapKVSeparator()
					}
					yym270 := z.EncBinary()
					_ = yym270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr264 || yy2arr264 {
				if yysep264 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq264[2] {
					yy272 := &x.ObjectMeta
					yy272.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq264[2] {
					if yyfirst264 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst264 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep264 {
						r.EncodeMapKVSeparator()
					}
					yy273 := &x.ObjectMeta
					yy273.CodecEncodeSelf(e)
				}
			}
			if yyr264 || yy2arr264 {
				if yysep264 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq264[3] {
					yy275 := &x.Spec
					yy275.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq264[3] {
					if yyfirst264 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst264 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep264 {
						r.EncodeMapKVSeparator()
					}
					yy276 := &x.Spec
					yy276.CodecEncodeSelf(e)
				}
			}
			if yyr264 || yy2arr264 {
				if yysep264 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq264[4] {
					yy278 := &x.Status
					yy278.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq264[4] {
					if yyfirst264 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst264 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep264 {
						r.EncodeMapKVSeparator()
					}
					yy279 := &x.Status
					yy279.CodecEncodeSelf(e)
				}
			}
			if yysep264 {
				if yyr264 || yy2arr264 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym280 := z.DecBinary()
	_ = yym280
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl281 := r.ReadMapStart()
			if yyl281 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl281, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl281 := r.ReadArrayStart()
			if yyl281 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl281, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys282Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys282Slc
	var yyhl282 bool = l >= 0
	for yyj282 := 0; ; yyj282++ {
		if yyhl282 {
			if yyj282 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj282 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys282Slc = r.DecodeBytes(yys282Slc, true, true)
		yys282 := string(yys282Slc)
		if !yyhl282 {
			r.ReadMapKVSeparator()
		}
		switch yys282 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv285 := &x.ObjectMeta
				yyv285.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv286 := &x.Spec
				yyv286.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv287 := &x.Status
				yyv287.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys282)
		} // end switch yys282
	} // end for yyj282
	if !yyhl282 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj288 int
	var yyb288 bool
	var yyhl288 bool = l >= 0
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv291 := &x.ObjectMeta
		yyv291.CodecDecodeSelf(d)
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv292 := &x.Spec
		yyv292.CodecDecodeSelf(d)
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv293 := &x.Status
		yyv293.CodecDecodeSelf(d)
	}
	for {
		yyj288++
		if yyhl288 {
			yyb288 = yyj288 > l
		} else {
			yyb288 = r.CheckBreak()
		}
		if yyb288 {
			break
		}
		if yyj288 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj288-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym294 := z.EncBinary()
		_ = yym294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep295 := !z.EncBinary()
			yy2arr295 := z.EncBasicHandle().StructToArray
			var yyfirst295 bool
			var yyq295 [13]bool
			_, _, _, _ = yysep295, yyfirst295, yyq295, yy2arr295
			const yyr295 bool = false
			yyq295[0] = len(x.Capacity) != 0
			yyq295[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq295[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq295[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq295[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq295[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq295[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq295[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq295[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq295[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq295[10] = len(x.AccessModes) != 0
			yyq295[11] = x.ClaimRef != nil
			yyq295[12] = x.PersistentVolumeReclaimPolicy != ""
			if yyr295 || yy2arr295 {
				r.EncodeArrayStart(13)
			} else {
				var yynn295 int = 0
				for _, b := range yyq295 {
					if b {
						yynn295++
					}
				}
				r.EncodeMapStart(yynn295)
			}
			if yyr295 || yy2arr295 {
				if yyq295[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq295[0] {
					yyfirst295 = true
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn297 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn297 = true
				goto LABEL297
			}
		LABEL297:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn297 {
					r.EncodeNil()
				} else {
					if yyq295[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[1] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn297 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn298 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn298 = true
				goto LABEL298
			}
		LABEL298:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn298 {
					r.EncodeNil()
				} else {
					if yyq295[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[2] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn298 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn299 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn299 = true
				goto LABEL299
			}
		LABEL299:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn299 {
					r.EncodeNil()
				} else {
					if yyq295[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[3] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn299 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn300 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn300 = true
				goto LABEL300
			}
		LABEL300:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn300 {
					r.EncodeNil()
				} else {
					if yyq295[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[4] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn300 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn301 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn301 = true
				goto LABEL301
			}
		LABEL301:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn301 {
					r.EncodeNil()
				} else {
					if yyq295[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[5] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn301 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn302 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn302 = true
				goto LABEL302
			}
		LABEL302:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn302 {
					r.EncodeNil()
				} else {
					if yyq295[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[6] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn302 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn303 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn303 = true
				goto LABEL303
			}
		LABEL303:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn303 {
					r.EncodeNil()
				} else {
					if yyq295[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[7] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn303 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn304 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn304 = true
				goto LABEL304
			}
		LABEL304:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn304 {
					r.EncodeNil()
				} else {
					if yyq295[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[8] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn304 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn305 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn305 = true
				goto LABEL305
			}
		LABEL305:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn305 {
					r.EncodeNil()
				} else {
					if yyq295[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[9] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn305 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq295[10] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym307 := z.EncBinary()
						_ = yym307
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq295[10] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym308 := z.EncBinary()
						_ = yym308
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq295[11] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq295[11] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq295[12] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq295[12] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep295 {
				if yyr295 || yy2arr295 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym311 := z.DecBinary()
	_ = yym311
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl312 := r.ReadMapStart()
			if yyl312 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl312, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl312 := r.ReadArrayStart()
			if yyl312 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl312, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys313Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys313Slc
	var yyhl313 bool = l >= 0
	for yyj313 := 0; ; yyj313++ {
		if yyhl313 {
			if yyj313 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj313 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys313Slc = r.DecodeBytes(yys313Slc, true, true)
		yys313 := string(yys313Slc)
		if !yyhl313 {
			r.ReadMapKVSeparator()
		}
		switch yys313 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv314 := &x.Capacity
				yyv314.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv324 := &x.AccessModes
				yym325 := z.DecBinary()
				_ = yym325
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv324), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys313)
		} // end switch yys313
	} // end for yyj313
	if !yyhl313 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj328 int
	var yyb328 bool
	var yyhl328 bool = l >= 0
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv329 := &x.Capacity
		yyv329.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv339 := &x.AccessModes
		yym340 := z.DecBinary()
		_ = yym340
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv339), d)
		}
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj328++
		if yyhl328 {
			yyb328 = yyj328 > l
		} else {
			yyb328 = r.CheckBreak()
		}
		if yyb328 {
			break
		}
		if yyj328 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj328-1, "")
	}
	r.ReadArrayEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym343 := z.EncBinary()
	_ = yym343
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym344 := z.DecBinary()
	_ = yym344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym345 := z.EncBinary()
		_ = yym345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep346 := !z.EncBinary()
			yy2arr346 := z.EncBasicHandle().StructToArray
			var yyfirst346 bool
			var yyq346 [3]bool
			_, _, _, _ = yysep346, yyfirst346, yyq346, yy2arr346
			const yyr346 bool = false
			yyq346[0] = x.Phase != ""
			yyq346[1] = x.Message != ""
			yyq346[2] = x.Reason != ""
			if yyr346 || yy2arr346 {
				r.EncodeArrayStart(3)
			} else {
				var yynn346 int = 0
				for _, b := range yyq346 {
					if b {
						yynn346++
					}
				}
				r.EncodeMapStart(yynn346)
			}
			if yyr346 || yy2arr346 {
				if yyq346[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq346[0] {
					yyfirst346 = true
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					if yysep346 {
						r.EncodeMapKVSeparator()
					}
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr346 || yy2arr346 {
				if yysep346 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq346[1] {
					yym349 := z.EncBinary()
					_ = yym349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq346[1] {
					if yyfirst346 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst346 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep346 {
						r.EncodeMapKVSeparator()
					}
					yym350 := z.EncBinary()
					_ = yym350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr346 || yy2arr346 {
				if yysep346 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq346[2] {
					yym352 := z.EncBinary()
					_ = yym352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq346[2] {
					if yyfirst346 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst346 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep346 {
						r.EncodeMapKVSeparator()
					}
					yym353 := z.EncBinary()
					_ = yym353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep346 {
				if yyr346 || yy2arr346 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym354 := z.DecBinary()
	_ = yym354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl355 := r.ReadMapStart()
			if yyl355 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl355, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl355 := r.ReadArrayStart()
			if yyl355 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys356Slc
	var yyhl356 bool = l >= 0
	for yyj356 := 0; ; yyj356++ {
		if yyhl356 {
			if yyj356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj356 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys356Slc = r.DecodeBytes(yys356Slc, true, true)
		yys356 := string(yys356Slc)
		if !yyhl356 {
			r.ReadMapKVSeparator()
		}
		switch yys356 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys356)
		} // end switch yys356
	} // end for yyj356
	if !yyhl356 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj360 int
	var yyb360 bool
	var yyhl360 bool = l >= 0
	yyj360++
	if yyhl360 {
		yyb360 = yyj360 > l
	} else {
		yyb360 = r.CheckBreak()
	}
	if yyb360 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj360++
	if yyhl360 {
		yyb360 = yyj360 > l
	} else {
		yyb360 = r.CheckBreak()
	}
	if yyb360 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj360++
	if yyhl360 {
		yyb360 = yyj360 > l
	} else {
		yyb360 = r.CheckBreak()
	}
	if yyb360 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj360++
		if yyhl360 {
			yyb360 = yyj360 > l
		} else {
			yyb360 = r.CheckBreak()
		}
		if yyb360 {
			break
		}
		if yyj360 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj360-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym364 := z.EncBinary()
		_ = yym364
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep365 := !z.EncBinary()
			yy2arr365 := z.EncBasicHandle().StructToArray
			var yyfirst365 bool
			var yyq365 [4]bool
			_, _, _, _ = yysep365, yyfirst365, yyq365, yy2arr365
			const yyr365 bool = false
			yyq365[0] = x.Kind != ""
			yyq365[1] = x.APIVersion != ""
			yyq365[2] = true
			if yyr365 || yy2arr365 {
				r.EncodeArrayStart(4)
			} else {
				var yynn365 int = 1
				for _, b := range yyq365 {
					if b {
						yynn365++
					}
				}
				r.EncodeMapStart(yynn365)
			}
			if yyr365 || yy2arr365 {
				if yyq365[0] {
					yym367 := z.EncBinary()
					_ = yym367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq365[0] {
					yyfirst365 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep365 {
						r.EncodeMapKVSeparator()
					}
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr365 || yy2arr365 {
				if yysep365 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq365[1] {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq365[1] {
					if yyfirst365 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst365 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep365 {
						r.EncodeMapKVSeparator()
					}
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr365 || yy2arr365 {
				if yysep365 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq365[2] {
					yy373 := &x.ListMeta
					yy373.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq365[2] {
					if yyfirst365 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst365 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep365 {
						r.EncodeMapKVSeparator()
					}
					yy374 := &x.ListMeta
					yy374.CodecEncodeSelf(e)
				}
			}
			if yyr365 || yy2arr365 {
				if yysep365 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym376 := z.EncBinary()
					_ = yym376
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				if yyfirst365 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst365 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep365 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym377 := z.EncBinary()
					_ = yym377
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep365 {
				if yyr365 || yy2arr365 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym378 := z.DecBinary()
	_ = yym378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl379 := r.ReadMapStart()
			if yyl379 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl379, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl379 := r.ReadArrayStart()
			if yyl379 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys380Slc
	var yyhl380 bool = l >= 0
	for yyj380 := 0; ; yyj380++ {
		if yyhl380 {
			if yyj380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj380 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys380Slc = r.DecodeBytes(yys380Slc, true, true)
		yys380 := string(yys380Slc)
		if !yyhl380 {
			r.ReadMapKVSeparator()
		}
		switch yys380 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv383 := &x.ListMeta
				yyv383.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv384 := &x.Items
				yym385 := z.DecBinary()
				_ = yym385
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv384), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys380)
		} // end switch yys380
	} // end for yyj380
	if !yyhl380 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj386 int
	var yyb386 bool
	var yyhl386 bool = l >= 0
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv389 := &x.ListMeta
		yyv389.CodecDecodeSelf(d)
	}
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv390 := &x.Items
		yym391 := z.DecBinary()
		_ = yym391
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv390), d)
		}
	}
	for {
		yyj386++
		if yyhl386 {
			yyb386 = yyj386 > l
		} else {
			yyb386 = r.CheckBreak()
		}
		if yyb386 {
			break
		}
		if yyj386 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj386-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym392 := z.EncBinary()
		_ = yym392
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep393 := !z.EncBinary()
			yy2arr393 := z.EncBasicHandle().StructToArray
			var yyfirst393 bool
			var yyq393 [5]bool
			_, _, _, _ = yysep393, yyfirst393, yyq393, yy2arr393
			const yyr393 bool = false
			yyq393[0] = x.Kind != ""
			yyq393[1] = x.APIVersion != ""
			yyq393[2] = true
			yyq393[3] = true
			yyq393[4] = true
			if yyr393 || yy2arr393 {
				r.EncodeArrayStart(5)
			} else {
				var yynn393 int = 0
				for _, b := range yyq393 {
					if b {
						yynn393++
					}
				}
				r.EncodeMapStart(yynn393)
			}
			if yyr393 || yy2arr393 {
				if yyq393[0] {
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq393[0] {
					yyfirst393 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep393 {
						r.EncodeMapKVSeparator()
					}
					yym396 := z.EncBinary()
					_ = yym396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr393 || yy2arr393 {
				if yysep393 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq393[1] {
					yym398 := z.EncBinary()
					_ = yym398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq393[1] {
					if yyfirst393 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst393 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep393 {
						r.EncodeMapKVSeparator()
					}
					yym399 := z.EncBinary()
					_ = yym399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr393 || yy2arr393 {
				if yysep393 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq393[2] {
					yy401 := &x.ObjectMeta
					yy401.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq393[2] {
					if yyfirst393 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst393 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep393 {
						r.EncodeMapKVSeparator()
					}
					yy402 := &x.ObjectMeta
					yy402.CodecEncodeSelf(e)
				}
			}
			if yyr393 || yy2arr393 {
				if yysep393 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq393[3] {
					yy404 := &x.Spec
					yy404.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq393[3] {
					if yyfirst393 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst393 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep393 {
						r.EncodeMapKVSeparator()
					}
					yy405 := &x.Spec
					yy405.CodecEncodeSelf(e)
				}
			}
			if yyr393 || yy2arr393 {
				if yysep393 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq393[4] {
					yy407 := &x.Status
					yy407.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq393[4] {
					if yyfirst393 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst393 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep393 {
						r.EncodeMapKVSeparator()
					}
					yy408 := &x.Status
					yy408.CodecEncodeSelf(e)
				}
			}
			if yysep393 {
				if yyr393 || yy2arr393 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym409 := z.DecBinary()
	_ = yym409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl410 := r.ReadMapStart()
			if yyl410 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl410, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl410 := r.ReadArrayStart()
			if yyl410 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl410, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys411Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys411Slc
	var yyhl411 bool = l >= 0
	for yyj411 := 0; ; yyj411++ {
		if yyhl411 {
			if yyj411 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj411 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys411Slc = r.DecodeBytes(yys411Slc, true, true)
		yys411 := string(yys411Slc)
		if !yyhl411 {
			r.ReadMapKVSeparator()
		}
		switch yys411 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv414 := &x.ObjectMeta
				yyv414.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv415 := &x.Spec
				yyv415.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv416 := &x.Status
				yyv416.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys411)
		} // end switch yys411
	} // end for yyj411
	if !yyhl411 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj417 int
	var yyb417 bool
	var yyhl417 bool = l >= 0
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv420 := &x.ObjectMeta
		yyv420.CodecDecodeSelf(d)
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv421 := &x.Spec
		yyv421.CodecDecodeSelf(d)
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv422 := &x.Status
		yyv422.CodecDecodeSelf(d)
	}
	for {
		yyj417++
		if yyhl417 {
			yyb417 = yyj417 > l
		} else {
			yyb417 = r.CheckBreak()
		}
		if yyb417 {
			break
		}
		if yyj417 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj417-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym423 := z.EncBinary()
		_ = yym423
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep424 := !z.EncBinary()
			yy2arr424 := z.EncBasicHandle().StructToArray
			var yyfirst424 bool
			var yyq424 [4]bool
			_, _, _, _ = yysep424, yyfirst424, yyq424, yy2arr424
			const yyr424 bool = false
			yyq424[0] = x.Kind != ""
			yyq424[1] = x.APIVersion != ""
			yyq424[2] = true
			if yyr424 || yy2arr424 {
				r.EncodeArrayStart(4)
			} else {
				var yynn424 int = 1
				for _, b := range yyq424 {
					if b {
						yynn424++
					}
				}
				r.EncodeMapStart(yynn424)
			}
			if yyr424 || yy2arr424 {
				if yyq424[0] {
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq424[0] {
					yyfirst424 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep424 {
						r.EncodeMapKVSeparator()
					}
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr424 || yy2arr424 {
				if yysep424 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq424[1] {
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq424[1] {
					if yyfirst424 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst424 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep424 {
						r.EncodeMapKVSeparator()
					}
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr424 || yy2arr424 {
				if yysep424 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq424[2] {
					yy432 := &x.ListMeta
					yy432.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq424[2] {
					if yyfirst424 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst424 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep424 {
						r.EncodeMapKVSeparator()
					}
					yy433 := &x.ListMeta
					yy433.CodecEncodeSelf(e)
				}
			}
			if yyr424 || yy2arr424 {
				if yysep424 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				if yyfirst424 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst424 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep424 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym436 := z.EncBinary()
					_ = yym436
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep424 {
				if yyr424 || yy2arr424 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym437 := z.DecBinary()
	_ = yym437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl438 := r.ReadMapStart()
			if yyl438 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl438, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl438 := r.ReadArrayStart()
			if yyl438 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl438, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys439Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys439Slc
	var yyhl439 bool = l >= 0
	for yyj439 := 0; ; yyj439++ {
		if yyhl439 {
			if yyj439 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj439 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys439Slc = r.DecodeBytes(yys439Slc, true, true)
		yys439 := string(yys439Slc)
		if !yyhl439 {
			r.ReadMapKVSeparator()
		}
		switch yys439 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv442 := &x.ListMeta
				yyv442.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv443 := &x.Items
				yym444 := z.DecBinary()
				_ = yym444
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv443), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys439)
		} // end switch yys439
	} // end for yyj439
	if !yyhl439 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj445 int
	var yyb445 bool
	var yyhl445 bool = l >= 0
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv448 := &x.ListMeta
		yyv448.CodecDecodeSelf(d)
	}
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj445++
		if yyhl445 {
			yyb445 = yyj445 > l
		} else {
			yyb445 = r.CheckBreak()
		}
		if yyb445 {
			break
		}
		if yyj445 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj445-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyfirst452 bool
			var yyq452 [3]bool
			_, _, _, _ = yysep452, yyfirst452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				var yynn452 int = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					yyfirst452 = true
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if yysep452 {
						r.EncodeMapKVSeparator()
					}
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				if yysep452 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					if yyfirst452 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst452 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					if yysep452 {
						r.EncodeMapKVSeparator()
					}
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				if yysep452 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					if yyfirst452 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst452 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					if yysep452 {
						r.EncodeMapKVSeparator()
					}
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep452 {
				if yyr452 || yy2arr452 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj464 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		if !yyhl464 {
			r.ReadMapKVSeparator()
		}
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	if !yyhl464 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		if yyj469 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyfirst475 bool
			var yyq475 [3]bool
			_, _, _, _ = yysep475, yyfirst475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				var yynn475 int = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
			}
			if yyr475 || yy2arr475 {
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					yyfirst475 = true
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					if yysep475 {
						r.EncodeMapKVSeparator()
					}
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				if yysep475 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					if yyfirst475 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst475 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if yysep475 {
						r.EncodeMapKVSeparator()
					}
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				if yysep475 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					if yyfirst475 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst475 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if yysep475 {
						r.EncodeMapKVSeparator()
					}
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep475 {
				if yyr475 || yy2arr475 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj483 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		if !yyhl483 {
			r.ReadMapKVSeparator()
		}
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	if !yyhl483 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		if yyj488 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	r.ReadArrayEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyfirst500 bool
			var yyq500 [1]bool
			_, _, _, _ = yysep500, yyfirst500, yyq500, yy2arr500
			const yyr500 bool = false
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				var yynn500 int = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
			}
			if yyr500 || yy2arr500 {
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				yyfirst500 = true
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				if yysep500 {
					r.EncodeMapKVSeparator()
				}
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep500 {
				if yyr500 || yy2arr500 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj506 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		if !yyhl506 {
			r.ReadMapKVSeparator()
		}
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	if !yyhl506 {
		r.ReadMapEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		if yyj508 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyfirst511 bool
			var yyq511 [1]bool
			_, _, _, _ = yysep511, yyfirst511, yyq511, yy2arr511
			const yyr511 bool = false
			yyq511[0] = x.Medium != ""
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				var yynn511 int = 0
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
			}
			if yyr511 || yy2arr511 {
				if yyq511[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq511[0] {
					yyfirst511 = true
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					if yysep511 {
						r.EncodeMapKVSeparator()
					}
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yysep511 {
				if yyr511 || yy2arr511 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj515 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		if !yyhl515 {
			r.ReadMapKVSeparator()
		}
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	if !yyhl515 {
		r.ReadMapEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		if yyj517 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	r.ReadArrayEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym519 := z.EncBinary()
		_ = yym519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep520 := !z.EncBinary()
			yy2arr520 := z.EncBasicHandle().StructToArray
			var yyfirst520 bool
			var yyq520 [3]bool
			_, _, _, _ = yysep520, yyfirst520, yyq520, yy2arr520
			const yyr520 bool = false
			yyq520[2] = x.ReadOnly != false
			if yyr520 || yy2arr520 {
				r.EncodeArrayStart(3)
			} else {
				var yynn520 int = 2
				for _, b := range yyq520 {
					if b {
						yynn520++
					}
				}
				r.EncodeMapStart(yynn520)
			}
			if yyr520 || yy2arr520 {
				yym522 := z.EncBinary()
				_ = yym522
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				yyfirst520 = true
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				if yysep520 {
					r.EncodeMapKVSeparator()
				}
				yym523 := z.EncBinary()
				_ = yym523
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr520 || yy2arr520 {
				if yysep520 {
					r.EncodeArrayEntrySeparator()
				}
				yym525 := z.EncBinary()
				_ = yym525
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				if yyfirst520 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst520 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				if yysep520 {
					r.EncodeMapKVSeparator()
				}
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr520 || yy2arr520 {
				if yysep520 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq520[2] {
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq520[2] {
					if yyfirst520 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst520 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep520 {
						r.EncodeMapKVSeparator()
					}
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep520 {
				if yyr520 || yy2arr520 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym530 := z.DecBinary()
	_ = yym530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl531 := r.ReadMapStart()
			if yyl531 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl531, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl531 := r.ReadArrayStart()
			if yyl531 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys532Slc
	var yyhl532 bool = l >= 0
	for yyj532 := 0; ; yyj532++ {
		if yyhl532 {
			if yyj532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj532 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys532Slc = r.DecodeBytes(yys532Slc, true, true)
		yys532 := string(yys532Slc)
		if !yyhl532 {
			r.ReadMapKVSeparator()
		}
		switch yys532 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys532)
		} // end switch yys532
	} // end for yyj532
	if !yyhl532 {
		r.ReadMapEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj536 int
	var yyb536 bool
	var yyhl536 bool = l >= 0
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj536++
		if yyhl536 {
			yyb536 = yyj536 > l
		} else {
			yyb536 = r.CheckBreak()
		}
		if yyb536 {
			break
		}
		if yyj536 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj536-1, "")
	}
	r.ReadArrayEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym540 := z.EncBinary()
	_ = yym540
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym541 := z.DecBinary()
	_ = yym541
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym542 := z.EncBinary()
		_ = yym542
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep543 := !z.EncBinary()
			yy2arr543 := z.EncBasicHandle().StructToArray
			var yyfirst543 bool
			var yyq543 [8]bool
			_, _, _, _ = yysep543, yyfirst543, yyq543, yy2arr543
			const yyr543 bool = false
			yyq543[2] = x.FSType != ""
			yyq543[7] = x.ReadOnly != false
			if yyr543 || yy2arr543 {
				r.EncodeArrayStart(8)
			} else {
				var yynn543 int = 6
				for _, b := range yyq543 {
					if b {
						yynn543++
					}
				}
				r.EncodeMapStart(yynn543)
			}
			if yyr543 || yy2arr543 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				yyfirst543 = true
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if yysep543 {
					r.EncodeMapKVSeparator()
				}
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr543 || yy2arr543 {
				if yysep543 {
					r.EncodeArrayEntrySeparator()
				}
				yym548 := z.EncBinary()
				_ = yym548
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				if yyfirst543 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst543 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				if yysep543 {
					r.EncodeMapKVSeparator()
				}
				yym549 := z.EncBinary()
				_ = yym549
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr543 || yy2arr543 {
				if yysep543 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq543[2] {
					yym551 := z.EncBinary()
					_ = yym551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq543[2] {
					if yyfirst543 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst543 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					if yysep543 {
						r.EncodeMapKVSeparator()
					}
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr543 || yy2arr543 {
				if yysep543 {
					r.EncodeArrayEntrySeparator()
				}
				yym554 := z.EncBinary()
				_ = yym554
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				if yyfirst543 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst543 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				if yysep543 {
					r.EncodeMapKVSeparator()
				}
				yym555 := z.EncBinary()
				_ = yym555
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr543 || yy2arr543 {
				if yysep543 {
					r.EncodeArrayEntrySeparator()
				}
				yym557 := z.EncBinary()
				_ = yym557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				if yyfirst543 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst543 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				if yysep543 {
					r.EncodeMapKVSeparator()
				}
				yym558 := z.EncBinary()
				_ = yym558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr543 || yy2arr543 {
				if yysep543 {
					r.EncodeArrayEntrySeparator()
				}
				yym560 := z.EncBinary()
				_ = yym560
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				if yyfirst543 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst543 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				if yysep543 {
					r.EncodeMapKVSeparator()
				}
				yym561 := z.EncBinary()
				_ = yym561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr543 || yy2arr543 {
				if yysep543 {
					r.EncodeArrayEntrySeparator()
				}
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				if yyfirst543 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst543 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if yysep543 {
					r.EncodeMapKVSeparator()
				}
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr543 || yy2arr543 {
				if yysep543 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq543[7] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq543[7] {
					if yyfirst543 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst543 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep543 {
						r.EncodeMapKVSeparator()
					}
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep543 {
				if yyr543 || yy2arr543 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj568 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		if !yyhl568 {
			r.ReadMapKVSeparator()
		}
		switch yys568 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv569 := &x.CephMonitors
				yym570 := z.DecBinary()
				_ = yym570
				if false {
				} else {
					z.F.DecSliceStringX(yyv569, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	if !yyhl568 {
		r.ReadMapEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj578 int
	var yyb578 bool
	var yyhl578 bool = l >= 0
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv579 := &x.CephMonitors
		yym580 := z.DecBinary()
		_ = yym580
		if false {
		} else {
			z.F.DecSliceStringX(yyv579, false, d)
		}
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj578++
		if yyhl578 {
			yyb578 = yyj578 > l
		} else {
			yyb578 = r.CheckBreak()
		}
		if yyb578 {
			break
		}
		if yyj578 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj578-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym588 := z.EncBinary()
		_ = yym588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep589 := !z.EncBinary()
			yy2arr589 := z.EncBasicHandle().StructToArray
			var yyfirst589 bool
			var yyq589 [3]bool
			_, _, _, _ = yysep589, yyfirst589, yyq589, yy2arr589
			const yyr589 bool = false
			yyq589[1] = x.FSType != ""
			yyq589[2] = x.ReadOnly != false
			if yyr589 || yy2arr589 {
				r.EncodeArrayStart(3)
			} else {
				var yynn589 int = 1
				for _, b := range yyq589 {
					if b {
						yynn589++
					}
				}
				r.EncodeMapStart(yynn589)
			}
			if yyr589 || yy2arr589 {
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				yyfirst589 = true
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				if yysep589 {
					r.EncodeMapKVSeparator()
				}
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr589 || yy2arr589 {
				if yysep589 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq589[1] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq589[1] {
					if yyfirst589 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst589 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					if yysep589 {
						r.EncodeMapKVSeparator()
					}
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr589 || yy2arr589 {
				if yysep589 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq589[2] {
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq589[2] {
					if yyfirst589 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst589 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep589 {
						r.EncodeMapKVSeparator()
					}
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep589 {
				if yyr589 || yy2arr589 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym599 := z.DecBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl600 := r.ReadMapStart()
			if yyl600 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl600, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl600 := r.ReadArrayStart()
			if yyl600 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys601Slc
	var yyhl601 bool = l >= 0
	for yyj601 := 0; ; yyj601++ {
		if yyhl601 {
			if yyj601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj601 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys601Slc = r.DecodeBytes(yys601Slc, true, true)
		yys601 := string(yys601Slc)
		if !yyhl601 {
			r.ReadMapKVSeparator()
		}
		switch yys601 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys601)
		} // end switch yys601
	} // end for yyj601
	if !yyhl601 {
		r.ReadMapEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		if yyj605 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym609 := z.EncBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep610 := !z.EncBinary()
			yy2arr610 := z.EncBasicHandle().StructToArray
			var yyfirst610 bool
			var yyq610 [5]bool
			_, _, _, _ = yysep610, yyfirst610, yyq610, yy2arr610
			const yyr610 bool = false
			yyq610[1] = x.User != ""
			yyq610[2] = x.SecretFile != ""
			yyq610[3] = x.SecretRef != nil
			yyq610[4] = x.ReadOnly != false
			if yyr610 || yy2arr610 {
				r.EncodeArrayStart(5)
			} else {
				var yynn610 int = 1
				for _, b := range yyq610 {
					if b {
						yynn610++
					}
				}
				r.EncodeMapStart(yynn610)
			}
			if yyr610 || yy2arr610 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				yyfirst610 = true
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if yysep610 {
					r.EncodeMapKVSeparator()
				}
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yysep610 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq610[1] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[1] {
					if yyfirst610 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst610 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					if yysep610 {
						r.EncodeMapKVSeparator()
					}
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yysep610 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq610[2] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[2] {
					if yyfirst610 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst610 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					if yysep610 {
						r.EncodeMapKVSeparator()
					}
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yysep610 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq610[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq610[3] {
					if yyfirst610 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst610 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if yysep610 {
						r.EncodeMapKVSeparator()
					}
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yysep610 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq610[4] {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq610[4] {
					if yyfirst610 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst610 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep610 {
						r.EncodeMapKVSeparator()
					}
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep610 {
				if yyr610 || yy2arr610 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl625 := r.ReadMapStart()
			if yyl625 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl625, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl625 := r.ReadArrayStart()
			if yyl625 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys626Slc
	var yyhl626 bool = l >= 0
	for yyj626 := 0; ; yyj626++ {
		if yyhl626 {
			if yyj626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj626 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys626Slc = r.DecodeBytes(yys626Slc, true, true)
		yys626 := string(yys626Slc)
		if !yyhl626 {
			r.ReadMapKVSeparator()
		}
		switch yys626 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv627 := &x.Monitors
				yym628 := z.DecBinary()
				_ = yym628
				if false {
				} else {
					z.F.DecSliceStringX(yyv627, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys626)
		} // end switch yys626
	} // end for yyj626
	if !yyhl626 {
		r.ReadMapEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv634 := &x.Monitors
		yym635 := z.DecBinary()
		_ = yym635
		if false {
		} else {
			z.F.DecSliceStringX(yyv634, false, d)
		}
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		if yyj633 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	r.ReadArrayEnd()
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym640 := z.EncBinary()
	_ = yym640
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym641 := z.DecBinary()
	_ = yym641
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym642 := z.EncBinary()
		_ = yym642
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep643 := !z.EncBinary()
			yy2arr643 := z.EncBasicHandle().StructToArray
			var yyfirst643 bool
			var yyq643 [4]bool
			_, _, _, _ = yysep643, yyfirst643, yyq643, yy2arr643
			const yyr643 bool = false
			yyq643[2] = x.Partition != 0
			yyq643[3] = x.ReadOnly != false
			if yyr643 || yy2arr643 {
				r.EncodeArrayStart(4)
			} else {
				var yynn643 int = 2
				for _, b := range yyq643 {
					if b {
						yynn643++
					}
				}
				r.EncodeMapStart(yynn643)
			}
			if yyr643 || yy2arr643 {
				yym645 := z.EncBinary()
				_ = yym645
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				yyfirst643 = true
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				if yysep643 {
					r.EncodeMapKVSeparator()
				}
				yym646 := z.EncBinary()
				_ = yym646
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr643 || yy2arr643 {
				if yysep643 {
					r.EncodeArrayEntrySeparator()
				}
				yym648 := z.EncBinary()
				_ = yym648
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				if yyfirst643 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst643 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				if yysep643 {
					r.EncodeMapKVSeparator()
				}
				yym649 := z.EncBinary()
				_ = yym649
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr643 || yy2arr643 {
				if yysep643 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq643[2] {
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq643[2] {
					if yyfirst643 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst643 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					if yysep643 {
						r.EncodeMapKVSeparator()
					}
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr643 || yy2arr643 {
				if yysep643 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq643[3] {
					yym654 := z.EncBinary()
					_ = yym654
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq643[3] {
					if yyfirst643 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst643 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep643 {
						r.EncodeMapKVSeparator()
					}
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep643 {
				if yyr643 || yy2arr643 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym656 := z.DecBinary()
	_ = yym656
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl657 := r.ReadMapStart()
			if yyl657 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl657, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl657 := r.ReadArrayStart()
			if yyl657 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl657, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys658Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys658Slc
	var yyhl658 bool = l >= 0
	for yyj658 := 0; ; yyj658++ {
		if yyhl658 {
			if yyj658 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj658 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys658Slc = r.DecodeBytes(yys658Slc, true, true)
		yys658 := string(yys658Slc)
		if !yyhl658 {
			r.ReadMapKVSeparator()
		}
		switch yys658 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys658)
		} // end switch yys658
	} // end for yyj658
	if !yyhl658 {
		r.ReadMapEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj663 int
	var yyb663 bool
	var yyhl663 bool = l >= 0
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj663++
		if yyhl663 {
			yyb663 = yyj663 > l
		} else {
			yyb663 = r.CheckBreak()
		}
		if yyb663 {
			break
		}
		if yyj663 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj663-1, "")
	}
	r.ReadArrayEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym668 := z.EncBinary()
		_ = yym668
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep669 := !z.EncBinary()
			yy2arr669 := z.EncBasicHandle().StructToArray
			var yyfirst669 bool
			var yyq669 [4]bool
			_, _, _, _ = yysep669, yyfirst669, yyq669, yy2arr669
			const yyr669 bool = false
			yyq669[2] = x.Partition != 0
			yyq669[3] = x.ReadOnly != false
			if yyr669 || yy2arr669 {
				r.EncodeArrayStart(4)
			} else {
				var yynn669 int = 2
				for _, b := range yyq669 {
					if b {
						yynn669++
					}
				}
				r.EncodeMapStart(yynn669)
			}
			if yyr669 || yy2arr669 {
				yym671 := z.EncBinary()
				_ = yym671
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				yyfirst669 = true
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				if yysep669 {
					r.EncodeMapKVSeparator()
				}
				yym672 := z.EncBinary()
				_ = yym672
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr669 || yy2arr669 {
				if yysep669 {
					r.EncodeArrayEntrySeparator()
				}
				yym674 := z.EncBinary()
				_ = yym674
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				if yyfirst669 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst669 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				if yysep669 {
					r.EncodeMapKVSeparator()
				}
				yym675 := z.EncBinary()
				_ = yym675
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr669 || yy2arr669 {
				if yysep669 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq669[2] {
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq669[2] {
					if yyfirst669 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst669 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					if yysep669 {
						r.EncodeMapKVSeparator()
					}
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr669 || yy2arr669 {
				if yysep669 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq669[3] {
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq669[3] {
					if yyfirst669 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst669 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep669 {
						r.EncodeMapKVSeparator()
					}
					yym681 := z.EncBinary()
					_ = yym681
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep669 {
				if yyr669 || yy2arr669 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym682 := z.DecBinary()
	_ = yym682
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl683 := r.ReadMapStart()
			if yyl683 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl683, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl683 := r.ReadArrayStart()
			if yyl683 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl683, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys684Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys684Slc
	var yyhl684 bool = l >= 0
	for yyj684 := 0; ; yyj684++ {
		if yyhl684 {
			if yyj684 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj684 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys684Slc = r.DecodeBytes(yys684Slc, true, true)
		yys684 := string(yys684Slc)
		if !yyhl684 {
			r.ReadMapKVSeparator()
		}
		switch yys684 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys684)
		} // end switch yys684
	} // end for yyj684
	if !yyhl684 {
		r.ReadMapEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj689 int
	var yyb689 bool
	var yyhl689 bool = l >= 0
	yyj689++
	if yyhl689 {
		yyb689 = yyj689 > l
	} else {
		yyb689 = r.CheckBreak()
	}
	if yyb689 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj689++
	if yyhl689 {
		yyb689 = yyj689 > l
	} else {
		yyb689 = r.CheckBreak()
	}
	if yyb689 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj689++
	if yyhl689 {
		yyb689 = yyj689 > l
	} else {
		yyb689 = r.CheckBreak()
	}
	if yyb689 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj689++
	if yyhl689 {
		yyb689 = yyj689 > l
	} else {
		yyb689 = r.CheckBreak()
	}
	if yyb689 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj689++
		if yyhl689 {
			yyb689 = yyj689 > l
		} else {
			yyb689 = r.CheckBreak()
		}
		if yyb689 {
			break
		}
		if yyj689 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj689-1, "")
	}
	r.ReadArrayEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym694 := z.EncBinary()
		_ = yym694
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep695 := !z.EncBinary()
			yy2arr695 := z.EncBasicHandle().StructToArray
			var yyfirst695 bool
			var yyq695 [2]bool
			_, _, _, _ = yysep695, yyfirst695, yyq695, yy2arr695
			const yyr695 bool = false
			if yyr695 || yy2arr695 {
				r.EncodeArrayStart(2)
			} else {
				var yynn695 int = 2
				for _, b := range yyq695 {
					if b {
						yynn695++
					}
				}
				r.EncodeMapStart(yynn695)
			}
			if yyr695 || yy2arr695 {
				yym697 := z.EncBinary()
				_ = yym697
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				yyfirst695 = true
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				if yysep695 {
					r.EncodeMapKVSeparator()
				}
				yym698 := z.EncBinary()
				_ = yym698
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr695 || yy2arr695 {
				if yysep695 {
					r.EncodeArrayEntrySeparator()
				}
				yym700 := z.EncBinary()
				_ = yym700
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				if yyfirst695 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst695 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				if yysep695 {
					r.EncodeMapKVSeparator()
				}
				yym701 := z.EncBinary()
				_ = yym701
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep695 {
				if yyr695 || yy2arr695 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym702 := z.DecBinary()
	_ = yym702
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl703 := r.ReadMapStart()
			if yyl703 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl703, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl703 := r.ReadArrayStart()
			if yyl703 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl703, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys704Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys704Slc
	var yyhl704 bool = l >= 0
	for yyj704 := 0; ; yyj704++ {
		if yyhl704 {
			if yyj704 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj704 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys704Slc = r.DecodeBytes(yys704Slc, true, true)
		yys704 := string(yys704Slc)
		if !yyhl704 {
			r.ReadMapKVSeparator()
		}
		switch yys704 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys704)
		} // end switch yys704
	} // end for yyj704
	if !yyhl704 {
		r.ReadMapEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj707 int
	var yyb707 bool
	var yyhl707 bool = l >= 0
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj707++
		if yyhl707 {
			yyb707 = yyj707 > l
		} else {
			yyb707 = r.CheckBreak()
		}
		if yyb707 {
			break
		}
		if yyj707 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj707-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym710 := z.EncBinary()
		_ = yym710
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep711 := !z.EncBinary()
			yy2arr711 := z.EncBasicHandle().StructToArray
			var yyfirst711 bool
			var yyq711 [1]bool
			_, _, _, _ = yysep711, yyfirst711, yyq711, yy2arr711
			const yyr711 bool = false
			if yyr711 || yy2arr711 {
				r.EncodeArrayStart(1)
			} else {
				var yynn711 int = 1
				for _, b := range yyq711 {
					if b {
						yynn711++
					}
				}
				r.EncodeMapStart(yynn711)
			}
			if yyr711 || yy2arr711 {
				yym713 := z.EncBinary()
				_ = yym713
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				yyfirst711 = true
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				if yysep711 {
					r.EncodeMapKVSeparator()
				}
				yym714 := z.EncBinary()
				_ = yym714
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep711 {
				if yyr711 || yy2arr711 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym715 := z.DecBinary()
	_ = yym715
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl716 := r.ReadMapStart()
			if yyl716 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl716, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl716 := r.ReadArrayStart()
			if yyl716 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl716, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys717Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys717Slc
	var yyhl717 bool = l >= 0
	for yyj717 := 0; ; yyj717++ {
		if yyhl717 {
			if yyj717 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj717 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys717Slc = r.DecodeBytes(yys717Slc, true, true)
		yys717 := string(yys717Slc)
		if !yyhl717 {
			r.ReadMapKVSeparator()
		}
		switch yys717 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys717)
		} // end switch yys717
	} // end for yyj717
	if !yyhl717 {
		r.ReadMapEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj719 int
	var yyb719 bool
	var yyhl719 bool = l >= 0
	yyj719++
	if yyhl719 {
		yyb719 = yyj719 > l
	} else {
		yyb719 = r.CheckBreak()
	}
	if yyb719 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj719++
		if yyhl719 {
			yyb719 = yyj719 > l
		} else {
			yyb719 = r.CheckBreak()
		}
		if yyb719 {
			break
		}
		if yyj719 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj719-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym721 := z.EncBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep722 := !z.EncBinary()
			yy2arr722 := z.EncBasicHandle().StructToArray
			var yyfirst722 bool
			var yyq722 [3]bool
			_, _, _, _ = yysep722, yyfirst722, yyq722, yy2arr722
			const yyr722 bool = false
			yyq722[2] = x.ReadOnly != false
			if yyr722 || yy2arr722 {
				r.EncodeArrayStart(3)
			} else {
				var yynn722 int = 2
				for _, b := range yyq722 {
					if b {
						yynn722++
					}
				}
				r.EncodeMapStart(yynn722)
			}
			if yyr722 || yy2arr722 {
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				yyfirst722 = true
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				if yysep722 {
					r.EncodeMapKVSeparator()
				}
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr722 || yy2arr722 {
				if yysep722 {
					r.EncodeArrayEntrySeparator()
				}
				yym727 := z.EncBinary()
				_ = yym727
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				if yyfirst722 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst722 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				if yysep722 {
					r.EncodeMapKVSeparator()
				}
				yym728 := z.EncBinary()
				_ = yym728
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr722 || yy2arr722 {
				if yysep722 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq722[2] {
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq722[2] {
					if yyfirst722 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst722 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep722 {
						r.EncodeMapKVSeparator()
					}
					yym731 := z.EncBinary()
					_ = yym731
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep722 {
				if yyr722 || yy2arr722 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym732 := z.DecBinary()
	_ = yym732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl733 := r.ReadMapStart()
			if yyl733 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl733, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl733 := r.ReadArrayStart()
			if yyl733 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl733, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys734Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys734Slc
	var yyhl734 bool = l >= 0
	for yyj734 := 0; ; yyj734++ {
		if yyhl734 {
			if yyj734 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj734 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys734Slc = r.DecodeBytes(yys734Slc, true, true)
		yys734 := string(yys734Slc)
		if !yyhl734 {
			r.ReadMapKVSeparator()
		}
		switch yys734 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys734)
		} // end switch yys734
	} // end for yyj734
	if !yyhl734 {
		r.ReadMapEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj738 int
	var yyb738 bool
	var yyhl738 bool = l >= 0
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj738++
		if yyhl738 {
			yyb738 = yyj738 > l
		} else {
			yyb738 = r.CheckBreak()
		}
		if yyb738 {
			break
		}
		if yyj738 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj738-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym742 := z.EncBinary()
		_ = yym742
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep743 := !z.EncBinary()
			yy2arr743 := z.EncBasicHandle().StructToArray
			var yyfirst743 bool
			var yyq743 [5]bool
			_, _, _, _ = yysep743, yyfirst743, yyq743, yy2arr743
			const yyr743 bool = false
			yyq743[4] = x.ReadOnly != false
			if yyr743 || yy2arr743 {
				r.EncodeArrayStart(5)
			} else {
				var yynn743 int = 4
				for _, b := range yyq743 {
					if b {
						yynn743++
					}
				}
				r.EncodeMapStart(yynn743)
			}
			if yyr743 || yy2arr743 {
				yym745 := z.EncBinary()
				_ = yym745
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				yyfirst743 = true
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				if yysep743 {
					r.EncodeMapKVSeparator()
				}
				yym746 := z.EncBinary()
				_ = yym746
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr743 || yy2arr743 {
				if yysep743 {
					r.EncodeArrayEntrySeparator()
				}
				yym748 := z.EncBinary()
				_ = yym748
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				if yyfirst743 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst743 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				if yysep743 {
					r.EncodeMapKVSeparator()
				}
				yym749 := z.EncBinary()
				_ = yym749
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr743 || yy2arr743 {
				if yysep743 {
					r.EncodeArrayEntrySeparator()
				}
				yym751 := z.EncBinary()
				_ = yym751
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				if yyfirst743 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst743 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if yysep743 {
					r.EncodeMapKVSeparator()
				}
				yym752 := z.EncBinary()
				_ = yym752
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr743 || yy2arr743 {
				if yysep743 {
					r.EncodeArrayEntrySeparator()
				}
				yym754 := z.EncBinary()
				_ = yym754
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				if yyfirst743 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst743 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				if yysep743 {
					r.EncodeMapKVSeparator()
				}
				yym755 := z.EncBinary()
				_ = yym755
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr743 || yy2arr743 {
				if yysep743 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq743[4] {
					yym757 := z.EncBinary()
					_ = yym757
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq743[4] {
					if yyfirst743 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst743 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep743 {
						r.EncodeMapKVSeparator()
					}
					yym758 := z.EncBinary()
					_ = yym758
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep743 {
				if yyr743 || yy2arr743 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym759 := z.DecBinary()
	_ = yym759
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl760 := r.ReadMapStart()
			if yyl760 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl760, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl760 := r.ReadArrayStart()
			if yyl760 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl760, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys761Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys761Slc
	var yyhl761 bool = l >= 0
	for yyj761 := 0; ; yyj761++ {
		if yyhl761 {
			if yyj761 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj761 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys761Slc = r.DecodeBytes(yys761Slc, true, true)
		yys761 := string(yys761Slc)
		if !yyhl761 {
			r.ReadMapKVSeparator()
		}
		switch yys761 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys761)
		} // end switch yys761
	} // end for yyj761
	if !yyhl761 {
		r.ReadMapEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj767 int
	var yyb767 bool
	var yyhl767 bool = l >= 0
	yyj767++
	if yyhl767 {
		yyb767 = yyj767 > l
	} else {
		yyb767 = r.CheckBreak()
	}
	if yyb767 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj767++
	if yyhl767 {
		yyb767 = yyj767 > l
	} else {
		yyb767 = r.CheckBreak()
	}
	if yyb767 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj767++
	if yyhl767 {
		yyb767 = yyj767 > l
	} else {
		yyb767 = r.CheckBreak()
	}
	if yyb767 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj767++
	if yyhl767 {
		yyb767 = yyj767 > l
	} else {
		yyb767 = r.CheckBreak()
	}
	if yyb767 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj767++
	if yyhl767 {
		yyb767 = yyj767 > l
	} else {
		yyb767 = r.CheckBreak()
	}
	if yyb767 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj767++
		if yyhl767 {
			yyb767 = yyj767 > l
		} else {
			yyb767 = r.CheckBreak()
		}
		if yyb767 {
			break
		}
		if yyj767 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj767-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym773 := z.EncBinary()
		_ = yym773
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep774 := !z.EncBinary()
			yy2arr774 := z.EncBasicHandle().StructToArray
			var yyfirst774 bool
			var yyq774 [5]bool
			_, _, _, _ = yysep774, yyfirst774, yyq774, yy2arr774
			const yyr774 bool = false
			yyq774[0] = x.Name != ""
			yyq774[1] = x.HostPort != 0
			yyq774[3] = x.Protocol != ""
			yyq774[4] = x.HostIP != ""
			if yyr774 || yy2arr774 {
				r.EncodeArrayStart(5)
			} else {
				var yynn774 int = 1
				for _, b := range yyq774 {
					if b {
						yynn774++
					}
				}
				r.EncodeMapStart(yynn774)
			}
			if yyr774 || yy2arr774 {
				if yyq774[0] {
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq774[0] {
					yyfirst774 = true
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep774 {
						r.EncodeMapKVSeparator()
					}
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr774 || yy2arr774 {
				if yysep774 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq774[1] {
					yym779 := z.EncBinary()
					_ = yym779
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq774[1] {
					if yyfirst774 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst774 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					if yysep774 {
						r.EncodeMapKVSeparator()
					}
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr774 || yy2arr774 {
				if yysep774 {
					r.EncodeArrayEntrySeparator()
				}
				yym782 := z.EncBinary()
				_ = yym782
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				if yyfirst774 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst774 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				if yysep774 {
					r.EncodeMapKVSeparator()
				}
				yym783 := z.EncBinary()
				_ = yym783
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr774 || yy2arr774 {
				if yysep774 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq774[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq774[3] {
					if yyfirst774 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst774 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					if yysep774 {
						r.EncodeMapKVSeparator()
					}
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr774 || yy2arr774 {
				if yysep774 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq774[4] {
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq774[4] {
					if yyfirst774 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst774 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					if yysep774 {
						r.EncodeMapKVSeparator()
					}
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep774 {
				if yyr774 || yy2arr774 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym788 := z.DecBinary()
	_ = yym788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl789 := r.ReadMapStart()
			if yyl789 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl789, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl789 := r.ReadArrayStart()
			if yyl789 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl789, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys790Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys790Slc
	var yyhl790 bool = l >= 0
	for yyj790 := 0; ; yyj790++ {
		if yyhl790 {
			if yyj790 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj790 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys790Slc = r.DecodeBytes(yys790Slc, true, true)
		yys790 := string(yys790Slc)
		if !yyhl790 {
			r.ReadMapKVSeparator()
		}
		switch yys790 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys790)
		} // end switch yys790
	} // end for yyj790
	if !yyhl790 {
		r.ReadMapEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj796 int
	var yyb796 bool
	var yyhl796 bool = l >= 0
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj796++
		if yyhl796 {
			yyb796 = yyj796 > l
		} else {
			yyb796 = r.CheckBreak()
		}
		if yyb796 {
			break
		}
		if yyj796 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj796-1, "")
	}
	r.ReadArrayEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym802 := z.EncBinary()
		_ = yym802
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep803 := !z.EncBinary()
			yy2arr803 := z.EncBasicHandle().StructToArray
			var yyfirst803 bool
			var yyq803 [3]bool
			_, _, _, _ = yysep803, yyfirst803, yyq803, yy2arr803
			const yyr803 bool = false
			yyq803[1] = x.ReadOnly != false
			if yyr803 || yy2arr803 {
				r.EncodeArrayStart(3)
			} else {
				var yynn803 int = 2
				for _, b := range yyq803 {
					if b {
						yynn803++
					}
				}
				r.EncodeMapStart(yynn803)
			}
			if yyr803 || yy2arr803 {
				yym805 := z.EncBinary()
				_ = yym805
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst803 = true
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				if yysep803 {
					r.EncodeMapKVSeparator()
				}
				yym806 := z.EncBinary()
				_ = yym806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr803 || yy2arr803 {
				if yysep803 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq803[1] {
					yym808 := z.EncBinary()
					_ = yym808
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq803[1] {
					if yyfirst803 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst803 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep803 {
						r.EncodeMapKVSeparator()
					}
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr803 || yy2arr803 {
				if yysep803 {
					r.EncodeArrayEntrySeparator()
				}
				yym811 := z.EncBinary()
				_ = yym811
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				if yyfirst803 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst803 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				if yysep803 {
					r.EncodeMapKVSeparator()
				}
				yym812 := z.EncBinary()
				_ = yym812
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep803 {
				if yyr803 || yy2arr803 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym813 := z.DecBinary()
	_ = yym813
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl814 := r.ReadMapStart()
			if yyl814 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl814, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl814 := r.ReadArrayStart()
			if yyl814 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl814, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys815Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys815Slc
	var yyhl815 bool = l >= 0
	for yyj815 := 0; ; yyj815++ {
		if yyhl815 {
			if yyj815 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj815 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys815Slc = r.DecodeBytes(yys815Slc, true, true)
		yys815 := string(yys815Slc)
		if !yyhl815 {
			r.ReadMapKVSeparator()
		}
		switch yys815 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys815)
		} // end switch yys815
	} // end for yyj815
	if !yyhl815 {
		r.ReadMapEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj819 int
	var yyb819 bool
	var yyhl819 bool = l >= 0
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj819++
		if yyhl819 {
			yyb819 = yyj819 > l
		} else {
			yyb819 = r.CheckBreak()
		}
		if yyb819 {
			break
		}
		if yyj819 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj819-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym823 := z.EncBinary()
		_ = yym823
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep824 := !z.EncBinary()
			yy2arr824 := z.EncBasicHandle().StructToArray
			var yyfirst824 bool
			var yyq824 [3]bool
			_, _, _, _ = yysep824, yyfirst824, yyq824, yy2arr824
			const yyr824 bool = false
			yyq824[1] = x.Value != ""
			yyq824[2] = x.ValueFrom != nil
			if yyr824 || yy2arr824 {
				r.EncodeArrayStart(3)
			} else {
				var yynn824 int = 1
				for _, b := range yyq824 {
					if b {
						yynn824++
					}
				}
				r.EncodeMapStart(yynn824)
			}
			if yyr824 || yy2arr824 {
				yym826 := z.EncBinary()
				_ = yym826
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst824 = true
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				if yysep824 {
					r.EncodeMapKVSeparator()
				}
				yym827 := z.EncBinary()
				_ = yym827
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr824 || yy2arr824 {
				if yysep824 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq824[1] {
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq824[1] {
					if yyfirst824 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst824 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					if yysep824 {
						r.EncodeMapKVSeparator()
					}
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr824 || yy2arr824 {
				if yysep824 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq824[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq824[2] {
					if yyfirst824 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst824 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if yysep824 {
						r.EncodeMapKVSeparator()
					}
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep824 {
				if yyr824 || yy2arr824 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym832 := z.DecBinary()
	_ = yym832
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl833 := r.ReadMapStart()
			if yyl833 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl833, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl833 := r.ReadArrayStart()
			if yyl833 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl833, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys834Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys834Slc
	var yyhl834 bool = l >= 0
	for yyj834 := 0; ; yyj834++ {
		if yyhl834 {
			if yyj834 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj834 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys834Slc = r.DecodeBytes(yys834Slc, true, true)
		yys834 := string(yys834Slc)
		if !yyhl834 {
			r.ReadMapKVSeparator()
		}
		switch yys834 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys834)
		} // end switch yys834
	} // end for yyj834
	if !yyhl834 {
		r.ReadMapEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj838 int
	var yyb838 bool
	var yyhl838 bool = l >= 0
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj838++
		if yyhl838 {
			yyb838 = yyj838 > l
		} else {
			yyb838 = r.CheckBreak()
		}
		if yyb838 {
			break
		}
		if yyj838 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj838-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym842 := z.EncBinary()
		_ = yym842
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep843 := !z.EncBinary()
			yy2arr843 := z.EncBasicHandle().StructToArray
			var yyfirst843 bool
			var yyq843 [1]bool
			_, _, _, _ = yysep843, yyfirst843, yyq843, yy2arr843
			const yyr843 bool = false
			if yyr843 || yy2arr843 {
				r.EncodeArrayStart(1)
			} else {
				var yynn843 int = 1
				for _, b := range yyq843 {
					if b {
						yynn843++
					}
				}
				r.EncodeMapStart(yynn843)
			}
			if yyr843 || yy2arr843 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				yyfirst843 = true
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if yysep843 {
					r.EncodeMapKVSeparator()
				}
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep843 {
				if yyr843 || yy2arr843 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym845 := z.DecBinary()
	_ = yym845
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl846 := r.ReadMapStart()
			if yyl846 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl846, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl846 := r.ReadArrayStart()
			if yyl846 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl846, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys847Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys847Slc
	var yyhl847 bool = l >= 0
	for yyj847 := 0; ; yyj847++ {
		if yyhl847 {
			if yyj847 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj847 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys847Slc = r.DecodeBytes(yys847Slc, true, true)
		yys847 := string(yys847Slc)
		if !yyhl847 {
			r.ReadMapKVSeparator()
		}
		switch yys847 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys847)
		} // end switch yys847
	} // end for yyj847
	if !yyhl847 {
		r.ReadMapEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj849 int
	var yyb849 bool
	var yyhl849 bool = l >= 0
	yyj849++
	if yyhl849 {
		yyb849 = yyj849 > l
	} else {
		yyb849 = r.CheckBreak()
	}
	if yyb849 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj849++
		if yyhl849 {
			yyb849 = yyj849 > l
		} else {
			yyb849 = r.CheckBreak()
		}
		if yyb849 {
			break
		}
		if yyj849 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj849-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym851 := z.EncBinary()
		_ = yym851
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep852 := !z.EncBinary()
			yy2arr852 := z.EncBasicHandle().StructToArray
			var yyfirst852 bool
			var yyq852 [2]bool
			_, _, _, _ = yysep852, yyfirst852, yyq852, yy2arr852
			const yyr852 bool = false
			yyq852[0] = x.APIVersion != ""
			if yyr852 || yy2arr852 {
				r.EncodeArrayStart(2)
			} else {
				var yynn852 int = 1
				for _, b := range yyq852 {
					if b {
						yynn852++
					}
				}
				r.EncodeMapStart(yynn852)
			}
			if yyr852 || yy2arr852 {
				if yyq852[0] {
					yym854 := z.EncBinary()
					_ = yym854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq852[0] {
					yyfirst852 = true
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep852 {
						r.EncodeMapKVSeparator()
					}
					yym855 := z.EncBinary()
					_ = yym855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr852 || yy2arr852 {
				if yysep852 {
					r.EncodeArrayEntrySeparator()
				}
				yym857 := z.EncBinary()
				_ = yym857
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				if yyfirst852 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst852 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				if yysep852 {
					r.EncodeMapKVSeparator()
				}
				yym858 := z.EncBinary()
				_ = yym858
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep852 {
				if yyr852 || yy2arr852 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym859 := z.DecBinary()
	_ = yym859
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl860 := r.ReadMapStart()
			if yyl860 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl860, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl860 := r.ReadArrayStart()
			if yyl860 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl860, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys861Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys861Slc
	var yyhl861 bool = l >= 0
	for yyj861 := 0; ; yyj861++ {
		if yyhl861 {
			if yyj861 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj861 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys861Slc = r.DecodeBytes(yys861Slc, true, true)
		yys861 := string(yys861Slc)
		if !yyhl861 {
			r.ReadMapKVSeparator()
		}
		switch yys861 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys861)
		} // end switch yys861
	} // end for yyj861
	if !yyhl861 {
		r.ReadMapEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj864 int
	var yyb864 bool
	var yyhl864 bool = l >= 0
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj864++
		if yyhl864 {
			yyb864 = yyj864 > l
		} else {
			yyb864 = r.CheckBreak()
		}
		if yyb864 {
			break
		}
		if yyj864 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj864-1, "")
	}
	r.ReadArrayEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym867 := z.EncBinary()
		_ = yym867
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep868 := !z.EncBinary()
			yy2arr868 := z.EncBasicHandle().StructToArray
			var yyfirst868 bool
			var yyq868 [4]bool
			_, _, _, _ = yysep868, yyfirst868, yyq868, yy2arr868
			const yyr868 bool = false
			yyq868[0] = x.Path != ""
			yyq868[2] = x.Host != ""
			yyq868[3] = x.Scheme != ""
			if yyr868 || yy2arr868 {
				r.EncodeArrayStart(4)
			} else {
				var yynn868 int = 1
				for _, b := range yyq868 {
					if b {
						yynn868++
					}
				}
				r.EncodeMapStart(yynn868)
			}
			if yyr868 || yy2arr868 {
				if yyq868[0] {
					yym870 := z.EncBinary()
					_ = yym870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq868[0] {
					yyfirst868 = true
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					if yysep868 {
						r.EncodeMapKVSeparator()
					}
					yym871 := z.EncBinary()
					_ = yym871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr868 || yy2arr868 {
				if yysep868 {
					r.EncodeArrayEntrySeparator()
				}
				yy873 := &x.Port
				yym874 := z.EncBinary()
				_ = yym874
				if false {
				} else if z.HasExtensions() && z.EncExt(yy873) {
				} else if !yym874 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy873)
				} else {
					z.EncFallback(yy873)
				}
			} else {
				if yyfirst868 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst868 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				if yysep868 {
					r.EncodeMapKVSeparator()
				}
				yy875 := &x.Port
				yym876 := z.EncBinary()
				_ = yym876
				if false {
				} else if z.HasExtensions() && z.EncExt(yy875) {
				} else if !yym876 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy875)
				} else {
					z.EncFallback(yy875)
				}
			}
			if yyr868 || yy2arr868 {
				if yysep868 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq868[2] {
					yym878 := z.EncBinary()
					_ = yym878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq868[2] {
					if yyfirst868 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst868 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					if yysep868 {
						r.EncodeMapKVSeparator()
					}
					yym879 := z.EncBinary()
					_ = yym879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr868 || yy2arr868 {
				if yysep868 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq868[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq868[3] {
					if yyfirst868 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst868 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					if yysep868 {
						r.EncodeMapKVSeparator()
					}
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep868 {
				if yyr868 || yy2arr868 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym881 := z.DecBinary()
	_ = yym881
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl882 := r.ReadMapStart()
			if yyl882 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl882, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl882 := r.ReadArrayStart()
			if yyl882 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl882, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys883Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys883Slc
	var yyhl883 bool = l >= 0
	for yyj883 := 0; ; yyj883++ {
		if yyhl883 {
			if yyj883 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj883 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys883Slc = r.DecodeBytes(yys883Slc, true, true)
		yys883 := string(yys883Slc)
		if !yyhl883 {
			r.ReadMapKVSeparator()
		}
		switch yys883 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg2_util.IntOrString{}
			} else {
				yyv885 := &x.Port
				yym886 := z.DecBinary()
				_ = yym886
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv885) {
				} else if !yym886 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv885)
				} else {
					z.DecFallback(yyv885, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys883)
		} // end switch yys883
	} // end for yyj883
	if !yyhl883 {
		r.ReadMapEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj889 int
	var yyb889 bool
	var yyhl889 bool = l >= 0
	yyj889++
	if yyhl889 {
		yyb889 = yyj889 > l
	} else {
		yyb889 = r.CheckBreak()
	}
	if yyb889 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj889++
	if yyhl889 {
		yyb889 = yyj889 > l
	} else {
		yyb889 = r.CheckBreak()
	}
	if yyb889 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Port = pkg2_util.IntOrString{}
	} else {
		yyv891 := &x.Port
		yym892 := z.DecBinary()
		_ = yym892
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv891) {
		} else if !yym892 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv891)
		} else {
			z.DecFallback(yyv891, false)
		}
	}
	yyj889++
	if yyhl889 {
		yyb889 = yyj889 > l
	} else {
		yyb889 = r.CheckBreak()
	}
	if yyb889 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj889++
	if yyhl889 {
		yyb889 = yyj889 > l
	} else {
		yyb889 = r.CheckBreak()
	}
	if yyb889 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj889++
		if yyhl889 {
			yyb889 = yyj889 > l
		} else {
			yyb889 = r.CheckBreak()
		}
		if yyb889 {
			break
		}
		if yyj889 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj889-1, "")
	}
	r.ReadArrayEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym895 := z.EncBinary()
	_ = yym895
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym896 := z.DecBinary()
	_ = yym896
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym897 := z.EncBinary()
		_ = yym897
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep898 := !z.EncBinary()
			yy2arr898 := z.EncBasicHandle().StructToArray
			var yyfirst898 bool
			var yyq898 [1]bool
			_, _, _, _ = yysep898, yyfirst898, yyq898, yy2arr898
			const yyr898 bool = false
			if yyr898 || yy2arr898 {
				r.EncodeArrayStart(1)
			} else {
				var yynn898 int = 1
				for _, b := range yyq898 {
					if b {
						yynn898++
					}
				}
				r.EncodeMapStart(yynn898)
			}
			if yyr898 || yy2arr898 {
				yy900 := &x.Port
				yym901 := z.EncBinary()
				_ = yym901
				if false {
				} else if z.HasExtensions() && z.EncExt(yy900) {
				} else if !yym901 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy900)
				} else {
					z.EncFallback(yy900)
				}
			} else {
				yyfirst898 = true
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				if yysep898 {
					r.EncodeMapKVSeparator()
				}
				yy902 := &x.Port
				yym903 := z.EncBinary()
				_ = yym903
				if false {
				} else if z.HasExtensions() && z.EncExt(yy902) {
				} else if !yym903 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy902)
				} else {
					z.EncFallback(yy902)
				}
			}
			if yysep898 {
				if yyr898 || yy2arr898 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym904 := z.DecBinary()
	_ = yym904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl905 := r.ReadMapStart()
			if yyl905 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl905, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl905 := r.ReadArrayStart()
			if yyl905 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl905, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys906Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys906Slc
	var yyhl906 bool = l >= 0
	for yyj906 := 0; ; yyj906++ {
		if yyhl906 {
			if yyj906 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj906 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys906Slc = r.DecodeBytes(yys906Slc, true, true)
		yys906 := string(yys906Slc)
		if !yyhl906 {
			r.ReadMapKVSeparator()
		}
		switch yys906 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg2_util.IntOrString{}
			} else {
				yyv907 := &x.Port
				yym908 := z.DecBinary()
				_ = yym908
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv907) {
				} else if !yym908 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv907)
				} else {
					z.DecFallback(yyv907, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys906)
		} // end switch yys906
	} // end for yyj906
	if !yyhl906 {
		r.ReadMapEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj909 int
	var yyb909 bool
	var yyhl909 bool = l >= 0
	yyj909++
	if yyhl909 {
		yyb909 = yyj909 > l
	} else {
		yyb909 = r.CheckBreak()
	}
	if yyb909 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg2_util.IntOrString{}
	} else {
		yyv910 := &x.Port
		yym911 := z.DecBinary()
		_ = yym911
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv910) {
		} else if !yym911 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv910)
		} else {
			z.DecFallback(yyv910, false)
		}
	}
	for {
		yyj909++
		if yyhl909 {
			yyb909 = yyj909 > l
		} else {
			yyb909 = r.CheckBreak()
		}
		if yyb909 {
			break
		}
		if yyj909 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj909-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym912 := z.EncBinary()
		_ = yym912
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep913 := !z.EncBinary()
			yy2arr913 := z.EncBasicHandle().StructToArray
			var yyfirst913 bool
			var yyq913 [1]bool
			_, _, _, _ = yysep913, yyfirst913, yyq913, yy2arr913
			const yyr913 bool = false
			yyq913[0] = len(x.Command) != 0
			if yyr913 || yy2arr913 {
				r.EncodeArrayStart(1)
			} else {
				var yynn913 int = 0
				for _, b := range yyq913 {
					if b {
						yynn913++
					}
				}
				r.EncodeMapStart(yynn913)
			}
			if yyr913 || yy2arr913 {
				if yyq913[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym915 := z.EncBinary()
						_ = yym915
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq913[0] {
					yyfirst913 = true
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if yysep913 {
						r.EncodeMapKVSeparator()
					}
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym916 := z.EncBinary()
						_ = yym916
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep913 {
				if yyr913 || yy2arr913 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym917 := z.DecBinary()
	_ = yym917
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl918 := r.ReadMapStart()
			if yyl918 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl918, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl918 := r.ReadArrayStart()
			if yyl918 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl918, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys919Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys919Slc
	var yyhl919 bool = l >= 0
	for yyj919 := 0; ; yyj919++ {
		if yyhl919 {
			if yyj919 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj919 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys919Slc = r.DecodeBytes(yys919Slc, true, true)
		yys919 := string(yys919Slc)
		if !yyhl919 {
			r.ReadMapKVSeparator()
		}
		switch yys919 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv920 := &x.Command
				yym921 := z.DecBinary()
				_ = yym921
				if false {
				} else {
					z.F.DecSliceStringX(yyv920, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys919)
		} // end switch yys919
	} // end for yyj919
	if !yyhl919 {
		r.ReadMapEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj922 int
	var yyb922 bool
	var yyhl922 bool = l >= 0
	yyj922++
	if yyhl922 {
		yyb922 = yyj922 > l
	} else {
		yyb922 = r.CheckBreak()
	}
	if yyb922 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv923 := &x.Command
		yym924 := z.DecBinary()
		_ = yym924
		if false {
		} else {
			z.F.DecSliceStringX(yyv923, false, d)
		}
	}
	for {
		yyj922++
		if yyhl922 {
			yyb922 = yyj922 > l
		} else {
			yyb922 = r.CheckBreak()
		}
		if yyb922 {
			break
		}
		if yyj922 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj922-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym925 := z.EncBinary()
		_ = yym925
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep926 := !z.EncBinary()
			yy2arr926 := z.EncBasicHandle().StructToArray
			var yyfirst926 bool
			var yyq926 [5]bool
			_, _, _, _ = yysep926, yyfirst926, yyq926, yy2arr926
			const yyr926 bool = false
			yyq926[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq926[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq926[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq926[3] = x.InitialDelaySeconds != 0
			yyq926[4] = x.TimeoutSeconds != 0
			if yyr926 || yy2arr926 {
				r.EncodeArrayStart(5)
			} else {
				var yynn926 int = 0
				for _, b := range yyq926 {
					if b {
						yynn926++
					}
				}
				r.EncodeMapStart(yynn926)
			}
			var yyn927 bool
			if x.Handler.Exec == nil {
				yyn927 = true
				goto LABEL927
			}
		LABEL927:
			if yyr926 || yy2arr926 {
				if yyn927 {
					r.EncodeNil()
				} else {
					if yyq926[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq926[0] {
					yyfirst926 = true
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yysep926 {
						r.EncodeMapKVSeparator()
					}
					if yyn927 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn928 bool
			if x.Handler.HTTPGet == nil {
				yyn928 = true
				goto LABEL928
			}
		LABEL928:
			if yyr926 || yy2arr926 {
				if yysep926 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn928 {
					r.EncodeNil()
				} else {
					if yyq926[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq926[1] {
					if yyfirst926 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst926 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yysep926 {
						r.EncodeMapKVSeparator()
					}
					if yyn928 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn929 bool
			if x.Handler.TCPSocket == nil {
				yyn929 = true
				goto LABEL929
			}
		LABEL929:
			if yyr926 || yy2arr926 {
				if yysep926 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn929 {
					r.EncodeNil()
				} else {
					if yyq926[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq926[2] {
					if yyfirst926 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst926 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yysep926 {
						r.EncodeMapKVSeparator()
					}
					if yyn929 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr926 || yy2arr926 {
				if yysep926 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq926[3] {
					yym931 := z.EncBinary()
					_ = yym931
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq926[3] {
					if yyfirst926 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst926 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					if yysep926 {
						r.EncodeMapKVSeparator()
					}
					yym932 := z.EncBinary()
					_ = yym932
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr926 || yy2arr926 {
				if yysep926 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq926[4] {
					yym934 := z.EncBinary()
					_ = yym934
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq926[4] {
					if yyfirst926 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst926 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					if yysep926 {
						r.EncodeMapKVSeparator()
					}
					yym935 := z.EncBinary()
					_ = yym935
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yysep926 {
				if yyr926 || yy2arr926 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym936 := z.DecBinary()
	_ = yym936
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl937 := r.ReadMapStart()
			if yyl937 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl937, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl937 := r.ReadArrayStart()
			if yyl937 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl937, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys938Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys938Slc
	var yyhl938 bool = l >= 0
	for yyj938 := 0; ; yyj938++ {
		if yyhl938 {
			if yyj938 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj938 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys938Slc = r.DecodeBytes(yys938Slc, true, true)
		yys938 := string(yys938Slc)
		if !yyhl938 {
			r.ReadMapKVSeparator()
		}
		switch yys938 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys938)
		} // end switch yys938
	} // end for yyj938
	if !yyhl938 {
		r.ReadMapEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj944 int
	var yyb944 bool
	var yyhl944 bool = l >= 0
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	for {
		yyj944++
		if yyhl944 {
			yyb944 = yyj944 > l
		} else {
			yyb944 = r.CheckBreak()
		}
		if yyb944 {
			break
		}
		if yyj944 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj944-1, "")
	}
	r.ReadArrayEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym950 := z.EncBinary()
	_ = yym950
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym951 := z.DecBinary()
	_ = yym951
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym952 := z.EncBinary()
	_ = yym952
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym953 := z.DecBinary()
	_ = yym953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym954 := z.EncBinary()
		_ = yym954
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep955 := !z.EncBinary()
			yy2arr955 := z.EncBasicHandle().StructToArray
			var yyfirst955 bool
			var yyq955 [2]bool
			_, _, _, _ = yysep955, yyfirst955, yyq955, yy2arr955
			const yyr955 bool = false
			yyq955[0] = len(x.Add) != 0
			yyq955[1] = len(x.Drop) != 0
			if yyr955 || yy2arr955 {
				r.EncodeArrayStart(2)
			} else {
				var yynn955 int = 0
				for _, b := range yyq955 {
					if b {
						yynn955++
					}
				}
				r.EncodeMapStart(yynn955)
			}
			if yyr955 || yy2arr955 {
				if yyq955[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym957 := z.EncBinary()
						_ = yym957
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq955[0] {
					yyfirst955 = true
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if yysep955 {
						r.EncodeMapKVSeparator()
					}
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym958 := z.EncBinary()
						_ = yym958
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr955 || yy2arr955 {
				if yysep955 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq955[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym960 := z.EncBinary()
						_ = yym960
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq955[1] {
					if yyfirst955 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst955 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if yysep955 {
						r.EncodeMapKVSeparator()
					}
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym961 := z.EncBinary()
						_ = yym961
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep955 {
				if yyr955 || yy2arr955 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym962 := z.DecBinary()
	_ = yym962
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl963 := r.ReadMapStart()
			if yyl963 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl963, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl963 := r.ReadArrayStart()
			if yyl963 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl963, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys964Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys964Slc
	var yyhl964 bool = l >= 0
	for yyj964 := 0; ; yyj964++ {
		if yyhl964 {
			if yyj964 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj964 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys964Slc = r.DecodeBytes(yys964Slc, true, true)
		yys964 := string(yys964Slc)
		if !yyhl964 {
			r.ReadMapKVSeparator()
		}
		switch yys964 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv965 := &x.Add
				yym966 := z.DecBinary()
				_ = yym966
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv965), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv967 := &x.Drop
				yym968 := z.DecBinary()
				_ = yym968
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv967), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys964)
		} // end switch yys964
	} // end for yyj964
	if !yyhl964 {
		r.ReadMapEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj969 int
	var yyb969 bool
	var yyhl969 bool = l >= 0
	yyj969++
	if yyhl969 {
		yyb969 = yyj969 > l
	} else {
		yyb969 = r.CheckBreak()
	}
	if yyb969 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv970 := &x.Add
		yym971 := z.DecBinary()
		_ = yym971
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv970), d)
		}
	}
	yyj969++
	if yyhl969 {
		yyb969 = yyj969 > l
	} else {
		yyb969 = r.CheckBreak()
	}
	if yyb969 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv972 := &x.Drop
		yym973 := z.DecBinary()
		_ = yym973
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv972), d)
		}
	}
	for {
		yyj969++
		if yyhl969 {
			yyb969 = yyj969 > l
		} else {
			yyb969 = r.CheckBreak()
		}
		if yyb969 {
			break
		}
		if yyj969 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj969-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym974 := z.EncBinary()
		_ = yym974
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep975 := !z.EncBinary()
			yy2arr975 := z.EncBasicHandle().StructToArray
			var yyfirst975 bool
			var yyq975 [2]bool
			_, _, _, _ = yysep975, yyfirst975, yyq975, yy2arr975
			const yyr975 bool = false
			yyq975[0] = len(x.Limits) != 0
			yyq975[1] = len(x.Requests) != 0
			if yyr975 || yy2arr975 {
				r.EncodeArrayStart(2)
			} else {
				var yynn975 int = 0
				for _, b := range yyq975 {
					if b {
						yynn975++
					}
				}
				r.EncodeMapStart(yynn975)
			}
			if yyr975 || yy2arr975 {
				if yyq975[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq975[0] {
					yyfirst975 = true
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if yysep975 {
						r.EncodeMapKVSeparator()
					}
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr975 || yy2arr975 {
				if yysep975 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq975[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq975[1] {
					if yyfirst975 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst975 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if yysep975 {
						r.EncodeMapKVSeparator()
					}
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep975 {
				if yyr975 || yy2arr975 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym978 := z.DecBinary()
	_ = yym978
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl979 := r.ReadMapStart()
			if yyl979 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl979, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl979 := r.ReadArrayStart()
			if yyl979 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl979, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys980Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys980Slc
	var yyhl980 bool = l >= 0
	for yyj980 := 0; ; yyj980++ {
		if yyhl980 {
			if yyj980 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj980 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys980Slc = r.DecodeBytes(yys980Slc, true, true)
		yys980 := string(yys980Slc)
		if !yyhl980 {
			r.ReadMapKVSeparator()
		}
		switch yys980 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv981 := &x.Limits
				yyv981.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv982 := &x.Requests
				yyv982.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys980)
		} // end switch yys980
	} // end for yyj980
	if !yyhl980 {
		r.ReadMapEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj983 int
	var yyb983 bool
	var yyhl983 bool = l >= 0
	yyj983++
	if yyhl983 {
		yyb983 = yyj983 > l
	} else {
		yyb983 = r.CheckBreak()
	}
	if yyb983 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv984 := &x.Limits
		yyv984.CodecDecodeSelf(d)
	}
	yyj983++
	if yyhl983 {
		yyb983 = yyj983 > l
	} else {
		yyb983 = r.CheckBreak()
	}
	if yyb983 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv985 := &x.Requests
		yyv985.CodecDecodeSelf(d)
	}
	for {
		yyj983++
		if yyhl983 {
			yyb983 = yyj983 > l
		} else {
			yyb983 = r.CheckBreak()
		}
		if yyb983 {
			break
		}
		if yyj983 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj983-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym986 := z.EncBinary()
		_ = yym986
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep987 := !z.EncBinary()
			yy2arr987 := z.EncBasicHandle().StructToArray
			var yyfirst987 bool
			var yyq987 [17]bool
			_, _, _, _ = yysep987, yyfirst987, yyq987, yy2arr987
			const yyr987 bool = false
			yyq987[1] = x.Image != ""
			yyq987[2] = len(x.Command) != 0
			yyq987[3] = len(x.Args) != 0
			yyq987[4] = x.WorkingDir != ""
			yyq987[5] = len(x.Ports) != 0
			yyq987[6] = len(x.Env) != 0
			yyq987[7] = true
			yyq987[8] = len(x.VolumeMounts) != 0
			yyq987[9] = x.LivenessProbe != nil
			yyq987[10] = x.ReadinessProbe != nil
			yyq987[11] = x.Lifecycle != nil
			yyq987[12] = x.TerminationMessagePath != ""
			yyq987[13] = x.ImagePullPolicy != ""
			yyq987[14] = x.SecurityContext != nil
			yyq987[15] = x.Stdin != false
			yyq987[16] = x.TTY != false
			if yyr987 || yy2arr987 {
				r.EncodeArrayStart(17)
			} else {
				var yynn987 int = 1
				for _, b := range yyq987 {
					if b {
						yynn987++
					}
				}
				r.EncodeMapStart(yynn987)
			}
			if yyr987 || yy2arr987 {
				yym989 := z.EncBinary()
				_ = yym989
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst987 = true
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				if yysep987 {
					r.EncodeMapKVSeparator()
				}
				yym990 := z.EncBinary()
				_ = yym990
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[1] {
					yym992 := z.EncBinary()
					_ = yym992
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq987[1] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym995 := z.EncBinary()
						_ = yym995
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq987[2] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym996 := z.EncBinary()
						_ = yym996
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym998 := z.EncBinary()
						_ = yym998
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq987[3] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym999 := z.EncBinary()
						_ = yym999
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[4] {
					yym1001 := z.EncBinary()
					_ = yym1001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq987[4] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					yym1002 := z.EncBinary()
					_ = yym1002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1004 := z.EncBinary()
						_ = yym1004
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq987[5] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1005 := z.EncBinary()
						_ = yym1005
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1007 := z.EncBinary()
						_ = yym1007
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq987[6] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1008 := z.EncBinary()
						_ = yym1008
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[7] {
					yy1010 := &x.Resources
					yy1010.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq987[7] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					yy1011 := &x.Resources
					yy1011.CodecEncodeSelf(e)
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1013 := z.EncBinary()
						_ = yym1013
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq987[8] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1014 := z.EncBinary()
						_ = yym1014
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq987[9] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq987[10] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq987[11] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[12] {
					yym1019 := z.EncBinary()
					_ = yym1019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq987[12] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					yym1020 := z.EncBinary()
					_ = yym1020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq987[13] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq987[14] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[15] {
					yym1024 := z.EncBinary()
					_ = yym1024
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq987[15] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					yym1025 := z.EncBinary()
					_ = yym1025
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr987 || yy2arr987 {
				if yysep987 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq987[16] {
					yym1027 := z.EncBinary()
					_ = yym1027
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq987[16] {
					if yyfirst987 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst987 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					if yysep987 {
						r.EncodeMapKVSeparator()
					}
					yym1028 := z.EncBinary()
					_ = yym1028
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep987 {
				if yyr987 || yy2arr987 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1029 := z.DecBinary()
	_ = yym1029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1030 := r.ReadMapStart()
			if yyl1030 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1030, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1030 := r.ReadArrayStart()
			if yyl1030 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1030, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1031Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1031Slc
	var yyhl1031 bool = l >= 0
	for yyj1031 := 0; ; yyj1031++ {
		if yyhl1031 {
			if yyj1031 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1031 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1031Slc = r.DecodeBytes(yys1031Slc, true, true)
		yys1031 := string(yys1031Slc)
		if !yyhl1031 {
			r.ReadMapKVSeparator()
		}
		switch yys1031 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1034 := &x.Command
				yym1035 := z.DecBinary()
				_ = yym1035
				if false {
				} else {
					z.F.DecSliceStringX(yyv1034, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1036 := &x.Args
				yym1037 := z.DecBinary()
				_ = yym1037
				if false {
				} else {
					z.F.DecSliceStringX(yyv1036, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1039 := &x.Ports
				yym1040 := z.DecBinary()
				_ = yym1040
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1039), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1041 := &x.Env
				yym1042 := z.DecBinary()
				_ = yym1042
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1041), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1043 := &x.Resources
				yyv1043.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1044 := &x.VolumeMounts
				yym1045 := z.DecBinary()
				_ = yym1045
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1044), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1031)
		} // end switch yys1031
	} // end for yyj1031
	if !yyhl1031 {
		r.ReadMapEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1054 int
	var yyb1054 bool
	var yyhl1054 bool = l >= 0
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1057 := &x.Command
		yym1058 := z.DecBinary()
		_ = yym1058
		if false {
		} else {
			z.F.DecSliceStringX(yyv1057, false, d)
		}
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1059 := &x.Args
		yym1060 := z.DecBinary()
		_ = yym1060
		if false {
		} else {
			z.F.DecSliceStringX(yyv1059, false, d)
		}
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1062 := &x.Ports
		yym1063 := z.DecBinary()
		_ = yym1063
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1062), d)
		}
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1064 := &x.Env
		yym1065 := z.DecBinary()
		_ = yym1065
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1064), d)
		}
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1066 := &x.Resources
		yyv1066.CodecDecodeSelf(d)
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1067 := &x.VolumeMounts
		yym1068 := z.DecBinary()
		_ = yym1068
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1067), d)
		}
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1054++
		if yyhl1054 {
			yyb1054 = yyj1054 > l
		} else {
			yyb1054 = r.CheckBreak()
		}
		if yyb1054 {
			break
		}
		if yyj1054 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1054-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1077 := z.EncBinary()
		_ = yym1077
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1078 := !z.EncBinary()
			yy2arr1078 := z.EncBasicHandle().StructToArray
			var yyfirst1078 bool
			var yyq1078 [3]bool
			_, _, _, _ = yysep1078, yyfirst1078, yyq1078, yy2arr1078
			const yyr1078 bool = false
			yyq1078[0] = x.Exec != nil
			yyq1078[1] = x.HTTPGet != nil
			yyq1078[2] = x.TCPSocket != nil
			if yyr1078 || yy2arr1078 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1078 int = 0
				for _, b := range yyq1078 {
					if b {
						yynn1078++
					}
				}
				r.EncodeMapStart(yynn1078)
			}
			if yyr1078 || yy2arr1078 {
				if yyq1078[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1078[0] {
					yyfirst1078 = true
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yysep1078 {
						r.EncodeMapKVSeparator()
					}
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1078 || yy2arr1078 {
				if yysep1078 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1078[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1078[1] {
					if yyfirst1078 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1078 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yysep1078 {
						r.EncodeMapKVSeparator()
					}
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1078 || yy2arr1078 {
				if yysep1078 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1078[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1078[2] {
					if yyfirst1078 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1078 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yysep1078 {
						r.EncodeMapKVSeparator()
					}
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1078 {
				if yyr1078 || yy2arr1078 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1082 := z.DecBinary()
	_ = yym1082
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1083 := r.ReadMapStart()
			if yyl1083 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1083, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1083 := r.ReadArrayStart()
			if yyl1083 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1083, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1084Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1084Slc
	var yyhl1084 bool = l >= 0
	for yyj1084 := 0; ; yyj1084++ {
		if yyhl1084 {
			if yyj1084 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1084 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1084Slc = r.DecodeBytes(yys1084Slc, true, true)
		yys1084 := string(yys1084Slc)
		if !yyhl1084 {
			r.ReadMapKVSeparator()
		}
		switch yys1084 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1084)
		} // end switch yys1084
	} // end for yyj1084
	if !yyhl1084 {
		r.ReadMapEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1088 int
	var yyb1088 bool
	var yyhl1088 bool = l >= 0
	yyj1088++
	if yyhl1088 {
		yyb1088 = yyj1088 > l
	} else {
		yyb1088 = r.CheckBreak()
	}
	if yyb1088 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1088++
	if yyhl1088 {
		yyb1088 = yyj1088 > l
	} else {
		yyb1088 = r.CheckBreak()
	}
	if yyb1088 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1088++
	if yyhl1088 {
		yyb1088 = yyj1088 > l
	} else {
		yyb1088 = r.CheckBreak()
	}
	if yyb1088 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1088++
		if yyhl1088 {
			yyb1088 = yyj1088 > l
		} else {
			yyb1088 = r.CheckBreak()
		}
		if yyb1088 {
			break
		}
		if yyj1088 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1088-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1092 := z.EncBinary()
		_ = yym1092
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1093 := !z.EncBinary()
			yy2arr1093 := z.EncBasicHandle().StructToArray
			var yyfirst1093 bool
			var yyq1093 [2]bool
			_, _, _, _ = yysep1093, yyfirst1093, yyq1093, yy2arr1093
			const yyr1093 bool = false
			yyq1093[0] = x.PostStart != nil
			yyq1093[1] = x.PreStop != nil
			if yyr1093 || yy2arr1093 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1093 int = 0
				for _, b := range yyq1093 {
					if b {
						yynn1093++
					}
				}
				r.EncodeMapStart(yynn1093)
			}
			if yyr1093 || yy2arr1093 {
				if yyq1093[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1093[0] {
					yyfirst1093 = true
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if yysep1093 {
						r.EncodeMapKVSeparator()
					}
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1093 || yy2arr1093 {
				if yysep1093 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1093[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1093[1] {
					if yyfirst1093 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1093 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if yysep1093 {
						r.EncodeMapKVSeparator()
					}
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1093 {
				if yyr1093 || yy2arr1093 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1096 := z.DecBinary()
	_ = yym1096
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1097 := r.ReadMapStart()
			if yyl1097 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1097, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1097 := r.ReadArrayStart()
			if yyl1097 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1097, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1098Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1098Slc
	var yyhl1098 bool = l >= 0
	for yyj1098 := 0; ; yyj1098++ {
		if yyhl1098 {
			if yyj1098 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1098 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1098Slc = r.DecodeBytes(yys1098Slc, true, true)
		yys1098 := string(yys1098Slc)
		if !yyhl1098 {
			r.ReadMapKVSeparator()
		}
		switch yys1098 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1098)
		} // end switch yys1098
	} // end for yyj1098
	if !yyhl1098 {
		r.ReadMapEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1101 int
	var yyb1101 bool
	var yyhl1101 bool = l >= 0
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1101++
		if yyhl1101 {
			yyb1101 = yyj1101 > l
		} else {
			yyb1101 = r.CheckBreak()
		}
		if yyb1101 {
			break
		}
		if yyj1101 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1101-1, "")
	}
	r.ReadArrayEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1104 := z.EncBinary()
	_ = yym1104
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1105 := z.DecBinary()
	_ = yym1105
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1106 := z.EncBinary()
		_ = yym1106
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1107 := !z.EncBinary()
			yy2arr1107 := z.EncBasicHandle().StructToArray
			var yyfirst1107 bool
			var yyq1107 [2]bool
			_, _, _, _ = yysep1107, yyfirst1107, yyq1107, yy2arr1107
			const yyr1107 bool = false
			yyq1107[0] = x.Reason != ""
			yyq1107[1] = x.Message != ""
			if yyr1107 || yy2arr1107 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1107 int = 0
				for _, b := range yyq1107 {
					if b {
						yynn1107++
					}
				}
				r.EncodeMapStart(yynn1107)
			}
			if yyr1107 || yy2arr1107 {
				if yyq1107[0] {
					yym1109 := z.EncBinary()
					_ = yym1109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1107[0] {
					yyfirst1107 = true
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep1107 {
						r.EncodeMapKVSeparator()
					}
					yym1110 := z.EncBinary()
					_ = yym1110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1107 || yy2arr1107 {
				if yysep1107 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1107[1] {
					yym1112 := z.EncBinary()
					_ = yym1112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1107[1] {
					if yyfirst1107 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1107 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep1107 {
						r.EncodeMapKVSeparator()
					}
					yym1113 := z.EncBinary()
					_ = yym1113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1107 {
				if yyr1107 || yy2arr1107 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1114 := z.DecBinary()
	_ = yym1114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1115 := r.ReadMapStart()
			if yyl1115 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1115, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1115 := r.ReadArrayStart()
			if yyl1115 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1115, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1116Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1116Slc
	var yyhl1116 bool = l >= 0
	for yyj1116 := 0; ; yyj1116++ {
		if yyhl1116 {
			if yyj1116 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1116 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1116Slc = r.DecodeBytes(yys1116Slc, true, true)
		yys1116 := string(yys1116Slc)
		if !yyhl1116 {
			r.ReadMapKVSeparator()
		}
		switch yys1116 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1116)
		} // end switch yys1116
	} // end for yyj1116
	if !yyhl1116 {
		r.ReadMapEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1119 int
	var yyb1119 bool
	var yyhl1119 bool = l >= 0
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1119++
		if yyhl1119 {
			yyb1119 = yyj1119 > l
		} else {
			yyb1119 = r.CheckBreak()
		}
		if yyb1119 {
			break
		}
		if yyj1119 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1119-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1122 := z.EncBinary()
		_ = yym1122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1123 := !z.EncBinary()
			yy2arr1123 := z.EncBasicHandle().StructToArray
			var yyfirst1123 bool
			var yyq1123 [1]bool
			_, _, _, _ = yysep1123, yyfirst1123, yyq1123, yy2arr1123
			const yyr1123 bool = false
			yyq1123[0] = true
			if yyr1123 || yy2arr1123 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1123 int = 0
				for _, b := range yyq1123 {
					if b {
						yynn1123++
					}
				}
				r.EncodeMapStart(yynn1123)
			}
			if yyr1123 || yy2arr1123 {
				if yyq1123[0] {
					yy1125 := &x.StartedAt
					yym1126 := z.EncBinary()
					_ = yym1126
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1125) {
					} else if yym1126 {
						z.EncBinaryMarshal(yy1125)
					} else if !yym1126 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1125)
					} else {
						z.EncFallback(yy1125)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1123[0] {
					yyfirst1123 = true
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					if yysep1123 {
						r.EncodeMapKVSeparator()
					}
					yy1127 := &x.StartedAt
					yym1128 := z.EncBinary()
					_ = yym1128
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1127) {
					} else if yym1128 {
						z.EncBinaryMarshal(yy1127)
					} else if !yym1128 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1127)
					} else {
						z.EncFallback(yy1127)
					}
				}
			}
			if yysep1123 {
				if yyr1123 || yy2arr1123 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1129 := z.DecBinary()
	_ = yym1129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1130 := r.ReadMapStart()
			if yyl1130 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1130, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1130 := r.ReadArrayStart()
			if yyl1130 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1131Slc
	var yyhl1131 bool = l >= 0
	for yyj1131 := 0; ; yyj1131++ {
		if yyhl1131 {
			if yyj1131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1131 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1131Slc = r.DecodeBytes(yys1131Slc, true, true)
		yys1131 := string(yys1131Slc)
		if !yyhl1131 {
			r.ReadMapKVSeparator()
		}
		switch yys1131 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_util.Time{}
			} else {
				yyv1132 := &x.StartedAt
				yym1133 := z.DecBinary()
				_ = yym1133
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1132) {
				} else if yym1133 {
					z.DecBinaryUnmarshal(yyv1132)
				} else if !yym1133 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1132)
				} else {
					z.DecFallback(yyv1132, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1131)
		} // end switch yys1131
	} // end for yyj1131
	if !yyhl1131 {
		r.ReadMapEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1134 int
	var yyb1134 bool
	var yyhl1134 bool = l >= 0
	yyj1134++
	if yyhl1134 {
		yyb1134 = yyj1134 > l
	} else {
		yyb1134 = r.CheckBreak()
	}
	if yyb1134 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_util.Time{}
	} else {
		yyv1135 := &x.StartedAt
		yym1136 := z.DecBinary()
		_ = yym1136
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1135) {
		} else if yym1136 {
			z.DecBinaryUnmarshal(yyv1135)
		} else if !yym1136 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1135)
		} else {
			z.DecFallback(yyv1135, false)
		}
	}
	for {
		yyj1134++
		if yyhl1134 {
			yyb1134 = yyj1134 > l
		} else {
			yyb1134 = r.CheckBreak()
		}
		if yyb1134 {
			break
		}
		if yyj1134 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1134-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1137 := z.EncBinary()
		_ = yym1137
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1138 := !z.EncBinary()
			yy2arr1138 := z.EncBasicHandle().StructToArray
			var yyfirst1138 bool
			var yyq1138 [7]bool
			_, _, _, _ = yysep1138, yyfirst1138, yyq1138, yy2arr1138
			const yyr1138 bool = false
			yyq1138[1] = x.Signal != 0
			yyq1138[2] = x.Reason != ""
			yyq1138[3] = x.Message != ""
			yyq1138[4] = true
			yyq1138[5] = true
			yyq1138[6] = x.ContainerID != ""
			if yyr1138 || yy2arr1138 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1138 int = 1
				for _, b := range yyq1138 {
					if b {
						yynn1138++
					}
				}
				r.EncodeMapStart(yynn1138)
			}
			if yyr1138 || yy2arr1138 {
				yym1140 := z.EncBinary()
				_ = yym1140
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				yyfirst1138 = true
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				if yysep1138 {
					r.EncodeMapKVSeparator()
				}
				yym1141 := z.EncBinary()
				_ = yym1141
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1138 || yy2arr1138 {
				if yysep1138 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1138[1] {
					yym1143 := z.EncBinary()
					_ = yym1143
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1138[1] {
					if yyfirst1138 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1138 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					if yysep1138 {
						r.EncodeMapKVSeparator()
					}
					yym1144 := z.EncBinary()
					_ = yym1144
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1138 || yy2arr1138 {
				if yysep1138 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1138[2] {
					yym1146 := z.EncBinary()
					_ = yym1146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1138[2] {
					if yyfirst1138 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1138 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep1138 {
						r.EncodeMapKVSeparator()
					}
					yym1147 := z.EncBinary()
					_ = yym1147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1138 || yy2arr1138 {
				if yysep1138 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1138[3] {
					yym1149 := z.EncBinary()
					_ = yym1149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1138[3] {
					if yyfirst1138 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1138 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep1138 {
						r.EncodeMapKVSeparator()
					}
					yym1150 := z.EncBinary()
					_ = yym1150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1138 || yy2arr1138 {
				if yysep1138 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1138[4] {
					yy1152 := &x.StartedAt
					yym1153 := z.EncBinary()
					_ = yym1153
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1152) {
					} else if yym1153 {
						z.EncBinaryMarshal(yy1152)
					} else if !yym1153 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1152)
					} else {
						z.EncFallback(yy1152)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1138[4] {
					if yyfirst1138 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1138 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					if yysep1138 {
						r.EncodeMapKVSeparator()
					}
					yy1154 := &x.StartedAt
					yym1155 := z.EncBinary()
					_ = yym1155
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1154) {
					} else if yym1155 {
						z.EncBinaryMarshal(yy1154)
					} else if !yym1155 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1154)
					} else {
						z.EncFallback(yy1154)
					}
				}
			}
			if yyr1138 || yy2arr1138 {
				if yysep1138 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1138[5] {
					yy1157 := &x.FinishedAt
					yym1158 := z.EncBinary()
					_ = yym1158
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1157) {
					} else if yym1158 {
						z.EncBinaryMarshal(yy1157)
					} else if !yym1158 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1157)
					} else {
						z.EncFallback(yy1157)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1138[5] {
					if yyfirst1138 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1138 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					if yysep1138 {
						r.EncodeMapKVSeparator()
					}
					yy1159 := &x.FinishedAt
					yym1160 := z.EncBinary()
					_ = yym1160
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1159) {
					} else if yym1160 {
						z.EncBinaryMarshal(yy1159)
					} else if !yym1160 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1159)
					} else {
						z.EncFallback(yy1159)
					}
				}
			}
			if yyr1138 || yy2arr1138 {
				if yysep1138 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1138[6] {
					yym1162 := z.EncBinary()
					_ = yym1162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1138[6] {
					if yyfirst1138 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1138 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					if yysep1138 {
						r.EncodeMapKVSeparator()
					}
					yym1163 := z.EncBinary()
					_ = yym1163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1138 {
				if yyr1138 || yy2arr1138 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1164 := z.DecBinary()
	_ = yym1164
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1165 := r.ReadMapStart()
			if yyl1165 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1165, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1165 := r.ReadArrayStart()
			if yyl1165 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1165, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1166Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1166Slc
	var yyhl1166 bool = l >= 0
	for yyj1166 := 0; ; yyj1166++ {
		if yyhl1166 {
			if yyj1166 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1166 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1166Slc = r.DecodeBytes(yys1166Slc, true, true)
		yys1166 := string(yys1166Slc)
		if !yyhl1166 {
			r.ReadMapKVSeparator()
		}
		switch yys1166 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_util.Time{}
			} else {
				yyv1171 := &x.StartedAt
				yym1172 := z.DecBinary()
				_ = yym1172
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1171) {
				} else if yym1172 {
					z.DecBinaryUnmarshal(yyv1171)
				} else if !yym1172 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1171)
				} else {
					z.DecFallback(yyv1171, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_util.Time{}
			} else {
				yyv1173 := &x.FinishedAt
				yym1174 := z.DecBinary()
				_ = yym1174
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1173) {
				} else if yym1174 {
					z.DecBinaryUnmarshal(yyv1173)
				} else if !yym1174 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1173)
				} else {
					z.DecFallback(yyv1173, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1166)
		} // end switch yys1166
	} // end for yyj1166
	if !yyhl1166 {
		r.ReadMapEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1176 int
	var yyb1176 bool
	var yyhl1176 bool = l >= 0
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_util.Time{}
	} else {
		yyv1181 := &x.StartedAt
		yym1182 := z.DecBinary()
		_ = yym1182
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1181) {
		} else if yym1182 {
			z.DecBinaryUnmarshal(yyv1181)
		} else if !yym1182 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1181)
		} else {
			z.DecFallback(yyv1181, false)
		}
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_util.Time{}
	} else {
		yyv1183 := &x.FinishedAt
		yym1184 := z.DecBinary()
		_ = yym1184
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1183) {
		} else if yym1184 {
			z.DecBinaryUnmarshal(yyv1183)
		} else if !yym1184 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1183)
		} else {
			z.DecFallback(yyv1183, false)
		}
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1176++
		if yyhl1176 {
			yyb1176 = yyj1176 > l
		} else {
			yyb1176 = r.CheckBreak()
		}
		if yyb1176 {
			break
		}
		if yyj1176 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1176-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1186 := z.EncBinary()
		_ = yym1186
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1187 := !z.EncBinary()
			yy2arr1187 := z.EncBasicHandle().StructToArray
			var yyfirst1187 bool
			var yyq1187 [3]bool
			_, _, _, _ = yysep1187, yyfirst1187, yyq1187, yy2arr1187
			const yyr1187 bool = false
			yyq1187[0] = x.Waiting != nil
			yyq1187[1] = x.Running != nil
			yyq1187[2] = x.Terminated != nil
			if yyr1187 || yy2arr1187 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1187 int = 0
				for _, b := range yyq1187 {
					if b {
						yynn1187++
					}
				}
				r.EncodeMapStart(yynn1187)
			}
			if yyr1187 || yy2arr1187 {
				if yyq1187[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1187[0] {
					yyfirst1187 = true
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if yysep1187 {
						r.EncodeMapKVSeparator()
					}
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1187 || yy2arr1187 {
				if yysep1187 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1187[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1187[1] {
					if yyfirst1187 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1187 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if yysep1187 {
						r.EncodeMapKVSeparator()
					}
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1187 || yy2arr1187 {
				if yysep1187 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1187[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1187[2] {
					if yyfirst1187 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1187 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if yysep1187 {
						r.EncodeMapKVSeparator()
					}
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1187 {
				if yyr1187 || yy2arr1187 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1191 := z.DecBinary()
	_ = yym1191
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1192 := r.ReadMapStart()
			if yyl1192 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1192, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1192 := r.ReadArrayStart()
			if yyl1192 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1192, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1193Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1193Slc
	var yyhl1193 bool = l >= 0
	for yyj1193 := 0; ; yyj1193++ {
		if yyhl1193 {
			if yyj1193 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1193 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1193Slc = r.DecodeBytes(yys1193Slc, true, true)
		yys1193 := string(yys1193Slc)
		if !yyhl1193 {
			r.ReadMapKVSeparator()
		}
		switch yys1193 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1193)
		} // end switch yys1193
	} // end for yyj1193
	if !yyhl1193 {
		r.ReadMapEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1197 int
	var yyb1197 bool
	var yyhl1197 bool = l >= 0
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1197++
		if yyhl1197 {
			yyb1197 = yyj1197 > l
		} else {
			yyb1197 = r.CheckBreak()
		}
		if yyb1197 {
			break
		}
		if yyj1197 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1197-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1201 := z.EncBinary()
		_ = yym1201
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1202 := !z.EncBinary()
			yy2arr1202 := z.EncBasicHandle().StructToArray
			var yyfirst1202 bool
			var yyq1202 [8]bool
			_, _, _, _ = yysep1202, yyfirst1202, yyq1202, yy2arr1202
			const yyr1202 bool = false
			yyq1202[1] = true
			yyq1202[2] = true
			yyq1202[7] = x.ContainerID != ""
			if yyr1202 || yy2arr1202 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1202 int = 5
				for _, b := range yyq1202 {
					if b {
						yynn1202++
					}
				}
				r.EncodeMapStart(yynn1202)
			}
			if yyr1202 || yy2arr1202 {
				yym1204 := z.EncBinary()
				_ = yym1204
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst1202 = true
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				if yysep1202 {
					r.EncodeMapKVSeparator()
				}
				yym1205 := z.EncBinary()
				_ = yym1205
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1202 || yy2arr1202 {
				if yysep1202 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1202[1] {
					yy1207 := &x.State
					yy1207.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1202[1] {
					if yyfirst1202 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1202 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					if yysep1202 {
						r.EncodeMapKVSeparator()
					}
					yy1208 := &x.State
					yy1208.CodecEncodeSelf(e)
				}
			}
			if yyr1202 || yy2arr1202 {
				if yysep1202 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1202[2] {
					yy1210 := &x.LastTerminationState
					yy1210.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1202[2] {
					if yyfirst1202 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1202 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					if yysep1202 {
						r.EncodeMapKVSeparator()
					}
					yy1211 := &x.LastTerminationState
					yy1211.CodecEncodeSelf(e)
				}
			}
			if yyr1202 || yy2arr1202 {
				if yysep1202 {
					r.EncodeArrayEntrySeparator()
				}
				yym1213 := z.EncBinary()
				_ = yym1213
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				if yyfirst1202 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1202 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				if yysep1202 {
					r.EncodeMapKVSeparator()
				}
				yym1214 := z.EncBinary()
				_ = yym1214
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1202 || yy2arr1202 {
				if yysep1202 {
					r.EncodeArrayEntrySeparator()
				}
				yym1216 := z.EncBinary()
				_ = yym1216
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				if yyfirst1202 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1202 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				if yysep1202 {
					r.EncodeMapKVSeparator()
				}
				yym1217 := z.EncBinary()
				_ = yym1217
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1202 || yy2arr1202 {
				if yysep1202 {
					r.EncodeArrayEntrySeparator()
				}
				yym1219 := z.EncBinary()
				_ = yym1219
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				if yyfirst1202 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1202 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				if yysep1202 {
					r.EncodeMapKVSeparator()
				}
				yym1220 := z.EncBinary()
				_ = yym1220
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1202 || yy2arr1202 {
				if yysep1202 {
					r.EncodeArrayEntrySeparator()
				}
				yym1222 := z.EncBinary()
				_ = yym1222
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				if yyfirst1202 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1202 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				if yysep1202 {
					r.EncodeMapKVSeparator()
				}
				yym1223 := z.EncBinary()
				_ = yym1223
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1202 || yy2arr1202 {
				if yysep1202 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1202[7] {
					yym1225 := z.EncBinary()
					_ = yym1225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1202[7] {
					if yyfirst1202 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1202 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					if yysep1202 {
						r.EncodeMapKVSeparator()
					}
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1202 {
				if yyr1202 || yy2arr1202 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1227 := z.DecBinary()
	_ = yym1227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1228 := r.ReadMapStart()
			if yyl1228 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1228, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1228 := r.ReadArrayStart()
			if yyl1228 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1228, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1229Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1229Slc
	var yyhl1229 bool = l >= 0
	for yyj1229 := 0; ; yyj1229++ {
		if yyhl1229 {
			if yyj1229 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1229 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1229Slc = r.DecodeBytes(yys1229Slc, true, true)
		yys1229 := string(yys1229Slc)
		if !yyhl1229 {
			r.ReadMapKVSeparator()
		}
		switch yys1229 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1231 := &x.State
				yyv1231.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1232 := &x.LastTerminationState
				yyv1232.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1229)
		} // end switch yys1229
	} // end for yyj1229
	if !yyhl1229 {
		r.ReadMapEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1238 int
	var yyb1238 bool
	var yyhl1238 bool = l >= 0
	yyj1238++
	if yyhl1238 {
		yyb1238 = yyj1238 > l
	} else {
		yyb1238 = r.CheckBreak()
	}
	if yyb1238 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1238++
	if yyhl1238 {
		yyb1238 = yyj1238 > l
	} else {
		yyb1238 = r.CheckBreak()
	}
	if yyb1238 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1240 := &x.State
		yyv1240.CodecDecodeSelf(d)
	}
	yyj1238++
	if yyhl1238 {
		yyb1238 = yyj1238 > l
	} else {
		yyb1238 = r.CheckBreak()
	}
	if yyb1238 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1241 := &x.LastTerminationState
		yyv1241.CodecDecodeSelf(d)
	}
	yyj1238++
	if yyhl1238 {
		yyb1238 = yyj1238 > l
	} else {
		yyb1238 = r.CheckBreak()
	}
	if yyb1238 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1238++
	if yyhl1238 {
		yyb1238 = yyj1238 > l
	} else {
		yyb1238 = r.CheckBreak()
	}
	if yyb1238 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1238++
	if yyhl1238 {
		yyb1238 = yyj1238 > l
	} else {
		yyb1238 = r.CheckBreak()
	}
	if yyb1238 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1238++
	if yyhl1238 {
		yyb1238 = yyj1238 > l
	} else {
		yyb1238 = r.CheckBreak()
	}
	if yyb1238 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1238++
	if yyhl1238 {
		yyb1238 = yyj1238 > l
	} else {
		yyb1238 = r.CheckBreak()
	}
	if yyb1238 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1238++
		if yyhl1238 {
			yyb1238 = yyj1238 > l
		} else {
			yyb1238 = r.CheckBreak()
		}
		if yyb1238 {
			break
		}
		if yyj1238 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1238-1, "")
	}
	r.ReadArrayEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1247 := z.EncBinary()
	_ = yym1247
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1248 := z.DecBinary()
	_ = yym1248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1249 := z.EncBinary()
	_ = yym1249
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1250 := z.DecBinary()
	_ = yym1250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1251 := z.EncBinary()
		_ = yym1251
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1252 := !z.EncBinary()
			yy2arr1252 := z.EncBasicHandle().StructToArray
			var yyfirst1252 bool
			var yyq1252 [2]bool
			_, _, _, _ = yysep1252, yyfirst1252, yyq1252, yy2arr1252
			const yyr1252 bool = false
			if yyr1252 || yy2arr1252 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1252 int = 2
				for _, b := range yyq1252 {
					if b {
						yynn1252++
					}
				}
				r.EncodeMapStart(yynn1252)
			}
			if yyr1252 || yy2arr1252 {
				x.Type.CodecEncodeSelf(e)
			} else {
				yyfirst1252 = true
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				if yysep1252 {
					r.EncodeMapKVSeparator()
				}
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1252 || yy2arr1252 {
				if yysep1252 {
					r.EncodeArrayEntrySeparator()
				}
				x.Status.CodecEncodeSelf(e)
			} else {
				if yyfirst1252 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1252 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				if yysep1252 {
					r.EncodeMapKVSeparator()
				}
				x.Status.CodecEncodeSelf(e)
			}
			if yysep1252 {
				if yyr1252 || yy2arr1252 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1255 := z.DecBinary()
	_ = yym1255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1256 := r.ReadMapStart()
			if yyl1256 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1256, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1256 := r.ReadArrayStart()
			if yyl1256 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1257Slc
	var yyhl1257 bool = l >= 0
	for yyj1257 := 0; ; yyj1257++ {
		if yyhl1257 {
			if yyj1257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1257 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1257Slc = r.DecodeBytes(yys1257Slc, true, true)
		yys1257 := string(yys1257Slc)
		if !yyhl1257 {
			r.ReadMapKVSeparator()
		}
		switch yys1257 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1257)
		} // end switch yys1257
	} // end for yyj1257
	if !yyhl1257 {
		r.ReadMapEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1260 int
	var yyb1260 bool
	var yyhl1260 bool = l >= 0
	yyj1260++
	if yyhl1260 {
		yyb1260 = yyj1260 > l
	} else {
		yyb1260 = r.CheckBreak()
	}
	if yyb1260 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1260++
	if yyhl1260 {
		yyb1260 = yyj1260 > l
	} else {
		yyb1260 = r.CheckBreak()
	}
	if yyb1260 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	for {
		yyj1260++
		if yyhl1260 {
			yyb1260 = yyj1260 > l
		} else {
			yyb1260 = r.CheckBreak()
		}
		if yyb1260 {
			break
		}
		if yyj1260 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1260-1, "")
	}
	r.ReadArrayEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1263 := z.EncBinary()
	_ = yym1263
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1264 := z.DecBinary()
	_ = yym1264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1265 := z.EncBinary()
	_ = yym1265
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1266 := z.DecBinary()
	_ = yym1266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1267 := z.EncBinary()
		_ = yym1267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1268 := !z.EncBinary()
			yy2arr1268 := z.EncBasicHandle().StructToArray
			var yyfirst1268 bool
			var yyq1268 [12]bool
			_, _, _, _ = yysep1268, yyfirst1268, yyq1268, yy2arr1268
			const yyr1268 bool = false
			yyq1268[0] = len(x.Volumes) != 0
			yyq1268[2] = x.RestartPolicy != ""
			yyq1268[3] = x.TerminationGracePeriodSeconds != nil
			yyq1268[4] = x.ActiveDeadlineSeconds != nil
			yyq1268[5] = x.DNSPolicy != ""
			yyq1268[6] = len(x.NodeSelector) != 0
			yyq1268[7] = x.ServiceAccountName != ""
			yyq1268[8] = x.DeprecatedServiceAccount != ""
			yyq1268[9] = x.NodeName != ""
			yyq1268[10] = x.HostNetwork != false
			yyq1268[11] = len(x.ImagePullSecrets) != 0
			if yyr1268 || yy2arr1268 {
				r.EncodeArrayStart(12)
			} else {
				var yynn1268 int = 1
				for _, b := range yyq1268 {
					if b {
						yynn1268++
					}
				}
				r.EncodeMapStart(yynn1268)
			}
			if yyr1268 || yy2arr1268 {
				if yyq1268[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1270 := z.EncBinary()
						_ = yym1270
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1268[0] {
					yyfirst1268 = true
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					if yysep1268 {
						r.EncodeMapKVSeparator()
					}
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1271 := z.EncBinary()
						_ = yym1271
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1268 || yy2arr1268 {
				if yysep1268 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1273 := z.EncBinary()
					_ = yym1273
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				if yyfirst1268 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1268 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if yysep1268 {
					r.EncodeMapKVSeparator()
				}
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1274 := z.EncBinary()
					_ = yym1274
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1268 || yy2arr1268 {
				if yysep1268 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1268[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1268[2] {
					if yyfirst1268 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1268 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					if yysep1268 {
						r.EncodeMapKVSeparator()
					}
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1268 || yy2arr1268 {
				if yysep1268 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1268[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1277 := *x.TerminationGracePeriodSeconds
						yym1278 := z.EncBinary()
						_ = yym1278
						if false {
						} else {
							r.EncodeInt(int64(yy1277))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1268[3] {
					if yyfirst1268 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1268 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if yysep1268 {
						r.EncodeMapKVSeparator()
					}
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1279 := *x.TerminationGracePeriodSeconds
						yym1280 := z.EncBinary()
						_ = yym1280
						if false {
						} else {
							r.EncodeInt(int64(yy1279))
						}
					}
				}
			}
			if yyr1268 || yy2arr1268 {
				if yysep1268 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1268[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1282 := *x.ActiveDeadlineSeconds
						yym1283 := z.EncBinary()
						_ = yym1283
						if false {
						} else {
							r.EncodeInt(int64(yy1282))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1268[4] {
					if yyfirst1268 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1268 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if yysep1268 {
						r.EncodeMapKVSeparator()
					}
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1284 := *x.ActiveDeadlineSeconds
						yym1285 := z.EncBinary()
						_ = yym1285
						if false {
						} else {
							r.EncodeInt(int64(yy1284))
						}
					}
				}
			}
			if yyr1268 || yy2arr1268 {
				if yysep1268 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1268[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1268[5] {
					if yyfirst1268 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1268 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					if yysep1268 {
						r.EncodeMapKVSeparator()
					}
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1268 || yy2arr1268 {
				if yysep1268 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1268[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1288 := z.EncBinary()
						_ = yym1288
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1268[6] {
					if yyfirst1268 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1268 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if yysep1268 {
						r.EncodeMapKVSeparator()
					}
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1289 := z.EncBinary()
						_ = yym1289
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1268 || yy2arr1268 {
				if yysep1268 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1268[7] {
					yym1291 := z.EncBinary()
					_ = yym1291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1268[7] {
					if yyfirst1268 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1268 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					if yysep1268 {
						r.EncodeMapKVSeparator()
					}
					yym1292 := z.EncBinary()
					_ = yym1292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1268 || yy2arr1268 {
				if yysep1268 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1268[8] {
					yym1294 := z.EncBinary()
					_ = yym1294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1268[8] {
					if yyfirst1268 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1268 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					if yysep1268 {
						r.EncodeMapKVSeparator()
					}
					yym1295 := z.EncBinary()
					_ = yym1295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1268 || yy2arr1268 {
				if yysep1268 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1268[9] {
					yym1297 := z.EncBinary()
					_ = yym1297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1268[9] {
					if yyfirst1268 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1268 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					if yysep1268 {
						r.EncodeMapKVSeparator()
					}
					yym1298 := z.EncBinary()
					_ = yym1298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1268 || yy2arr1268 {
				if yysep1268 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1268[10] {
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1268[10] {
					if yyfirst1268 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1268 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					if yysep1268 {
						r.EncodeMapKVSeparator()
					}
					yym1301 := z.EncBinary()
					_ = yym1301
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1268 || yy2arr1268 {
				if yysep1268 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1268[11] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1303 := z.EncBinary()
						_ = yym1303
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1268[11] {
					if yyfirst1268 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1268 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if yysep1268 {
						r.EncodeMapKVSeparator()
					}
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1304 := z.EncBinary()
						_ = yym1304
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1268 {
				if yyr1268 || yy2arr1268 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1305 := z.DecBinary()
	_ = yym1305
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1306 := r.ReadMapStart()
			if yyl1306 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1306, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1306 := r.ReadArrayStart()
			if yyl1306 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1306, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1307Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1307Slc
	var yyhl1307 bool = l >= 0
	for yyj1307 := 0; ; yyj1307++ {
		if yyhl1307 {
			if yyj1307 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1307 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1307Slc = r.DecodeBytes(yys1307Slc, true, true)
		yys1307 := string(yys1307Slc)
		if !yyhl1307 {
			r.ReadMapKVSeparator()
		}
		switch yys1307 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1308 := &x.Volumes
				yym1309 := z.DecBinary()
				_ = yym1309
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1308), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1310 := &x.Containers
				yym1311 := z.DecBinary()
				_ = yym1311
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1310), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1314 := z.DecBinary()
				_ = yym1314
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1316 := z.DecBinary()
				_ = yym1316
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1318 := &x.NodeSelector
				yym1319 := z.DecBinary()
				_ = yym1319
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1318, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1324 := &x.ImagePullSecrets
				yym1325 := z.DecBinary()
				_ = yym1325
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1324), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1307)
		} // end switch yys1307
	} // end for yyj1307
	if !yyhl1307 {
		r.ReadMapEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1326 int
	var yyb1326 bool
	var yyhl1326 bool = l >= 0
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1327 := &x.Volumes
		yym1328 := z.DecBinary()
		_ = yym1328
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1327), d)
		}
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1329 := &x.Containers
		yym1330 := z.DecBinary()
		_ = yym1330
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1329), d)
		}
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1333 := z.DecBinary()
		_ = yym1333
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1335 := z.DecBinary()
		_ = yym1335
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1337 := &x.NodeSelector
		yym1338 := z.DecBinary()
		_ = yym1338
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1337, false, d)
		}
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1343 := &x.ImagePullSecrets
		yym1344 := z.DecBinary()
		_ = yym1344
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1343), d)
		}
	}
	for {
		yyj1326++
		if yyhl1326 {
			yyb1326 = yyj1326 > l
		} else {
			yyb1326 = r.CheckBreak()
		}
		if yyb1326 {
			break
		}
		if yyj1326 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1326-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1345 := z.EncBinary()
		_ = yym1345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1346 := !z.EncBinary()
			yy2arr1346 := z.EncBasicHandle().StructToArray
			var yyfirst1346 bool
			var yyq1346 [8]bool
			_, _, _, _ = yysep1346, yyfirst1346, yyq1346, yy2arr1346
			const yyr1346 bool = false
			yyq1346[0] = x.Phase != ""
			yyq1346[1] = len(x.Conditions) != 0
			yyq1346[2] = x.Message != ""
			yyq1346[3] = x.Reason != ""
			yyq1346[4] = x.HostIP != ""
			yyq1346[5] = x.PodIP != ""
			yyq1346[6] = x.StartTime != nil
			yyq1346[7] = len(x.ContainerStatuses) != 0
			if yyr1346 || yy2arr1346 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1346 int = 0
				for _, b := range yyq1346 {
					if b {
						yynn1346++
					}
				}
				r.EncodeMapStart(yynn1346)
			}
			if yyr1346 || yy2arr1346 {
				if yyq1346[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1346[0] {
					yyfirst1346 = true
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					if yysep1346 {
						r.EncodeMapKVSeparator()
					}
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1346 || yy2arr1346 {
				if yysep1346 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1346[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1349 := z.EncBinary()
						_ = yym1349
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1346[1] {
					if yyfirst1346 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1346 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if yysep1346 {
						r.EncodeMapKVSeparator()
					}
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1350 := z.EncBinary()
						_ = yym1350
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				if yysep1346 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1346[2] {
					yym1352 := z.EncBinary()
					_ = yym1352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1346[2] {
					if yyfirst1346 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1346 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep1346 {
						r.EncodeMapKVSeparator()
					}
					yym1353 := z.EncBinary()
					_ = yym1353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				if yysep1346 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1346[3] {
					yym1355 := z.EncBinary()
					_ = yym1355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1346[3] {
					if yyfirst1346 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1346 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep1346 {
						r.EncodeMapKVSeparator()
					}
					yym1356 := z.EncBinary()
					_ = yym1356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				if yysep1346 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1346[4] {
					yym1358 := z.EncBinary()
					_ = yym1358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1346[4] {
					if yyfirst1346 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1346 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					if yysep1346 {
						r.EncodeMapKVSeparator()
					}
					yym1359 := z.EncBinary()
					_ = yym1359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				if yysep1346 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1346[5] {
					yym1361 := z.EncBinary()
					_ = yym1361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1346[5] {
					if yyfirst1346 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1346 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					if yysep1346 {
						r.EncodeMapKVSeparator()
					}
					yym1362 := z.EncBinary()
					_ = yym1362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				if yysep1346 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1346[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1364 := z.EncBinary()
						_ = yym1364
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1364 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1364 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1346[6] {
					if yyfirst1346 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1346 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if yysep1346 {
						r.EncodeMapKVSeparator()
					}
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1365 := z.EncBinary()
						_ = yym1365
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1365 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1365 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				if yysep1346 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1346[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1367 := z.EncBinary()
						_ = yym1367
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1346[7] {
					if yyfirst1346 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1346 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if yysep1346 {
						r.EncodeMapKVSeparator()
					}
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1368 := z.EncBinary()
						_ = yym1368
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1346 {
				if yyr1346 || yy2arr1346 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1369 := z.DecBinary()
	_ = yym1369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1370 := r.ReadMapStart()
			if yyl1370 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1370, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1370 := r.ReadArrayStart()
			if yyl1370 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1370, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1371Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1371Slc
	var yyhl1371 bool = l >= 0
	for yyj1371 := 0; ; yyj1371++ {
		if yyhl1371 {
			if yyj1371 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1371 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1371Slc = r.DecodeBytes(yys1371Slc, true, true)
		yys1371 := string(yys1371Slc)
		if !yyhl1371 {
			r.ReadMapKVSeparator()
		}
		switch yys1371 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1373 := &x.Conditions
				yym1374 := z.DecBinary()
				_ = yym1374
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1373), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_util.Time)
				}
				yym1380 := z.DecBinary()
				_ = yym1380
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1380 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1380 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1381 := &x.ContainerStatuses
				yym1382 := z.DecBinary()
				_ = yym1382
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1381), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1371)
		} // end switch yys1371
	} // end for yyj1371
	if !yyhl1371 {
		r.ReadMapEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1383 int
	var yyb1383 bool
	var yyhl1383 bool = l >= 0
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1385 := &x.Conditions
		yym1386 := z.DecBinary()
		_ = yym1386
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1385), d)
		}
	}
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_util.Time)
		}
		yym1392 := z.DecBinary()
		_ = yym1392
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1392 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1392 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1393 := &x.ContainerStatuses
		yym1394 := z.DecBinary()
		_ = yym1394
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1393), d)
		}
	}
	for {
		yyj1383++
		if yyhl1383 {
			yyb1383 = yyj1383 > l
		} else {
			yyb1383 = r.CheckBreak()
		}
		if yyb1383 {
			break
		}
		if yyj1383 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1383-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1395 := z.EncBinary()
		_ = yym1395
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1396 := !z.EncBinary()
			yy2arr1396 := z.EncBasicHandle().StructToArray
			var yyfirst1396 bool
			var yyq1396 [4]bool
			_, _, _, _ = yysep1396, yyfirst1396, yyq1396, yy2arr1396
			const yyr1396 bool = false
			yyq1396[0] = x.Kind != ""
			yyq1396[1] = x.APIVersion != ""
			yyq1396[2] = true
			yyq1396[3] = true
			if yyr1396 || yy2arr1396 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1396 int = 0
				for _, b := range yyq1396 {
					if b {
						yynn1396++
					}
				}
				r.EncodeMapStart(yynn1396)
			}
			if yyr1396 || yy2arr1396 {
				if yyq1396[0] {
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1396[0] {
					yyfirst1396 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1396 {
						r.EncodeMapKVSeparator()
					}
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1396 || yy2arr1396 {
				if yysep1396 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1396[1] {
					yym1401 := z.EncBinary()
					_ = yym1401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1396[1] {
					if yyfirst1396 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1396 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1396 {
						r.EncodeMapKVSeparator()
					}
					yym1402 := z.EncBinary()
					_ = yym1402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1396 || yy2arr1396 {
				if yysep1396 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1396[2] {
					yy1404 := &x.ObjectMeta
					yy1404.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1396[2] {
					if yyfirst1396 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1396 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1396 {
						r.EncodeMapKVSeparator()
					}
					yy1405 := &x.ObjectMeta
					yy1405.CodecEncodeSelf(e)
				}
			}
			if yyr1396 || yy2arr1396 {
				if yysep1396 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1396[3] {
					yy1407 := &x.Status
					yy1407.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1396[3] {
					if yyfirst1396 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1396 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep1396 {
						r.EncodeMapKVSeparator()
					}
					yy1408 := &x.Status
					yy1408.CodecEncodeSelf(e)
				}
			}
			if yysep1396 {
				if yyr1396 || yy2arr1396 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1409 := z.DecBinary()
	_ = yym1409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1410 := r.ReadMapStart()
			if yyl1410 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1410, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1410 := r.ReadArrayStart()
			if yyl1410 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1410, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1411Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1411Slc
	var yyhl1411 bool = l >= 0
	for yyj1411 := 0; ; yyj1411++ {
		if yyhl1411 {
			if yyj1411 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1411 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1411Slc = r.DecodeBytes(yys1411Slc, true, true)
		yys1411 := string(yys1411Slc)
		if !yyhl1411 {
			r.ReadMapKVSeparator()
		}
		switch yys1411 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1414 := &x.ObjectMeta
				yyv1414.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1415 := &x.Status
				yyv1415.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1411)
		} // end switch yys1411
	} // end for yyj1411
	if !yyhl1411 {
		r.ReadMapEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1416 int
	var yyb1416 bool
	var yyhl1416 bool = l >= 0
	yyj1416++
	if yyhl1416 {
		yyb1416 = yyj1416 > l
	} else {
		yyb1416 = r.CheckBreak()
	}
	if yyb1416 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1416++
	if yyhl1416 {
		yyb1416 = yyj1416 > l
	} else {
		yyb1416 = r.CheckBreak()
	}
	if yyb1416 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1416++
	if yyhl1416 {
		yyb1416 = yyj1416 > l
	} else {
		yyb1416 = r.CheckBreak()
	}
	if yyb1416 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1419 := &x.ObjectMeta
		yyv1419.CodecDecodeSelf(d)
	}
	yyj1416++
	if yyhl1416 {
		yyb1416 = yyj1416 > l
	} else {
		yyb1416 = r.CheckBreak()
	}
	if yyb1416 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1420 := &x.Status
		yyv1420.CodecDecodeSelf(d)
	}
	for {
		yyj1416++
		if yyhl1416 {
			yyb1416 = yyj1416 > l
		} else {
			yyb1416 = r.CheckBreak()
		}
		if yyb1416 {
			break
		}
		if yyj1416 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1416-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1421 := z.EncBinary()
		_ = yym1421
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1422 := !z.EncBinary()
			yy2arr1422 := z.EncBasicHandle().StructToArray
			var yyfirst1422 bool
			var yyq1422 [5]bool
			_, _, _, _ = yysep1422, yyfirst1422, yyq1422, yy2arr1422
			const yyr1422 bool = false
			yyq1422[0] = x.Kind != ""
			yyq1422[1] = x.APIVersion != ""
			yyq1422[2] = true
			yyq1422[3] = true
			yyq1422[4] = true
			if yyr1422 || yy2arr1422 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1422 int = 0
				for _, b := range yyq1422 {
					if b {
						yynn1422++
					}
				}
				r.EncodeMapStart(yynn1422)
			}
			if yyr1422 || yy2arr1422 {
				if yyq1422[0] {
					yym1424 := z.EncBinary()
					_ = yym1424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1422[0] {
					yyfirst1422 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1422 {
						r.EncodeMapKVSeparator()
					}
					yym1425 := z.EncBinary()
					_ = yym1425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1422 || yy2arr1422 {
				if yysep1422 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1422[1] {
					yym1427 := z.EncBinary()
					_ = yym1427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1422[1] {
					if yyfirst1422 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1422 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1422 {
						r.EncodeMapKVSeparator()
					}
					yym1428 := z.EncBinary()
					_ = yym1428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1422 || yy2arr1422 {
				if yysep1422 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1422[2] {
					yy1430 := &x.ObjectMeta
					yy1430.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1422[2] {
					if yyfirst1422 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1422 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1422 {
						r.EncodeMapKVSeparator()
					}
					yy1431 := &x.ObjectMeta
					yy1431.CodecEncodeSelf(e)
				}
			}
			if yyr1422 || yy2arr1422 {
				if yysep1422 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1422[3] {
					yy1433 := &x.Spec
					yy1433.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1422[3] {
					if yyfirst1422 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1422 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep1422 {
						r.EncodeMapKVSeparator()
					}
					yy1434 := &x.Spec
					yy1434.CodecEncodeSelf(e)
				}
			}
			if yyr1422 || yy2arr1422 {
				if yysep1422 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1422[4] {
					yy1436 := &x.Status
					yy1436.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1422[4] {
					if yyfirst1422 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1422 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep1422 {
						r.EncodeMapKVSeparator()
					}
					yy1437 := &x.Status
					yy1437.CodecEncodeSelf(e)
				}
			}
			if yysep1422 {
				if yyr1422 || yy2arr1422 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1438 := z.DecBinary()
	_ = yym1438
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1439 := r.ReadMapStart()
			if yyl1439 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1439, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1439 := r.ReadArrayStart()
			if yyl1439 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1439, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1440Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1440Slc
	var yyhl1440 bool = l >= 0
	for yyj1440 := 0; ; yyj1440++ {
		if yyhl1440 {
			if yyj1440 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1440 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1440Slc = r.DecodeBytes(yys1440Slc, true, true)
		yys1440 := string(yys1440Slc)
		if !yyhl1440 {
			r.ReadMapKVSeparator()
		}
		switch yys1440 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1443 := &x.ObjectMeta
				yyv1443.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1444 := &x.Spec
				yyv1444.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1445 := &x.Status
				yyv1445.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1440)
		} // end switch yys1440
	} // end for yyj1440
	if !yyhl1440 {
		r.ReadMapEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1446 int
	var yyb1446 bool
	var yyhl1446 bool = l >= 0
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1449 := &x.ObjectMeta
		yyv1449.CodecDecodeSelf(d)
	}
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1450 := &x.Spec
		yyv1450.CodecDecodeSelf(d)
	}
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1451 := &x.Status
		yyv1451.CodecDecodeSelf(d)
	}
	for {
		yyj1446++
		if yyhl1446 {
			yyb1446 = yyj1446 > l
		} else {
			yyb1446 = r.CheckBreak()
		}
		if yyb1446 {
			break
		}
		if yyj1446 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1446-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1452 := z.EncBinary()
		_ = yym1452
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1453 := !z.EncBinary()
			yy2arr1453 := z.EncBasicHandle().StructToArray
			var yyfirst1453 bool
			var yyq1453 [4]bool
			_, _, _, _ = yysep1453, yyfirst1453, yyq1453, yy2arr1453
			const yyr1453 bool = false
			yyq1453[0] = x.Kind != ""
			yyq1453[1] = x.APIVersion != ""
			yyq1453[2] = true
			if yyr1453 || yy2arr1453 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1453 int = 1
				for _, b := range yyq1453 {
					if b {
						yynn1453++
					}
				}
				r.EncodeMapStart(yynn1453)
			}
			if yyr1453 || yy2arr1453 {
				if yyq1453[0] {
					yym1455 := z.EncBinary()
					_ = yym1455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1453[0] {
					yyfirst1453 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1453 {
						r.EncodeMapKVSeparator()
					}
					yym1456 := z.EncBinary()
					_ = yym1456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1453 || yy2arr1453 {
				if yysep1453 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1453[1] {
					yym1458 := z.EncBinary()
					_ = yym1458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1453[1] {
					if yyfirst1453 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1453 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1453 {
						r.EncodeMapKVSeparator()
					}
					yym1459 := z.EncBinary()
					_ = yym1459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1453 || yy2arr1453 {
				if yysep1453 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1453[2] {
					yy1461 := &x.ListMeta
					yy1461.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1453[2] {
					if yyfirst1453 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1453 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1453 {
						r.EncodeMapKVSeparator()
					}
					yy1462 := &x.ListMeta
					yy1462.CodecEncodeSelf(e)
				}
			}
			if yyr1453 || yy2arr1453 {
				if yysep1453 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1464 := z.EncBinary()
					_ = yym1464
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				if yyfirst1453 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1453 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep1453 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1465 := z.EncBinary()
					_ = yym1465
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1453 {
				if yyr1453 || yy2arr1453 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1466 := z.DecBinary()
	_ = yym1466
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1467 := r.ReadMapStart()
			if yyl1467 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1467, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1467 := r.ReadArrayStart()
			if yyl1467 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1467, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1468Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1468Slc
	var yyhl1468 bool = l >= 0
	for yyj1468 := 0; ; yyj1468++ {
		if yyhl1468 {
			if yyj1468 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1468 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1468Slc = r.DecodeBytes(yys1468Slc, true, true)
		yys1468 := string(yys1468Slc)
		if !yyhl1468 {
			r.ReadMapKVSeparator()
		}
		switch yys1468 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv1471 := &x.ListMeta
				yyv1471.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1472 := &x.Items
				yym1473 := z.DecBinary()
				_ = yym1473
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1472), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1468)
		} // end switch yys1468
	} // end for yyj1468
	if !yyhl1468 {
		r.ReadMapEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1474 int
	var yyb1474 bool
	var yyhl1474 bool = l >= 0
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv1477 := &x.ListMeta
		yyv1477.CodecDecodeSelf(d)
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1478 := &x.Items
		yym1479 := z.DecBinary()
		_ = yym1479
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1478), d)
		}
	}
	for {
		yyj1474++
		if yyhl1474 {
			yyb1474 = yyj1474 > l
		} else {
			yyb1474 = r.CheckBreak()
		}
		if yyb1474 {
			break
		}
		if yyj1474 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1474-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1480 := z.EncBinary()
		_ = yym1480
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1481 := !z.EncBinary()
			yy2arr1481 := z.EncBasicHandle().StructToArray
			var yyfirst1481 bool
			var yyq1481 [2]bool
			_, _, _, _ = yysep1481, yyfirst1481, yyq1481, yy2arr1481
			const yyr1481 bool = false
			yyq1481[0] = true
			yyq1481[1] = true
			if yyr1481 || yy2arr1481 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1481 int = 0
				for _, b := range yyq1481 {
					if b {
						yynn1481++
					}
				}
				r.EncodeMapStart(yynn1481)
			}
			if yyr1481 || yy2arr1481 {
				if yyq1481[0] {
					yy1483 := &x.ObjectMeta
					yy1483.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1481[0] {
					yyfirst1481 = true
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1481 {
						r.EncodeMapKVSeparator()
					}
					yy1484 := &x.ObjectMeta
					yy1484.CodecEncodeSelf(e)
				}
			}
			if yyr1481 || yy2arr1481 {
				if yysep1481 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1481[1] {
					yy1486 := &x.Spec
					yy1486.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1481[1] {
					if yyfirst1481 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1481 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep1481 {
						r.EncodeMapKVSeparator()
					}
					yy1487 := &x.Spec
					yy1487.CodecEncodeSelf(e)
				}
			}
			if yysep1481 {
				if yyr1481 || yy2arr1481 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1488 := z.DecBinary()
	_ = yym1488
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1489 := r.ReadMapStart()
			if yyl1489 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1489, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1489 := r.ReadArrayStart()
			if yyl1489 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1489, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1490Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1490Slc
	var yyhl1490 bool = l >= 0
	for yyj1490 := 0; ; yyj1490++ {
		if yyhl1490 {
			if yyj1490 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1490 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1490Slc = r.DecodeBytes(yys1490Slc, true, true)
		yys1490 := string(yys1490Slc)
		if !yyhl1490 {
			r.ReadMapKVSeparator()
		}
		switch yys1490 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1491 := &x.ObjectMeta
				yyv1491.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1492 := &x.Spec
				yyv1492.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1490)
		} // end switch yys1490
	} // end for yyj1490
	if !yyhl1490 {
		r.ReadMapEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1493 int
	var yyb1493 bool
	var yyhl1493 bool = l >= 0
	yyj1493++
	if yyhl1493 {
		yyb1493 = yyj1493 > l
	} else {
		yyb1493 = r.CheckBreak()
	}
	if yyb1493 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1494 := &x.ObjectMeta
		yyv1494.CodecDecodeSelf(d)
	}
	yyj1493++
	if yyhl1493 {
		yyb1493 = yyj1493 > l
	} else {
		yyb1493 = r.CheckBreak()
	}
	if yyb1493 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1495 := &x.Spec
		yyv1495.CodecDecodeSelf(d)
	}
	for {
		yyj1493++
		if yyhl1493 {
			yyb1493 = yyj1493 > l
		} else {
			yyb1493 = r.CheckBreak()
		}
		if yyb1493 {
			break
		}
		if yyj1493 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1493-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1496 := z.EncBinary()
		_ = yym1496
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1497 := !z.EncBinary()
			yy2arr1497 := z.EncBasicHandle().StructToArray
			var yyfirst1497 bool
			var yyq1497 [4]bool
			_, _, _, _ = yysep1497, yyfirst1497, yyq1497, yy2arr1497
			const yyr1497 bool = false
			yyq1497[0] = x.Kind != ""
			yyq1497[1] = x.APIVersion != ""
			yyq1497[2] = true
			yyq1497[3] = true
			if yyr1497 || yy2arr1497 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1497 int = 0
				for _, b := range yyq1497 {
					if b {
						yynn1497++
					}
				}
				r.EncodeMapStart(yynn1497)
			}
			if yyr1497 || yy2arr1497 {
				if yyq1497[0] {
					yym1499 := z.EncBinary()
					_ = yym1499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1497[0] {
					yyfirst1497 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1497 {
						r.EncodeMapKVSeparator()
					}
					yym1500 := z.EncBinary()
					_ = yym1500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				if yysep1497 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1497[1] {
					yym1502 := z.EncBinary()
					_ = yym1502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1497[1] {
					if yyfirst1497 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1497 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1497 {
						r.EncodeMapKVSeparator()
					}
					yym1503 := z.EncBinary()
					_ = yym1503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				if yysep1497 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1497[2] {
					yy1505 := &x.ObjectMeta
					yy1505.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[2] {
					if yyfirst1497 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1497 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1497 {
						r.EncodeMapKVSeparator()
					}
					yy1506 := &x.ObjectMeta
					yy1506.CodecEncodeSelf(e)
				}
			}
			if yyr1497 || yy2arr1497 {
				if yysep1497 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1497[3] {
					yy1508 := &x.Template
					yy1508.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[3] {
					if yyfirst1497 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1497 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if yysep1497 {
						r.EncodeMapKVSeparator()
					}
					yy1509 := &x.Template
					yy1509.CodecEncodeSelf(e)
				}
			}
			if yysep1497 {
				if yyr1497 || yy2arr1497 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1510 := z.DecBinary()
	_ = yym1510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1511 := r.ReadMapStart()
			if yyl1511 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1511, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1511 := r.ReadArrayStart()
			if yyl1511 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1511, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1512Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1512Slc
	var yyhl1512 bool = l >= 0
	for yyj1512 := 0; ; yyj1512++ {
		if yyhl1512 {
			if yyj1512 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1512 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1512Slc = r.DecodeBytes(yys1512Slc, true, true)
		yys1512 := string(yys1512Slc)
		if !yyhl1512 {
			r.ReadMapKVSeparator()
		}
		switch yys1512 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1515 := &x.ObjectMeta
				yyv1515.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1516 := &x.Template
				yyv1516.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1512)
		} // end switch yys1512
	} // end for yyj1512
	if !yyhl1512 {
		r.ReadMapEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1517 int
	var yyb1517 bool
	var yyhl1517 bool = l >= 0
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1520 := &x.ObjectMeta
		yyv1520.CodecDecodeSelf(d)
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1521 := &x.Template
		yyv1521.CodecDecodeSelf(d)
	}
	for {
		yyj1517++
		if yyhl1517 {
			yyb1517 = yyj1517 > l
		} else {
			yyb1517 = r.CheckBreak()
		}
		if yyb1517 {
			break
		}
		if yyj1517 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1517-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1522 := z.EncBinary()
		_ = yym1522
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1523 := !z.EncBinary()
			yy2arr1523 := z.EncBasicHandle().StructToArray
			var yyfirst1523 bool
			var yyq1523 [4]bool
			_, _, _, _ = yysep1523, yyfirst1523, yyq1523, yy2arr1523
			const yyr1523 bool = false
			yyq1523[0] = x.Kind != ""
			yyq1523[1] = x.APIVersion != ""
			yyq1523[2] = true
			if yyr1523 || yy2arr1523 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1523 int = 1
				for _, b := range yyq1523 {
					if b {
						yynn1523++
					}
				}
				r.EncodeMapStart(yynn1523)
			}
			if yyr1523 || yy2arr1523 {
				if yyq1523[0] {
					yym1525 := z.EncBinary()
					_ = yym1525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1523[0] {
					yyfirst1523 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1523 {
						r.EncodeMapKVSeparator()
					}
					yym1526 := z.EncBinary()
					_ = yym1526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1523 || yy2arr1523 {
				if yysep1523 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1523[1] {
					yym1528 := z.EncBinary()
					_ = yym1528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1523[1] {
					if yyfirst1523 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1523 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1523 {
						r.EncodeMapKVSeparator()
					}
					yym1529 := z.EncBinary()
					_ = yym1529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1523 || yy2arr1523 {
				if yysep1523 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1523[2] {
					yy1531 := &x.ListMeta
					yy1531.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1523[2] {
					if yyfirst1523 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1523 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1523 {
						r.EncodeMapKVSeparator()
					}
					yy1532 := &x.ListMeta
					yy1532.CodecEncodeSelf(e)
				}
			}
			if yyr1523 || yy2arr1523 {
				if yysep1523 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1534 := z.EncBinary()
					_ = yym1534
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				if yyfirst1523 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1523 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep1523 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1535 := z.EncBinary()
					_ = yym1535
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1523 {
				if yyr1523 || yy2arr1523 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1536 := z.DecBinary()
	_ = yym1536
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1537 := r.ReadMapStart()
			if yyl1537 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1537, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1537 := r.ReadArrayStart()
			if yyl1537 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1537, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1538Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1538Slc
	var yyhl1538 bool = l >= 0
	for yyj1538 := 0; ; yyj1538++ {
		if yyhl1538 {
			if yyj1538 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1538 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1538Slc = r.DecodeBytes(yys1538Slc, true, true)
		yys1538 := string(yys1538Slc)
		if !yyhl1538 {
			r.ReadMapKVSeparator()
		}
		switch yys1538 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv1541 := &x.ListMeta
				yyv1541.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1542 := &x.Items
				yym1543 := z.DecBinary()
				_ = yym1543
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1542), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1538)
		} // end switch yys1538
	} // end for yyj1538
	if !yyhl1538 {
		r.ReadMapEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1544 int
	var yyb1544 bool
	var yyhl1544 bool = l >= 0
	yyj1544++
	if yyhl1544 {
		yyb1544 = yyj1544 > l
	} else {
		yyb1544 = r.CheckBreak()
	}
	if yyb1544 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1544++
	if yyhl1544 {
		yyb1544 = yyj1544 > l
	} else {
		yyb1544 = r.CheckBreak()
	}
	if yyb1544 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1544++
	if yyhl1544 {
		yyb1544 = yyj1544 > l
	} else {
		yyb1544 = r.CheckBreak()
	}
	if yyb1544 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv1547 := &x.ListMeta
		yyv1547.CodecDecodeSelf(d)
	}
	yyj1544++
	if yyhl1544 {
		yyb1544 = yyj1544 > l
	} else {
		yyb1544 = r.CheckBreak()
	}
	if yyb1544 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1548 := &x.Items
		yym1549 := z.DecBinary()
		_ = yym1549
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1548), d)
		}
	}
	for {
		yyj1544++
		if yyhl1544 {
			yyb1544 = yyj1544 > l
		} else {
			yyb1544 = r.CheckBreak()
		}
		if yyb1544 {
			break
		}
		if yyj1544 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1544-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1550 := z.EncBinary()
		_ = yym1550
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1551 := !z.EncBinary()
			yy2arr1551 := z.EncBasicHandle().StructToArray
			var yyfirst1551 bool
			var yyq1551 [3]bool
			_, _, _, _ = yysep1551, yyfirst1551, yyq1551, yy2arr1551
			const yyr1551 bool = false
			yyq1551[0] = x.Replicas != nil
			yyq1551[1] = len(x.Selector) != 0
			yyq1551[2] = x.Template != nil
			if yyr1551 || yy2arr1551 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1551 int = 0
				for _, b := range yyq1551 {
					if b {
						yynn1551++
					}
				}
				r.EncodeMapStart(yynn1551)
			}
			if yyr1551 || yy2arr1551 {
				if yyq1551[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1553 := *x.Replicas
						yym1554 := z.EncBinary()
						_ = yym1554
						if false {
						} else {
							r.EncodeInt(int64(yy1553))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1551[0] {
					yyfirst1551 = true
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					if yysep1551 {
						r.EncodeMapKVSeparator()
					}
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1555 := *x.Replicas
						yym1556 := z.EncBinary()
						_ = yym1556
						if false {
						} else {
							r.EncodeInt(int64(yy1555))
						}
					}
				}
			}
			if yyr1551 || yy2arr1551 {
				if yysep1551 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1551[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1558 := z.EncBinary()
						_ = yym1558
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1551[1] {
					if yyfirst1551 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1551 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if yysep1551 {
						r.EncodeMapKVSeparator()
					}
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1559 := z.EncBinary()
						_ = yym1559
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1551 || yy2arr1551 {
				if yysep1551 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1551[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1551[2] {
					if yyfirst1551 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1551 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if yysep1551 {
						r.EncodeMapKVSeparator()
					}
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1551 {
				if yyr1551 || yy2arr1551 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1561 := z.DecBinary()
	_ = yym1561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1562 := r.ReadMapStart()
			if yyl1562 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1562, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1562 := r.ReadArrayStart()
			if yyl1562 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1562, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1563Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1563Slc
	var yyhl1563 bool = l >= 0
	for yyj1563 := 0; ; yyj1563++ {
		if yyhl1563 {
			if yyj1563 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1563 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1563Slc = r.DecodeBytes(yys1563Slc, true, true)
		yys1563 := string(yys1563Slc)
		if !yyhl1563 {
			r.ReadMapKVSeparator()
		}
		switch yys1563 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int)
				}
				yym1565 := z.DecBinary()
				_ = yym1565
				if false {
				} else {
					*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1566 := &x.Selector
				yym1567 := z.DecBinary()
				_ = yym1567
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1566, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1563)
		} // end switch yys1563
	} // end for yyj1563
	if !yyhl1563 {
		r.ReadMapEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1569 int
	var yyb1569 bool
	var yyhl1569 bool = l >= 0
	yyj1569++
	if yyhl1569 {
		yyb1569 = yyj1569 > l
	} else {
		yyb1569 = r.CheckBreak()
	}
	if yyb1569 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int)
		}
		yym1571 := z.DecBinary()
		_ = yym1571
		if false {
		} else {
			*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj1569++
	if yyhl1569 {
		yyb1569 = yyj1569 > l
	} else {
		yyb1569 = r.CheckBreak()
	}
	if yyb1569 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1572 := &x.Selector
		yym1573 := z.DecBinary()
		_ = yym1573
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1572, false, d)
		}
	}
	yyj1569++
	if yyhl1569 {
		yyb1569 = yyj1569 > l
	} else {
		yyb1569 = r.CheckBreak()
	}
	if yyb1569 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1569++
		if yyhl1569 {
			yyb1569 = yyj1569 > l
		} else {
			yyb1569 = r.CheckBreak()
		}
		if yyb1569 {
			break
		}
		if yyj1569 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1569-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1575 := z.EncBinary()
		_ = yym1575
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1576 := !z.EncBinary()
			yy2arr1576 := z.EncBasicHandle().StructToArray
			var yyfirst1576 bool
			var yyq1576 [2]bool
			_, _, _, _ = yysep1576, yyfirst1576, yyq1576, yy2arr1576
			const yyr1576 bool = false
			yyq1576[1] = x.ObservedGeneration != 0
			if yyr1576 || yy2arr1576 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1576 int = 1
				for _, b := range yyq1576 {
					if b {
						yynn1576++
					}
				}
				r.EncodeMapStart(yynn1576)
			}
			if yyr1576 || yy2arr1576 {
				yym1578 := z.EncBinary()
				_ = yym1578
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				yyfirst1576 = true
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				if yysep1576 {
					r.EncodeMapKVSeparator()
				}
				yym1579 := z.EncBinary()
				_ = yym1579
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1576 || yy2arr1576 {
				if yysep1576 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1576[1] {
					yym1581 := z.EncBinary()
					_ = yym1581
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1576[1] {
					if yyfirst1576 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1576 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					if yysep1576 {
						r.EncodeMapKVSeparator()
					}
					yym1582 := z.EncBinary()
					_ = yym1582
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1576 {
				if yyr1576 || yy2arr1576 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1583 := z.DecBinary()
	_ = yym1583
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1584 := r.ReadMapStart()
			if yyl1584 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1584, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1584 := r.ReadArrayStart()
			if yyl1584 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1584, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1585Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1585Slc
	var yyhl1585 bool = l >= 0
	for yyj1585 := 0; ; yyj1585++ {
		if yyhl1585 {
			if yyj1585 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1585 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1585Slc = r.DecodeBytes(yys1585Slc, true, true)
		yys1585 := string(yys1585Slc)
		if !yyhl1585 {
			r.ReadMapKVSeparator()
		}
		switch yys1585 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1585)
		} // end switch yys1585
	} // end for yyj1585
	if !yyhl1585 {
		r.ReadMapEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1588 int
	var yyb1588 bool
	var yyhl1588 bool = l >= 0
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1588++
		if yyhl1588 {
			yyb1588 = yyj1588 > l
		} else {
			yyb1588 = r.CheckBreak()
		}
		if yyb1588 {
			break
		}
		if yyj1588 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1588-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1591 := z.EncBinary()
		_ = yym1591
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1592 := !z.EncBinary()
			yy2arr1592 := z.EncBasicHandle().StructToArray
			var yyfirst1592 bool
			var yyq1592 [5]bool
			_, _, _, _ = yysep1592, yyfirst1592, yyq1592, yy2arr1592
			const yyr1592 bool = false
			yyq1592[0] = x.Kind != ""
			yyq1592[1] = x.APIVersion != ""
			yyq1592[2] = true
			yyq1592[3] = true
			yyq1592[4] = true
			if yyr1592 || yy2arr1592 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1592 int = 0
				for _, b := range yyq1592 {
					if b {
						yynn1592++
					}
				}
				r.EncodeMapStart(yynn1592)
			}
			if yyr1592 || yy2arr1592 {
				if yyq1592[0] {
					yym1594 := z.EncBinary()
					_ = yym1594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1592[0] {
					yyfirst1592 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1592 {
						r.EncodeMapKVSeparator()
					}
					yym1595 := z.EncBinary()
					_ = yym1595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1592 || yy2arr1592 {
				if yysep1592 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1592[1] {
					yym1597 := z.EncBinary()
					_ = yym1597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1592[1] {
					if yyfirst1592 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1592 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1592 {
						r.EncodeMapKVSeparator()
					}
					yym1598 := z.EncBinary()
					_ = yym1598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1592 || yy2arr1592 {
				if yysep1592 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1592[2] {
					yy1600 := &x.ObjectMeta
					yy1600.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1592[2] {
					if yyfirst1592 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1592 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1592 {
						r.EncodeMapKVSeparator()
					}
					yy1601 := &x.ObjectMeta
					yy1601.CodecEncodeSelf(e)
				}
			}
			if yyr1592 || yy2arr1592 {
				if yysep1592 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1592[3] {
					yy1603 := &x.Spec
					yy1603.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1592[3] {
					if yyfirst1592 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1592 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep1592 {
						r.EncodeMapKVSeparator()
					}
					yy1604 := &x.Spec
					yy1604.CodecEncodeSelf(e)
				}
			}
			if yyr1592 || yy2arr1592 {
				if yysep1592 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1592[4] {
					yy1606 := &x.Status
					yy1606.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1592[4] {
					if yyfirst1592 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1592 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep1592 {
						r.EncodeMapKVSeparator()
					}
					yy1607 := &x.Status
					yy1607.CodecEncodeSelf(e)
				}
			}
			if yysep1592 {
				if yyr1592 || yy2arr1592 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1608 := z.DecBinary()
	_ = yym1608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1609 := r.ReadMapStart()
			if yyl1609 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1609, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1609 := r.ReadArrayStart()
			if yyl1609 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1609, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1610Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1610Slc
	var yyhl1610 bool = l >= 0
	for yyj1610 := 0; ; yyj1610++ {
		if yyhl1610 {
			if yyj1610 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1610 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1610Slc = r.DecodeBytes(yys1610Slc, true, true)
		yys1610 := string(yys1610Slc)
		if !yyhl1610 {
			r.ReadMapKVSeparator()
		}
		switch yys1610 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1613 := &x.ObjectMeta
				yyv1613.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1614 := &x.Spec
				yyv1614.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1615 := &x.Status
				yyv1615.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1610)
		} // end switch yys1610
	} // end for yyj1610
	if !yyhl1610 {
		r.ReadMapEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1616 int
	var yyb1616 bool
	var yyhl1616 bool = l >= 0
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1619 := &x.ObjectMeta
		yyv1619.CodecDecodeSelf(d)
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1620 := &x.Spec
		yyv1620.CodecDecodeSelf(d)
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1621 := &x.Status
		yyv1621.CodecDecodeSelf(d)
	}
	for {
		yyj1616++
		if yyhl1616 {
			yyb1616 = yyj1616 > l
		} else {
			yyb1616 = r.CheckBreak()
		}
		if yyb1616 {
			break
		}
		if yyj1616 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1616-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1622 := z.EncBinary()
		_ = yym1622
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1623 := !z.EncBinary()
			yy2arr1623 := z.EncBasicHandle().StructToArray
			var yyfirst1623 bool
			var yyq1623 [4]bool
			_, _, _, _ = yysep1623, yyfirst1623, yyq1623, yy2arr1623
			const yyr1623 bool = false
			yyq1623[0] = x.Kind != ""
			yyq1623[1] = x.APIVersion != ""
			yyq1623[2] = true
			if yyr1623 || yy2arr1623 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1623 int = 1
				for _, b := range yyq1623 {
					if b {
						yynn1623++
					}
				}
				r.EncodeMapStart(yynn1623)
			}
			if yyr1623 || yy2arr1623 {
				if yyq1623[0] {
					yym1625 := z.EncBinary()
					_ = yym1625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1623[0] {
					yyfirst1623 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1623 {
						r.EncodeMapKVSeparator()
					}
					yym1626 := z.EncBinary()
					_ = yym1626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1623 || yy2arr1623 {
				if yysep1623 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1623[1] {
					yym1628 := z.EncBinary()
					_ = yym1628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1623[1] {
					if yyfirst1623 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1623 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1623 {
						r.EncodeMapKVSeparator()
					}
					yym1629 := z.EncBinary()
					_ = yym1629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1623 || yy2arr1623 {
				if yysep1623 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1623[2] {
					yy1631 := &x.ListMeta
					yy1631.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1623[2] {
					if yyfirst1623 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1623 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1623 {
						r.EncodeMapKVSeparator()
					}
					yy1632 := &x.ListMeta
					yy1632.CodecEncodeSelf(e)
				}
			}
			if yyr1623 || yy2arr1623 {
				if yysep1623 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1634 := z.EncBinary()
					_ = yym1634
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				if yyfirst1623 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1623 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep1623 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1635 := z.EncBinary()
					_ = yym1635
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1623 {
				if yyr1623 || yy2arr1623 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1636 := z.DecBinary()
	_ = yym1636
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1637 := r.ReadMapStart()
			if yyl1637 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1637, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1637 := r.ReadArrayStart()
			if yyl1637 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1637, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1638Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1638Slc
	var yyhl1638 bool = l >= 0
	for yyj1638 := 0; ; yyj1638++ {
		if yyhl1638 {
			if yyj1638 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1638 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1638Slc = r.DecodeBytes(yys1638Slc, true, true)
		yys1638 := string(yys1638Slc)
		if !yyhl1638 {
			r.ReadMapKVSeparator()
		}
		switch yys1638 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv1641 := &x.ListMeta
				yyv1641.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1642 := &x.Items
				yym1643 := z.DecBinary()
				_ = yym1643
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1642), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1638)
		} // end switch yys1638
	} // end for yyj1638
	if !yyhl1638 {
		r.ReadMapEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1644 int
	var yyb1644 bool
	var yyhl1644 bool = l >= 0
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv1647 := &x.ListMeta
		yyv1647.CodecDecodeSelf(d)
	}
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1648 := &x.Items
		yym1649 := z.DecBinary()
		_ = yym1649
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1648), d)
		}
	}
	for {
		yyj1644++
		if yyhl1644 {
			yyb1644 = yyj1644 > l
		} else {
			yyb1644 = r.CheckBreak()
		}
		if yyb1644 {
			break
		}
		if yyj1644 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1644-1, "")
	}
	r.ReadArrayEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1650 := z.EncBinary()
	_ = yym1650
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1651 := z.DecBinary()
	_ = yym1651
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1652 := z.EncBinary()
	_ = yym1652
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1653 := z.DecBinary()
	_ = yym1653
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1654 := z.EncBinary()
		_ = yym1654
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1655 := !z.EncBinary()
			yy2arr1655 := z.EncBasicHandle().StructToArray
			var yyfirst1655 bool
			var yyq1655 [1]bool
			_, _, _, _ = yysep1655, yyfirst1655, yyq1655, yy2arr1655
			const yyr1655 bool = false
			yyq1655[0] = true
			if yyr1655 || yy2arr1655 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1655 int = 0
				for _, b := range yyq1655 {
					if b {
						yynn1655++
					}
				}
				r.EncodeMapStart(yynn1655)
			}
			if yyr1655 || yy2arr1655 {
				if yyq1655[0] {
					yy1657 := &x.LoadBalancer
					yy1657.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1655[0] {
					yyfirst1655 = true
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					if yysep1655 {
						r.EncodeMapKVSeparator()
					}
					yy1658 := &x.LoadBalancer
					yy1658.CodecEncodeSelf(e)
				}
			}
			if yysep1655 {
				if yyr1655 || yy2arr1655 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1659 := z.DecBinary()
	_ = yym1659
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1660 := r.ReadMapStart()
			if yyl1660 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1660, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1660 := r.ReadArrayStart()
			if yyl1660 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1660, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1661Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1661Slc
	var yyhl1661 bool = l >= 0
	for yyj1661 := 0; ; yyj1661++ {
		if yyhl1661 {
			if yyj1661 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1661 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1661Slc = r.DecodeBytes(yys1661Slc, true, true)
		yys1661 := string(yys1661Slc)
		if !yyhl1661 {
			r.ReadMapKVSeparator()
		}
		switch yys1661 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1662 := &x.LoadBalancer
				yyv1662.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1661)
		} // end switch yys1661
	} // end for yyj1661
	if !yyhl1661 {
		r.ReadMapEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1663 int
	var yyb1663 bool
	var yyhl1663 bool = l >= 0
	yyj1663++
	if yyhl1663 {
		yyb1663 = yyj1663 > l
	} else {
		yyb1663 = r.CheckBreak()
	}
	if yyb1663 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1664 := &x.LoadBalancer
		yyv1664.CodecDecodeSelf(d)
	}
	for {
		yyj1663++
		if yyhl1663 {
			yyb1663 = yyj1663 > l
		} else {
			yyb1663 = r.CheckBreak()
		}
		if yyb1663 {
			break
		}
		if yyj1663 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1663-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1665 := z.EncBinary()
		_ = yym1665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1666 := !z.EncBinary()
			yy2arr1666 := z.EncBasicHandle().StructToArray
			var yyfirst1666 bool
			var yyq1666 [1]bool
			_, _, _, _ = yysep1666, yyfirst1666, yyq1666, yy2arr1666
			const yyr1666 bool = false
			yyq1666[0] = len(x.Ingress) != 0
			if yyr1666 || yy2arr1666 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1666 int = 0
				for _, b := range yyq1666 {
					if b {
						yynn1666++
					}
				}
				r.EncodeMapStart(yynn1666)
			}
			if yyr1666 || yy2arr1666 {
				if yyq1666[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1668 := z.EncBinary()
						_ = yym1668
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1666[0] {
					yyfirst1666 = true
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if yysep1666 {
						r.EncodeMapKVSeparator()
					}
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1669 := z.EncBinary()
						_ = yym1669
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1666 {
				if yyr1666 || yy2arr1666 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1670 := z.DecBinary()
	_ = yym1670
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1671 := r.ReadMapStart()
			if yyl1671 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1671, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1671 := r.ReadArrayStart()
			if yyl1671 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1671, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1672Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1672Slc
	var yyhl1672 bool = l >= 0
	for yyj1672 := 0; ; yyj1672++ {
		if yyhl1672 {
			if yyj1672 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1672 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1672Slc = r.DecodeBytes(yys1672Slc, true, true)
		yys1672 := string(yys1672Slc)
		if !yyhl1672 {
			r.ReadMapKVSeparator()
		}
		switch yys1672 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1673 := &x.Ingress
				yym1674 := z.DecBinary()
				_ = yym1674
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1673), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1672)
		} // end switch yys1672
	} // end for yyj1672
	if !yyhl1672 {
		r.ReadMapEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1675 int
	var yyb1675 bool
	var yyhl1675 bool = l >= 0
	yyj1675++
	if yyhl1675 {
		yyb1675 = yyj1675 > l
	} else {
		yyb1675 = r.CheckBreak()
	}
	if yyb1675 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1676 := &x.Ingress
		yym1677 := z.DecBinary()
		_ = yym1677
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1676), d)
		}
	}
	for {
		yyj1675++
		if yyhl1675 {
			yyb1675 = yyj1675 > l
		} else {
			yyb1675 = r.CheckBreak()
		}
		if yyb1675 {
			break
		}
		if yyj1675 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1675-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1678 := z.EncBinary()
		_ = yym1678
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1679 := !z.EncBinary()
			yy2arr1679 := z.EncBasicHandle().StructToArray
			var yyfirst1679 bool
			var yyq1679 [2]bool
			_, _, _, _ = yysep1679, yyfirst1679, yyq1679, yy2arr1679
			const yyr1679 bool = false
			yyq1679[0] = x.IP != ""
			yyq1679[1] = x.Hostname != ""
			if yyr1679 || yy2arr1679 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1679 int = 0
				for _, b := range yyq1679 {
					if b {
						yynn1679++
					}
				}
				r.EncodeMapStart(yynn1679)
			}
			if yyr1679 || yy2arr1679 {
				if yyq1679[0] {
					yym1681 := z.EncBinary()
					_ = yym1681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1679[0] {
					yyfirst1679 = true
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					if yysep1679 {
						r.EncodeMapKVSeparator()
					}
					yym1682 := z.EncBinary()
					_ = yym1682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1679 || yy2arr1679 {
				if yysep1679 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1679[1] {
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1679[1] {
					if yyfirst1679 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1679 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					if yysep1679 {
						r.EncodeMapKVSeparator()
					}
					yym1685 := z.EncBinary()
					_ = yym1685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1679 {
				if yyr1679 || yy2arr1679 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1686 := z.DecBinary()
	_ = yym1686
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1687 := r.ReadMapStart()
			if yyl1687 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1687, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1687 := r.ReadArrayStart()
			if yyl1687 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1687, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1688Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1688Slc
	var yyhl1688 bool = l >= 0
	for yyj1688 := 0; ; yyj1688++ {
		if yyhl1688 {
			if yyj1688 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1688 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1688Slc = r.DecodeBytes(yys1688Slc, true, true)
		yys1688 := string(yys1688Slc)
		if !yyhl1688 {
			r.ReadMapKVSeparator()
		}
		switch yys1688 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1688)
		} // end switch yys1688
	} // end for yyj1688
	if !yyhl1688 {
		r.ReadMapEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1691 int
	var yyb1691 bool
	var yyhl1691 bool = l >= 0
	yyj1691++
	if yyhl1691 {
		yyb1691 = yyj1691 > l
	} else {
		yyb1691 = r.CheckBreak()
	}
	if yyb1691 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1691++
	if yyhl1691 {
		yyb1691 = yyj1691 > l
	} else {
		yyb1691 = r.CheckBreak()
	}
	if yyb1691 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1691++
		if yyhl1691 {
			yyb1691 = yyj1691 > l
		} else {
			yyb1691 = r.CheckBreak()
		}
		if yyb1691 {
			break
		}
		if yyj1691 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1691-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1694 := z.EncBinary()
		_ = yym1694
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1695 := !z.EncBinary()
			yy2arr1695 := z.EncBasicHandle().StructToArray
			var yyfirst1695 bool
			var yyq1695 [7]bool
			_, _, _, _ = yysep1695, yyfirst1695, yyq1695, yy2arr1695
			const yyr1695 bool = false
			yyq1695[1] = len(x.Selector) != 0
			yyq1695[2] = x.ClusterIP != ""
			yyq1695[3] = x.Type != ""
			yyq1695[4] = len(x.ExternalIPs) != 0
			yyq1695[5] = x.SessionAffinity != ""
			yyq1695[6] = x.LoadBalancerIP != ""
			if yyr1695 || yy2arr1695 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1695 int = 1
				for _, b := range yyq1695 {
					if b {
						yynn1695++
					}
				}
				r.EncodeMapStart(yynn1695)
			}
			if yyr1695 || yy2arr1695 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1697 := z.EncBinary()
					_ = yym1697
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				yyfirst1695 = true
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if yysep1695 {
					r.EncodeMapKVSeparator()
				}
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1698 := z.EncBinary()
					_ = yym1698
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1695 || yy2arr1695 {
				if yysep1695 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1695[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1700 := z.EncBinary()
						_ = yym1700
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1695[1] {
					if yyfirst1695 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1695 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if yysep1695 {
						r.EncodeMapKVSeparator()
					}
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1701 := z.EncBinary()
						_ = yym1701
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1695 || yy2arr1695 {
				if yysep1695 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1695[2] {
					yym1703 := z.EncBinary()
					_ = yym1703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1695[2] {
					if yyfirst1695 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1695 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					if yysep1695 {
						r.EncodeMapKVSeparator()
					}
					yym1704 := z.EncBinary()
					_ = yym1704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1695 || yy2arr1695 {
				if yysep1695 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1695[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1695[3] {
					if yyfirst1695 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1695 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					if yysep1695 {
						r.EncodeMapKVSeparator()
					}
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1695 || yy2arr1695 {
				if yysep1695 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1695[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1707 := z.EncBinary()
						_ = yym1707
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1695[4] {
					if yyfirst1695 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1695 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if yysep1695 {
						r.EncodeMapKVSeparator()
					}
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1708 := z.EncBinary()
						_ = yym1708
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1695 || yy2arr1695 {
				if yysep1695 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1695[5] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1695[5] {
					if yyfirst1695 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1695 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					if yysep1695 {
						r.EncodeMapKVSeparator()
					}
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1695 || yy2arr1695 {
				if yysep1695 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1695[6] {
					yym1711 := z.EncBinary()
					_ = yym1711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1695[6] {
					if yyfirst1695 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1695 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					if yysep1695 {
						r.EncodeMapKVSeparator()
					}
					yym1712 := z.EncBinary()
					_ = yym1712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yysep1695 {
				if yyr1695 || yy2arr1695 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1713 := z.DecBinary()
	_ = yym1713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1714 := r.ReadMapStart()
			if yyl1714 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1714, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1714 := r.ReadArrayStart()
			if yyl1714 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1715Slc
	var yyhl1715 bool = l >= 0
	for yyj1715 := 0; ; yyj1715++ {
		if yyhl1715 {
			if yyj1715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1715 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1715Slc = r.DecodeBytes(yys1715Slc, true, true)
		yys1715 := string(yys1715Slc)
		if !yyhl1715 {
			r.ReadMapKVSeparator()
		}
		switch yys1715 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1716 := &x.Ports
				yym1717 := z.DecBinary()
				_ = yym1717
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1716), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1718 := &x.Selector
				yym1719 := z.DecBinary()
				_ = yym1719
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1718, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1722 := &x.ExternalIPs
				yym1723 := z.DecBinary()
				_ = yym1723
				if false {
				} else {
					z.F.DecSliceStringX(yyv1722, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1715)
		} // end switch yys1715
	} // end for yyj1715
	if !yyhl1715 {
		r.ReadMapEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1726 int
	var yyb1726 bool
	var yyhl1726 bool = l >= 0
	yyj1726++
	if yyhl1726 {
		yyb1726 = yyj1726 > l
	} else {
		yyb1726 = r.CheckBreak()
	}
	if yyb1726 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1727 := &x.Ports
		yym1728 := z.DecBinary()
		_ = yym1728
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1727), d)
		}
	}
	yyj1726++
	if yyhl1726 {
		yyb1726 = yyj1726 > l
	} else {
		yyb1726 = r.CheckBreak()
	}
	if yyb1726 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1729 := &x.Selector
		yym1730 := z.DecBinary()
		_ = yym1730
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1729, false, d)
		}
	}
	yyj1726++
	if yyhl1726 {
		yyb1726 = yyj1726 > l
	} else {
		yyb1726 = r.CheckBreak()
	}
	if yyb1726 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1726++
	if yyhl1726 {
		yyb1726 = yyj1726 > l
	} else {
		yyb1726 = r.CheckBreak()
	}
	if yyb1726 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1726++
	if yyhl1726 {
		yyb1726 = yyj1726 > l
	} else {
		yyb1726 = r.CheckBreak()
	}
	if yyb1726 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1733 := &x.ExternalIPs
		yym1734 := z.DecBinary()
		_ = yym1734
		if false {
		} else {
			z.F.DecSliceStringX(yyv1733, false, d)
		}
	}
	yyj1726++
	if yyhl1726 {
		yyb1726 = yyj1726 > l
	} else {
		yyb1726 = r.CheckBreak()
	}
	if yyb1726 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj1726++
	if yyhl1726 {
		yyb1726 = yyj1726 > l
	} else {
		yyb1726 = r.CheckBreak()
	}
	if yyb1726 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj1726++
		if yyhl1726 {
			yyb1726 = yyj1726 > l
		} else {
			yyb1726 = r.CheckBreak()
		}
		if yyb1726 {
			break
		}
		if yyj1726 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1726-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1737 := z.EncBinary()
		_ = yym1737
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1738 := !z.EncBinary()
			yy2arr1738 := z.EncBasicHandle().StructToArray
			var yyfirst1738 bool
			var yyq1738 [5]bool
			_, _, _, _ = yysep1738, yyfirst1738, yyq1738, yy2arr1738
			const yyr1738 bool = false
			yyq1738[0] = x.Name != ""
			yyq1738[1] = x.Protocol != ""
			yyq1738[3] = true
			yyq1738[4] = x.NodePort != 0
			if yyr1738 || yy2arr1738 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1738 int = 1
				for _, b := range yyq1738 {
					if b {
						yynn1738++
					}
				}
				r.EncodeMapStart(yynn1738)
			}
			if yyr1738 || yy2arr1738 {
				if yyq1738[0] {
					yym1740 := z.EncBinary()
					_ = yym1740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1738[0] {
					yyfirst1738 = true
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep1738 {
						r.EncodeMapKVSeparator()
					}
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1738 || yy2arr1738 {
				if yysep1738 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1738[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1738[1] {
					if yyfirst1738 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1738 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					if yysep1738 {
						r.EncodeMapKVSeparator()
					}
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1738 || yy2arr1738 {
				if yysep1738 {
					r.EncodeArrayEntrySeparator()
				}
				yym1744 := z.EncBinary()
				_ = yym1744
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				if yyfirst1738 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1738 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				if yysep1738 {
					r.EncodeMapKVSeparator()
				}
				yym1745 := z.EncBinary()
				_ = yym1745
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1738 || yy2arr1738 {
				if yysep1738 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1738[3] {
					yy1747 := &x.TargetPort
					yym1748 := z.EncBinary()
					_ = yym1748
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1747) {
					} else if !yym1748 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1747)
					} else {
						z.EncFallback(yy1747)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1738[3] {
					if yyfirst1738 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1738 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					if yysep1738 {
						r.EncodeMapKVSeparator()
					}
					yy1749 := &x.TargetPort
					yym1750 := z.EncBinary()
					_ = yym1750
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1749) {
					} else if !yym1750 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1749)
					} else {
						z.EncFallback(yy1749)
					}
				}
			}
			if yyr1738 || yy2arr1738 {
				if yysep1738 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1738[4] {
					yym1752 := z.EncBinary()
					_ = yym1752
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1738[4] {
					if yyfirst1738 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1738 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					if yysep1738 {
						r.EncodeMapKVSeparator()
					}
					yym1753 := z.EncBinary()
					_ = yym1753
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yysep1738 {
				if yyr1738 || yy2arr1738 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1754 := z.DecBinary()
	_ = yym1754
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1755 := r.ReadMapStart()
			if yyl1755 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1755, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1755 := r.ReadArrayStart()
			if yyl1755 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1755, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1756Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1756Slc
	var yyhl1756 bool = l >= 0
	for yyj1756 := 0; ; yyj1756++ {
		if yyhl1756 {
			if yyj1756 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1756 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1756Slc = r.DecodeBytes(yys1756Slc, true, true)
		yys1756 := string(yys1756Slc)
		if !yyhl1756 {
			r.ReadMapKVSeparator()
		}
		switch yys1756 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg2_util.IntOrString{}
			} else {
				yyv1760 := &x.TargetPort
				yym1761 := z.DecBinary()
				_ = yym1761
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1760) {
				} else if !yym1761 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1760)
				} else {
					z.DecFallback(yyv1760, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1756)
		} // end switch yys1756
	} // end for yyj1756
	if !yyhl1756 {
		r.ReadMapEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1763 int
	var yyb1763 bool
	var yyhl1763 bool = l >= 0
	yyj1763++
	if yyhl1763 {
		yyb1763 = yyj1763 > l
	} else {
		yyb1763 = r.CheckBreak()
	}
	if yyb1763 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1763++
	if yyhl1763 {
		yyb1763 = yyj1763 > l
	} else {
		yyb1763 = r.CheckBreak()
	}
	if yyb1763 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1763++
	if yyhl1763 {
		yyb1763 = yyj1763 > l
	} else {
		yyb1763 = r.CheckBreak()
	}
	if yyb1763 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1763++
	if yyhl1763 {
		yyb1763 = yyj1763 > l
	} else {
		yyb1763 = r.CheckBreak()
	}
	if yyb1763 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg2_util.IntOrString{}
	} else {
		yyv1767 := &x.TargetPort
		yym1768 := z.DecBinary()
		_ = yym1768
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1767) {
		} else if !yym1768 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1767)
		} else {
			z.DecFallback(yyv1767, false)
		}
	}
	yyj1763++
	if yyhl1763 {
		yyb1763 = yyj1763 > l
	} else {
		yyb1763 = r.CheckBreak()
	}
	if yyb1763 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1763++
		if yyhl1763 {
			yyb1763 = yyj1763 > l
		} else {
			yyb1763 = r.CheckBreak()
		}
		if yyb1763 {
			break
		}
		if yyj1763 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1763-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1770 := z.EncBinary()
		_ = yym1770
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1771 := !z.EncBinary()
			yy2arr1771 := z.EncBasicHandle().StructToArray
			var yyfirst1771 bool
			var yyq1771 [5]bool
			_, _, _, _ = yysep1771, yyfirst1771, yyq1771, yy2arr1771
			const yyr1771 bool = false
			yyq1771[0] = x.Kind != ""
			yyq1771[1] = x.APIVersion != ""
			yyq1771[2] = true
			yyq1771[3] = true
			yyq1771[4] = true
			if yyr1771 || yy2arr1771 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1771 int = 0
				for _, b := range yyq1771 {
					if b {
						yynn1771++
					}
				}
				r.EncodeMapStart(yynn1771)
			}
			if yyr1771 || yy2arr1771 {
				if yyq1771[0] {
					yym1773 := z.EncBinary()
					_ = yym1773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1771[0] {
					yyfirst1771 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1771 {
						r.EncodeMapKVSeparator()
					}
					yym1774 := z.EncBinary()
					_ = yym1774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1771 || yy2arr1771 {
				if yysep1771 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1771[1] {
					yym1776 := z.EncBinary()
					_ = yym1776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1771[1] {
					if yyfirst1771 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1771 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1771 {
						r.EncodeMapKVSeparator()
					}
					yym1777 := z.EncBinary()
					_ = yym1777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1771 || yy2arr1771 {
				if yysep1771 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1771[2] {
					yy1779 := &x.ObjectMeta
					yy1779.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1771[2] {
					if yyfirst1771 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1771 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1771 {
						r.EncodeMapKVSeparator()
					}
					yy1780 := &x.ObjectMeta
					yy1780.CodecEncodeSelf(e)
				}
			}
			if yyr1771 || yy2arr1771 {
				if yysep1771 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1771[3] {
					yy1782 := &x.Spec
					yy1782.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1771[3] {
					if yyfirst1771 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1771 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep1771 {
						r.EncodeMapKVSeparator()
					}
					yy1783 := &x.Spec
					yy1783.CodecEncodeSelf(e)
				}
			}
			if yyr1771 || yy2arr1771 {
				if yysep1771 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1771[4] {
					yy1785 := &x.Status
					yy1785.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1771[4] {
					if yyfirst1771 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1771 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep1771 {
						r.EncodeMapKVSeparator()
					}
					yy1786 := &x.Status
					yy1786.CodecEncodeSelf(e)
				}
			}
			if yysep1771 {
				if yyr1771 || yy2arr1771 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1787 := z.DecBinary()
	_ = yym1787
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1788 := r.ReadMapStart()
			if yyl1788 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1788, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1788 := r.ReadArrayStart()
			if yyl1788 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1788, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1789Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1789Slc
	var yyhl1789 bool = l >= 0
	for yyj1789 := 0; ; yyj1789++ {
		if yyhl1789 {
			if yyj1789 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1789 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1789Slc = r.DecodeBytes(yys1789Slc, true, true)
		yys1789 := string(yys1789Slc)
		if !yyhl1789 {
			r.ReadMapKVSeparator()
		}
		switch yys1789 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1792 := &x.ObjectMeta
				yyv1792.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv1793 := &x.Spec
				yyv1793.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv1794 := &x.Status
				yyv1794.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1789)
		} // end switch yys1789
	} // end for yyj1789
	if !yyhl1789 {
		r.ReadMapEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1795 int
	var yyb1795 bool
	var yyhl1795 bool = l >= 0
	yyj1795++
	if yyhl1795 {
		yyb1795 = yyj1795 > l
	} else {
		yyb1795 = r.CheckBreak()
	}
	if yyb1795 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1795++
	if yyhl1795 {
		yyb1795 = yyj1795 > l
	} else {
		yyb1795 = r.CheckBreak()
	}
	if yyb1795 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1795++
	if yyhl1795 {
		yyb1795 = yyj1795 > l
	} else {
		yyb1795 = r.CheckBreak()
	}
	if yyb1795 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1798 := &x.ObjectMeta
		yyv1798.CodecDecodeSelf(d)
	}
	yyj1795++
	if yyhl1795 {
		yyb1795 = yyj1795 > l
	} else {
		yyb1795 = r.CheckBreak()
	}
	if yyb1795 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv1799 := &x.Spec
		yyv1799.CodecDecodeSelf(d)
	}
	yyj1795++
	if yyhl1795 {
		yyb1795 = yyj1795 > l
	} else {
		yyb1795 = r.CheckBreak()
	}
	if yyb1795 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv1800 := &x.Status
		yyv1800.CodecDecodeSelf(d)
	}
	for {
		yyj1795++
		if yyhl1795 {
			yyb1795 = yyj1795 > l
		} else {
			yyb1795 = r.CheckBreak()
		}
		if yyb1795 {
			break
		}
		if yyj1795 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1795-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1801 := z.EncBinary()
		_ = yym1801
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1802 := !z.EncBinary()
			yy2arr1802 := z.EncBasicHandle().StructToArray
			var yyfirst1802 bool
			var yyq1802 [4]bool
			_, _, _, _ = yysep1802, yyfirst1802, yyq1802, yy2arr1802
			const yyr1802 bool = false
			yyq1802[0] = x.Kind != ""
			yyq1802[1] = x.APIVersion != ""
			yyq1802[2] = true
			if yyr1802 || yy2arr1802 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1802 int = 1
				for _, b := range yyq1802 {
					if b {
						yynn1802++
					}
				}
				r.EncodeMapStart(yynn1802)
			}
			if yyr1802 || yy2arr1802 {
				if yyq1802[0] {
					yym1804 := z.EncBinary()
					_ = yym1804
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1802[0] {
					yyfirst1802 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1802 {
						r.EncodeMapKVSeparator()
					}
					yym1805 := z.EncBinary()
					_ = yym1805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1802 || yy2arr1802 {
				if yysep1802 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1802[1] {
					yym1807 := z.EncBinary()
					_ = yym1807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1802[1] {
					if yyfirst1802 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1802 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1802 {
						r.EncodeMapKVSeparator()
					}
					yym1808 := z.EncBinary()
					_ = yym1808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1802 || yy2arr1802 {
				if yysep1802 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1802[2] {
					yy1810 := &x.ListMeta
					yy1810.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1802[2] {
					if yyfirst1802 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1802 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1802 {
						r.EncodeMapKVSeparator()
					}
					yy1811 := &x.ListMeta
					yy1811.CodecEncodeSelf(e)
				}
			}
			if yyr1802 || yy2arr1802 {
				if yysep1802 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1813 := z.EncBinary()
					_ = yym1813
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				if yyfirst1802 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1802 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep1802 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1814 := z.EncBinary()
					_ = yym1814
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1802 {
				if yyr1802 || yy2arr1802 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1815 := z.DecBinary()
	_ = yym1815
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1816 := r.ReadMapStart()
			if yyl1816 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1816, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1816 := r.ReadArrayStart()
			if yyl1816 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1816, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1817Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1817Slc
	var yyhl1817 bool = l >= 0
	for yyj1817 := 0; ; yyj1817++ {
		if yyhl1817 {
			if yyj1817 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1817 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1817Slc = r.DecodeBytes(yys1817Slc, true, true)
		yys1817 := string(yys1817Slc)
		if !yyhl1817 {
			r.ReadMapKVSeparator()
		}
		switch yys1817 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv1820 := &x.ListMeta
				yyv1820.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1821 := &x.Items
				yym1822 := z.DecBinary()
				_ = yym1822
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1821), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1817)
		} // end switch yys1817
	} // end for yyj1817
	if !yyhl1817 {
		r.ReadMapEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1823 int
	var yyb1823 bool
	var yyhl1823 bool = l >= 0
	yyj1823++
	if yyhl1823 {
		yyb1823 = yyj1823 > l
	} else {
		yyb1823 = r.CheckBreak()
	}
	if yyb1823 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1823++
	if yyhl1823 {
		yyb1823 = yyj1823 > l
	} else {
		yyb1823 = r.CheckBreak()
	}
	if yyb1823 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1823++
	if yyhl1823 {
		yyb1823 = yyj1823 > l
	} else {
		yyb1823 = r.CheckBreak()
	}
	if yyb1823 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv1826 := &x.ListMeta
		yyv1826.CodecDecodeSelf(d)
	}
	yyj1823++
	if yyhl1823 {
		yyb1823 = yyj1823 > l
	} else {
		yyb1823 = r.CheckBreak()
	}
	if yyb1823 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1827 := &x.Items
		yym1828 := z.DecBinary()
		_ = yym1828
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1827), d)
		}
	}
	for {
		yyj1823++
		if yyhl1823 {
			yyb1823 = yyj1823 > l
		} else {
			yyb1823 = r.CheckBreak()
		}
		if yyb1823 {
			break
		}
		if yyj1823 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1823-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1829 := z.EncBinary()
		_ = yym1829
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1830 := !z.EncBinary()
			yy2arr1830 := z.EncBasicHandle().StructToArray
			var yyfirst1830 bool
			var yyq1830 [5]bool
			_, _, _, _ = yysep1830, yyfirst1830, yyq1830, yy2arr1830
			const yyr1830 bool = false
			yyq1830[0] = x.Kind != ""
			yyq1830[1] = x.APIVersion != ""
			yyq1830[2] = true
			yyq1830[3] = len(x.Secrets) != 0
			yyq1830[4] = len(x.ImagePullSecrets) != 0
			if yyr1830 || yy2arr1830 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1830 int = 0
				for _, b := range yyq1830 {
					if b {
						yynn1830++
					}
				}
				r.EncodeMapStart(yynn1830)
			}
			if yyr1830 || yy2arr1830 {
				if yyq1830[0] {
					yym1832 := z.EncBinary()
					_ = yym1832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1830[0] {
					yyfirst1830 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1830 {
						r.EncodeMapKVSeparator()
					}
					yym1833 := z.EncBinary()
					_ = yym1833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1830 || yy2arr1830 {
				if yysep1830 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1830[1] {
					yym1835 := z.EncBinary()
					_ = yym1835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1830[1] {
					if yyfirst1830 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1830 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1830 {
						r.EncodeMapKVSeparator()
					}
					yym1836 := z.EncBinary()
					_ = yym1836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1830 || yy2arr1830 {
				if yysep1830 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1830[2] {
					yy1838 := &x.ObjectMeta
					yy1838.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1830[2] {
					if yyfirst1830 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1830 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1830 {
						r.EncodeMapKVSeparator()
					}
					yy1839 := &x.ObjectMeta
					yy1839.CodecEncodeSelf(e)
				}
			}
			if yyr1830 || yy2arr1830 {
				if yysep1830 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1830[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym1841 := z.EncBinary()
						_ = yym1841
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1830[3] {
					if yyfirst1830 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1830 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					if yysep1830 {
						r.EncodeMapKVSeparator()
					}
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym1842 := z.EncBinary()
						_ = yym1842
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr1830 || yy2arr1830 {
				if yysep1830 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1830[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1844 := z.EncBinary()
						_ = yym1844
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1830[4] {
					if yyfirst1830 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1830 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if yysep1830 {
						r.EncodeMapKVSeparator()
					}
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1845 := z.EncBinary()
						_ = yym1845
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1830 {
				if yyr1830 || yy2arr1830 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1846 := z.DecBinary()
	_ = yym1846
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1847 := r.ReadMapStart()
			if yyl1847 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1847, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1847 := r.ReadArrayStart()
			if yyl1847 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1847, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1848Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1848Slc
	var yyhl1848 bool = l >= 0
	for yyj1848 := 0; ; yyj1848++ {
		if yyhl1848 {
			if yyj1848 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1848 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1848Slc = r.DecodeBytes(yys1848Slc, true, true)
		yys1848 := string(yys1848Slc)
		if !yyhl1848 {
			r.ReadMapKVSeparator()
		}
		switch yys1848 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1851 := &x.ObjectMeta
				yyv1851.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv1852 := &x.Secrets
				yym1853 := z.DecBinary()
				_ = yym1853
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv1852), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1854 := &x.ImagePullSecrets
				yym1855 := z.DecBinary()
				_ = yym1855
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1854), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1848)
		} // end switch yys1848
	} // end for yyj1848
	if !yyhl1848 {
		r.ReadMapEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1856 int
	var yyb1856 bool
	var yyhl1856 bool = l >= 0
	yyj1856++
	if yyhl1856 {
		yyb1856 = yyj1856 > l
	} else {
		yyb1856 = r.CheckBreak()
	}
	if yyb1856 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1856++
	if yyhl1856 {
		yyb1856 = yyj1856 > l
	} else {
		yyb1856 = r.CheckBreak()
	}
	if yyb1856 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1856++
	if yyhl1856 {
		yyb1856 = yyj1856 > l
	} else {
		yyb1856 = r.CheckBreak()
	}
	if yyb1856 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1859 := &x.ObjectMeta
		yyv1859.CodecDecodeSelf(d)
	}
	yyj1856++
	if yyhl1856 {
		yyb1856 = yyj1856 > l
	} else {
		yyb1856 = r.CheckBreak()
	}
	if yyb1856 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv1860 := &x.Secrets
		yym1861 := z.DecBinary()
		_ = yym1861
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv1860), d)
		}
	}
	yyj1856++
	if yyhl1856 {
		yyb1856 = yyj1856 > l
	} else {
		yyb1856 = r.CheckBreak()
	}
	if yyb1856 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1862 := &x.ImagePullSecrets
		yym1863 := z.DecBinary()
		_ = yym1863
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1862), d)
		}
	}
	for {
		yyj1856++
		if yyhl1856 {
			yyb1856 = yyj1856 > l
		} else {
			yyb1856 = r.CheckBreak()
		}
		if yyb1856 {
			break
		}
		if yyj1856 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1856-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1864 := z.EncBinary()
		_ = yym1864
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1865 := !z.EncBinary()
			yy2arr1865 := z.EncBasicHandle().StructToArray
			var yyfirst1865 bool
			var yyq1865 [4]bool
			_, _, _, _ = yysep1865, yyfirst1865, yyq1865, yy2arr1865
			const yyr1865 bool = false
			yyq1865[0] = x.Kind != ""
			yyq1865[1] = x.APIVersion != ""
			yyq1865[2] = true
			if yyr1865 || yy2arr1865 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1865 int = 1
				for _, b := range yyq1865 {
					if b {
						yynn1865++
					}
				}
				r.EncodeMapStart(yynn1865)
			}
			if yyr1865 || yy2arr1865 {
				if yyq1865[0] {
					yym1867 := z.EncBinary()
					_ = yym1867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1865[0] {
					yyfirst1865 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1865 {
						r.EncodeMapKVSeparator()
					}
					yym1868 := z.EncBinary()
					_ = yym1868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1865 || yy2arr1865 {
				if yysep1865 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1865[1] {
					yym1870 := z.EncBinary()
					_ = yym1870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1865[1] {
					if yyfirst1865 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1865 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1865 {
						r.EncodeMapKVSeparator()
					}
					yym1871 := z.EncBinary()
					_ = yym1871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1865 || yy2arr1865 {
				if yysep1865 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1865[2] {
					yy1873 := &x.ListMeta
					yy1873.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1865[2] {
					if yyfirst1865 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1865 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1865 {
						r.EncodeMapKVSeparator()
					}
					yy1874 := &x.ListMeta
					yy1874.CodecEncodeSelf(e)
				}
			}
			if yyr1865 || yy2arr1865 {
				if yysep1865 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1876 := z.EncBinary()
					_ = yym1876
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				if yyfirst1865 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1865 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep1865 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1877 := z.EncBinary()
					_ = yym1877
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep1865 {
				if yyr1865 || yy2arr1865 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1878 := z.DecBinary()
	_ = yym1878
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1879 := r.ReadMapStart()
			if yyl1879 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1879, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1879 := r.ReadArrayStart()
			if yyl1879 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1879, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1880Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1880Slc
	var yyhl1880 bool = l >= 0
	for yyj1880 := 0; ; yyj1880++ {
		if yyhl1880 {
			if yyj1880 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1880 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1880Slc = r.DecodeBytes(yys1880Slc, true, true)
		yys1880 := string(yys1880Slc)
		if !yyhl1880 {
			r.ReadMapKVSeparator()
		}
		switch yys1880 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv1883 := &x.ListMeta
				yyv1883.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1884 := &x.Items
				yym1885 := z.DecBinary()
				_ = yym1885
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv1884), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1880)
		} // end switch yys1880
	} // end for yyj1880
	if !yyhl1880 {
		r.ReadMapEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1886 int
	var yyb1886 bool
	var yyhl1886 bool = l >= 0
	yyj1886++
	if yyhl1886 {
		yyb1886 = yyj1886 > l
	} else {
		yyb1886 = r.CheckBreak()
	}
	if yyb1886 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1886++
	if yyhl1886 {
		yyb1886 = yyj1886 > l
	} else {
		yyb1886 = r.CheckBreak()
	}
	if yyb1886 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1886++
	if yyhl1886 {
		yyb1886 = yyj1886 > l
	} else {
		yyb1886 = r.CheckBreak()
	}
	if yyb1886 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv1889 := &x.ListMeta
		yyv1889.CodecDecodeSelf(d)
	}
	yyj1886++
	if yyhl1886 {
		yyb1886 = yyj1886 > l
	} else {
		yyb1886 = r.CheckBreak()
	}
	if yyb1886 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1890 := &x.Items
		yym1891 := z.DecBinary()
		_ = yym1891
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv1890), d)
		}
	}
	for {
		yyj1886++
		if yyhl1886 {
			yyb1886 = yyj1886 > l
		} else {
			yyb1886 = r.CheckBreak()
		}
		if yyb1886 {
			break
		}
		if yyj1886 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1886-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1892 := z.EncBinary()
		_ = yym1892
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1893 := !z.EncBinary()
			yy2arr1893 := z.EncBasicHandle().StructToArray
			var yyfirst1893 bool
			var yyq1893 [4]bool
			_, _, _, _ = yysep1893, yyfirst1893, yyq1893, yy2arr1893
			const yyr1893 bool = false
			yyq1893[0] = x.Kind != ""
			yyq1893[1] = x.APIVersion != ""
			yyq1893[2] = true
			if yyr1893 || yy2arr1893 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1893 int = 1
				for _, b := range yyq1893 {
					if b {
						yynn1893++
					}
				}
				r.EncodeMapStart(yynn1893)
			}
			if yyr1893 || yy2arr1893 {
				if yyq1893[0] {
					yym1895 := z.EncBinary()
					_ = yym1895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1893[0] {
					yyfirst1893 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1893 {
						r.EncodeMapKVSeparator()
					}
					yym1896 := z.EncBinary()
					_ = yym1896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1893 || yy2arr1893 {
				if yysep1893 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1893[1] {
					yym1898 := z.EncBinary()
					_ = yym1898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1893[1] {
					if yyfirst1893 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1893 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1893 {
						r.EncodeMapKVSeparator()
					}
					yym1899 := z.EncBinary()
					_ = yym1899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1893 || yy2arr1893 {
				if yysep1893 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1893[2] {
					yy1901 := &x.ObjectMeta
					yy1901.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1893[2] {
					if yyfirst1893 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1893 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1893 {
						r.EncodeMapKVSeparator()
					}
					yy1902 := &x.ObjectMeta
					yy1902.CodecEncodeSelf(e)
				}
			}
			if yyr1893 || yy2arr1893 {
				if yysep1893 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym1904 := z.EncBinary()
					_ = yym1904
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				if yyfirst1893 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1893 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				if yysep1893 {
					r.EncodeMapKVSeparator()
				}
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym1905 := z.EncBinary()
					_ = yym1905
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep1893 {
				if yyr1893 || yy2arr1893 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1906 := z.DecBinary()
	_ = yym1906
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1907 := r.ReadMapStart()
			if yyl1907 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1907, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1907 := r.ReadArrayStart()
			if yyl1907 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1907, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1908Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1908Slc
	var yyhl1908 bool = l >= 0
	for yyj1908 := 0; ; yyj1908++ {
		if yyhl1908 {
			if yyj1908 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1908 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1908Slc = r.DecodeBytes(yys1908Slc, true, true)
		yys1908 := string(yys1908Slc)
		if !yyhl1908 {
			r.ReadMapKVSeparator()
		}
		switch yys1908 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1911 := &x.ObjectMeta
				yyv1911.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv1912 := &x.Subsets
				yym1913 := z.DecBinary()
				_ = yym1913
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv1912), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1908)
		} // end switch yys1908
	} // end for yyj1908
	if !yyhl1908 {
		r.ReadMapEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1914 int
	var yyb1914 bool
	var yyhl1914 bool = l >= 0
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1917 := &x.ObjectMeta
		yyv1917.CodecDecodeSelf(d)
	}
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv1918 := &x.Subsets
		yym1919 := z.DecBinary()
		_ = yym1919
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv1918), d)
		}
	}
	for {
		yyj1914++
		if yyhl1914 {
			yyb1914 = yyj1914 > l
		} else {
			yyb1914 = r.CheckBreak()
		}
		if yyb1914 {
			break
		}
		if yyj1914 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1914-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1920 := z.EncBinary()
		_ = yym1920
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1921 := !z.EncBinary()
			yy2arr1921 := z.EncBasicHandle().StructToArray
			var yyfirst1921 bool
			var yyq1921 [2]bool
			_, _, _, _ = yysep1921, yyfirst1921, yyq1921, yy2arr1921
			const yyr1921 bool = false
			yyq1921[0] = len(x.Addresses) != 0
			yyq1921[1] = len(x.Ports) != 0
			if yyr1921 || yy2arr1921 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1921 int = 0
				for _, b := range yyq1921 {
					if b {
						yynn1921++
					}
				}
				r.EncodeMapStart(yynn1921)
			}
			if yyr1921 || yy2arr1921 {
				if yyq1921[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym1923 := z.EncBinary()
						_ = yym1923
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1921[0] {
					yyfirst1921 = true
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if yysep1921 {
						r.EncodeMapKVSeparator()
					}
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym1924 := z.EncBinary()
						_ = yym1924
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr1921 || yy2arr1921 {
				if yysep1921 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1921[1] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1926 := z.EncBinary()
						_ = yym1926
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1921[1] {
					if yyfirst1921 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1921 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if yysep1921 {
						r.EncodeMapKVSeparator()
					}
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1927 := z.EncBinary()
						_ = yym1927
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yysep1921 {
				if yyr1921 || yy2arr1921 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1928 := z.DecBinary()
	_ = yym1928
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1929 := r.ReadMapStart()
			if yyl1929 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1929, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1929 := r.ReadArrayStart()
			if yyl1929 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1929, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1930Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1930Slc
	var yyhl1930 bool = l >= 0
	for yyj1930 := 0; ; yyj1930++ {
		if yyhl1930 {
			if yyj1930 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1930 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1930Slc = r.DecodeBytes(yys1930Slc, true, true)
		yys1930 := string(yys1930Slc)
		if !yyhl1930 {
			r.ReadMapKVSeparator()
		}
		switch yys1930 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv1931 := &x.Addresses
				yym1932 := z.DecBinary()
				_ = yym1932
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv1931), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1933 := &x.Ports
				yym1934 := z.DecBinary()
				_ = yym1934
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv1933), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1930)
		} // end switch yys1930
	} // end for yyj1930
	if !yyhl1930 {
		r.ReadMapEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1935 int
	var yyb1935 bool
	var yyhl1935 bool = l >= 0
	yyj1935++
	if yyhl1935 {
		yyb1935 = yyj1935 > l
	} else {
		yyb1935 = r.CheckBreak()
	}
	if yyb1935 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv1936 := &x.Addresses
		yym1937 := z.DecBinary()
		_ = yym1937
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv1936), d)
		}
	}
	yyj1935++
	if yyhl1935 {
		yyb1935 = yyj1935 > l
	} else {
		yyb1935 = r.CheckBreak()
	}
	if yyb1935 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1938 := &x.Ports
		yym1939 := z.DecBinary()
		_ = yym1939
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv1938), d)
		}
	}
	for {
		yyj1935++
		if yyhl1935 {
			yyb1935 = yyj1935 > l
		} else {
			yyb1935 = r.CheckBreak()
		}
		if yyb1935 {
			break
		}
		if yyj1935 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1935-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1940 := z.EncBinary()
		_ = yym1940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1941 := !z.EncBinary()
			yy2arr1941 := z.EncBasicHandle().StructToArray
			var yyfirst1941 bool
			var yyq1941 [2]bool
			_, _, _, _ = yysep1941, yyfirst1941, yyq1941, yy2arr1941
			const yyr1941 bool = false
			yyq1941[1] = x.TargetRef != nil
			if yyr1941 || yy2arr1941 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1941 int = 1
				for _, b := range yyq1941 {
					if b {
						yynn1941++
					}
				}
				r.EncodeMapStart(yynn1941)
			}
			if yyr1941 || yy2arr1941 {
				yym1943 := z.EncBinary()
				_ = yym1943
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				yyfirst1941 = true
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				if yysep1941 {
					r.EncodeMapKVSeparator()
				}
				yym1944 := z.EncBinary()
				_ = yym1944
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr1941 || yy2arr1941 {
				if yysep1941 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1941[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1941[1] {
					if yyfirst1941 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1941 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					if yysep1941 {
						r.EncodeMapKVSeparator()
					}
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1941 {
				if yyr1941 || yy2arr1941 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1946 := z.DecBinary()
	_ = yym1946
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1947 := r.ReadMapStart()
			if yyl1947 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1947, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1947 := r.ReadArrayStart()
			if yyl1947 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1947, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1948Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1948Slc
	var yyhl1948 bool = l >= 0
	for yyj1948 := 0; ; yyj1948++ {
		if yyhl1948 {
			if yyj1948 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1948 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1948Slc = r.DecodeBytes(yys1948Slc, true, true)
		yys1948 := string(yys1948Slc)
		if !yyhl1948 {
			r.ReadMapKVSeparator()
		}
		switch yys1948 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1948)
		} // end switch yys1948
	} // end for yyj1948
	if !yyhl1948 {
		r.ReadMapEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1951 int
	var yyb1951 bool
	var yyhl1951 bool = l >= 0
	yyj1951++
	if yyhl1951 {
		yyb1951 = yyj1951 > l
	} else {
		yyb1951 = r.CheckBreak()
	}
	if yyb1951 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1951++
	if yyhl1951 {
		yyb1951 = yyj1951 > l
	} else {
		yyb1951 = r.CheckBreak()
	}
	if yyb1951 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj1951++
		if yyhl1951 {
			yyb1951 = yyj1951 > l
		} else {
			yyb1951 = r.CheckBreak()
		}
		if yyb1951 {
			break
		}
		if yyj1951 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1951-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1954 := z.EncBinary()
		_ = yym1954
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1955 := !z.EncBinary()
			yy2arr1955 := z.EncBasicHandle().StructToArray
			var yyfirst1955 bool
			var yyq1955 [3]bool
			_, _, _, _ = yysep1955, yyfirst1955, yyq1955, yy2arr1955
			const yyr1955 bool = false
			yyq1955[0] = x.Name != ""
			yyq1955[2] = x.Protocol != ""
			if yyr1955 || yy2arr1955 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1955 int = 1
				for _, b := range yyq1955 {
					if b {
						yynn1955++
					}
				}
				r.EncodeMapStart(yynn1955)
			}
			if yyr1955 || yy2arr1955 {
				if yyq1955[0] {
					yym1957 := z.EncBinary()
					_ = yym1957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1955[0] {
					yyfirst1955 = true
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep1955 {
						r.EncodeMapKVSeparator()
					}
					yym1958 := z.EncBinary()
					_ = yym1958
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1955 || yy2arr1955 {
				if yysep1955 {
					r.EncodeArrayEntrySeparator()
				}
				yym1960 := z.EncBinary()
				_ = yym1960
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				if yyfirst1955 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1955 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				if yysep1955 {
					r.EncodeMapKVSeparator()
				}
				yym1961 := z.EncBinary()
				_ = yym1961
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1955 || yy2arr1955 {
				if yysep1955 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1955[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1955[2] {
					if yyfirst1955 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1955 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					if yysep1955 {
						r.EncodeMapKVSeparator()
					}
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yysep1955 {
				if yyr1955 || yy2arr1955 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1963 := z.DecBinary()
	_ = yym1963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1964 := r.ReadMapStart()
			if yyl1964 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1964, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1964 := r.ReadArrayStart()
			if yyl1964 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1965Slc
	var yyhl1965 bool = l >= 0
	for yyj1965 := 0; ; yyj1965++ {
		if yyhl1965 {
			if yyj1965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1965 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1965Slc = r.DecodeBytes(yys1965Slc, true, true)
		yys1965 := string(yys1965Slc)
		if !yyhl1965 {
			r.ReadMapKVSeparator()
		}
		switch yys1965 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1965)
		} // end switch yys1965
	} // end for yyj1965
	if !yyhl1965 {
		r.ReadMapEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1969 int
	var yyb1969 bool
	var yyhl1969 bool = l >= 0
	yyj1969++
	if yyhl1969 {
		yyb1969 = yyj1969 > l
	} else {
		yyb1969 = r.CheckBreak()
	}
	if yyb1969 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1969++
	if yyhl1969 {
		yyb1969 = yyj1969 > l
	} else {
		yyb1969 = r.CheckBreak()
	}
	if yyb1969 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1969++
	if yyhl1969 {
		yyb1969 = yyj1969 > l
	} else {
		yyb1969 = r.CheckBreak()
	}
	if yyb1969 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj1969++
		if yyhl1969 {
			yyb1969 = yyj1969 > l
		} else {
			yyb1969 = r.CheckBreak()
		}
		if yyb1969 {
			break
		}
		if yyj1969 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1969-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1973 := z.EncBinary()
		_ = yym1973
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1974 := !z.EncBinary()
			yy2arr1974 := z.EncBasicHandle().StructToArray
			var yyfirst1974 bool
			var yyq1974 [4]bool
			_, _, _, _ = yysep1974, yyfirst1974, yyq1974, yy2arr1974
			const yyr1974 bool = false
			yyq1974[0] = x.Kind != ""
			yyq1974[1] = x.APIVersion != ""
			yyq1974[2] = true
			if yyr1974 || yy2arr1974 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1974 int = 1
				for _, b := range yyq1974 {
					if b {
						yynn1974++
					}
				}
				r.EncodeMapStart(yynn1974)
			}
			if yyr1974 || yy2arr1974 {
				if yyq1974[0] {
					yym1976 := z.EncBinary()
					_ = yym1976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1974[0] {
					yyfirst1974 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1974 {
						r.EncodeMapKVSeparator()
					}
					yym1977 := z.EncBinary()
					_ = yym1977
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1974 || yy2arr1974 {
				if yysep1974 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1974[1] {
					yym1979 := z.EncBinary()
					_ = yym1979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1974[1] {
					if yyfirst1974 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1974 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1974 {
						r.EncodeMapKVSeparator()
					}
					yym1980 := z.EncBinary()
					_ = yym1980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1974 || yy2arr1974 {
				if yysep1974 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1974[2] {
					yy1982 := &x.ListMeta
					yy1982.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1974[2] {
					if yyfirst1974 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1974 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1974 {
						r.EncodeMapKVSeparator()
					}
					yy1983 := &x.ListMeta
					yy1983.CodecEncodeSelf(e)
				}
			}
			if yyr1974 || yy2arr1974 {
				if yysep1974 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1985 := z.EncBinary()
					_ = yym1985
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				if yyfirst1974 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1974 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep1974 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1986 := z.EncBinary()
					_ = yym1986
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep1974 {
				if yyr1974 || yy2arr1974 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1987 := z.DecBinary()
	_ = yym1987
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1988 := r.ReadMapStart()
			if yyl1988 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1988, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1988 := r.ReadArrayStart()
			if yyl1988 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1988, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1989Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1989Slc
	var yyhl1989 bool = l >= 0
	for yyj1989 := 0; ; yyj1989++ {
		if yyhl1989 {
			if yyj1989 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1989 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1989Slc = r.DecodeBytes(yys1989Slc, true, true)
		yys1989 := string(yys1989Slc)
		if !yyhl1989 {
			r.ReadMapKVSeparator()
		}
		switch yys1989 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv1992 := &x.ListMeta
				yyv1992.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1993 := &x.Items
				yym1994 := z.DecBinary()
				_ = yym1994
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv1993), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1989)
		} // end switch yys1989
	} // end for yyj1989
	if !yyhl1989 {
		r.ReadMapEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1995 int
	var yyb1995 bool
	var yyhl1995 bool = l >= 0
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv1998 := &x.ListMeta
		yyv1998.CodecDecodeSelf(d)
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1999 := &x.Items
		yym2000 := z.DecBinary()
		_ = yym2000
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv1999), d)
		}
	}
	for {
		yyj1995++
		if yyhl1995 {
			yyb1995 = yyj1995 > l
		} else {
			yyb1995 = r.CheckBreak()
		}
		if yyb1995 {
			break
		}
		if yyj1995 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1995-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2001 := z.EncBinary()
		_ = yym2001
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2002 := !z.EncBinary()
			yy2arr2002 := z.EncBasicHandle().StructToArray
			var yyfirst2002 bool
			var yyq2002 [4]bool
			_, _, _, _ = yysep2002, yyfirst2002, yyq2002, yy2arr2002
			const yyr2002 bool = false
			yyq2002[0] = x.PodCIDR != ""
			yyq2002[1] = x.ExternalID != ""
			yyq2002[2] = x.ProviderID != ""
			yyq2002[3] = x.Unschedulable != false
			if yyr2002 || yy2arr2002 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2002 int = 0
				for _, b := range yyq2002 {
					if b {
						yynn2002++
					}
				}
				r.EncodeMapStart(yynn2002)
			}
			if yyr2002 || yy2arr2002 {
				if yyq2002[0] {
					yym2004 := z.EncBinary()
					_ = yym2004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2002[0] {
					yyfirst2002 = true
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					if yysep2002 {
						r.EncodeMapKVSeparator()
					}
					yym2005 := z.EncBinary()
					_ = yym2005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2002 || yy2arr2002 {
				if yysep2002 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2002[1] {
					yym2007 := z.EncBinary()
					_ = yym2007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2002[1] {
					if yyfirst2002 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2002 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					if yysep2002 {
						r.EncodeMapKVSeparator()
					}
					yym2008 := z.EncBinary()
					_ = yym2008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2002 || yy2arr2002 {
				if yysep2002 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2002[2] {
					yym2010 := z.EncBinary()
					_ = yym2010
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2002[2] {
					if yyfirst2002 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2002 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					if yysep2002 {
						r.EncodeMapKVSeparator()
					}
					yym2011 := z.EncBinary()
					_ = yym2011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2002 || yy2arr2002 {
				if yysep2002 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2002[3] {
					yym2013 := z.EncBinary()
					_ = yym2013
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2002[3] {
					if yyfirst2002 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2002 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					if yysep2002 {
						r.EncodeMapKVSeparator()
					}
					yym2014 := z.EncBinary()
					_ = yym2014
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2002 {
				if yyr2002 || yy2arr2002 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2015 := z.DecBinary()
	_ = yym2015
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2016 := r.ReadMapStart()
			if yyl2016 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2016, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2016 := r.ReadArrayStart()
			if yyl2016 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2016, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2017Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2017Slc
	var yyhl2017 bool = l >= 0
	for yyj2017 := 0; ; yyj2017++ {
		if yyhl2017 {
			if yyj2017 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2017 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2017Slc = r.DecodeBytes(yys2017Slc, true, true)
		yys2017 := string(yys2017Slc)
		if !yyhl2017 {
			r.ReadMapKVSeparator()
		}
		switch yys2017 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2017)
		} // end switch yys2017
	} // end for yyj2017
	if !yyhl2017 {
		r.ReadMapEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2022 int
	var yyb2022 bool
	var yyhl2022 bool = l >= 0
	yyj2022++
	if yyhl2022 {
		yyb2022 = yyj2022 > l
	} else {
		yyb2022 = r.CheckBreak()
	}
	if yyb2022 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2022++
	if yyhl2022 {
		yyb2022 = yyj2022 > l
	} else {
		yyb2022 = r.CheckBreak()
	}
	if yyb2022 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2022++
	if yyhl2022 {
		yyb2022 = yyj2022 > l
	} else {
		yyb2022 = r.CheckBreak()
	}
	if yyb2022 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2022++
	if yyhl2022 {
		yyb2022 = yyj2022 > l
	} else {
		yyb2022 = r.CheckBreak()
	}
	if yyb2022 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2022++
		if yyhl2022 {
			yyb2022 = yyj2022 > l
		} else {
			yyb2022 = r.CheckBreak()
		}
		if yyb2022 {
			break
		}
		if yyj2022 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2022-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2027 := z.EncBinary()
		_ = yym2027
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2028 := !z.EncBinary()
			yy2arr2028 := z.EncBasicHandle().StructToArray
			var yyfirst2028 bool
			var yyq2028 [1]bool
			_, _, _, _ = yysep2028, yyfirst2028, yyq2028, yy2arr2028
			const yyr2028 bool = false
			if yyr2028 || yy2arr2028 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2028 int = 1
				for _, b := range yyq2028 {
					if b {
						yynn2028++
					}
				}
				r.EncodeMapStart(yynn2028)
			}
			if yyr2028 || yy2arr2028 {
				yym2030 := z.EncBinary()
				_ = yym2030
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				yyfirst2028 = true
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				if yysep2028 {
					r.EncodeMapKVSeparator()
				}
				yym2031 := z.EncBinary()
				_ = yym2031
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2028 {
				if yyr2028 || yy2arr2028 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2032 := z.DecBinary()
	_ = yym2032
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2033 := r.ReadMapStart()
			if yyl2033 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2033, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2033 := r.ReadArrayStart()
			if yyl2033 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2033, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2034Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2034Slc
	var yyhl2034 bool = l >= 0
	for yyj2034 := 0; ; yyj2034++ {
		if yyhl2034 {
			if yyj2034 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2034 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2034Slc = r.DecodeBytes(yys2034Slc, true, true)
		yys2034 := string(yys2034Slc)
		if !yyhl2034 {
			r.ReadMapKVSeparator()
		}
		switch yys2034 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2034)
		} // end switch yys2034
	} // end for yyj2034
	if !yyhl2034 {
		r.ReadMapEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2036 int
	var yyb2036 bool
	var yyhl2036 bool = l >= 0
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2036++
		if yyhl2036 {
			yyb2036 = yyj2036 > l
		} else {
			yyb2036 = r.CheckBreak()
		}
		if yyb2036 {
			break
		}
		if yyj2036 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2036-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2038 := z.EncBinary()
		_ = yym2038
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2039 := !z.EncBinary()
			yy2arr2039 := z.EncBasicHandle().StructToArray
			var yyfirst2039 bool
			var yyq2039 [1]bool
			_, _, _, _ = yysep2039, yyfirst2039, yyq2039, yy2arr2039
			const yyr2039 bool = false
			yyq2039[0] = true
			if yyr2039 || yy2arr2039 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2039 int = 0
				for _, b := range yyq2039 {
					if b {
						yynn2039++
					}
				}
				r.EncodeMapStart(yynn2039)
			}
			if yyr2039 || yy2arr2039 {
				if yyq2039[0] {
					yy2041 := &x.KubeletEndpoint
					yy2041.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2039[0] {
					yyfirst2039 = true
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					if yysep2039 {
						r.EncodeMapKVSeparator()
					}
					yy2042 := &x.KubeletEndpoint
					yy2042.CodecEncodeSelf(e)
				}
			}
			if yysep2039 {
				if yyr2039 || yy2arr2039 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2043 := z.DecBinary()
	_ = yym2043
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2044 := r.ReadMapStart()
			if yyl2044 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2044, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2044 := r.ReadArrayStart()
			if yyl2044 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2044, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2045Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2045Slc
	var yyhl2045 bool = l >= 0
	for yyj2045 := 0; ; yyj2045++ {
		if yyhl2045 {
			if yyj2045 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2045 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2045Slc = r.DecodeBytes(yys2045Slc, true, true)
		yys2045 := string(yys2045Slc)
		if !yyhl2045 {
			r.ReadMapKVSeparator()
		}
		switch yys2045 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2046 := &x.KubeletEndpoint
				yyv2046.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2045)
		} // end switch yys2045
	} // end for yyj2045
	if !yyhl2045 {
		r.ReadMapEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2047 int
	var yyb2047 bool
	var yyhl2047 bool = l >= 0
	yyj2047++
	if yyhl2047 {
		yyb2047 = yyj2047 > l
	} else {
		yyb2047 = r.CheckBreak()
	}
	if yyb2047 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2048 := &x.KubeletEndpoint
		yyv2048.CodecDecodeSelf(d)
	}
	for {
		yyj2047++
		if yyhl2047 {
			yyb2047 = yyj2047 > l
		} else {
			yyb2047 = r.CheckBreak()
		}
		if yyb2047 {
			break
		}
		if yyj2047 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2047-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2049 := z.EncBinary()
		_ = yym2049
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2050 := !z.EncBinary()
			yy2arr2050 := z.EncBasicHandle().StructToArray
			var yyfirst2050 bool
			var yyq2050 [8]bool
			_, _, _, _ = yysep2050, yyfirst2050, yyq2050, yy2arr2050
			const yyr2050 bool = false
			if yyr2050 || yy2arr2050 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2050 int = 8
				for _, b := range yyq2050 {
					if b {
						yynn2050++
					}
				}
				r.EncodeMapStart(yynn2050)
			}
			if yyr2050 || yy2arr2050 {
				yym2052 := z.EncBinary()
				_ = yym2052
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				yyfirst2050 = true
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				if yysep2050 {
					r.EncodeMapKVSeparator()
				}
				yym2053 := z.EncBinary()
				_ = yym2053
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2050 || yy2arr2050 {
				if yysep2050 {
					r.EncodeArrayEntrySeparator()
				}
				yym2055 := z.EncBinary()
				_ = yym2055
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				if yyfirst2050 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2050 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				if yysep2050 {
					r.EncodeMapKVSeparator()
				}
				yym2056 := z.EncBinary()
				_ = yym2056
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2050 || yy2arr2050 {
				if yysep2050 {
					r.EncodeArrayEntrySeparator()
				}
				yym2058 := z.EncBinary()
				_ = yym2058
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				if yyfirst2050 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2050 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				if yysep2050 {
					r.EncodeMapKVSeparator()
				}
				yym2059 := z.EncBinary()
				_ = yym2059
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2050 || yy2arr2050 {
				if yysep2050 {
					r.EncodeArrayEntrySeparator()
				}
				yym2061 := z.EncBinary()
				_ = yym2061
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				if yyfirst2050 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2050 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				if yysep2050 {
					r.EncodeMapKVSeparator()
				}
				yym2062 := z.EncBinary()
				_ = yym2062
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2050 || yy2arr2050 {
				if yysep2050 {
					r.EncodeArrayEntrySeparator()
				}
				yym2064 := z.EncBinary()
				_ = yym2064
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				if yyfirst2050 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2050 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				if yysep2050 {
					r.EncodeMapKVSeparator()
				}
				yym2065 := z.EncBinary()
				_ = yym2065
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2050 || yy2arr2050 {
				if yysep2050 {
					r.EncodeArrayEntrySeparator()
				}
				yym2067 := z.EncBinary()
				_ = yym2067
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				if yyfirst2050 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2050 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				if yysep2050 {
					r.EncodeMapKVSeparator()
				}
				yym2068 := z.EncBinary()
				_ = yym2068
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2050 || yy2arr2050 {
				if yysep2050 {
					r.EncodeArrayEntrySeparator()
				}
				yym2070 := z.EncBinary()
				_ = yym2070
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				if yyfirst2050 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2050 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				if yysep2050 {
					r.EncodeMapKVSeparator()
				}
				yym2071 := z.EncBinary()
				_ = yym2071
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2050 || yy2arr2050 {
				if yysep2050 {
					r.EncodeArrayEntrySeparator()
				}
				yym2073 := z.EncBinary()
				_ = yym2073
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				if yyfirst2050 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2050 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				if yysep2050 {
					r.EncodeMapKVSeparator()
				}
				yym2074 := z.EncBinary()
				_ = yym2074
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2050 {
				if yyr2050 || yy2arr2050 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2075 := z.DecBinary()
	_ = yym2075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2076 := r.ReadMapStart()
			if yyl2076 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2076, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2076 := r.ReadArrayStart()
			if yyl2076 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2077Slc
	var yyhl2077 bool = l >= 0
	for yyj2077 := 0; ; yyj2077++ {
		if yyhl2077 {
			if yyj2077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2077 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2077Slc = r.DecodeBytes(yys2077Slc, true, true)
		yys2077 := string(yys2077Slc)
		if !yyhl2077 {
			r.ReadMapKVSeparator()
		}
		switch yys2077 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2077)
		} // end switch yys2077
	} // end for yyj2077
	if !yyhl2077 {
		r.ReadMapEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2086 int
	var yyb2086 bool
	var yyhl2086 bool = l >= 0
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2086++
		if yyhl2086 {
			yyb2086 = yyj2086 > l
		} else {
			yyb2086 = r.CheckBreak()
		}
		if yyb2086 {
			break
		}
		if yyj2086 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2086-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2095 := z.EncBinary()
		_ = yym2095
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2096 := !z.EncBinary()
			yy2arr2096 := z.EncBasicHandle().StructToArray
			var yyfirst2096 bool
			var yyq2096 [6]bool
			_, _, _, _ = yysep2096, yyfirst2096, yyq2096, yy2arr2096
			const yyr2096 bool = false
			yyq2096[0] = len(x.Capacity) != 0
			yyq2096[1] = x.Phase != ""
			yyq2096[2] = len(x.Conditions) != 0
			yyq2096[3] = len(x.Addresses) != 0
			yyq2096[4] = true
			yyq2096[5] = true
			if yyr2096 || yy2arr2096 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2096 int = 0
				for _, b := range yyq2096 {
					if b {
						yynn2096++
					}
				}
				r.EncodeMapStart(yynn2096)
			}
			if yyr2096 || yy2arr2096 {
				if yyq2096[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2096[0] {
					yyfirst2096 = true
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if yysep2096 {
						r.EncodeMapKVSeparator()
					}
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2096 || yy2arr2096 {
				if yysep2096 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2096[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2096[1] {
					if yyfirst2096 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2096 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					if yysep2096 {
						r.EncodeMapKVSeparator()
					}
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2096 || yy2arr2096 {
				if yysep2096 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2096[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2100 := z.EncBinary()
						_ = yym2100
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2096[2] {
					if yyfirst2096 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2096 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if yysep2096 {
						r.EncodeMapKVSeparator()
					}
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2101 := z.EncBinary()
						_ = yym2101
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2096 || yy2arr2096 {
				if yysep2096 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2096[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2103 := z.EncBinary()
						_ = yym2103
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2096[3] {
					if yyfirst2096 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2096 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if yysep2096 {
						r.EncodeMapKVSeparator()
					}
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2104 := z.EncBinary()
						_ = yym2104
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2096 || yy2arr2096 {
				if yysep2096 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2096[4] {
					yy2106 := &x.DaemonEndpoints
					yy2106.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2096[4] {
					if yyfirst2096 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2096 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					if yysep2096 {
						r.EncodeMapKVSeparator()
					}
					yy2107 := &x.DaemonEndpoints
					yy2107.CodecEncodeSelf(e)
				}
			}
			if yyr2096 || yy2arr2096 {
				if yysep2096 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2096[5] {
					yy2109 := &x.NodeInfo
					yy2109.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2096[5] {
					if yyfirst2096 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2096 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					if yysep2096 {
						r.EncodeMapKVSeparator()
					}
					yy2110 := &x.NodeInfo
					yy2110.CodecEncodeSelf(e)
				}
			}
			if yysep2096 {
				if yyr2096 || yy2arr2096 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2111 := z.DecBinary()
	_ = yym2111
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2112 := r.ReadMapStart()
			if yyl2112 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2112, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2112 := r.ReadArrayStart()
			if yyl2112 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2112, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2113Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2113Slc
	var yyhl2113 bool = l >= 0
	for yyj2113 := 0; ; yyj2113++ {
		if yyhl2113 {
			if yyj2113 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2113 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2113Slc = r.DecodeBytes(yys2113Slc, true, true)
		yys2113 := string(yys2113Slc)
		if !yyhl2113 {
			r.ReadMapKVSeparator()
		}
		switch yys2113 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2114 := &x.Capacity
				yyv2114.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2116 := &x.Conditions
				yym2117 := z.DecBinary()
				_ = yym2117
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2116), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2118 := &x.Addresses
				yym2119 := z.DecBinary()
				_ = yym2119
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2118), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2120 := &x.DaemonEndpoints
				yyv2120.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2121 := &x.NodeInfo
				yyv2121.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2113)
		} // end switch yys2113
	} // end for yyj2113
	if !yyhl2113 {
		r.ReadMapEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2122 int
	var yyb2122 bool
	var yyhl2122 bool = l >= 0
	yyj2122++
	if yyhl2122 {
		yyb2122 = yyj2122 > l
	} else {
		yyb2122 = r.CheckBreak()
	}
	if yyb2122 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2123 := &x.Capacity
		yyv2123.CodecDecodeSelf(d)
	}
	yyj2122++
	if yyhl2122 {
		yyb2122 = yyj2122 > l
	} else {
		yyb2122 = r.CheckBreak()
	}
	if yyb2122 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2122++
	if yyhl2122 {
		yyb2122 = yyj2122 > l
	} else {
		yyb2122 = r.CheckBreak()
	}
	if yyb2122 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2125 := &x.Conditions
		yym2126 := z.DecBinary()
		_ = yym2126
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2125), d)
		}
	}
	yyj2122++
	if yyhl2122 {
		yyb2122 = yyj2122 > l
	} else {
		yyb2122 = r.CheckBreak()
	}
	if yyb2122 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2127 := &x.Addresses
		yym2128 := z.DecBinary()
		_ = yym2128
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2127), d)
		}
	}
	yyj2122++
	if yyhl2122 {
		yyb2122 = yyj2122 > l
	} else {
		yyb2122 = r.CheckBreak()
	}
	if yyb2122 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2129 := &x.DaemonEndpoints
		yyv2129.CodecDecodeSelf(d)
	}
	yyj2122++
	if yyhl2122 {
		yyb2122 = yyj2122 > l
	} else {
		yyb2122 = r.CheckBreak()
	}
	if yyb2122 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2130 := &x.NodeInfo
		yyv2130.CodecDecodeSelf(d)
	}
	for {
		yyj2122++
		if yyhl2122 {
			yyb2122 = yyj2122 > l
		} else {
			yyb2122 = r.CheckBreak()
		}
		if yyb2122 {
			break
		}
		if yyj2122 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2122-1, "")
	}
	r.ReadArrayEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2131 := z.EncBinary()
	_ = yym2131
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2132 := z.DecBinary()
	_ = yym2132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2133 := z.EncBinary()
	_ = yym2133
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2134 := z.DecBinary()
	_ = yym2134
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2135 := z.EncBinary()
		_ = yym2135
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2136 := !z.EncBinary()
			yy2arr2136 := z.EncBasicHandle().StructToArray
			var yyfirst2136 bool
			var yyq2136 [6]bool
			_, _, _, _ = yysep2136, yyfirst2136, yyq2136, yy2arr2136
			const yyr2136 bool = false
			yyq2136[2] = true
			yyq2136[3] = true
			yyq2136[4] = x.Reason != ""
			yyq2136[5] = x.Message != ""
			if yyr2136 || yy2arr2136 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2136 int = 2
				for _, b := range yyq2136 {
					if b {
						yynn2136++
					}
				}
				r.EncodeMapStart(yynn2136)
			}
			if yyr2136 || yy2arr2136 {
				x.Type.CodecEncodeSelf(e)
			} else {
				yyfirst2136 = true
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				if yysep2136 {
					r.EncodeMapKVSeparator()
				}
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2136 || yy2arr2136 {
				if yysep2136 {
					r.EncodeArrayEntrySeparator()
				}
				x.Status.CodecEncodeSelf(e)
			} else {
				if yyfirst2136 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2136 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				if yysep2136 {
					r.EncodeMapKVSeparator()
				}
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2136 || yy2arr2136 {
				if yysep2136 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2136[2] {
					yy2140 := &x.LastHeartbeatTime
					yym2141 := z.EncBinary()
					_ = yym2141
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2140) {
					} else if yym2141 {
						z.EncBinaryMarshal(yy2140)
					} else if !yym2141 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2140)
					} else {
						z.EncFallback(yy2140)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2136[2] {
					if yyfirst2136 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2136 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					if yysep2136 {
						r.EncodeMapKVSeparator()
					}
					yy2142 := &x.LastHeartbeatTime
					yym2143 := z.EncBinary()
					_ = yym2143
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2142) {
					} else if yym2143 {
						z.EncBinaryMarshal(yy2142)
					} else if !yym2143 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2142)
					} else {
						z.EncFallback(yy2142)
					}
				}
			}
			if yyr2136 || yy2arr2136 {
				if yysep2136 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2136[3] {
					yy2145 := &x.LastTransitionTime
					yym2146 := z.EncBinary()
					_ = yym2146
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2145) {
					} else if yym2146 {
						z.EncBinaryMarshal(yy2145)
					} else if !yym2146 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2145)
					} else {
						z.EncFallback(yy2145)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2136[3] {
					if yyfirst2136 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2136 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					if yysep2136 {
						r.EncodeMapKVSeparator()
					}
					yy2147 := &x.LastTransitionTime
					yym2148 := z.EncBinary()
					_ = yym2148
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2147) {
					} else if yym2148 {
						z.EncBinaryMarshal(yy2147)
					} else if !yym2148 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2147)
					} else {
						z.EncFallback(yy2147)
					}
				}
			}
			if yyr2136 || yy2arr2136 {
				if yysep2136 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2136[4] {
					yym2150 := z.EncBinary()
					_ = yym2150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2136[4] {
					if yyfirst2136 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2136 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep2136 {
						r.EncodeMapKVSeparator()
					}
					yym2151 := z.EncBinary()
					_ = yym2151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2136 || yy2arr2136 {
				if yysep2136 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2136[5] {
					yym2153 := z.EncBinary()
					_ = yym2153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2136[5] {
					if yyfirst2136 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2136 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep2136 {
						r.EncodeMapKVSeparator()
					}
					yym2154 := z.EncBinary()
					_ = yym2154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2136 {
				if yyr2136 || yy2arr2136 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2155 := z.DecBinary()
	_ = yym2155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2156 := r.ReadMapStart()
			if yyl2156 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2156, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2156 := r.ReadArrayStart()
			if yyl2156 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2157Slc
	var yyhl2157 bool = l >= 0
	for yyj2157 := 0; ; yyj2157++ {
		if yyhl2157 {
			if yyj2157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2157 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2157Slc = r.DecodeBytes(yys2157Slc, true, true)
		yys2157 := string(yys2157Slc)
		if !yyhl2157 {
			r.ReadMapKVSeparator()
		}
		switch yys2157 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_util.Time{}
			} else {
				yyv2160 := &x.LastHeartbeatTime
				yym2161 := z.DecBinary()
				_ = yym2161
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2160) {
				} else if yym2161 {
					z.DecBinaryUnmarshal(yyv2160)
				} else if !yym2161 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2160)
				} else {
					z.DecFallback(yyv2160, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_util.Time{}
			} else {
				yyv2162 := &x.LastTransitionTime
				yym2163 := z.DecBinary()
				_ = yym2163
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2162) {
				} else if yym2163 {
					z.DecBinaryUnmarshal(yyv2162)
				} else if !yym2163 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2162)
				} else {
					z.DecFallback(yyv2162, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2157)
		} // end switch yys2157
	} // end for yyj2157
	if !yyhl2157 {
		r.ReadMapEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2166 int
	var yyb2166 bool
	var yyhl2166 bool = l >= 0
	yyj2166++
	if yyhl2166 {
		yyb2166 = yyj2166 > l
	} else {
		yyb2166 = r.CheckBreak()
	}
	if yyb2166 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2166++
	if yyhl2166 {
		yyb2166 = yyj2166 > l
	} else {
		yyb2166 = r.CheckBreak()
	}
	if yyb2166 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2166++
	if yyhl2166 {
		yyb2166 = yyj2166 > l
	} else {
		yyb2166 = r.CheckBreak()
	}
	if yyb2166 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_util.Time{}
	} else {
		yyv2169 := &x.LastHeartbeatTime
		yym2170 := z.DecBinary()
		_ = yym2170
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2169) {
		} else if yym2170 {
			z.DecBinaryUnmarshal(yyv2169)
		} else if !yym2170 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2169)
		} else {
			z.DecFallback(yyv2169, false)
		}
	}
	yyj2166++
	if yyhl2166 {
		yyb2166 = yyj2166 > l
	} else {
		yyb2166 = r.CheckBreak()
	}
	if yyb2166 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_util.Time{}
	} else {
		yyv2171 := &x.LastTransitionTime
		yym2172 := z.DecBinary()
		_ = yym2172
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2171) {
		} else if yym2172 {
			z.DecBinaryUnmarshal(yyv2171)
		} else if !yym2172 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2171)
		} else {
			z.DecFallback(yyv2171, false)
		}
	}
	yyj2166++
	if yyhl2166 {
		yyb2166 = yyj2166 > l
	} else {
		yyb2166 = r.CheckBreak()
	}
	if yyb2166 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2166++
	if yyhl2166 {
		yyb2166 = yyj2166 > l
	} else {
		yyb2166 = r.CheckBreak()
	}
	if yyb2166 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2166++
		if yyhl2166 {
			yyb2166 = yyj2166 > l
		} else {
			yyb2166 = r.CheckBreak()
		}
		if yyb2166 {
			break
		}
		if yyj2166 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2166-1, "")
	}
	r.ReadArrayEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2175 := z.EncBinary()
	_ = yym2175
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2176 := z.DecBinary()
	_ = yym2176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2177 := z.EncBinary()
		_ = yym2177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2178 := !z.EncBinary()
			yy2arr2178 := z.EncBasicHandle().StructToArray
			var yyfirst2178 bool
			var yyq2178 [2]bool
			_, _, _, _ = yysep2178, yyfirst2178, yyq2178, yy2arr2178
			const yyr2178 bool = false
			if yyr2178 || yy2arr2178 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2178 int = 2
				for _, b := range yyq2178 {
					if b {
						yynn2178++
					}
				}
				r.EncodeMapStart(yynn2178)
			}
			if yyr2178 || yy2arr2178 {
				x.Type.CodecEncodeSelf(e)
			} else {
				yyfirst2178 = true
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				if yysep2178 {
					r.EncodeMapKVSeparator()
				}
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2178 || yy2arr2178 {
				if yysep2178 {
					r.EncodeArrayEntrySeparator()
				}
				yym2181 := z.EncBinary()
				_ = yym2181
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				if yyfirst2178 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2178 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				if yysep2178 {
					r.EncodeMapKVSeparator()
				}
				yym2182 := z.EncBinary()
				_ = yym2182
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2178 {
				if yyr2178 || yy2arr2178 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2183 := z.DecBinary()
	_ = yym2183
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2184 := r.ReadMapStart()
			if yyl2184 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2184, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2184 := r.ReadArrayStart()
			if yyl2184 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2184, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2185Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2185Slc
	var yyhl2185 bool = l >= 0
	for yyj2185 := 0; ; yyj2185++ {
		if yyhl2185 {
			if yyj2185 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2185 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2185Slc = r.DecodeBytes(yys2185Slc, true, true)
		yys2185 := string(yys2185Slc)
		if !yyhl2185 {
			r.ReadMapKVSeparator()
		}
		switch yys2185 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2185)
		} // end switch yys2185
	} // end for yyj2185
	if !yyhl2185 {
		r.ReadMapEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2188 int
	var yyb2188 bool
	var yyhl2188 bool = l >= 0
	yyj2188++
	if yyhl2188 {
		yyb2188 = yyj2188 > l
	} else {
		yyb2188 = r.CheckBreak()
	}
	if yyb2188 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2188++
	if yyhl2188 {
		yyb2188 = yyj2188 > l
	} else {
		yyb2188 = r.CheckBreak()
	}
	if yyb2188 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2188++
		if yyhl2188 {
			yyb2188 = yyj2188 > l
		} else {
			yyb2188 = r.CheckBreak()
		}
		if yyb2188 {
			break
		}
		if yyj2188 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2188-1, "")
	}
	r.ReadArrayEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2191 := z.EncBinary()
	_ = yym2191
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2192 := z.DecBinary()
	_ = yym2192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2193 := z.EncBinary()
		_ = yym2193
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2194 := z.DecBinary()
	_ = yym2194
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2195 := z.EncBinary()
		_ = yym2195
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2196 := !z.EncBinary()
			yy2arr2196 := z.EncBasicHandle().StructToArray
			var yyfirst2196 bool
			var yyq2196 [5]bool
			_, _, _, _ = yysep2196, yyfirst2196, yyq2196, yy2arr2196
			const yyr2196 bool = false
			yyq2196[0] = x.Kind != ""
			yyq2196[1] = x.APIVersion != ""
			yyq2196[2] = true
			yyq2196[3] = true
			yyq2196[4] = true
			if yyr2196 || yy2arr2196 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2196 int = 0
				for _, b := range yyq2196 {
					if b {
						yynn2196++
					}
				}
				r.EncodeMapStart(yynn2196)
			}
			if yyr2196 || yy2arr2196 {
				if yyq2196[0] {
					yym2198 := z.EncBinary()
					_ = yym2198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2196[0] {
					yyfirst2196 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2196 {
						r.EncodeMapKVSeparator()
					}
					yym2199 := z.EncBinary()
					_ = yym2199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2196 || yy2arr2196 {
				if yysep2196 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2196[1] {
					yym2201 := z.EncBinary()
					_ = yym2201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2196[1] {
					if yyfirst2196 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2196 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2196 {
						r.EncodeMapKVSeparator()
					}
					yym2202 := z.EncBinary()
					_ = yym2202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2196 || yy2arr2196 {
				if yysep2196 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2196[2] {
					yy2204 := &x.ObjectMeta
					yy2204.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2196[2] {
					if yyfirst2196 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2196 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2196 {
						r.EncodeMapKVSeparator()
					}
					yy2205 := &x.ObjectMeta
					yy2205.CodecEncodeSelf(e)
				}
			}
			if yyr2196 || yy2arr2196 {
				if yysep2196 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2196[3] {
					yy2207 := &x.Spec
					yy2207.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2196[3] {
					if yyfirst2196 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2196 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep2196 {
						r.EncodeMapKVSeparator()
					}
					yy2208 := &x.Spec
					yy2208.CodecEncodeSelf(e)
				}
			}
			if yyr2196 || yy2arr2196 {
				if yysep2196 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2196[4] {
					yy2210 := &x.Status
					yy2210.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2196[4] {
					if yyfirst2196 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2196 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep2196 {
						r.EncodeMapKVSeparator()
					}
					yy2211 := &x.Status
					yy2211.CodecEncodeSelf(e)
				}
			}
			if yysep2196 {
				if yyr2196 || yy2arr2196 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2212 := z.DecBinary()
	_ = yym2212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2213 := r.ReadMapStart()
			if yyl2213 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2213, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2213 := r.ReadArrayStart()
			if yyl2213 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2214Slc
	var yyhl2214 bool = l >= 0
	for yyj2214 := 0; ; yyj2214++ {
		if yyhl2214 {
			if yyj2214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2214 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2214Slc = r.DecodeBytes(yys2214Slc, true, true)
		yys2214 := string(yys2214Slc)
		if !yyhl2214 {
			r.ReadMapKVSeparator()
		}
		switch yys2214 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2217 := &x.ObjectMeta
				yyv2217.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2218 := &x.Spec
				yyv2218.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2219 := &x.Status
				yyv2219.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2214)
		} // end switch yys2214
	} // end for yyj2214
	if !yyhl2214 {
		r.ReadMapEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2220 int
	var yyb2220 bool
	var yyhl2220 bool = l >= 0
	yyj2220++
	if yyhl2220 {
		yyb2220 = yyj2220 > l
	} else {
		yyb2220 = r.CheckBreak()
	}
	if yyb2220 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2220++
	if yyhl2220 {
		yyb2220 = yyj2220 > l
	} else {
		yyb2220 = r.CheckBreak()
	}
	if yyb2220 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2220++
	if yyhl2220 {
		yyb2220 = yyj2220 > l
	} else {
		yyb2220 = r.CheckBreak()
	}
	if yyb2220 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2223 := &x.ObjectMeta
		yyv2223.CodecDecodeSelf(d)
	}
	yyj2220++
	if yyhl2220 {
		yyb2220 = yyj2220 > l
	} else {
		yyb2220 = r.CheckBreak()
	}
	if yyb2220 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2224 := &x.Spec
		yyv2224.CodecDecodeSelf(d)
	}
	yyj2220++
	if yyhl2220 {
		yyb2220 = yyj2220 > l
	} else {
		yyb2220 = r.CheckBreak()
	}
	if yyb2220 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2225 := &x.Status
		yyv2225.CodecDecodeSelf(d)
	}
	for {
		yyj2220++
		if yyhl2220 {
			yyb2220 = yyj2220 > l
		} else {
			yyb2220 = r.CheckBreak()
		}
		if yyb2220 {
			break
		}
		if yyj2220 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2220-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2226 := z.EncBinary()
		_ = yym2226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2227 := !z.EncBinary()
			yy2arr2227 := z.EncBasicHandle().StructToArray
			var yyfirst2227 bool
			var yyq2227 [4]bool
			_, _, _, _ = yysep2227, yyfirst2227, yyq2227, yy2arr2227
			const yyr2227 bool = false
			yyq2227[0] = x.Kind != ""
			yyq2227[1] = x.APIVersion != ""
			yyq2227[2] = true
			if yyr2227 || yy2arr2227 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2227 int = 1
				for _, b := range yyq2227 {
					if b {
						yynn2227++
					}
				}
				r.EncodeMapStart(yynn2227)
			}
			if yyr2227 || yy2arr2227 {
				if yyq2227[0] {
					yym2229 := z.EncBinary()
					_ = yym2229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2227[0] {
					yyfirst2227 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2227 {
						r.EncodeMapKVSeparator()
					}
					yym2230 := z.EncBinary()
					_ = yym2230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2227 || yy2arr2227 {
				if yysep2227 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2227[1] {
					yym2232 := z.EncBinary()
					_ = yym2232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2227[1] {
					if yyfirst2227 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2227 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2227 {
						r.EncodeMapKVSeparator()
					}
					yym2233 := z.EncBinary()
					_ = yym2233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2227 || yy2arr2227 {
				if yysep2227 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2227[2] {
					yy2235 := &x.ListMeta
					yy2235.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2227[2] {
					if yyfirst2227 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2227 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2227 {
						r.EncodeMapKVSeparator()
					}
					yy2236 := &x.ListMeta
					yy2236.CodecEncodeSelf(e)
				}
			}
			if yyr2227 || yy2arr2227 {
				if yysep2227 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2238 := z.EncBinary()
					_ = yym2238
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				if yyfirst2227 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2227 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep2227 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2239 := z.EncBinary()
					_ = yym2239
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2227 {
				if yyr2227 || yy2arr2227 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2240 := z.DecBinary()
	_ = yym2240
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2241 := r.ReadMapStart()
			if yyl2241 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2241, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2241 := r.ReadArrayStart()
			if yyl2241 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2241, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2242Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2242Slc
	var yyhl2242 bool = l >= 0
	for yyj2242 := 0; ; yyj2242++ {
		if yyhl2242 {
			if yyj2242 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2242 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2242Slc = r.DecodeBytes(yys2242Slc, true, true)
		yys2242 := string(yys2242Slc)
		if !yyhl2242 {
			r.ReadMapKVSeparator()
		}
		switch yys2242 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv2245 := &x.ListMeta
				yyv2245.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2246 := &x.Items
				yym2247 := z.DecBinary()
				_ = yym2247
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2246), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2242)
		} // end switch yys2242
	} // end for yyj2242
	if !yyhl2242 {
		r.ReadMapEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2248 int
	var yyb2248 bool
	var yyhl2248 bool = l >= 0
	yyj2248++
	if yyhl2248 {
		yyb2248 = yyj2248 > l
	} else {
		yyb2248 = r.CheckBreak()
	}
	if yyb2248 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2248++
	if yyhl2248 {
		yyb2248 = yyj2248 > l
	} else {
		yyb2248 = r.CheckBreak()
	}
	if yyb2248 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2248++
	if yyhl2248 {
		yyb2248 = yyj2248 > l
	} else {
		yyb2248 = r.CheckBreak()
	}
	if yyb2248 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv2251 := &x.ListMeta
		yyv2251.CodecDecodeSelf(d)
	}
	yyj2248++
	if yyhl2248 {
		yyb2248 = yyj2248 > l
	} else {
		yyb2248 = r.CheckBreak()
	}
	if yyb2248 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2252 := &x.Items
		yym2253 := z.DecBinary()
		_ = yym2253
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2252), d)
		}
	}
	for {
		yyj2248++
		if yyhl2248 {
			yyb2248 = yyj2248 > l
		} else {
			yyb2248 = r.CheckBreak()
		}
		if yyb2248 {
			break
		}
		if yyj2248 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2248-1, "")
	}
	r.ReadArrayEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2254 := z.EncBinary()
	_ = yym2254
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2255 := z.DecBinary()
	_ = yym2255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2256 := z.EncBinary()
		_ = yym2256
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2257 := !z.EncBinary()
			yy2arr2257 := z.EncBasicHandle().StructToArray
			var yyfirst2257 bool
			var yyq2257 [1]bool
			_, _, _, _ = yysep2257, yyfirst2257, yyq2257, yy2arr2257
			const yyr2257 bool = false
			yyq2257[0] = len(x.Finalizers) != 0
			if yyr2257 || yy2arr2257 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2257 int = 0
				for _, b := range yyq2257 {
					if b {
						yynn2257++
					}
				}
				r.EncodeMapStart(yynn2257)
			}
			if yyr2257 || yy2arr2257 {
				if yyq2257[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2259 := z.EncBinary()
						_ = yym2259
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2257[0] {
					yyfirst2257 = true
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					if yysep2257 {
						r.EncodeMapKVSeparator()
					}
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2260 := z.EncBinary()
						_ = yym2260
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yysep2257 {
				if yyr2257 || yy2arr2257 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2261 := z.DecBinary()
	_ = yym2261
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2262 := r.ReadMapStart()
			if yyl2262 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2262, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2262 := r.ReadArrayStart()
			if yyl2262 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2262, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2263Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2263Slc
	var yyhl2263 bool = l >= 0
	for yyj2263 := 0; ; yyj2263++ {
		if yyhl2263 {
			if yyj2263 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2263 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2263Slc = r.DecodeBytes(yys2263Slc, true, true)
		yys2263 := string(yys2263Slc)
		if !yyhl2263 {
			r.ReadMapKVSeparator()
		}
		switch yys2263 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2264 := &x.Finalizers
				yym2265 := z.DecBinary()
				_ = yym2265
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2264), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2263)
		} // end switch yys2263
	} // end for yyj2263
	if !yyhl2263 {
		r.ReadMapEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2266 int
	var yyb2266 bool
	var yyhl2266 bool = l >= 0
	yyj2266++
	if yyhl2266 {
		yyb2266 = yyj2266 > l
	} else {
		yyb2266 = r.CheckBreak()
	}
	if yyb2266 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2267 := &x.Finalizers
		yym2268 := z.DecBinary()
		_ = yym2268
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2267), d)
		}
	}
	for {
		yyj2266++
		if yyhl2266 {
			yyb2266 = yyj2266 > l
		} else {
			yyb2266 = r.CheckBreak()
		}
		if yyb2266 {
			break
		}
		if yyj2266 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2266-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2269 := z.EncBinary()
		_ = yym2269
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2270 := !z.EncBinary()
			yy2arr2270 := z.EncBasicHandle().StructToArray
			var yyfirst2270 bool
			var yyq2270 [1]bool
			_, _, _, _ = yysep2270, yyfirst2270, yyq2270, yy2arr2270
			const yyr2270 bool = false
			yyq2270[0] = x.Phase != ""
			if yyr2270 || yy2arr2270 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2270 int = 0
				for _, b := range yyq2270 {
					if b {
						yynn2270++
					}
				}
				r.EncodeMapStart(yynn2270)
			}
			if yyr2270 || yy2arr2270 {
				if yyq2270[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2270[0] {
					yyfirst2270 = true
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					if yysep2270 {
						r.EncodeMapKVSeparator()
					}
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2270 {
				if yyr2270 || yy2arr2270 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2272 := z.DecBinary()
	_ = yym2272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2273 := r.ReadMapStart()
			if yyl2273 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2273, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2273 := r.ReadArrayStart()
			if yyl2273 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2273, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2274Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2274Slc
	var yyhl2274 bool = l >= 0
	for yyj2274 := 0; ; yyj2274++ {
		if yyhl2274 {
			if yyj2274 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2274 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2274Slc = r.DecodeBytes(yys2274Slc, true, true)
		yys2274 := string(yys2274Slc)
		if !yyhl2274 {
			r.ReadMapKVSeparator()
		}
		switch yys2274 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2274)
		} // end switch yys2274
	} // end for yyj2274
	if !yyhl2274 {
		r.ReadMapEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2276 int
	var yyb2276 bool
	var yyhl2276 bool = l >= 0
	yyj2276++
	if yyhl2276 {
		yyb2276 = yyj2276 > l
	} else {
		yyb2276 = r.CheckBreak()
	}
	if yyb2276 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2276++
		if yyhl2276 {
			yyb2276 = yyj2276 > l
		} else {
			yyb2276 = r.CheckBreak()
		}
		if yyb2276 {
			break
		}
		if yyj2276 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2276-1, "")
	}
	r.ReadArrayEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2278 := z.EncBinary()
	_ = yym2278
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2279 := z.DecBinary()
	_ = yym2279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2280 := z.EncBinary()
		_ = yym2280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2281 := !z.EncBinary()
			yy2arr2281 := z.EncBasicHandle().StructToArray
			var yyfirst2281 bool
			var yyq2281 [5]bool
			_, _, _, _ = yysep2281, yyfirst2281, yyq2281, yy2arr2281
			const yyr2281 bool = false
			yyq2281[0] = x.Kind != ""
			yyq2281[1] = x.APIVersion != ""
			yyq2281[2] = true
			yyq2281[3] = true
			yyq2281[4] = true
			if yyr2281 || yy2arr2281 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2281 int = 0
				for _, b := range yyq2281 {
					if b {
						yynn2281++
					}
				}
				r.EncodeMapStart(yynn2281)
			}
			if yyr2281 || yy2arr2281 {
				if yyq2281[0] {
					yym2283 := z.EncBinary()
					_ = yym2283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2281[0] {
					yyfirst2281 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2281 {
						r.EncodeMapKVSeparator()
					}
					yym2284 := z.EncBinary()
					_ = yym2284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2281 || yy2arr2281 {
				if yysep2281 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2281[1] {
					yym2286 := z.EncBinary()
					_ = yym2286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2281[1] {
					if yyfirst2281 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2281 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2281 {
						r.EncodeMapKVSeparator()
					}
					yym2287 := z.EncBinary()
					_ = yym2287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2281 || yy2arr2281 {
				if yysep2281 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2281[2] {
					yy2289 := &x.ObjectMeta
					yy2289.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2281[2] {
					if yyfirst2281 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2281 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2281 {
						r.EncodeMapKVSeparator()
					}
					yy2290 := &x.ObjectMeta
					yy2290.CodecEncodeSelf(e)
				}
			}
			if yyr2281 || yy2arr2281 {
				if yysep2281 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2281[3] {
					yy2292 := &x.Spec
					yy2292.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2281[3] {
					if yyfirst2281 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2281 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep2281 {
						r.EncodeMapKVSeparator()
					}
					yy2293 := &x.Spec
					yy2293.CodecEncodeSelf(e)
				}
			}
			if yyr2281 || yy2arr2281 {
				if yysep2281 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2281[4] {
					yy2295 := &x.Status
					yy2295.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2281[4] {
					if yyfirst2281 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2281 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep2281 {
						r.EncodeMapKVSeparator()
					}
					yy2296 := &x.Status
					yy2296.CodecEncodeSelf(e)
				}
			}
			if yysep2281 {
				if yyr2281 || yy2arr2281 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2297 := z.DecBinary()
	_ = yym2297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2298 := r.ReadMapStart()
			if yyl2298 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2298, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2298 := r.ReadArrayStart()
			if yyl2298 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2299Slc
	var yyhl2299 bool = l >= 0
	for yyj2299 := 0; ; yyj2299++ {
		if yyhl2299 {
			if yyj2299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2299 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2299Slc = r.DecodeBytes(yys2299Slc, true, true)
		yys2299 := string(yys2299Slc)
		if !yyhl2299 {
			r.ReadMapKVSeparator()
		}
		switch yys2299 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2302 := &x.ObjectMeta
				yyv2302.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2303 := &x.Spec
				yyv2303.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2304 := &x.Status
				yyv2304.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2299)
		} // end switch yys2299
	} // end for yyj2299
	if !yyhl2299 {
		r.ReadMapEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2305 int
	var yyb2305 bool
	var yyhl2305 bool = l >= 0
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2308 := &x.ObjectMeta
		yyv2308.CodecDecodeSelf(d)
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2309 := &x.Spec
		yyv2309.CodecDecodeSelf(d)
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2310 := &x.Status
		yyv2310.CodecDecodeSelf(d)
	}
	for {
		yyj2305++
		if yyhl2305 {
			yyb2305 = yyj2305 > l
		} else {
			yyb2305 = r.CheckBreak()
		}
		if yyb2305 {
			break
		}
		if yyj2305 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2305-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2311 := z.EncBinary()
		_ = yym2311
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2312 := !z.EncBinary()
			yy2arr2312 := z.EncBasicHandle().StructToArray
			var yyfirst2312 bool
			var yyq2312 [4]bool
			_, _, _, _ = yysep2312, yyfirst2312, yyq2312, yy2arr2312
			const yyr2312 bool = false
			yyq2312[0] = x.Kind != ""
			yyq2312[1] = x.APIVersion != ""
			yyq2312[2] = true
			if yyr2312 || yy2arr2312 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2312 int = 1
				for _, b := range yyq2312 {
					if b {
						yynn2312++
					}
				}
				r.EncodeMapStart(yynn2312)
			}
			if yyr2312 || yy2arr2312 {
				if yyq2312[0] {
					yym2314 := z.EncBinary()
					_ = yym2314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2312[0] {
					yyfirst2312 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2312 {
						r.EncodeMapKVSeparator()
					}
					yym2315 := z.EncBinary()
					_ = yym2315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2312 || yy2arr2312 {
				if yysep2312 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2312[1] {
					yym2317 := z.EncBinary()
					_ = yym2317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2312[1] {
					if yyfirst2312 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2312 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2312 {
						r.EncodeMapKVSeparator()
					}
					yym2318 := z.EncBinary()
					_ = yym2318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2312 || yy2arr2312 {
				if yysep2312 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2312[2] {
					yy2320 := &x.ListMeta
					yy2320.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2312[2] {
					if yyfirst2312 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2312 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2312 {
						r.EncodeMapKVSeparator()
					}
					yy2321 := &x.ListMeta
					yy2321.CodecEncodeSelf(e)
				}
			}
			if yyr2312 || yy2arr2312 {
				if yysep2312 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2323 := z.EncBinary()
					_ = yym2323
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				if yyfirst2312 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2312 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep2312 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2324 := z.EncBinary()
					_ = yym2324
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2312 {
				if yyr2312 || yy2arr2312 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2325 := z.DecBinary()
	_ = yym2325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2326 := r.ReadMapStart()
			if yyl2326 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2326, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2326 := r.ReadArrayStart()
			if yyl2326 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2326, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2327Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2327Slc
	var yyhl2327 bool = l >= 0
	for yyj2327 := 0; ; yyj2327++ {
		if yyhl2327 {
			if yyj2327 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2327 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2327Slc = r.DecodeBytes(yys2327Slc, true, true)
		yys2327 := string(yys2327Slc)
		if !yyhl2327 {
			r.ReadMapKVSeparator()
		}
		switch yys2327 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv2330 := &x.ListMeta
				yyv2330.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2331 := &x.Items
				yym2332 := z.DecBinary()
				_ = yym2332
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2331), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2327)
		} // end switch yys2327
	} // end for yyj2327
	if !yyhl2327 {
		r.ReadMapEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2333 int
	var yyb2333 bool
	var yyhl2333 bool = l >= 0
	yyj2333++
	if yyhl2333 {
		yyb2333 = yyj2333 > l
	} else {
		yyb2333 = r.CheckBreak()
	}
	if yyb2333 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2333++
	if yyhl2333 {
		yyb2333 = yyj2333 > l
	} else {
		yyb2333 = r.CheckBreak()
	}
	if yyb2333 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2333++
	if yyhl2333 {
		yyb2333 = yyj2333 > l
	} else {
		yyb2333 = r.CheckBreak()
	}
	if yyb2333 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv2336 := &x.ListMeta
		yyv2336.CodecDecodeSelf(d)
	}
	yyj2333++
	if yyhl2333 {
		yyb2333 = yyj2333 > l
	} else {
		yyb2333 = r.CheckBreak()
	}
	if yyb2333 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2337 := &x.Items
		yym2338 := z.DecBinary()
		_ = yym2338
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2337), d)
		}
	}
	for {
		yyj2333++
		if yyhl2333 {
			yyb2333 = yyj2333 > l
		} else {
			yyb2333 = r.CheckBreak()
		}
		if yyb2333 {
			break
		}
		if yyj2333 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2333-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2339 := z.EncBinary()
		_ = yym2339
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2340 := !z.EncBinary()
			yy2arr2340 := z.EncBasicHandle().StructToArray
			var yyfirst2340 bool
			var yyq2340 [4]bool
			_, _, _, _ = yysep2340, yyfirst2340, yyq2340, yy2arr2340
			const yyr2340 bool = false
			yyq2340[0] = x.Kind != ""
			yyq2340[1] = x.APIVersion != ""
			yyq2340[2] = true
			if yyr2340 || yy2arr2340 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2340 int = 1
				for _, b := range yyq2340 {
					if b {
						yynn2340++
					}
				}
				r.EncodeMapStart(yynn2340)
			}
			if yyr2340 || yy2arr2340 {
				if yyq2340[0] {
					yym2342 := z.EncBinary()
					_ = yym2342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2340[0] {
					yyfirst2340 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2340 {
						r.EncodeMapKVSeparator()
					}
					yym2343 := z.EncBinary()
					_ = yym2343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2340 || yy2arr2340 {
				if yysep2340 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2340[1] {
					yym2345 := z.EncBinary()
					_ = yym2345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2340[1] {
					if yyfirst2340 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2340 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2340 {
						r.EncodeMapKVSeparator()
					}
					yym2346 := z.EncBinary()
					_ = yym2346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2340 || yy2arr2340 {
				if yysep2340 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2340[2] {
					yy2348 := &x.ObjectMeta
					yy2348.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2340[2] {
					if yyfirst2340 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2340 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2340 {
						r.EncodeMapKVSeparator()
					}
					yy2349 := &x.ObjectMeta
					yy2349.CodecEncodeSelf(e)
				}
			}
			if yyr2340 || yy2arr2340 {
				if yysep2340 {
					r.EncodeArrayEntrySeparator()
				}
				yy2351 := &x.Target
				yy2351.CodecEncodeSelf(e)
			} else {
				if yyfirst2340 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2340 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				if yysep2340 {
					r.EncodeMapKVSeparator()
				}
				yy2352 := &x.Target
				yy2352.CodecEncodeSelf(e)
			}
			if yysep2340 {
				if yyr2340 || yy2arr2340 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2353 := z.DecBinary()
	_ = yym2353
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2354 := r.ReadMapStart()
			if yyl2354 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2354, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2354 := r.ReadArrayStart()
			if yyl2354 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2354, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2355Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2355Slc
	var yyhl2355 bool = l >= 0
	for yyj2355 := 0; ; yyj2355++ {
		if yyhl2355 {
			if yyj2355 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2355 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2355Slc = r.DecodeBytes(yys2355Slc, true, true)
		yys2355 := string(yys2355Slc)
		if !yyhl2355 {
			r.ReadMapKVSeparator()
		}
		switch yys2355 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2358 := &x.ObjectMeta
				yyv2358.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2359 := &x.Target
				yyv2359.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2355)
		} // end switch yys2355
	} // end for yyj2355
	if !yyhl2355 {
		r.ReadMapEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2360 int
	var yyb2360 bool
	var yyhl2360 bool = l >= 0
	yyj2360++
	if yyhl2360 {
		yyb2360 = yyj2360 > l
	} else {
		yyb2360 = r.CheckBreak()
	}
	if yyb2360 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2360++
	if yyhl2360 {
		yyb2360 = yyj2360 > l
	} else {
		yyb2360 = r.CheckBreak()
	}
	if yyb2360 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2360++
	if yyhl2360 {
		yyb2360 = yyj2360 > l
	} else {
		yyb2360 = r.CheckBreak()
	}
	if yyb2360 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2363 := &x.ObjectMeta
		yyv2363.CodecDecodeSelf(d)
	}
	yyj2360++
	if yyhl2360 {
		yyb2360 = yyj2360 > l
	} else {
		yyb2360 = r.CheckBreak()
	}
	if yyb2360 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2364 := &x.Target
		yyv2364.CodecDecodeSelf(d)
	}
	for {
		yyj2360++
		if yyhl2360 {
			yyb2360 = yyj2360 > l
		} else {
			yyb2360 = r.CheckBreak()
		}
		if yyb2360 {
			break
		}
		if yyj2360 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2360-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2365 := z.EncBinary()
		_ = yym2365
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2366 := !z.EncBinary()
			yy2arr2366 := z.EncBasicHandle().StructToArray
			var yyfirst2366 bool
			var yyq2366 [3]bool
			_, _, _, _ = yysep2366, yyfirst2366, yyq2366, yy2arr2366
			const yyr2366 bool = false
			yyq2366[0] = x.Kind != ""
			yyq2366[1] = x.APIVersion != ""
			if yyr2366 || yy2arr2366 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2366 int = 1
				for _, b := range yyq2366 {
					if b {
						yynn2366++
					}
				}
				r.EncodeMapStart(yynn2366)
			}
			if yyr2366 || yy2arr2366 {
				if yyq2366[0] {
					yym2368 := z.EncBinary()
					_ = yym2368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2366[0] {
					yyfirst2366 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2366 {
						r.EncodeMapKVSeparator()
					}
					yym2369 := z.EncBinary()
					_ = yym2369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2366 || yy2arr2366 {
				if yysep2366 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2366[1] {
					yym2371 := z.EncBinary()
					_ = yym2371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2366[1] {
					if yyfirst2366 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2366 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2366 {
						r.EncodeMapKVSeparator()
					}
					yym2372 := z.EncBinary()
					_ = yym2372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2366 || yy2arr2366 {
				if yysep2366 {
					r.EncodeArrayEntrySeparator()
				}
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2374 := *x.GracePeriodSeconds
					yym2375 := z.EncBinary()
					_ = yym2375
					if false {
					} else {
						r.EncodeInt(int64(yy2374))
					}
				}
			} else {
				if yyfirst2366 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2366 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if yysep2366 {
					r.EncodeMapKVSeparator()
				}
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2376 := *x.GracePeriodSeconds
					yym2377 := z.EncBinary()
					_ = yym2377
					if false {
					} else {
						r.EncodeInt(int64(yy2376))
					}
				}
			}
			if yysep2366 {
				if yyr2366 || yy2arr2366 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2378 := z.DecBinary()
	_ = yym2378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2379 := r.ReadMapStart()
			if yyl2379 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2379, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2379 := r.ReadArrayStart()
			if yyl2379 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2380Slc
	var yyhl2380 bool = l >= 0
	for yyj2380 := 0; ; yyj2380++ {
		if yyhl2380 {
			if yyj2380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2380 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2380Slc = r.DecodeBytes(yys2380Slc, true, true)
		yys2380 := string(yys2380Slc)
		if !yyhl2380 {
			r.ReadMapKVSeparator()
		}
		switch yys2380 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2384 := z.DecBinary()
				_ = yym2384
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2380)
		} // end switch yys2380
	} // end for yyj2380
	if !yyhl2380 {
		r.ReadMapEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2385 int
	var yyb2385 bool
	var yyhl2385 bool = l >= 0
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2389 := z.DecBinary()
		_ = yym2389
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2385++
		if yyhl2385 {
			yyb2385 = yyj2385 > l
		} else {
			yyb2385 = r.CheckBreak()
		}
		if yyb2385 {
			break
		}
		if yyj2385 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2385-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2390 := z.EncBinary()
		_ = yym2390
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2391 := !z.EncBinary()
			yy2arr2391 := z.EncBasicHandle().StructToArray
			var yyfirst2391 bool
			var yyq2391 [6]bool
			_, _, _, _ = yysep2391, yyfirst2391, yyq2391, yy2arr2391
			const yyr2391 bool = false
			yyq2391[0] = x.Kind != ""
			yyq2391[1] = x.APIVersion != ""
			yyq2391[2] = x.LabelSelector != ""
			yyq2391[3] = x.FieldSelector != ""
			yyq2391[4] = x.Watch != false
			yyq2391[5] = x.ResourceVersion != ""
			if yyr2391 || yy2arr2391 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2391 int = 0
				for _, b := range yyq2391 {
					if b {
						yynn2391++
					}
				}
				r.EncodeMapStart(yynn2391)
			}
			if yyr2391 || yy2arr2391 {
				if yyq2391[0] {
					yym2393 := z.EncBinary()
					_ = yym2393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2391[0] {
					yyfirst2391 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2391 {
						r.EncodeMapKVSeparator()
					}
					yym2394 := z.EncBinary()
					_ = yym2394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				if yysep2391 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2391[1] {
					yym2396 := z.EncBinary()
					_ = yym2396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2391[1] {
					if yyfirst2391 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2391 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2391 {
						r.EncodeMapKVSeparator()
					}
					yym2397 := z.EncBinary()
					_ = yym2397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				if yysep2391 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2391[2] {
					yym2399 := z.EncBinary()
					_ = yym2399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2391[2] {
					if yyfirst2391 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2391 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					if yysep2391 {
						r.EncodeMapKVSeparator()
					}
					yym2400 := z.EncBinary()
					_ = yym2400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				if yysep2391 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2391[3] {
					yym2402 := z.EncBinary()
					_ = yym2402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2391[3] {
					if yyfirst2391 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2391 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					if yysep2391 {
						r.EncodeMapKVSeparator()
					}
					yym2403 := z.EncBinary()
					_ = yym2403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				if yysep2391 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2391[4] {
					yym2405 := z.EncBinary()
					_ = yym2405
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2391[4] {
					if yyfirst2391 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2391 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					if yysep2391 {
						r.EncodeMapKVSeparator()
					}
					yym2406 := z.EncBinary()
					_ = yym2406
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				if yysep2391 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2391[5] {
					yym2408 := z.EncBinary()
					_ = yym2408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2391[5] {
					if yyfirst2391 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2391 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					if yysep2391 {
						r.EncodeMapKVSeparator()
					}
					yym2409 := z.EncBinary()
					_ = yym2409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yysep2391 {
				if yyr2391 || yy2arr2391 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2410 := z.DecBinary()
	_ = yym2410
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2411 := r.ReadMapStart()
			if yyl2411 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2411, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2411 := r.ReadArrayStart()
			if yyl2411 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2411, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2412Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2412Slc
	var yyhl2412 bool = l >= 0
	for yyj2412 := 0; ; yyj2412++ {
		if yyhl2412 {
			if yyj2412 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2412 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2412Slc = r.DecodeBytes(yys2412Slc, true, true)
		yys2412 := string(yys2412Slc)
		if !yyhl2412 {
			r.ReadMapKVSeparator()
		}
		switch yys2412 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2412)
		} // end switch yys2412
	} // end for yyj2412
	if !yyhl2412 {
		r.ReadMapEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2419 int
	var yyb2419 bool
	var yyhl2419 bool = l >= 0
	yyj2419++
	if yyhl2419 {
		yyb2419 = yyj2419 > l
	} else {
		yyb2419 = r.CheckBreak()
	}
	if yyb2419 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2419++
	if yyhl2419 {
		yyb2419 = yyj2419 > l
	} else {
		yyb2419 = r.CheckBreak()
	}
	if yyb2419 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2419++
	if yyhl2419 {
		yyb2419 = yyj2419 > l
	} else {
		yyb2419 = r.CheckBreak()
	}
	if yyb2419 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj2419++
	if yyhl2419 {
		yyb2419 = yyj2419 > l
	} else {
		yyb2419 = r.CheckBreak()
	}
	if yyb2419 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj2419++
	if yyhl2419 {
		yyb2419 = yyj2419 > l
	} else {
		yyb2419 = r.CheckBreak()
	}
	if yyb2419 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2419++
	if yyhl2419 {
		yyb2419 = yyj2419 > l
	} else {
		yyb2419 = r.CheckBreak()
	}
	if yyb2419 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	for {
		yyj2419++
		if yyhl2419 {
			yyb2419 = yyj2419 > l
		} else {
			yyb2419 = r.CheckBreak()
		}
		if yyb2419 {
			break
		}
		if yyj2419 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2419-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2426 := z.EncBinary()
		_ = yym2426
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2427 := !z.EncBinary()
			yy2arr2427 := z.EncBasicHandle().StructToArray
			var yyfirst2427 bool
			var yyq2427 [5]bool
			_, _, _, _ = yysep2427, yyfirst2427, yyq2427, yy2arr2427
			const yyr2427 bool = false
			yyq2427[0] = x.Kind != ""
			yyq2427[1] = x.APIVersion != ""
			yyq2427[2] = x.Container != ""
			yyq2427[3] = x.Follow != false
			yyq2427[4] = x.Previous != false
			if yyr2427 || yy2arr2427 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2427 int = 0
				for _, b := range yyq2427 {
					if b {
						yynn2427++
					}
				}
				r.EncodeMapStart(yynn2427)
			}
			if yyr2427 || yy2arr2427 {
				if yyq2427[0] {
					yym2429 := z.EncBinary()
					_ = yym2429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2427[0] {
					yyfirst2427 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2427 {
						r.EncodeMapKVSeparator()
					}
					yym2430 := z.EncBinary()
					_ = yym2430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2427 || yy2arr2427 {
				if yysep2427 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2427[1] {
					yym2432 := z.EncBinary()
					_ = yym2432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2427[1] {
					if yyfirst2427 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2427 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2427 {
						r.EncodeMapKVSeparator()
					}
					yym2433 := z.EncBinary()
					_ = yym2433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2427 || yy2arr2427 {
				if yysep2427 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2427[2] {
					yym2435 := z.EncBinary()
					_ = yym2435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2427[2] {
					if yyfirst2427 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2427 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					if yysep2427 {
						r.EncodeMapKVSeparator()
					}
					yym2436 := z.EncBinary()
					_ = yym2436
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2427 || yy2arr2427 {
				if yysep2427 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2427[3] {
					yym2438 := z.EncBinary()
					_ = yym2438
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2427[3] {
					if yyfirst2427 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2427 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					if yysep2427 {
						r.EncodeMapKVSeparator()
					}
					yym2439 := z.EncBinary()
					_ = yym2439
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr2427 || yy2arr2427 {
				if yysep2427 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2427[4] {
					yym2441 := z.EncBinary()
					_ = yym2441
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2427[4] {
					if yyfirst2427 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2427 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					if yysep2427 {
						r.EncodeMapKVSeparator()
					}
					yym2442 := z.EncBinary()
					_ = yym2442
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yysep2427 {
				if yyr2427 || yy2arr2427 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2443 := z.DecBinary()
	_ = yym2443
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2444 := r.ReadMapStart()
			if yyl2444 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2444, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2444 := r.ReadArrayStart()
			if yyl2444 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2444, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2445Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2445Slc
	var yyhl2445 bool = l >= 0
	for yyj2445 := 0; ; yyj2445++ {
		if yyhl2445 {
			if yyj2445 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2445 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2445Slc = r.DecodeBytes(yys2445Slc, true, true)
		yys2445 := string(yys2445Slc)
		if !yyhl2445 {
			r.ReadMapKVSeparator()
		}
		switch yys2445 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2445)
		} // end switch yys2445
	} // end for yyj2445
	if !yyhl2445 {
		r.ReadMapEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2451 int
	var yyb2451 bool
	var yyhl2451 bool = l >= 0
	yyj2451++
	if yyhl2451 {
		yyb2451 = yyj2451 > l
	} else {
		yyb2451 = r.CheckBreak()
	}
	if yyb2451 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2451++
	if yyhl2451 {
		yyb2451 = yyj2451 > l
	} else {
		yyb2451 = r.CheckBreak()
	}
	if yyb2451 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2451++
	if yyhl2451 {
		yyb2451 = yyj2451 > l
	} else {
		yyb2451 = r.CheckBreak()
	}
	if yyb2451 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2451++
	if yyhl2451 {
		yyb2451 = yyj2451 > l
	} else {
		yyb2451 = r.CheckBreak()
	}
	if yyb2451 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2451++
	if yyhl2451 {
		yyb2451 = yyj2451 > l
	} else {
		yyb2451 = r.CheckBreak()
	}
	if yyb2451 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	for {
		yyj2451++
		if yyhl2451 {
			yyb2451 = yyj2451 > l
		} else {
			yyb2451 = r.CheckBreak()
		}
		if yyb2451 {
			break
		}
		if yyj2451 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2451-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2457 := z.EncBinary()
		_ = yym2457
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2458 := !z.EncBinary()
			yy2arr2458 := z.EncBasicHandle().StructToArray
			var yyfirst2458 bool
			var yyq2458 [7]bool
			_, _, _, _ = yysep2458, yyfirst2458, yyq2458, yy2arr2458
			const yyr2458 bool = false
			yyq2458[0] = x.Kind != ""
			yyq2458[1] = x.APIVersion != ""
			yyq2458[2] = x.Stdin != false
			yyq2458[3] = x.Stdout != false
			yyq2458[4] = x.Stderr != false
			yyq2458[5] = x.TTY != false
			yyq2458[6] = x.Container != ""
			if yyr2458 || yy2arr2458 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2458 int = 0
				for _, b := range yyq2458 {
					if b {
						yynn2458++
					}
				}
				r.EncodeMapStart(yynn2458)
			}
			if yyr2458 || yy2arr2458 {
				if yyq2458[0] {
					yym2460 := z.EncBinary()
					_ = yym2460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2458[0] {
					yyfirst2458 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2458 {
						r.EncodeMapKVSeparator()
					}
					yym2461 := z.EncBinary()
					_ = yym2461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2458 || yy2arr2458 {
				if yysep2458 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2458[1] {
					yym2463 := z.EncBinary()
					_ = yym2463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2458[1] {
					if yyfirst2458 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2458 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2458 {
						r.EncodeMapKVSeparator()
					}
					yym2464 := z.EncBinary()
					_ = yym2464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2458 || yy2arr2458 {
				if yysep2458 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2458[2] {
					yym2466 := z.EncBinary()
					_ = yym2466
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2458[2] {
					if yyfirst2458 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2458 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					if yysep2458 {
						r.EncodeMapKVSeparator()
					}
					yym2467 := z.EncBinary()
					_ = yym2467
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2458 || yy2arr2458 {
				if yysep2458 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2458[3] {
					yym2469 := z.EncBinary()
					_ = yym2469
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2458[3] {
					if yyfirst2458 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2458 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					if yysep2458 {
						r.EncodeMapKVSeparator()
					}
					yym2470 := z.EncBinary()
					_ = yym2470
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2458 || yy2arr2458 {
				if yysep2458 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2458[4] {
					yym2472 := z.EncBinary()
					_ = yym2472
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2458[4] {
					if yyfirst2458 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2458 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					if yysep2458 {
						r.EncodeMapKVSeparator()
					}
					yym2473 := z.EncBinary()
					_ = yym2473
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2458 || yy2arr2458 {
				if yysep2458 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2458[5] {
					yym2475 := z.EncBinary()
					_ = yym2475
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2458[5] {
					if yyfirst2458 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2458 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					if yysep2458 {
						r.EncodeMapKVSeparator()
					}
					yym2476 := z.EncBinary()
					_ = yym2476
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2458 || yy2arr2458 {
				if yysep2458 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2458[6] {
					yym2478 := z.EncBinary()
					_ = yym2478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2458[6] {
					if yyfirst2458 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2458 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					if yysep2458 {
						r.EncodeMapKVSeparator()
					}
					yym2479 := z.EncBinary()
					_ = yym2479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2458 {
				if yyr2458 || yy2arr2458 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2480 := z.DecBinary()
	_ = yym2480
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2481 := r.ReadMapStart()
			if yyl2481 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2481, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2481 := r.ReadArrayStart()
			if yyl2481 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2481, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2482Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2482Slc
	var yyhl2482 bool = l >= 0
	for yyj2482 := 0; ; yyj2482++ {
		if yyhl2482 {
			if yyj2482 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2482 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2482Slc = r.DecodeBytes(yys2482Slc, true, true)
		yys2482 := string(yys2482Slc)
		if !yyhl2482 {
			r.ReadMapKVSeparator()
		}
		switch yys2482 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2482)
		} // end switch yys2482
	} // end for yyj2482
	if !yyhl2482 {
		r.ReadMapEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2490 int
	var yyb2490 bool
	var yyhl2490 bool = l >= 0
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2490++
		if yyhl2490 {
			yyb2490 = yyj2490 > l
		} else {
			yyb2490 = r.CheckBreak()
		}
		if yyb2490 {
			break
		}
		if yyj2490 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2490-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2498 := z.EncBinary()
		_ = yym2498
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2499 := !z.EncBinary()
			yy2arr2499 := z.EncBasicHandle().StructToArray
			var yyfirst2499 bool
			var yyq2499 [8]bool
			_, _, _, _ = yysep2499, yyfirst2499, yyq2499, yy2arr2499
			const yyr2499 bool = false
			yyq2499[0] = x.Kind != ""
			yyq2499[1] = x.APIVersion != ""
			yyq2499[2] = x.Stdin != false
			yyq2499[3] = x.Stdout != false
			yyq2499[4] = x.Stderr != false
			yyq2499[5] = x.TTY != false
			yyq2499[6] = x.Container != ""
			if yyr2499 || yy2arr2499 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2499 int = 1
				for _, b := range yyq2499 {
					if b {
						yynn2499++
					}
				}
				r.EncodeMapStart(yynn2499)
			}
			if yyr2499 || yy2arr2499 {
				if yyq2499[0] {
					yym2501 := z.EncBinary()
					_ = yym2501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2499[0] {
					yyfirst2499 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2499 {
						r.EncodeMapKVSeparator()
					}
					yym2502 := z.EncBinary()
					_ = yym2502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2499 || yy2arr2499 {
				if yysep2499 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2499[1] {
					yym2504 := z.EncBinary()
					_ = yym2504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2499[1] {
					if yyfirst2499 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2499 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2499 {
						r.EncodeMapKVSeparator()
					}
					yym2505 := z.EncBinary()
					_ = yym2505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2499 || yy2arr2499 {
				if yysep2499 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2499[2] {
					yym2507 := z.EncBinary()
					_ = yym2507
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2499[2] {
					if yyfirst2499 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2499 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					if yysep2499 {
						r.EncodeMapKVSeparator()
					}
					yym2508 := z.EncBinary()
					_ = yym2508
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2499 || yy2arr2499 {
				if yysep2499 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2499[3] {
					yym2510 := z.EncBinary()
					_ = yym2510
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2499[3] {
					if yyfirst2499 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2499 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					if yysep2499 {
						r.EncodeMapKVSeparator()
					}
					yym2511 := z.EncBinary()
					_ = yym2511
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2499 || yy2arr2499 {
				if yysep2499 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2499[4] {
					yym2513 := z.EncBinary()
					_ = yym2513
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2499[4] {
					if yyfirst2499 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2499 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					if yysep2499 {
						r.EncodeMapKVSeparator()
					}
					yym2514 := z.EncBinary()
					_ = yym2514
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2499 || yy2arr2499 {
				if yysep2499 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2499[5] {
					yym2516 := z.EncBinary()
					_ = yym2516
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2499[5] {
					if yyfirst2499 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2499 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					if yysep2499 {
						r.EncodeMapKVSeparator()
					}
					yym2517 := z.EncBinary()
					_ = yym2517
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2499 || yy2arr2499 {
				if yysep2499 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2499[6] {
					yym2519 := z.EncBinary()
					_ = yym2519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2499[6] {
					if yyfirst2499 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2499 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					if yysep2499 {
						r.EncodeMapKVSeparator()
					}
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2499 || yy2arr2499 {
				if yysep2499 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2522 := z.EncBinary()
					_ = yym2522
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				if yyfirst2499 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2499 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				if yysep2499 {
					r.EncodeMapKVSeparator()
				}
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2523 := z.EncBinary()
					_ = yym2523
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2499 {
				if yyr2499 || yy2arr2499 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2524 := z.DecBinary()
	_ = yym2524
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2525 := r.ReadMapStart()
			if yyl2525 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2525, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2525 := r.ReadArrayStart()
			if yyl2525 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2525, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2526Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2526Slc
	var yyhl2526 bool = l >= 0
	for yyj2526 := 0; ; yyj2526++ {
		if yyhl2526 {
			if yyj2526 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2526 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2526Slc = r.DecodeBytes(yys2526Slc, true, true)
		yys2526 := string(yys2526Slc)
		if !yyhl2526 {
			r.ReadMapKVSeparator()
		}
		switch yys2526 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2534 := &x.Command
				yym2535 := z.DecBinary()
				_ = yym2535
				if false {
				} else {
					z.F.DecSliceStringX(yyv2534, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2526)
		} // end switch yys2526
	} // end for yyj2526
	if !yyhl2526 {
		r.ReadMapEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2536 int
	var yyb2536 bool
	var yyhl2536 bool = l >= 0
	yyj2536++
	if yyhl2536 {
		yyb2536 = yyj2536 > l
	} else {
		yyb2536 = r.CheckBreak()
	}
	if yyb2536 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2536++
	if yyhl2536 {
		yyb2536 = yyj2536 > l
	} else {
		yyb2536 = r.CheckBreak()
	}
	if yyb2536 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2536++
	if yyhl2536 {
		yyb2536 = yyj2536 > l
	} else {
		yyb2536 = r.CheckBreak()
	}
	if yyb2536 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2536++
	if yyhl2536 {
		yyb2536 = yyj2536 > l
	} else {
		yyb2536 = r.CheckBreak()
	}
	if yyb2536 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2536++
	if yyhl2536 {
		yyb2536 = yyj2536 > l
	} else {
		yyb2536 = r.CheckBreak()
	}
	if yyb2536 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2536++
	if yyhl2536 {
		yyb2536 = yyj2536 > l
	} else {
		yyb2536 = r.CheckBreak()
	}
	if yyb2536 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2536++
	if yyhl2536 {
		yyb2536 = yyj2536 > l
	} else {
		yyb2536 = r.CheckBreak()
	}
	if yyb2536 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2536++
	if yyhl2536 {
		yyb2536 = yyj2536 > l
	} else {
		yyb2536 = r.CheckBreak()
	}
	if yyb2536 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2544 := &x.Command
		yym2545 := z.DecBinary()
		_ = yym2545
		if false {
		} else {
			z.F.DecSliceStringX(yyv2544, false, d)
		}
	}
	for {
		yyj2536++
		if yyhl2536 {
			yyb2536 = yyj2536 > l
		} else {
			yyb2536 = r.CheckBreak()
		}
		if yyb2536 {
			break
		}
		if yyj2536 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2536-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2546 := z.EncBinary()
		_ = yym2546
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2547 := !z.EncBinary()
			yy2arr2547 := z.EncBasicHandle().StructToArray
			var yyfirst2547 bool
			var yyq2547 [3]bool
			_, _, _, _ = yysep2547, yyfirst2547, yyq2547, yy2arr2547
			const yyr2547 bool = false
			yyq2547[0] = x.Kind != ""
			yyq2547[1] = x.APIVersion != ""
			yyq2547[2] = x.Path != ""
			if yyr2547 || yy2arr2547 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2547 int = 0
				for _, b := range yyq2547 {
					if b {
						yynn2547++
					}
				}
				r.EncodeMapStart(yynn2547)
			}
			if yyr2547 || yy2arr2547 {
				if yyq2547[0] {
					yym2549 := z.EncBinary()
					_ = yym2549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2547[0] {
					yyfirst2547 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2547 {
						r.EncodeMapKVSeparator()
					}
					yym2550 := z.EncBinary()
					_ = yym2550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2547 || yy2arr2547 {
				if yysep2547 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2547[1] {
					yym2552 := z.EncBinary()
					_ = yym2552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2547[1] {
					if yyfirst2547 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2547 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2547 {
						r.EncodeMapKVSeparator()
					}
					yym2553 := z.EncBinary()
					_ = yym2553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2547 || yy2arr2547 {
				if yysep2547 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2547[2] {
					yym2555 := z.EncBinary()
					_ = yym2555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2547[2] {
					if yyfirst2547 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2547 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					if yysep2547 {
						r.EncodeMapKVSeparator()
					}
					yym2556 := z.EncBinary()
					_ = yym2556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yysep2547 {
				if yyr2547 || yy2arr2547 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2557 := z.DecBinary()
	_ = yym2557
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2558 := r.ReadMapStart()
			if yyl2558 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2558, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2558 := r.ReadArrayStart()
			if yyl2558 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2558, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2559Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2559Slc
	var yyhl2559 bool = l >= 0
	for yyj2559 := 0; ; yyj2559++ {
		if yyhl2559 {
			if yyj2559 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2559 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2559Slc = r.DecodeBytes(yys2559Slc, true, true)
		yys2559 := string(yys2559Slc)
		if !yyhl2559 {
			r.ReadMapKVSeparator()
		}
		switch yys2559 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2559)
		} // end switch yys2559
	} // end for yyj2559
	if !yyhl2559 {
		r.ReadMapEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2563 int
	var yyb2563 bool
	var yyhl2563 bool = l >= 0
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2563++
		if yyhl2563 {
			yyb2563 = yyj2563 > l
		} else {
			yyb2563 = r.CheckBreak()
		}
		if yyb2563 {
			break
		}
		if yyj2563 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2563-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Status) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2567 := z.EncBinary()
		_ = yym2567
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2568 := !z.EncBinary()
			yy2arr2568 := z.EncBasicHandle().StructToArray
			var yyfirst2568 bool
			var yyq2568 [8]bool
			_, _, _, _ = yysep2568, yyfirst2568, yyq2568, yy2arr2568
			const yyr2568 bool = false
			yyq2568[0] = x.Kind != ""
			yyq2568[1] = x.APIVersion != ""
			yyq2568[2] = true
			yyq2568[3] = x.Status != ""
			yyq2568[4] = x.Message != ""
			yyq2568[5] = x.Reason != ""
			yyq2568[6] = x.Details != nil
			yyq2568[7] = x.Code != 0
			if yyr2568 || yy2arr2568 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2568 int = 0
				for _, b := range yyq2568 {
					if b {
						yynn2568++
					}
				}
				r.EncodeMapStart(yynn2568)
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[0] {
					yym2570 := z.EncBinary()
					_ = yym2570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2568[0] {
					yyfirst2568 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2568 {
						r.EncodeMapKVSeparator()
					}
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yysep2568 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2568[1] {
					yym2573 := z.EncBinary()
					_ = yym2573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2568[1] {
					if yyfirst2568 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2568 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2568 {
						r.EncodeMapKVSeparator()
					}
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yysep2568 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2568[2] {
					yy2576 := &x.ListMeta
					yy2576.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2568[2] {
					if yyfirst2568 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2568 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2568 {
						r.EncodeMapKVSeparator()
					}
					yy2577 := &x.ListMeta
					yy2577.CodecEncodeSelf(e)
				}
			}
			if yyr2568 || yy2arr2568 {
				if yysep2568 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2568[3] {
					yym2579 := z.EncBinary()
					_ = yym2579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Status))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2568[3] {
					if yyfirst2568 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2568 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep2568 {
						r.EncodeMapKVSeparator()
					}
					yym2580 := z.EncBinary()
					_ = yym2580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Status))
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yysep2568 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2568[4] {
					yym2582 := z.EncBinary()
					_ = yym2582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2568[4] {
					if yyfirst2568 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2568 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep2568 {
						r.EncodeMapKVSeparator()
					}
					yym2583 := z.EncBinary()
					_ = yym2583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yysep2568 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2568[5] {
					x.Reason.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2568[5] {
					if yyfirst2568 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2568 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep2568 {
						r.EncodeMapKVSeparator()
					}
					x.Reason.CodecEncodeSelf(e)
				}
			}
			if yyr2568 || yy2arr2568 {
				if yysep2568 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2568[6] {
					if x.Details == nil {
						r.EncodeNil()
					} else {
						x.Details.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2568[6] {
					if yyfirst2568 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2568 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("details"))
					if yysep2568 {
						r.EncodeMapKVSeparator()
					}
					if x.Details == nil {
						r.EncodeNil()
					} else {
						x.Details.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yysep2568 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2568[7] {
					yym2587 := z.EncBinary()
					_ = yym2587
					if false {
					} else {
						r.EncodeInt(int64(x.Code))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2568[7] {
					if yyfirst2568 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2568 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("code"))
					if yysep2568 {
						r.EncodeMapKVSeparator()
					}
					yym2588 := z.EncBinary()
					_ = yym2588
					if false {
					} else {
						r.EncodeInt(int64(x.Code))
					}
				}
			}
			if yysep2568 {
				if yyr2568 || yy2arr2568 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Status) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2589 := z.DecBinary()
	_ = yym2589
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2590 := r.ReadMapStart()
			if yyl2590 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2590, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2590 := r.ReadArrayStart()
			if yyl2590 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2590, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Status) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2591Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2591Slc
	var yyhl2591 bool = l >= 0
	for yyj2591 := 0; ; yyj2591++ {
		if yyhl2591 {
			if yyj2591 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2591 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2591Slc = r.DecodeBytes(yys2591Slc, true, true)
		yys2591 := string(yys2591Slc)
		if !yyhl2591 {
			r.ReadMapKVSeparator()
		}
		switch yys2591 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv2594 := &x.ListMeta
				yyv2594.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = StatusReason(r.DecodeString())
			}
		case "details":
			if r.TryDecodeAsNil() {
				if x.Details != nil {
					x.Details = nil
				}
			} else {
				if x.Details == nil {
					x.Details = new(StatusDetails)
				}
				x.Details.CodecDecodeSelf(d)
			}
		case "code":
			if r.TryDecodeAsNil() {
				x.Code = 0
			} else {
				x.Code = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2591)
		} // end switch yys2591
	} // end for yyj2591
	if !yyhl2591 {
		r.ReadMapEnd()
	}
}

func (x *Status) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2600 int
	var yyb2600 bool
	var yyhl2600 bool = l >= 0
	yyj2600++
	if yyhl2600 {
		yyb2600 = yyj2600 > l
	} else {
		yyb2600 = r.CheckBreak()
	}
	if yyb2600 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2600++
	if yyhl2600 {
		yyb2600 = yyj2600 > l
	} else {
		yyb2600 = r.CheckBreak()
	}
	if yyb2600 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2600++
	if yyhl2600 {
		yyb2600 = yyj2600 > l
	} else {
		yyb2600 = r.CheckBreak()
	}
	if yyb2600 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv2603 := &x.ListMeta
		yyv2603.CodecDecodeSelf(d)
	}
	yyj2600++
	if yyhl2600 {
		yyb2600 = yyj2600 > l
	} else {
		yyb2600 = r.CheckBreak()
	}
	if yyb2600 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = string(r.DecodeString())
	}
	yyj2600++
	if yyhl2600 {
		yyb2600 = yyj2600 > l
	} else {
		yyb2600 = r.CheckBreak()
	}
	if yyb2600 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2600++
	if yyhl2600 {
		yyb2600 = yyj2600 > l
	} else {
		yyb2600 = r.CheckBreak()
	}
	if yyb2600 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = StatusReason(r.DecodeString())
	}
	yyj2600++
	if yyhl2600 {
		yyb2600 = yyj2600 > l
	} else {
		yyb2600 = r.CheckBreak()
	}
	if yyb2600 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Details != nil {
			x.Details = nil
		}
	} else {
		if x.Details == nil {
			x.Details = new(StatusDetails)
		}
		x.Details.CodecDecodeSelf(d)
	}
	yyj2600++
	if yyhl2600 {
		yyb2600 = yyj2600 > l
	} else {
		yyb2600 = r.CheckBreak()
	}
	if yyb2600 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Code = 0
	} else {
		x.Code = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2600++
		if yyhl2600 {
			yyb2600 = yyj2600 > l
		} else {
			yyb2600 = r.CheckBreak()
		}
		if yyb2600 {
			break
		}
		if yyj2600 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2600-1, "")
	}
	r.ReadArrayEnd()
}

func (x *StatusDetails) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2609 := z.EncBinary()
		_ = yym2609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2610 := !z.EncBinary()
			yy2arr2610 := z.EncBasicHandle().StructToArray
			var yyfirst2610 bool
			var yyq2610 [4]bool
			_, _, _, _ = yysep2610, yyfirst2610, yyq2610, yy2arr2610
			const yyr2610 bool = false
			yyq2610[0] = x.Name != ""
			yyq2610[1] = x.Kind != ""
			yyq2610[2] = len(x.Causes) != 0
			yyq2610[3] = x.RetryAfterSeconds != 0
			if yyr2610 || yy2arr2610 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2610 int = 0
				for _, b := range yyq2610 {
					if b {
						yynn2610++
					}
				}
				r.EncodeMapStart(yynn2610)
			}
			if yyr2610 || yy2arr2610 {
				if yyq2610[0] {
					yym2612 := z.EncBinary()
					_ = yym2612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2610[0] {
					yyfirst2610 = true
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep2610 {
						r.EncodeMapKVSeparator()
					}
					yym2613 := z.EncBinary()
					_ = yym2613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2610 || yy2arr2610 {
				if yysep2610 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2610[1] {
					yym2615 := z.EncBinary()
					_ = yym2615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2610[1] {
					if yyfirst2610 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2610 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2610 {
						r.EncodeMapKVSeparator()
					}
					yym2616 := z.EncBinary()
					_ = yym2616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2610 || yy2arr2610 {
				if yysep2610 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2610[2] {
					if x.Causes == nil {
						r.EncodeNil()
					} else {
						yym2618 := z.EncBinary()
						_ = yym2618
						if false {
						} else {
							h.encSliceStatusCause(([]StatusCause)(x.Causes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2610[2] {
					if yyfirst2610 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2610 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("causes"))
					if yysep2610 {
						r.EncodeMapKVSeparator()
					}
					if x.Causes == nil {
						r.EncodeNil()
					} else {
						yym2619 := z.EncBinary()
						_ = yym2619
						if false {
						} else {
							h.encSliceStatusCause(([]StatusCause)(x.Causes), e)
						}
					}
				}
			}
			if yyr2610 || yy2arr2610 {
				if yysep2610 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2610[3] {
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeInt(int64(x.RetryAfterSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2610[3] {
					if yyfirst2610 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2610 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("retryAfterSeconds"))
					if yysep2610 {
						r.EncodeMapKVSeparator()
					}
					yym2622 := z.EncBinary()
					_ = yym2622
					if false {
					} else {
						r.EncodeInt(int64(x.RetryAfterSeconds))
					}
				}
			}
			if yysep2610 {
				if yyr2610 || yy2arr2610 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *StatusDetails) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2623 := z.DecBinary()
	_ = yym2623
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2624 := r.ReadMapStart()
			if yyl2624 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2624, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2624 := r.ReadArrayStart()
			if yyl2624 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2624, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *StatusDetails) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2625Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2625Slc
	var yyhl2625 bool = l >= 0
	for yyj2625 := 0; ; yyj2625++ {
		if yyhl2625 {
			if yyj2625 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2625 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2625Slc = r.DecodeBytes(yys2625Slc, true, true)
		yys2625 := string(yys2625Slc)
		if !yyhl2625 {
			r.ReadMapKVSeparator()
		}
		switch yys2625 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "causes":
			if r.TryDecodeAsNil() {
				x.Causes = nil
			} else {
				yyv2628 := &x.Causes
				yym2629 := z.DecBinary()
				_ = yym2629
				if false {
				} else {
					h.decSliceStatusCause((*[]StatusCause)(yyv2628), d)
				}
			}
		case "retryAfterSeconds":
			if r.TryDecodeAsNil() {
				x.RetryAfterSeconds = 0
			} else {
				x.RetryAfterSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2625)
		} // end switch yys2625
	} // end for yyj2625
	if !yyhl2625 {
		r.ReadMapEnd()
	}
}

func (x *StatusDetails) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2631 int
	var yyb2631 bool
	var yyhl2631 bool = l >= 0
	yyj2631++
	if yyhl2631 {
		yyb2631 = yyj2631 > l
	} else {
		yyb2631 = r.CheckBreak()
	}
	if yyb2631 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2631++
	if yyhl2631 {
		yyb2631 = yyj2631 > l
	} else {
		yyb2631 = r.CheckBreak()
	}
	if yyb2631 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2631++
	if yyhl2631 {
		yyb2631 = yyj2631 > l
	} else {
		yyb2631 = r.CheckBreak()
	}
	if yyb2631 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Causes = nil
	} else {
		yyv2634 := &x.Causes
		yym2635 := z.DecBinary()
		_ = yym2635
		if false {
		} else {
			h.decSliceStatusCause((*[]StatusCause)(yyv2634), d)
		}
	}
	yyj2631++
	if yyhl2631 {
		yyb2631 = yyj2631 > l
	} else {
		yyb2631 = r.CheckBreak()
	}
	if yyb2631 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.RetryAfterSeconds = 0
	} else {
		x.RetryAfterSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2631++
		if yyhl2631 {
			yyb2631 = yyj2631 > l
		} else {
			yyb2631 = r.CheckBreak()
		}
		if yyb2631 {
			break
		}
		if yyj2631 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2631-1, "")
	}
	r.ReadArrayEnd()
}

func (x StatusReason) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2637 := z.EncBinary()
	_ = yym2637
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StatusReason) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2638 := z.DecBinary()
	_ = yym2638
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *StatusCause) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2639 := z.EncBinary()
		_ = yym2639
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2640 := !z.EncBinary()
			yy2arr2640 := z.EncBasicHandle().StructToArray
			var yyfirst2640 bool
			var yyq2640 [3]bool
			_, _, _, _ = yysep2640, yyfirst2640, yyq2640, yy2arr2640
			const yyr2640 bool = false
			yyq2640[0] = x.Type != ""
			yyq2640[1] = x.Message != ""
			yyq2640[2] = x.Field != ""
			if yyr2640 || yy2arr2640 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2640 int = 0
				for _, b := range yyq2640 {
					if b {
						yynn2640++
					}
				}
				r.EncodeMapStart(yynn2640)
			}
			if yyr2640 || yy2arr2640 {
				if yyq2640[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2640[0] {
					yyfirst2640 = true
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep2640 {
						r.EncodeMapKVSeparator()
					}
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2640 || yy2arr2640 {
				if yysep2640 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2640[1] {
					yym2643 := z.EncBinary()
					_ = yym2643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2640[1] {
					if yyfirst2640 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2640 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep2640 {
						r.EncodeMapKVSeparator()
					}
					yym2644 := z.EncBinary()
					_ = yym2644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2640 || yy2arr2640 {
				if yysep2640 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2640[2] {
					yym2646 := z.EncBinary()
					_ = yym2646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Field))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2640[2] {
					if yyfirst2640 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2640 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("field"))
					if yysep2640 {
						r.EncodeMapKVSeparator()
					}
					yym2647 := z.EncBinary()
					_ = yym2647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Field))
					}
				}
			}
			if yysep2640 {
				if yyr2640 || yy2arr2640 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *StatusCause) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2648 := z.DecBinary()
	_ = yym2648
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2649 := r.ReadMapStart()
			if yyl2649 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2649, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2649 := r.ReadArrayStart()
			if yyl2649 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2649, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *StatusCause) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2650Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2650Slc
	var yyhl2650 bool = l >= 0
	for yyj2650 := 0; ; yyj2650++ {
		if yyhl2650 {
			if yyj2650 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2650 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2650Slc = r.DecodeBytes(yys2650Slc, true, true)
		yys2650 := string(yys2650Slc)
		if !yyhl2650 {
			r.ReadMapKVSeparator()
		}
		switch yys2650 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = CauseType(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "field":
			if r.TryDecodeAsNil() {
				x.Field = ""
			} else {
				x.Field = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2650)
		} // end switch yys2650
	} // end for yyj2650
	if !yyhl2650 {
		r.ReadMapEnd()
	}
}

func (x *StatusCause) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2654 int
	var yyb2654 bool
	var yyhl2654 bool = l >= 0
	yyj2654++
	if yyhl2654 {
		yyb2654 = yyj2654 > l
	} else {
		yyb2654 = r.CheckBreak()
	}
	if yyb2654 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = CauseType(r.DecodeString())
	}
	yyj2654++
	if yyhl2654 {
		yyb2654 = yyj2654 > l
	} else {
		yyb2654 = r.CheckBreak()
	}
	if yyb2654 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2654++
	if yyhl2654 {
		yyb2654 = yyj2654 > l
	} else {
		yyb2654 = r.CheckBreak()
	}
	if yyb2654 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Field = ""
	} else {
		x.Field = string(r.DecodeString())
	}
	for {
		yyj2654++
		if yyhl2654 {
			yyb2654 = yyj2654 > l
		} else {
			yyb2654 = r.CheckBreak()
		}
		if yyb2654 {
			break
		}
		if yyj2654 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2654-1, "")
	}
	r.ReadArrayEnd()
}

func (x CauseType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2658 := z.EncBinary()
	_ = yym2658
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *CauseType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2659 := z.DecBinary()
	_ = yym2659
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2660 := z.EncBinary()
		_ = yym2660
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2661 := !z.EncBinary()
			yy2arr2661 := z.EncBasicHandle().StructToArray
			var yyfirst2661 bool
			var yyq2661 [7]bool
			_, _, _, _ = yysep2661, yyfirst2661, yyq2661, yy2arr2661
			const yyr2661 bool = false
			yyq2661[0] = x.Kind != ""
			yyq2661[1] = x.Namespace != ""
			yyq2661[2] = x.Name != ""
			yyq2661[3] = x.UID != ""
			yyq2661[4] = x.APIVersion != ""
			yyq2661[5] = x.ResourceVersion != ""
			yyq2661[6] = x.FieldPath != ""
			if yyr2661 || yy2arr2661 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2661 int = 0
				for _, b := range yyq2661 {
					if b {
						yynn2661++
					}
				}
				r.EncodeMapStart(yynn2661)
			}
			if yyr2661 || yy2arr2661 {
				if yyq2661[0] {
					yym2663 := z.EncBinary()
					_ = yym2663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2661[0] {
					yyfirst2661 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2661 {
						r.EncodeMapKVSeparator()
					}
					yym2664 := z.EncBinary()
					_ = yym2664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2661 || yy2arr2661 {
				if yysep2661 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2661[1] {
					yym2666 := z.EncBinary()
					_ = yym2666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2661[1] {
					if yyfirst2661 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2661 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					if yysep2661 {
						r.EncodeMapKVSeparator()
					}
					yym2667 := z.EncBinary()
					_ = yym2667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2661 || yy2arr2661 {
				if yysep2661 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2661[2] {
					yym2669 := z.EncBinary()
					_ = yym2669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2661[2] {
					if yyfirst2661 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2661 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep2661 {
						r.EncodeMapKVSeparator()
					}
					yym2670 := z.EncBinary()
					_ = yym2670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2661 || yy2arr2661 {
				if yysep2661 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2661[3] {
					yym2672 := z.EncBinary()
					_ = yym2672
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2661[3] {
					if yyfirst2661 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2661 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					if yysep2661 {
						r.EncodeMapKVSeparator()
					}
					yym2673 := z.EncBinary()
					_ = yym2673
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2661 || yy2arr2661 {
				if yysep2661 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2661[4] {
					yym2675 := z.EncBinary()
					_ = yym2675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2661[4] {
					if yyfirst2661 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2661 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2661 {
						r.EncodeMapKVSeparator()
					}
					yym2676 := z.EncBinary()
					_ = yym2676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2661 || yy2arr2661 {
				if yysep2661 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2661[5] {
					yym2678 := z.EncBinary()
					_ = yym2678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2661[5] {
					if yyfirst2661 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2661 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					if yysep2661 {
						r.EncodeMapKVSeparator()
					}
					yym2679 := z.EncBinary()
					_ = yym2679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2661 || yy2arr2661 {
				if yysep2661 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2661[6] {
					yym2681 := z.EncBinary()
					_ = yym2681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2661[6] {
					if yyfirst2661 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2661 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					if yysep2661 {
						r.EncodeMapKVSeparator()
					}
					yym2682 := z.EncBinary()
					_ = yym2682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2661 {
				if yyr2661 || yy2arr2661 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2683 := z.DecBinary()
	_ = yym2683
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2684 := r.ReadMapStart()
			if yyl2684 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2684, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2684 := r.ReadArrayStart()
			if yyl2684 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2684, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2685Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2685Slc
	var yyhl2685 bool = l >= 0
	for yyj2685 := 0; ; yyj2685++ {
		if yyhl2685 {
			if yyj2685 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2685 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2685Slc = r.DecodeBytes(yys2685Slc, true, true)
		yys2685 := string(yys2685Slc)
		if !yyhl2685 {
			r.ReadMapKVSeparator()
		}
		switch yys2685 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2685)
		} // end switch yys2685
	} // end for yyj2685
	if !yyhl2685 {
		r.ReadMapEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2693 int
	var yyb2693 bool
	var yyhl2693 bool = l >= 0
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2693++
		if yyhl2693 {
			yyb2693 = yyj2693 > l
		} else {
			yyb2693 = r.CheckBreak()
		}
		if yyb2693 {
			break
		}
		if yyj2693 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2693-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2701 := z.EncBinary()
		_ = yym2701
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2702 := !z.EncBinary()
			yy2arr2702 := z.EncBasicHandle().StructToArray
			var yyfirst2702 bool
			var yyq2702 [1]bool
			_, _, _, _ = yysep2702, yyfirst2702, yyq2702, yy2arr2702
			const yyr2702 bool = false
			yyq2702[0] = x.Name != ""
			if yyr2702 || yy2arr2702 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2702 int = 0
				for _, b := range yyq2702 {
					if b {
						yynn2702++
					}
				}
				r.EncodeMapStart(yynn2702)
			}
			if yyr2702 || yy2arr2702 {
				if yyq2702[0] {
					yym2704 := z.EncBinary()
					_ = yym2704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2702[0] {
					yyfirst2702 = true
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep2702 {
						r.EncodeMapKVSeparator()
					}
					yym2705 := z.EncBinary()
					_ = yym2705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yysep2702 {
				if yyr2702 || yy2arr2702 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2706 := z.DecBinary()
	_ = yym2706
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2707 := r.ReadMapStart()
			if yyl2707 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2707, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2707 := r.ReadArrayStart()
			if yyl2707 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2707, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2708Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2708Slc
	var yyhl2708 bool = l >= 0
	for yyj2708 := 0; ; yyj2708++ {
		if yyhl2708 {
			if yyj2708 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2708 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2708Slc = r.DecodeBytes(yys2708Slc, true, true)
		yys2708 := string(yys2708Slc)
		if !yyhl2708 {
			r.ReadMapKVSeparator()
		}
		switch yys2708 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2708)
		} // end switch yys2708
	} // end for yyj2708
	if !yyhl2708 {
		r.ReadMapEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2710 int
	var yyb2710 bool
	var yyhl2710 bool = l >= 0
	yyj2710++
	if yyhl2710 {
		yyb2710 = yyj2710 > l
	} else {
		yyb2710 = r.CheckBreak()
	}
	if yyb2710 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2710++
		if yyhl2710 {
			yyb2710 = yyj2710 > l
		} else {
			yyb2710 = r.CheckBreak()
		}
		if yyb2710 {
			break
		}
		if yyj2710 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2710-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2712 := z.EncBinary()
		_ = yym2712
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2713 := !z.EncBinary()
			yy2arr2713 := z.EncBasicHandle().StructToArray
			var yyfirst2713 bool
			var yyq2713 [3]bool
			_, _, _, _ = yysep2713, yyfirst2713, yyq2713, yy2arr2713
			const yyr2713 bool = false
			yyq2713[0] = x.Kind != ""
			yyq2713[1] = x.APIVersion != ""
			yyq2713[2] = true
			if yyr2713 || yy2arr2713 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2713 int = 0
				for _, b := range yyq2713 {
					if b {
						yynn2713++
					}
				}
				r.EncodeMapStart(yynn2713)
			}
			if yyr2713 || yy2arr2713 {
				if yyq2713[0] {
					yym2715 := z.EncBinary()
					_ = yym2715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2713[0] {
					yyfirst2713 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2713 {
						r.EncodeMapKVSeparator()
					}
					yym2716 := z.EncBinary()
					_ = yym2716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2713 || yy2arr2713 {
				if yysep2713 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2713[1] {
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2713[1] {
					if yyfirst2713 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2713 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2713 {
						r.EncodeMapKVSeparator()
					}
					yym2719 := z.EncBinary()
					_ = yym2719
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2713 || yy2arr2713 {
				if yysep2713 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2713[2] {
					yy2721 := &x.Reference
					yy2721.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2713[2] {
					if yyfirst2713 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2713 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					if yysep2713 {
						r.EncodeMapKVSeparator()
					}
					yy2722 := &x.Reference
					yy2722.CodecEncodeSelf(e)
				}
			}
			if yysep2713 {
				if yyr2713 || yy2arr2713 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2723 := z.DecBinary()
	_ = yym2723
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2724 := r.ReadMapStart()
			if yyl2724 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2724, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2724 := r.ReadArrayStart()
			if yyl2724 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2724, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2725Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2725Slc
	var yyhl2725 bool = l >= 0
	for yyj2725 := 0; ; yyj2725++ {
		if yyhl2725 {
			if yyj2725 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2725 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2725Slc = r.DecodeBytes(yys2725Slc, true, true)
		yys2725 := string(yys2725Slc)
		if !yyhl2725 {
			r.ReadMapKVSeparator()
		}
		switch yys2725 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2728 := &x.Reference
				yyv2728.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2725)
		} // end switch yys2725
	} // end for yyj2725
	if !yyhl2725 {
		r.ReadMapEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2729 int
	var yyb2729 bool
	var yyhl2729 bool = l >= 0
	yyj2729++
	if yyhl2729 {
		yyb2729 = yyj2729 > l
	} else {
		yyb2729 = r.CheckBreak()
	}
	if yyb2729 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2729++
	if yyhl2729 {
		yyb2729 = yyj2729 > l
	} else {
		yyb2729 = r.CheckBreak()
	}
	if yyb2729 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2729++
	if yyhl2729 {
		yyb2729 = yyj2729 > l
	} else {
		yyb2729 = r.CheckBreak()
	}
	if yyb2729 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2732 := &x.Reference
		yyv2732.CodecDecodeSelf(d)
	}
	for {
		yyj2729++
		if yyhl2729 {
			yyb2729 = yyj2729 > l
		} else {
			yyb2729 = r.CheckBreak()
		}
		if yyb2729 {
			break
		}
		if yyj2729 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2729-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2733 := z.EncBinary()
		_ = yym2733
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2734 := !z.EncBinary()
			yy2arr2734 := z.EncBasicHandle().StructToArray
			var yyfirst2734 bool
			var yyq2734 [2]bool
			_, _, _, _ = yysep2734, yyfirst2734, yyq2734, yy2arr2734
			const yyr2734 bool = false
			yyq2734[0] = x.Component != ""
			yyq2734[1] = x.Host != ""
			if yyr2734 || yy2arr2734 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2734 int = 0
				for _, b := range yyq2734 {
					if b {
						yynn2734++
					}
				}
				r.EncodeMapStart(yynn2734)
			}
			if yyr2734 || yy2arr2734 {
				if yyq2734[0] {
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2734[0] {
					yyfirst2734 = true
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					if yysep2734 {
						r.EncodeMapKVSeparator()
					}
					yym2737 := z.EncBinary()
					_ = yym2737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2734 || yy2arr2734 {
				if yysep2734 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2734[1] {
					yym2739 := z.EncBinary()
					_ = yym2739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2734[1] {
					if yyfirst2734 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2734 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					if yysep2734 {
						r.EncodeMapKVSeparator()
					}
					yym2740 := z.EncBinary()
					_ = yym2740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep2734 {
				if yyr2734 || yy2arr2734 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2741 := z.DecBinary()
	_ = yym2741
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2742 := r.ReadMapStart()
			if yyl2742 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2742, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2742 := r.ReadArrayStart()
			if yyl2742 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2742, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2743Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2743Slc
	var yyhl2743 bool = l >= 0
	for yyj2743 := 0; ; yyj2743++ {
		if yyhl2743 {
			if yyj2743 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2743 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2743Slc = r.DecodeBytes(yys2743Slc, true, true)
		yys2743 := string(yys2743Slc)
		if !yyhl2743 {
			r.ReadMapKVSeparator()
		}
		switch yys2743 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2743)
		} // end switch yys2743
	} // end for yyj2743
	if !yyhl2743 {
		r.ReadMapEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2746 int
	var yyb2746 bool
	var yyhl2746 bool = l >= 0
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2746++
		if yyhl2746 {
			yyb2746 = yyj2746 > l
		} else {
			yyb2746 = r.CheckBreak()
		}
		if yyb2746 {
			break
		}
		if yyj2746 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2746-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2749 := z.EncBinary()
		_ = yym2749
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2750 := !z.EncBinary()
			yy2arr2750 := z.EncBasicHandle().StructToArray
			var yyfirst2750 bool
			var yyq2750 [10]bool
			_, _, _, _ = yysep2750, yyfirst2750, yyq2750, yy2arr2750
			const yyr2750 bool = false
			yyq2750[0] = x.Kind != ""
			yyq2750[1] = x.APIVersion != ""
			yyq2750[4] = x.Reason != ""
			yyq2750[5] = x.Message != ""
			yyq2750[6] = true
			yyq2750[7] = true
			yyq2750[8] = true
			yyq2750[9] = x.Count != 0
			if yyr2750 || yy2arr2750 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2750 int = 2
				for _, b := range yyq2750 {
					if b {
						yynn2750++
					}
				}
				r.EncodeMapStart(yynn2750)
			}
			if yyr2750 || yy2arr2750 {
				if yyq2750[0] {
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2750[0] {
					yyfirst2750 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2750 {
						r.EncodeMapKVSeparator()
					}
					yym2753 := z.EncBinary()
					_ = yym2753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				if yysep2750 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2750[1] {
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2750[1] {
					if yyfirst2750 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2750 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2750 {
						r.EncodeMapKVSeparator()
					}
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				if yysep2750 {
					r.EncodeArrayEntrySeparator()
				}
				yy2758 := &x.ObjectMeta
				yy2758.CodecEncodeSelf(e)
			} else {
				if yyfirst2750 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2750 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				if yysep2750 {
					r.EncodeMapKVSeparator()
				}
				yy2759 := &x.ObjectMeta
				yy2759.CodecEncodeSelf(e)
			}
			if yyr2750 || yy2arr2750 {
				if yysep2750 {
					r.EncodeArrayEntrySeparator()
				}
				yy2761 := &x.InvolvedObject
				yy2761.CodecEncodeSelf(e)
			} else {
				if yyfirst2750 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2750 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				if yysep2750 {
					r.EncodeMapKVSeparator()
				}
				yy2762 := &x.InvolvedObject
				yy2762.CodecEncodeSelf(e)
			}
			if yyr2750 || yy2arr2750 {
				if yysep2750 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2750[4] {
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2750[4] {
					if yyfirst2750 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2750 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep2750 {
						r.EncodeMapKVSeparator()
					}
					yym2765 := z.EncBinary()
					_ = yym2765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				if yysep2750 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2750[5] {
					yym2767 := z.EncBinary()
					_ = yym2767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2750[5] {
					if yyfirst2750 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2750 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep2750 {
						r.EncodeMapKVSeparator()
					}
					yym2768 := z.EncBinary()
					_ = yym2768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				if yysep2750 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2750[6] {
					yy2770 := &x.Source
					yy2770.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2750[6] {
					if yyfirst2750 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2750 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					if yysep2750 {
						r.EncodeMapKVSeparator()
					}
					yy2771 := &x.Source
					yy2771.CodecEncodeSelf(e)
				}
			}
			if yyr2750 || yy2arr2750 {
				if yysep2750 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2750[7] {
					yy2773 := &x.FirstTimestamp
					yym2774 := z.EncBinary()
					_ = yym2774
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2773) {
					} else if yym2774 {
						z.EncBinaryMarshal(yy2773)
					} else if !yym2774 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2773)
					} else {
						z.EncFallback(yy2773)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2750[7] {
					if yyfirst2750 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2750 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					if yysep2750 {
						r.EncodeMapKVSeparator()
					}
					yy2775 := &x.FirstTimestamp
					yym2776 := z.EncBinary()
					_ = yym2776
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2775) {
					} else if yym2776 {
						z.EncBinaryMarshal(yy2775)
					} else if !yym2776 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2775)
					} else {
						z.EncFallback(yy2775)
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				if yysep2750 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2750[8] {
					yy2778 := &x.LastTimestamp
					yym2779 := z.EncBinary()
					_ = yym2779
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2778) {
					} else if yym2779 {
						z.EncBinaryMarshal(yy2778)
					} else if !yym2779 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2778)
					} else {
						z.EncFallback(yy2778)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2750[8] {
					if yyfirst2750 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2750 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					if yysep2750 {
						r.EncodeMapKVSeparator()
					}
					yy2780 := &x.LastTimestamp
					yym2781 := z.EncBinary()
					_ = yym2781
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2780) {
					} else if yym2781 {
						z.EncBinaryMarshal(yy2780)
					} else if !yym2781 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2780)
					} else {
						z.EncFallback(yy2780)
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				if yysep2750 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2750[9] {
					yym2783 := z.EncBinary()
					_ = yym2783
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2750[9] {
					if yyfirst2750 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2750 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					if yysep2750 {
						r.EncodeMapKVSeparator()
					}
					yym2784 := z.EncBinary()
					_ = yym2784
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep2750 {
				if yyr2750 || yy2arr2750 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2785 := z.DecBinary()
	_ = yym2785
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2786 := r.ReadMapStart()
			if yyl2786 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2786, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2786 := r.ReadArrayStart()
			if yyl2786 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2786, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2787Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2787Slc
	var yyhl2787 bool = l >= 0
	for yyj2787 := 0; ; yyj2787++ {
		if yyhl2787 {
			if yyj2787 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2787 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2787Slc = r.DecodeBytes(yys2787Slc, true, true)
		yys2787 := string(yys2787Slc)
		if !yyhl2787 {
			r.ReadMapKVSeparator()
		}
		switch yys2787 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2790 := &x.ObjectMeta
				yyv2790.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2791 := &x.InvolvedObject
				yyv2791.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2794 := &x.Source
				yyv2794.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_util.Time{}
			} else {
				yyv2795 := &x.FirstTimestamp
				yym2796 := z.DecBinary()
				_ = yym2796
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2795) {
				} else if yym2796 {
					z.DecBinaryUnmarshal(yyv2795)
				} else if !yym2796 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2795)
				} else {
					z.DecFallback(yyv2795, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_util.Time{}
			} else {
				yyv2797 := &x.LastTimestamp
				yym2798 := z.DecBinary()
				_ = yym2798
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2797) {
				} else if yym2798 {
					z.DecBinaryUnmarshal(yyv2797)
				} else if !yym2798 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2797)
				} else {
					z.DecFallback(yyv2797, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2787)
		} // end switch yys2787
	} // end for yyj2787
	if !yyhl2787 {
		r.ReadMapEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2800 int
	var yyb2800 bool
	var yyhl2800 bool = l >= 0
	yyj2800++
	if yyhl2800 {
		yyb2800 = yyj2800 > l
	} else {
		yyb2800 = r.CheckBreak()
	}
	if yyb2800 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2800++
	if yyhl2800 {
		yyb2800 = yyj2800 > l
	} else {
		yyb2800 = r.CheckBreak()
	}
	if yyb2800 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2800++
	if yyhl2800 {
		yyb2800 = yyj2800 > l
	} else {
		yyb2800 = r.CheckBreak()
	}
	if yyb2800 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2803 := &x.ObjectMeta
		yyv2803.CodecDecodeSelf(d)
	}
	yyj2800++
	if yyhl2800 {
		yyb2800 = yyj2800 > l
	} else {
		yyb2800 = r.CheckBreak()
	}
	if yyb2800 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2804 := &x.InvolvedObject
		yyv2804.CodecDecodeSelf(d)
	}
	yyj2800++
	if yyhl2800 {
		yyb2800 = yyj2800 > l
	} else {
		yyb2800 = r.CheckBreak()
	}
	if yyb2800 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2800++
	if yyhl2800 {
		yyb2800 = yyj2800 > l
	} else {
		yyb2800 = r.CheckBreak()
	}
	if yyb2800 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2800++
	if yyhl2800 {
		yyb2800 = yyj2800 > l
	} else {
		yyb2800 = r.CheckBreak()
	}
	if yyb2800 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2807 := &x.Source
		yyv2807.CodecDecodeSelf(d)
	}
	yyj2800++
	if yyhl2800 {
		yyb2800 = yyj2800 > l
	} else {
		yyb2800 = r.CheckBreak()
	}
	if yyb2800 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_util.Time{}
	} else {
		yyv2808 := &x.FirstTimestamp
		yym2809 := z.DecBinary()
		_ = yym2809
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2808) {
		} else if yym2809 {
			z.DecBinaryUnmarshal(yyv2808)
		} else if !yym2809 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2808)
		} else {
			z.DecFallback(yyv2808, false)
		}
	}
	yyj2800++
	if yyhl2800 {
		yyb2800 = yyj2800 > l
	} else {
		yyb2800 = r.CheckBreak()
	}
	if yyb2800 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_util.Time{}
	} else {
		yyv2810 := &x.LastTimestamp
		yym2811 := z.DecBinary()
		_ = yym2811
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2810) {
		} else if yym2811 {
			z.DecBinaryUnmarshal(yyv2810)
		} else if !yym2811 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2810)
		} else {
			z.DecFallback(yyv2810, false)
		}
	}
	yyj2800++
	if yyhl2800 {
		yyb2800 = yyj2800 > l
	} else {
		yyb2800 = r.CheckBreak()
	}
	if yyb2800 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2800++
		if yyhl2800 {
			yyb2800 = yyj2800 > l
		} else {
			yyb2800 = r.CheckBreak()
		}
		if yyb2800 {
			break
		}
		if yyj2800 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2800-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2813 := z.EncBinary()
		_ = yym2813
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2814 := !z.EncBinary()
			yy2arr2814 := z.EncBasicHandle().StructToArray
			var yyfirst2814 bool
			var yyq2814 [4]bool
			_, _, _, _ = yysep2814, yyfirst2814, yyq2814, yy2arr2814
			const yyr2814 bool = false
			yyq2814[0] = x.Kind != ""
			yyq2814[1] = x.APIVersion != ""
			yyq2814[2] = true
			if yyr2814 || yy2arr2814 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2814 int = 1
				for _, b := range yyq2814 {
					if b {
						yynn2814++
					}
				}
				r.EncodeMapStart(yynn2814)
			}
			if yyr2814 || yy2arr2814 {
				if yyq2814[0] {
					yym2816 := z.EncBinary()
					_ = yym2816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2814[0] {
					yyfirst2814 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2814 {
						r.EncodeMapKVSeparator()
					}
					yym2817 := z.EncBinary()
					_ = yym2817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2814 || yy2arr2814 {
				if yysep2814 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2814[1] {
					yym2819 := z.EncBinary()
					_ = yym2819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2814[1] {
					if yyfirst2814 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2814 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2814 {
						r.EncodeMapKVSeparator()
					}
					yym2820 := z.EncBinary()
					_ = yym2820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2814 || yy2arr2814 {
				if yysep2814 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2814[2] {
					yy2822 := &x.ListMeta
					yy2822.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2814[2] {
					if yyfirst2814 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2814 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2814 {
						r.EncodeMapKVSeparator()
					}
					yy2823 := &x.ListMeta
					yy2823.CodecEncodeSelf(e)
				}
			}
			if yyr2814 || yy2arr2814 {
				if yysep2814 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2825 := z.EncBinary()
					_ = yym2825
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				if yyfirst2814 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2814 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep2814 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2826 := z.EncBinary()
					_ = yym2826
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep2814 {
				if yyr2814 || yy2arr2814 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2827 := z.DecBinary()
	_ = yym2827
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2828 := r.ReadMapStart()
			if yyl2828 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2828, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2828 := r.ReadArrayStart()
			if yyl2828 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2828, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2829Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2829Slc
	var yyhl2829 bool = l >= 0
	for yyj2829 := 0; ; yyj2829++ {
		if yyhl2829 {
			if yyj2829 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2829 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2829Slc = r.DecodeBytes(yys2829Slc, true, true)
		yys2829 := string(yys2829Slc)
		if !yyhl2829 {
			r.ReadMapKVSeparator()
		}
		switch yys2829 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv2832 := &x.ListMeta
				yyv2832.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2833 := &x.Items
				yym2834 := z.DecBinary()
				_ = yym2834
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv2833), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2829)
		} // end switch yys2829
	} // end for yyj2829
	if !yyhl2829 {
		r.ReadMapEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2835 int
	var yyb2835 bool
	var yyhl2835 bool = l >= 0
	yyj2835++
	if yyhl2835 {
		yyb2835 = yyj2835 > l
	} else {
		yyb2835 = r.CheckBreak()
	}
	if yyb2835 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2835++
	if yyhl2835 {
		yyb2835 = yyj2835 > l
	} else {
		yyb2835 = r.CheckBreak()
	}
	if yyb2835 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2835++
	if yyhl2835 {
		yyb2835 = yyj2835 > l
	} else {
		yyb2835 = r.CheckBreak()
	}
	if yyb2835 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv2838 := &x.ListMeta
		yyv2838.CodecDecodeSelf(d)
	}
	yyj2835++
	if yyhl2835 {
		yyb2835 = yyj2835 > l
	} else {
		yyb2835 = r.CheckBreak()
	}
	if yyb2835 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2839 := &x.Items
		yym2840 := z.DecBinary()
		_ = yym2840
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv2839), d)
		}
	}
	for {
		yyj2835++
		if yyhl2835 {
			yyb2835 = yyj2835 > l
		} else {
			yyb2835 = r.CheckBreak()
		}
		if yyb2835 {
			break
		}
		if yyj2835 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2835-1, "")
	}
	r.ReadArrayEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2841 := z.EncBinary()
		_ = yym2841
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2842 := !z.EncBinary()
			yy2arr2842 := z.EncBasicHandle().StructToArray
			var yyfirst2842 bool
			var yyq2842 [4]bool
			_, _, _, _ = yysep2842, yyfirst2842, yyq2842, yy2arr2842
			const yyr2842 bool = false
			yyq2842[0] = x.Kind != ""
			yyq2842[1] = x.APIVersion != ""
			yyq2842[2] = true
			if yyr2842 || yy2arr2842 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2842 int = 1
				for _, b := range yyq2842 {
					if b {
						yynn2842++
					}
				}
				r.EncodeMapStart(yynn2842)
			}
			if yyr2842 || yy2arr2842 {
				if yyq2842[0] {
					yym2844 := z.EncBinary()
					_ = yym2844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2842[0] {
					yyfirst2842 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2842 {
						r.EncodeMapKVSeparator()
					}
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2842 || yy2arr2842 {
				if yysep2842 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2842[1] {
					yym2847 := z.EncBinary()
					_ = yym2847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2842[1] {
					if yyfirst2842 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2842 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2842 {
						r.EncodeMapKVSeparator()
					}
					yym2848 := z.EncBinary()
					_ = yym2848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2842 || yy2arr2842 {
				if yysep2842 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2842[2] {
					yy2850 := &x.ListMeta
					yy2850.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2842[2] {
					if yyfirst2842 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2842 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2842 {
						r.EncodeMapKVSeparator()
					}
					yy2851 := &x.ListMeta
					yy2851.CodecEncodeSelf(e)
				}
			}
			if yyr2842 || yy2arr2842 {
				if yysep2842 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				if yyfirst2842 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2842 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep2842 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2854 := z.EncBinary()
					_ = yym2854
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yysep2842 {
				if yyr2842 || yy2arr2842 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2855 := z.DecBinary()
	_ = yym2855
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2856 := r.ReadMapStart()
			if yyl2856 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2856, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2856 := r.ReadArrayStart()
			if yyl2856 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2856, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2857Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2857Slc
	var yyhl2857 bool = l >= 0
	for yyj2857 := 0; ; yyj2857++ {
		if yyhl2857 {
			if yyj2857 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2857 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2857Slc = r.DecodeBytes(yys2857Slc, true, true)
		yys2857 := string(yys2857Slc)
		if !yyhl2857 {
			r.ReadMapKVSeparator()
		}
		switch yys2857 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv2860 := &x.ListMeta
				yyv2860.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2861 := &x.Items
				yym2862 := z.DecBinary()
				_ = yym2862
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv2861), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2857)
		} // end switch yys2857
	} // end for yyj2857
	if !yyhl2857 {
		r.ReadMapEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2863 int
	var yyb2863 bool
	var yyhl2863 bool = l >= 0
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv2866 := &x.ListMeta
		yyv2866.CodecDecodeSelf(d)
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2867 := &x.Items
		yym2868 := z.DecBinary()
		_ = yym2868
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv2867), d)
		}
	}
	for {
		yyj2863++
		if yyhl2863 {
			yyb2863 = yyj2863 > l
		} else {
			yyb2863 = r.CheckBreak()
		}
		if yyb2863 {
			break
		}
		if yyj2863 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2863-1, "")
	}
	r.ReadArrayEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2869 := z.EncBinary()
	_ = yym2869
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2870 := z.DecBinary()
	_ = yym2870
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2871 := z.EncBinary()
		_ = yym2871
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2872 := !z.EncBinary()
			yy2arr2872 := z.EncBasicHandle().StructToArray
			var yyfirst2872 bool
			var yyq2872 [6]bool
			_, _, _, _ = yysep2872, yyfirst2872, yyq2872, yy2arr2872
			const yyr2872 bool = false
			yyq2872[0] = x.Type != ""
			yyq2872[1] = len(x.Max) != 0
			yyq2872[2] = len(x.Min) != 0
			yyq2872[3] = len(x.Default) != 0
			yyq2872[4] = len(x.DefaultRequest) != 0
			yyq2872[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr2872 || yy2arr2872 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2872 int = 0
				for _, b := range yyq2872 {
					if b {
						yynn2872++
					}
				}
				r.EncodeMapStart(yynn2872)
			}
			if yyr2872 || yy2arr2872 {
				if yyq2872[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2872[0] {
					yyfirst2872 = true
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					if yysep2872 {
						r.EncodeMapKVSeparator()
					}
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2872 || yy2arr2872 {
				if yysep2872 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2872[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2872[1] {
					if yyfirst2872 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2872 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if yysep2872 {
						r.EncodeMapKVSeparator()
					}
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2872 || yy2arr2872 {
				if yysep2872 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2872[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2872[2] {
					if yyfirst2872 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2872 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if yysep2872 {
						r.EncodeMapKVSeparator()
					}
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2872 || yy2arr2872 {
				if yysep2872 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2872[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2872[3] {
					if yyfirst2872 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2872 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if yysep2872 {
						r.EncodeMapKVSeparator()
					}
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2872 || yy2arr2872 {
				if yysep2872 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2872[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2872[4] {
					if yyfirst2872 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2872 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if yysep2872 {
						r.EncodeMapKVSeparator()
					}
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2872 || yy2arr2872 {
				if yysep2872 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2872[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2872[5] {
					if yyfirst2872 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2872 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if yysep2872 {
						r.EncodeMapKVSeparator()
					}
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2872 {
				if yyr2872 || yy2arr2872 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2879 := z.DecBinary()
	_ = yym2879
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2880 := r.ReadMapStart()
			if yyl2880 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2880, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2880 := r.ReadArrayStart()
			if yyl2880 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2880, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2881Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2881Slc
	var yyhl2881 bool = l >= 0
	for yyj2881 := 0; ; yyj2881++ {
		if yyhl2881 {
			if yyj2881 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2881 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2881Slc = r.DecodeBytes(yys2881Slc, true, true)
		yys2881 := string(yys2881Slc)
		if !yyhl2881 {
			r.ReadMapKVSeparator()
		}
		switch yys2881 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv2883 := &x.Max
				yyv2883.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv2884 := &x.Min
				yyv2884.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv2885 := &x.Default
				yyv2885.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv2886 := &x.DefaultRequest
				yyv2886.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv2887 := &x.MaxLimitRequestRatio
				yyv2887.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2881)
		} // end switch yys2881
	} // end for yyj2881
	if !yyhl2881 {
		r.ReadMapEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2888 int
	var yyb2888 bool
	var yyhl2888 bool = l >= 0
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv2890 := &x.Max
		yyv2890.CodecDecodeSelf(d)
	}
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv2891 := &x.Min
		yyv2891.CodecDecodeSelf(d)
	}
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv2892 := &x.Default
		yyv2892.CodecDecodeSelf(d)
	}
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv2893 := &x.DefaultRequest
		yyv2893.CodecDecodeSelf(d)
	}
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv2894 := &x.MaxLimitRequestRatio
		yyv2894.CodecDecodeSelf(d)
	}
	for {
		yyj2888++
		if yyhl2888 {
			yyb2888 = yyj2888 > l
		} else {
			yyb2888 = r.CheckBreak()
		}
		if yyb2888 {
			break
		}
		if yyj2888 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2888-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2895 := z.EncBinary()
		_ = yym2895
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2896 := !z.EncBinary()
			yy2arr2896 := z.EncBasicHandle().StructToArray
			var yyfirst2896 bool
			var yyq2896 [1]bool
			_, _, _, _ = yysep2896, yyfirst2896, yyq2896, yy2arr2896
			const yyr2896 bool = false
			if yyr2896 || yy2arr2896 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2896 int = 1
				for _, b := range yyq2896 {
					if b {
						yynn2896++
					}
				}
				r.EncodeMapStart(yynn2896)
			}
			if yyr2896 || yy2arr2896 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym2898 := z.EncBinary()
					_ = yym2898
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				yyfirst2896 = true
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if yysep2896 {
					r.EncodeMapKVSeparator()
				}
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym2899 := z.EncBinary()
					_ = yym2899
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep2896 {
				if yyr2896 || yy2arr2896 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2900 := z.DecBinary()
	_ = yym2900
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2901 := r.ReadMapStart()
			if yyl2901 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2901, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2901 := r.ReadArrayStart()
			if yyl2901 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2901, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2902Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2902Slc
	var yyhl2902 bool = l >= 0
	for yyj2902 := 0; ; yyj2902++ {
		if yyhl2902 {
			if yyj2902 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2902 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2902Slc = r.DecodeBytes(yys2902Slc, true, true)
		yys2902 := string(yys2902Slc)
		if !yyhl2902 {
			r.ReadMapKVSeparator()
		}
		switch yys2902 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv2903 := &x.Limits
				yym2904 := z.DecBinary()
				_ = yym2904
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv2903), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2902)
		} // end switch yys2902
	} // end for yyj2902
	if !yyhl2902 {
		r.ReadMapEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2905 int
	var yyb2905 bool
	var yyhl2905 bool = l >= 0
	yyj2905++
	if yyhl2905 {
		yyb2905 = yyj2905 > l
	} else {
		yyb2905 = r.CheckBreak()
	}
	if yyb2905 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv2906 := &x.Limits
		yym2907 := z.DecBinary()
		_ = yym2907
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv2906), d)
		}
	}
	for {
		yyj2905++
		if yyhl2905 {
			yyb2905 = yyj2905 > l
		} else {
			yyb2905 = r.CheckBreak()
		}
		if yyb2905 {
			break
		}
		if yyj2905 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2905-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2908 := z.EncBinary()
		_ = yym2908
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2909 := !z.EncBinary()
			yy2arr2909 := z.EncBasicHandle().StructToArray
			var yyfirst2909 bool
			var yyq2909 [4]bool
			_, _, _, _ = yysep2909, yyfirst2909, yyq2909, yy2arr2909
			const yyr2909 bool = false
			yyq2909[0] = x.Kind != ""
			yyq2909[1] = x.APIVersion != ""
			yyq2909[2] = true
			yyq2909[3] = true
			if yyr2909 || yy2arr2909 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2909 int = 0
				for _, b := range yyq2909 {
					if b {
						yynn2909++
					}
				}
				r.EncodeMapStart(yynn2909)
			}
			if yyr2909 || yy2arr2909 {
				if yyq2909[0] {
					yym2911 := z.EncBinary()
					_ = yym2911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2909[0] {
					yyfirst2909 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2909 {
						r.EncodeMapKVSeparator()
					}
					yym2912 := z.EncBinary()
					_ = yym2912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2909 || yy2arr2909 {
				if yysep2909 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2909[1] {
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2909[1] {
					if yyfirst2909 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2909 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2909 {
						r.EncodeMapKVSeparator()
					}
					yym2915 := z.EncBinary()
					_ = yym2915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2909 || yy2arr2909 {
				if yysep2909 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2909[2] {
					yy2917 := &x.ObjectMeta
					yy2917.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2909[2] {
					if yyfirst2909 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2909 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2909 {
						r.EncodeMapKVSeparator()
					}
					yy2918 := &x.ObjectMeta
					yy2918.CodecEncodeSelf(e)
				}
			}
			if yyr2909 || yy2arr2909 {
				if yysep2909 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2909[3] {
					yy2920 := &x.Spec
					yy2920.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2909[3] {
					if yyfirst2909 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2909 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep2909 {
						r.EncodeMapKVSeparator()
					}
					yy2921 := &x.Spec
					yy2921.CodecEncodeSelf(e)
				}
			}
			if yysep2909 {
				if yyr2909 || yy2arr2909 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2922 := z.DecBinary()
	_ = yym2922
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2923 := r.ReadMapStart()
			if yyl2923 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2923, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2923 := r.ReadArrayStart()
			if yyl2923 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2923, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2924Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2924Slc
	var yyhl2924 bool = l >= 0
	for yyj2924 := 0; ; yyj2924++ {
		if yyhl2924 {
			if yyj2924 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2924 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2924Slc = r.DecodeBytes(yys2924Slc, true, true)
		yys2924 := string(yys2924Slc)
		if !yyhl2924 {
			r.ReadMapKVSeparator()
		}
		switch yys2924 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2927 := &x.ObjectMeta
				yyv2927.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv2928 := &x.Spec
				yyv2928.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2924)
		} // end switch yys2924
	} // end for yyj2924
	if !yyhl2924 {
		r.ReadMapEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2929 int
	var yyb2929 bool
	var yyhl2929 bool = l >= 0
	yyj2929++
	if yyhl2929 {
		yyb2929 = yyj2929 > l
	} else {
		yyb2929 = r.CheckBreak()
	}
	if yyb2929 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2929++
	if yyhl2929 {
		yyb2929 = yyj2929 > l
	} else {
		yyb2929 = r.CheckBreak()
	}
	if yyb2929 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2929++
	if yyhl2929 {
		yyb2929 = yyj2929 > l
	} else {
		yyb2929 = r.CheckBreak()
	}
	if yyb2929 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2932 := &x.ObjectMeta
		yyv2932.CodecDecodeSelf(d)
	}
	yyj2929++
	if yyhl2929 {
		yyb2929 = yyj2929 > l
	} else {
		yyb2929 = r.CheckBreak()
	}
	if yyb2929 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv2933 := &x.Spec
		yyv2933.CodecDecodeSelf(d)
	}
	for {
		yyj2929++
		if yyhl2929 {
			yyb2929 = yyj2929 > l
		} else {
			yyb2929 = r.CheckBreak()
		}
		if yyb2929 {
			break
		}
		if yyj2929 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2929-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2934 := z.EncBinary()
		_ = yym2934
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2935 := !z.EncBinary()
			yy2arr2935 := z.EncBasicHandle().StructToArray
			var yyfirst2935 bool
			var yyq2935 [4]bool
			_, _, _, _ = yysep2935, yyfirst2935, yyq2935, yy2arr2935
			const yyr2935 bool = false
			yyq2935[0] = x.Kind != ""
			yyq2935[1] = x.APIVersion != ""
			yyq2935[2] = true
			if yyr2935 || yy2arr2935 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2935 int = 1
				for _, b := range yyq2935 {
					if b {
						yynn2935++
					}
				}
				r.EncodeMapStart(yynn2935)
			}
			if yyr2935 || yy2arr2935 {
				if yyq2935[0] {
					yym2937 := z.EncBinary()
					_ = yym2937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2935[0] {
					yyfirst2935 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2935 {
						r.EncodeMapKVSeparator()
					}
					yym2938 := z.EncBinary()
					_ = yym2938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2935 || yy2arr2935 {
				if yysep2935 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2935[1] {
					yym2940 := z.EncBinary()
					_ = yym2940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2935[1] {
					if yyfirst2935 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2935 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2935 {
						r.EncodeMapKVSeparator()
					}
					yym2941 := z.EncBinary()
					_ = yym2941
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2935 || yy2arr2935 {
				if yysep2935 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2935[2] {
					yy2943 := &x.ListMeta
					yy2943.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2935[2] {
					if yyfirst2935 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2935 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2935 {
						r.EncodeMapKVSeparator()
					}
					yy2944 := &x.ListMeta
					yy2944.CodecEncodeSelf(e)
				}
			}
			if yyr2935 || yy2arr2935 {
				if yysep2935 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2946 := z.EncBinary()
					_ = yym2946
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				if yyfirst2935 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2935 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep2935 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2947 := z.EncBinary()
					_ = yym2947
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep2935 {
				if yyr2935 || yy2arr2935 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2948 := z.DecBinary()
	_ = yym2948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2949 := r.ReadMapStart()
			if yyl2949 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2949, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2949 := r.ReadArrayStart()
			if yyl2949 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2950Slc
	var yyhl2950 bool = l >= 0
	for yyj2950 := 0; ; yyj2950++ {
		if yyhl2950 {
			if yyj2950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2950 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2950Slc = r.DecodeBytes(yys2950Slc, true, true)
		yys2950 := string(yys2950Slc)
		if !yyhl2950 {
			r.ReadMapKVSeparator()
		}
		switch yys2950 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv2953 := &x.ListMeta
				yyv2953.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2954 := &x.Items
				yym2955 := z.DecBinary()
				_ = yym2955
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv2954), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2950)
		} // end switch yys2950
	} // end for yyj2950
	if !yyhl2950 {
		r.ReadMapEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2956 int
	var yyb2956 bool
	var yyhl2956 bool = l >= 0
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv2959 := &x.ListMeta
		yyv2959.CodecDecodeSelf(d)
	}
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2960 := &x.Items
		yym2961 := z.DecBinary()
		_ = yym2961
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv2960), d)
		}
	}
	for {
		yyj2956++
		if yyhl2956 {
			yyb2956 = yyj2956 > l
		} else {
			yyb2956 = r.CheckBreak()
		}
		if yyb2956 {
			break
		}
		if yyj2956 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2956-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2962 := z.EncBinary()
		_ = yym2962
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2963 := !z.EncBinary()
			yy2arr2963 := z.EncBasicHandle().StructToArray
			var yyfirst2963 bool
			var yyq2963 [1]bool
			_, _, _, _ = yysep2963, yyfirst2963, yyq2963, yy2arr2963
			const yyr2963 bool = false
			yyq2963[0] = len(x.Hard) != 0
			if yyr2963 || yy2arr2963 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2963 int = 0
				for _, b := range yyq2963 {
					if b {
						yynn2963++
					}
				}
				r.EncodeMapStart(yynn2963)
			}
			if yyr2963 || yy2arr2963 {
				if yyq2963[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[0] {
					yyfirst2963 = true
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if yysep2963 {
						r.EncodeMapKVSeparator()
					}
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2963 {
				if yyr2963 || yy2arr2963 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2965 := z.DecBinary()
	_ = yym2965
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2966 := r.ReadMapStart()
			if yyl2966 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2966, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2966 := r.ReadArrayStart()
			if yyl2966 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2966, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2967Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2967Slc
	var yyhl2967 bool = l >= 0
	for yyj2967 := 0; ; yyj2967++ {
		if yyhl2967 {
			if yyj2967 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2967 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2967Slc = r.DecodeBytes(yys2967Slc, true, true)
		yys2967 := string(yys2967Slc)
		if !yyhl2967 {
			r.ReadMapKVSeparator()
		}
		switch yys2967 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv2968 := &x.Hard
				yyv2968.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2967)
		} // end switch yys2967
	} // end for yyj2967
	if !yyhl2967 {
		r.ReadMapEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2969 int
	var yyb2969 bool
	var yyhl2969 bool = l >= 0
	yyj2969++
	if yyhl2969 {
		yyb2969 = yyj2969 > l
	} else {
		yyb2969 = r.CheckBreak()
	}
	if yyb2969 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv2970 := &x.Hard
		yyv2970.CodecDecodeSelf(d)
	}
	for {
		yyj2969++
		if yyhl2969 {
			yyb2969 = yyj2969 > l
		} else {
			yyb2969 = r.CheckBreak()
		}
		if yyb2969 {
			break
		}
		if yyj2969 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2969-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2971 := z.EncBinary()
		_ = yym2971
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2972 := !z.EncBinary()
			yy2arr2972 := z.EncBasicHandle().StructToArray
			var yyfirst2972 bool
			var yyq2972 [2]bool
			_, _, _, _ = yysep2972, yyfirst2972, yyq2972, yy2arr2972
			const yyr2972 bool = false
			yyq2972[0] = len(x.Hard) != 0
			yyq2972[1] = len(x.Used) != 0
			if yyr2972 || yy2arr2972 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2972 int = 0
				for _, b := range yyq2972 {
					if b {
						yynn2972++
					}
				}
				r.EncodeMapStart(yynn2972)
			}
			if yyr2972 || yy2arr2972 {
				if yyq2972[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2972[0] {
					yyfirst2972 = true
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if yysep2972 {
						r.EncodeMapKVSeparator()
					}
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2972 || yy2arr2972 {
				if yysep2972 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2972[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2972[1] {
					if yyfirst2972 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2972 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if yysep2972 {
						r.EncodeMapKVSeparator()
					}
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2972 {
				if yyr2972 || yy2arr2972 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2975 := z.DecBinary()
	_ = yym2975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2976 := r.ReadMapStart()
			if yyl2976 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2976, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2976 := r.ReadArrayStart()
			if yyl2976 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2977Slc
	var yyhl2977 bool = l >= 0
	for yyj2977 := 0; ; yyj2977++ {
		if yyhl2977 {
			if yyj2977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2977 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2977Slc = r.DecodeBytes(yys2977Slc, true, true)
		yys2977 := string(yys2977Slc)
		if !yyhl2977 {
			r.ReadMapKVSeparator()
		}
		switch yys2977 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv2978 := &x.Hard
				yyv2978.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv2979 := &x.Used
				yyv2979.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2977)
		} // end switch yys2977
	} // end for yyj2977
	if !yyhl2977 {
		r.ReadMapEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2980 int
	var yyb2980 bool
	var yyhl2980 bool = l >= 0
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv2981 := &x.Hard
		yyv2981.CodecDecodeSelf(d)
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv2982 := &x.Used
		yyv2982.CodecDecodeSelf(d)
	}
	for {
		yyj2980++
		if yyhl2980 {
			yyb2980 = yyj2980 > l
		} else {
			yyb2980 = r.CheckBreak()
		}
		if yyb2980 {
			break
		}
		if yyj2980 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2980-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2983 := z.EncBinary()
		_ = yym2983
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2984 := !z.EncBinary()
			yy2arr2984 := z.EncBasicHandle().StructToArray
			var yyfirst2984 bool
			var yyq2984 [5]bool
			_, _, _, _ = yysep2984, yyfirst2984, yyq2984, yy2arr2984
			const yyr2984 bool = false
			yyq2984[0] = x.Kind != ""
			yyq2984[1] = x.APIVersion != ""
			yyq2984[2] = true
			yyq2984[3] = true
			yyq2984[4] = true
			if yyr2984 || yy2arr2984 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2984 int = 0
				for _, b := range yyq2984 {
					if b {
						yynn2984++
					}
				}
				r.EncodeMapStart(yynn2984)
			}
			if yyr2984 || yy2arr2984 {
				if yyq2984[0] {
					yym2986 := z.EncBinary()
					_ = yym2986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2984[0] {
					yyfirst2984 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2984 {
						r.EncodeMapKVSeparator()
					}
					yym2987 := z.EncBinary()
					_ = yym2987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2984 || yy2arr2984 {
				if yysep2984 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2984[1] {
					yym2989 := z.EncBinary()
					_ = yym2989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2984[1] {
					if yyfirst2984 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2984 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2984 {
						r.EncodeMapKVSeparator()
					}
					yym2990 := z.EncBinary()
					_ = yym2990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2984 || yy2arr2984 {
				if yysep2984 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2984[2] {
					yy2992 := &x.ObjectMeta
					yy2992.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2984[2] {
					if yyfirst2984 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2984 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2984 {
						r.EncodeMapKVSeparator()
					}
					yy2993 := &x.ObjectMeta
					yy2993.CodecEncodeSelf(e)
				}
			}
			if yyr2984 || yy2arr2984 {
				if yysep2984 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2984[3] {
					yy2995 := &x.Spec
					yy2995.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2984[3] {
					if yyfirst2984 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2984 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep2984 {
						r.EncodeMapKVSeparator()
					}
					yy2996 := &x.Spec
					yy2996.CodecEncodeSelf(e)
				}
			}
			if yyr2984 || yy2arr2984 {
				if yysep2984 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2984[4] {
					yy2998 := &x.Status
					yy2998.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2984[4] {
					if yyfirst2984 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2984 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep2984 {
						r.EncodeMapKVSeparator()
					}
					yy2999 := &x.Status
					yy2999.CodecEncodeSelf(e)
				}
			}
			if yysep2984 {
				if yyr2984 || yy2arr2984 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3000 := z.DecBinary()
	_ = yym3000
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3001 := r.ReadMapStart()
			if yyl3001 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3001, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3001 := r.ReadArrayStart()
			if yyl3001 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3001, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3002Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3002Slc
	var yyhl3002 bool = l >= 0
	for yyj3002 := 0; ; yyj3002++ {
		if yyhl3002 {
			if yyj3002 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3002 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3002Slc = r.DecodeBytes(yys3002Slc, true, true)
		yys3002 := string(yys3002Slc)
		if !yyhl3002 {
			r.ReadMapKVSeparator()
		}
		switch yys3002 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3005 := &x.ObjectMeta
				yyv3005.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3006 := &x.Spec
				yyv3006.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3007 := &x.Status
				yyv3007.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3002)
		} // end switch yys3002
	} // end for yyj3002
	if !yyhl3002 {
		r.ReadMapEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3008 int
	var yyb3008 bool
	var yyhl3008 bool = l >= 0
	yyj3008++
	if yyhl3008 {
		yyb3008 = yyj3008 > l
	} else {
		yyb3008 = r.CheckBreak()
	}
	if yyb3008 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3008++
	if yyhl3008 {
		yyb3008 = yyj3008 > l
	} else {
		yyb3008 = r.CheckBreak()
	}
	if yyb3008 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3008++
	if yyhl3008 {
		yyb3008 = yyj3008 > l
	} else {
		yyb3008 = r.CheckBreak()
	}
	if yyb3008 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3011 := &x.ObjectMeta
		yyv3011.CodecDecodeSelf(d)
	}
	yyj3008++
	if yyhl3008 {
		yyb3008 = yyj3008 > l
	} else {
		yyb3008 = r.CheckBreak()
	}
	if yyb3008 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3012 := &x.Spec
		yyv3012.CodecDecodeSelf(d)
	}
	yyj3008++
	if yyhl3008 {
		yyb3008 = yyj3008 > l
	} else {
		yyb3008 = r.CheckBreak()
	}
	if yyb3008 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3013 := &x.Status
		yyv3013.CodecDecodeSelf(d)
	}
	for {
		yyj3008++
		if yyhl3008 {
			yyb3008 = yyj3008 > l
		} else {
			yyb3008 = r.CheckBreak()
		}
		if yyb3008 {
			break
		}
		if yyj3008 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3008-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3014 := z.EncBinary()
		_ = yym3014
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3015 := !z.EncBinary()
			yy2arr3015 := z.EncBasicHandle().StructToArray
			var yyfirst3015 bool
			var yyq3015 [4]bool
			_, _, _, _ = yysep3015, yyfirst3015, yyq3015, yy2arr3015
			const yyr3015 bool = false
			yyq3015[0] = x.Kind != ""
			yyq3015[1] = x.APIVersion != ""
			yyq3015[2] = true
			if yyr3015 || yy2arr3015 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3015 int = 1
				for _, b := range yyq3015 {
					if b {
						yynn3015++
					}
				}
				r.EncodeMapStart(yynn3015)
			}
			if yyr3015 || yy2arr3015 {
				if yyq3015[0] {
					yym3017 := z.EncBinary()
					_ = yym3017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3015[0] {
					yyfirst3015 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3015 {
						r.EncodeMapKVSeparator()
					}
					yym3018 := z.EncBinary()
					_ = yym3018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3015 || yy2arr3015 {
				if yysep3015 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3015[1] {
					yym3020 := z.EncBinary()
					_ = yym3020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3015[1] {
					if yyfirst3015 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3015 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3015 {
						r.EncodeMapKVSeparator()
					}
					yym3021 := z.EncBinary()
					_ = yym3021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3015 || yy2arr3015 {
				if yysep3015 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3015[2] {
					yy3023 := &x.ListMeta
					yy3023.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3015[2] {
					if yyfirst3015 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3015 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3015 {
						r.EncodeMapKVSeparator()
					}
					yy3024 := &x.ListMeta
					yy3024.CodecEncodeSelf(e)
				}
			}
			if yyr3015 || yy2arr3015 {
				if yysep3015 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3026 := z.EncBinary()
					_ = yym3026
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				if yyfirst3015 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3015 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep3015 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3027 := z.EncBinary()
					_ = yym3027
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3015 {
				if yyr3015 || yy2arr3015 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3028 := z.DecBinary()
	_ = yym3028
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3029 := r.ReadMapStart()
			if yyl3029 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3029, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3029 := r.ReadArrayStart()
			if yyl3029 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3029, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3030Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3030Slc
	var yyhl3030 bool = l >= 0
	for yyj3030 := 0; ; yyj3030++ {
		if yyhl3030 {
			if yyj3030 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3030 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3030Slc = r.DecodeBytes(yys3030Slc, true, true)
		yys3030 := string(yys3030Slc)
		if !yyhl3030 {
			r.ReadMapKVSeparator()
		}
		switch yys3030 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv3033 := &x.ListMeta
				yyv3033.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3034 := &x.Items
				yym3035 := z.DecBinary()
				_ = yym3035
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3034), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3030)
		} // end switch yys3030
	} // end for yyj3030
	if !yyhl3030 {
		r.ReadMapEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3036 int
	var yyb3036 bool
	var yyhl3036 bool = l >= 0
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv3039 := &x.ListMeta
		yyv3039.CodecDecodeSelf(d)
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3040 := &x.Items
		yym3041 := z.DecBinary()
		_ = yym3041
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3040), d)
		}
	}
	for {
		yyj3036++
		if yyhl3036 {
			yyb3036 = yyj3036 > l
		} else {
			yyb3036 = r.CheckBreak()
		}
		if yyb3036 {
			break
		}
		if yyj3036 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3036-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3042 := z.EncBinary()
		_ = yym3042
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3043 := !z.EncBinary()
			yy2arr3043 := z.EncBasicHandle().StructToArray
			var yyfirst3043 bool
			var yyq3043 [5]bool
			_, _, _, _ = yysep3043, yyfirst3043, yyq3043, yy2arr3043
			const yyr3043 bool = false
			yyq3043[0] = x.Kind != ""
			yyq3043[1] = x.APIVersion != ""
			yyq3043[2] = true
			yyq3043[3] = len(x.Data) != 0
			yyq3043[4] = x.Type != ""
			if yyr3043 || yy2arr3043 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3043 int = 0
				for _, b := range yyq3043 {
					if b {
						yynn3043++
					}
				}
				r.EncodeMapStart(yynn3043)
			}
			if yyr3043 || yy2arr3043 {
				if yyq3043[0] {
					yym3045 := z.EncBinary()
					_ = yym3045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3043[0] {
					yyfirst3043 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3043 {
						r.EncodeMapKVSeparator()
					}
					yym3046 := z.EncBinary()
					_ = yym3046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3043 || yy2arr3043 {
				if yysep3043 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3043[1] {
					yym3048 := z.EncBinary()
					_ = yym3048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3043[1] {
					if yyfirst3043 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3043 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3043 {
						r.EncodeMapKVSeparator()
					}
					yym3049 := z.EncBinary()
					_ = yym3049
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3043 || yy2arr3043 {
				if yysep3043 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3043[2] {
					yy3051 := &x.ObjectMeta
					yy3051.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3043[2] {
					if yyfirst3043 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3043 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3043 {
						r.EncodeMapKVSeparator()
					}
					yy3052 := &x.ObjectMeta
					yy3052.CodecEncodeSelf(e)
				}
			}
			if yyr3043 || yy2arr3043 {
				if yysep3043 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3043[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3054 := z.EncBinary()
						_ = yym3054
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3043[3] {
					if yyfirst3043 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3043 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if yysep3043 {
						r.EncodeMapKVSeparator()
					}
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3055 := z.EncBinary()
						_ = yym3055
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3043 || yy2arr3043 {
				if yysep3043 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3043[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3043[4] {
					if yyfirst3043 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3043 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					if yysep3043 {
						r.EncodeMapKVSeparator()
					}
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3043 {
				if yyr3043 || yy2arr3043 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3057 := z.DecBinary()
	_ = yym3057
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3058 := r.ReadMapStart()
			if yyl3058 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3058, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3058 := r.ReadArrayStart()
			if yyl3058 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3058, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3059Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3059Slc
	var yyhl3059 bool = l >= 0
	for yyj3059 := 0; ; yyj3059++ {
		if yyhl3059 {
			if yyj3059 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3059 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3059Slc = r.DecodeBytes(yys3059Slc, true, true)
		yys3059 := string(yys3059Slc)
		if !yyhl3059 {
			r.ReadMapKVSeparator()
		}
		switch yys3059 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3062 := &x.ObjectMeta
				yyv3062.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3063 := &x.Data
				yym3064 := z.DecBinary()
				_ = yym3064
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3063), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3059)
		} // end switch yys3059
	} // end for yyj3059
	if !yyhl3059 {
		r.ReadMapEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3066 int
	var yyb3066 bool
	var yyhl3066 bool = l >= 0
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3069 := &x.ObjectMeta
		yyv3069.CodecDecodeSelf(d)
	}
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3070 := &x.Data
		yym3071 := z.DecBinary()
		_ = yym3071
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3070), d)
		}
	}
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3066++
		if yyhl3066 {
			yyb3066 = yyj3066 > l
		} else {
			yyb3066 = r.CheckBreak()
		}
		if yyb3066 {
			break
		}
		if yyj3066 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3066-1, "")
	}
	r.ReadArrayEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3073 := z.EncBinary()
	_ = yym3073
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3074 := z.DecBinary()
	_ = yym3074
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3075 := z.EncBinary()
		_ = yym3075
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3076 := !z.EncBinary()
			yy2arr3076 := z.EncBasicHandle().StructToArray
			var yyfirst3076 bool
			var yyq3076 [4]bool
			_, _, _, _ = yysep3076, yyfirst3076, yyq3076, yy2arr3076
			const yyr3076 bool = false
			yyq3076[0] = x.Kind != ""
			yyq3076[1] = x.APIVersion != ""
			yyq3076[2] = true
			if yyr3076 || yy2arr3076 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3076 int = 1
				for _, b := range yyq3076 {
					if b {
						yynn3076++
					}
				}
				r.EncodeMapStart(yynn3076)
			}
			if yyr3076 || yy2arr3076 {
				if yyq3076[0] {
					yym3078 := z.EncBinary()
					_ = yym3078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3076[0] {
					yyfirst3076 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3076 {
						r.EncodeMapKVSeparator()
					}
					yym3079 := z.EncBinary()
					_ = yym3079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				if yysep3076 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3076[1] {
					yym3081 := z.EncBinary()
					_ = yym3081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3076[1] {
					if yyfirst3076 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3076 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3076 {
						r.EncodeMapKVSeparator()
					}
					yym3082 := z.EncBinary()
					_ = yym3082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				if yysep3076 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3076[2] {
					yy3084 := &x.ListMeta
					yy3084.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3076[2] {
					if yyfirst3076 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3076 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3076 {
						r.EncodeMapKVSeparator()
					}
					yy3085 := &x.ListMeta
					yy3085.CodecEncodeSelf(e)
				}
			}
			if yyr3076 || yy2arr3076 {
				if yysep3076 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3087 := z.EncBinary()
					_ = yym3087
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				if yyfirst3076 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3076 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep3076 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3088 := z.EncBinary()
					_ = yym3088
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3076 {
				if yyr3076 || yy2arr3076 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3089 := z.DecBinary()
	_ = yym3089
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3090 := r.ReadMapStart()
			if yyl3090 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3090, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3090 := r.ReadArrayStart()
			if yyl3090 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3090, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3091Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3091Slc
	var yyhl3091 bool = l >= 0
	for yyj3091 := 0; ; yyj3091++ {
		if yyhl3091 {
			if yyj3091 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3091 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3091Slc = r.DecodeBytes(yys3091Slc, true, true)
		yys3091 := string(yys3091Slc)
		if !yyhl3091 {
			r.ReadMapKVSeparator()
		}
		switch yys3091 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv3094 := &x.ListMeta
				yyv3094.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3095 := &x.Items
				yym3096 := z.DecBinary()
				_ = yym3096
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3095), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3091)
		} // end switch yys3091
	} // end for yyj3091
	if !yyhl3091 {
		r.ReadMapEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3097 int
	var yyb3097 bool
	var yyhl3097 bool = l >= 0
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv3100 := &x.ListMeta
		yyv3100.CodecDecodeSelf(d)
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3101 := &x.Items
		yym3102 := z.DecBinary()
		_ = yym3102
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3101), d)
		}
	}
	for {
		yyj3097++
		if yyhl3097 {
			yyb3097 = yyj3097 > l
		} else {
			yyb3097 = r.CheckBreak()
		}
		if yyb3097 {
			break
		}
		if yyj3097 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3097-1, "")
	}
	r.ReadArrayEnd()
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3103 := z.EncBinary()
	_ = yym3103
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3104 := z.DecBinary()
	_ = yym3104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3105 := z.EncBinary()
		_ = yym3105
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3106 := !z.EncBinary()
			yy2arr3106 := z.EncBasicHandle().StructToArray
			var yyfirst3106 bool
			var yyq3106 [4]bool
			_, _, _, _ = yysep3106, yyfirst3106, yyq3106, yy2arr3106
			const yyr3106 bool = false
			yyq3106[2] = x.Message != ""
			yyq3106[3] = x.Error != ""
			if yyr3106 || yy2arr3106 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3106 int = 2
				for _, b := range yyq3106 {
					if b {
						yynn3106++
					}
				}
				r.EncodeMapStart(yynn3106)
			}
			if yyr3106 || yy2arr3106 {
				x.Type.CodecEncodeSelf(e)
			} else {
				yyfirst3106 = true
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				if yysep3106 {
					r.EncodeMapKVSeparator()
				}
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3106 || yy2arr3106 {
				if yysep3106 {
					r.EncodeArrayEntrySeparator()
				}
				x.Status.CodecEncodeSelf(e)
			} else {
				if yyfirst3106 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3106 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				if yysep3106 {
					r.EncodeMapKVSeparator()
				}
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3106 || yy2arr3106 {
				if yysep3106 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3106[2] {
					yym3110 := z.EncBinary()
					_ = yym3110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3106[2] {
					if yyfirst3106 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3106 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep3106 {
						r.EncodeMapKVSeparator()
					}
					yym3111 := z.EncBinary()
					_ = yym3111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3106 || yy2arr3106 {
				if yysep3106 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3106[3] {
					yym3113 := z.EncBinary()
					_ = yym3113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3106[3] {
					if yyfirst3106 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3106 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					if yysep3106 {
						r.EncodeMapKVSeparator()
					}
					yym3114 := z.EncBinary()
					_ = yym3114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3106 {
				if yyr3106 || yy2arr3106 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3115 := z.DecBinary()
	_ = yym3115
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3116 := r.ReadMapStart()
			if yyl3116 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3116, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3116 := r.ReadArrayStart()
			if yyl3116 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3116, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3117Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3117Slc
	var yyhl3117 bool = l >= 0
	for yyj3117 := 0; ; yyj3117++ {
		if yyhl3117 {
			if yyj3117 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3117 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3117Slc = r.DecodeBytes(yys3117Slc, true, true)
		yys3117 := string(yys3117Slc)
		if !yyhl3117 {
			r.ReadMapKVSeparator()
		}
		switch yys3117 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3117)
		} // end switch yys3117
	} // end for yyj3117
	if !yyhl3117 {
		r.ReadMapEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3122 int
	var yyb3122 bool
	var yyhl3122 bool = l >= 0
	yyj3122++
	if yyhl3122 {
		yyb3122 = yyj3122 > l
	} else {
		yyb3122 = r.CheckBreak()
	}
	if yyb3122 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3122++
	if yyhl3122 {
		yyb3122 = yyj3122 > l
	} else {
		yyb3122 = r.CheckBreak()
	}
	if yyb3122 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3122++
	if yyhl3122 {
		yyb3122 = yyj3122 > l
	} else {
		yyb3122 = r.CheckBreak()
	}
	if yyb3122 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3122++
	if yyhl3122 {
		yyb3122 = yyj3122 > l
	} else {
		yyb3122 = r.CheckBreak()
	}
	if yyb3122 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3122++
		if yyhl3122 {
			yyb3122 = yyj3122 > l
		} else {
			yyb3122 = r.CheckBreak()
		}
		if yyb3122 {
			break
		}
		if yyj3122 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3122-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3127 := z.EncBinary()
		_ = yym3127
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3128 := !z.EncBinary()
			yy2arr3128 := z.EncBasicHandle().StructToArray
			var yyfirst3128 bool
			var yyq3128 [4]bool
			_, _, _, _ = yysep3128, yyfirst3128, yyq3128, yy2arr3128
			const yyr3128 bool = false
			yyq3128[0] = x.Kind != ""
			yyq3128[1] = x.APIVersion != ""
			yyq3128[2] = true
			yyq3128[3] = len(x.Conditions) != 0
			if yyr3128 || yy2arr3128 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3128 int = 0
				for _, b := range yyq3128 {
					if b {
						yynn3128++
					}
				}
				r.EncodeMapStart(yynn3128)
			}
			if yyr3128 || yy2arr3128 {
				if yyq3128[0] {
					yym3130 := z.EncBinary()
					_ = yym3130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3128[0] {
					yyfirst3128 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3128 {
						r.EncodeMapKVSeparator()
					}
					yym3131 := z.EncBinary()
					_ = yym3131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3128 || yy2arr3128 {
				if yysep3128 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3128[1] {
					yym3133 := z.EncBinary()
					_ = yym3133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3128[1] {
					if yyfirst3128 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3128 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3128 {
						r.EncodeMapKVSeparator()
					}
					yym3134 := z.EncBinary()
					_ = yym3134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3128 || yy2arr3128 {
				if yysep3128 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3128[2] {
					yy3136 := &x.ObjectMeta
					yy3136.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3128[2] {
					if yyfirst3128 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3128 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3128 {
						r.EncodeMapKVSeparator()
					}
					yy3137 := &x.ObjectMeta
					yy3137.CodecEncodeSelf(e)
				}
			}
			if yyr3128 || yy2arr3128 {
				if yysep3128 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3128[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3139 := z.EncBinary()
						_ = yym3139
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3128[3] {
					if yyfirst3128 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3128 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if yysep3128 {
						r.EncodeMapKVSeparator()
					}
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3140 := z.EncBinary()
						_ = yym3140
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3128 {
				if yyr3128 || yy2arr3128 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3141 := z.DecBinary()
	_ = yym3141
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3142 := r.ReadMapStart()
			if yyl3142 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3142, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3142 := r.ReadArrayStart()
			if yyl3142 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3142, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3143Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3143Slc
	var yyhl3143 bool = l >= 0
	for yyj3143 := 0; ; yyj3143++ {
		if yyhl3143 {
			if yyj3143 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3143 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3143Slc = r.DecodeBytes(yys3143Slc, true, true)
		yys3143 := string(yys3143Slc)
		if !yyhl3143 {
			r.ReadMapKVSeparator()
		}
		switch yys3143 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3146 := &x.ObjectMeta
				yyv3146.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3147 := &x.Conditions
				yym3148 := z.DecBinary()
				_ = yym3148
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3147), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3143)
		} // end switch yys3143
	} // end for yyj3143
	if !yyhl3143 {
		r.ReadMapEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3149 int
	var yyb3149 bool
	var yyhl3149 bool = l >= 0
	yyj3149++
	if yyhl3149 {
		yyb3149 = yyj3149 > l
	} else {
		yyb3149 = r.CheckBreak()
	}
	if yyb3149 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3149++
	if yyhl3149 {
		yyb3149 = yyj3149 > l
	} else {
		yyb3149 = r.CheckBreak()
	}
	if yyb3149 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3149++
	if yyhl3149 {
		yyb3149 = yyj3149 > l
	} else {
		yyb3149 = r.CheckBreak()
	}
	if yyb3149 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3152 := &x.ObjectMeta
		yyv3152.CodecDecodeSelf(d)
	}
	yyj3149++
	if yyhl3149 {
		yyb3149 = yyj3149 > l
	} else {
		yyb3149 = r.CheckBreak()
	}
	if yyb3149 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3153 := &x.Conditions
		yym3154 := z.DecBinary()
		_ = yym3154
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3153), d)
		}
	}
	for {
		yyj3149++
		if yyhl3149 {
			yyb3149 = yyj3149 > l
		} else {
			yyb3149 = r.CheckBreak()
		}
		if yyb3149 {
			break
		}
		if yyj3149 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3149-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3155 := z.EncBinary()
		_ = yym3155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3156 := !z.EncBinary()
			yy2arr3156 := z.EncBasicHandle().StructToArray
			var yyfirst3156 bool
			var yyq3156 [4]bool
			_, _, _, _ = yysep3156, yyfirst3156, yyq3156, yy2arr3156
			const yyr3156 bool = false
			yyq3156[0] = x.Kind != ""
			yyq3156[1] = x.APIVersion != ""
			yyq3156[2] = true
			if yyr3156 || yy2arr3156 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3156 int = 1
				for _, b := range yyq3156 {
					if b {
						yynn3156++
					}
				}
				r.EncodeMapStart(yynn3156)
			}
			if yyr3156 || yy2arr3156 {
				if yyq3156[0] {
					yym3158 := z.EncBinary()
					_ = yym3158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3156[0] {
					yyfirst3156 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3156 {
						r.EncodeMapKVSeparator()
					}
					yym3159 := z.EncBinary()
					_ = yym3159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3156 || yy2arr3156 {
				if yysep3156 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3156[1] {
					yym3161 := z.EncBinary()
					_ = yym3161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3156[1] {
					if yyfirst3156 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3156 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3156 {
						r.EncodeMapKVSeparator()
					}
					yym3162 := z.EncBinary()
					_ = yym3162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3156 || yy2arr3156 {
				if yysep3156 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3156[2] {
					yy3164 := &x.ListMeta
					yy3164.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3156[2] {
					if yyfirst3156 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3156 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3156 {
						r.EncodeMapKVSeparator()
					}
					yy3165 := &x.ListMeta
					yy3165.CodecEncodeSelf(e)
				}
			}
			if yyr3156 || yy2arr3156 {
				if yysep3156 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3167 := z.EncBinary()
					_ = yym3167
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				if yyfirst3156 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3156 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep3156 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3168 := z.EncBinary()
					_ = yym3168
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3156 {
				if yyr3156 || yy2arr3156 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3169 := z.DecBinary()
	_ = yym3169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3170 := r.ReadMapStart()
			if yyl3170 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3170, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3170 := r.ReadArrayStart()
			if yyl3170 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3171Slc
	var yyhl3171 bool = l >= 0
	for yyj3171 := 0; ; yyj3171++ {
		if yyhl3171 {
			if yyj3171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3171 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3171Slc = r.DecodeBytes(yys3171Slc, true, true)
		yys3171 := string(yys3171Slc)
		if !yyhl3171 {
			r.ReadMapKVSeparator()
		}
		switch yys3171 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv3174 := &x.ListMeta
				yyv3174.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3175 := &x.Items
				yym3176 := z.DecBinary()
				_ = yym3176
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3175), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3171)
		} // end switch yys3171
	} // end for yyj3171
	if !yyhl3171 {
		r.ReadMapEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3177 int
	var yyb3177 bool
	var yyhl3177 bool = l >= 0
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv3180 := &x.ListMeta
		yyv3180.CodecDecodeSelf(d)
	}
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3181 := &x.Items
		yym3182 := z.DecBinary()
		_ = yym3182
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3181), d)
		}
	}
	for {
		yyj3177++
		if yyhl3177 {
			yyb3177 = yyj3177 > l
		} else {
			yyb3177 = r.CheckBreak()
		}
		if yyb3177 {
			break
		}
		if yyj3177 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3177-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3183 := z.EncBinary()
		_ = yym3183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3184 := !z.EncBinary()
			yy2arr3184 := z.EncBasicHandle().StructToArray
			var yyfirst3184 bool
			var yyq3184 [1]bool
			_, _, _, _ = yysep3184, yyfirst3184, yyq3184, yy2arr3184
			const yyr3184 bool = false
			yyq3184[0] = len(x.Items) != 0
			if yyr3184 || yy2arr3184 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3184 int = 0
				for _, b := range yyq3184 {
					if b {
						yynn3184++
					}
				}
				r.EncodeMapStart(yynn3184)
			}
			if yyr3184 || yy2arr3184 {
				if yyq3184[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3186 := z.EncBinary()
						_ = yym3186
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3184[0] {
					yyfirst3184 = true
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if yysep3184 {
						r.EncodeMapKVSeparator()
					}
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3187 := z.EncBinary()
						_ = yym3187
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep3184 {
				if yyr3184 || yy2arr3184 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3188 := z.DecBinary()
	_ = yym3188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3189 := r.ReadMapStart()
			if yyl3189 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3189, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3189 := r.ReadArrayStart()
			if yyl3189 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3190Slc
	var yyhl3190 bool = l >= 0
	for yyj3190 := 0; ; yyj3190++ {
		if yyhl3190 {
			if yyj3190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3190 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3190Slc = r.DecodeBytes(yys3190Slc, true, true)
		yys3190 := string(yys3190Slc)
		if !yyhl3190 {
			r.ReadMapKVSeparator()
		}
		switch yys3190 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3191 := &x.Items
				yym3192 := z.DecBinary()
				_ = yym3192
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3191), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3190)
		} // end switch yys3190
	} // end for yyj3190
	if !yyhl3190 {
		r.ReadMapEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3193 int
	var yyb3193 bool
	var yyhl3193 bool = l >= 0
	yyj3193++
	if yyhl3193 {
		yyb3193 = yyj3193 > l
	} else {
		yyb3193 = r.CheckBreak()
	}
	if yyb3193 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3194 := &x.Items
		yym3195 := z.DecBinary()
		_ = yym3195
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3194), d)
		}
	}
	for {
		yyj3193++
		if yyhl3193 {
			yyb3193 = yyj3193 > l
		} else {
			yyb3193 = r.CheckBreak()
		}
		if yyb3193 {
			break
		}
		if yyj3193 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3193-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3196 := z.EncBinary()
		_ = yym3196
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3197 := !z.EncBinary()
			yy2arr3197 := z.EncBasicHandle().StructToArray
			var yyfirst3197 bool
			var yyq3197 [2]bool
			_, _, _, _ = yysep3197, yyfirst3197, yyq3197, yy2arr3197
			const yyr3197 bool = false
			if yyr3197 || yy2arr3197 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3197 int = 2
				for _, b := range yyq3197 {
					if b {
						yynn3197++
					}
				}
				r.EncodeMapStart(yynn3197)
			}
			if yyr3197 || yy2arr3197 {
				yym3199 := z.EncBinary()
				_ = yym3199
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				yyfirst3197 = true
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				if yysep3197 {
					r.EncodeMapKVSeparator()
				}
				yym3200 := z.EncBinary()
				_ = yym3200
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3197 || yy2arr3197 {
				if yysep3197 {
					r.EncodeArrayEntrySeparator()
				}
				yy3202 := &x.FieldRef
				yy3202.CodecEncodeSelf(e)
			} else {
				if yyfirst3197 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3197 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if yysep3197 {
					r.EncodeMapKVSeparator()
				}
				yy3203 := &x.FieldRef
				yy3203.CodecEncodeSelf(e)
			}
			if yysep3197 {
				if yyr3197 || yy2arr3197 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3204 := z.DecBinary()
	_ = yym3204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3205 := r.ReadMapStart()
			if yyl3205 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3205, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3205 := r.ReadArrayStart()
			if yyl3205 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3206Slc
	var yyhl3206 bool = l >= 0
	for yyj3206 := 0; ; yyj3206++ {
		if yyhl3206 {
			if yyj3206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3206 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3206Slc = r.DecodeBytes(yys3206Slc, true, true)
		yys3206 := string(yys3206Slc)
		if !yyhl3206 {
			r.ReadMapKVSeparator()
		}
		switch yys3206 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3208 := &x.FieldRef
				yyv3208.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3206)
		} // end switch yys3206
	} // end for yyj3206
	if !yyhl3206 {
		r.ReadMapEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3209 int
	var yyb3209 bool
	var yyhl3209 bool = l >= 0
	yyj3209++
	if yyhl3209 {
		yyb3209 = yyj3209 > l
	} else {
		yyb3209 = r.CheckBreak()
	}
	if yyb3209 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3209++
	if yyhl3209 {
		yyb3209 = yyj3209 > l
	} else {
		yyb3209 = r.CheckBreak()
	}
	if yyb3209 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3211 := &x.FieldRef
		yyv3211.CodecDecodeSelf(d)
	}
	for {
		yyj3209++
		if yyhl3209 {
			yyb3209 = yyj3209 > l
		} else {
			yyb3209 = r.CheckBreak()
		}
		if yyb3209 {
			break
		}
		if yyj3209 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3209-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3212 := z.EncBinary()
		_ = yym3212
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3213 := !z.EncBinary()
			yy2arr3213 := z.EncBasicHandle().StructToArray
			var yyfirst3213 bool
			var yyq3213 [5]bool
			_, _, _, _ = yysep3213, yyfirst3213, yyq3213, yy2arr3213
			const yyr3213 bool = false
			yyq3213[0] = x.Capabilities != nil
			yyq3213[1] = x.Privileged != nil
			yyq3213[2] = x.SELinuxOptions != nil
			yyq3213[3] = x.RunAsUser != nil
			yyq3213[4] = x.RunAsNonRoot != false
			if yyr3213 || yy2arr3213 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3213 int = 0
				for _, b := range yyq3213 {
					if b {
						yynn3213++
					}
				}
				r.EncodeMapStart(yynn3213)
			}
			if yyr3213 || yy2arr3213 {
				if yyq3213[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3213[0] {
					yyfirst3213 = true
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if yysep3213 {
						r.EncodeMapKVSeparator()
					}
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3213 || yy2arr3213 {
				if yysep3213 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3213[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3216 := *x.Privileged
						yym3217 := z.EncBinary()
						_ = yym3217
						if false {
						} else {
							r.EncodeBool(bool(yy3216))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3213[1] {
					if yyfirst3213 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3213 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if yysep3213 {
						r.EncodeMapKVSeparator()
					}
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3218 := *x.Privileged
						yym3219 := z.EncBinary()
						_ = yym3219
						if false {
						} else {
							r.EncodeBool(bool(yy3218))
						}
					}
				}
			}
			if yyr3213 || yy2arr3213 {
				if yysep3213 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3213[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3213[2] {
					if yyfirst3213 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3213 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if yysep3213 {
						r.EncodeMapKVSeparator()
					}
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3213 || yy2arr3213 {
				if yysep3213 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3213[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3222 := *x.RunAsUser
						yym3223 := z.EncBinary()
						_ = yym3223
						if false {
						} else {
							r.EncodeInt(int64(yy3222))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3213[3] {
					if yyfirst3213 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3213 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if yysep3213 {
						r.EncodeMapKVSeparator()
					}
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3224 := *x.RunAsUser
						yym3225 := z.EncBinary()
						_ = yym3225
						if false {
						} else {
							r.EncodeInt(int64(yy3224))
						}
					}
				}
			}
			if yyr3213 || yy2arr3213 {
				if yysep3213 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3213[4] {
					yym3227 := z.EncBinary()
					_ = yym3227
					if false {
					} else {
						r.EncodeBool(bool(x.RunAsNonRoot))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3213[4] {
					if yyfirst3213 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3213 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if yysep3213 {
						r.EncodeMapKVSeparator()
					}
					yym3228 := z.EncBinary()
					_ = yym3228
					if false {
					} else {
						r.EncodeBool(bool(x.RunAsNonRoot))
					}
				}
			}
			if yysep3213 {
				if yyr3213 || yy2arr3213 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3229 := z.DecBinary()
	_ = yym3229
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3230 := r.ReadMapStart()
			if yyl3230 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3230, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3230 := r.ReadArrayStart()
			if yyl3230 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3230, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3231Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3231Slc
	var yyhl3231 bool = l >= 0
	for yyj3231 := 0; ; yyj3231++ {
		if yyhl3231 {
			if yyj3231 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3231 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3231Slc = r.DecodeBytes(yys3231Slc, true, true)
		yys3231 := string(yys3231Slc)
		if !yyhl3231 {
			r.ReadMapKVSeparator()
		}
		switch yys3231 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3234 := z.DecBinary()
				_ = yym3234
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3237 := z.DecBinary()
				_ = yym3237
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				x.RunAsNonRoot = false
			} else {
				x.RunAsNonRoot = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3231)
		} // end switch yys3231
	} // end for yyj3231
	if !yyhl3231 {
		r.ReadMapEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3239 int
	var yyb3239 bool
	var yyhl3239 bool = l >= 0
	yyj3239++
	if yyhl3239 {
		yyb3239 = yyj3239 > l
	} else {
		yyb3239 = r.CheckBreak()
	}
	if yyb3239 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3239++
	if yyhl3239 {
		yyb3239 = yyj3239 > l
	} else {
		yyb3239 = r.CheckBreak()
	}
	if yyb3239 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3242 := z.DecBinary()
		_ = yym3242
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3239++
	if yyhl3239 {
		yyb3239 = yyj3239 > l
	} else {
		yyb3239 = r.CheckBreak()
	}
	if yyb3239 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3239++
	if yyhl3239 {
		yyb3239 = yyj3239 > l
	} else {
		yyb3239 = r.CheckBreak()
	}
	if yyb3239 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3245 := z.DecBinary()
		_ = yym3245
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3239++
	if yyhl3239 {
		yyb3239 = yyj3239 > l
	} else {
		yyb3239 = r.CheckBreak()
	}
	if yyb3239 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.RunAsNonRoot = false
	} else {
		x.RunAsNonRoot = bool(r.DecodeBool())
	}
	for {
		yyj3239++
		if yyhl3239 {
			yyb3239 = yyj3239 > l
		} else {
			yyb3239 = r.CheckBreak()
		}
		if yyb3239 {
			break
		}
		if yyj3239 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3239-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3247 := z.EncBinary()
		_ = yym3247
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3248 := !z.EncBinary()
			yy2arr3248 := z.EncBasicHandle().StructToArray
			var yyfirst3248 bool
			var yyq3248 [4]bool
			_, _, _, _ = yysep3248, yyfirst3248, yyq3248, yy2arr3248
			const yyr3248 bool = false
			yyq3248[0] = x.User != ""
			yyq3248[1] = x.Role != ""
			yyq3248[2] = x.Type != ""
			yyq3248[3] = x.Level != ""
			if yyr3248 || yy2arr3248 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3248 int = 0
				for _, b := range yyq3248 {
					if b {
						yynn3248++
					}
				}
				r.EncodeMapStart(yynn3248)
			}
			if yyr3248 || yy2arr3248 {
				if yyq3248[0] {
					yym3250 := z.EncBinary()
					_ = yym3250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3248[0] {
					yyfirst3248 = true
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					if yysep3248 {
						r.EncodeMapKVSeparator()
					}
					yym3251 := z.EncBinary()
					_ = yym3251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3248 || yy2arr3248 {
				if yysep3248 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3248[1] {
					yym3253 := z.EncBinary()
					_ = yym3253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3248[1] {
					if yyfirst3248 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3248 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					if yysep3248 {
						r.EncodeMapKVSeparator()
					}
					yym3254 := z.EncBinary()
					_ = yym3254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3248 || yy2arr3248 {
				if yysep3248 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3248[2] {
					yym3256 := z.EncBinary()
					_ = yym3256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3248[2] {
					if yyfirst3248 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3248 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					if yysep3248 {
						r.EncodeMapKVSeparator()
					}
					yym3257 := z.EncBinary()
					_ = yym3257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3248 || yy2arr3248 {
				if yysep3248 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3248[3] {
					yym3259 := z.EncBinary()
					_ = yym3259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3248[3] {
					if yyfirst3248 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3248 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					if yysep3248 {
						r.EncodeMapKVSeparator()
					}
					yym3260 := z.EncBinary()
					_ = yym3260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3248 {
				if yyr3248 || yy2arr3248 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3261 := z.DecBinary()
	_ = yym3261
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3262 := r.ReadMapStart()
			if yyl3262 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3262, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3262 := r.ReadArrayStart()
			if yyl3262 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3262, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3263Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3263Slc
	var yyhl3263 bool = l >= 0
	for yyj3263 := 0; ; yyj3263++ {
		if yyhl3263 {
			if yyj3263 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3263 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3263Slc = r.DecodeBytes(yys3263Slc, true, true)
		yys3263 := string(yys3263Slc)
		if !yyhl3263 {
			r.ReadMapKVSeparator()
		}
		switch yys3263 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3263)
		} // end switch yys3263
	} // end for yyj3263
	if !yyhl3263 {
		r.ReadMapEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3268 int
	var yyb3268 bool
	var yyhl3268 bool = l >= 0
	yyj3268++
	if yyhl3268 {
		yyb3268 = yyj3268 > l
	} else {
		yyb3268 = r.CheckBreak()
	}
	if yyb3268 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3268++
	if yyhl3268 {
		yyb3268 = yyj3268 > l
	} else {
		yyb3268 = r.CheckBreak()
	}
	if yyb3268 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3268++
	if yyhl3268 {
		yyb3268 = yyj3268 > l
	} else {
		yyb3268 = r.CheckBreak()
	}
	if yyb3268 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3268++
	if yyhl3268 {
		yyb3268 = yyj3268 > l
	} else {
		yyb3268 = r.CheckBreak()
	}
	if yyb3268 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3268++
		if yyhl3268 {
			yyb3268 = yyj3268 > l
		} else {
			yyb3268 = r.CheckBreak()
		}
		if yyb3268 {
			break
		}
		if yyj3268 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3268-1, "")
	}
	r.ReadArrayEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3273 := z.EncBinary()
		_ = yym3273
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3274 := !z.EncBinary()
			yy2arr3274 := z.EncBasicHandle().StructToArray
			var yyfirst3274 bool
			var yyq3274 [5]bool
			_, _, _, _ = yysep3274, yyfirst3274, yyq3274, yy2arr3274
			const yyr3274 bool = false
			yyq3274[0] = x.Kind != ""
			yyq3274[1] = x.APIVersion != ""
			yyq3274[2] = true
			if yyr3274 || yy2arr3274 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3274 int = 2
				for _, b := range yyq3274 {
					if b {
						yynn3274++
					}
				}
				r.EncodeMapStart(yynn3274)
			}
			if yyr3274 || yy2arr3274 {
				if yyq3274[0] {
					yym3276 := z.EncBinary()
					_ = yym3276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3274[0] {
					yyfirst3274 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3274 {
						r.EncodeMapKVSeparator()
					}
					yym3277 := z.EncBinary()
					_ = yym3277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3274 || yy2arr3274 {
				if yysep3274 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3274[1] {
					yym3279 := z.EncBinary()
					_ = yym3279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3274[1] {
					if yyfirst3274 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3274 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3274 {
						r.EncodeMapKVSeparator()
					}
					yym3280 := z.EncBinary()
					_ = yym3280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3274 || yy2arr3274 {
				if yysep3274 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3274[2] {
					yy3282 := &x.ObjectMeta
					yy3282.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3274[2] {
					if yyfirst3274 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3274 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3274 {
						r.EncodeMapKVSeparator()
					}
					yy3283 := &x.ObjectMeta
					yy3283.CodecEncodeSelf(e)
				}
			}
			if yyr3274 || yy2arr3274 {
				if yysep3274 {
					r.EncodeArrayEntrySeparator()
				}
				yym3285 := z.EncBinary()
				_ = yym3285
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				if yyfirst3274 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3274 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				if yysep3274 {
					r.EncodeMapKVSeparator()
				}
				yym3286 := z.EncBinary()
				_ = yym3286
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3274 || yy2arr3274 {
				if yysep3274 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3288 := z.EncBinary()
					_ = yym3288
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				if yyfirst3274 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3274 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if yysep3274 {
					r.EncodeMapKVSeparator()
				}
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3289 := z.EncBinary()
					_ = yym3289
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3274 {
				if yyr3274 || yy2arr3274 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3290 := z.DecBinary()
	_ = yym3290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3291 := r.ReadMapStart()
			if yyl3291 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3291, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3291 := r.ReadArrayStart()
			if yyl3291 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3291, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3292Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3292Slc
	var yyhl3292 bool = l >= 0
	for yyj3292 := 0; ; yyj3292++ {
		if yyhl3292 {
			if yyj3292 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3292 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3292Slc = r.DecodeBytes(yys3292Slc, true, true)
		yys3292 := string(yys3292Slc)
		if !yyhl3292 {
			r.ReadMapKVSeparator()
		}
		switch yys3292 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3295 := &x.ObjectMeta
				yyv3295.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3297 := &x.Data
				yym3298 := z.DecBinary()
				_ = yym3298
				if false {
				} else {
					*yyv3297 = r.DecodeBytes(*(*[]byte)(yyv3297), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3292)
		} // end switch yys3292
	} // end for yyj3292
	if !yyhl3292 {
		r.ReadMapEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3299 int
	var yyb3299 bool
	var yyhl3299 bool = l >= 0
	yyj3299++
	if yyhl3299 {
		yyb3299 = yyj3299 > l
	} else {
		yyb3299 = r.CheckBreak()
	}
	if yyb3299 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3299++
	if yyhl3299 {
		yyb3299 = yyj3299 > l
	} else {
		yyb3299 = r.CheckBreak()
	}
	if yyb3299 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3299++
	if yyhl3299 {
		yyb3299 = yyj3299 > l
	} else {
		yyb3299 = r.CheckBreak()
	}
	if yyb3299 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3302 := &x.ObjectMeta
		yyv3302.CodecDecodeSelf(d)
	}
	yyj3299++
	if yyhl3299 {
		yyb3299 = yyj3299 > l
	} else {
		yyb3299 = r.CheckBreak()
	}
	if yyb3299 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3299++
	if yyhl3299 {
		yyb3299 = yyj3299 > l
	} else {
		yyb3299 = r.CheckBreak()
	}
	if yyb3299 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3304 := &x.Data
		yym3305 := z.DecBinary()
		_ = yym3305
		if false {
		} else {
			*yyv3304 = r.DecodeBytes(*(*[]byte)(yyv3304), false, false)
		}
	}
	for {
		yyj3299++
		if yyhl3299 {
			yyb3299 = yyj3299 > l
		} else {
			yyb3299 = r.CheckBreak()
		}
		if yyb3299 {
			break
		}
		if yyj3299 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3299-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3306 := z.EncBinary()
		_ = yym3306
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3307 := !z.EncBinary()
			yy2arr3307 := z.EncBasicHandle().StructToArray
			var yyfirst3307 bool
			var yyq3307 [5]bool
			_, _, _, _ = yysep3307, yyfirst3307, yyq3307, yy2arr3307
			const yyr3307 bool = false
			yyq3307[0] = x.Kind != ""
			yyq3307[1] = x.APIVersion != ""
			yyq3307[2] = true
			yyq3307[3] = x.Description != ""
			yyq3307[4] = len(x.Versions) != 0
			if yyr3307 || yy2arr3307 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3307 int = 0
				for _, b := range yyq3307 {
					if b {
						yynn3307++
					}
				}
				r.EncodeMapStart(yynn3307)
			}
			if yyr3307 || yy2arr3307 {
				if yyq3307[0] {
					yym3309 := z.EncBinary()
					_ = yym3309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3307[0] {
					yyfirst3307 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3307 {
						r.EncodeMapKVSeparator()
					}
					yym3310 := z.EncBinary()
					_ = yym3310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3307 || yy2arr3307 {
				if yysep3307 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3307[1] {
					yym3312 := z.EncBinary()
					_ = yym3312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3307[1] {
					if yyfirst3307 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3307 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3307 {
						r.EncodeMapKVSeparator()
					}
					yym3313 := z.EncBinary()
					_ = yym3313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3307 || yy2arr3307 {
				if yysep3307 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3307[2] {
					yy3315 := &x.ObjectMeta
					yy3315.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3307[2] {
					if yyfirst3307 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3307 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3307 {
						r.EncodeMapKVSeparator()
					}
					yy3316 := &x.ObjectMeta
					yy3316.CodecEncodeSelf(e)
				}
			}
			if yyr3307 || yy2arr3307 {
				if yysep3307 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3307[3] {
					yym3318 := z.EncBinary()
					_ = yym3318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3307[3] {
					if yyfirst3307 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3307 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					if yysep3307 {
						r.EncodeMapKVSeparator()
					}
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr3307 || yy2arr3307 {
				if yysep3307 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3307[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym3321 := z.EncBinary()
						_ = yym3321
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3307[4] {
					if yyfirst3307 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3307 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					if yysep3307 {
						r.EncodeMapKVSeparator()
					}
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym3322 := z.EncBinary()
						_ = yym3322
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yysep3307 {
				if yyr3307 || yy2arr3307 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3323 := z.DecBinary()
	_ = yym3323
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3324 := r.ReadMapStart()
			if yyl3324 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3324, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3324 := r.ReadArrayStart()
			if yyl3324 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3324, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3325Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3325Slc
	var yyhl3325 bool = l >= 0
	for yyj3325 := 0; ; yyj3325++ {
		if yyhl3325 {
			if yyj3325 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3325 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3325Slc = r.DecodeBytes(yys3325Slc, true, true)
		yys3325 := string(yys3325Slc)
		if !yyhl3325 {
			r.ReadMapKVSeparator()
		}
		switch yys3325 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3328 := &x.ObjectMeta
				yyv3328.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv3330 := &x.Versions
				yym3331 := z.DecBinary()
				_ = yym3331
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv3330), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3325)
		} // end switch yys3325
	} // end for yyj3325
	if !yyhl3325 {
		r.ReadMapEnd()
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3332 int
	var yyb3332 bool
	var yyhl3332 bool = l >= 0
	yyj3332++
	if yyhl3332 {
		yyb3332 = yyj3332 > l
	} else {
		yyb3332 = r.CheckBreak()
	}
	if yyb3332 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3332++
	if yyhl3332 {
		yyb3332 = yyj3332 > l
	} else {
		yyb3332 = r.CheckBreak()
	}
	if yyb3332 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3332++
	if yyhl3332 {
		yyb3332 = yyj3332 > l
	} else {
		yyb3332 = r.CheckBreak()
	}
	if yyb3332 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3335 := &x.ObjectMeta
		yyv3335.CodecDecodeSelf(d)
	}
	yyj3332++
	if yyhl3332 {
		yyb3332 = yyj3332 > l
	} else {
		yyb3332 = r.CheckBreak()
	}
	if yyb3332 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj3332++
	if yyhl3332 {
		yyb3332 = yyj3332 > l
	} else {
		yyb3332 = r.CheckBreak()
	}
	if yyb3332 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv3337 := &x.Versions
		yym3338 := z.DecBinary()
		_ = yym3338
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv3337), d)
		}
	}
	for {
		yyj3332++
		if yyhl3332 {
			yyb3332 = yyj3332 > l
		} else {
			yyb3332 = r.CheckBreak()
		}
		if yyb3332 {
			break
		}
		if yyj3332 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3332-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3339 := z.EncBinary()
		_ = yym3339
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3340 := !z.EncBinary()
			yy2arr3340 := z.EncBasicHandle().StructToArray
			var yyfirst3340 bool
			var yyq3340 [4]bool
			_, _, _, _ = yysep3340, yyfirst3340, yyq3340, yy2arr3340
			const yyr3340 bool = false
			yyq3340[0] = x.Kind != ""
			yyq3340[1] = x.APIVersion != ""
			yyq3340[2] = true
			if yyr3340 || yy2arr3340 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3340 int = 1
				for _, b := range yyq3340 {
					if b {
						yynn3340++
					}
				}
				r.EncodeMapStart(yynn3340)
			}
			if yyr3340 || yy2arr3340 {
				if yyq3340[0] {
					yym3342 := z.EncBinary()
					_ = yym3342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3340[0] {
					yyfirst3340 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3340 {
						r.EncodeMapKVSeparator()
					}
					yym3343 := z.EncBinary()
					_ = yym3343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				if yysep3340 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3340[1] {
					yym3345 := z.EncBinary()
					_ = yym3345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3340[1] {
					if yyfirst3340 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3340 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3340 {
						r.EncodeMapKVSeparator()
					}
					yym3346 := z.EncBinary()
					_ = yym3346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				if yysep3340 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3340[2] {
					yy3348 := &x.ListMeta
					yy3348.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3340[2] {
					if yyfirst3340 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3340 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3340 {
						r.EncodeMapKVSeparator()
					}
					yy3349 := &x.ListMeta
					yy3349.CodecEncodeSelf(e)
				}
			}
			if yyr3340 || yy2arr3340 {
				if yysep3340 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3351 := z.EncBinary()
					_ = yym3351
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				if yyfirst3340 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3340 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep3340 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3352 := z.EncBinary()
					_ = yym3352
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yysep3340 {
				if yyr3340 || yy2arr3340 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3353 := z.DecBinary()
	_ = yym3353
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3354 := r.ReadMapStart()
			if yyl3354 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3354, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3354 := r.ReadArrayStart()
			if yyl3354 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3354, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3355Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3355Slc
	var yyhl3355 bool = l >= 0
	for yyj3355 := 0; ; yyj3355++ {
		if yyhl3355 {
			if yyj3355 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3355 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3355Slc = r.DecodeBytes(yys3355Slc, true, true)
		yys3355 := string(yys3355Slc)
		if !yyhl3355 {
			r.ReadMapKVSeparator()
		}
		switch yys3355 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv3358 := &x.ListMeta
				yyv3358.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3359 := &x.Items
				yym3360 := z.DecBinary()
				_ = yym3360
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv3359), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3355)
		} // end switch yys3355
	} // end for yyj3355
	if !yyhl3355 {
		r.ReadMapEnd()
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3361 int
	var yyb3361 bool
	var yyhl3361 bool = l >= 0
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv3364 := &x.ListMeta
		yyv3364.CodecDecodeSelf(d)
	}
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3365 := &x.Items
		yym3366 := z.DecBinary()
		_ = yym3366
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv3365), d)
		}
	}
	for {
		yyj3361++
		if yyhl3361 {
			yyb3361 = yyj3361 > l
		} else {
			yyb3361 = r.CheckBreak()
		}
		if yyb3361 {
			break
		}
		if yyj3361 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3361-1, "")
	}
	r.ReadArrayEnd()
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3367 := z.EncBinary()
		_ = yym3367
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3368 := !z.EncBinary()
			yy2arr3368 := z.EncBasicHandle().StructToArray
			var yyfirst3368 bool
			var yyq3368 [2]bool
			_, _, _, _ = yysep3368, yyfirst3368, yyq3368, yy2arr3368
			const yyr3368 bool = false
			yyq3368[0] = x.Name != ""
			yyq3368[1] = x.APIGroup != ""
			if yyr3368 || yy2arr3368 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3368 int = 0
				for _, b := range yyq3368 {
					if b {
						yynn3368++
					}
				}
				r.EncodeMapStart(yynn3368)
			}
			if yyr3368 || yy2arr3368 {
				if yyq3368[0] {
					yym3370 := z.EncBinary()
					_ = yym3370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3368[0] {
					yyfirst3368 = true
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep3368 {
						r.EncodeMapKVSeparator()
					}
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				if yysep3368 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3368[1] {
					yym3373 := z.EncBinary()
					_ = yym3373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3368[1] {
					if yyfirst3368 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3368 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					if yysep3368 {
						r.EncodeMapKVSeparator()
					}
					yym3374 := z.EncBinary()
					_ = yym3374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yysep3368 {
				if yyr3368 || yy2arr3368 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3375 := z.DecBinary()
	_ = yym3375
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3376 := r.ReadMapStart()
			if yyl3376 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3376, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3376 := r.ReadArrayStart()
			if yyl3376 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3376, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3377Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3377Slc
	var yyhl3377 bool = l >= 0
	for yyj3377 := 0; ; yyj3377++ {
		if yyhl3377 {
			if yyj3377 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3377 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3377Slc = r.DecodeBytes(yys3377Slc, true, true)
		yys3377 := string(yys3377Slc)
		if !yyhl3377 {
			r.ReadMapKVSeparator()
		}
		switch yys3377 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3377)
		} // end switch yys3377
	} // end for yyj3377
	if !yyhl3377 {
		r.ReadMapEnd()
	}
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3380 int
	var yyb3380 bool
	var yyhl3380 bool = l >= 0
	yyj3380++
	if yyhl3380 {
		yyb3380 = yyj3380 > l
	} else {
		yyb3380 = r.CheckBreak()
	}
	if yyb3380 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3380++
	if yyhl3380 {
		yyb3380 = yyj3380 > l
	} else {
		yyb3380 = r.CheckBreak()
	}
	if yyb3380 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj3380++
		if yyhl3380 {
			yyb3380 = yyj3380 > l
		} else {
			yyb3380 = r.CheckBreak()
		}
		if yyb3380 {
			break
		}
		if yyj3380 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3380-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3383 := z.EncBinary()
		_ = yym3383
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3384 := !z.EncBinary()
			yy2arr3384 := z.EncBasicHandle().StructToArray
			var yyfirst3384 bool
			var yyq3384 [4]bool
			_, _, _, _ = yysep3384, yyfirst3384, yyq3384, yy2arr3384
			const yyr3384 bool = false
			yyq3384[0] = x.Kind != ""
			yyq3384[1] = x.APIVersion != ""
			yyq3384[2] = true
			yyq3384[3] = len(x.Data) != 0
			if yyr3384 || yy2arr3384 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3384 int = 0
				for _, b := range yyq3384 {
					if b {
						yynn3384++
					}
				}
				r.EncodeMapStart(yynn3384)
			}
			if yyr3384 || yy2arr3384 {
				if yyq3384[0] {
					yym3386 := z.EncBinary()
					_ = yym3386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3384[0] {
					yyfirst3384 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3384 {
						r.EncodeMapKVSeparator()
					}
					yym3387 := z.EncBinary()
					_ = yym3387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				if yysep3384 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3384[1] {
					yym3389 := z.EncBinary()
					_ = yym3389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3384[1] {
					if yyfirst3384 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3384 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3384 {
						r.EncodeMapKVSeparator()
					}
					yym3390 := z.EncBinary()
					_ = yym3390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				if yysep3384 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3384[2] {
					yy3392 := &x.ObjectMeta
					yy3392.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3384[2] {
					if yyfirst3384 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3384 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3384 {
						r.EncodeMapKVSeparator()
					}
					yy3393 := &x.ObjectMeta
					yy3393.CodecEncodeSelf(e)
				}
			}
			if yyr3384 || yy2arr3384 {
				if yysep3384 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3384[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3395 := z.EncBinary()
						_ = yym3395
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3384[3] {
					if yyfirst3384 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3384 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep3384 {
						r.EncodeMapKVSeparator()
					}
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3396 := z.EncBinary()
						_ = yym3396
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yysep3384 {
				if yyr3384 || yy2arr3384 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3397 := z.DecBinary()
	_ = yym3397
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3398 := r.ReadMapStart()
			if yyl3398 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3398, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3398 := r.ReadArrayStart()
			if yyl3398 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3398, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3399Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3399Slc
	var yyhl3399 bool = l >= 0
	for yyj3399 := 0; ; yyj3399++ {
		if yyhl3399 {
			if yyj3399 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3399 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3399Slc = r.DecodeBytes(yys3399Slc, true, true)
		yys3399 := string(yys3399Slc)
		if !yyhl3399 {
			r.ReadMapKVSeparator()
		}
		switch yys3399 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3402 := &x.ObjectMeta
				yyv3402.CodecDecodeSelf(d)
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3403 := &x.Data
				yym3404 := z.DecBinary()
				_ = yym3404
				if false {
				} else {
					*yyv3403 = r.DecodeBytes(*(*[]byte)(yyv3403), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3399)
		} // end switch yys3399
	} // end for yyj3399
	if !yyhl3399 {
		r.ReadMapEnd()
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3405 int
	var yyb3405 bool
	var yyhl3405 bool = l >= 0
	yyj3405++
	if yyhl3405 {
		yyb3405 = yyj3405 > l
	} else {
		yyb3405 = r.CheckBreak()
	}
	if yyb3405 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3405++
	if yyhl3405 {
		yyb3405 = yyj3405 > l
	} else {
		yyb3405 = r.CheckBreak()
	}
	if yyb3405 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3405++
	if yyhl3405 {
		yyb3405 = yyj3405 > l
	} else {
		yyb3405 = r.CheckBreak()
	}
	if yyb3405 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3408 := &x.ObjectMeta
		yyv3408.CodecDecodeSelf(d)
	}
	yyj3405++
	if yyhl3405 {
		yyb3405 = yyj3405 > l
	} else {
		yyb3405 = r.CheckBreak()
	}
	if yyb3405 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3409 := &x.Data
		yym3410 := z.DecBinary()
		_ = yym3410
		if false {
		} else {
			*yyv3409 = r.DecodeBytes(*(*[]byte)(yyv3409), false, false)
		}
	}
	for {
		yyj3405++
		if yyhl3405 {
			yyb3405 = yyj3405 > l
		} else {
			yyb3405 = r.CheckBreak()
		}
		if yyb3405 {
			break
		}
		if yyj3405 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3405-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3411 := !z.EncBinary()
	if yys3411 {
		for yyi3411, yyv3411 := range v {
			if yyi3411 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3412 := &yyv3411
			yy3412.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3411 := range v {
			yy3413 := &yyv3411
			yy3413.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3414 := *v
	yyh3414, yyl3414 := z.DecSliceHelperStart()

	var yyc3414 bool
	_ = yyc3414

	if yyv3414 == nil {
		if yyl3414 <= 0 {
			yyv3414 = make([]ObjectReference, 0)
		} else {
			yyv3414 = make([]ObjectReference, yyl3414)
		}
		yyc3414 = true
	}

	if yyl3414 == 0 {
		if len(yyv3414) != 0 {
			yyv3414 = yyv3414[:0]
			yyc3414 = true
		}
	} else if yyl3414 > 0 {

		yyn3414 := yyl3414
		if yyl3414 > cap(yyv3414) {
			yyv3414 = make([]ObjectReference, yyl3414, yyl3414)
			yyc3414 = true

		} else if yyl3414 != len(yyv3414) {
			yyv3414 = yyv3414[:yyl3414]
			yyc3414 = true
		}
		yyj3414 := 0
		for ; yyj3414 < yyn3414; yyj3414++ {
			if r.TryDecodeAsNil() {
				yyv3414[yyj3414] = ObjectReference{}
			} else {
				yyv3415 := &yyv3414[yyj3414]
				yyv3415.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3414 := 0; !r.CheckBreak(); yyj3414++ {
			if yyj3414 >= len(yyv3414) {
				yyv3414 = append(yyv3414, ObjectReference{}) // var yyz3414 ObjectReference
				yyc3414 = true
			}
			if yyj3414 > 0 {
				yyh3414.Sep(yyj3414)
			}

			if yyj3414 < len(yyv3414) {
				if r.TryDecodeAsNil() {
					yyv3414[yyj3414] = ObjectReference{}
				} else {
					yyv3416 := &yyv3414[yyj3414]
					yyv3416.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3414.End()
	}
	if yyc3414 {
		*v = yyv3414
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3417 := !z.EncBinary()
	if yys3417 {
		for yyi3417, yyv3417 := range v {
			if yyi3417 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3418 := &yyv3417
			yy3418.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3417 := range v {
			yy3419 := &yyv3417
			yy3419.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3420 := *v
	yyh3420, yyl3420 := z.DecSliceHelperStart()

	var yyc3420 bool
	_ = yyc3420

	if yyv3420 == nil {
		if yyl3420 <= 0 {
			yyv3420 = make([]ServiceAccount, 0)
		} else {
			yyv3420 = make([]ServiceAccount, yyl3420)
		}
		yyc3420 = true
	}

	if yyl3420 == 0 {
		if len(yyv3420) != 0 {
			yyv3420 = yyv3420[:0]
			yyc3420 = true
		}
	} else if yyl3420 > 0 {

		yyn3420 := yyl3420
		if yyl3420 > cap(yyv3420) {
			yyv3420 = make([]ServiceAccount, yyl3420, yyl3420)
			yyc3420 = true

		} else if yyl3420 != len(yyv3420) {
			yyv3420 = yyv3420[:yyl3420]
			yyc3420 = true
		}
		yyj3420 := 0
		for ; yyj3420 < yyn3420; yyj3420++ {
			if r.TryDecodeAsNil() {
				yyv3420[yyj3420] = ServiceAccount{}
			} else {
				yyv3421 := &yyv3420[yyj3420]
				yyv3421.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3420 := 0; !r.CheckBreak(); yyj3420++ {
			if yyj3420 >= len(yyv3420) {
				yyv3420 = append(yyv3420, ServiceAccount{}) // var yyz3420 ServiceAccount
				yyc3420 = true
			}
			if yyj3420 > 0 {
				yyh3420.Sep(yyj3420)
			}

			if yyj3420 < len(yyv3420) {
				if r.TryDecodeAsNil() {
					yyv3420[yyj3420] = ServiceAccount{}
				} else {
					yyv3422 := &yyv3420[yyj3420]
					yyv3422.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3420.End()
	}
	if yyc3420 {
		*v = yyv3420
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3423 := !z.EncBinary()
	if yys3423 {
		for yyi3423, yyv3423 := range v {
			if yyi3423 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3424 := &yyv3423
			yy3424.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3423 := range v {
			yy3425 := &yyv3423
			yy3425.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3426 := *v
	yyh3426, yyl3426 := z.DecSliceHelperStart()

	var yyc3426 bool
	_ = yyc3426

	if yyv3426 == nil {
		if yyl3426 <= 0 {
			yyv3426 = make([]EndpointSubset, 0)
		} else {
			yyv3426 = make([]EndpointSubset, yyl3426)
		}
		yyc3426 = true
	}

	if yyl3426 == 0 {
		if len(yyv3426) != 0 {
			yyv3426 = yyv3426[:0]
			yyc3426 = true
		}
	} else if yyl3426 > 0 {

		yyn3426 := yyl3426
		if yyl3426 > cap(yyv3426) {
			yyv3426 = make([]EndpointSubset, yyl3426, yyl3426)
			yyc3426 = true

		} else if yyl3426 != len(yyv3426) {
			yyv3426 = yyv3426[:yyl3426]
			yyc3426 = true
		}
		yyj3426 := 0
		for ; yyj3426 < yyn3426; yyj3426++ {
			if r.TryDecodeAsNil() {
				yyv3426[yyj3426] = EndpointSubset{}
			} else {
				yyv3427 := &yyv3426[yyj3426]
				yyv3427.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3426 := 0; !r.CheckBreak(); yyj3426++ {
			if yyj3426 >= len(yyv3426) {
				yyv3426 = append(yyv3426, EndpointSubset{}) // var yyz3426 EndpointSubset
				yyc3426 = true
			}
			if yyj3426 > 0 {
				yyh3426.Sep(yyj3426)
			}

			if yyj3426 < len(yyv3426) {
				if r.TryDecodeAsNil() {
					yyv3426[yyj3426] = EndpointSubset{}
				} else {
					yyv3428 := &yyv3426[yyj3426]
					yyv3428.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3426.End()
	}
	if yyc3426 {
		*v = yyv3426
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3429 := !z.EncBinary()
	if yys3429 {
		for yyi3429, yyv3429 := range v {
			if yyi3429 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3430 := &yyv3429
			yy3430.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3429 := range v {
			yy3431 := &yyv3429
			yy3431.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3432 := *v
	yyh3432, yyl3432 := z.DecSliceHelperStart()

	var yyc3432 bool
	_ = yyc3432

	if yyv3432 == nil {
		if yyl3432 <= 0 {
			yyv3432 = make([]NodeCondition, 0)
		} else {
			yyv3432 = make([]NodeCondition, yyl3432)
		}
		yyc3432 = true
	}

	if yyl3432 == 0 {
		if len(yyv3432) != 0 {
			yyv3432 = yyv3432[:0]
			yyc3432 = true
		}
	} else if yyl3432 > 0 {

		yyn3432 := yyl3432
		if yyl3432 > cap(yyv3432) {
			yyv3432 = make([]NodeCondition, yyl3432, yyl3432)
			yyc3432 = true

		} else if yyl3432 != len(yyv3432) {
			yyv3432 = yyv3432[:yyl3432]
			yyc3432 = true
		}
		yyj3432 := 0
		for ; yyj3432 < yyn3432; yyj3432++ {
			if r.TryDecodeAsNil() {
				yyv3432[yyj3432] = NodeCondition{}
			} else {
				yyv3433 := &yyv3432[yyj3432]
				yyv3433.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3432 := 0; !r.CheckBreak(); yyj3432++ {
			if yyj3432 >= len(yyv3432) {
				yyv3432 = append(yyv3432, NodeCondition{}) // var yyz3432 NodeCondition
				yyc3432 = true
			}
			if yyj3432 > 0 {
				yyh3432.Sep(yyj3432)
			}

			if yyj3432 < len(yyv3432) {
				if r.TryDecodeAsNil() {
					yyv3432[yyj3432] = NodeCondition{}
				} else {
					yyv3434 := &yyv3432[yyj3432]
					yyv3434.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3432.End()
	}
	if yyc3432 {
		*v = yyv3432
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3435 := !z.EncBinary()
	if yys3435 {
		for yyi3435, yyv3435 := range v {
			if yyi3435 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yyv3435.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3435 := range v {
			yyv3435.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3436 := *v
	yyh3436, yyl3436 := z.DecSliceHelperStart()

	var yyc3436 bool
	_ = yyc3436

	if yyv3436 == nil {
		if yyl3436 <= 0 {
			yyv3436 = make([]FinalizerName, 0)
		} else {
			yyv3436 = make([]FinalizerName, yyl3436)
		}
		yyc3436 = true
	}

	if yyl3436 == 0 {
		if len(yyv3436) != 0 {
			yyv3436 = yyv3436[:0]
			yyc3436 = true
		}
	} else if yyl3436 > 0 {

		yyn3436 := yyl3436
		if yyl3436 > cap(yyv3436) {

			yyv23436 := yyv3436
			yyv3436 = make([]FinalizerName, yyl3436, yyl3436)
			if len(yyv3436) > 0 {
				copy(yyv3436, yyv23436[:cap(yyv23436)])
			}
			yyc3436 = true

		} else if yyl3436 != len(yyv3436) {
			yyv3436 = yyv3436[:yyl3436]
			yyc3436 = true
		}
		yyj3436 := 0
		for ; yyj3436 < yyn3436; yyj3436++ {
			if r.TryDecodeAsNil() {
				yyv3436[yyj3436] = ""
			} else {
				yyv3436[yyj3436] = FinalizerName(r.DecodeString())
			}

		}

	} else {
		for yyj3436 := 0; !r.CheckBreak(); yyj3436++ {
			if yyj3436 >= len(yyv3436) {
				yyv3436 = append(yyv3436, "") // var yyz3436 FinalizerName
				yyc3436 = true
			}
			if yyj3436 > 0 {
				yyh3436.Sep(yyj3436)
			}

			if yyj3436 < len(yyv3436) {
				if r.TryDecodeAsNil() {
					yyv3436[yyj3436] = ""
				} else {
					yyv3436[yyj3436] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3436.End()
	}
	if yyc3436 {
		*v = yyv3436
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3439 := !z.EncBinary()
	if yys3439 {
		for yyi3439, yyv3439 := range v {
			if yyi3439 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yyv3439.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3439 := range v {
			yyv3439.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3440 := *v
	yyh3440, yyl3440 := z.DecSliceHelperStart()

	var yyc3440 bool
	_ = yyc3440

	if yyv3440 == nil {
		if yyl3440 <= 0 {
			yyv3440 = make([]PersistentVolumeAccessMode, 0)
		} else {
			yyv3440 = make([]PersistentVolumeAccessMode, yyl3440)
		}
		yyc3440 = true
	}

	if yyl3440 == 0 {
		if len(yyv3440) != 0 {
			yyv3440 = yyv3440[:0]
			yyc3440 = true
		}
	} else if yyl3440 > 0 {

		yyn3440 := yyl3440
		if yyl3440 > cap(yyv3440) {

			yyv23440 := yyv3440
			yyv3440 = make([]PersistentVolumeAccessMode, yyl3440, yyl3440)
			if len(yyv3440) > 0 {
				copy(yyv3440, yyv23440[:cap(yyv23440)])
			}
			yyc3440 = true

		} else if yyl3440 != len(yyv3440) {
			yyv3440 = yyv3440[:yyl3440]
			yyc3440 = true
		}
		yyj3440 := 0
		for ; yyj3440 < yyn3440; yyj3440++ {
			if r.TryDecodeAsNil() {
				yyv3440[yyj3440] = ""
			} else {
				yyv3440[yyj3440] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}

	} else {
		for yyj3440 := 0; !r.CheckBreak(); yyj3440++ {
			if yyj3440 >= len(yyv3440) {
				yyv3440 = append(yyv3440, "") // var yyz3440 PersistentVolumeAccessMode
				yyc3440 = true
			}
			if yyj3440 > 0 {
				yyh3440.Sep(yyj3440)
			}

			if yyj3440 < len(yyv3440) {
				if r.TryDecodeAsNil() {
					yyv3440[yyj3440] = ""
				} else {
					yyv3440[yyj3440] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3440.End()
	}
	if yyc3440 {
		*v = yyv3440
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3443 := !z.EncBinary()
	if yys3443 {
		for yyi3443, yyv3443 := range v {
			if yyi3443 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3444 := &yyv3443
			yy3444.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3443 := range v {
			yy3445 := &yyv3443
			yy3445.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3446 := *v
	yyh3446, yyl3446 := z.DecSliceHelperStart()

	var yyc3446 bool
	_ = yyc3446

	if yyv3446 == nil {
		if yyl3446 <= 0 {
			yyv3446 = make([]Container, 0)
		} else {
			yyv3446 = make([]Container, yyl3446)
		}
		yyc3446 = true
	}

	if yyl3446 == 0 {
		if len(yyv3446) != 0 {
			yyv3446 = yyv3446[:0]
			yyc3446 = true
		}
	} else if yyl3446 > 0 {

		yyn3446 := yyl3446
		if yyl3446 > cap(yyv3446) {
			yyv3446 = make([]Container, yyl3446, yyl3446)
			yyc3446 = true

		} else if yyl3446 != len(yyv3446) {
			yyv3446 = yyv3446[:yyl3446]
			yyc3446 = true
		}
		yyj3446 := 0
		for ; yyj3446 < yyn3446; yyj3446++ {
			if r.TryDecodeAsNil() {
				yyv3446[yyj3446] = Container{}
			} else {
				yyv3447 := &yyv3446[yyj3446]
				yyv3447.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3446 := 0; !r.CheckBreak(); yyj3446++ {
			if yyj3446 >= len(yyv3446) {
				yyv3446 = append(yyv3446, Container{}) // var yyz3446 Container
				yyc3446 = true
			}
			if yyj3446 > 0 {
				yyh3446.Sep(yyj3446)
			}

			if yyj3446 < len(yyv3446) {
				if r.TryDecodeAsNil() {
					yyv3446[yyj3446] = Container{}
				} else {
					yyv3448 := &yyv3446[yyj3446]
					yyv3448.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3446.End()
	}
	if yyc3446 {
		*v = yyv3446
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3449 := !z.EncBinary()
	if yys3449 {
		for yyi3449, yyv3449 := range v {
			if yyi3449 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3450 := &yyv3449
			yy3450.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3449 := range v {
			yy3451 := &yyv3449
			yy3451.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3452 := *v
	yyh3452, yyl3452 := z.DecSliceHelperStart()

	var yyc3452 bool
	_ = yyc3452

	if yyv3452 == nil {
		if yyl3452 <= 0 {
			yyv3452 = make([]ContainerStatus, 0)
		} else {
			yyv3452 = make([]ContainerStatus, yyl3452)
		}
		yyc3452 = true
	}

	if yyl3452 == 0 {
		if len(yyv3452) != 0 {
			yyv3452 = yyv3452[:0]
			yyc3452 = true
		}
	} else if yyl3452 > 0 {

		yyn3452 := yyl3452
		if yyl3452 > cap(yyv3452) {
			yyv3452 = make([]ContainerStatus, yyl3452, yyl3452)
			yyc3452 = true

		} else if yyl3452 != len(yyv3452) {
			yyv3452 = yyv3452[:yyl3452]
			yyc3452 = true
		}
		yyj3452 := 0
		for ; yyj3452 < yyn3452; yyj3452++ {
			if r.TryDecodeAsNil() {
				yyv3452[yyj3452] = ContainerStatus{}
			} else {
				yyv3453 := &yyv3452[yyj3452]
				yyv3453.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3452 := 0; !r.CheckBreak(); yyj3452++ {
			if yyj3452 >= len(yyv3452) {
				yyv3452 = append(yyv3452, ContainerStatus{}) // var yyz3452 ContainerStatus
				yyc3452 = true
			}
			if yyj3452 > 0 {
				yyh3452.Sep(yyj3452)
			}

			if yyj3452 < len(yyv3452) {
				if r.TryDecodeAsNil() {
					yyv3452[yyj3452] = ContainerStatus{}
				} else {
					yyv3454 := &yyv3452[yyj3452]
					yyv3454.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3452.End()
	}
	if yyc3452 {
		*v = yyv3452
	}

}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3455 := !z.EncBinary()
	if yys3455 {
		for yyi3455, yyv3455 := range v {
			if yyi3455 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3456 := &yyv3455
			yy3456.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3455 := range v {
			yy3457 := &yyv3455
			yy3457.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3458 := *v
	yyh3458, yyl3458 := z.DecSliceHelperStart()

	var yyc3458 bool
	_ = yyc3458

	if yyv3458 == nil {
		if yyl3458 <= 0 {
			yyv3458 = make([]ThirdPartyResource, 0)
		} else {
			yyv3458 = make([]ThirdPartyResource, yyl3458)
		}
		yyc3458 = true
	}

	if yyl3458 == 0 {
		if len(yyv3458) != 0 {
			yyv3458 = yyv3458[:0]
			yyc3458 = true
		}
	} else if yyl3458 > 0 {

		yyn3458 := yyl3458
		if yyl3458 > cap(yyv3458) {
			yyv3458 = make([]ThirdPartyResource, yyl3458, yyl3458)
			yyc3458 = true

		} else if yyl3458 != len(yyv3458) {
			yyv3458 = yyv3458[:yyl3458]
			yyc3458 = true
		}
		yyj3458 := 0
		for ; yyj3458 < yyn3458; yyj3458++ {
			if r.TryDecodeAsNil() {
				yyv3458[yyj3458] = ThirdPartyResource{}
			} else {
				yyv3459 := &yyv3458[yyj3458]
				yyv3459.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3458 := 0; !r.CheckBreak(); yyj3458++ {
			if yyj3458 >= len(yyv3458) {
				yyv3458 = append(yyv3458, ThirdPartyResource{}) // var yyz3458 ThirdPartyResource
				yyc3458 = true
			}
			if yyj3458 > 0 {
				yyh3458.Sep(yyj3458)
			}

			if yyj3458 < len(yyv3458) {
				if r.TryDecodeAsNil() {
					yyv3458[yyj3458] = ThirdPartyResource{}
				} else {
					yyv3460 := &yyv3458[yyj3458]
					yyv3460.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3458.End()
	}
	if yyc3458 {
		*v = yyv3458
	}

}

func (x codecSelfer1234) encSliceStatusCause(v []StatusCause, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3461 := !z.EncBinary()
	if yys3461 {
		for yyi3461, yyv3461 := range v {
			if yyi3461 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3462 := &yyv3461
			yy3462.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3461 := range v {
			yy3463 := &yyv3461
			yy3463.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceStatusCause(v *[]StatusCause, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3464 := *v
	yyh3464, yyl3464 := z.DecSliceHelperStart()

	var yyc3464 bool
	_ = yyc3464

	if yyv3464 == nil {
		if yyl3464 <= 0 {
			yyv3464 = make([]StatusCause, 0)
		} else {
			yyv3464 = make([]StatusCause, yyl3464)
		}
		yyc3464 = true
	}

	if yyl3464 == 0 {
		if len(yyv3464) != 0 {
			yyv3464 = yyv3464[:0]
			yyc3464 = true
		}
	} else if yyl3464 > 0 {

		yyn3464 := yyl3464
		if yyl3464 > cap(yyv3464) {
			yyv3464 = make([]StatusCause, yyl3464, yyl3464)
			yyc3464 = true

		} else if yyl3464 != len(yyv3464) {
			yyv3464 = yyv3464[:yyl3464]
			yyc3464 = true
		}
		yyj3464 := 0
		for ; yyj3464 < yyn3464; yyj3464++ {
			if r.TryDecodeAsNil() {
				yyv3464[yyj3464] = StatusCause{}
			} else {
				yyv3465 := &yyv3464[yyj3464]
				yyv3465.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3464 := 0; !r.CheckBreak(); yyj3464++ {
			if yyj3464 >= len(yyv3464) {
				yyv3464 = append(yyv3464, StatusCause{}) // var yyz3464 StatusCause
				yyc3464 = true
			}
			if yyj3464 > 0 {
				yyh3464.Sep(yyj3464)
			}

			if yyj3464 < len(yyv3464) {
				if r.TryDecodeAsNil() {
					yyv3464[yyj3464] = StatusCause{}
				} else {
					yyv3466 := &yyv3464[yyj3464]
					yyv3466.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3464.End()
	}
	if yyc3464 {
		*v = yyv3464
	}

}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3467 := !z.EncBinary()
	if yys3467 {
		for yyi3467, yyv3467 := range v {
			if yyi3467 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3468 := &yyv3467
			yym3469 := z.EncBinary()
			_ = yym3469
			if false {
			} else if z.HasExtensions() && z.EncExt(yy3468) {
			} else if !yym3469 && z.IsJSONHandle() {
				z.EncJSONMarshal(yy3468)
			} else {
				z.EncFallback(yy3468)
			}
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3467 := range v {
			yy3470 := &yyv3467
			yym3471 := z.EncBinary()
			_ = yym3471
			if false {
			} else if z.HasExtensions() && z.EncExt(yy3470) {
			} else if !yym3471 && z.IsJSONHandle() {
				z.EncJSONMarshal(yy3470)
			} else {
				z.EncFallback(yy3470)
			}
		}
	}
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3472 := *v
	yyh3472, yyl3472 := z.DecSliceHelperStart()

	var yyc3472 bool
	_ = yyc3472

	if yyv3472 == nil {
		if yyl3472 <= 0 {
			yyv3472 = make([]pkg5_runtime.RawExtension, 0)
		} else {
			yyv3472 = make([]pkg5_runtime.RawExtension, yyl3472)
		}
		yyc3472 = true
	}

	if yyl3472 == 0 {
		if len(yyv3472) != 0 {
			yyv3472 = yyv3472[:0]
			yyc3472 = true
		}
	} else if yyl3472 > 0 {

		yyn3472 := yyl3472
		if yyl3472 > cap(yyv3472) {
			yyv3472 = make([]pkg5_runtime.RawExtension, yyl3472, yyl3472)
			yyc3472 = true

		} else if yyl3472 != len(yyv3472) {
			yyv3472 = yyv3472[:yyl3472]
			yyc3472 = true
		}
		yyj3472 := 0
		for ; yyj3472 < yyn3472; yyj3472++ {
			if r.TryDecodeAsNil() {
				yyv3472[yyj3472] = pkg5_runtime.RawExtension{}
			} else {
				yyv3473 := &yyv3472[yyj3472]
				yym3474 := z.DecBinary()
				_ = yym3474
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3473) {
				} else if !yym3474 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3473)
				} else {
					z.DecFallback(yyv3473, false)
				}
			}

		}

	} else {
		for yyj3472 := 0; !r.CheckBreak(); yyj3472++ {
			if yyj3472 >= len(yyv3472) {
				yyv3472 = append(yyv3472, pkg5_runtime.RawExtension{}) // var yyz3472 pkg5_runtime.RawExtension
				yyc3472 = true
			}
			if yyj3472 > 0 {
				yyh3472.Sep(yyj3472)
			}

			if yyj3472 < len(yyv3472) {
				if r.TryDecodeAsNil() {
					yyv3472[yyj3472] = pkg5_runtime.RawExtension{}
				} else {
					yyv3475 := &yyv3472[yyj3472]
					yym3476 := z.DecBinary()
					_ = yym3476
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3475) {
					} else if !yym3476 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3475)
					} else {
						z.DecFallback(yyv3475, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3472.End()
	}
	if yyc3472 {
		*v = yyv3472
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3477 := !z.EncBinary()
	if yys3477 {
		for yyi3477, yyv3477 := range v {
			if yyi3477 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3478 := &yyv3477
			yy3478.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3477 := range v {
			yy3479 := &yyv3477
			yy3479.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3480 := *v
	yyh3480, yyl3480 := z.DecSliceHelperStart()

	var yyc3480 bool
	_ = yyc3480

	if yyv3480 == nil {
		if yyl3480 <= 0 {
			yyv3480 = make([]ResourceQuota, 0)
		} else {
			yyv3480 = make([]ResourceQuota, yyl3480)
		}
		yyc3480 = true
	}

	if yyl3480 == 0 {
		if len(yyv3480) != 0 {
			yyv3480 = yyv3480[:0]
			yyc3480 = true
		}
	} else if yyl3480 > 0 {

		yyn3480 := yyl3480
		if yyl3480 > cap(yyv3480) {
			yyv3480 = make([]ResourceQuota, yyl3480, yyl3480)
			yyc3480 = true

		} else if yyl3480 != len(yyv3480) {
			yyv3480 = yyv3480[:yyl3480]
			yyc3480 = true
		}
		yyj3480 := 0
		for ; yyj3480 < yyn3480; yyj3480++ {
			if r.TryDecodeAsNil() {
				yyv3480[yyj3480] = ResourceQuota{}
			} else {
				yyv3481 := &yyv3480[yyj3480]
				yyv3481.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3480 := 0; !r.CheckBreak(); yyj3480++ {
			if yyj3480 >= len(yyv3480) {
				yyv3480 = append(yyv3480, ResourceQuota{}) // var yyz3480 ResourceQuota
				yyc3480 = true
			}
			if yyj3480 > 0 {
				yyh3480.Sep(yyj3480)
			}

			if yyj3480 < len(yyv3480) {
				if r.TryDecodeAsNil() {
					yyv3480[yyj3480] = ResourceQuota{}
				} else {
					yyv3482 := &yyv3480[yyj3480]
					yyv3482.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3480.End()
	}
	if yyc3480 {
		*v = yyv3480
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3483 := !z.EncBinary()
	if yys3483 {
		for yyi3483, yyv3483 := range v {
			if yyi3483 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3484 := &yyv3483
			yy3484.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3483 := range v {
			yy3485 := &yyv3483
			yy3485.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3486 := *v
	yyh3486, yyl3486 := z.DecSliceHelperStart()

	var yyc3486 bool
	_ = yyc3486

	if yyv3486 == nil {
		if yyl3486 <= 0 {
			yyv3486 = make([]PersistentVolume, 0)
		} else {
			yyv3486 = make([]PersistentVolume, yyl3486)
		}
		yyc3486 = true
	}

	if yyl3486 == 0 {
		if len(yyv3486) != 0 {
			yyv3486 = yyv3486[:0]
			yyc3486 = true
		}
	} else if yyl3486 > 0 {

		yyn3486 := yyl3486
		if yyl3486 > cap(yyv3486) {
			yyv3486 = make([]PersistentVolume, yyl3486, yyl3486)
			yyc3486 = true

		} else if yyl3486 != len(yyv3486) {
			yyv3486 = yyv3486[:yyl3486]
			yyc3486 = true
		}
		yyj3486 := 0
		for ; yyj3486 < yyn3486; yyj3486++ {
			if r.TryDecodeAsNil() {
				yyv3486[yyj3486] = PersistentVolume{}
			} else {
				yyv3487 := &yyv3486[yyj3486]
				yyv3487.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3486 := 0; !r.CheckBreak(); yyj3486++ {
			if yyj3486 >= len(yyv3486) {
				yyv3486 = append(yyv3486, PersistentVolume{}) // var yyz3486 PersistentVolume
				yyc3486 = true
			}
			if yyj3486 > 0 {
				yyh3486.Sep(yyj3486)
			}

			if yyj3486 < len(yyv3486) {
				if r.TryDecodeAsNil() {
					yyv3486[yyj3486] = PersistentVolume{}
				} else {
					yyv3488 := &yyv3486[yyj3486]
					yyv3488.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3486.End()
	}
	if yyc3486 {
		*v = yyv3486
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3489 := !z.EncBinary()
	if yys3489 {
		for yyi3489, yyv3489 := range v {
			if yyi3489 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3490 := &yyv3489
			yy3490.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3489 := range v {
			yy3491 := &yyv3489
			yy3491.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3492 := *v
	yyh3492, yyl3492 := z.DecSliceHelperStart()

	var yyc3492 bool
	_ = yyc3492

	if yyv3492 == nil {
		if yyl3492 <= 0 {
			yyv3492 = make([]ServicePort, 0)
		} else {
			yyv3492 = make([]ServicePort, yyl3492)
		}
		yyc3492 = true
	}

	if yyl3492 == 0 {
		if len(yyv3492) != 0 {
			yyv3492 = yyv3492[:0]
			yyc3492 = true
		}
	} else if yyl3492 > 0 {

		yyn3492 := yyl3492
		if yyl3492 > cap(yyv3492) {
			yyv3492 = make([]ServicePort, yyl3492, yyl3492)
			yyc3492 = true

		} else if yyl3492 != len(yyv3492) {
			yyv3492 = yyv3492[:yyl3492]
			yyc3492 = true
		}
		yyj3492 := 0
		for ; yyj3492 < yyn3492; yyj3492++ {
			if r.TryDecodeAsNil() {
				yyv3492[yyj3492] = ServicePort{}
			} else {
				yyv3493 := &yyv3492[yyj3492]
				yyv3493.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3492 := 0; !r.CheckBreak(); yyj3492++ {
			if yyj3492 >= len(yyv3492) {
				yyv3492 = append(yyv3492, ServicePort{}) // var yyz3492 ServicePort
				yyc3492 = true
			}
			if yyj3492 > 0 {
				yyh3492.Sep(yyj3492)
			}

			if yyj3492 < len(yyv3492) {
				if r.TryDecodeAsNil() {
					yyv3492[yyj3492] = ServicePort{}
				} else {
					yyv3494 := &yyv3492[yyj3492]
					yyv3494.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3492.End()
	}
	if yyc3492 {
		*v = yyv3492
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3495 := !z.EncBinary()
	if yys3495 {
		for yyi3495, yyv3495 := range v {
			if yyi3495 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3496 := &yyv3495
			yy3496.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3495 := range v {
			yy3497 := &yyv3495
			yy3497.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3498 := *v
	yyh3498, yyl3498 := z.DecSliceHelperStart()

	var yyc3498 bool
	_ = yyc3498

	if yyv3498 == nil {
		if yyl3498 <= 0 {
			yyv3498 = make([]PodTemplate, 0)
		} else {
			yyv3498 = make([]PodTemplate, yyl3498)
		}
		yyc3498 = true
	}

	if yyl3498 == 0 {
		if len(yyv3498) != 0 {
			yyv3498 = yyv3498[:0]
			yyc3498 = true
		}
	} else if yyl3498 > 0 {

		yyn3498 := yyl3498
		if yyl3498 > cap(yyv3498) {
			yyv3498 = make([]PodTemplate, yyl3498, yyl3498)
			yyc3498 = true

		} else if yyl3498 != len(yyv3498) {
			yyv3498 = yyv3498[:yyl3498]
			yyc3498 = true
		}
		yyj3498 := 0
		for ; yyj3498 < yyn3498; yyj3498++ {
			if r.TryDecodeAsNil() {
				yyv3498[yyj3498] = PodTemplate{}
			} else {
				yyv3499 := &yyv3498[yyj3498]
				yyv3499.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3498 := 0; !r.CheckBreak(); yyj3498++ {
			if yyj3498 >= len(yyv3498) {
				yyv3498 = append(yyv3498, PodTemplate{}) // var yyz3498 PodTemplate
				yyc3498 = true
			}
			if yyj3498 > 0 {
				yyh3498.Sep(yyj3498)
			}

			if yyj3498 < len(yyv3498) {
				if r.TryDecodeAsNil() {
					yyv3498[yyj3498] = PodTemplate{}
				} else {
					yyv3500 := &yyv3498[yyj3498]
					yyv3500.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3498.End()
	}
	if yyc3498 {
		*v = yyv3498
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3501 := !z.EncBinary()
	if yys3501 {
		for yyi3501, yyv3501 := range v {
			if yyi3501 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3502 := &yyv3501
			yy3502.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3501 := range v {
			yy3503 := &yyv3501
			yy3503.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3504 := *v
	yyh3504, yyl3504 := z.DecSliceHelperStart()

	var yyc3504 bool
	_ = yyc3504

	if yyv3504 == nil {
		if yyl3504 <= 0 {
			yyv3504 = make([]ReplicationController, 0)
		} else {
			yyv3504 = make([]ReplicationController, yyl3504)
		}
		yyc3504 = true
	}

	if yyl3504 == 0 {
		if len(yyv3504) != 0 {
			yyv3504 = yyv3504[:0]
			yyc3504 = true
		}
	} else if yyl3504 > 0 {

		yyn3504 := yyl3504
		if yyl3504 > cap(yyv3504) {
			yyv3504 = make([]ReplicationController, yyl3504, yyl3504)
			yyc3504 = true

		} else if yyl3504 != len(yyv3504) {
			yyv3504 = yyv3504[:yyl3504]
			yyc3504 = true
		}
		yyj3504 := 0
		for ; yyj3504 < yyn3504; yyj3504++ {
			if r.TryDecodeAsNil() {
				yyv3504[yyj3504] = ReplicationController{}
			} else {
				yyv3505 := &yyv3504[yyj3504]
				yyv3505.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3504 := 0; !r.CheckBreak(); yyj3504++ {
			if yyj3504 >= len(yyv3504) {
				yyv3504 = append(yyv3504, ReplicationController{}) // var yyz3504 ReplicationController
				yyc3504 = true
			}
			if yyj3504 > 0 {
				yyh3504.Sep(yyj3504)
			}

			if yyj3504 < len(yyv3504) {
				if r.TryDecodeAsNil() {
					yyv3504[yyj3504] = ReplicationController{}
				} else {
					yyv3506 := &yyv3504[yyj3504]
					yyv3506.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3504.End()
	}
	if yyc3504 {
		*v = yyv3504
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3507 := !z.EncBinary()
	if yys3507 {
		for yyi3507, yyv3507 := range v {
			if yyi3507 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3508 := &yyv3507
			yy3508.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3507 := range v {
			yy3509 := &yyv3507
			yy3509.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3510 := *v
	yyh3510, yyl3510 := z.DecSliceHelperStart()

	var yyc3510 bool
	_ = yyc3510

	if yyv3510 == nil {
		if yyl3510 <= 0 {
			yyv3510 = make([]NodeAddress, 0)
		} else {
			yyv3510 = make([]NodeAddress, yyl3510)
		}
		yyc3510 = true
	}

	if yyl3510 == 0 {
		if len(yyv3510) != 0 {
			yyv3510 = yyv3510[:0]
			yyc3510 = true
		}
	} else if yyl3510 > 0 {

		yyn3510 := yyl3510
		if yyl3510 > cap(yyv3510) {
			yyv3510 = make([]NodeAddress, yyl3510, yyl3510)
			yyc3510 = true

		} else if yyl3510 != len(yyv3510) {
			yyv3510 = yyv3510[:yyl3510]
			yyc3510 = true
		}
		yyj3510 := 0
		for ; yyj3510 < yyn3510; yyj3510++ {
			if r.TryDecodeAsNil() {
				yyv3510[yyj3510] = NodeAddress{}
			} else {
				yyv3511 := &yyv3510[yyj3510]
				yyv3511.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3510 := 0; !r.CheckBreak(); yyj3510++ {
			if yyj3510 >= len(yyv3510) {
				yyv3510 = append(yyv3510, NodeAddress{}) // var yyz3510 NodeAddress
				yyc3510 = true
			}
			if yyj3510 > 0 {
				yyh3510.Sep(yyj3510)
			}

			if yyj3510 < len(yyv3510) {
				if r.TryDecodeAsNil() {
					yyv3510[yyj3510] = NodeAddress{}
				} else {
					yyv3512 := &yyv3510[yyj3510]
					yyv3512.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3510.End()
	}
	if yyc3510 {
		*v = yyv3510
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3513 := !z.EncBinary()
	if yys3513 {
		for yyi3513, yyv3513 := range v {
			if yyi3513 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3514 := &yyv3513
			yy3514.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3513 := range v {
			yy3515 := &yyv3513
			yy3515.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3516 := *v
	yyh3516, yyl3516 := z.DecSliceHelperStart()

	var yyc3516 bool
	_ = yyc3516

	if yyv3516 == nil {
		if yyl3516 <= 0 {
			yyv3516 = make([]ComponentCondition, 0)
		} else {
			yyv3516 = make([]ComponentCondition, yyl3516)
		}
		yyc3516 = true
	}

	if yyl3516 == 0 {
		if len(yyv3516) != 0 {
			yyv3516 = yyv3516[:0]
			yyc3516 = true
		}
	} else if yyl3516 > 0 {

		yyn3516 := yyl3516
		if yyl3516 > cap(yyv3516) {
			yyv3516 = make([]ComponentCondition, yyl3516, yyl3516)
			yyc3516 = true

		} else if yyl3516 != len(yyv3516) {
			yyv3516 = yyv3516[:yyl3516]
			yyc3516 = true
		}
		yyj3516 := 0
		for ; yyj3516 < yyn3516; yyj3516++ {
			if r.TryDecodeAsNil() {
				yyv3516[yyj3516] = ComponentCondition{}
			} else {
				yyv3517 := &yyv3516[yyj3516]
				yyv3517.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3516 := 0; !r.CheckBreak(); yyj3516++ {
			if yyj3516 >= len(yyv3516) {
				yyv3516 = append(yyv3516, ComponentCondition{}) // var yyz3516 ComponentCondition
				yyc3516 = true
			}
			if yyj3516 > 0 {
				yyh3516.Sep(yyj3516)
			}

			if yyj3516 < len(yyv3516) {
				if r.TryDecodeAsNil() {
					yyv3516[yyj3516] = ComponentCondition{}
				} else {
					yyv3518 := &yyv3516[yyj3516]
					yyv3518.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3516.End()
	}
	if yyc3516 {
		*v = yyv3516
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3519 := !z.EncBinary()
	if yys3519 {
		for yyi3519, yyv3519 := range v {
			if yyi3519 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3520 := &yyv3519
			yy3520.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3519 := range v {
			yy3521 := &yyv3519
			yy3521.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3522 := *v
	yyh3522, yyl3522 := z.DecSliceHelperStart()

	var yyc3522 bool
	_ = yyc3522

	if yyv3522 == nil {
		if yyl3522 <= 0 {
			yyv3522 = make([]ComponentStatus, 0)
		} else {
			yyv3522 = make([]ComponentStatus, yyl3522)
		}
		yyc3522 = true
	}

	if yyl3522 == 0 {
		if len(yyv3522) != 0 {
			yyv3522 = yyv3522[:0]
			yyc3522 = true
		}
	} else if yyl3522 > 0 {

		yyn3522 := yyl3522
		if yyl3522 > cap(yyv3522) {
			yyv3522 = make([]ComponentStatus, yyl3522, yyl3522)
			yyc3522 = true

		} else if yyl3522 != len(yyv3522) {
			yyv3522 = yyv3522[:yyl3522]
			yyc3522 = true
		}
		yyj3522 := 0
		for ; yyj3522 < yyn3522; yyj3522++ {
			if r.TryDecodeAsNil() {
				yyv3522[yyj3522] = ComponentStatus{}
			} else {
				yyv3523 := &yyv3522[yyj3522]
				yyv3523.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3522 := 0; !r.CheckBreak(); yyj3522++ {
			if yyj3522 >= len(yyv3522) {
				yyv3522 = append(yyv3522, ComponentStatus{}) // var yyz3522 ComponentStatus
				yyc3522 = true
			}
			if yyj3522 > 0 {
				yyh3522.Sep(yyj3522)
			}

			if yyj3522 < len(yyv3522) {
				if r.TryDecodeAsNil() {
					yyv3522[yyj3522] = ComponentStatus{}
				} else {
					yyv3524 := &yyv3522[yyj3522]
					yyv3524.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3522.End()
	}
	if yyc3522 {
		*v = yyv3522
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3525 := !z.EncBinary()
	if yys3525 {
		for yyi3525, yyv3525 := range v {
			if yyi3525 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yyv3525.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3525 := range v {
			yyv3525.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3526 := *v
	yyh3526, yyl3526 := z.DecSliceHelperStart()

	var yyc3526 bool
	_ = yyc3526

	if yyv3526 == nil {
		if yyl3526 <= 0 {
			yyv3526 = make([]Capability, 0)
		} else {
			yyv3526 = make([]Capability, yyl3526)
		}
		yyc3526 = true
	}

	if yyl3526 == 0 {
		if len(yyv3526) != 0 {
			yyv3526 = yyv3526[:0]
			yyc3526 = true
		}
	} else if yyl3526 > 0 {

		yyn3526 := yyl3526
		if yyl3526 > cap(yyv3526) {

			yyv23526 := yyv3526
			yyv3526 = make([]Capability, yyl3526, yyl3526)
			if len(yyv3526) > 0 {
				copy(yyv3526, yyv23526[:cap(yyv23526)])
			}
			yyc3526 = true

		} else if yyl3526 != len(yyv3526) {
			yyv3526 = yyv3526[:yyl3526]
			yyc3526 = true
		}
		yyj3526 := 0
		for ; yyj3526 < yyn3526; yyj3526++ {
			if r.TryDecodeAsNil() {
				yyv3526[yyj3526] = ""
			} else {
				yyv3526[yyj3526] = Capability(r.DecodeString())
			}

		}

	} else {
		for yyj3526 := 0; !r.CheckBreak(); yyj3526++ {
			if yyj3526 >= len(yyv3526) {
				yyv3526 = append(yyv3526, "") // var yyz3526 Capability
				yyc3526 = true
			}
			if yyj3526 > 0 {
				yyh3526.Sep(yyj3526)
			}

			if yyj3526 < len(yyv3526) {
				if r.TryDecodeAsNil() {
					yyv3526[yyj3526] = ""
				} else {
					yyv3526[yyj3526] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3526.End()
	}
	if yyc3526 {
		*v = yyv3526
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3529 := !z.EncBinary()
	if yys3529 {
		for yyi3529, yyv3529 := range v {
			if yyi3529 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3530 := &yyv3529
			yy3530.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3529 := range v {
			yy3531 := &yyv3529
			yy3531.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3532 := *v
	yyh3532, yyl3532 := z.DecSliceHelperStart()

	var yyc3532 bool
	_ = yyc3532

	if yyv3532 == nil {
		if yyl3532 <= 0 {
			yyv3532 = make([]ContainerPort, 0)
		} else {
			yyv3532 = make([]ContainerPort, yyl3532)
		}
		yyc3532 = true
	}

	if yyl3532 == 0 {
		if len(yyv3532) != 0 {
			yyv3532 = yyv3532[:0]
			yyc3532 = true
		}
	} else if yyl3532 > 0 {

		yyn3532 := yyl3532
		if yyl3532 > cap(yyv3532) {
			yyv3532 = make([]ContainerPort, yyl3532, yyl3532)
			yyc3532 = true

		} else if yyl3532 != len(yyv3532) {
			yyv3532 = yyv3532[:yyl3532]
			yyc3532 = true
		}
		yyj3532 := 0
		for ; yyj3532 < yyn3532; yyj3532++ {
			if r.TryDecodeAsNil() {
				yyv3532[yyj3532] = ContainerPort{}
			} else {
				yyv3533 := &yyv3532[yyj3532]
				yyv3533.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3532 := 0; !r.CheckBreak(); yyj3532++ {
			if yyj3532 >= len(yyv3532) {
				yyv3532 = append(yyv3532, ContainerPort{}) // var yyz3532 ContainerPort
				yyc3532 = true
			}
			if yyj3532 > 0 {
				yyh3532.Sep(yyj3532)
			}

			if yyj3532 < len(yyv3532) {
				if r.TryDecodeAsNil() {
					yyv3532[yyj3532] = ContainerPort{}
				} else {
					yyv3534 := &yyv3532[yyj3532]
					yyv3534.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3532.End()
	}
	if yyc3532 {
		*v = yyv3532
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3535 := !z.EncBinary()
	if yys3535 {
		for yyi3535, yyv3535 := range v {
			if yyi3535 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3536 := &yyv3535
			yy3536.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3535 := range v {
			yy3537 := &yyv3535
			yy3537.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3538 := *v
	yyh3538, yyl3538 := z.DecSliceHelperStart()

	var yyc3538 bool
	_ = yyc3538

	if yyv3538 == nil {
		if yyl3538 <= 0 {
			yyv3538 = make([]EnvVar, 0)
		} else {
			yyv3538 = make([]EnvVar, yyl3538)
		}
		yyc3538 = true
	}

	if yyl3538 == 0 {
		if len(yyv3538) != 0 {
			yyv3538 = yyv3538[:0]
			yyc3538 = true
		}
	} else if yyl3538 > 0 {

		yyn3538 := yyl3538
		if yyl3538 > cap(yyv3538) {
			yyv3538 = make([]EnvVar, yyl3538, yyl3538)
			yyc3538 = true

		} else if yyl3538 != len(yyv3538) {
			yyv3538 = yyv3538[:yyl3538]
			yyc3538 = true
		}
		yyj3538 := 0
		for ; yyj3538 < yyn3538; yyj3538++ {
			if r.TryDecodeAsNil() {
				yyv3538[yyj3538] = EnvVar{}
			} else {
				yyv3539 := &yyv3538[yyj3538]
				yyv3539.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3538 := 0; !r.CheckBreak(); yyj3538++ {
			if yyj3538 >= len(yyv3538) {
				yyv3538 = append(yyv3538, EnvVar{}) // var yyz3538 EnvVar
				yyc3538 = true
			}
			if yyj3538 > 0 {
				yyh3538.Sep(yyj3538)
			}

			if yyj3538 < len(yyv3538) {
				if r.TryDecodeAsNil() {
					yyv3538[yyj3538] = EnvVar{}
				} else {
					yyv3540 := &yyv3538[yyj3538]
					yyv3540.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3538.End()
	}
	if yyc3538 {
		*v = yyv3538
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3541 := !z.EncBinary()
	if yys3541 {
		for yyi3541, yyv3541 := range v {
			if yyi3541 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3542 := &yyv3541
			yy3542.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3541 := range v {
			yy3543 := &yyv3541
			yy3543.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3544 := *v
	yyh3544, yyl3544 := z.DecSliceHelperStart()

	var yyc3544 bool
	_ = yyc3544

	if yyv3544 == nil {
		if yyl3544 <= 0 {
			yyv3544 = make([]Namespace, 0)
		} else {
			yyv3544 = make([]Namespace, yyl3544)
		}
		yyc3544 = true
	}

	if yyl3544 == 0 {
		if len(yyv3544) != 0 {
			yyv3544 = yyv3544[:0]
			yyc3544 = true
		}
	} else if yyl3544 > 0 {

		yyn3544 := yyl3544
		if yyl3544 > cap(yyv3544) {
			yyv3544 = make([]Namespace, yyl3544, yyl3544)
			yyc3544 = true

		} else if yyl3544 != len(yyv3544) {
			yyv3544 = yyv3544[:yyl3544]
			yyc3544 = true
		}
		yyj3544 := 0
		for ; yyj3544 < yyn3544; yyj3544++ {
			if r.TryDecodeAsNil() {
				yyv3544[yyj3544] = Namespace{}
			} else {
				yyv3545 := &yyv3544[yyj3544]
				yyv3545.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3544 := 0; !r.CheckBreak(); yyj3544++ {
			if yyj3544 >= len(yyv3544) {
				yyv3544 = append(yyv3544, Namespace{}) // var yyz3544 Namespace
				yyc3544 = true
			}
			if yyj3544 > 0 {
				yyh3544.Sep(yyj3544)
			}

			if yyj3544 < len(yyv3544) {
				if r.TryDecodeAsNil() {
					yyv3544[yyj3544] = Namespace{}
				} else {
					yyv3546 := &yyv3544[yyj3544]
					yyv3546.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3544.End()
	}
	if yyc3544 {
		*v = yyv3544
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3547 := !z.EncBinary()
	if yys3547 {
		for yyi3547, yyv3547 := range v {
			if yyi3547 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3548 := &yyv3547
			yy3548.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3547 := range v {
			yy3549 := &yyv3547
			yy3549.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3550 := *v
	yyh3550, yyl3550 := z.DecSliceHelperStart()

	var yyc3550 bool
	_ = yyc3550

	if yyv3550 == nil {
		if yyl3550 <= 0 {
			yyv3550 = make([]LimitRangeItem, 0)
		} else {
			yyv3550 = make([]LimitRangeItem, yyl3550)
		}
		yyc3550 = true
	}

	if yyl3550 == 0 {
		if len(yyv3550) != 0 {
			yyv3550 = yyv3550[:0]
			yyc3550 = true
		}
	} else if yyl3550 > 0 {

		yyn3550 := yyl3550
		if yyl3550 > cap(yyv3550) {
			yyv3550 = make([]LimitRangeItem, yyl3550, yyl3550)
			yyc3550 = true

		} else if yyl3550 != len(yyv3550) {
			yyv3550 = yyv3550[:yyl3550]
			yyc3550 = true
		}
		yyj3550 := 0
		for ; yyj3550 < yyn3550; yyj3550++ {
			if r.TryDecodeAsNil() {
				yyv3550[yyj3550] = LimitRangeItem{}
			} else {
				yyv3551 := &yyv3550[yyj3550]
				yyv3551.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3550 := 0; !r.CheckBreak(); yyj3550++ {
			if yyj3550 >= len(yyv3550) {
				yyv3550 = append(yyv3550, LimitRangeItem{}) // var yyz3550 LimitRangeItem
				yyc3550 = true
			}
			if yyj3550 > 0 {
				yyh3550.Sep(yyj3550)
			}

			if yyj3550 < len(yyv3550) {
				if r.TryDecodeAsNil() {
					yyv3550[yyj3550] = LimitRangeItem{}
				} else {
					yyv3552 := &yyv3550[yyj3550]
					yyv3552.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3550.End()
	}
	if yyc3550 {
		*v = yyv3550
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3553 := !z.EncBinary()
	if yys3553 {
		for yyi3553, yyv3553 := range v {
			if yyi3553 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3554 := &yyv3553
			yy3554.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3553 := range v {
			yy3555 := &yyv3553
			yy3555.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3556 := *v
	yyh3556, yyl3556 := z.DecSliceHelperStart()

	var yyc3556 bool
	_ = yyc3556

	if yyv3556 == nil {
		if yyl3556 <= 0 {
			yyv3556 = make([]Volume, 0)
		} else {
			yyv3556 = make([]Volume, yyl3556)
		}
		yyc3556 = true
	}

	if yyl3556 == 0 {
		if len(yyv3556) != 0 {
			yyv3556 = yyv3556[:0]
			yyc3556 = true
		}
	} else if yyl3556 > 0 {

		yyn3556 := yyl3556
		if yyl3556 > cap(yyv3556) {
			yyv3556 = make([]Volume, yyl3556, yyl3556)
			yyc3556 = true

		} else if yyl3556 != len(yyv3556) {
			yyv3556 = yyv3556[:yyl3556]
			yyc3556 = true
		}
		yyj3556 := 0
		for ; yyj3556 < yyn3556; yyj3556++ {
			if r.TryDecodeAsNil() {
				yyv3556[yyj3556] = Volume{}
			} else {
				yyv3557 := &yyv3556[yyj3556]
				yyv3557.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3556 := 0; !r.CheckBreak(); yyj3556++ {
			if yyj3556 >= len(yyv3556) {
				yyv3556 = append(yyv3556, Volume{}) // var yyz3556 Volume
				yyc3556 = true
			}
			if yyj3556 > 0 {
				yyh3556.Sep(yyj3556)
			}

			if yyj3556 < len(yyv3556) {
				if r.TryDecodeAsNil() {
					yyv3556[yyj3556] = Volume{}
				} else {
					yyv3558 := &yyv3556[yyj3556]
					yyv3558.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3556.End()
	}
	if yyc3556 {
		*v = yyv3556
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3559 := !z.EncBinary()
	if yys3559 {
		for yyi3559, yyv3559 := range v {
			if yyi3559 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3560 := &yyv3559
			yy3560.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3559 := range v {
			yy3561 := &yyv3559
			yy3561.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3562 := *v
	yyh3562, yyl3562 := z.DecSliceHelperStart()

	var yyc3562 bool
	_ = yyc3562

	if yyv3562 == nil {
		if yyl3562 <= 0 {
			yyv3562 = make([]Pod, 0)
		} else {
			yyv3562 = make([]Pod, yyl3562)
		}
		yyc3562 = true
	}

	if yyl3562 == 0 {
		if len(yyv3562) != 0 {
			yyv3562 = yyv3562[:0]
			yyc3562 = true
		}
	} else if yyl3562 > 0 {

		yyn3562 := yyl3562
		if yyl3562 > cap(yyv3562) {
			yyv3562 = make([]Pod, yyl3562, yyl3562)
			yyc3562 = true

		} else if yyl3562 != len(yyv3562) {
			yyv3562 = yyv3562[:yyl3562]
			yyc3562 = true
		}
		yyj3562 := 0
		for ; yyj3562 < yyn3562; yyj3562++ {
			if r.TryDecodeAsNil() {
				yyv3562[yyj3562] = Pod{}
			} else {
				yyv3563 := &yyv3562[yyj3562]
				yyv3563.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3562 := 0; !r.CheckBreak(); yyj3562++ {
			if yyj3562 >= len(yyv3562) {
				yyv3562 = append(yyv3562, Pod{}) // var yyz3562 Pod
				yyc3562 = true
			}
			if yyj3562 > 0 {
				yyh3562.Sep(yyj3562)
			}

			if yyj3562 < len(yyv3562) {
				if r.TryDecodeAsNil() {
					yyv3562[yyj3562] = Pod{}
				} else {
					yyv3564 := &yyv3562[yyj3562]
					yyv3564.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3562.End()
	}
	if yyc3562 {
		*v = yyv3562
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3565 := !z.EncBinary()
	if yys3565 {
		for yyi3565, yyv3565 := range v {
			if yyi3565 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3566 := &yyv3565
			yy3566.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3565 := range v {
			yy3567 := &yyv3565
			yy3567.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3568 := *v
	yyh3568, yyl3568 := z.DecSliceHelperStart()

	var yyc3568 bool
	_ = yyc3568

	if yyv3568 == nil {
		if yyl3568 <= 0 {
			yyv3568 = make([]Endpoints, 0)
		} else {
			yyv3568 = make([]Endpoints, yyl3568)
		}
		yyc3568 = true
	}

	if yyl3568 == 0 {
		if len(yyv3568) != 0 {
			yyv3568 = yyv3568[:0]
			yyc3568 = true
		}
	} else if yyl3568 > 0 {

		yyn3568 := yyl3568
		if yyl3568 > cap(yyv3568) {
			yyv3568 = make([]Endpoints, yyl3568, yyl3568)
			yyc3568 = true

		} else if yyl3568 != len(yyv3568) {
			yyv3568 = yyv3568[:yyl3568]
			yyc3568 = true
		}
		yyj3568 := 0
		for ; yyj3568 < yyn3568; yyj3568++ {
			if r.TryDecodeAsNil() {
				yyv3568[yyj3568] = Endpoints{}
			} else {
				yyv3569 := &yyv3568[yyj3568]
				yyv3569.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3568 := 0; !r.CheckBreak(); yyj3568++ {
			if yyj3568 >= len(yyv3568) {
				yyv3568 = append(yyv3568, Endpoints{}) // var yyz3568 Endpoints
				yyc3568 = true
			}
			if yyj3568 > 0 {
				yyh3568.Sep(yyj3568)
			}

			if yyj3568 < len(yyv3568) {
				if r.TryDecodeAsNil() {
					yyv3568[yyj3568] = Endpoints{}
				} else {
					yyv3570 := &yyv3568[yyj3568]
					yyv3570.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3568.End()
	}
	if yyc3568 {
		*v = yyv3568
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3571 := !z.EncBinary()
	if yys3571 {
		for yyi3571, yyv3571 := range v {
			if yyi3571 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3572 := &yyv3571
			yy3572.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3571 := range v {
			yy3573 := &yyv3571
			yy3573.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3574 := *v
	yyh3574, yyl3574 := z.DecSliceHelperStart()

	var yyc3574 bool
	_ = yyc3574

	if yyv3574 == nil {
		if yyl3574 <= 0 {
			yyv3574 = make([]LocalObjectReference, 0)
		} else {
			yyv3574 = make([]LocalObjectReference, yyl3574)
		}
		yyc3574 = true
	}

	if yyl3574 == 0 {
		if len(yyv3574) != 0 {
			yyv3574 = yyv3574[:0]
			yyc3574 = true
		}
	} else if yyl3574 > 0 {

		yyn3574 := yyl3574
		if yyl3574 > cap(yyv3574) {
			yyv3574 = make([]LocalObjectReference, yyl3574, yyl3574)
			yyc3574 = true

		} else if yyl3574 != len(yyv3574) {
			yyv3574 = yyv3574[:yyl3574]
			yyc3574 = true
		}
		yyj3574 := 0
		for ; yyj3574 < yyn3574; yyj3574++ {
			if r.TryDecodeAsNil() {
				yyv3574[yyj3574] = LocalObjectReference{}
			} else {
				yyv3575 := &yyv3574[yyj3574]
				yyv3575.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3574 := 0; !r.CheckBreak(); yyj3574++ {
			if yyj3574 >= len(yyv3574) {
				yyv3574 = append(yyv3574, LocalObjectReference{}) // var yyz3574 LocalObjectReference
				yyc3574 = true
			}
			if yyj3574 > 0 {
				yyh3574.Sep(yyj3574)
			}

			if yyj3574 < len(yyv3574) {
				if r.TryDecodeAsNil() {
					yyv3574[yyj3574] = LocalObjectReference{}
				} else {
					yyv3576 := &yyv3574[yyj3574]
					yyv3576.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3574.End()
	}
	if yyc3574 {
		*v = yyv3574
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3577 := !z.EncBinary()
	if yys3577 {
		for yyi3577, yyv3577 := range v {
			if yyi3577 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3578 := &yyv3577
			yy3578.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3577 := range v {
			yy3579 := &yyv3577
			yy3579.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3580 := *v
	yyh3580, yyl3580 := z.DecSliceHelperStart()

	var yyc3580 bool
	_ = yyc3580

	if yyv3580 == nil {
		if yyl3580 <= 0 {
			yyv3580 = make([]LimitRange, 0)
		} else {
			yyv3580 = make([]LimitRange, yyl3580)
		}
		yyc3580 = true
	}

	if yyl3580 == 0 {
		if len(yyv3580) != 0 {
			yyv3580 = yyv3580[:0]
			yyc3580 = true
		}
	} else if yyl3580 > 0 {

		yyn3580 := yyl3580
		if yyl3580 > cap(yyv3580) {
			yyv3580 = make([]LimitRange, yyl3580, yyl3580)
			yyc3580 = true

		} else if yyl3580 != len(yyv3580) {
			yyv3580 = yyv3580[:yyl3580]
			yyc3580 = true
		}
		yyj3580 := 0
		for ; yyj3580 < yyn3580; yyj3580++ {
			if r.TryDecodeAsNil() {
				yyv3580[yyj3580] = LimitRange{}
			} else {
				yyv3581 := &yyv3580[yyj3580]
				yyv3581.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3580 := 0; !r.CheckBreak(); yyj3580++ {
			if yyj3580 >= len(yyv3580) {
				yyv3580 = append(yyv3580, LimitRange{}) // var yyz3580 LimitRange
				yyc3580 = true
			}
			if yyj3580 > 0 {
				yyh3580.Sep(yyj3580)
			}

			if yyj3580 < len(yyv3580) {
				if r.TryDecodeAsNil() {
					yyv3580[yyj3580] = LimitRange{}
				} else {
					yyv3582 := &yyv3580[yyj3580]
					yyv3582.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3580.End()
	}
	if yyc3580 {
		*v = yyv3580
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3583 := !z.EncBinary()
	if yys3583 {
		for yyi3583, yyv3583 := range v {
			if yyi3583 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3584 := &yyv3583
			yy3584.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3583 := range v {
			yy3585 := &yyv3583
			yy3585.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3586 := *v
	yyh3586, yyl3586 := z.DecSliceHelperStart()

	var yyc3586 bool
	_ = yyc3586

	if yyv3586 == nil {
		if yyl3586 <= 0 {
			yyv3586 = make([]DownwardAPIVolumeFile, 0)
		} else {
			yyv3586 = make([]DownwardAPIVolumeFile, yyl3586)
		}
		yyc3586 = true
	}

	if yyl3586 == 0 {
		if len(yyv3586) != 0 {
			yyv3586 = yyv3586[:0]
			yyc3586 = true
		}
	} else if yyl3586 > 0 {

		yyn3586 := yyl3586
		if yyl3586 > cap(yyv3586) {
			yyv3586 = make([]DownwardAPIVolumeFile, yyl3586, yyl3586)
			yyc3586 = true

		} else if yyl3586 != len(yyv3586) {
			yyv3586 = yyv3586[:yyl3586]
			yyc3586 = true
		}
		yyj3586 := 0
		for ; yyj3586 < yyn3586; yyj3586++ {
			if r.TryDecodeAsNil() {
				yyv3586[yyj3586] = DownwardAPIVolumeFile{}
			} else {
				yyv3587 := &yyv3586[yyj3586]
				yyv3587.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3586 := 0; !r.CheckBreak(); yyj3586++ {
			if yyj3586 >= len(yyv3586) {
				yyv3586 = append(yyv3586, DownwardAPIVolumeFile{}) // var yyz3586 DownwardAPIVolumeFile
				yyc3586 = true
			}
			if yyj3586 > 0 {
				yyh3586.Sep(yyj3586)
			}

			if yyj3586 < len(yyv3586) {
				if r.TryDecodeAsNil() {
					yyv3586[yyj3586] = DownwardAPIVolumeFile{}
				} else {
					yyv3588 := &yyv3586[yyj3586]
					yyv3588.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3586.End()
	}
	if yyc3586 {
		*v = yyv3586
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3589 := !z.EncBinary()
	if yys3589 {
		for yyi3589, yyv3589 := range v {
			if yyi3589 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3590 := &yyv3589
			yy3590.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3589 := range v {
			yy3591 := &yyv3589
			yy3591.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3592 := *v
	yyh3592, yyl3592 := z.DecSliceHelperStart()

	var yyc3592 bool
	_ = yyc3592

	if yyv3592 == nil {
		if yyl3592 <= 0 {
			yyv3592 = make([]Event, 0)
		} else {
			yyv3592 = make([]Event, yyl3592)
		}
		yyc3592 = true
	}

	if yyl3592 == 0 {
		if len(yyv3592) != 0 {
			yyv3592 = yyv3592[:0]
			yyc3592 = true
		}
	} else if yyl3592 > 0 {

		yyn3592 := yyl3592
		if yyl3592 > cap(yyv3592) {
			yyv3592 = make([]Event, yyl3592, yyl3592)
			yyc3592 = true

		} else if yyl3592 != len(yyv3592) {
			yyv3592 = yyv3592[:yyl3592]
			yyc3592 = true
		}
		yyj3592 := 0
		for ; yyj3592 < yyn3592; yyj3592++ {
			if r.TryDecodeAsNil() {
				yyv3592[yyj3592] = Event{}
			} else {
				yyv3593 := &yyv3592[yyj3592]
				yyv3593.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3592 := 0; !r.CheckBreak(); yyj3592++ {
			if yyj3592 >= len(yyv3592) {
				yyv3592 = append(yyv3592, Event{}) // var yyz3592 Event
				yyc3592 = true
			}
			if yyj3592 > 0 {
				yyh3592.Sep(yyj3592)
			}

			if yyj3592 < len(yyv3592) {
				if r.TryDecodeAsNil() {
					yyv3592[yyj3592] = Event{}
				} else {
					yyv3594 := &yyv3592[yyj3592]
					yyv3594.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3592.End()
	}
	if yyc3592 {
		*v = yyv3592
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	yys3595 := !z.EncBinary()
	yyj3595 := 0
	if yys3595 {
		for yyk3595, yyv3595 := range v {
			if yyj3595 > 0 {
				r.EncodeMapEntrySeparator()
			}
			yym3596 := z.EncBinary()
			_ = yym3596
			if false {
			} else {
				r.EncodeString(codecSelferC_UTF81234, string(yyk3595))
			}
			r.EncodeMapKVSeparator()
			if yyv3595 == nil {
				r.EncodeNil()
			} else {
				yym3597 := z.EncBinary()
				_ = yym3597
				if false {
				} else {
					r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3595))
				}
			}
			yyj3595++
		}
		r.EncodeMapEnd()
	} else {
		for yyk3595, yyv3595 := range v {
			yym3598 := z.EncBinary()
			_ = yym3598
			if false {
			} else {
				r.EncodeString(codecSelferC_UTF81234, string(yyk3595))
			}
			if yyv3595 == nil {
				r.EncodeNil()
			} else {
				yym3599 := z.EncBinary()
				_ = yym3599
				if false {
				} else {
					r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3595))
				}
			}
		}
	}
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3600 := *v
	yyl3600 := r.ReadMapStart()
	if yyv3600 == nil {
		if yyl3600 > 0 {
			yyv3600 = make(map[string][]uint8, yyl3600)
		} else {
			yyv3600 = make(map[string][]uint8) // supports indefinite-length, etc
		}
		*v = yyv3600
	}
	if yyl3600 > 0 {
		for yyj3600 := 0; yyj3600 < yyl3600; yyj3600++ {
			var yymk3600 string
			if r.TryDecodeAsNil() {
				yymk3600 = ""
			} else {
				yymk3600 = string(r.DecodeString())
			}

			yymv3600 := yyv3600[yymk3600]
			if r.TryDecodeAsNil() {
				yymv3600 = nil
			} else {
				yyv3602 := &yymv3600
				yym3603 := z.DecBinary()
				_ = yym3603
				if false {
				} else {
					*yyv3602 = r.DecodeBytes(*(*[]byte)(yyv3602), false, false)
				}
			}

			if yyv3600 != nil {
				yyv3600[yymk3600] = yymv3600
			}
		}
	} else if yyl3600 < 0 {
		for yyj3600 := 0; !r.CheckBreak(); yyj3600++ {
			if yyj3600 > 0 {
				r.ReadMapEntrySeparator()
			}
			var yymk3600 string
			if r.TryDecodeAsNil() {
				yymk3600 = ""
			} else {
				yymk3600 = string(r.DecodeString())
			}

			r.ReadMapKVSeparator()
			yymv3600 := yyv3600[yymk3600]
			if r.TryDecodeAsNil() {
				yymv3600 = nil
			} else {
				yyv3605 := &yymv3600
				yym3606 := z.DecBinary()
				_ = yym3606
				if false {
				} else {
					*yyv3605 = r.DecodeBytes(*(*[]byte)(yyv3605), false, false)
				}
			}

			if yyv3600 != nil {
				yyv3600[yymk3600] = yymv3600
			}
		}
		r.ReadMapEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3607 := !z.EncBinary()
	if yys3607 {
		for yyi3607, yyv3607 := range v {
			if yyi3607 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3608 := &yyv3607
			yy3608.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3607 := range v {
			yy3609 := &yyv3607
			yy3609.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3610 := *v
	yyh3610, yyl3610 := z.DecSliceHelperStart()

	var yyc3610 bool
	_ = yyc3610

	if yyv3610 == nil {
		if yyl3610 <= 0 {
			yyv3610 = make([]PersistentVolumeClaim, 0)
		} else {
			yyv3610 = make([]PersistentVolumeClaim, yyl3610)
		}
		yyc3610 = true
	}

	if yyl3610 == 0 {
		if len(yyv3610) != 0 {
			yyv3610 = yyv3610[:0]
			yyc3610 = true
		}
	} else if yyl3610 > 0 {

		yyn3610 := yyl3610
		if yyl3610 > cap(yyv3610) {
			yyv3610 = make([]PersistentVolumeClaim, yyl3610, yyl3610)
			yyc3610 = true

		} else if yyl3610 != len(yyv3610) {
			yyv3610 = yyv3610[:yyl3610]
			yyc3610 = true
		}
		yyj3610 := 0
		for ; yyj3610 < yyn3610; yyj3610++ {
			if r.TryDecodeAsNil() {
				yyv3610[yyj3610] = PersistentVolumeClaim{}
			} else {
				yyv3611 := &yyv3610[yyj3610]
				yyv3611.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3610 := 0; !r.CheckBreak(); yyj3610++ {
			if yyj3610 >= len(yyv3610) {
				yyv3610 = append(yyv3610, PersistentVolumeClaim{}) // var yyz3610 PersistentVolumeClaim
				yyc3610 = true
			}
			if yyj3610 > 0 {
				yyh3610.Sep(yyj3610)
			}

			if yyj3610 < len(yyv3610) {
				if r.TryDecodeAsNil() {
					yyv3610[yyj3610] = PersistentVolumeClaim{}
				} else {
					yyv3612 := &yyv3610[yyj3610]
					yyv3612.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3610.End()
	}
	if yyc3610 {
		*v = yyv3610
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	yys3613 := !z.EncBinary()
	yyj3613 := 0
	if yys3613 {
		for yyk3613, yyv3613 := range v {
			if yyj3613 > 0 {
				r.EncodeMapEntrySeparator()
			}
			yyk3613.CodecEncodeSelf(e)
			r.EncodeMapKVSeparator()
			yy3614 := &yyv3613
			yym3615 := z.EncBinary()
			_ = yym3615
			if false {
			} else if z.HasExtensions() && z.EncExt(yy3614) {
			} else if !yym3615 && z.IsJSONHandle() {
				z.EncJSONMarshal(yy3614)
			} else {
				z.EncFallback(yy3614)
			}
			yyj3613++
		}
		r.EncodeMapEnd()
	} else {
		for yyk3613, yyv3613 := range v {
			yyk3613.CodecEncodeSelf(e)
			yy3616 := &yyv3613
			yym3617 := z.EncBinary()
			_ = yym3617
			if false {
			} else if z.HasExtensions() && z.EncExt(yy3616) {
			} else if !yym3617 && z.IsJSONHandle() {
				z.EncJSONMarshal(yy3616)
			} else {
				z.EncFallback(yy3616)
			}
		}
	}
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3618 := *v
	yyl3618 := r.ReadMapStart()
	if yyv3618 == nil {
		if yyl3618 > 0 {
			yyv3618 = make(map[ResourceName]pkg3_resource.Quantity, yyl3618)
		} else {
			yyv3618 = make(map[ResourceName]pkg3_resource.Quantity) // supports indefinite-length, etc
		}
		*v = yyv3618
	}
	if yyl3618 > 0 {
		for yyj3618 := 0; yyj3618 < yyl3618; yyj3618++ {
			var yymk3618 ResourceName
			if r.TryDecodeAsNil() {
				yymk3618 = ""
			} else {
				yymk3618 = ResourceName(r.DecodeString())
			}

			yymv3618 := yyv3618[yymk3618]
			if r.TryDecodeAsNil() {
				yymv3618 = pkg3_resource.Quantity{}
			} else {
				yyv3620 := &yymv3618
				yym3621 := z.DecBinary()
				_ = yym3621
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3620) {
				} else if !yym3621 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3620)
				} else {
					z.DecFallback(yyv3620, false)
				}
			}

			if yyv3618 != nil {
				yyv3618[yymk3618] = yymv3618
			}
		}
	} else if yyl3618 < 0 {
		for yyj3618 := 0; !r.CheckBreak(); yyj3618++ {
			if yyj3618 > 0 {
				r.ReadMapEntrySeparator()
			}
			var yymk3618 ResourceName
			if r.TryDecodeAsNil() {
				yymk3618 = ""
			} else {
				yymk3618 = ResourceName(r.DecodeString())
			}

			r.ReadMapKVSeparator()
			yymv3618 := yyv3618[yymk3618]
			if r.TryDecodeAsNil() {
				yymv3618 = pkg3_resource.Quantity{}
			} else {
				yyv3623 := &yymv3618
				yym3624 := z.DecBinary()
				_ = yym3624
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3623) {
				} else if !yym3624 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3623)
				} else {
					z.DecFallback(yyv3623, false)
				}
			}

			if yyv3618 != nil {
				yyv3618[yymk3618] = yymv3618
			}
		}
		r.ReadMapEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3625 := !z.EncBinary()
	if yys3625 {
		for yyi3625, yyv3625 := range v {
			if yyi3625 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3626 := &yyv3625
			yy3626.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3625 := range v {
			yy3627 := &yyv3625
			yy3627.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3628 := *v
	yyh3628, yyl3628 := z.DecSliceHelperStart()

	var yyc3628 bool
	_ = yyc3628

	if yyv3628 == nil {
		if yyl3628 <= 0 {
			yyv3628 = make([]Node, 0)
		} else {
			yyv3628 = make([]Node, yyl3628)
		}
		yyc3628 = true
	}

	if yyl3628 == 0 {
		if len(yyv3628) != 0 {
			yyv3628 = yyv3628[:0]
			yyc3628 = true
		}
	} else if yyl3628 > 0 {

		yyn3628 := yyl3628
		if yyl3628 > cap(yyv3628) {
			yyv3628 = make([]Node, yyl3628, yyl3628)
			yyc3628 = true

		} else if yyl3628 != len(yyv3628) {
			yyv3628 = yyv3628[:yyl3628]
			yyc3628 = true
		}
		yyj3628 := 0
		for ; yyj3628 < yyn3628; yyj3628++ {
			if r.TryDecodeAsNil() {
				yyv3628[yyj3628] = Node{}
			} else {
				yyv3629 := &yyv3628[yyj3628]
				yyv3629.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3628 := 0; !r.CheckBreak(); yyj3628++ {
			if yyj3628 >= len(yyv3628) {
				yyv3628 = append(yyv3628, Node{}) // var yyz3628 Node
				yyc3628 = true
			}
			if yyj3628 > 0 {
				yyh3628.Sep(yyj3628)
			}

			if yyj3628 < len(yyv3628) {
				if r.TryDecodeAsNil() {
					yyv3628[yyj3628] = Node{}
				} else {
					yyv3630 := &yyv3628[yyj3628]
					yyv3630.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3628.End()
	}
	if yyc3628 {
		*v = yyv3628
	}

}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3631 := !z.EncBinary()
	if yys3631 {
		for yyi3631, yyv3631 := range v {
			if yyi3631 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3632 := &yyv3631
			yy3632.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3631 := range v {
			yy3633 := &yyv3631
			yy3633.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3634 := *v
	yyh3634, yyl3634 := z.DecSliceHelperStart()

	var yyc3634 bool
	_ = yyc3634

	if yyv3634 == nil {
		if yyl3634 <= 0 {
			yyv3634 = make([]Secret, 0)
		} else {
			yyv3634 = make([]Secret, yyl3634)
		}
		yyc3634 = true
	}

	if yyl3634 == 0 {
		if len(yyv3634) != 0 {
			yyv3634 = yyv3634[:0]
			yyc3634 = true
		}
	} else if yyl3634 > 0 {

		yyn3634 := yyl3634
		if yyl3634 > cap(yyv3634) {
			yyv3634 = make([]Secret, yyl3634, yyl3634)
			yyc3634 = true

		} else if yyl3634 != len(yyv3634) {
			yyv3634 = yyv3634[:yyl3634]
			yyc3634 = true
		}
		yyj3634 := 0
		for ; yyj3634 < yyn3634; yyj3634++ {
			if r.TryDecodeAsNil() {
				yyv3634[yyj3634] = Secret{}
			} else {
				yyv3635 := &yyv3634[yyj3634]
				yyv3635.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3634 := 0; !r.CheckBreak(); yyj3634++ {
			if yyj3634 >= len(yyv3634) {
				yyv3634 = append(yyv3634, Secret{}) // var yyz3634 Secret
				yyc3634 = true
			}
			if yyj3634 > 0 {
				yyh3634.Sep(yyj3634)
			}

			if yyj3634 < len(yyv3634) {
				if r.TryDecodeAsNil() {
					yyv3634[yyj3634] = Secret{}
				} else {
					yyv3636 := &yyv3634[yyj3634]
					yyv3636.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3634.End()
	}
	if yyc3634 {
		*v = yyv3634
	}

}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3637 := !z.EncBinary()
	if yys3637 {
		for yyi3637, yyv3637 := range v {
			if yyi3637 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3638 := &yyv3637
			yy3638.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3637 := range v {
			yy3639 := &yyv3637
			yy3639.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3640 := *v
	yyh3640, yyl3640 := z.DecSliceHelperStart()

	var yyc3640 bool
	_ = yyc3640

	if yyv3640 == nil {
		if yyl3640 <= 0 {
			yyv3640 = make([]APIVersion, 0)
		} else {
			yyv3640 = make([]APIVersion, yyl3640)
		}
		yyc3640 = true
	}

	if yyl3640 == 0 {
		if len(yyv3640) != 0 {
			yyv3640 = yyv3640[:0]
			yyc3640 = true
		}
	} else if yyl3640 > 0 {

		yyn3640 := yyl3640
		if yyl3640 > cap(yyv3640) {
			yyv3640 = make([]APIVersion, yyl3640, yyl3640)
			yyc3640 = true

		} else if yyl3640 != len(yyv3640) {
			yyv3640 = yyv3640[:yyl3640]
			yyc3640 = true
		}
		yyj3640 := 0
		for ; yyj3640 < yyn3640; yyj3640++ {
			if r.TryDecodeAsNil() {
				yyv3640[yyj3640] = APIVersion{}
			} else {
				yyv3641 := &yyv3640[yyj3640]
				yyv3641.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3640 := 0; !r.CheckBreak(); yyj3640++ {
			if yyj3640 >= len(yyv3640) {
				yyv3640 = append(yyv3640, APIVersion{}) // var yyz3640 APIVersion
				yyc3640 = true
			}
			if yyj3640 > 0 {
				yyh3640.Sep(yyj3640)
			}

			if yyj3640 < len(yyv3640) {
				if r.TryDecodeAsNil() {
					yyv3640[yyj3640] = APIVersion{}
				} else {
					yyv3642 := &yyv3640[yyj3640]
					yyv3642.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3640.End()
	}
	if yyc3640 {
		*v = yyv3640
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3643 := !z.EncBinary()
	if yys3643 {
		for yyi3643, yyv3643 := range v {
			if yyi3643 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3644 := &yyv3643
			yy3644.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3643 := range v {
			yy3645 := &yyv3643
			yy3645.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3646 := *v
	yyh3646, yyl3646 := z.DecSliceHelperStart()

	var yyc3646 bool
	_ = yyc3646

	if yyv3646 == nil {
		if yyl3646 <= 0 {
			yyv3646 = make([]VolumeMount, 0)
		} else {
			yyv3646 = make([]VolumeMount, yyl3646)
		}
		yyc3646 = true
	}

	if yyl3646 == 0 {
		if len(yyv3646) != 0 {
			yyv3646 = yyv3646[:0]
			yyc3646 = true
		}
	} else if yyl3646 > 0 {

		yyn3646 := yyl3646
		if yyl3646 > cap(yyv3646) {
			yyv3646 = make([]VolumeMount, yyl3646, yyl3646)
			yyc3646 = true

		} else if yyl3646 != len(yyv3646) {
			yyv3646 = yyv3646[:yyl3646]
			yyc3646 = true
		}
		yyj3646 := 0
		for ; yyj3646 < yyn3646; yyj3646++ {
			if r.TryDecodeAsNil() {
				yyv3646[yyj3646] = VolumeMount{}
			} else {
				yyv3647 := &yyv3646[yyj3646]
				yyv3647.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3646 := 0; !r.CheckBreak(); yyj3646++ {
			if yyj3646 >= len(yyv3646) {
				yyv3646 = append(yyv3646, VolumeMount{}) // var yyz3646 VolumeMount
				yyc3646 = true
			}
			if yyj3646 > 0 {
				yyh3646.Sep(yyj3646)
			}

			if yyj3646 < len(yyv3646) {
				if r.TryDecodeAsNil() {
					yyv3646[yyj3646] = VolumeMount{}
				} else {
					yyv3648 := &yyv3646[yyj3646]
					yyv3648.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3646.End()
	}
	if yyc3646 {
		*v = yyv3646
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3649 := !z.EncBinary()
	if yys3649 {
		for yyi3649, yyv3649 := range v {
			if yyi3649 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3650 := &yyv3649
			yy3650.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3649 := range v {
			yy3651 := &yyv3649
			yy3651.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3652 := *v
	yyh3652, yyl3652 := z.DecSliceHelperStart()

	var yyc3652 bool
	_ = yyc3652

	if yyv3652 == nil {
		if yyl3652 <= 0 {
			yyv3652 = make([]Service, 0)
		} else {
			yyv3652 = make([]Service, yyl3652)
		}
		yyc3652 = true
	}

	if yyl3652 == 0 {
		if len(yyv3652) != 0 {
			yyv3652 = yyv3652[:0]
			yyc3652 = true
		}
	} else if yyl3652 > 0 {

		yyn3652 := yyl3652
		if yyl3652 > cap(yyv3652) {
			yyv3652 = make([]Service, yyl3652, yyl3652)
			yyc3652 = true

		} else if yyl3652 != len(yyv3652) {
			yyv3652 = yyv3652[:yyl3652]
			yyc3652 = true
		}
		yyj3652 := 0
		for ; yyj3652 < yyn3652; yyj3652++ {
			if r.TryDecodeAsNil() {
				yyv3652[yyj3652] = Service{}
			} else {
				yyv3653 := &yyv3652[yyj3652]
				yyv3653.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3652 := 0; !r.CheckBreak(); yyj3652++ {
			if yyj3652 >= len(yyv3652) {
				yyv3652 = append(yyv3652, Service{}) // var yyz3652 Service
				yyc3652 = true
			}
			if yyj3652 > 0 {
				yyh3652.Sep(yyj3652)
			}

			if yyj3652 < len(yyv3652) {
				if r.TryDecodeAsNil() {
					yyv3652[yyj3652] = Service{}
				} else {
					yyv3654 := &yyv3652[yyj3652]
					yyv3654.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3652.End()
	}
	if yyc3652 {
		*v = yyv3652
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3655 := !z.EncBinary()
	if yys3655 {
		for yyi3655, yyv3655 := range v {
			if yyi3655 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3656 := &yyv3655
			yy3656.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3655 := range v {
			yy3657 := &yyv3655
			yy3657.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3658 := *v
	yyh3658, yyl3658 := z.DecSliceHelperStart()

	var yyc3658 bool
	_ = yyc3658

	if yyv3658 == nil {
		if yyl3658 <= 0 {
			yyv3658 = make([]EndpointPort, 0)
		} else {
			yyv3658 = make([]EndpointPort, yyl3658)
		}
		yyc3658 = true
	}

	if yyl3658 == 0 {
		if len(yyv3658) != 0 {
			yyv3658 = yyv3658[:0]
			yyc3658 = true
		}
	} else if yyl3658 > 0 {

		yyn3658 := yyl3658
		if yyl3658 > cap(yyv3658) {
			yyv3658 = make([]EndpointPort, yyl3658, yyl3658)
			yyc3658 = true

		} else if yyl3658 != len(yyv3658) {
			yyv3658 = yyv3658[:yyl3658]
			yyc3658 = true
		}
		yyj3658 := 0
		for ; yyj3658 < yyn3658; yyj3658++ {
			if r.TryDecodeAsNil() {
				yyv3658[yyj3658] = EndpointPort{}
			} else {
				yyv3659 := &yyv3658[yyj3658]
				yyv3659.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3658 := 0; !r.CheckBreak(); yyj3658++ {
			if yyj3658 >= len(yyv3658) {
				yyv3658 = append(yyv3658, EndpointPort{}) // var yyz3658 EndpointPort
				yyc3658 = true
			}
			if yyj3658 > 0 {
				yyh3658.Sep(yyj3658)
			}

			if yyj3658 < len(yyv3658) {
				if r.TryDecodeAsNil() {
					yyv3658[yyj3658] = EndpointPort{}
				} else {
					yyv3660 := &yyv3658[yyj3658]
					yyv3660.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3658.End()
	}
	if yyc3658 {
		*v = yyv3658
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3661 := !z.EncBinary()
	if yys3661 {
		for yyi3661, yyv3661 := range v {
			if yyi3661 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3662 := &yyv3661
			yy3662.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3661 := range v {
			yy3663 := &yyv3661
			yy3663.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3664 := *v
	yyh3664, yyl3664 := z.DecSliceHelperStart()

	var yyc3664 bool
	_ = yyc3664

	if yyv3664 == nil {
		if yyl3664 <= 0 {
			yyv3664 = make([]PodCondition, 0)
		} else {
			yyv3664 = make([]PodCondition, yyl3664)
		}
		yyc3664 = true
	}

	if yyl3664 == 0 {
		if len(yyv3664) != 0 {
			yyv3664 = yyv3664[:0]
			yyc3664 = true
		}
	} else if yyl3664 > 0 {

		yyn3664 := yyl3664
		if yyl3664 > cap(yyv3664) {
			yyv3664 = make([]PodCondition, yyl3664, yyl3664)
			yyc3664 = true

		} else if yyl3664 != len(yyv3664) {
			yyv3664 = yyv3664[:yyl3664]
			yyc3664 = true
		}
		yyj3664 := 0
		for ; yyj3664 < yyn3664; yyj3664++ {
			if r.TryDecodeAsNil() {
				yyv3664[yyj3664] = PodCondition{}
			} else {
				yyv3665 := &yyv3664[yyj3664]
				yyv3665.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3664 := 0; !r.CheckBreak(); yyj3664++ {
			if yyj3664 >= len(yyv3664) {
				yyv3664 = append(yyv3664, PodCondition{}) // var yyz3664 PodCondition
				yyc3664 = true
			}
			if yyj3664 > 0 {
				yyh3664.Sep(yyj3664)
			}

			if yyj3664 < len(yyv3664) {
				if r.TryDecodeAsNil() {
					yyv3664[yyj3664] = PodCondition{}
				} else {
					yyv3666 := &yyv3664[yyj3664]
					yyv3666.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3664.End()
	}
	if yyc3664 {
		*v = yyv3664
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3667 := !z.EncBinary()
	if yys3667 {
		for yyi3667, yyv3667 := range v {
			if yyi3667 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3668 := &yyv3667
			yy3668.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3667 := range v {
			yy3669 := &yyv3667
			yy3669.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3670 := *v
	yyh3670, yyl3670 := z.DecSliceHelperStart()

	var yyc3670 bool
	_ = yyc3670

	if yyv3670 == nil {
		if yyl3670 <= 0 {
			yyv3670 = make([]LoadBalancerIngress, 0)
		} else {
			yyv3670 = make([]LoadBalancerIngress, yyl3670)
		}
		yyc3670 = true
	}

	if yyl3670 == 0 {
		if len(yyv3670) != 0 {
			yyv3670 = yyv3670[:0]
			yyc3670 = true
		}
	} else if yyl3670 > 0 {

		yyn3670 := yyl3670
		if yyl3670 > cap(yyv3670) {
			yyv3670 = make([]LoadBalancerIngress, yyl3670, yyl3670)
			yyc3670 = true

		} else if yyl3670 != len(yyv3670) {
			yyv3670 = yyv3670[:yyl3670]
			yyc3670 = true
		}
		yyj3670 := 0
		for ; yyj3670 < yyn3670; yyj3670++ {
			if r.TryDecodeAsNil() {
				yyv3670[yyj3670] = LoadBalancerIngress{}
			} else {
				yyv3671 := &yyv3670[yyj3670]
				yyv3671.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3670 := 0; !r.CheckBreak(); yyj3670++ {
			if yyj3670 >= len(yyv3670) {
				yyv3670 = append(yyv3670, LoadBalancerIngress{}) // var yyz3670 LoadBalancerIngress
				yyc3670 = true
			}
			if yyj3670 > 0 {
				yyh3670.Sep(yyj3670)
			}

			if yyj3670 < len(yyv3670) {
				if r.TryDecodeAsNil() {
					yyv3670[yyj3670] = LoadBalancerIngress{}
				} else {
					yyv3672 := &yyv3670[yyj3670]
					yyv3672.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3670.End()
	}
	if yyc3670 {
		*v = yyv3670
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3673 := !z.EncBinary()
	if yys3673 {
		for yyi3673, yyv3673 := range v {
			if yyi3673 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3674 := &yyv3673
			yy3674.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3673 := range v {
			yy3675 := &yyv3673
			yy3675.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3676 := *v
	yyh3676, yyl3676 := z.DecSliceHelperStart()

	var yyc3676 bool
	_ = yyc3676

	if yyv3676 == nil {
		if yyl3676 <= 0 {
			yyv3676 = make([]EndpointAddress, 0)
		} else {
			yyv3676 = make([]EndpointAddress, yyl3676)
		}
		yyc3676 = true
	}

	if yyl3676 == 0 {
		if len(yyv3676) != 0 {
			yyv3676 = yyv3676[:0]
			yyc3676 = true
		}
	} else if yyl3676 > 0 {

		yyn3676 := yyl3676
		if yyl3676 > cap(yyv3676) {
			yyv3676 = make([]EndpointAddress, yyl3676, yyl3676)
			yyc3676 = true

		} else if yyl3676 != len(yyv3676) {
			yyv3676 = yyv3676[:yyl3676]
			yyc3676 = true
		}
		yyj3676 := 0
		for ; yyj3676 < yyn3676; yyj3676++ {
			if r.TryDecodeAsNil() {
				yyv3676[yyj3676] = EndpointAddress{}
			} else {
				yyv3677 := &yyv3676[yyj3676]
				yyv3677.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3676 := 0; !r.CheckBreak(); yyj3676++ {
			if yyj3676 >= len(yyv3676) {
				yyv3676 = append(yyv3676, EndpointAddress{}) // var yyz3676 EndpointAddress
				yyc3676 = true
			}
			if yyj3676 > 0 {
				yyh3676.Sep(yyj3676)
			}

			if yyj3676 < len(yyv3676) {
				if r.TryDecodeAsNil() {
					yyv3676[yyj3676] = EndpointAddress{}
				} else {
					yyv3678 := &yyv3676[yyj3676]
					yyv3678.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3676.End()
	}
	if yyc3676 {
		*v = yyv3676
	}

}
