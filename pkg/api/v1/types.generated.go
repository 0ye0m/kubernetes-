/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [16]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[14] = len(x.Finalizers) != 0
			yyq2[15] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(16)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Initializers == nil {
					r.EncodeNil()
				} else {
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else {
						z.F.EncSliceStringV(x.Initializers, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("initializers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Initializers == nil {
					r.EncodeNil()
				} else {
					yym48 := z.EncBinary()
					_ = yym48
					if false {
					} else {
						z.F.EncSliceStringV(x.Initializers, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym50 := z.EncBinary()
						_ = yym50
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym51 := z.EncBinary()
						_ = yym51
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[15] {
					yym53 := z.EncBinary()
					_ = yym53
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym54 := z.EncBinary()
					_ = yym54
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym55 := z.DecBinary()
	_ = yym55
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct56 := r.ContainerType()
		if yyct56 == codecSelferValueTypeMap1234 {
			yyl56 := r.ReadMapStart()
			if yyl56 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl56, d)
			}
		} else if yyct56 == codecSelferValueTypeArray1234 {
			yyl56 := r.ReadArrayStart()
			if yyl56 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl56, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys57Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys57Slc
	var yyhl57 bool = l >= 0
	for yyj57 := 0; ; yyj57++ {
		if yyhl57 {
			if yyj57 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys57Slc = r.DecodeBytes(yys57Slc, true, true)
		yys57 := string(yys57Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys57 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv65 := &x.CreationTimestamp
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv65) {
				} else if yym66 {
					z.DecBinaryUnmarshal(yyv65)
				} else if !yym66 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv65)
				} else {
					z.DecFallback(yyv65, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym68 := z.DecBinary()
				_ = yym68
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym68 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym68 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym70 := z.DecBinary()
				_ = yym70
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv71 := &x.Labels
				yym72 := z.DecBinary()
				_ = yym72
				if false {
				} else {
					z.F.DecMapStringStringX(yyv71, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv73 := &x.Annotations
				yym74 := z.DecBinary()
				_ = yym74
				if false {
				} else {
					z.F.DecMapStringStringX(yyv73, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv75 := &x.OwnerReferences
				yym76 := z.DecBinary()
				_ = yym76
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv75), d)
				}
			}
		case "initializers":
			if r.TryDecodeAsNil() {
				x.Initializers = nil
			} else {
				yyv77 := &x.Initializers
				yym78 := z.DecBinary()
				_ = yym78
				if false {
				} else {
					z.F.DecSliceStringX(yyv77, false, d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv79 := &x.Finalizers
				yym80 := z.DecBinary()
				_ = yym80
				if false {
				} else {
					z.F.DecSliceStringX(yyv79, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys57)
		} // end switch yys57
	} // end for yyj57
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj82 int
	var yyb82 bool
	var yyhl82 bool = l >= 0
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv90 := &x.CreationTimestamp
		yym91 := z.DecBinary()
		_ = yym91
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv90) {
		} else if yym91 {
			z.DecBinaryUnmarshal(yyv90)
		} else if !yym91 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv90)
		} else {
			z.DecFallback(yyv90, false)
		}
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym93 := z.DecBinary()
		_ = yym93
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym93 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym93 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym95 := z.DecBinary()
		_ = yym95
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv96 := &x.Labels
		yym97 := z.DecBinary()
		_ = yym97
		if false {
		} else {
			z.F.DecMapStringStringX(yyv96, false, d)
		}
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv98 := &x.Annotations
		yym99 := z.DecBinary()
		_ = yym99
		if false {
		} else {
			z.F.DecMapStringStringX(yyv98, false, d)
		}
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv100 := &x.OwnerReferences
		yym101 := z.DecBinary()
		_ = yym101
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv100), d)
		}
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Initializers = nil
	} else {
		yyv102 := &x.Initializers
		yym103 := z.DecBinary()
		_ = yym103
		if false {
		} else {
			z.F.DecSliceStringX(yyv102, false, d)
		}
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv104 := &x.Finalizers
		yym105 := z.DecBinary()
		_ = yym105
		if false {
		} else {
			z.F.DecSliceStringX(yyv104, false, d)
		}
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj82++
		if yyhl82 {
			yyb82 = yyj82 > l
		} else {
			yyb82 = r.CheckBreak()
		}
		if yyb82 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj82-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym107 := z.EncBinary()
		_ = yym107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep108 := !z.EncBinary()
			yy2arr108 := z.EncBasicHandle().StructToArray
			var yyq108 [24]bool
			_, _, _ = yysep108, yyq108, yy2arr108
			const yyr108 bool = false
			yyq108[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq108[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq108[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq108[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq108[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq108[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq108[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq108[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq108[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq108[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq108[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq108[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq108[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq108[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq108[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq108[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq108[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq108[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq108[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq108[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq108[21] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq108[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq108[23] = x.VolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			var yynn108 int
			if yyr108 || yy2arr108 {
				r.EncodeArrayStart(24)
			} else {
				yynn108 = 1
				for _, b := range yyq108 {
					if b {
						yynn108++
					}
				}
				r.EncodeMapStart(yynn108)
				yynn108 = 0
			}
			if yyr108 || yy2arr108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym110 := z.EncBinary()
				_ = yym110
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym111 := z.EncBinary()
				_ = yym111
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn112 bool
			if x.VolumeSource.HostPath == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr108 || yy2arr108 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr108 || yy2arr108 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr108 || yy2arr108 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr108 || yy2arr108 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.GitRepo == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr108 || yy2arr108 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.Secret == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr108 || yy2arr108 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.NFS == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr108 || yy2arr108 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.ISCSI == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr108 || yy2arr108 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr108 || yy2arr108 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr108 || yy2arr108 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.RBD == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr108 || yy2arr108 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr108 || yy2arr108 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.Cinder == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr108 || yy2arr108 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.CephFS == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr108 || yy2arr108 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.Flocker == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr108 || yy2arr108 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr108 || yy2arr108 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn128 bool
			if x.VolumeSource.FC == nil {
				yyn128 = true
				goto LABEL128
			}
		LABEL128:
			if yyr108 || yy2arr108 {
				if yyn128 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn128 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn129 bool
			if x.VolumeSource.AzureFile == nil {
				yyn129 = true
				goto LABEL129
			}
		LABEL129:
			if yyr108 || yy2arr108 {
				if yyn129 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn129 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn130 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn130 = true
				goto LABEL130
			}
		LABEL130:
			if yyr108 || yy2arr108 {
				if yyn130 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn130 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn131 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn131 = true
				goto LABEL131
			}
		LABEL131:
			if yyr108 || yy2arr108 {
				if yyn131 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn131 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn132 bool
			if x.VolumeSource.Quobyte == nil {
				yyn132 = true
				goto LABEL132
			}
		LABEL132:
			if yyr108 || yy2arr108 {
				if yyn132 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[21] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn132 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn133 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn133 = true
				goto LABEL133
			}
		LABEL133:
			if yyr108 || yy2arr108 {
				if yyn133 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn133 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn134 bool
			if x.VolumeSource.PhotonPersistentDisk == nil {
				yyn134 = true
				goto LABEL134
			}
		LABEL134:
			if yyr108 || yy2arr108 {
				if yyn134 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq108[23] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq108[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn134 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr108 || yy2arr108 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym135 := z.DecBinary()
	_ = yym135
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct136 := r.ContainerType()
		if yyct136 == codecSelferValueTypeMap1234 {
			yyl136 := r.ReadMapStart()
			if yyl136 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl136, d)
			}
		} else if yyct136 == codecSelferValueTypeArray1234 {
			yyl136 := r.ReadArrayStart()
			if yyl136 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl136, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys137Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys137Slc
	var yyhl137 bool = l >= 0
	for yyj137 := 0; ; yyj137++ {
		if yyhl137 {
			if yyj137 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys137Slc = r.DecodeBytes(yys137Slc, true, true)
		yys137 := string(yys137Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys137 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.VolumeSource.PhotonPersistentDisk == nil {
				x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys137)
		} // end switch yys137
	} // end for yyj137
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj162 int
	var yyb162 bool
	var yyhl162 bool = l >= 0
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PhotonPersistentDisk == nil {
		x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj162++
		if yyhl162 {
			yyb162 = yyj162 > l
		} else {
			yyb162 = r.CheckBreak()
		}
		if yyb162 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj162-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym187 := z.EncBinary()
		_ = yym187
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep188 := !z.EncBinary()
			yy2arr188 := z.EncBasicHandle().StructToArray
			var yyq188 [23]bool
			_, _, _ = yysep188, yyq188, yy2arr188
			const yyr188 bool = false
			yyq188[0] = x.HostPath != nil
			yyq188[1] = x.EmptyDir != nil
			yyq188[2] = x.GCEPersistentDisk != nil
			yyq188[3] = x.AWSElasticBlockStore != nil
			yyq188[4] = x.GitRepo != nil
			yyq188[5] = x.Secret != nil
			yyq188[6] = x.NFS != nil
			yyq188[7] = x.ISCSI != nil
			yyq188[8] = x.Glusterfs != nil
			yyq188[9] = x.PersistentVolumeClaim != nil
			yyq188[10] = x.RBD != nil
			yyq188[11] = x.FlexVolume != nil
			yyq188[12] = x.Cinder != nil
			yyq188[13] = x.CephFS != nil
			yyq188[14] = x.Flocker != nil
			yyq188[15] = x.DownwardAPI != nil
			yyq188[16] = x.FC != nil
			yyq188[17] = x.AzureFile != nil
			yyq188[18] = x.ConfigMap != nil
			yyq188[19] = x.VsphereVolume != nil
			yyq188[20] = x.Quobyte != nil
			yyq188[21] = x.AzureDisk != nil
			yyq188[22] = x.PhotonPersistentDisk != nil
			var yynn188 int
			if yyr188 || yy2arr188 {
				r.EncodeArrayStart(23)
			} else {
				yynn188 = 0
				for _, b := range yyq188 {
					if b {
						yynn188++
					}
				}
				r.EncodeMapStart(yynn188)
				yynn188 = 0
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[20] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[22] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym212 := z.DecBinary()
	_ = yym212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct213 := r.ContainerType()
		if yyct213 == codecSelferValueTypeMap1234 {
			yyl213 := r.ReadMapStart()
			if yyl213 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl213, d)
			}
		} else if yyct213 == codecSelferValueTypeArray1234 {
			yyl213 := r.ReadArrayStart()
			if yyl213 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys214Slc
	var yyhl214 bool = l >= 0
	for yyj214 := 0; ; yyj214++ {
		if yyhl214 {
			if yyj214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys214Slc = r.DecodeBytes(yys214Slc, true, true)
		yys214 := string(yys214Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys214 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys214)
		} // end switch yys214
	} // end for yyj214
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj238 int
	var yyb238 bool
	var yyhl238 bool = l >= 0
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj238++
	if yyhl238 {
		yyb238 = yyj238 > l
	} else {
		yyb238 = r.CheckBreak()
	}
	if yyb238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj238++
		if yyhl238 {
			yyb238 = yyj238 > l
		} else {
			yyb238 = r.CheckBreak()
		}
		if yyb238 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj238-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym262 := z.EncBinary()
		_ = yym262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep263 := !z.EncBinary()
			yy2arr263 := z.EncBasicHandle().StructToArray
			var yyq263 [2]bool
			_, _, _ = yysep263, yyq263, yy2arr263
			const yyr263 bool = false
			yyq263[1] = x.ReadOnly != false
			var yynn263 int
			if yyr263 || yy2arr263 {
				r.EncodeArrayStart(2)
			} else {
				yynn263 = 1
				for _, b := range yyq263 {
					if b {
						yynn263++
					}
				}
				r.EncodeMapStart(yynn263)
				yynn263 = 0
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym265 := z.EncBinary()
				_ = yym265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym266 := z.EncBinary()
				_ = yym266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[1] {
					yym268 := z.EncBinary()
					_ = yym268
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq263[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym269 := z.EncBinary()
					_ = yym269
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym270 := z.DecBinary()
	_ = yym270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct271 := r.ContainerType()
		if yyct271 == codecSelferValueTypeMap1234 {
			yyl271 := r.ReadMapStart()
			if yyl271 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl271, d)
			}
		} else if yyct271 == codecSelferValueTypeArray1234 {
			yyl271 := r.ReadArrayStart()
			if yyl271 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl271, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys272Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys272Slc
	var yyhl272 bool = l >= 0
	for yyj272 := 0; ; yyj272++ {
		if yyhl272 {
			if yyj272 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys272Slc = r.DecodeBytes(yys272Slc, true, true)
		yys272 := string(yys272Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys272 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys272)
		} // end switch yys272
	} // end for yyj272
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj275 int
	var yyb275 bool
	var yyhl275 bool = l >= 0
	yyj275++
	if yyhl275 {
		yyb275 = yyj275 > l
	} else {
		yyb275 = r.CheckBreak()
	}
	if yyb275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj275++
	if yyhl275 {
		yyb275 = yyj275 > l
	} else {
		yyb275 = r.CheckBreak()
	}
	if yyb275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj275++
		if yyhl275 {
			yyb275 = yyj275 > l
		} else {
			yyb275 = r.CheckBreak()
		}
		if yyb275 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj275-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym278 := z.EncBinary()
		_ = yym278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep279 := !z.EncBinary()
			yy2arr279 := z.EncBasicHandle().StructToArray
			var yyq279 [17]bool
			_, _, _ = yysep279, yyq279, yy2arr279
			const yyr279 bool = false
			yyq279[0] = x.GCEPersistentDisk != nil
			yyq279[1] = x.AWSElasticBlockStore != nil
			yyq279[2] = x.HostPath != nil
			yyq279[3] = x.Glusterfs != nil
			yyq279[4] = x.NFS != nil
			yyq279[5] = x.RBD != nil
			yyq279[6] = x.ISCSI != nil
			yyq279[7] = x.Cinder != nil
			yyq279[8] = x.CephFS != nil
			yyq279[9] = x.FC != nil
			yyq279[10] = x.Flocker != nil
			yyq279[11] = x.FlexVolume != nil
			yyq279[12] = x.AzureFile != nil
			yyq279[13] = x.VsphereVolume != nil
			yyq279[14] = x.Quobyte != nil
			yyq279[15] = x.AzureDisk != nil
			yyq279[16] = x.PhotonPersistentDisk != nil
			var yynn279 int
			if yyr279 || yy2arr279 {
				r.EncodeArrayStart(17)
			} else {
				yynn279 = 0
				for _, b := range yyq279 {
					if b {
						yynn279++
					}
				}
				r.EncodeMapStart(yynn279)
				yynn279 = 0
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[14] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[16] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym297 := z.DecBinary()
	_ = yym297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct298 := r.ContainerType()
		if yyct298 == codecSelferValueTypeMap1234 {
			yyl298 := r.ReadMapStart()
			if yyl298 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl298, d)
			}
		} else if yyct298 == codecSelferValueTypeArray1234 {
			yyl298 := r.ReadArrayStart()
			if yyl298 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys299Slc
	var yyhl299 bool = l >= 0
	for yyj299 := 0; ; yyj299++ {
		if yyhl299 {
			if yyj299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys299Slc = r.DecodeBytes(yys299Slc, true, true)
		yys299 := string(yys299Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys299 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys299)
		} // end switch yys299
	} // end for yyj299
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj317 int
	var yyb317 bool
	var yyhl317 bool = l >= 0
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj317++
		if yyhl317 {
			yyb317 = yyj317 > l
		} else {
			yyb317 = r.CheckBreak()
		}
		if yyb317 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj317-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym335 := z.EncBinary()
		_ = yym335
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep336 := !z.EncBinary()
			yy2arr336 := z.EncBasicHandle().StructToArray
			var yyq336 [5]bool
			_, _, _ = yysep336, yyq336, yy2arr336
			const yyr336 bool = false
			yyq336[0] = x.Kind != ""
			yyq336[1] = x.APIVersion != ""
			yyq336[2] = true
			yyq336[3] = true
			yyq336[4] = true
			var yynn336 int
			if yyr336 || yy2arr336 {
				r.EncodeArrayStart(5)
			} else {
				yynn336 = 0
				for _, b := range yyq336 {
					if b {
						yynn336++
					}
				}
				r.EncodeMapStart(yynn336)
				yynn336 = 0
			}
			if yyr336 || yy2arr336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq336[0] {
					yym338 := z.EncBinary()
					_ = yym338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq336[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym339 := z.EncBinary()
					_ = yym339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr336 || yy2arr336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq336[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq336[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr336 || yy2arr336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq336[2] {
					yy344 := &x.ObjectMeta
					yy344.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq336[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy345 := &x.ObjectMeta
					yy345.CodecEncodeSelf(e)
				}
			}
			if yyr336 || yy2arr336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq336[3] {
					yy347 := &x.Spec
					yy347.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq336[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy348 := &x.Spec
					yy348.CodecEncodeSelf(e)
				}
			}
			if yyr336 || yy2arr336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq336[4] {
					yy350 := &x.Status
					yy350.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq336[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy351 := &x.Status
					yy351.CodecEncodeSelf(e)
				}
			}
			if yyr336 || yy2arr336 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym352 := z.DecBinary()
	_ = yym352
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct353 := r.ContainerType()
		if yyct353 == codecSelferValueTypeMap1234 {
			yyl353 := r.ReadMapStart()
			if yyl353 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl353, d)
			}
		} else if yyct353 == codecSelferValueTypeArray1234 {
			yyl353 := r.ReadArrayStart()
			if yyl353 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl353, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys354Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys354Slc
	var yyhl354 bool = l >= 0
	for yyj354 := 0; ; yyj354++ {
		if yyhl354 {
			if yyj354 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys354Slc = r.DecodeBytes(yys354Slc, true, true)
		yys354 := string(yys354Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys354 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv357 := &x.ObjectMeta
				yyv357.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv358 := &x.Spec
				yyv358.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv359 := &x.Status
				yyv359.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys354)
		} // end switch yys354
	} // end for yyj354
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj360 int
	var yyb360 bool
	var yyhl360 bool = l >= 0
	yyj360++
	if yyhl360 {
		yyb360 = yyj360 > l
	} else {
		yyb360 = r.CheckBreak()
	}
	if yyb360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj360++
	if yyhl360 {
		yyb360 = yyj360 > l
	} else {
		yyb360 = r.CheckBreak()
	}
	if yyb360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj360++
	if yyhl360 {
		yyb360 = yyj360 > l
	} else {
		yyb360 = r.CheckBreak()
	}
	if yyb360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv363 := &x.ObjectMeta
		yyv363.CodecDecodeSelf(d)
	}
	yyj360++
	if yyhl360 {
		yyb360 = yyj360 > l
	} else {
		yyb360 = r.CheckBreak()
	}
	if yyb360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv364 := &x.Spec
		yyv364.CodecDecodeSelf(d)
	}
	yyj360++
	if yyhl360 {
		yyb360 = yyj360 > l
	} else {
		yyb360 = r.CheckBreak()
	}
	if yyb360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv365 := &x.Status
		yyv365.CodecDecodeSelf(d)
	}
	for {
		yyj360++
		if yyhl360 {
			yyb360 = yyj360 > l
		} else {
			yyb360 = r.CheckBreak()
		}
		if yyb360 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj360-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym366 := z.EncBinary()
		_ = yym366
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep367 := !z.EncBinary()
			yy2arr367 := z.EncBasicHandle().StructToArray
			var yyq367 [21]bool
			_, _, _ = yysep367, yyq367, yy2arr367
			const yyr367 bool = false
			yyq367[0] = len(x.Capacity) != 0
			yyq367[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq367[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq367[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq367[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq367[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq367[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq367[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq367[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq367[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq367[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq367[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq367[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq367[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq367[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq367[15] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq367[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq367[17] = x.PersistentVolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq367[18] = len(x.AccessModes) != 0
			yyq367[19] = x.ClaimRef != nil
			yyq367[20] = x.PersistentVolumeReclaimPolicy != ""
			var yynn367 int
			if yyr367 || yy2arr367 {
				r.EncodeArrayStart(21)
			} else {
				yynn367 = 0
				for _, b := range yyq367 {
					if b {
						yynn367++
					}
				}
				r.EncodeMapStart(yynn367)
				yynn367 = 0
			}
			if yyr367 || yy2arr367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq367[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq367[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn369 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn369 = true
				goto LABEL369
			}
		LABEL369:
			if yyr367 || yy2arr367 {
				if yyn369 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn369 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn370 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn370 = true
				goto LABEL370
			}
		LABEL370:
			if yyr367 || yy2arr367 {
				if yyn370 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn370 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn371 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn371 = true
				goto LABEL371
			}
		LABEL371:
			if yyr367 || yy2arr367 {
				if yyn371 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn371 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn372 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn372 = true
				goto LABEL372
			}
		LABEL372:
			if yyr367 || yy2arr367 {
				if yyn372 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn372 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn373 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn373 = true
				goto LABEL373
			}
		LABEL373:
			if yyr367 || yy2arr367 {
				if yyn373 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn373 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn374 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn374 = true
				goto LABEL374
			}
		LABEL374:
			if yyr367 || yy2arr367 {
				if yyn374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn374 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn375 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn375 = true
				goto LABEL375
			}
		LABEL375:
			if yyr367 || yy2arr367 {
				if yyn375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn375 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn376 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn376 = true
				goto LABEL376
			}
		LABEL376:
			if yyr367 || yy2arr367 {
				if yyn376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn376 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn377 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn377 = true
				goto LABEL377
			}
		LABEL377:
			if yyr367 || yy2arr367 {
				if yyn377 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn377 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn378 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn378 = true
				goto LABEL378
			}
		LABEL378:
			if yyr367 || yy2arr367 {
				if yyn378 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn378 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn379 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn379 = true
				goto LABEL379
			}
		LABEL379:
			if yyr367 || yy2arr367 {
				if yyn379 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn379 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn380 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn380 = true
				goto LABEL380
			}
		LABEL380:
			if yyr367 || yy2arr367 {
				if yyn380 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn380 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn381 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn381 = true
				goto LABEL381
			}
		LABEL381:
			if yyr367 || yy2arr367 {
				if yyn381 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn381 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn382 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn382 = true
				goto LABEL382
			}
		LABEL382:
			if yyr367 || yy2arr367 {
				if yyn382 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn382 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn383 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn383 = true
				goto LABEL383
			}
		LABEL383:
			if yyr367 || yy2arr367 {
				if yyn383 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[15] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn383 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn384 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn384 = true
				goto LABEL384
			}
		LABEL384:
			if yyr367 || yy2arr367 {
				if yyn384 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn384 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn385 bool
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				yyn385 = true
				goto LABEL385
			}
		LABEL385:
			if yyr367 || yy2arr367 {
				if yyn385 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq367[17] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq367[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn385 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr367 || yy2arr367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq367[18] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym387 := z.EncBinary()
						_ = yym387
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq367[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym388 := z.EncBinary()
						_ = yym388
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr367 || yy2arr367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq367[19] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq367[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr367 || yy2arr367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq367[20] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq367[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr367 || yy2arr367 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym391 := z.DecBinary()
	_ = yym391
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct392 := r.ContainerType()
		if yyct392 == codecSelferValueTypeMap1234 {
			yyl392 := r.ReadMapStart()
			if yyl392 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl392, d)
			}
		} else if yyct392 == codecSelferValueTypeArray1234 {
			yyl392 := r.ReadArrayStart()
			if yyl392 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl392, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys393Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys393Slc
	var yyhl393 bool = l >= 0
	for yyj393 := 0; ; yyj393++ {
		if yyhl393 {
			if yyj393 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys393Slc = r.DecodeBytes(yys393Slc, true, true)
		yys393 := string(yys393Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys393 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv394 := &x.Capacity
				yyv394.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv412 := &x.AccessModes
				yym413 := z.DecBinary()
				_ = yym413
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv412), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys393)
		} // end switch yys393
	} // end for yyj393
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj416 int
	var yyb416 bool
	var yyhl416 bool = l >= 0
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv417 := &x.Capacity
		yyv417.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
		x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv435 := &x.AccessModes
		yym436 := z.DecBinary()
		_ = yym436
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv435), d)
		}
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj416++
		if yyhl416 {
			yyb416 = yyj416 > l
		} else {
			yyb416 = r.CheckBreak()
		}
		if yyb416 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj416-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym439 := z.EncBinary()
	_ = yym439
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym440 := z.DecBinary()
	_ = yym440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym441 := z.EncBinary()
		_ = yym441
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep442 := !z.EncBinary()
			yy2arr442 := z.EncBasicHandle().StructToArray
			var yyq442 [3]bool
			_, _, _ = yysep442, yyq442, yy2arr442
			const yyr442 bool = false
			yyq442[0] = x.Phase != ""
			yyq442[1] = x.Message != ""
			yyq442[2] = x.Reason != ""
			var yynn442 int
			if yyr442 || yy2arr442 {
				r.EncodeArrayStart(3)
			} else {
				yynn442 = 0
				for _, b := range yyq442 {
					if b {
						yynn442++
					}
				}
				r.EncodeMapStart(yynn442)
				yynn442 = 0
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq442[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[1] {
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq442[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym446 := z.EncBinary()
					_ = yym446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[2] {
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq442[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym449 := z.EncBinary()
					_ = yym449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym450 := z.DecBinary()
	_ = yym450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct451 := r.ContainerType()
		if yyct451 == codecSelferValueTypeMap1234 {
			yyl451 := r.ReadMapStart()
			if yyl451 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl451, d)
			}
		} else if yyct451 == codecSelferValueTypeArray1234 {
			yyl451 := r.ReadArrayStart()
			if yyl451 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl451, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys452Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys452Slc
	var yyhl452 bool = l >= 0
	for yyj452 := 0; ; yyj452++ {
		if yyhl452 {
			if yyj452 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys452Slc = r.DecodeBytes(yys452Slc, true, true)
		yys452 := string(yys452Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys452 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys452)
		} // end switch yys452
	} // end for yyj452
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj456 int
	var yyb456 bool
	var yyhl456 bool = l >= 0
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj456++
		if yyhl456 {
			yyb456 = yyj456 > l
		} else {
			yyb456 = r.CheckBreak()
		}
		if yyb456 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj456-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym460 := z.EncBinary()
		_ = yym460
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep461 := !z.EncBinary()
			yy2arr461 := z.EncBasicHandle().StructToArray
			var yyq461 [4]bool
			_, _, _ = yysep461, yyq461, yy2arr461
			const yyr461 bool = false
			yyq461[0] = x.Kind != ""
			yyq461[1] = x.APIVersion != ""
			yyq461[2] = true
			var yynn461 int
			if yyr461 || yy2arr461 {
				r.EncodeArrayStart(4)
			} else {
				yynn461 = 1
				for _, b := range yyq461 {
					if b {
						yynn461++
					}
				}
				r.EncodeMapStart(yynn461)
				yynn461 = 0
			}
			if yyr461 || yy2arr461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq461[0] {
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq461[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym464 := z.EncBinary()
					_ = yym464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr461 || yy2arr461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq461[1] {
					yym466 := z.EncBinary()
					_ = yym466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq461[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr461 || yy2arr461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq461[2] {
					yy469 := &x.ListMeta
					yym470 := z.EncBinary()
					_ = yym470
					if false {
					} else if z.HasExtensions() && z.EncExt(yy469) {
					} else {
						z.EncFallback(yy469)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq461[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy471 := &x.ListMeta
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else if z.HasExtensions() && z.EncExt(yy471) {
					} else {
						z.EncFallback(yy471)
					}
				}
			}
			if yyr461 || yy2arr461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym474 := z.EncBinary()
					_ = yym474
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym475 := z.EncBinary()
					_ = yym475
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr461 || yy2arr461 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym476 := z.DecBinary()
	_ = yym476
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct477 := r.ContainerType()
		if yyct477 == codecSelferValueTypeMap1234 {
			yyl477 := r.ReadMapStart()
			if yyl477 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl477, d)
			}
		} else if yyct477 == codecSelferValueTypeArray1234 {
			yyl477 := r.ReadArrayStart()
			if yyl477 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl477, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys478Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys478Slc
	var yyhl478 bool = l >= 0
	for yyj478 := 0; ; yyj478++ {
		if yyhl478 {
			if yyj478 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys478Slc = r.DecodeBytes(yys478Slc, true, true)
		yys478 := string(yys478Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys478 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv481 := &x.ListMeta
				yym482 := z.DecBinary()
				_ = yym482
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv481) {
				} else {
					z.DecFallback(yyv481, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv483 := &x.Items
				yym484 := z.DecBinary()
				_ = yym484
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv483), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys478)
		} // end switch yys478
	} // end for yyj478
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj485 int
	var yyb485 bool
	var yyhl485 bool = l >= 0
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv488 := &x.ListMeta
		yym489 := z.DecBinary()
		_ = yym489
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv488) {
		} else {
			z.DecFallback(yyv488, false)
		}
	}
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv490 := &x.Items
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv490), d)
		}
	}
	for {
		yyj485++
		if yyhl485 {
			yyb485 = yyj485 > l
		} else {
			yyb485 = r.CheckBreak()
		}
		if yyb485 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj485-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym492 := z.EncBinary()
		_ = yym492
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep493 := !z.EncBinary()
			yy2arr493 := z.EncBasicHandle().StructToArray
			var yyq493 [5]bool
			_, _, _ = yysep493, yyq493, yy2arr493
			const yyr493 bool = false
			yyq493[0] = x.Kind != ""
			yyq493[1] = x.APIVersion != ""
			yyq493[2] = true
			yyq493[3] = true
			yyq493[4] = true
			var yynn493 int
			if yyr493 || yy2arr493 {
				r.EncodeArrayStart(5)
			} else {
				yynn493 = 0
				for _, b := range yyq493 {
					if b {
						yynn493++
					}
				}
				r.EncodeMapStart(yynn493)
				yynn493 = 0
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[0] {
					yym495 := z.EncBinary()
					_ = yym495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq493[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym496 := z.EncBinary()
					_ = yym496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[1] {
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq493[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[2] {
					yy501 := &x.ObjectMeta
					yy501.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq493[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy502 := &x.ObjectMeta
					yy502.CodecEncodeSelf(e)
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[3] {
					yy504 := &x.Spec
					yy504.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq493[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy505 := &x.Spec
					yy505.CodecEncodeSelf(e)
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[4] {
					yy507 := &x.Status
					yy507.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq493[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy508 := &x.Status
					yy508.CodecEncodeSelf(e)
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym509 := z.DecBinary()
	_ = yym509
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct510 := r.ContainerType()
		if yyct510 == codecSelferValueTypeMap1234 {
			yyl510 := r.ReadMapStart()
			if yyl510 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl510, d)
			}
		} else if yyct510 == codecSelferValueTypeArray1234 {
			yyl510 := r.ReadArrayStart()
			if yyl510 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl510, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys511Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys511Slc
	var yyhl511 bool = l >= 0
	for yyj511 := 0; ; yyj511++ {
		if yyhl511 {
			if yyj511 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys511Slc = r.DecodeBytes(yys511Slc, true, true)
		yys511 := string(yys511Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys511 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv514 := &x.ObjectMeta
				yyv514.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv515 := &x.Spec
				yyv515.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv516 := &x.Status
				yyv516.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys511)
		} // end switch yys511
	} // end for yyj511
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv520 := &x.ObjectMeta
		yyv520.CodecDecodeSelf(d)
	}
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv521 := &x.Spec
		yyv521.CodecDecodeSelf(d)
	}
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv522 := &x.Status
		yyv522.CodecDecodeSelf(d)
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym523 := z.EncBinary()
		_ = yym523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep524 := !z.EncBinary()
			yy2arr524 := z.EncBasicHandle().StructToArray
			var yyq524 [4]bool
			_, _, _ = yysep524, yyq524, yy2arr524
			const yyr524 bool = false
			yyq524[0] = x.Kind != ""
			yyq524[1] = x.APIVersion != ""
			yyq524[2] = true
			var yynn524 int
			if yyr524 || yy2arr524 {
				r.EncodeArrayStart(4)
			} else {
				yynn524 = 1
				for _, b := range yyq524 {
					if b {
						yynn524++
					}
				}
				r.EncodeMapStart(yynn524)
				yynn524 = 0
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[0] {
					yym526 := z.EncBinary()
					_ = yym526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq524[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym527 := z.EncBinary()
					_ = yym527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[1] {
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq524[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[2] {
					yy532 := &x.ListMeta
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else if z.HasExtensions() && z.EncExt(yy532) {
					} else {
						z.EncFallback(yy532)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq524[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy534 := &x.ListMeta
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else if z.HasExtensions() && z.EncExt(yy534) {
					} else {
						z.EncFallback(yy534)
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym537 := z.EncBinary()
					_ = yym537
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym538 := z.EncBinary()
					_ = yym538
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym539 := z.DecBinary()
	_ = yym539
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct540 := r.ContainerType()
		if yyct540 == codecSelferValueTypeMap1234 {
			yyl540 := r.ReadMapStart()
			if yyl540 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl540, d)
			}
		} else if yyct540 == codecSelferValueTypeArray1234 {
			yyl540 := r.ReadArrayStart()
			if yyl540 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl540, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys541Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys541Slc
	var yyhl541 bool = l >= 0
	for yyj541 := 0; ; yyj541++ {
		if yyhl541 {
			if yyj541 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys541Slc = r.DecodeBytes(yys541Slc, true, true)
		yys541 := string(yys541Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys541 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv544 := &x.ListMeta
				yym545 := z.DecBinary()
				_ = yym545
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv544) {
				} else {
					z.DecFallback(yyv544, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv546 := &x.Items
				yym547 := z.DecBinary()
				_ = yym547
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv546), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys541)
		} // end switch yys541
	} // end for yyj541
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj548 int
	var yyb548 bool
	var yyhl548 bool = l >= 0
	yyj548++
	if yyhl548 {
		yyb548 = yyj548 > l
	} else {
		yyb548 = r.CheckBreak()
	}
	if yyb548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj548++
	if yyhl548 {
		yyb548 = yyj548 > l
	} else {
		yyb548 = r.CheckBreak()
	}
	if yyb548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj548++
	if yyhl548 {
		yyb548 = yyj548 > l
	} else {
		yyb548 = r.CheckBreak()
	}
	if yyb548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv551 := &x.ListMeta
		yym552 := z.DecBinary()
		_ = yym552
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv551) {
		} else {
			z.DecFallback(yyv551, false)
		}
	}
	yyj548++
	if yyhl548 {
		yyb548 = yyj548 > l
	} else {
		yyb548 = r.CheckBreak()
	}
	if yyb548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv553 := &x.Items
		yym554 := z.DecBinary()
		_ = yym554
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv553), d)
		}
	}
	for {
		yyj548++
		if yyhl548 {
			yyb548 = yyj548 > l
		} else {
			yyb548 = r.CheckBreak()
		}
		if yyb548 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj548-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym555 := z.EncBinary()
		_ = yym555
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep556 := !z.EncBinary()
			yy2arr556 := z.EncBasicHandle().StructToArray
			var yyq556 [4]bool
			_, _, _ = yysep556, yyq556, yy2arr556
			const yyr556 bool = false
			yyq556[0] = len(x.AccessModes) != 0
			yyq556[1] = x.Selector != nil
			yyq556[2] = true
			yyq556[3] = x.VolumeName != ""
			var yynn556 int
			if yyr556 || yy2arr556 {
				r.EncodeArrayStart(4)
			} else {
				yynn556 = 0
				for _, b := range yyq556 {
					if b {
						yynn556++
					}
				}
				r.EncodeMapStart(yynn556)
				yynn556 = 0
			}
			if yyr556 || yy2arr556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq556[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym558 := z.EncBinary()
						_ = yym558
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq556[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym559 := z.EncBinary()
						_ = yym559
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr556 || yy2arr556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq556[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym561 := z.EncBinary()
						_ = yym561
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq556[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym562 := z.EncBinary()
						_ = yym562
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr556 || yy2arr556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq556[2] {
					yy564 := &x.Resources
					yy564.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq556[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy565 := &x.Resources
					yy565.CodecEncodeSelf(e)
				}
			}
			if yyr556 || yy2arr556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq556[3] {
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq556[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym568 := z.EncBinary()
					_ = yym568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr556 || yy2arr556 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym569 := z.DecBinary()
	_ = yym569
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct570 := r.ContainerType()
		if yyct570 == codecSelferValueTypeMap1234 {
			yyl570 := r.ReadMapStart()
			if yyl570 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl570, d)
			}
		} else if yyct570 == codecSelferValueTypeArray1234 {
			yyl570 := r.ReadArrayStart()
			if yyl570 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl570, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys571Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys571Slc
	var yyhl571 bool = l >= 0
	for yyj571 := 0; ; yyj571++ {
		if yyhl571 {
			if yyj571 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys571Slc = r.DecodeBytes(yys571Slc, true, true)
		yys571 := string(yys571Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys571 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv572 := &x.AccessModes
				yym573 := z.DecBinary()
				_ = yym573
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv572), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym575 := z.DecBinary()
				_ = yym575
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv576 := &x.Resources
				yyv576.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys571)
		} // end switch yys571
	} // end for yyj571
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj578 int
	var yyb578 bool
	var yyhl578 bool = l >= 0
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv579 := &x.AccessModes
		yym580 := z.DecBinary()
		_ = yym580
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv579), d)
		}
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym582 := z.DecBinary()
		_ = yym582
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv583 := &x.Resources
		yyv583.CodecDecodeSelf(d)
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj578++
		if yyhl578 {
			yyb578 = yyj578 > l
		} else {
			yyb578 = r.CheckBreak()
		}
		if yyb578 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj578-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym585 := z.EncBinary()
		_ = yym585
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep586 := !z.EncBinary()
			yy2arr586 := z.EncBasicHandle().StructToArray
			var yyq586 [3]bool
			_, _, _ = yysep586, yyq586, yy2arr586
			const yyr586 bool = false
			yyq586[0] = x.Phase != ""
			yyq586[1] = len(x.AccessModes) != 0
			yyq586[2] = len(x.Capacity) != 0
			var yynn586 int
			if yyr586 || yy2arr586 {
				r.EncodeArrayStart(3)
			} else {
				yynn586 = 0
				for _, b := range yyq586 {
					if b {
						yynn586++
					}
				}
				r.EncodeMapStart(yynn586)
				yynn586 = 0
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq586[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq586[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq586[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym589 := z.EncBinary()
						_ = yym589
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq586[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym590 := z.EncBinary()
						_ = yym590
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq586[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq586[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym592 := z.DecBinary()
	_ = yym592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct593 := r.ContainerType()
		if yyct593 == codecSelferValueTypeMap1234 {
			yyl593 := r.ReadMapStart()
			if yyl593 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl593, d)
			}
		} else if yyct593 == codecSelferValueTypeArray1234 {
			yyl593 := r.ReadArrayStart()
			if yyl593 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys594Slc
	var yyhl594 bool = l >= 0
	for yyj594 := 0; ; yyj594++ {
		if yyhl594 {
			if yyj594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys594Slc = r.DecodeBytes(yys594Slc, true, true)
		yys594 := string(yys594Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys594 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv596 := &x.AccessModes
				yym597 := z.DecBinary()
				_ = yym597
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv596), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv598 := &x.Capacity
				yyv598.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys594)
		} // end switch yys594
	} // end for yyj594
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj599 int
	var yyb599 bool
	var yyhl599 bool = l >= 0
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv601 := &x.AccessModes
		yym602 := z.DecBinary()
		_ = yym602
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv601), d)
		}
	}
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv603 := &x.Capacity
		yyv603.CodecDecodeSelf(d)
	}
	for {
		yyj599++
		if yyhl599 {
			yyb599 = yyj599 > l
		} else {
			yyb599 = r.CheckBreak()
		}
		if yyb599 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj599-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym604 := z.EncBinary()
	_ = yym604
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym605 := z.DecBinary()
	_ = yym605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym606 := z.EncBinary()
	_ = yym606
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym607 := z.DecBinary()
	_ = yym607
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym608 := z.EncBinary()
	_ = yym608
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym609 := z.DecBinary()
	_ = yym609
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym610 := z.EncBinary()
		_ = yym610
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep611 := !z.EncBinary()
			yy2arr611 := z.EncBasicHandle().StructToArray
			var yyq611 [1]bool
			_, _, _ = yysep611, yyq611, yy2arr611
			const yyr611 bool = false
			var yynn611 int
			if yyr611 || yy2arr611 {
				r.EncodeArrayStart(1)
			} else {
				yynn611 = 1
				for _, b := range yyq611 {
					if b {
						yynn611++
					}
				}
				r.EncodeMapStart(yynn611)
				yynn611 = 0
			}
			if yyr611 || yy2arr611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym613 := z.EncBinary()
				_ = yym613
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym614 := z.EncBinary()
				_ = yym614
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr611 || yy2arr611 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym615 := z.DecBinary()
	_ = yym615
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct616 := r.ContainerType()
		if yyct616 == codecSelferValueTypeMap1234 {
			yyl616 := r.ReadMapStart()
			if yyl616 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl616, d)
			}
		} else if yyct616 == codecSelferValueTypeArray1234 {
			yyl616 := r.ReadArrayStart()
			if yyl616 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl616, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys617Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys617Slc
	var yyhl617 bool = l >= 0
	for yyj617 := 0; ; yyj617++ {
		if yyhl617 {
			if yyj617 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys617Slc = r.DecodeBytes(yys617Slc, true, true)
		yys617 := string(yys617Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys617 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys617)
		} // end switch yys617
	} // end for yyj617
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj619 int
	var yyb619 bool
	var yyhl619 bool = l >= 0
	yyj619++
	if yyhl619 {
		yyb619 = yyj619 > l
	} else {
		yyb619 = r.CheckBreak()
	}
	if yyb619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj619++
		if yyhl619 {
			yyb619 = yyj619 > l
		} else {
			yyb619 = r.CheckBreak()
		}
		if yyb619 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj619-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym621 := z.EncBinary()
		_ = yym621
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep622 := !z.EncBinary()
			yy2arr622 := z.EncBasicHandle().StructToArray
			var yyq622 [1]bool
			_, _, _ = yysep622, yyq622, yy2arr622
			const yyr622 bool = false
			yyq622[0] = x.Medium != ""
			var yynn622 int
			if yyr622 || yy2arr622 {
				r.EncodeArrayStart(1)
			} else {
				yynn622 = 0
				for _, b := range yyq622 {
					if b {
						yynn622++
					}
				}
				r.EncodeMapStart(yynn622)
				yynn622 = 0
			}
			if yyr622 || yy2arr622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq622[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq622[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr622 || yy2arr622 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct625 := r.ContainerType()
		if yyct625 == codecSelferValueTypeMap1234 {
			yyl625 := r.ReadMapStart()
			if yyl625 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl625, d)
			}
		} else if yyct625 == codecSelferValueTypeArray1234 {
			yyl625 := r.ReadArrayStart()
			if yyl625 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys626Slc
	var yyhl626 bool = l >= 0
	for yyj626 := 0; ; yyj626++ {
		if yyhl626 {
			if yyj626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys626Slc = r.DecodeBytes(yys626Slc, true, true)
		yys626 := string(yys626Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys626 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys626)
		} // end switch yys626
	} // end for yyj626
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj628 int
	var yyb628 bool
	var yyhl628 bool = l >= 0
	yyj628++
	if yyhl628 {
		yyb628 = yyj628 > l
	} else {
		yyb628 = r.CheckBreak()
	}
	if yyb628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj628++
		if yyhl628 {
			yyb628 = yyj628 > l
		} else {
			yyb628 = r.CheckBreak()
		}
		if yyb628 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj628-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym630 := z.EncBinary()
		_ = yym630
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep631 := !z.EncBinary()
			yy2arr631 := z.EncBasicHandle().StructToArray
			var yyq631 [3]bool
			_, _, _ = yysep631, yyq631, yy2arr631
			const yyr631 bool = false
			yyq631[2] = x.ReadOnly != false
			var yynn631 int
			if yyr631 || yy2arr631 {
				r.EncodeArrayStart(3)
			} else {
				yynn631 = 2
				for _, b := range yyq631 {
					if b {
						yynn631++
					}
				}
				r.EncodeMapStart(yynn631)
				yynn631 = 0
			}
			if yyr631 || yy2arr631 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym633 := z.EncBinary()
				_ = yym633
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym634 := z.EncBinary()
				_ = yym634
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr631 || yy2arr631 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym636 := z.EncBinary()
				_ = yym636
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym637 := z.EncBinary()
				_ = yym637
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr631 || yy2arr631 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq631[2] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq631[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr631 || yy2arr631 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym641 := z.DecBinary()
	_ = yym641
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct642 := r.ContainerType()
		if yyct642 == codecSelferValueTypeMap1234 {
			yyl642 := r.ReadMapStart()
			if yyl642 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl642, d)
			}
		} else if yyct642 == codecSelferValueTypeArray1234 {
			yyl642 := r.ReadArrayStart()
			if yyl642 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl642, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys643Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys643Slc
	var yyhl643 bool = l >= 0
	for yyj643 := 0; ; yyj643++ {
		if yyhl643 {
			if yyj643 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys643Slc = r.DecodeBytes(yys643Slc, true, true)
		yys643 := string(yys643Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys643 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys643)
		} // end switch yys643
	} // end for yyj643
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj647 int
	var yyb647 bool
	var yyhl647 bool = l >= 0
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj647++
		if yyhl647 {
			yyb647 = yyj647 > l
		} else {
			yyb647 = r.CheckBreak()
		}
		if yyb647 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj647-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym651 := z.EncBinary()
		_ = yym651
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep652 := !z.EncBinary()
			yy2arr652 := z.EncBasicHandle().StructToArray
			var yyq652 [8]bool
			_, _, _ = yysep652, yyq652, yy2arr652
			const yyr652 bool = false
			yyq652[2] = x.FSType != ""
			yyq652[3] = x.RBDPool != ""
			yyq652[4] = x.RadosUser != ""
			yyq652[5] = x.Keyring != ""
			yyq652[6] = x.SecretRef != nil
			yyq652[7] = x.ReadOnly != false
			var yynn652 int
			if yyr652 || yy2arr652 {
				r.EncodeArrayStart(8)
			} else {
				yynn652 = 2
				for _, b := range yyq652 {
					if b {
						yynn652++
					}
				}
				r.EncodeMapStart(yynn652)
				yynn652 = 0
			}
			if yyr652 || yy2arr652 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym654 := z.EncBinary()
					_ = yym654
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr652 || yy2arr652 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym658 := z.EncBinary()
				_ = yym658
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr652 || yy2arr652 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq652[2] {
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq652[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym661 := z.EncBinary()
					_ = yym661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr652 || yy2arr652 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq652[3] {
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq652[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym664 := z.EncBinary()
					_ = yym664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr652 || yy2arr652 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq652[4] {
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq652[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym667 := z.EncBinary()
					_ = yym667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr652 || yy2arr652 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq652[5] {
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq652[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym670 := z.EncBinary()
					_ = yym670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr652 || yy2arr652 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq652[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq652[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr652 || yy2arr652 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq652[7] {
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq652[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr652 || yy2arr652 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym675 := z.DecBinary()
	_ = yym675
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct676 := r.ContainerType()
		if yyct676 == codecSelferValueTypeMap1234 {
			yyl676 := r.ReadMapStart()
			if yyl676 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl676, d)
			}
		} else if yyct676 == codecSelferValueTypeArray1234 {
			yyl676 := r.ReadArrayStart()
			if yyl676 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl676, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys677Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys677Slc
	var yyhl677 bool = l >= 0
	for yyj677 := 0; ; yyj677++ {
		if yyhl677 {
			if yyj677 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys677Slc = r.DecodeBytes(yys677Slc, true, true)
		yys677 := string(yys677Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys677 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv678 := &x.CephMonitors
				yym679 := z.DecBinary()
				_ = yym679
				if false {
				} else {
					z.F.DecSliceStringX(yyv678, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys677)
		} // end switch yys677
	} // end for yyj677
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj687 int
	var yyb687 bool
	var yyhl687 bool = l >= 0
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv688 := &x.CephMonitors
		yym689 := z.DecBinary()
		_ = yym689
		if false {
		} else {
			z.F.DecSliceStringX(yyv688, false, d)
		}
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj687++
		if yyhl687 {
			yyb687 = yyj687 > l
		} else {
			yyb687 = r.CheckBreak()
		}
		if yyb687 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj687-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym697 := z.EncBinary()
		_ = yym697
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep698 := !z.EncBinary()
			yy2arr698 := z.EncBasicHandle().StructToArray
			var yyq698 [3]bool
			_, _, _ = yysep698, yyq698, yy2arr698
			const yyr698 bool = false
			yyq698[1] = x.FSType != ""
			yyq698[2] = x.ReadOnly != false
			var yynn698 int
			if yyr698 || yy2arr698 {
				r.EncodeArrayStart(3)
			} else {
				yynn698 = 1
				for _, b := range yyq698 {
					if b {
						yynn698++
					}
				}
				r.EncodeMapStart(yynn698)
				yynn698 = 0
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym700 := z.EncBinary()
				_ = yym700
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym701 := z.EncBinary()
				_ = yym701
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[1] {
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq698[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[2] {
					yym706 := z.EncBinary()
					_ = yym706
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq698[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym707 := z.EncBinary()
					_ = yym707
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym708 := z.DecBinary()
	_ = yym708
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct709 := r.ContainerType()
		if yyct709 == codecSelferValueTypeMap1234 {
			yyl709 := r.ReadMapStart()
			if yyl709 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl709, d)
			}
		} else if yyct709 == codecSelferValueTypeArray1234 {
			yyl709 := r.ReadArrayStart()
			if yyl709 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl709, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys710Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys710Slc
	var yyhl710 bool = l >= 0
	for yyj710 := 0; ; yyj710++ {
		if yyhl710 {
			if yyj710 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys710Slc = r.DecodeBytes(yys710Slc, true, true)
		yys710 := string(yys710Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys710 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys710)
		} // end switch yys710
	} // end for yyj710
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj714 int
	var yyb714 bool
	var yyhl714 bool = l >= 0
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj714++
		if yyhl714 {
			yyb714 = yyj714 > l
		} else {
			yyb714 = r.CheckBreak()
		}
		if yyb714 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj714-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym718 := z.EncBinary()
		_ = yym718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep719 := !z.EncBinary()
			yy2arr719 := z.EncBasicHandle().StructToArray
			var yyq719 [6]bool
			_, _, _ = yysep719, yyq719, yy2arr719
			const yyr719 bool = false
			yyq719[1] = x.Path != ""
			yyq719[2] = x.User != ""
			yyq719[3] = x.SecretFile != ""
			yyq719[4] = x.SecretRef != nil
			yyq719[5] = x.ReadOnly != false
			var yynn719 int
			if yyr719 || yy2arr719 {
				r.EncodeArrayStart(6)
			} else {
				yynn719 = 1
				for _, b := range yyq719 {
					if b {
						yynn719++
					}
				}
				r.EncodeMapStart(yynn719)
				yynn719 = 0
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym722 := z.EncBinary()
					_ = yym722
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq719[1] {
					yym724 := z.EncBinary()
					_ = yym724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq719[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym725 := z.EncBinary()
					_ = yym725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq719[2] {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq719[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq719[3] {
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq719[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym731 := z.EncBinary()
					_ = yym731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq719[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq719[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq719[5] {
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq719[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym735 := z.EncBinary()
					_ = yym735
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym736 := z.DecBinary()
	_ = yym736
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct737 := r.ContainerType()
		if yyct737 == codecSelferValueTypeMap1234 {
			yyl737 := r.ReadMapStart()
			if yyl737 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl737, d)
			}
		} else if yyct737 == codecSelferValueTypeArray1234 {
			yyl737 := r.ReadArrayStart()
			if yyl737 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl737, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys738Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys738Slc
	var yyhl738 bool = l >= 0
	for yyj738 := 0; ; yyj738++ {
		if yyhl738 {
			if yyj738 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys738Slc = r.DecodeBytes(yys738Slc, true, true)
		yys738 := string(yys738Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys738 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv739 := &x.Monitors
				yym740 := z.DecBinary()
				_ = yym740
				if false {
				} else {
					z.F.DecSliceStringX(yyv739, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys738)
		} // end switch yys738
	} // end for yyj738
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj746 int
	var yyb746 bool
	var yyhl746 bool = l >= 0
	yyj746++
	if yyhl746 {
		yyb746 = yyj746 > l
	} else {
		yyb746 = r.CheckBreak()
	}
	if yyb746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv747 := &x.Monitors
		yym748 := z.DecBinary()
		_ = yym748
		if false {
		} else {
			z.F.DecSliceStringX(yyv747, false, d)
		}
	}
	yyj746++
	if yyhl746 {
		yyb746 = yyj746 > l
	} else {
		yyb746 = r.CheckBreak()
	}
	if yyb746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj746++
	if yyhl746 {
		yyb746 = yyj746 > l
	} else {
		yyb746 = r.CheckBreak()
	}
	if yyb746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj746++
	if yyhl746 {
		yyb746 = yyj746 > l
	} else {
		yyb746 = r.CheckBreak()
	}
	if yyb746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj746++
	if yyhl746 {
		yyb746 = yyj746 > l
	} else {
		yyb746 = r.CheckBreak()
	}
	if yyb746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj746++
	if yyhl746 {
		yyb746 = yyj746 > l
	} else {
		yyb746 = r.CheckBreak()
	}
	if yyb746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj746++
		if yyhl746 {
			yyb746 = yyj746 > l
		} else {
			yyb746 = r.CheckBreak()
		}
		if yyb746 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj746-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym754 := z.EncBinary()
		_ = yym754
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep755 := !z.EncBinary()
			yy2arr755 := z.EncBasicHandle().StructToArray
			var yyq755 [2]bool
			_, _, _ = yysep755, yyq755, yy2arr755
			const yyr755 bool = false
			yyq755[0] = x.DatasetName != ""
			yyq755[1] = x.DatasetUUID != ""
			var yynn755 int
			if yyr755 || yy2arr755 {
				r.EncodeArrayStart(2)
			} else {
				yynn755 = 0
				for _, b := range yyq755 {
					if b {
						yynn755++
					}
				}
				r.EncodeMapStart(yynn755)
				yynn755 = 0
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq755[0] {
					yym757 := z.EncBinary()
					_ = yym757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq755[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym758 := z.EncBinary()
					_ = yym758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				}
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq755[1] {
					yym760 := z.EncBinary()
					_ = yym760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq755[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetUUID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym761 := z.EncBinary()
					_ = yym761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				}
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym762 := z.DecBinary()
	_ = yym762
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct763 := r.ContainerType()
		if yyct763 == codecSelferValueTypeMap1234 {
			yyl763 := r.ReadMapStart()
			if yyl763 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl763, d)
			}
		} else if yyct763 == codecSelferValueTypeArray1234 {
			yyl763 := r.ReadArrayStart()
			if yyl763 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl763, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys764Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys764Slc
	var yyhl764 bool = l >= 0
	for yyj764 := 0; ; yyj764++ {
		if yyhl764 {
			if yyj764 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys764Slc = r.DecodeBytes(yys764Slc, true, true)
		yys764 := string(yys764Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys764 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		case "datasetUUID":
			if r.TryDecodeAsNil() {
				x.DatasetUUID = ""
			} else {
				x.DatasetUUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys764)
		} // end switch yys764
	} // end for yyj764
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj767 int
	var yyb767 bool
	var yyhl767 bool = l >= 0
	yyj767++
	if yyhl767 {
		yyb767 = yyj767 > l
	} else {
		yyb767 = r.CheckBreak()
	}
	if yyb767 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	yyj767++
	if yyhl767 {
		yyb767 = yyj767 > l
	} else {
		yyb767 = r.CheckBreak()
	}
	if yyb767 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetUUID = ""
	} else {
		x.DatasetUUID = string(r.DecodeString())
	}
	for {
		yyj767++
		if yyhl767 {
			yyb767 = yyj767 > l
		} else {
			yyb767 = r.CheckBreak()
		}
		if yyb767 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj767-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym770 := z.EncBinary()
	_ = yym770
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym771 := z.DecBinary()
	_ = yym771
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym772 := z.EncBinary()
	_ = yym772
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym773 := z.DecBinary()
	_ = yym773
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym774 := z.EncBinary()
		_ = yym774
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep775 := !z.EncBinary()
			yy2arr775 := z.EncBasicHandle().StructToArray
			var yyq775 [4]bool
			_, _, _ = yysep775, yyq775, yy2arr775
			const yyr775 bool = false
			yyq775[1] = x.FSType != ""
			yyq775[2] = x.Partition != 0
			yyq775[3] = x.ReadOnly != false
			var yynn775 int
			if yyr775 || yy2arr775 {
				r.EncodeArrayStart(4)
			} else {
				yynn775 = 1
				for _, b := range yyq775 {
					if b {
						yynn775++
					}
				}
				r.EncodeMapStart(yynn775)
				yynn775 = 0
			}
			if yyr775 || yy2arr775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym777 := z.EncBinary()
				_ = yym777
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym778 := z.EncBinary()
				_ = yym778
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr775 || yy2arr775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq775[1] {
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq775[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym781 := z.EncBinary()
					_ = yym781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr775 || yy2arr775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq775[2] {
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq775[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr775 || yy2arr775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq775[3] {
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq775[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr775 || yy2arr775 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym788 := z.DecBinary()
	_ = yym788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct789 := r.ContainerType()
		if yyct789 == codecSelferValueTypeMap1234 {
			yyl789 := r.ReadMapStart()
			if yyl789 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl789, d)
			}
		} else if yyct789 == codecSelferValueTypeArray1234 {
			yyl789 := r.ReadArrayStart()
			if yyl789 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl789, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys790Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys790Slc
	var yyhl790 bool = l >= 0
	for yyj790 := 0; ; yyj790++ {
		if yyhl790 {
			if yyj790 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys790Slc = r.DecodeBytes(yys790Slc, true, true)
		yys790 := string(yys790Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys790 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys790)
		} // end switch yys790
	} // end for yyj790
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj795 int
	var yyb795 bool
	var yyhl795 bool = l >= 0
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj795++
		if yyhl795 {
			yyb795 = yyj795 > l
		} else {
			yyb795 = r.CheckBreak()
		}
		if yyb795 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj795-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym800 := z.EncBinary()
		_ = yym800
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep801 := !z.EncBinary()
			yy2arr801 := z.EncBasicHandle().StructToArray
			var yyq801 [5]bool
			_, _, _ = yysep801, yyq801, yy2arr801
			const yyr801 bool = false
			yyq801[2] = x.ReadOnly != false
			yyq801[3] = x.User != ""
			yyq801[4] = x.Group != ""
			var yynn801 int
			if yyr801 || yy2arr801 {
				r.EncodeArrayStart(5)
			} else {
				yynn801 = 2
				for _, b := range yyq801 {
					if b {
						yynn801++
					}
				}
				r.EncodeMapStart(yynn801)
				yynn801 = 0
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym803 := z.EncBinary()
				_ = yym803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym804 := z.EncBinary()
				_ = yym804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym806 := z.EncBinary()
				_ = yym806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym807 := z.EncBinary()
				_ = yym807
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq801[2] {
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq801[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym810 := z.EncBinary()
					_ = yym810
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq801[3] {
					yym812 := z.EncBinary()
					_ = yym812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq801[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq801[4] {
					yym815 := z.EncBinary()
					_ = yym815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq801[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym816 := z.EncBinary()
					_ = yym816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym817 := z.DecBinary()
	_ = yym817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct818 := r.ContainerType()
		if yyct818 == codecSelferValueTypeMap1234 {
			yyl818 := r.ReadMapStart()
			if yyl818 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl818, d)
			}
		} else if yyct818 == codecSelferValueTypeArray1234 {
			yyl818 := r.ReadArrayStart()
			if yyl818 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl818, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys819Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys819Slc
	var yyhl819 bool = l >= 0
	for yyj819 := 0; ; yyj819++ {
		if yyhl819 {
			if yyj819 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys819Slc = r.DecodeBytes(yys819Slc, true, true)
		yys819 := string(yys819Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys819 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys819)
		} // end switch yys819
	} // end for yyj819
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj825 int
	var yyb825 bool
	var yyhl825 bool = l >= 0
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj825++
		if yyhl825 {
			yyb825 = yyj825 > l
		} else {
			yyb825 = r.CheckBreak()
		}
		if yyb825 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj825-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym831 := z.EncBinary()
		_ = yym831
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep832 := !z.EncBinary()
			yy2arr832 := z.EncBasicHandle().StructToArray
			var yyq832 [5]bool
			_, _, _ = yysep832, yyq832, yy2arr832
			const yyr832 bool = false
			yyq832[1] = x.FSType != ""
			yyq832[2] = x.SecretRef != nil
			yyq832[3] = x.ReadOnly != false
			yyq832[4] = len(x.Options) != 0
			var yynn832 int
			if yyr832 || yy2arr832 {
				r.EncodeArrayStart(5)
			} else {
				yynn832 = 1
				for _, b := range yyq832 {
					if b {
						yynn832++
					}
				}
				r.EncodeMapStart(yynn832)
				yynn832 = 0
			}
			if yyr832 || yy2arr832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym834 := z.EncBinary()
				_ = yym834
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym835 := z.EncBinary()
				_ = yym835
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr832 || yy2arr832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq832[1] {
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq832[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym838 := z.EncBinary()
					_ = yym838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr832 || yy2arr832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq832[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq832[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr832 || yy2arr832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq832[3] {
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq832[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr832 || yy2arr832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq832[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym844 := z.EncBinary()
						_ = yym844
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq832[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym845 := z.EncBinary()
						_ = yym845
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr832 || yy2arr832 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym846 := z.DecBinary()
	_ = yym846
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct847 := r.ContainerType()
		if yyct847 == codecSelferValueTypeMap1234 {
			yyl847 := r.ReadMapStart()
			if yyl847 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl847, d)
			}
		} else if yyct847 == codecSelferValueTypeArray1234 {
			yyl847 := r.ReadArrayStart()
			if yyl847 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl847, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys848Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys848Slc
	var yyhl848 bool = l >= 0
	for yyj848 := 0; ; yyj848++ {
		if yyhl848 {
			if yyj848 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys848Slc = r.DecodeBytes(yys848Slc, true, true)
		yys848 := string(yys848Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys848 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv853 := &x.Options
				yym854 := z.DecBinary()
				_ = yym854
				if false {
				} else {
					z.F.DecMapStringStringX(yyv853, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys848)
		} // end switch yys848
	} // end for yyj848
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj855 int
	var yyb855 bool
	var yyhl855 bool = l >= 0
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv860 := &x.Options
		yym861 := z.DecBinary()
		_ = yym861
		if false {
		} else {
			z.F.DecMapStringStringX(yyv860, false, d)
		}
	}
	for {
		yyj855++
		if yyhl855 {
			yyb855 = yyj855 > l
		} else {
			yyb855 = r.CheckBreak()
		}
		if yyb855 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj855-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym862 := z.EncBinary()
		_ = yym862
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep863 := !z.EncBinary()
			yy2arr863 := z.EncBasicHandle().StructToArray
			var yyq863 [4]bool
			_, _, _ = yysep863, yyq863, yy2arr863
			const yyr863 bool = false
			yyq863[1] = x.FSType != ""
			yyq863[2] = x.Partition != 0
			yyq863[3] = x.ReadOnly != false
			var yynn863 int
			if yyr863 || yy2arr863 {
				r.EncodeArrayStart(4)
			} else {
				yynn863 = 1
				for _, b := range yyq863 {
					if b {
						yynn863++
					}
				}
				r.EncodeMapStart(yynn863)
				yynn863 = 0
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym865 := z.EncBinary()
				_ = yym865
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym866 := z.EncBinary()
				_ = yym866
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq863[1] {
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq863[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym869 := z.EncBinary()
					_ = yym869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq863[2] {
					yym871 := z.EncBinary()
					_ = yym871
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq863[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq863[3] {
					yym874 := z.EncBinary()
					_ = yym874
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq863[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym875 := z.EncBinary()
					_ = yym875
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym876 := z.DecBinary()
	_ = yym876
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct877 := r.ContainerType()
		if yyct877 == codecSelferValueTypeMap1234 {
			yyl877 := r.ReadMapStart()
			if yyl877 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl877, d)
			}
		} else if yyct877 == codecSelferValueTypeArray1234 {
			yyl877 := r.ReadArrayStart()
			if yyl877 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl877, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys878Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys878Slc
	var yyhl878 bool = l >= 0
	for yyj878 := 0; ; yyj878++ {
		if yyhl878 {
			if yyj878 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys878Slc = r.DecodeBytes(yys878Slc, true, true)
		yys878 := string(yys878Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys878 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys878)
		} // end switch yys878
	} // end for yyj878
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj883 int
	var yyb883 bool
	var yyhl883 bool = l >= 0
	yyj883++
	if yyhl883 {
		yyb883 = yyj883 > l
	} else {
		yyb883 = r.CheckBreak()
	}
	if yyb883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj883++
	if yyhl883 {
		yyb883 = yyj883 > l
	} else {
		yyb883 = r.CheckBreak()
	}
	if yyb883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj883++
	if yyhl883 {
		yyb883 = yyj883 > l
	} else {
		yyb883 = r.CheckBreak()
	}
	if yyb883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj883++
	if yyhl883 {
		yyb883 = yyj883 > l
	} else {
		yyb883 = r.CheckBreak()
	}
	if yyb883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj883++
		if yyhl883 {
			yyb883 = yyj883 > l
		} else {
			yyb883 = r.CheckBreak()
		}
		if yyb883 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj883-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym888 := z.EncBinary()
		_ = yym888
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep889 := !z.EncBinary()
			yy2arr889 := z.EncBasicHandle().StructToArray
			var yyq889 [3]bool
			_, _, _ = yysep889, yyq889, yy2arr889
			const yyr889 bool = false
			yyq889[1] = x.Revision != ""
			yyq889[2] = x.Directory != ""
			var yynn889 int
			if yyr889 || yy2arr889 {
				r.EncodeArrayStart(3)
			} else {
				yynn889 = 1
				for _, b := range yyq889 {
					if b {
						yynn889++
					}
				}
				r.EncodeMapStart(yynn889)
				yynn889 = 0
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym891 := z.EncBinary()
				_ = yym891
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym892 := z.EncBinary()
				_ = yym892
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq889[1] {
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq889[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym895 := z.EncBinary()
					_ = yym895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq889[2] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq889[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym899 := z.DecBinary()
	_ = yym899
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct900 := r.ContainerType()
		if yyct900 == codecSelferValueTypeMap1234 {
			yyl900 := r.ReadMapStart()
			if yyl900 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl900, d)
			}
		} else if yyct900 == codecSelferValueTypeArray1234 {
			yyl900 := r.ReadArrayStart()
			if yyl900 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl900, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys901Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys901Slc
	var yyhl901 bool = l >= 0
	for yyj901 := 0; ; yyj901++ {
		if yyhl901 {
			if yyj901 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys901Slc = r.DecodeBytes(yys901Slc, true, true)
		yys901 := string(yys901Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys901 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys901)
		} // end switch yys901
	} // end for yyj901
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj905 int
	var yyb905 bool
	var yyhl905 bool = l >= 0
	yyj905++
	if yyhl905 {
		yyb905 = yyj905 > l
	} else {
		yyb905 = r.CheckBreak()
	}
	if yyb905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj905++
	if yyhl905 {
		yyb905 = yyj905 > l
	} else {
		yyb905 = r.CheckBreak()
	}
	if yyb905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj905++
	if yyhl905 {
		yyb905 = yyj905 > l
	} else {
		yyb905 = r.CheckBreak()
	}
	if yyb905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj905++
		if yyhl905 {
			yyb905 = yyj905 > l
		} else {
			yyb905 = r.CheckBreak()
		}
		if yyb905 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj905-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym909 := z.EncBinary()
		_ = yym909
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep910 := !z.EncBinary()
			yy2arr910 := z.EncBasicHandle().StructToArray
			var yyq910 [3]bool
			_, _, _ = yysep910, yyq910, yy2arr910
			const yyr910 bool = false
			yyq910[0] = x.SecretName != ""
			yyq910[1] = len(x.Items) != 0
			yyq910[2] = x.DefaultMode != nil
			var yynn910 int
			if yyr910 || yy2arr910 {
				r.EncodeArrayStart(3)
			} else {
				yynn910 = 0
				for _, b := range yyq910 {
					if b {
						yynn910++
					}
				}
				r.EncodeMapStart(yynn910)
				yynn910 = 0
			}
			if yyr910 || yy2arr910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq910[0] {
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq910[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr910 || yy2arr910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq910[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym915 := z.EncBinary()
						_ = yym915
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq910[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym916 := z.EncBinary()
						_ = yym916
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr910 || yy2arr910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq910[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy918 := *x.DefaultMode
						yym919 := z.EncBinary()
						_ = yym919
						if false {
						} else {
							r.EncodeInt(int64(yy918))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq910[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy920 := *x.DefaultMode
						yym921 := z.EncBinary()
						_ = yym921
						if false {
						} else {
							r.EncodeInt(int64(yy920))
						}
					}
				}
			}
			if yyr910 || yy2arr910 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym922 := z.DecBinary()
	_ = yym922
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct923 := r.ContainerType()
		if yyct923 == codecSelferValueTypeMap1234 {
			yyl923 := r.ReadMapStart()
			if yyl923 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl923, d)
			}
		} else if yyct923 == codecSelferValueTypeArray1234 {
			yyl923 := r.ReadArrayStart()
			if yyl923 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl923, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys924Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys924Slc
	var yyhl924 bool = l >= 0
	for yyj924 := 0; ; yyj924++ {
		if yyhl924 {
			if yyj924 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys924Slc = r.DecodeBytes(yys924Slc, true, true)
		yys924 := string(yys924Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys924 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv926 := &x.Items
				yym927 := z.DecBinary()
				_ = yym927
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv926), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym929 := z.DecBinary()
				_ = yym929
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys924)
		} // end switch yys924
	} // end for yyj924
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj930 int
	var yyb930 bool
	var yyhl930 bool = l >= 0
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv932 := &x.Items
		yym933 := z.DecBinary()
		_ = yym933
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv932), d)
		}
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym935 := z.DecBinary()
		_ = yym935
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj930++
		if yyhl930 {
			yyb930 = yyj930 > l
		} else {
			yyb930 = r.CheckBreak()
		}
		if yyb930 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj930-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym936 := z.EncBinary()
		_ = yym936
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep937 := !z.EncBinary()
			yy2arr937 := z.EncBasicHandle().StructToArray
			var yyq937 [3]bool
			_, _, _ = yysep937, yyq937, yy2arr937
			const yyr937 bool = false
			yyq937[2] = x.ReadOnly != false
			var yynn937 int
			if yyr937 || yy2arr937 {
				r.EncodeArrayStart(3)
			} else {
				yynn937 = 2
				for _, b := range yyq937 {
					if b {
						yynn937++
					}
				}
				r.EncodeMapStart(yynn937)
				yynn937 = 0
			}
			if yyr937 || yy2arr937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym939 := z.EncBinary()
				_ = yym939
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym940 := z.EncBinary()
				_ = yym940
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr937 || yy2arr937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym942 := z.EncBinary()
				_ = yym942
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym943 := z.EncBinary()
				_ = yym943
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr937 || yy2arr937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq937[2] {
					yym945 := z.EncBinary()
					_ = yym945
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq937[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr937 || yy2arr937 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym947 := z.DecBinary()
	_ = yym947
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct948 := r.ContainerType()
		if yyct948 == codecSelferValueTypeMap1234 {
			yyl948 := r.ReadMapStart()
			if yyl948 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl948, d)
			}
		} else if yyct948 == codecSelferValueTypeArray1234 {
			yyl948 := r.ReadArrayStart()
			if yyl948 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl948, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys949Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys949Slc
	var yyhl949 bool = l >= 0
	for yyj949 := 0; ; yyj949++ {
		if yyhl949 {
			if yyj949 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys949Slc = r.DecodeBytes(yys949Slc, true, true)
		yys949 := string(yys949Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys949 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys949)
		} // end switch yys949
	} // end for yyj949
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj953 int
	var yyb953 bool
	var yyhl953 bool = l >= 0
	yyj953++
	if yyhl953 {
		yyb953 = yyj953 > l
	} else {
		yyb953 = r.CheckBreak()
	}
	if yyb953 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj953++
	if yyhl953 {
		yyb953 = yyj953 > l
	} else {
		yyb953 = r.CheckBreak()
	}
	if yyb953 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj953++
	if yyhl953 {
		yyb953 = yyj953 > l
	} else {
		yyb953 = r.CheckBreak()
	}
	if yyb953 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj953++
		if yyhl953 {
			yyb953 = yyj953 > l
		} else {
			yyb953 = r.CheckBreak()
		}
		if yyb953 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj953-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym957 := z.EncBinary()
		_ = yym957
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep958 := !z.EncBinary()
			yy2arr958 := z.EncBasicHandle().StructToArray
			var yyq958 [6]bool
			_, _, _ = yysep958, yyq958, yy2arr958
			const yyr958 bool = false
			yyq958[3] = x.ISCSIInterface != ""
			yyq958[4] = x.FSType != ""
			yyq958[5] = x.ReadOnly != false
			var yynn958 int
			if yyr958 || yy2arr958 {
				r.EncodeArrayStart(6)
			} else {
				yynn958 = 3
				for _, b := range yyq958 {
					if b {
						yynn958++
					}
				}
				r.EncodeMapStart(yynn958)
				yynn958 = 0
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym960 := z.EncBinary()
				_ = yym960
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym961 := z.EncBinary()
				_ = yym961
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym963 := z.EncBinary()
				_ = yym963
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym964 := z.EncBinary()
				_ = yym964
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym966 := z.EncBinary()
				_ = yym966
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym967 := z.EncBinary()
				_ = yym967
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[3] {
					yym969 := z.EncBinary()
					_ = yym969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq958[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym970 := z.EncBinary()
					_ = yym970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[4] {
					yym972 := z.EncBinary()
					_ = yym972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq958[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym973 := z.EncBinary()
					_ = yym973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[5] {
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq958[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym976 := z.EncBinary()
					_ = yym976
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym977 := z.DecBinary()
	_ = yym977
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct978 := r.ContainerType()
		if yyct978 == codecSelferValueTypeMap1234 {
			yyl978 := r.ReadMapStart()
			if yyl978 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl978, d)
			}
		} else if yyct978 == codecSelferValueTypeArray1234 {
			yyl978 := r.ReadArrayStart()
			if yyl978 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl978, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys979Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys979Slc
	var yyhl979 bool = l >= 0
	for yyj979 := 0; ; yyj979++ {
		if yyhl979 {
			if yyj979 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys979Slc = r.DecodeBytes(yys979Slc, true, true)
		yys979 := string(yys979Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys979 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys979)
		} // end switch yys979
	} // end for yyj979
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj986 int
	var yyb986 bool
	var yyhl986 bool = l >= 0
	yyj986++
	if yyhl986 {
		yyb986 = yyj986 > l
	} else {
		yyb986 = r.CheckBreak()
	}
	if yyb986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj986++
	if yyhl986 {
		yyb986 = yyj986 > l
	} else {
		yyb986 = r.CheckBreak()
	}
	if yyb986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj986++
	if yyhl986 {
		yyb986 = yyj986 > l
	} else {
		yyb986 = r.CheckBreak()
	}
	if yyb986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj986++
	if yyhl986 {
		yyb986 = yyj986 > l
	} else {
		yyb986 = r.CheckBreak()
	}
	if yyb986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj986++
	if yyhl986 {
		yyb986 = yyj986 > l
	} else {
		yyb986 = r.CheckBreak()
	}
	if yyb986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj986++
	if yyhl986 {
		yyb986 = yyj986 > l
	} else {
		yyb986 = r.CheckBreak()
	}
	if yyb986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj986++
		if yyhl986 {
			yyb986 = yyj986 > l
		} else {
			yyb986 = r.CheckBreak()
		}
		if yyb986 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj986-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym993 := z.EncBinary()
		_ = yym993
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep994 := !z.EncBinary()
			yy2arr994 := z.EncBasicHandle().StructToArray
			var yyq994 [4]bool
			_, _, _ = yysep994, yyq994, yy2arr994
			const yyr994 bool = false
			yyq994[2] = x.FSType != ""
			yyq994[3] = x.ReadOnly != false
			var yynn994 int
			if yyr994 || yy2arr994 {
				r.EncodeArrayStart(4)
			} else {
				yynn994 = 2
				for _, b := range yyq994 {
					if b {
						yynn994++
					}
				}
				r.EncodeMapStart(yynn994)
				yynn994 = 0
			}
			if yyr994 || yy2arr994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym996 := z.EncBinary()
					_ = yym996
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym997 := z.EncBinary()
					_ = yym997
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr994 || yy2arr994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy999 := *x.Lun
					yym1000 := z.EncBinary()
					_ = yym1000
					if false {
					} else {
						r.EncodeInt(int64(yy999))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy1001 := *x.Lun
					yym1002 := z.EncBinary()
					_ = yym1002
					if false {
					} else {
						r.EncodeInt(int64(yy1001))
					}
				}
			}
			if yyr994 || yy2arr994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq994[2] {
					yym1004 := z.EncBinary()
					_ = yym1004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq994[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1005 := z.EncBinary()
					_ = yym1005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr994 || yy2arr994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq994[3] {
					yym1007 := z.EncBinary()
					_ = yym1007
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq994[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1008 := z.EncBinary()
					_ = yym1008
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr994 || yy2arr994 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1009 := z.DecBinary()
	_ = yym1009
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1010 := r.ContainerType()
		if yyct1010 == codecSelferValueTypeMap1234 {
			yyl1010 := r.ReadMapStart()
			if yyl1010 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1010, d)
			}
		} else if yyct1010 == codecSelferValueTypeArray1234 {
			yyl1010 := r.ReadArrayStart()
			if yyl1010 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1010, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1011Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1011Slc
	var yyhl1011 bool = l >= 0
	for yyj1011 := 0; ; yyj1011++ {
		if yyhl1011 {
			if yyj1011 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1011Slc = r.DecodeBytes(yys1011Slc, true, true)
		yys1011 := string(yys1011Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1011 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv1012 := &x.TargetWWNs
				yym1013 := z.DecBinary()
				_ = yym1013
				if false {
				} else {
					z.F.DecSliceStringX(yyv1012, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym1015 := z.DecBinary()
				_ = yym1015
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1011)
		} // end switch yys1011
	} // end for yyj1011
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1018 int
	var yyb1018 bool
	var yyhl1018 bool = l >= 0
	yyj1018++
	if yyhl1018 {
		yyb1018 = yyj1018 > l
	} else {
		yyb1018 = r.CheckBreak()
	}
	if yyb1018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv1019 := &x.TargetWWNs
		yym1020 := z.DecBinary()
		_ = yym1020
		if false {
		} else {
			z.F.DecSliceStringX(yyv1019, false, d)
		}
	}
	yyj1018++
	if yyhl1018 {
		yyb1018 = yyj1018 > l
	} else {
		yyb1018 = r.CheckBreak()
	}
	if yyb1018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym1022 := z.DecBinary()
		_ = yym1022
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj1018++
	if yyhl1018 {
		yyb1018 = yyj1018 > l
	} else {
		yyb1018 = r.CheckBreak()
	}
	if yyb1018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1018++
	if yyhl1018 {
		yyb1018 = yyj1018 > l
	} else {
		yyb1018 = r.CheckBreak()
	}
	if yyb1018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1018++
		if yyhl1018 {
			yyb1018 = yyj1018 > l
		} else {
			yyb1018 = r.CheckBreak()
		}
		if yyb1018 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1018-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1025 := z.EncBinary()
		_ = yym1025
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1026 := !z.EncBinary()
			yy2arr1026 := z.EncBasicHandle().StructToArray
			var yyq1026 [3]bool
			_, _, _ = yysep1026, yyq1026, yy2arr1026
			const yyr1026 bool = false
			yyq1026[2] = x.ReadOnly != false
			var yynn1026 int
			if yyr1026 || yy2arr1026 {
				r.EncodeArrayStart(3)
			} else {
				yynn1026 = 2
				for _, b := range yyq1026 {
					if b {
						yynn1026++
					}
				}
				r.EncodeMapStart(yynn1026)
				yynn1026 = 0
			}
			if yyr1026 || yy2arr1026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1028 := z.EncBinary()
				_ = yym1028
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1029 := z.EncBinary()
				_ = yym1029
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1026 || yy2arr1026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1031 := z.EncBinary()
				_ = yym1031
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1032 := z.EncBinary()
				_ = yym1032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1026 || yy2arr1026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1026[2] {
					yym1034 := z.EncBinary()
					_ = yym1034
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1026[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1035 := z.EncBinary()
					_ = yym1035
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1026 || yy2arr1026 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1036 := z.DecBinary()
	_ = yym1036
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1037 := r.ContainerType()
		if yyct1037 == codecSelferValueTypeMap1234 {
			yyl1037 := r.ReadMapStart()
			if yyl1037 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1037, d)
			}
		} else if yyct1037 == codecSelferValueTypeArray1234 {
			yyl1037 := r.ReadArrayStart()
			if yyl1037 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1037, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1038Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1038Slc
	var yyhl1038 bool = l >= 0
	for yyj1038 := 0; ; yyj1038++ {
		if yyhl1038 {
			if yyj1038 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1038Slc = r.DecodeBytes(yys1038Slc, true, true)
		yys1038 := string(yys1038Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1038 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1038)
		} // end switch yys1038
	} // end for yyj1038
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1042 int
	var yyb1042 bool
	var yyhl1042 bool = l >= 0
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1042++
		if yyhl1042 {
			yyb1042 = yyj1042 > l
		} else {
			yyb1042 = r.CheckBreak()
		}
		if yyb1042 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1042-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1046 := z.EncBinary()
		_ = yym1046
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1047 := !z.EncBinary()
			yy2arr1047 := z.EncBasicHandle().StructToArray
			var yyq1047 [2]bool
			_, _, _ = yysep1047, yyq1047, yy2arr1047
			const yyr1047 bool = false
			yyq1047[1] = x.FSType != ""
			var yynn1047 int
			if yyr1047 || yy2arr1047 {
				r.EncodeArrayStart(2)
			} else {
				yynn1047 = 1
				for _, b := range yyq1047 {
					if b {
						yynn1047++
					}
				}
				r.EncodeMapStart(yynn1047)
				yynn1047 = 0
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1049 := z.EncBinary()
				_ = yym1049
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1050 := z.EncBinary()
				_ = yym1050
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[1] {
					yym1052 := z.EncBinary()
					_ = yym1052
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1047[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1053 := z.EncBinary()
					_ = yym1053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1054 := z.DecBinary()
	_ = yym1054
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1055 := r.ContainerType()
		if yyct1055 == codecSelferValueTypeMap1234 {
			yyl1055 := r.ReadMapStart()
			if yyl1055 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1055, d)
			}
		} else if yyct1055 == codecSelferValueTypeArray1234 {
			yyl1055 := r.ReadArrayStart()
			if yyl1055 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1055, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1056Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1056Slc
	var yyhl1056 bool = l >= 0
	for yyj1056 := 0; ; yyj1056++ {
		if yyhl1056 {
			if yyj1056 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1056Slc = r.DecodeBytes(yys1056Slc, true, true)
		yys1056 := string(yys1056Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1056 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1056)
		} // end switch yys1056
	} // end for yyj1056
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1059 int
	var yyb1059 bool
	var yyhl1059 bool = l >= 0
	yyj1059++
	if yyhl1059 {
		yyb1059 = yyj1059 > l
	} else {
		yyb1059 = r.CheckBreak()
	}
	if yyb1059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1059++
	if yyhl1059 {
		yyb1059 = yyj1059 > l
	} else {
		yyb1059 = r.CheckBreak()
	}
	if yyb1059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1059++
		if yyhl1059 {
			yyb1059 = yyj1059 > l
		} else {
			yyb1059 = r.CheckBreak()
		}
		if yyb1059 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1059-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1062 := z.EncBinary()
		_ = yym1062
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1063 := !z.EncBinary()
			yy2arr1063 := z.EncBasicHandle().StructToArray
			var yyq1063 [2]bool
			_, _, _ = yysep1063, yyq1063, yy2arr1063
			const yyr1063 bool = false
			yyq1063[1] = x.FSType != ""
			var yynn1063 int
			if yyr1063 || yy2arr1063 {
				r.EncodeArrayStart(2)
			} else {
				yynn1063 = 1
				for _, b := range yyq1063 {
					if b {
						yynn1063++
					}
				}
				r.EncodeMapStart(yynn1063)
				yynn1063 = 0
			}
			if yyr1063 || yy2arr1063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1065 := z.EncBinary()
				_ = yym1065
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1066 := z.EncBinary()
				_ = yym1066
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			}
			if yyr1063 || yy2arr1063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1063[1] {
					yym1068 := z.EncBinary()
					_ = yym1068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1063[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1069 := z.EncBinary()
					_ = yym1069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1063 || yy2arr1063 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1070 := z.DecBinary()
	_ = yym1070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1071 := r.ContainerType()
		if yyct1071 == codecSelferValueTypeMap1234 {
			yyl1071 := r.ReadMapStart()
			if yyl1071 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1071, d)
			}
		} else if yyct1071 == codecSelferValueTypeArray1234 {
			yyl1071 := r.ReadArrayStart()
			if yyl1071 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1071, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1072Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1072Slc
	var yyhl1072 bool = l >= 0
	for yyj1072 := 0; ; yyj1072++ {
		if yyhl1072 {
			if yyj1072 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1072Slc = r.DecodeBytes(yys1072Slc, true, true)
		yys1072 := string(yys1072Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1072 {
		case "pdID":
			if r.TryDecodeAsNil() {
				x.PdID = ""
			} else {
				x.PdID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1072)
		} // end switch yys1072
	} // end for yyj1072
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1075 int
	var yyb1075 bool
	var yyhl1075 bool = l >= 0
	yyj1075++
	if yyhl1075 {
		yyb1075 = yyj1075 > l
	} else {
		yyb1075 = r.CheckBreak()
	}
	if yyb1075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PdID = ""
	} else {
		x.PdID = string(r.DecodeString())
	}
	yyj1075++
	if yyhl1075 {
		yyb1075 = yyj1075 > l
	} else {
		yyb1075 = r.CheckBreak()
	}
	if yyb1075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1075++
		if yyhl1075 {
			yyb1075 = yyj1075 > l
		} else {
			yyb1075 = r.CheckBreak()
		}
		if yyb1075 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1075-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1078 := z.EncBinary()
	_ = yym1078
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1079 := z.DecBinary()
	_ = yym1079
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1080 := z.EncBinary()
		_ = yym1080
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1081 := !z.EncBinary()
			yy2arr1081 := z.EncBasicHandle().StructToArray
			var yyq1081 [5]bool
			_, _, _ = yysep1081, yyq1081, yy2arr1081
			const yyr1081 bool = false
			yyq1081[2] = x.CachingMode != nil
			yyq1081[3] = x.FSType != nil
			yyq1081[4] = x.ReadOnly != nil
			var yynn1081 int
			if yyr1081 || yy2arr1081 {
				r.EncodeArrayStart(5)
			} else {
				yynn1081 = 2
				for _, b := range yyq1081 {
					if b {
						yynn1081++
					}
				}
				r.EncodeMapStart(yynn1081)
				yynn1081 = 0
			}
			if yyr1081 || yy2arr1081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1083 := z.EncBinary()
				_ = yym1083
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1084 := z.EncBinary()
				_ = yym1084
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1081 || yy2arr1081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1086 := z.EncBinary()
				_ = yym1086
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1087 := z.EncBinary()
				_ = yym1087
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1081 || yy2arr1081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1081[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1089 := *x.CachingMode
						yy1089.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1081[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1090 := *x.CachingMode
						yy1090.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1081 || yy2arr1081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1081[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1092 := *x.FSType
						yym1093 := z.EncBinary()
						_ = yym1093
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1092))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1081[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1094 := *x.FSType
						yym1095 := z.EncBinary()
						_ = yym1095
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1094))
						}
					}
				}
			}
			if yyr1081 || yy2arr1081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1081[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1097 := *x.ReadOnly
						yym1098 := z.EncBinary()
						_ = yym1098
						if false {
						} else {
							r.EncodeBool(bool(yy1097))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1081[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1099 := *x.ReadOnly
						yym1100 := z.EncBinary()
						_ = yym1100
						if false {
						} else {
							r.EncodeBool(bool(yy1099))
						}
					}
				}
			}
			if yyr1081 || yy2arr1081 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1101 := z.DecBinary()
	_ = yym1101
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1102 := r.ContainerType()
		if yyct1102 == codecSelferValueTypeMap1234 {
			yyl1102 := r.ReadMapStart()
			if yyl1102 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1102, d)
			}
		} else if yyct1102 == codecSelferValueTypeArray1234 {
			yyl1102 := r.ReadArrayStart()
			if yyl1102 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1102, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1103Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1103Slc
	var yyhl1103 bool = l >= 0
	for yyj1103 := 0; ; yyj1103++ {
		if yyhl1103 {
			if yyj1103 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1103Slc = r.DecodeBytes(yys1103Slc, true, true)
		yys1103 := string(yys1103Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1103 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1108 := z.DecBinary()
				_ = yym1108
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1110 := z.DecBinary()
				_ = yym1110
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1103)
		} // end switch yys1103
	} // end for yyj1103
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1111 int
	var yyb1111 bool
	var yyhl1111 bool = l >= 0
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1116 := z.DecBinary()
		_ = yym1116
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1118 := z.DecBinary()
		_ = yym1118
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1111++
		if yyhl1111 {
			yyb1111 = yyj1111 > l
		} else {
			yyb1111 = r.CheckBreak()
		}
		if yyb1111 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1111-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1119 := z.EncBinary()
		_ = yym1119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1120 := !z.EncBinary()
			yy2arr1120 := z.EncBasicHandle().StructToArray
			var yyq1120 [3]bool
			_, _, _ = yysep1120, yyq1120, yy2arr1120
			const yyr1120 bool = false
			yyq1120[0] = x.Name != ""
			yyq1120[1] = len(x.Items) != 0
			yyq1120[2] = x.DefaultMode != nil
			var yynn1120 int
			if yyr1120 || yy2arr1120 {
				r.EncodeArrayStart(3)
			} else {
				yynn1120 = 0
				for _, b := range yyq1120 {
					if b {
						yynn1120++
					}
				}
				r.EncodeMapStart(yynn1120)
				yynn1120 = 0
			}
			if yyr1120 || yy2arr1120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1120[0] {
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1120[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1123 := z.EncBinary()
					_ = yym1123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1120 || yy2arr1120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1120[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1125 := z.EncBinary()
						_ = yym1125
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1120[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1126 := z.EncBinary()
						_ = yym1126
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1120 || yy2arr1120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1120[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1128 := *x.DefaultMode
						yym1129 := z.EncBinary()
						_ = yym1129
						if false {
						} else {
							r.EncodeInt(int64(yy1128))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1120[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1130 := *x.DefaultMode
						yym1131 := z.EncBinary()
						_ = yym1131
						if false {
						} else {
							r.EncodeInt(int64(yy1130))
						}
					}
				}
			}
			if yyr1120 || yy2arr1120 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1132 := z.DecBinary()
	_ = yym1132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1133 := r.ContainerType()
		if yyct1133 == codecSelferValueTypeMap1234 {
			yyl1133 := r.ReadMapStart()
			if yyl1133 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1133, d)
			}
		} else if yyct1133 == codecSelferValueTypeArray1234 {
			yyl1133 := r.ReadArrayStart()
			if yyl1133 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1133, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1134Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1134Slc
	var yyhl1134 bool = l >= 0
	for yyj1134 := 0; ; yyj1134++ {
		if yyhl1134 {
			if yyj1134 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1134Slc = r.DecodeBytes(yys1134Slc, true, true)
		yys1134 := string(yys1134Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1134 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1136 := &x.Items
				yym1137 := z.DecBinary()
				_ = yym1137
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1136), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1139 := z.DecBinary()
				_ = yym1139
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1134)
		} // end switch yys1134
	} // end for yyj1134
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1140 int
	var yyb1140 bool
	var yyhl1140 bool = l >= 0
	yyj1140++
	if yyhl1140 {
		yyb1140 = yyj1140 > l
	} else {
		yyb1140 = r.CheckBreak()
	}
	if yyb1140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1140++
	if yyhl1140 {
		yyb1140 = yyj1140 > l
	} else {
		yyb1140 = r.CheckBreak()
	}
	if yyb1140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1142 := &x.Items
		yym1143 := z.DecBinary()
		_ = yym1143
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1142), d)
		}
	}
	yyj1140++
	if yyhl1140 {
		yyb1140 = yyj1140 > l
	} else {
		yyb1140 = r.CheckBreak()
	}
	if yyb1140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1145 := z.DecBinary()
		_ = yym1145
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1140++
		if yyhl1140 {
			yyb1140 = yyj1140 > l
		} else {
			yyb1140 = r.CheckBreak()
		}
		if yyb1140 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1140-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1146 := z.EncBinary()
		_ = yym1146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1147 := !z.EncBinary()
			yy2arr1147 := z.EncBasicHandle().StructToArray
			var yyq1147 [3]bool
			_, _, _ = yysep1147, yyq1147, yy2arr1147
			const yyr1147 bool = false
			yyq1147[2] = x.Mode != nil
			var yynn1147 int
			if yyr1147 || yy2arr1147 {
				r.EncodeArrayStart(3)
			} else {
				yynn1147 = 2
				for _, b := range yyq1147 {
					if b {
						yynn1147++
					}
				}
				r.EncodeMapStart(yynn1147)
				yynn1147 = 0
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1149 := z.EncBinary()
				_ = yym1149
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1150 := z.EncBinary()
				_ = yym1150
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1152 := z.EncBinary()
				_ = yym1152
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1153 := z.EncBinary()
				_ = yym1153
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1147[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1155 := *x.Mode
						yym1156 := z.EncBinary()
						_ = yym1156
						if false {
						} else {
							r.EncodeInt(int64(yy1155))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1147[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1157 := *x.Mode
						yym1158 := z.EncBinary()
						_ = yym1158
						if false {
						} else {
							r.EncodeInt(int64(yy1157))
						}
					}
				}
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1159 := z.DecBinary()
	_ = yym1159
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1160 := r.ContainerType()
		if yyct1160 == codecSelferValueTypeMap1234 {
			yyl1160 := r.ReadMapStart()
			if yyl1160 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1160, d)
			}
		} else if yyct1160 == codecSelferValueTypeArray1234 {
			yyl1160 := r.ReadArrayStart()
			if yyl1160 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1160, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1161Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1161Slc
	var yyhl1161 bool = l >= 0
	for yyj1161 := 0; ; yyj1161++ {
		if yyhl1161 {
			if yyj1161 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1161Slc = r.DecodeBytes(yys1161Slc, true, true)
		yys1161 := string(yys1161Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1161 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1165 := z.DecBinary()
				_ = yym1165
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1161)
		} // end switch yys1161
	} // end for yyj1161
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1166 int
	var yyb1166 bool
	var yyhl1166 bool = l >= 0
	yyj1166++
	if yyhl1166 {
		yyb1166 = yyj1166 > l
	} else {
		yyb1166 = r.CheckBreak()
	}
	if yyb1166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1166++
	if yyhl1166 {
		yyb1166 = yyj1166 > l
	} else {
		yyb1166 = r.CheckBreak()
	}
	if yyb1166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1166++
	if yyhl1166 {
		yyb1166 = yyj1166 > l
	} else {
		yyb1166 = r.CheckBreak()
	}
	if yyb1166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1170 := z.DecBinary()
		_ = yym1170
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1166++
		if yyhl1166 {
			yyb1166 = yyj1166 > l
		} else {
			yyb1166 = r.CheckBreak()
		}
		if yyb1166 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1166-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1171 := z.EncBinary()
		_ = yym1171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1172 := !z.EncBinary()
			yy2arr1172 := z.EncBasicHandle().StructToArray
			var yyq1172 [5]bool
			_, _, _ = yysep1172, yyq1172, yy2arr1172
			const yyr1172 bool = false
			yyq1172[0] = x.Name != ""
			yyq1172[1] = x.HostPort != 0
			yyq1172[3] = x.Protocol != ""
			yyq1172[4] = x.HostIP != ""
			var yynn1172 int
			if yyr1172 || yy2arr1172 {
				r.EncodeArrayStart(5)
			} else {
				yynn1172 = 1
				for _, b := range yyq1172 {
					if b {
						yynn1172++
					}
				}
				r.EncodeMapStart(yynn1172)
				yynn1172 = 0
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1172[0] {
					yym1174 := z.EncBinary()
					_ = yym1174
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1172[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1175 := z.EncBinary()
					_ = yym1175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1172[1] {
					yym1177 := z.EncBinary()
					_ = yym1177
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1172[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1178 := z.EncBinary()
					_ = yym1178
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1180 := z.EncBinary()
				_ = yym1180
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1181 := z.EncBinary()
				_ = yym1181
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1172[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1172[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1172[4] {
					yym1184 := z.EncBinary()
					_ = yym1184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1172[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1185 := z.EncBinary()
					_ = yym1185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1186 := z.DecBinary()
	_ = yym1186
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1187 := r.ContainerType()
		if yyct1187 == codecSelferValueTypeMap1234 {
			yyl1187 := r.ReadMapStart()
			if yyl1187 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1187, d)
			}
		} else if yyct1187 == codecSelferValueTypeArray1234 {
			yyl1187 := r.ReadArrayStart()
			if yyl1187 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1187, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1188Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1188Slc
	var yyhl1188 bool = l >= 0
	for yyj1188 := 0; ; yyj1188++ {
		if yyhl1188 {
			if yyj1188 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1188Slc = r.DecodeBytes(yys1188Slc, true, true)
		yys1188 := string(yys1188Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1188 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1188)
		} // end switch yys1188
	} // end for yyj1188
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1194 int
	var yyb1194 bool
	var yyhl1194 bool = l >= 0
	yyj1194++
	if yyhl1194 {
		yyb1194 = yyj1194 > l
	} else {
		yyb1194 = r.CheckBreak()
	}
	if yyb1194 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1194++
	if yyhl1194 {
		yyb1194 = yyj1194 > l
	} else {
		yyb1194 = r.CheckBreak()
	}
	if yyb1194 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1194++
	if yyhl1194 {
		yyb1194 = yyj1194 > l
	} else {
		yyb1194 = r.CheckBreak()
	}
	if yyb1194 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1194++
	if yyhl1194 {
		yyb1194 = yyj1194 > l
	} else {
		yyb1194 = r.CheckBreak()
	}
	if yyb1194 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1194++
	if yyhl1194 {
		yyb1194 = yyj1194 > l
	} else {
		yyb1194 = r.CheckBreak()
	}
	if yyb1194 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1194++
		if yyhl1194 {
			yyb1194 = yyj1194 > l
		} else {
			yyb1194 = r.CheckBreak()
		}
		if yyb1194 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1194-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1200 := z.EncBinary()
		_ = yym1200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1201 := !z.EncBinary()
			yy2arr1201 := z.EncBasicHandle().StructToArray
			var yyq1201 [4]bool
			_, _, _ = yysep1201, yyq1201, yy2arr1201
			const yyr1201 bool = false
			yyq1201[1] = x.ReadOnly != false
			yyq1201[3] = x.SubPath != ""
			var yynn1201 int
			if yyr1201 || yy2arr1201 {
				r.EncodeArrayStart(4)
			} else {
				yynn1201 = 2
				for _, b := range yyq1201 {
					if b {
						yynn1201++
					}
				}
				r.EncodeMapStart(yynn1201)
				yynn1201 = 0
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1203 := z.EncBinary()
				_ = yym1203
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1204 := z.EncBinary()
				_ = yym1204
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1201[1] {
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1201[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1207 := z.EncBinary()
					_ = yym1207
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1209 := z.EncBinary()
				_ = yym1209
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1210 := z.EncBinary()
				_ = yym1210
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1201[3] {
					yym1212 := z.EncBinary()
					_ = yym1212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1201[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1213 := z.EncBinary()
					_ = yym1213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1214 := z.DecBinary()
	_ = yym1214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1215 := r.ContainerType()
		if yyct1215 == codecSelferValueTypeMap1234 {
			yyl1215 := r.ReadMapStart()
			if yyl1215 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1215, d)
			}
		} else if yyct1215 == codecSelferValueTypeArray1234 {
			yyl1215 := r.ReadArrayStart()
			if yyl1215 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1215, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1216Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1216Slc
	var yyhl1216 bool = l >= 0
	for yyj1216 := 0; ; yyj1216++ {
		if yyhl1216 {
			if yyj1216 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1216Slc = r.DecodeBytes(yys1216Slc, true, true)
		yys1216 := string(yys1216Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1216 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1216)
		} // end switch yys1216
	} // end for yyj1216
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1221 int
	var yyb1221 bool
	var yyhl1221 bool = l >= 0
	yyj1221++
	if yyhl1221 {
		yyb1221 = yyj1221 > l
	} else {
		yyb1221 = r.CheckBreak()
	}
	if yyb1221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1221++
	if yyhl1221 {
		yyb1221 = yyj1221 > l
	} else {
		yyb1221 = r.CheckBreak()
	}
	if yyb1221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1221++
	if yyhl1221 {
		yyb1221 = yyj1221 > l
	} else {
		yyb1221 = r.CheckBreak()
	}
	if yyb1221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1221++
	if yyhl1221 {
		yyb1221 = yyj1221 > l
	} else {
		yyb1221 = r.CheckBreak()
	}
	if yyb1221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1221++
		if yyhl1221 {
			yyb1221 = yyj1221 > l
		} else {
			yyb1221 = r.CheckBreak()
		}
		if yyb1221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1226 := z.EncBinary()
		_ = yym1226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1227 := !z.EncBinary()
			yy2arr1227 := z.EncBasicHandle().StructToArray
			var yyq1227 [3]bool
			_, _, _ = yysep1227, yyq1227, yy2arr1227
			const yyr1227 bool = false
			yyq1227[1] = x.Value != ""
			yyq1227[2] = x.ValueFrom != nil
			var yynn1227 int
			if yyr1227 || yy2arr1227 {
				r.EncodeArrayStart(3)
			} else {
				yynn1227 = 1
				for _, b := range yyq1227 {
					if b {
						yynn1227++
					}
				}
				r.EncodeMapStart(yynn1227)
				yynn1227 = 0
			}
			if yyr1227 || yy2arr1227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1229 := z.EncBinary()
				_ = yym1229
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1230 := z.EncBinary()
				_ = yym1230
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1227 || yy2arr1227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1227[1] {
					yym1232 := z.EncBinary()
					_ = yym1232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1227[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1233 := z.EncBinary()
					_ = yym1233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1227 || yy2arr1227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1227[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1227[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1227 || yy2arr1227 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1235 := z.DecBinary()
	_ = yym1235
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1236 := r.ContainerType()
		if yyct1236 == codecSelferValueTypeMap1234 {
			yyl1236 := r.ReadMapStart()
			if yyl1236 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1236, d)
			}
		} else if yyct1236 == codecSelferValueTypeArray1234 {
			yyl1236 := r.ReadArrayStart()
			if yyl1236 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1236, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1237Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1237Slc
	var yyhl1237 bool = l >= 0
	for yyj1237 := 0; ; yyj1237++ {
		if yyhl1237 {
			if yyj1237 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1237Slc = r.DecodeBytes(yys1237Slc, true, true)
		yys1237 := string(yys1237Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1237 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1237)
		} // end switch yys1237
	} // end for yyj1237
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1241 int
	var yyb1241 bool
	var yyhl1241 bool = l >= 0
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1241++
		if yyhl1241 {
			yyb1241 = yyj1241 > l
		} else {
			yyb1241 = r.CheckBreak()
		}
		if yyb1241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1245 := z.EncBinary()
		_ = yym1245
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1246 := !z.EncBinary()
			yy2arr1246 := z.EncBasicHandle().StructToArray
			var yyq1246 [4]bool
			_, _, _ = yysep1246, yyq1246, yy2arr1246
			const yyr1246 bool = false
			yyq1246[0] = x.FieldRef != nil
			yyq1246[1] = x.ResourceFieldRef != nil
			yyq1246[2] = x.ConfigMapKeyRef != nil
			yyq1246[3] = x.SecretKeyRef != nil
			var yynn1246 int
			if yyr1246 || yy2arr1246 {
				r.EncodeArrayStart(4)
			} else {
				yynn1246 = 0
				for _, b := range yyq1246 {
					if b {
						yynn1246++
					}
				}
				r.EncodeMapStart(yynn1246)
				yynn1246 = 0
			}
			if yyr1246 || yy2arr1246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1246[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1246[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1246 || yy2arr1246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1246[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1246[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1246 || yy2arr1246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1246[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1246[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1246 || yy2arr1246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1246[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1246[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1246 || yy2arr1246 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1251 := z.DecBinary()
	_ = yym1251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1252 := r.ContainerType()
		if yyct1252 == codecSelferValueTypeMap1234 {
			yyl1252 := r.ReadMapStart()
			if yyl1252 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1252, d)
			}
		} else if yyct1252 == codecSelferValueTypeArray1234 {
			yyl1252 := r.ReadArrayStart()
			if yyl1252 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1253Slc
	var yyhl1253 bool = l >= 0
	for yyj1253 := 0; ; yyj1253++ {
		if yyhl1253 {
			if yyj1253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1253Slc = r.DecodeBytes(yys1253Slc, true, true)
		yys1253 := string(yys1253Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1253 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1253)
		} // end switch yys1253
	} // end for yyj1253
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1258 int
	var yyb1258 bool
	var yyhl1258 bool = l >= 0
	yyj1258++
	if yyhl1258 {
		yyb1258 = yyj1258 > l
	} else {
		yyb1258 = r.CheckBreak()
	}
	if yyb1258 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1258++
	if yyhl1258 {
		yyb1258 = yyj1258 > l
	} else {
		yyb1258 = r.CheckBreak()
	}
	if yyb1258 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1258++
	if yyhl1258 {
		yyb1258 = yyj1258 > l
	} else {
		yyb1258 = r.CheckBreak()
	}
	if yyb1258 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1258++
	if yyhl1258 {
		yyb1258 = yyj1258 > l
	} else {
		yyb1258 = r.CheckBreak()
	}
	if yyb1258 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1258++
		if yyhl1258 {
			yyb1258 = yyj1258 > l
		} else {
			yyb1258 = r.CheckBreak()
		}
		if yyb1258 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1258-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1263 := z.EncBinary()
		_ = yym1263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1264 := !z.EncBinary()
			yy2arr1264 := z.EncBasicHandle().StructToArray
			var yyq1264 [2]bool
			_, _, _ = yysep1264, yyq1264, yy2arr1264
			const yyr1264 bool = false
			yyq1264[0] = x.APIVersion != ""
			var yynn1264 int
			if yyr1264 || yy2arr1264 {
				r.EncodeArrayStart(2)
			} else {
				yynn1264 = 1
				for _, b := range yyq1264 {
					if b {
						yynn1264++
					}
				}
				r.EncodeMapStart(yynn1264)
				yynn1264 = 0
			}
			if yyr1264 || yy2arr1264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1264[0] {
					yym1266 := z.EncBinary()
					_ = yym1266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1264[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1267 := z.EncBinary()
					_ = yym1267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1264 || yy2arr1264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1269 := z.EncBinary()
				_ = yym1269
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1270 := z.EncBinary()
				_ = yym1270
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1264 || yy2arr1264 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1271 := z.DecBinary()
	_ = yym1271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1272 := r.ContainerType()
		if yyct1272 == codecSelferValueTypeMap1234 {
			yyl1272 := r.ReadMapStart()
			if yyl1272 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1272, d)
			}
		} else if yyct1272 == codecSelferValueTypeArray1234 {
			yyl1272 := r.ReadArrayStart()
			if yyl1272 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1273Slc
	var yyhl1273 bool = l >= 0
	for yyj1273 := 0; ; yyj1273++ {
		if yyhl1273 {
			if yyj1273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1273Slc = r.DecodeBytes(yys1273Slc, true, true)
		yys1273 := string(yys1273Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1273 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1273)
		} // end switch yys1273
	} // end for yyj1273
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1276 int
	var yyb1276 bool
	var yyhl1276 bool = l >= 0
	yyj1276++
	if yyhl1276 {
		yyb1276 = yyj1276 > l
	} else {
		yyb1276 = r.CheckBreak()
	}
	if yyb1276 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1276++
	if yyhl1276 {
		yyb1276 = yyj1276 > l
	} else {
		yyb1276 = r.CheckBreak()
	}
	if yyb1276 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1276++
		if yyhl1276 {
			yyb1276 = yyj1276 > l
		} else {
			yyb1276 = r.CheckBreak()
		}
		if yyb1276 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1276-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1279 := z.EncBinary()
		_ = yym1279
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1280 := !z.EncBinary()
			yy2arr1280 := z.EncBasicHandle().StructToArray
			var yyq1280 [3]bool
			_, _, _ = yysep1280, yyq1280, yy2arr1280
			const yyr1280 bool = false
			yyq1280[0] = x.ContainerName != ""
			yyq1280[2] = true
			var yynn1280 int
			if yyr1280 || yy2arr1280 {
				r.EncodeArrayStart(3)
			} else {
				yynn1280 = 1
				for _, b := range yyq1280 {
					if b {
						yynn1280++
					}
				}
				r.EncodeMapStart(yynn1280)
				yynn1280 = 0
			}
			if yyr1280 || yy2arr1280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1280[0] {
					yym1282 := z.EncBinary()
					_ = yym1282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1280[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1283 := z.EncBinary()
					_ = yym1283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1280 || yy2arr1280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1285 := z.EncBinary()
				_ = yym1285
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1286 := z.EncBinary()
				_ = yym1286
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1280 || yy2arr1280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1280[2] {
					yy1288 := &x.Divisor
					yym1289 := z.EncBinary()
					_ = yym1289
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1288) {
					} else if !yym1289 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1288)
					} else {
						z.EncFallback(yy1288)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1280[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1290 := &x.Divisor
					yym1291 := z.EncBinary()
					_ = yym1291
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1290) {
					} else if !yym1291 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1290)
					} else {
						z.EncFallback(yy1290)
					}
				}
			}
			if yyr1280 || yy2arr1280 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1292 := z.DecBinary()
	_ = yym1292
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1293 := r.ContainerType()
		if yyct1293 == codecSelferValueTypeMap1234 {
			yyl1293 := r.ReadMapStart()
			if yyl1293 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1293, d)
			}
		} else if yyct1293 == codecSelferValueTypeArray1234 {
			yyl1293 := r.ReadArrayStart()
			if yyl1293 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1293, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1294Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1294Slc
	var yyhl1294 bool = l >= 0
	for yyj1294 := 0; ; yyj1294++ {
		if yyhl1294 {
			if yyj1294 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1294Slc = r.DecodeBytes(yys1294Slc, true, true)
		yys1294 := string(yys1294Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1294 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1297 := &x.Divisor
				yym1298 := z.DecBinary()
				_ = yym1298
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1297) {
				} else if !yym1298 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1297)
				} else {
					z.DecFallback(yyv1297, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1294)
		} // end switch yys1294
	} // end for yyj1294
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1299 int
	var yyb1299 bool
	var yyhl1299 bool = l >= 0
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1302 := &x.Divisor
		yym1303 := z.DecBinary()
		_ = yym1303
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1302) {
		} else if !yym1303 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1302)
		} else {
			z.DecFallback(yyv1302, false)
		}
	}
	for {
		yyj1299++
		if yyhl1299 {
			yyb1299 = yyj1299 > l
		} else {
			yyb1299 = r.CheckBreak()
		}
		if yyb1299 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1299-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1304 := z.EncBinary()
		_ = yym1304
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1305 := !z.EncBinary()
			yy2arr1305 := z.EncBasicHandle().StructToArray
			var yyq1305 [2]bool
			_, _, _ = yysep1305, yyq1305, yy2arr1305
			const yyr1305 bool = false
			yyq1305[0] = x.Name != ""
			var yynn1305 int
			if yyr1305 || yy2arr1305 {
				r.EncodeArrayStart(2)
			} else {
				yynn1305 = 1
				for _, b := range yyq1305 {
					if b {
						yynn1305++
					}
				}
				r.EncodeMapStart(yynn1305)
				yynn1305 = 0
			}
			if yyr1305 || yy2arr1305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1305[0] {
					yym1307 := z.EncBinary()
					_ = yym1307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1305[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1308 := z.EncBinary()
					_ = yym1308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1305 || yy2arr1305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1310 := z.EncBinary()
				_ = yym1310
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1311 := z.EncBinary()
				_ = yym1311
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1305 || yy2arr1305 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1312 := z.DecBinary()
	_ = yym1312
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1313 := r.ContainerType()
		if yyct1313 == codecSelferValueTypeMap1234 {
			yyl1313 := r.ReadMapStart()
			if yyl1313 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1313, d)
			}
		} else if yyct1313 == codecSelferValueTypeArray1234 {
			yyl1313 := r.ReadArrayStart()
			if yyl1313 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1313, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1314Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1314Slc
	var yyhl1314 bool = l >= 0
	for yyj1314 := 0; ; yyj1314++ {
		if yyhl1314 {
			if yyj1314 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1314Slc = r.DecodeBytes(yys1314Slc, true, true)
		yys1314 := string(yys1314Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1314 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1314)
		} // end switch yys1314
	} // end for yyj1314
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1317 int
	var yyb1317 bool
	var yyhl1317 bool = l >= 0
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1317++
		if yyhl1317 {
			yyb1317 = yyj1317 > l
		} else {
			yyb1317 = r.CheckBreak()
		}
		if yyb1317 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1317-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1320 := z.EncBinary()
		_ = yym1320
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1321 := !z.EncBinary()
			yy2arr1321 := z.EncBasicHandle().StructToArray
			var yyq1321 [2]bool
			_, _, _ = yysep1321, yyq1321, yy2arr1321
			const yyr1321 bool = false
			yyq1321[0] = x.Name != ""
			var yynn1321 int
			if yyr1321 || yy2arr1321 {
				r.EncodeArrayStart(2)
			} else {
				yynn1321 = 1
				for _, b := range yyq1321 {
					if b {
						yynn1321++
					}
				}
				r.EncodeMapStart(yynn1321)
				yynn1321 = 0
			}
			if yyr1321 || yy2arr1321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1321[0] {
					yym1323 := z.EncBinary()
					_ = yym1323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1321[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1324 := z.EncBinary()
					_ = yym1324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1321 || yy2arr1321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1326 := z.EncBinary()
				_ = yym1326
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1327 := z.EncBinary()
				_ = yym1327
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1321 || yy2arr1321 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1328 := z.DecBinary()
	_ = yym1328
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1329 := r.ContainerType()
		if yyct1329 == codecSelferValueTypeMap1234 {
			yyl1329 := r.ReadMapStart()
			if yyl1329 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1329, d)
			}
		} else if yyct1329 == codecSelferValueTypeArray1234 {
			yyl1329 := r.ReadArrayStart()
			if yyl1329 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1329, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1330Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1330Slc
	var yyhl1330 bool = l >= 0
	for yyj1330 := 0; ; yyj1330++ {
		if yyhl1330 {
			if yyj1330 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1330Slc = r.DecodeBytes(yys1330Slc, true, true)
		yys1330 := string(yys1330Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1330 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1330)
		} // end switch yys1330
	} // end for yyj1330
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1333 int
	var yyb1333 bool
	var yyhl1333 bool = l >= 0
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1333++
		if yyhl1333 {
			yyb1333 = yyj1333 > l
		} else {
			yyb1333 = r.CheckBreak()
		}
		if yyb1333 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1333-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1336 := z.EncBinary()
		_ = yym1336
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1337 := !z.EncBinary()
			yy2arr1337 := z.EncBasicHandle().StructToArray
			var yyq1337 [2]bool
			_, _, _ = yysep1337, yyq1337, yy2arr1337
			const yyr1337 bool = false
			var yynn1337 int
			if yyr1337 || yy2arr1337 {
				r.EncodeArrayStart(2)
			} else {
				yynn1337 = 2
				for _, b := range yyq1337 {
					if b {
						yynn1337++
					}
				}
				r.EncodeMapStart(yynn1337)
				yynn1337 = 0
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1339 := z.EncBinary()
				_ = yym1339
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1340 := z.EncBinary()
				_ = yym1340
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1342 := z.EncBinary()
				_ = yym1342
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1343 := z.EncBinary()
				_ = yym1343
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1344 := z.DecBinary()
	_ = yym1344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1345 := r.ContainerType()
		if yyct1345 == codecSelferValueTypeMap1234 {
			yyl1345 := r.ReadMapStart()
			if yyl1345 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1345, d)
			}
		} else if yyct1345 == codecSelferValueTypeArray1234 {
			yyl1345 := r.ReadArrayStart()
			if yyl1345 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1346Slc
	var yyhl1346 bool = l >= 0
	for yyj1346 := 0; ; yyj1346++ {
		if yyhl1346 {
			if yyj1346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1346Slc = r.DecodeBytes(yys1346Slc, true, true)
		yys1346 := string(yys1346Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1346 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1346)
		} // end switch yys1346
	} // end for yyj1346
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1349 int
	var yyb1349 bool
	var yyhl1349 bool = l >= 0
	yyj1349++
	if yyhl1349 {
		yyb1349 = yyj1349 > l
	} else {
		yyb1349 = r.CheckBreak()
	}
	if yyb1349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1349++
	if yyhl1349 {
		yyb1349 = yyj1349 > l
	} else {
		yyb1349 = r.CheckBreak()
	}
	if yyb1349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1349++
		if yyhl1349 {
			yyb1349 = yyj1349 > l
		} else {
			yyb1349 = r.CheckBreak()
		}
		if yyb1349 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1349-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1352 := z.EncBinary()
		_ = yym1352
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1353 := !z.EncBinary()
			yy2arr1353 := z.EncBasicHandle().StructToArray
			var yyq1353 [5]bool
			_, _, _ = yysep1353, yyq1353, yy2arr1353
			const yyr1353 bool = false
			yyq1353[0] = x.Path != ""
			yyq1353[2] = x.Host != ""
			yyq1353[3] = x.Scheme != ""
			yyq1353[4] = len(x.HTTPHeaders) != 0
			var yynn1353 int
			if yyr1353 || yy2arr1353 {
				r.EncodeArrayStart(5)
			} else {
				yynn1353 = 1
				for _, b := range yyq1353 {
					if b {
						yynn1353++
					}
				}
				r.EncodeMapStart(yynn1353)
				yynn1353 = 0
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1353[0] {
					yym1355 := z.EncBinary()
					_ = yym1355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1353[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1356 := z.EncBinary()
					_ = yym1356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1358 := &x.Port
				yym1359 := z.EncBinary()
				_ = yym1359
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1358) {
				} else if !yym1359 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1358)
				} else {
					z.EncFallback(yy1358)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1360 := &x.Port
				yym1361 := z.EncBinary()
				_ = yym1361
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1360) {
				} else if !yym1361 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1360)
				} else {
					z.EncFallback(yy1360)
				}
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1353[2] {
					yym1363 := z.EncBinary()
					_ = yym1363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1353[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1364 := z.EncBinary()
					_ = yym1364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1353[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1353[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1353[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1367 := z.EncBinary()
						_ = yym1367
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1353[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1368 := z.EncBinary()
						_ = yym1368
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1369 := z.DecBinary()
	_ = yym1369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1370 := r.ContainerType()
		if yyct1370 == codecSelferValueTypeMap1234 {
			yyl1370 := r.ReadMapStart()
			if yyl1370 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1370, d)
			}
		} else if yyct1370 == codecSelferValueTypeArray1234 {
			yyl1370 := r.ReadArrayStart()
			if yyl1370 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1370, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1371Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1371Slc
	var yyhl1371 bool = l >= 0
	for yyj1371 := 0; ; yyj1371++ {
		if yyhl1371 {
			if yyj1371 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1371Slc = r.DecodeBytes(yys1371Slc, true, true)
		yys1371 := string(yys1371Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1371 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1373 := &x.Port
				yym1374 := z.DecBinary()
				_ = yym1374
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1373) {
				} else if !yym1374 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1373)
				} else {
					z.DecFallback(yyv1373, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1377 := &x.HTTPHeaders
				yym1378 := z.DecBinary()
				_ = yym1378
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1377), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1371)
		} // end switch yys1371
	} // end for yyj1371
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1379 int
	var yyb1379 bool
	var yyhl1379 bool = l >= 0
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1381 := &x.Port
		yym1382 := z.DecBinary()
		_ = yym1382
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1381) {
		} else if !yym1382 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1381)
		} else {
			z.DecFallback(yyv1381, false)
		}
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1385 := &x.HTTPHeaders
		yym1386 := z.DecBinary()
		_ = yym1386
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1385), d)
		}
	}
	for {
		yyj1379++
		if yyhl1379 {
			yyb1379 = yyj1379 > l
		} else {
			yyb1379 = r.CheckBreak()
		}
		if yyb1379 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1379-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1387 := z.EncBinary()
	_ = yym1387
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1388 := z.DecBinary()
	_ = yym1388
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1389 := z.EncBinary()
		_ = yym1389
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1390 := !z.EncBinary()
			yy2arr1390 := z.EncBasicHandle().StructToArray
			var yyq1390 [1]bool
			_, _, _ = yysep1390, yyq1390, yy2arr1390
			const yyr1390 bool = false
			var yynn1390 int
			if yyr1390 || yy2arr1390 {
				r.EncodeArrayStart(1)
			} else {
				yynn1390 = 1
				for _, b := range yyq1390 {
					if b {
						yynn1390++
					}
				}
				r.EncodeMapStart(yynn1390)
				yynn1390 = 0
			}
			if yyr1390 || yy2arr1390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1392 := &x.Port
				yym1393 := z.EncBinary()
				_ = yym1393
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1392) {
				} else if !yym1393 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1392)
				} else {
					z.EncFallback(yy1392)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1394 := &x.Port
				yym1395 := z.EncBinary()
				_ = yym1395
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1394) {
				} else if !yym1395 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1394)
				} else {
					z.EncFallback(yy1394)
				}
			}
			if yyr1390 || yy2arr1390 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1396 := z.DecBinary()
	_ = yym1396
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1397 := r.ContainerType()
		if yyct1397 == codecSelferValueTypeMap1234 {
			yyl1397 := r.ReadMapStart()
			if yyl1397 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1397, d)
			}
		} else if yyct1397 == codecSelferValueTypeArray1234 {
			yyl1397 := r.ReadArrayStart()
			if yyl1397 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1397, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1398Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1398Slc
	var yyhl1398 bool = l >= 0
	for yyj1398 := 0; ; yyj1398++ {
		if yyhl1398 {
			if yyj1398 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1398Slc = r.DecodeBytes(yys1398Slc, true, true)
		yys1398 := string(yys1398Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1398 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1399 := &x.Port
				yym1400 := z.DecBinary()
				_ = yym1400
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1399) {
				} else if !yym1400 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1399)
				} else {
					z.DecFallback(yyv1399, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1398)
		} // end switch yys1398
	} // end for yyj1398
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1401 int
	var yyb1401 bool
	var yyhl1401 bool = l >= 0
	yyj1401++
	if yyhl1401 {
		yyb1401 = yyj1401 > l
	} else {
		yyb1401 = r.CheckBreak()
	}
	if yyb1401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1402 := &x.Port
		yym1403 := z.DecBinary()
		_ = yym1403
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1402) {
		} else if !yym1403 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1402)
		} else {
			z.DecFallback(yyv1402, false)
		}
	}
	for {
		yyj1401++
		if yyhl1401 {
			yyb1401 = yyj1401 > l
		} else {
			yyb1401 = r.CheckBreak()
		}
		if yyb1401 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1401-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1404 := z.EncBinary()
		_ = yym1404
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1405 := !z.EncBinary()
			yy2arr1405 := z.EncBasicHandle().StructToArray
			var yyq1405 [1]bool
			_, _, _ = yysep1405, yyq1405, yy2arr1405
			const yyr1405 bool = false
			yyq1405[0] = len(x.Command) != 0
			var yynn1405 int
			if yyr1405 || yy2arr1405 {
				r.EncodeArrayStart(1)
			} else {
				yynn1405 = 0
				for _, b := range yyq1405 {
					if b {
						yynn1405++
					}
				}
				r.EncodeMapStart(yynn1405)
				yynn1405 = 0
			}
			if yyr1405 || yy2arr1405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1405[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1407 := z.EncBinary()
						_ = yym1407
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1408 := z.EncBinary()
						_ = yym1408
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1409 := z.DecBinary()
	_ = yym1409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1410 := r.ContainerType()
		if yyct1410 == codecSelferValueTypeMap1234 {
			yyl1410 := r.ReadMapStart()
			if yyl1410 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1410, d)
			}
		} else if yyct1410 == codecSelferValueTypeArray1234 {
			yyl1410 := r.ReadArrayStart()
			if yyl1410 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1410, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1411Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1411Slc
	var yyhl1411 bool = l >= 0
	for yyj1411 := 0; ; yyj1411++ {
		if yyhl1411 {
			if yyj1411 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1411Slc = r.DecodeBytes(yys1411Slc, true, true)
		yys1411 := string(yys1411Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1411 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1412 := &x.Command
				yym1413 := z.DecBinary()
				_ = yym1413
				if false {
				} else {
					z.F.DecSliceStringX(yyv1412, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1411)
		} // end switch yys1411
	} // end for yyj1411
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1414 int
	var yyb1414 bool
	var yyhl1414 bool = l >= 0
	yyj1414++
	if yyhl1414 {
		yyb1414 = yyj1414 > l
	} else {
		yyb1414 = r.CheckBreak()
	}
	if yyb1414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1415 := &x.Command
		yym1416 := z.DecBinary()
		_ = yym1416
		if false {
		} else {
			z.F.DecSliceStringX(yyv1415, false, d)
		}
	}
	for {
		yyj1414++
		if yyhl1414 {
			yyb1414 = yyj1414 > l
		} else {
			yyb1414 = r.CheckBreak()
		}
		if yyb1414 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1414-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1417 := z.EncBinary()
		_ = yym1417
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1418 := !z.EncBinary()
			yy2arr1418 := z.EncBasicHandle().StructToArray
			var yyq1418 [8]bool
			_, _, _ = yysep1418, yyq1418, yy2arr1418
			const yyr1418 bool = false
			yyq1418[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1418[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1418[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1418[3] = x.InitialDelaySeconds != 0
			yyq1418[4] = x.TimeoutSeconds != 0
			yyq1418[5] = x.PeriodSeconds != 0
			yyq1418[6] = x.SuccessThreshold != 0
			yyq1418[7] = x.FailureThreshold != 0
			var yynn1418 int
			if yyr1418 || yy2arr1418 {
				r.EncodeArrayStart(8)
			} else {
				yynn1418 = 0
				for _, b := range yyq1418 {
					if b {
						yynn1418++
					}
				}
				r.EncodeMapStart(yynn1418)
				yynn1418 = 0
			}
			var yyn1419 bool
			if x.Handler.Exec == nil {
				yyn1419 = true
				goto LABEL1419
			}
		LABEL1419:
			if yyr1418 || yy2arr1418 {
				if yyn1419 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1418[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1418[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1419 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1420 bool
			if x.Handler.HTTPGet == nil {
				yyn1420 = true
				goto LABEL1420
			}
		LABEL1420:
			if yyr1418 || yy2arr1418 {
				if yyn1420 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1418[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1418[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1420 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1421 bool
			if x.Handler.TCPSocket == nil {
				yyn1421 = true
				goto LABEL1421
			}
		LABEL1421:
			if yyr1418 || yy2arr1418 {
				if yyn1421 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1418[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1418[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1421 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1418[3] {
					yym1423 := z.EncBinary()
					_ = yym1423
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1418[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1424 := z.EncBinary()
					_ = yym1424
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1418[4] {
					yym1426 := z.EncBinary()
					_ = yym1426
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1418[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1427 := z.EncBinary()
					_ = yym1427
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1418[5] {
					yym1429 := z.EncBinary()
					_ = yym1429
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1418[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1430 := z.EncBinary()
					_ = yym1430
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1418[6] {
					yym1432 := z.EncBinary()
					_ = yym1432
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1418[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1433 := z.EncBinary()
					_ = yym1433
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1418[7] {
					yym1435 := z.EncBinary()
					_ = yym1435
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1418[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1436 := z.EncBinary()
					_ = yym1436
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1437 := z.DecBinary()
	_ = yym1437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1438 := r.ContainerType()
		if yyct1438 == codecSelferValueTypeMap1234 {
			yyl1438 := r.ReadMapStart()
			if yyl1438 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1438, d)
			}
		} else if yyct1438 == codecSelferValueTypeArray1234 {
			yyl1438 := r.ReadArrayStart()
			if yyl1438 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1438, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1439Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1439Slc
	var yyhl1439 bool = l >= 0
	for yyj1439 := 0; ; yyj1439++ {
		if yyhl1439 {
			if yyj1439 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1439Slc = r.DecodeBytes(yys1439Slc, true, true)
		yys1439 := string(yys1439Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1439 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1439)
		} // end switch yys1439
	} // end for yyj1439
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1448 int
	var yyb1448 bool
	var yyhl1448 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1448++
		if yyhl1448 {
			yyb1448 = yyj1448 > l
		} else {
			yyb1448 = r.CheckBreak()
		}
		if yyb1448 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1448-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1457 := z.EncBinary()
	_ = yym1457
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1458 := z.DecBinary()
	_ = yym1458
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1459 := z.EncBinary()
	_ = yym1459
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1460 := z.DecBinary()
	_ = yym1460
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1461 := z.EncBinary()
		_ = yym1461
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1462 := !z.EncBinary()
			yy2arr1462 := z.EncBasicHandle().StructToArray
			var yyq1462 [2]bool
			_, _, _ = yysep1462, yyq1462, yy2arr1462
			const yyr1462 bool = false
			yyq1462[0] = len(x.Add) != 0
			yyq1462[1] = len(x.Drop) != 0
			var yynn1462 int
			if yyr1462 || yy2arr1462 {
				r.EncodeArrayStart(2)
			} else {
				yynn1462 = 0
				for _, b := range yyq1462 {
					if b {
						yynn1462++
					}
				}
				r.EncodeMapStart(yynn1462)
				yynn1462 = 0
			}
			if yyr1462 || yy2arr1462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1462[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1464 := z.EncBinary()
						_ = yym1464
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1462[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1465 := z.EncBinary()
						_ = yym1465
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1462 || yy2arr1462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1462[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1467 := z.EncBinary()
						_ = yym1467
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1462[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1468 := z.EncBinary()
						_ = yym1468
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1462 || yy2arr1462 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1469 := z.DecBinary()
	_ = yym1469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1470 := r.ContainerType()
		if yyct1470 == codecSelferValueTypeMap1234 {
			yyl1470 := r.ReadMapStart()
			if yyl1470 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1470, d)
			}
		} else if yyct1470 == codecSelferValueTypeArray1234 {
			yyl1470 := r.ReadArrayStart()
			if yyl1470 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1470, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1471Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1471Slc
	var yyhl1471 bool = l >= 0
	for yyj1471 := 0; ; yyj1471++ {
		if yyhl1471 {
			if yyj1471 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1471Slc = r.DecodeBytes(yys1471Slc, true, true)
		yys1471 := string(yys1471Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1471 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1472 := &x.Add
				yym1473 := z.DecBinary()
				_ = yym1473
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1472), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1474 := &x.Drop
				yym1475 := z.DecBinary()
				_ = yym1475
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1474), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1471)
		} // end switch yys1471
	} // end for yyj1471
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1476 int
	var yyb1476 bool
	var yyhl1476 bool = l >= 0
	yyj1476++
	if yyhl1476 {
		yyb1476 = yyj1476 > l
	} else {
		yyb1476 = r.CheckBreak()
	}
	if yyb1476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1477 := &x.Add
		yym1478 := z.DecBinary()
		_ = yym1478
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1477), d)
		}
	}
	yyj1476++
	if yyhl1476 {
		yyb1476 = yyj1476 > l
	} else {
		yyb1476 = r.CheckBreak()
	}
	if yyb1476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1479 := &x.Drop
		yym1480 := z.DecBinary()
		_ = yym1480
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1479), d)
		}
	}
	for {
		yyj1476++
		if yyhl1476 {
			yyb1476 = yyj1476 > l
		} else {
			yyb1476 = r.CheckBreak()
		}
		if yyb1476 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1476-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1481 := z.EncBinary()
		_ = yym1481
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1482 := !z.EncBinary()
			yy2arr1482 := z.EncBasicHandle().StructToArray
			var yyq1482 [2]bool
			_, _, _ = yysep1482, yyq1482, yy2arr1482
			const yyr1482 bool = false
			yyq1482[0] = len(x.Limits) != 0
			yyq1482[1] = len(x.Requests) != 0
			var yynn1482 int
			if yyr1482 || yy2arr1482 {
				r.EncodeArrayStart(2)
			} else {
				yynn1482 = 0
				for _, b := range yyq1482 {
					if b {
						yynn1482++
					}
				}
				r.EncodeMapStart(yynn1482)
				yynn1482 = 0
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1482[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1482[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1482[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1482[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1485 := z.DecBinary()
	_ = yym1485
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1486 := r.ContainerType()
		if yyct1486 == codecSelferValueTypeMap1234 {
			yyl1486 := r.ReadMapStart()
			if yyl1486 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1486, d)
			}
		} else if yyct1486 == codecSelferValueTypeArray1234 {
			yyl1486 := r.ReadArrayStart()
			if yyl1486 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1486, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1487Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1487Slc
	var yyhl1487 bool = l >= 0
	for yyj1487 := 0; ; yyj1487++ {
		if yyhl1487 {
			if yyj1487 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1487Slc = r.DecodeBytes(yys1487Slc, true, true)
		yys1487 := string(yys1487Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1487 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1488 := &x.Limits
				yyv1488.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1489 := &x.Requests
				yyv1489.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1487)
		} // end switch yys1487
	} // end for yyj1487
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1490 int
	var yyb1490 bool
	var yyhl1490 bool = l >= 0
	yyj1490++
	if yyhl1490 {
		yyb1490 = yyj1490 > l
	} else {
		yyb1490 = r.CheckBreak()
	}
	if yyb1490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1491 := &x.Limits
		yyv1491.CodecDecodeSelf(d)
	}
	yyj1490++
	if yyhl1490 {
		yyb1490 = yyj1490 > l
	} else {
		yyb1490 = r.CheckBreak()
	}
	if yyb1490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1492 := &x.Requests
		yyv1492.CodecDecodeSelf(d)
	}
	for {
		yyj1490++
		if yyhl1490 {
			yyb1490 = yyj1490 > l
		} else {
			yyb1490 = r.CheckBreak()
		}
		if yyb1490 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1490-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1493 := z.EncBinary()
		_ = yym1493
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1494 := !z.EncBinary()
			yy2arr1494 := z.EncBasicHandle().StructToArray
			var yyq1494 [18]bool
			_, _, _ = yysep1494, yyq1494, yy2arr1494
			const yyr1494 bool = false
			yyq1494[1] = x.Image != ""
			yyq1494[2] = len(x.Command) != 0
			yyq1494[3] = len(x.Args) != 0
			yyq1494[4] = x.WorkingDir != ""
			yyq1494[5] = len(x.Ports) != 0
			yyq1494[6] = len(x.Env) != 0
			yyq1494[7] = true
			yyq1494[8] = len(x.VolumeMounts) != 0
			yyq1494[9] = x.LivenessProbe != nil
			yyq1494[10] = x.ReadinessProbe != nil
			yyq1494[11] = x.Lifecycle != nil
			yyq1494[12] = x.TerminationMessagePath != ""
			yyq1494[13] = x.ImagePullPolicy != ""
			yyq1494[14] = x.SecurityContext != nil
			yyq1494[15] = x.Stdin != false
			yyq1494[16] = x.StdinOnce != false
			yyq1494[17] = x.TTY != false
			var yynn1494 int
			if yyr1494 || yy2arr1494 {
				r.EncodeArrayStart(18)
			} else {
				yynn1494 = 1
				for _, b := range yyq1494 {
					if b {
						yynn1494++
					}
				}
				r.EncodeMapStart(yynn1494)
				yynn1494 = 0
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1496 := z.EncBinary()
				_ = yym1496
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1497 := z.EncBinary()
				_ = yym1497
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[1] {
					yym1499 := z.EncBinary()
					_ = yym1499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1494[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1500 := z.EncBinary()
					_ = yym1500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1502 := z.EncBinary()
						_ = yym1502
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1494[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1503 := z.EncBinary()
						_ = yym1503
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1505 := z.EncBinary()
						_ = yym1505
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1494[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1506 := z.EncBinary()
						_ = yym1506
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[4] {
					yym1508 := z.EncBinary()
					_ = yym1508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1494[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1509 := z.EncBinary()
					_ = yym1509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1511 := z.EncBinary()
						_ = yym1511
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1494[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1512 := z.EncBinary()
						_ = yym1512
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1514 := z.EncBinary()
						_ = yym1514
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1494[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1515 := z.EncBinary()
						_ = yym1515
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[7] {
					yy1517 := &x.Resources
					yy1517.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1494[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1518 := &x.Resources
					yy1518.CodecEncodeSelf(e)
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1520 := z.EncBinary()
						_ = yym1520
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1494[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1521 := z.EncBinary()
						_ = yym1521
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1494[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1494[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1494[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[12] {
					yym1526 := z.EncBinary()
					_ = yym1526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1494[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1527 := z.EncBinary()
					_ = yym1527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1494[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1494[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[15] {
					yym1531 := z.EncBinary()
					_ = yym1531
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1494[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1532 := z.EncBinary()
					_ = yym1532
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[16] {
					yym1534 := z.EncBinary()
					_ = yym1534
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1494[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1535 := z.EncBinary()
					_ = yym1535
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[17] {
					yym1537 := z.EncBinary()
					_ = yym1537
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1494[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1538 := z.EncBinary()
					_ = yym1538
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1539 := z.DecBinary()
	_ = yym1539
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1540 := r.ContainerType()
		if yyct1540 == codecSelferValueTypeMap1234 {
			yyl1540 := r.ReadMapStart()
			if yyl1540 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1540, d)
			}
		} else if yyct1540 == codecSelferValueTypeArray1234 {
			yyl1540 := r.ReadArrayStart()
			if yyl1540 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1540, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1541Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1541Slc
	var yyhl1541 bool = l >= 0
	for yyj1541 := 0; ; yyj1541++ {
		if yyhl1541 {
			if yyj1541 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1541Slc = r.DecodeBytes(yys1541Slc, true, true)
		yys1541 := string(yys1541Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1541 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1544 := &x.Command
				yym1545 := z.DecBinary()
				_ = yym1545
				if false {
				} else {
					z.F.DecSliceStringX(yyv1544, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1546 := &x.Args
				yym1547 := z.DecBinary()
				_ = yym1547
				if false {
				} else {
					z.F.DecSliceStringX(yyv1546, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1549 := &x.Ports
				yym1550 := z.DecBinary()
				_ = yym1550
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1549), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1551 := &x.Env
				yym1552 := z.DecBinary()
				_ = yym1552
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1551), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1553 := &x.Resources
				yyv1553.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1554 := &x.VolumeMounts
				yym1555 := z.DecBinary()
				_ = yym1555
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1554), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1541)
		} // end switch yys1541
	} // end for yyj1541
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1565 int
	var yyb1565 bool
	var yyhl1565 bool = l >= 0
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1568 := &x.Command
		yym1569 := z.DecBinary()
		_ = yym1569
		if false {
		} else {
			z.F.DecSliceStringX(yyv1568, false, d)
		}
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1570 := &x.Args
		yym1571 := z.DecBinary()
		_ = yym1571
		if false {
		} else {
			z.F.DecSliceStringX(yyv1570, false, d)
		}
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1573 := &x.Ports
		yym1574 := z.DecBinary()
		_ = yym1574
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1573), d)
		}
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1575 := &x.Env
		yym1576 := z.DecBinary()
		_ = yym1576
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1575), d)
		}
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1577 := &x.Resources
		yyv1577.CodecDecodeSelf(d)
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1578 := &x.VolumeMounts
		yym1579 := z.DecBinary()
		_ = yym1579
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1578), d)
		}
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1565++
		if yyhl1565 {
			yyb1565 = yyj1565 > l
		} else {
			yyb1565 = r.CheckBreak()
		}
		if yyb1565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1589 := z.EncBinary()
		_ = yym1589
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1590 := !z.EncBinary()
			yy2arr1590 := z.EncBasicHandle().StructToArray
			var yyq1590 [3]bool
			_, _, _ = yysep1590, yyq1590, yy2arr1590
			const yyr1590 bool = false
			yyq1590[0] = x.Exec != nil
			yyq1590[1] = x.HTTPGet != nil
			yyq1590[2] = x.TCPSocket != nil
			var yynn1590 int
			if yyr1590 || yy2arr1590 {
				r.EncodeArrayStart(3)
			} else {
				yynn1590 = 0
				for _, b := range yyq1590 {
					if b {
						yynn1590++
					}
				}
				r.EncodeMapStart(yynn1590)
				yynn1590 = 0
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1590[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1590[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1590[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1590[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1590[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1590[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1594 := z.DecBinary()
	_ = yym1594
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1595 := r.ContainerType()
		if yyct1595 == codecSelferValueTypeMap1234 {
			yyl1595 := r.ReadMapStart()
			if yyl1595 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1595, d)
			}
		} else if yyct1595 == codecSelferValueTypeArray1234 {
			yyl1595 := r.ReadArrayStart()
			if yyl1595 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1595, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1596Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1596Slc
	var yyhl1596 bool = l >= 0
	for yyj1596 := 0; ; yyj1596++ {
		if yyhl1596 {
			if yyj1596 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1596Slc = r.DecodeBytes(yys1596Slc, true, true)
		yys1596 := string(yys1596Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1596 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1596)
		} // end switch yys1596
	} // end for yyj1596
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1600 int
	var yyb1600 bool
	var yyhl1600 bool = l >= 0
	yyj1600++
	if yyhl1600 {
		yyb1600 = yyj1600 > l
	} else {
		yyb1600 = r.CheckBreak()
	}
	if yyb1600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1600++
	if yyhl1600 {
		yyb1600 = yyj1600 > l
	} else {
		yyb1600 = r.CheckBreak()
	}
	if yyb1600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1600++
	if yyhl1600 {
		yyb1600 = yyj1600 > l
	} else {
		yyb1600 = r.CheckBreak()
	}
	if yyb1600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1600++
		if yyhl1600 {
			yyb1600 = yyj1600 > l
		} else {
			yyb1600 = r.CheckBreak()
		}
		if yyb1600 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1600-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1604 := z.EncBinary()
		_ = yym1604
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1605 := !z.EncBinary()
			yy2arr1605 := z.EncBasicHandle().StructToArray
			var yyq1605 [2]bool
			_, _, _ = yysep1605, yyq1605, yy2arr1605
			const yyr1605 bool = false
			yyq1605[0] = x.PostStart != nil
			yyq1605[1] = x.PreStop != nil
			var yynn1605 int
			if yyr1605 || yy2arr1605 {
				r.EncodeArrayStart(2)
			} else {
				yynn1605 = 0
				for _, b := range yyq1605 {
					if b {
						yynn1605++
					}
				}
				r.EncodeMapStart(yynn1605)
				yynn1605 = 0
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1605[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1605[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1608 := z.DecBinary()
	_ = yym1608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1609 := r.ContainerType()
		if yyct1609 == codecSelferValueTypeMap1234 {
			yyl1609 := r.ReadMapStart()
			if yyl1609 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1609, d)
			}
		} else if yyct1609 == codecSelferValueTypeArray1234 {
			yyl1609 := r.ReadArrayStart()
			if yyl1609 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1609, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1610Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1610Slc
	var yyhl1610 bool = l >= 0
	for yyj1610 := 0; ; yyj1610++ {
		if yyhl1610 {
			if yyj1610 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1610Slc = r.DecodeBytes(yys1610Slc, true, true)
		yys1610 := string(yys1610Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1610 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1610)
		} // end switch yys1610
	} // end for yyj1610
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1613 int
	var yyb1613 bool
	var yyhl1613 bool = l >= 0
	yyj1613++
	if yyhl1613 {
		yyb1613 = yyj1613 > l
	} else {
		yyb1613 = r.CheckBreak()
	}
	if yyb1613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1613++
	if yyhl1613 {
		yyb1613 = yyj1613 > l
	} else {
		yyb1613 = r.CheckBreak()
	}
	if yyb1613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1613++
		if yyhl1613 {
			yyb1613 = yyj1613 > l
		} else {
			yyb1613 = r.CheckBreak()
		}
		if yyb1613 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1613-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1616 := z.EncBinary()
	_ = yym1616
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1617 := z.DecBinary()
	_ = yym1617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1618 := z.EncBinary()
		_ = yym1618
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1619 := !z.EncBinary()
			yy2arr1619 := z.EncBasicHandle().StructToArray
			var yyq1619 [2]bool
			_, _, _ = yysep1619, yyq1619, yy2arr1619
			const yyr1619 bool = false
			yyq1619[0] = x.Reason != ""
			yyq1619[1] = x.Message != ""
			var yynn1619 int
			if yyr1619 || yy2arr1619 {
				r.EncodeArrayStart(2)
			} else {
				yynn1619 = 0
				for _, b := range yyq1619 {
					if b {
						yynn1619++
					}
				}
				r.EncodeMapStart(yynn1619)
				yynn1619 = 0
			}
			if yyr1619 || yy2arr1619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1619[0] {
					yym1621 := z.EncBinary()
					_ = yym1621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1619[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1619 || yy2arr1619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1619[1] {
					yym1624 := z.EncBinary()
					_ = yym1624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1619[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1625 := z.EncBinary()
					_ = yym1625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1619 || yy2arr1619 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1626 := z.DecBinary()
	_ = yym1626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1627 := r.ContainerType()
		if yyct1627 == codecSelferValueTypeMap1234 {
			yyl1627 := r.ReadMapStart()
			if yyl1627 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1627, d)
			}
		} else if yyct1627 == codecSelferValueTypeArray1234 {
			yyl1627 := r.ReadArrayStart()
			if yyl1627 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1628Slc
	var yyhl1628 bool = l >= 0
	for yyj1628 := 0; ; yyj1628++ {
		if yyhl1628 {
			if yyj1628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1628Slc = r.DecodeBytes(yys1628Slc, true, true)
		yys1628 := string(yys1628Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1628 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1628)
		} // end switch yys1628
	} // end for yyj1628
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1631 int
	var yyb1631 bool
	var yyhl1631 bool = l >= 0
	yyj1631++
	if yyhl1631 {
		yyb1631 = yyj1631 > l
	} else {
		yyb1631 = r.CheckBreak()
	}
	if yyb1631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1631++
	if yyhl1631 {
		yyb1631 = yyj1631 > l
	} else {
		yyb1631 = r.CheckBreak()
	}
	if yyb1631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1631++
		if yyhl1631 {
			yyb1631 = yyj1631 > l
		} else {
			yyb1631 = r.CheckBreak()
		}
		if yyb1631 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1631-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1634 := z.EncBinary()
		_ = yym1634
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1635 := !z.EncBinary()
			yy2arr1635 := z.EncBasicHandle().StructToArray
			var yyq1635 [1]bool
			_, _, _ = yysep1635, yyq1635, yy2arr1635
			const yyr1635 bool = false
			yyq1635[0] = true
			var yynn1635 int
			if yyr1635 || yy2arr1635 {
				r.EncodeArrayStart(1)
			} else {
				yynn1635 = 0
				for _, b := range yyq1635 {
					if b {
						yynn1635++
					}
				}
				r.EncodeMapStart(yynn1635)
				yynn1635 = 0
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1635[0] {
					yy1637 := &x.StartedAt
					yym1638 := z.EncBinary()
					_ = yym1638
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1637) {
					} else if yym1638 {
						z.EncBinaryMarshal(yy1637)
					} else if !yym1638 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1637)
					} else {
						z.EncFallback(yy1637)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1635[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1639 := &x.StartedAt
					yym1640 := z.EncBinary()
					_ = yym1640
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1639) {
					} else if yym1640 {
						z.EncBinaryMarshal(yy1639)
					} else if !yym1640 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1639)
					} else {
						z.EncFallback(yy1639)
					}
				}
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1641 := z.DecBinary()
	_ = yym1641
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1642 := r.ContainerType()
		if yyct1642 == codecSelferValueTypeMap1234 {
			yyl1642 := r.ReadMapStart()
			if yyl1642 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1642, d)
			}
		} else if yyct1642 == codecSelferValueTypeArray1234 {
			yyl1642 := r.ReadArrayStart()
			if yyl1642 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1642, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1643Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1643Slc
	var yyhl1643 bool = l >= 0
	for yyj1643 := 0; ; yyj1643++ {
		if yyhl1643 {
			if yyj1643 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1643Slc = r.DecodeBytes(yys1643Slc, true, true)
		yys1643 := string(yys1643Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1643 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1644 := &x.StartedAt
				yym1645 := z.DecBinary()
				_ = yym1645
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1644) {
				} else if yym1645 {
					z.DecBinaryUnmarshal(yyv1644)
				} else if !yym1645 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1644)
				} else {
					z.DecFallback(yyv1644, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1643)
		} // end switch yys1643
	} // end for yyj1643
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1646 int
	var yyb1646 bool
	var yyhl1646 bool = l >= 0
	yyj1646++
	if yyhl1646 {
		yyb1646 = yyj1646 > l
	} else {
		yyb1646 = r.CheckBreak()
	}
	if yyb1646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1647 := &x.StartedAt
		yym1648 := z.DecBinary()
		_ = yym1648
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1647) {
		} else if yym1648 {
			z.DecBinaryUnmarshal(yyv1647)
		} else if !yym1648 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1647)
		} else {
			z.DecFallback(yyv1647, false)
		}
	}
	for {
		yyj1646++
		if yyhl1646 {
			yyb1646 = yyj1646 > l
		} else {
			yyb1646 = r.CheckBreak()
		}
		if yyb1646 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1646-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1649 := z.EncBinary()
		_ = yym1649
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1650 := !z.EncBinary()
			yy2arr1650 := z.EncBasicHandle().StructToArray
			var yyq1650 [7]bool
			_, _, _ = yysep1650, yyq1650, yy2arr1650
			const yyr1650 bool = false
			yyq1650[1] = x.Signal != 0
			yyq1650[2] = x.Reason != ""
			yyq1650[3] = x.Message != ""
			yyq1650[4] = true
			yyq1650[5] = true
			yyq1650[6] = x.ContainerID != ""
			var yynn1650 int
			if yyr1650 || yy2arr1650 {
				r.EncodeArrayStart(7)
			} else {
				yynn1650 = 1
				for _, b := range yyq1650 {
					if b {
						yynn1650++
					}
				}
				r.EncodeMapStart(yynn1650)
				yynn1650 = 0
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1652 := z.EncBinary()
				_ = yym1652
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1653 := z.EncBinary()
				_ = yym1653
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1650[1] {
					yym1655 := z.EncBinary()
					_ = yym1655
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1650[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1656 := z.EncBinary()
					_ = yym1656
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1650[2] {
					yym1658 := z.EncBinary()
					_ = yym1658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1650[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1659 := z.EncBinary()
					_ = yym1659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1650[3] {
					yym1661 := z.EncBinary()
					_ = yym1661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1650[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1662 := z.EncBinary()
					_ = yym1662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1650[4] {
					yy1664 := &x.StartedAt
					yym1665 := z.EncBinary()
					_ = yym1665
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1664) {
					} else if yym1665 {
						z.EncBinaryMarshal(yy1664)
					} else if !yym1665 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1664)
					} else {
						z.EncFallback(yy1664)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1650[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1666 := &x.StartedAt
					yym1667 := z.EncBinary()
					_ = yym1667
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1666) {
					} else if yym1667 {
						z.EncBinaryMarshal(yy1666)
					} else if !yym1667 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1666)
					} else {
						z.EncFallback(yy1666)
					}
				}
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1650[5] {
					yy1669 := &x.FinishedAt
					yym1670 := z.EncBinary()
					_ = yym1670
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1669) {
					} else if yym1670 {
						z.EncBinaryMarshal(yy1669)
					} else if !yym1670 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1669)
					} else {
						z.EncFallback(yy1669)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1650[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1671 := &x.FinishedAt
					yym1672 := z.EncBinary()
					_ = yym1672
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1671) {
					} else if yym1672 {
						z.EncBinaryMarshal(yy1671)
					} else if !yym1672 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1671)
					} else {
						z.EncFallback(yy1671)
					}
				}
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1650[6] {
					yym1674 := z.EncBinary()
					_ = yym1674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1650[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1675 := z.EncBinary()
					_ = yym1675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1676 := z.DecBinary()
	_ = yym1676
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1677 := r.ContainerType()
		if yyct1677 == codecSelferValueTypeMap1234 {
			yyl1677 := r.ReadMapStart()
			if yyl1677 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1677, d)
			}
		} else if yyct1677 == codecSelferValueTypeArray1234 {
			yyl1677 := r.ReadArrayStart()
			if yyl1677 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1677, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1678Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1678Slc
	var yyhl1678 bool = l >= 0
	for yyj1678 := 0; ; yyj1678++ {
		if yyhl1678 {
			if yyj1678 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1678Slc = r.DecodeBytes(yys1678Slc, true, true)
		yys1678 := string(yys1678Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1678 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1683 := &x.StartedAt
				yym1684 := z.DecBinary()
				_ = yym1684
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1683) {
				} else if yym1684 {
					z.DecBinaryUnmarshal(yyv1683)
				} else if !yym1684 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1683)
				} else {
					z.DecFallback(yyv1683, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1685 := &x.FinishedAt
				yym1686 := z.DecBinary()
				_ = yym1686
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1685) {
				} else if yym1686 {
					z.DecBinaryUnmarshal(yyv1685)
				} else if !yym1686 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1685)
				} else {
					z.DecFallback(yyv1685, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1678)
		} // end switch yys1678
	} // end for yyj1678
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1688 int
	var yyb1688 bool
	var yyhl1688 bool = l >= 0
	yyj1688++
	if yyhl1688 {
		yyb1688 = yyj1688 > l
	} else {
		yyb1688 = r.CheckBreak()
	}
	if yyb1688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1688++
	if yyhl1688 {
		yyb1688 = yyj1688 > l
	} else {
		yyb1688 = r.CheckBreak()
	}
	if yyb1688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1688++
	if yyhl1688 {
		yyb1688 = yyj1688 > l
	} else {
		yyb1688 = r.CheckBreak()
	}
	if yyb1688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1688++
	if yyhl1688 {
		yyb1688 = yyj1688 > l
	} else {
		yyb1688 = r.CheckBreak()
	}
	if yyb1688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1688++
	if yyhl1688 {
		yyb1688 = yyj1688 > l
	} else {
		yyb1688 = r.CheckBreak()
	}
	if yyb1688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1693 := &x.StartedAt
		yym1694 := z.DecBinary()
		_ = yym1694
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1693) {
		} else if yym1694 {
			z.DecBinaryUnmarshal(yyv1693)
		} else if !yym1694 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1693)
		} else {
			z.DecFallback(yyv1693, false)
		}
	}
	yyj1688++
	if yyhl1688 {
		yyb1688 = yyj1688 > l
	} else {
		yyb1688 = r.CheckBreak()
	}
	if yyb1688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1695 := &x.FinishedAt
		yym1696 := z.DecBinary()
		_ = yym1696
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1695) {
		} else if yym1696 {
			z.DecBinaryUnmarshal(yyv1695)
		} else if !yym1696 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1695)
		} else {
			z.DecFallback(yyv1695, false)
		}
	}
	yyj1688++
	if yyhl1688 {
		yyb1688 = yyj1688 > l
	} else {
		yyb1688 = r.CheckBreak()
	}
	if yyb1688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1688++
		if yyhl1688 {
			yyb1688 = yyj1688 > l
		} else {
			yyb1688 = r.CheckBreak()
		}
		if yyb1688 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1688-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1698 := z.EncBinary()
		_ = yym1698
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1699 := !z.EncBinary()
			yy2arr1699 := z.EncBasicHandle().StructToArray
			var yyq1699 [3]bool
			_, _, _ = yysep1699, yyq1699, yy2arr1699
			const yyr1699 bool = false
			yyq1699[0] = x.Waiting != nil
			yyq1699[1] = x.Running != nil
			yyq1699[2] = x.Terminated != nil
			var yynn1699 int
			if yyr1699 || yy2arr1699 {
				r.EncodeArrayStart(3)
			} else {
				yynn1699 = 0
				for _, b := range yyq1699 {
					if b {
						yynn1699++
					}
				}
				r.EncodeMapStart(yynn1699)
				yynn1699 = 0
			}
			if yyr1699 || yy2arr1699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1699[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1699[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1699 || yy2arr1699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1699[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1699[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1699 || yy2arr1699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1699[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1699[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1699 || yy2arr1699 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1703 := z.DecBinary()
	_ = yym1703
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1704 := r.ContainerType()
		if yyct1704 == codecSelferValueTypeMap1234 {
			yyl1704 := r.ReadMapStart()
			if yyl1704 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1704, d)
			}
		} else if yyct1704 == codecSelferValueTypeArray1234 {
			yyl1704 := r.ReadArrayStart()
			if yyl1704 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1704, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1705Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1705Slc
	var yyhl1705 bool = l >= 0
	for yyj1705 := 0; ; yyj1705++ {
		if yyhl1705 {
			if yyj1705 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1705Slc = r.DecodeBytes(yys1705Slc, true, true)
		yys1705 := string(yys1705Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1705 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1705)
		} // end switch yys1705
	} // end for yyj1705
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1709 int
	var yyb1709 bool
	var yyhl1709 bool = l >= 0
	yyj1709++
	if yyhl1709 {
		yyb1709 = yyj1709 > l
	} else {
		yyb1709 = r.CheckBreak()
	}
	if yyb1709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1709++
	if yyhl1709 {
		yyb1709 = yyj1709 > l
	} else {
		yyb1709 = r.CheckBreak()
	}
	if yyb1709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1709++
	if yyhl1709 {
		yyb1709 = yyj1709 > l
	} else {
		yyb1709 = r.CheckBreak()
	}
	if yyb1709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1709++
		if yyhl1709 {
			yyb1709 = yyj1709 > l
		} else {
			yyb1709 = r.CheckBreak()
		}
		if yyb1709 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1709-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1713 := z.EncBinary()
		_ = yym1713
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1714 := !z.EncBinary()
			yy2arr1714 := z.EncBasicHandle().StructToArray
			var yyq1714 [8]bool
			_, _, _ = yysep1714, yyq1714, yy2arr1714
			const yyr1714 bool = false
			yyq1714[1] = true
			yyq1714[2] = true
			yyq1714[7] = x.ContainerID != ""
			var yynn1714 int
			if yyr1714 || yy2arr1714 {
				r.EncodeArrayStart(8)
			} else {
				yynn1714 = 5
				for _, b := range yyq1714 {
					if b {
						yynn1714++
					}
				}
				r.EncodeMapStart(yynn1714)
				yynn1714 = 0
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1716 := z.EncBinary()
				_ = yym1716
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1717 := z.EncBinary()
				_ = yym1717
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[1] {
					yy1719 := &x.State
					yy1719.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1714[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1720 := &x.State
					yy1720.CodecEncodeSelf(e)
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[2] {
					yy1722 := &x.LastTerminationState
					yy1722.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1714[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1723 := &x.LastTerminationState
					yy1723.CodecEncodeSelf(e)
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1725 := z.EncBinary()
				_ = yym1725
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1726 := z.EncBinary()
				_ = yym1726
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1728 := z.EncBinary()
				_ = yym1728
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1729 := z.EncBinary()
				_ = yym1729
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1731 := z.EncBinary()
				_ = yym1731
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1732 := z.EncBinary()
				_ = yym1732
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1734 := z.EncBinary()
				_ = yym1734
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1735 := z.EncBinary()
				_ = yym1735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[7] {
					yym1737 := z.EncBinary()
					_ = yym1737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1714[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1738 := z.EncBinary()
					_ = yym1738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1739 := z.DecBinary()
	_ = yym1739
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1740 := r.ContainerType()
		if yyct1740 == codecSelferValueTypeMap1234 {
			yyl1740 := r.ReadMapStart()
			if yyl1740 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1740, d)
			}
		} else if yyct1740 == codecSelferValueTypeArray1234 {
			yyl1740 := r.ReadArrayStart()
			if yyl1740 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1740, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1741Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1741Slc
	var yyhl1741 bool = l >= 0
	for yyj1741 := 0; ; yyj1741++ {
		if yyhl1741 {
			if yyj1741 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1741Slc = r.DecodeBytes(yys1741Slc, true, true)
		yys1741 := string(yys1741Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1741 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1743 := &x.State
				yyv1743.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1744 := &x.LastTerminationState
				yyv1744.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1741)
		} // end switch yys1741
	} // end for yyj1741
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1750 int
	var yyb1750 bool
	var yyhl1750 bool = l >= 0
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1752 := &x.State
		yyv1752.CodecDecodeSelf(d)
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1753 := &x.LastTerminationState
		yyv1753.CodecDecodeSelf(d)
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1750++
		if yyhl1750 {
			yyb1750 = yyj1750 > l
		} else {
			yyb1750 = r.CheckBreak()
		}
		if yyb1750 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1750-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1759 := z.EncBinary()
	_ = yym1759
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1760 := z.DecBinary()
	_ = yym1760
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1761 := z.EncBinary()
	_ = yym1761
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1762 := z.DecBinary()
	_ = yym1762
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1763 := z.EncBinary()
		_ = yym1763
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1764 := !z.EncBinary()
			yy2arr1764 := z.EncBasicHandle().StructToArray
			var yyq1764 [6]bool
			_, _, _ = yysep1764, yyq1764, yy2arr1764
			const yyr1764 bool = false
			yyq1764[2] = true
			yyq1764[3] = true
			yyq1764[4] = x.Reason != ""
			yyq1764[5] = x.Message != ""
			var yynn1764 int
			if yyr1764 || yy2arr1764 {
				r.EncodeArrayStart(6)
			} else {
				yynn1764 = 2
				for _, b := range yyq1764 {
					if b {
						yynn1764++
					}
				}
				r.EncodeMapStart(yynn1764)
				yynn1764 = 0
			}
			if yyr1764 || yy2arr1764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1764 || yy2arr1764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1764 || yy2arr1764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1764[2] {
					yy1768 := &x.LastProbeTime
					yym1769 := z.EncBinary()
					_ = yym1769
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1768) {
					} else if yym1769 {
						z.EncBinaryMarshal(yy1768)
					} else if !yym1769 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1768)
					} else {
						z.EncFallback(yy1768)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1764[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1770 := &x.LastProbeTime
					yym1771 := z.EncBinary()
					_ = yym1771
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1770) {
					} else if yym1771 {
						z.EncBinaryMarshal(yy1770)
					} else if !yym1771 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1770)
					} else {
						z.EncFallback(yy1770)
					}
				}
			}
			if yyr1764 || yy2arr1764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1764[3] {
					yy1773 := &x.LastTransitionTime
					yym1774 := z.EncBinary()
					_ = yym1774
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1773) {
					} else if yym1774 {
						z.EncBinaryMarshal(yy1773)
					} else if !yym1774 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1773)
					} else {
						z.EncFallback(yy1773)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1764[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1775 := &x.LastTransitionTime
					yym1776 := z.EncBinary()
					_ = yym1776
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1775) {
					} else if yym1776 {
						z.EncBinaryMarshal(yy1775)
					} else if !yym1776 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1775)
					} else {
						z.EncFallback(yy1775)
					}
				}
			}
			if yyr1764 || yy2arr1764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1764[4] {
					yym1778 := z.EncBinary()
					_ = yym1778
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1764[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1779 := z.EncBinary()
					_ = yym1779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1764 || yy2arr1764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1764[5] {
					yym1781 := z.EncBinary()
					_ = yym1781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1764[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1782 := z.EncBinary()
					_ = yym1782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1764 || yy2arr1764 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1783 := z.DecBinary()
	_ = yym1783
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1784 := r.ContainerType()
		if yyct1784 == codecSelferValueTypeMap1234 {
			yyl1784 := r.ReadMapStart()
			if yyl1784 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1784, d)
			}
		} else if yyct1784 == codecSelferValueTypeArray1234 {
			yyl1784 := r.ReadArrayStart()
			if yyl1784 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1784, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1785Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1785Slc
	var yyhl1785 bool = l >= 0
	for yyj1785 := 0; ; yyj1785++ {
		if yyhl1785 {
			if yyj1785 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1785Slc = r.DecodeBytes(yys1785Slc, true, true)
		yys1785 := string(yys1785Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1785 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1788 := &x.LastProbeTime
				yym1789 := z.DecBinary()
				_ = yym1789
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1788) {
				} else if yym1789 {
					z.DecBinaryUnmarshal(yyv1788)
				} else if !yym1789 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1788)
				} else {
					z.DecFallback(yyv1788, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1790 := &x.LastTransitionTime
				yym1791 := z.DecBinary()
				_ = yym1791
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1790) {
				} else if yym1791 {
					z.DecBinaryUnmarshal(yyv1790)
				} else if !yym1791 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1790)
				} else {
					z.DecFallback(yyv1790, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1785)
		} // end switch yys1785
	} // end for yyj1785
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1794 int
	var yyb1794 bool
	var yyhl1794 bool = l >= 0
	yyj1794++
	if yyhl1794 {
		yyb1794 = yyj1794 > l
	} else {
		yyb1794 = r.CheckBreak()
	}
	if yyb1794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1794++
	if yyhl1794 {
		yyb1794 = yyj1794 > l
	} else {
		yyb1794 = r.CheckBreak()
	}
	if yyb1794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1794++
	if yyhl1794 {
		yyb1794 = yyj1794 > l
	} else {
		yyb1794 = r.CheckBreak()
	}
	if yyb1794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1797 := &x.LastProbeTime
		yym1798 := z.DecBinary()
		_ = yym1798
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1797) {
		} else if yym1798 {
			z.DecBinaryUnmarshal(yyv1797)
		} else if !yym1798 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1797)
		} else {
			z.DecFallback(yyv1797, false)
		}
	}
	yyj1794++
	if yyhl1794 {
		yyb1794 = yyj1794 > l
	} else {
		yyb1794 = r.CheckBreak()
	}
	if yyb1794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1799 := &x.LastTransitionTime
		yym1800 := z.DecBinary()
		_ = yym1800
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1799) {
		} else if yym1800 {
			z.DecBinaryUnmarshal(yyv1799)
		} else if !yym1800 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1799)
		} else {
			z.DecFallback(yyv1799, false)
		}
	}
	yyj1794++
	if yyhl1794 {
		yyb1794 = yyj1794 > l
	} else {
		yyb1794 = r.CheckBreak()
	}
	if yyb1794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1794++
	if yyhl1794 {
		yyb1794 = yyj1794 > l
	} else {
		yyb1794 = r.CheckBreak()
	}
	if yyb1794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1794++
		if yyhl1794 {
			yyb1794 = yyj1794 > l
		} else {
			yyb1794 = r.CheckBreak()
		}
		if yyb1794 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1794-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1803 := z.EncBinary()
	_ = yym1803
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1804 := z.DecBinary()
	_ = yym1804
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1805 := z.EncBinary()
	_ = yym1805
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1806 := z.DecBinary()
	_ = yym1806
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1807 := z.EncBinary()
		_ = yym1807
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1808 := !z.EncBinary()
			yy2arr1808 := z.EncBasicHandle().StructToArray
			var yyq1808 [1]bool
			_, _, _ = yysep1808, yyq1808, yy2arr1808
			const yyr1808 bool = false
			var yynn1808 int
			if yyr1808 || yy2arr1808 {
				r.EncodeArrayStart(1)
			} else {
				yynn1808 = 1
				for _, b := range yyq1808 {
					if b {
						yynn1808++
					}
				}
				r.EncodeMapStart(yynn1808)
				yynn1808 = 0
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1810 := z.EncBinary()
					_ = yym1810
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1811 := z.EncBinary()
					_ = yym1811
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1812 := z.DecBinary()
	_ = yym1812
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1813 := r.ContainerType()
		if yyct1813 == codecSelferValueTypeMap1234 {
			yyl1813 := r.ReadMapStart()
			if yyl1813 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1813, d)
			}
		} else if yyct1813 == codecSelferValueTypeArray1234 {
			yyl1813 := r.ReadArrayStart()
			if yyl1813 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1813, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1814Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1814Slc
	var yyhl1814 bool = l >= 0
	for yyj1814 := 0; ; yyj1814++ {
		if yyhl1814 {
			if yyj1814 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1814Slc = r.DecodeBytes(yys1814Slc, true, true)
		yys1814 := string(yys1814Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1814 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1815 := &x.NodeSelectorTerms
				yym1816 := z.DecBinary()
				_ = yym1816
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1815), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1814)
		} // end switch yys1814
	} // end for yyj1814
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1817 int
	var yyb1817 bool
	var yyhl1817 bool = l >= 0
	yyj1817++
	if yyhl1817 {
		yyb1817 = yyj1817 > l
	} else {
		yyb1817 = r.CheckBreak()
	}
	if yyb1817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1818 := &x.NodeSelectorTerms
		yym1819 := z.DecBinary()
		_ = yym1819
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1818), d)
		}
	}
	for {
		yyj1817++
		if yyhl1817 {
			yyb1817 = yyj1817 > l
		} else {
			yyb1817 = r.CheckBreak()
		}
		if yyb1817 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1817-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1820 := z.EncBinary()
		_ = yym1820
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1821 := !z.EncBinary()
			yy2arr1821 := z.EncBasicHandle().StructToArray
			var yyq1821 [1]bool
			_, _, _ = yysep1821, yyq1821, yy2arr1821
			const yyr1821 bool = false
			var yynn1821 int
			if yyr1821 || yy2arr1821 {
				r.EncodeArrayStart(1)
			} else {
				yynn1821 = 1
				for _, b := range yyq1821 {
					if b {
						yynn1821++
					}
				}
				r.EncodeMapStart(yynn1821)
				yynn1821 = 0
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1823 := z.EncBinary()
					_ = yym1823
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1824 := z.EncBinary()
					_ = yym1824
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1825 := z.DecBinary()
	_ = yym1825
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1826 := r.ContainerType()
		if yyct1826 == codecSelferValueTypeMap1234 {
			yyl1826 := r.ReadMapStart()
			if yyl1826 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1826, d)
			}
		} else if yyct1826 == codecSelferValueTypeArray1234 {
			yyl1826 := r.ReadArrayStart()
			if yyl1826 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1826, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1827Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1827Slc
	var yyhl1827 bool = l >= 0
	for yyj1827 := 0; ; yyj1827++ {
		if yyhl1827 {
			if yyj1827 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1827Slc = r.DecodeBytes(yys1827Slc, true, true)
		yys1827 := string(yys1827Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1827 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1828 := &x.MatchExpressions
				yym1829 := z.DecBinary()
				_ = yym1829
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1828), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1827)
		} // end switch yys1827
	} // end for yyj1827
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1830 int
	var yyb1830 bool
	var yyhl1830 bool = l >= 0
	yyj1830++
	if yyhl1830 {
		yyb1830 = yyj1830 > l
	} else {
		yyb1830 = r.CheckBreak()
	}
	if yyb1830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1831 := &x.MatchExpressions
		yym1832 := z.DecBinary()
		_ = yym1832
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1831), d)
		}
	}
	for {
		yyj1830++
		if yyhl1830 {
			yyb1830 = yyj1830 > l
		} else {
			yyb1830 = r.CheckBreak()
		}
		if yyb1830 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1830-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1833 := z.EncBinary()
		_ = yym1833
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1834 := !z.EncBinary()
			yy2arr1834 := z.EncBasicHandle().StructToArray
			var yyq1834 [3]bool
			_, _, _ = yysep1834, yyq1834, yy2arr1834
			const yyr1834 bool = false
			yyq1834[2] = len(x.Values) != 0
			var yynn1834 int
			if yyr1834 || yy2arr1834 {
				r.EncodeArrayStart(3)
			} else {
				yynn1834 = 2
				for _, b := range yyq1834 {
					if b {
						yynn1834++
					}
				}
				r.EncodeMapStart(yynn1834)
				yynn1834 = 0
			}
			if yyr1834 || yy2arr1834 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1836 := z.EncBinary()
				_ = yym1836
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1837 := z.EncBinary()
				_ = yym1837
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1834 || yy2arr1834 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1834 || yy2arr1834 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1834[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1840 := z.EncBinary()
						_ = yym1840
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1834[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1841 := z.EncBinary()
						_ = yym1841
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1834 || yy2arr1834 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1842 := z.DecBinary()
	_ = yym1842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1843 := r.ContainerType()
		if yyct1843 == codecSelferValueTypeMap1234 {
			yyl1843 := r.ReadMapStart()
			if yyl1843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1843, d)
			}
		} else if yyct1843 == codecSelferValueTypeArray1234 {
			yyl1843 := r.ReadArrayStart()
			if yyl1843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1844Slc
	var yyhl1844 bool = l >= 0
	for yyj1844 := 0; ; yyj1844++ {
		if yyhl1844 {
			if yyj1844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1844Slc = r.DecodeBytes(yys1844Slc, true, true)
		yys1844 := string(yys1844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1844 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1847 := &x.Values
				yym1848 := z.DecBinary()
				_ = yym1848
				if false {
				} else {
					z.F.DecSliceStringX(yyv1847, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1844)
		} // end switch yys1844
	} // end for yyj1844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1849 int
	var yyb1849 bool
	var yyhl1849 bool = l >= 0
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1852 := &x.Values
		yym1853 := z.DecBinary()
		_ = yym1853
		if false {
		} else {
			z.F.DecSliceStringX(yyv1852, false, d)
		}
	}
	for {
		yyj1849++
		if yyhl1849 {
			yyb1849 = yyj1849 > l
		} else {
			yyb1849 = r.CheckBreak()
		}
		if yyb1849 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1849-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1854 := z.EncBinary()
	_ = yym1854
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1855 := z.DecBinary()
	_ = yym1855
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1856 := z.EncBinary()
		_ = yym1856
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1857 := !z.EncBinary()
			yy2arr1857 := z.EncBasicHandle().StructToArray
			var yyq1857 [3]bool
			_, _, _ = yysep1857, yyq1857, yy2arr1857
			const yyr1857 bool = false
			yyq1857[0] = x.NodeAffinity != nil
			yyq1857[1] = x.PodAffinity != nil
			yyq1857[2] = x.PodAntiAffinity != nil
			var yynn1857 int
			if yyr1857 || yy2arr1857 {
				r.EncodeArrayStart(3)
			} else {
				yynn1857 = 0
				for _, b := range yyq1857 {
					if b {
						yynn1857++
					}
				}
				r.EncodeMapStart(yynn1857)
				yynn1857 = 0
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1857[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1857[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1857[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1857[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1857[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1857[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1861 := z.DecBinary()
	_ = yym1861
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1862 := r.ContainerType()
		if yyct1862 == codecSelferValueTypeMap1234 {
			yyl1862 := r.ReadMapStart()
			if yyl1862 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1862, d)
			}
		} else if yyct1862 == codecSelferValueTypeArray1234 {
			yyl1862 := r.ReadArrayStart()
			if yyl1862 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1862, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1863Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1863Slc
	var yyhl1863 bool = l >= 0
	for yyj1863 := 0; ; yyj1863++ {
		if yyhl1863 {
			if yyj1863 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1863Slc = r.DecodeBytes(yys1863Slc, true, true)
		yys1863 := string(yys1863Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1863 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1863)
		} // end switch yys1863
	} // end for yyj1863
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1867 int
	var yyb1867 bool
	var yyhl1867 bool = l >= 0
	yyj1867++
	if yyhl1867 {
		yyb1867 = yyj1867 > l
	} else {
		yyb1867 = r.CheckBreak()
	}
	if yyb1867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1867++
	if yyhl1867 {
		yyb1867 = yyj1867 > l
	} else {
		yyb1867 = r.CheckBreak()
	}
	if yyb1867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1867++
	if yyhl1867 {
		yyb1867 = yyj1867 > l
	} else {
		yyb1867 = r.CheckBreak()
	}
	if yyb1867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1867++
		if yyhl1867 {
			yyb1867 = yyj1867 > l
		} else {
			yyb1867 = r.CheckBreak()
		}
		if yyb1867 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1867-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1871 := z.EncBinary()
		_ = yym1871
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1872 := !z.EncBinary()
			yy2arr1872 := z.EncBasicHandle().StructToArray
			var yyq1872 [2]bool
			_, _, _ = yysep1872, yyq1872, yy2arr1872
			const yyr1872 bool = false
			yyq1872[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1872[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1872 int
			if yyr1872 || yy2arr1872 {
				r.EncodeArrayStart(2)
			} else {
				yynn1872 = 0
				for _, b := range yyq1872 {
					if b {
						yynn1872++
					}
				}
				r.EncodeMapStart(yynn1872)
				yynn1872 = 0
			}
			if yyr1872 || yy2arr1872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1872[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1874 := z.EncBinary()
						_ = yym1874
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1872[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1875 := z.EncBinary()
						_ = yym1875
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1872 || yy2arr1872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1872[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1877 := z.EncBinary()
						_ = yym1877
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1872[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1878 := z.EncBinary()
						_ = yym1878
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1872 || yy2arr1872 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1879 := z.DecBinary()
	_ = yym1879
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1880 := r.ContainerType()
		if yyct1880 == codecSelferValueTypeMap1234 {
			yyl1880 := r.ReadMapStart()
			if yyl1880 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1880, d)
			}
		} else if yyct1880 == codecSelferValueTypeArray1234 {
			yyl1880 := r.ReadArrayStart()
			if yyl1880 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1880, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1881Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1881Slc
	var yyhl1881 bool = l >= 0
	for yyj1881 := 0; ; yyj1881++ {
		if yyhl1881 {
			if yyj1881 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1881Slc = r.DecodeBytes(yys1881Slc, true, true)
		yys1881 := string(yys1881Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1881 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1882 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1883 := z.DecBinary()
				_ = yym1883
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1882), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1884 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1885 := z.DecBinary()
				_ = yym1885
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1884), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1881)
		} // end switch yys1881
	} // end for yyj1881
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1886 int
	var yyb1886 bool
	var yyhl1886 bool = l >= 0
	yyj1886++
	if yyhl1886 {
		yyb1886 = yyj1886 > l
	} else {
		yyb1886 = r.CheckBreak()
	}
	if yyb1886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1887 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1888 := z.DecBinary()
		_ = yym1888
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1887), d)
		}
	}
	yyj1886++
	if yyhl1886 {
		yyb1886 = yyj1886 > l
	} else {
		yyb1886 = r.CheckBreak()
	}
	if yyb1886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1889 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1890 := z.DecBinary()
		_ = yym1890
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1889), d)
		}
	}
	for {
		yyj1886++
		if yyhl1886 {
			yyb1886 = yyj1886 > l
		} else {
			yyb1886 = r.CheckBreak()
		}
		if yyb1886 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1886-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1891 := z.EncBinary()
		_ = yym1891
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1892 := !z.EncBinary()
			yy2arr1892 := z.EncBasicHandle().StructToArray
			var yyq1892 [2]bool
			_, _, _ = yysep1892, yyq1892, yy2arr1892
			const yyr1892 bool = false
			yyq1892[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1892[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1892 int
			if yyr1892 || yy2arr1892 {
				r.EncodeArrayStart(2)
			} else {
				yynn1892 = 0
				for _, b := range yyq1892 {
					if b {
						yynn1892++
					}
				}
				r.EncodeMapStart(yynn1892)
				yynn1892 = 0
			}
			if yyr1892 || yy2arr1892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1892[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1894 := z.EncBinary()
						_ = yym1894
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1892[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1895 := z.EncBinary()
						_ = yym1895
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1892 || yy2arr1892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1892[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1897 := z.EncBinary()
						_ = yym1897
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1892[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1898 := z.EncBinary()
						_ = yym1898
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1892 || yy2arr1892 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1899 := z.DecBinary()
	_ = yym1899
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1900 := r.ContainerType()
		if yyct1900 == codecSelferValueTypeMap1234 {
			yyl1900 := r.ReadMapStart()
			if yyl1900 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1900, d)
			}
		} else if yyct1900 == codecSelferValueTypeArray1234 {
			yyl1900 := r.ReadArrayStart()
			if yyl1900 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1900, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1901Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1901Slc
	var yyhl1901 bool = l >= 0
	for yyj1901 := 0; ; yyj1901++ {
		if yyhl1901 {
			if yyj1901 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1901Slc = r.DecodeBytes(yys1901Slc, true, true)
		yys1901 := string(yys1901Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1901 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1902 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1903 := z.DecBinary()
				_ = yym1903
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1902), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1904 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1905 := z.DecBinary()
				_ = yym1905
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1904), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1901)
		} // end switch yys1901
	} // end for yyj1901
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1906 int
	var yyb1906 bool
	var yyhl1906 bool = l >= 0
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1907 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1908 := z.DecBinary()
		_ = yym1908
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1907), d)
		}
	}
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1909 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1910 := z.DecBinary()
		_ = yym1910
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1909), d)
		}
	}
	for {
		yyj1906++
		if yyhl1906 {
			yyb1906 = yyj1906 > l
		} else {
			yyb1906 = r.CheckBreak()
		}
		if yyb1906 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1906-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1911 := z.EncBinary()
		_ = yym1911
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1912 := !z.EncBinary()
			yy2arr1912 := z.EncBasicHandle().StructToArray
			var yyq1912 [2]bool
			_, _, _ = yysep1912, yyq1912, yy2arr1912
			const yyr1912 bool = false
			var yynn1912 int
			if yyr1912 || yy2arr1912 {
				r.EncodeArrayStart(2)
			} else {
				yynn1912 = 2
				for _, b := range yyq1912 {
					if b {
						yynn1912++
					}
				}
				r.EncodeMapStart(yynn1912)
				yynn1912 = 0
			}
			if yyr1912 || yy2arr1912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1914 := z.EncBinary()
				_ = yym1914
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1915 := z.EncBinary()
				_ = yym1915
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1912 || yy2arr1912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1917 := &x.PodAffinityTerm
				yy1917.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1918 := &x.PodAffinityTerm
				yy1918.CodecEncodeSelf(e)
			}
			if yyr1912 || yy2arr1912 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1919 := z.DecBinary()
	_ = yym1919
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1920 := r.ContainerType()
		if yyct1920 == codecSelferValueTypeMap1234 {
			yyl1920 := r.ReadMapStart()
			if yyl1920 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1920, d)
			}
		} else if yyct1920 == codecSelferValueTypeArray1234 {
			yyl1920 := r.ReadArrayStart()
			if yyl1920 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1920, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1921Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1921Slc
	var yyhl1921 bool = l >= 0
	for yyj1921 := 0; ; yyj1921++ {
		if yyhl1921 {
			if yyj1921 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1921Slc = r.DecodeBytes(yys1921Slc, true, true)
		yys1921 := string(yys1921Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1921 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1923 := &x.PodAffinityTerm
				yyv1923.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1921)
		} // end switch yys1921
	} // end for yyj1921
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1924 int
	var yyb1924 bool
	var yyhl1924 bool = l >= 0
	yyj1924++
	if yyhl1924 {
		yyb1924 = yyj1924 > l
	} else {
		yyb1924 = r.CheckBreak()
	}
	if yyb1924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1924++
	if yyhl1924 {
		yyb1924 = yyj1924 > l
	} else {
		yyb1924 = r.CheckBreak()
	}
	if yyb1924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1926 := &x.PodAffinityTerm
		yyv1926.CodecDecodeSelf(d)
	}
	for {
		yyj1924++
		if yyhl1924 {
			yyb1924 = yyj1924 > l
		} else {
			yyb1924 = r.CheckBreak()
		}
		if yyb1924 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1924-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1927 := z.EncBinary()
		_ = yym1927
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1928 := !z.EncBinary()
			yy2arr1928 := z.EncBasicHandle().StructToArray
			var yyq1928 [3]bool
			_, _, _ = yysep1928, yyq1928, yy2arr1928
			const yyr1928 bool = false
			yyq1928[0] = x.LabelSelector != nil
			yyq1928[2] = x.TopologyKey != ""
			var yynn1928 int
			if yyr1928 || yy2arr1928 {
				r.EncodeArrayStart(3)
			} else {
				yynn1928 = 1
				for _, b := range yyq1928 {
					if b {
						yynn1928++
					}
				}
				r.EncodeMapStart(yynn1928)
				yynn1928 = 0
			}
			if yyr1928 || yy2arr1928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1928[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1930 := z.EncBinary()
						_ = yym1930
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1928[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1931 := z.EncBinary()
						_ = yym1931
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1928 || yy2arr1928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1933 := z.EncBinary()
					_ = yym1933
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1934 := z.EncBinary()
					_ = yym1934
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1928 || yy2arr1928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1928[2] {
					yym1936 := z.EncBinary()
					_ = yym1936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1928[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1937 := z.EncBinary()
					_ = yym1937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1928 || yy2arr1928 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1938 := z.DecBinary()
	_ = yym1938
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1939 := r.ContainerType()
		if yyct1939 == codecSelferValueTypeMap1234 {
			yyl1939 := r.ReadMapStart()
			if yyl1939 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1939, d)
			}
		} else if yyct1939 == codecSelferValueTypeArray1234 {
			yyl1939 := r.ReadArrayStart()
			if yyl1939 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1939, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1940Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1940Slc
	var yyhl1940 bool = l >= 0
	for yyj1940 := 0; ; yyj1940++ {
		if yyhl1940 {
			if yyj1940 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1940Slc = r.DecodeBytes(yys1940Slc, true, true)
		yys1940 := string(yys1940Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1940 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1942 := z.DecBinary()
				_ = yym1942
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1943 := &x.Namespaces
				yym1944 := z.DecBinary()
				_ = yym1944
				if false {
				} else {
					z.F.DecSliceStringX(yyv1943, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1940)
		} // end switch yys1940
	} // end for yyj1940
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1946 int
	var yyb1946 bool
	var yyhl1946 bool = l >= 0
	yyj1946++
	if yyhl1946 {
		yyb1946 = yyj1946 > l
	} else {
		yyb1946 = r.CheckBreak()
	}
	if yyb1946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1948 := z.DecBinary()
		_ = yym1948
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1946++
	if yyhl1946 {
		yyb1946 = yyj1946 > l
	} else {
		yyb1946 = r.CheckBreak()
	}
	if yyb1946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1949 := &x.Namespaces
		yym1950 := z.DecBinary()
		_ = yym1950
		if false {
		} else {
			z.F.DecSliceStringX(yyv1949, false, d)
		}
	}
	yyj1946++
	if yyhl1946 {
		yyb1946 = yyj1946 > l
	} else {
		yyb1946 = r.CheckBreak()
	}
	if yyb1946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1946++
		if yyhl1946 {
			yyb1946 = yyj1946 > l
		} else {
			yyb1946 = r.CheckBreak()
		}
		if yyb1946 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1946-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1952 := z.EncBinary()
		_ = yym1952
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1953 := !z.EncBinary()
			yy2arr1953 := z.EncBasicHandle().StructToArray
			var yyq1953 [2]bool
			_, _, _ = yysep1953, yyq1953, yy2arr1953
			const yyr1953 bool = false
			yyq1953[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1953[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1953 int
			if yyr1953 || yy2arr1953 {
				r.EncodeArrayStart(2)
			} else {
				yynn1953 = 0
				for _, b := range yyq1953 {
					if b {
						yynn1953++
					}
				}
				r.EncodeMapStart(yynn1953)
				yynn1953 = 0
			}
			if yyr1953 || yy2arr1953 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1953[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1953[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1953 || yy2arr1953 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1953[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1956 := z.EncBinary()
						_ = yym1956
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1953[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1957 := z.EncBinary()
						_ = yym1957
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1953 || yy2arr1953 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1958 := z.DecBinary()
	_ = yym1958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1959 := r.ContainerType()
		if yyct1959 == codecSelferValueTypeMap1234 {
			yyl1959 := r.ReadMapStart()
			if yyl1959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1959, d)
			}
		} else if yyct1959 == codecSelferValueTypeArray1234 {
			yyl1959 := r.ReadArrayStart()
			if yyl1959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1960Slc
	var yyhl1960 bool = l >= 0
	for yyj1960 := 0; ; yyj1960++ {
		if yyhl1960 {
			if yyj1960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1960Slc = r.DecodeBytes(yys1960Slc, true, true)
		yys1960 := string(yys1960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1960 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1962 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1963 := z.DecBinary()
				_ = yym1963
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1962), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1960)
		} // end switch yys1960
	} // end for yyj1960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1964 int
	var yyb1964 bool
	var yyhl1964 bool = l >= 0
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1966 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1967 := z.DecBinary()
		_ = yym1967
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1966), d)
		}
	}
	for {
		yyj1964++
		if yyhl1964 {
			yyb1964 = yyj1964 > l
		} else {
			yyb1964 = r.CheckBreak()
		}
		if yyb1964 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1964-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1968 := z.EncBinary()
		_ = yym1968
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1969 := !z.EncBinary()
			yy2arr1969 := z.EncBasicHandle().StructToArray
			var yyq1969 [2]bool
			_, _, _ = yysep1969, yyq1969, yy2arr1969
			const yyr1969 bool = false
			var yynn1969 int
			if yyr1969 || yy2arr1969 {
				r.EncodeArrayStart(2)
			} else {
				yynn1969 = 2
				for _, b := range yyq1969 {
					if b {
						yynn1969++
					}
				}
				r.EncodeMapStart(yynn1969)
				yynn1969 = 0
			}
			if yyr1969 || yy2arr1969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1971 := z.EncBinary()
				_ = yym1971
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1972 := z.EncBinary()
				_ = yym1972
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1969 || yy2arr1969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1974 := &x.Preference
				yy1974.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1975 := &x.Preference
				yy1975.CodecEncodeSelf(e)
			}
			if yyr1969 || yy2arr1969 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1976 := z.DecBinary()
	_ = yym1976
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1977 := r.ContainerType()
		if yyct1977 == codecSelferValueTypeMap1234 {
			yyl1977 := r.ReadMapStart()
			if yyl1977 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1977, d)
			}
		} else if yyct1977 == codecSelferValueTypeArray1234 {
			yyl1977 := r.ReadArrayStart()
			if yyl1977 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1977, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1978Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1978Slc
	var yyhl1978 bool = l >= 0
	for yyj1978 := 0; ; yyj1978++ {
		if yyhl1978 {
			if yyj1978 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1978Slc = r.DecodeBytes(yys1978Slc, true, true)
		yys1978 := string(yys1978Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1978 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1980 := &x.Preference
				yyv1980.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1978)
		} // end switch yys1978
	} // end for yyj1978
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1981 int
	var yyb1981 bool
	var yyhl1981 bool = l >= 0
	yyj1981++
	if yyhl1981 {
		yyb1981 = yyj1981 > l
	} else {
		yyb1981 = r.CheckBreak()
	}
	if yyb1981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1981++
	if yyhl1981 {
		yyb1981 = yyj1981 > l
	} else {
		yyb1981 = r.CheckBreak()
	}
	if yyb1981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1983 := &x.Preference
		yyv1983.CodecDecodeSelf(d)
	}
	for {
		yyj1981++
		if yyhl1981 {
			yyb1981 = yyj1981 > l
		} else {
			yyb1981 = r.CheckBreak()
		}
		if yyb1981 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1981-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1984 := z.EncBinary()
		_ = yym1984
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1985 := !z.EncBinary()
			yy2arr1985 := z.EncBasicHandle().StructToArray
			var yyq1985 [3]bool
			_, _, _ = yysep1985, yyq1985, yy2arr1985
			const yyr1985 bool = false
			yyq1985[1] = x.Value != ""
			var yynn1985 int
			if yyr1985 || yy2arr1985 {
				r.EncodeArrayStart(3)
			} else {
				yynn1985 = 2
				for _, b := range yyq1985 {
					if b {
						yynn1985++
					}
				}
				r.EncodeMapStart(yynn1985)
				yynn1985 = 0
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1987 := z.EncBinary()
				_ = yym1987
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1988 := z.EncBinary()
				_ = yym1988
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[1] {
					yym1990 := z.EncBinary()
					_ = yym1990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1985[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1991 := z.EncBinary()
					_ = yym1991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1993 := z.DecBinary()
	_ = yym1993
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1994 := r.ContainerType()
		if yyct1994 == codecSelferValueTypeMap1234 {
			yyl1994 := r.ReadMapStart()
			if yyl1994 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1994, d)
			}
		} else if yyct1994 == codecSelferValueTypeArray1234 {
			yyl1994 := r.ReadArrayStart()
			if yyl1994 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1994, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1995Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1995Slc
	var yyhl1995 bool = l >= 0
	for yyj1995 := 0; ; yyj1995++ {
		if yyhl1995 {
			if yyj1995 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1995Slc = r.DecodeBytes(yys1995Slc, true, true)
		yys1995 := string(yys1995Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1995 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1995)
		} // end switch yys1995
	} // end for yyj1995
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1999 int
	var yyb1999 bool
	var yyhl1999 bool = l >= 0
	yyj1999++
	if yyhl1999 {
		yyb1999 = yyj1999 > l
	} else {
		yyb1999 = r.CheckBreak()
	}
	if yyb1999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1999++
	if yyhl1999 {
		yyb1999 = yyj1999 > l
	} else {
		yyb1999 = r.CheckBreak()
	}
	if yyb1999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1999++
	if yyhl1999 {
		yyb1999 = yyj1999 > l
	} else {
		yyb1999 = r.CheckBreak()
	}
	if yyb1999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1999++
		if yyhl1999 {
			yyb1999 = yyj1999 > l
		} else {
			yyb1999 = r.CheckBreak()
		}
		if yyb1999 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1999-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2003 := z.EncBinary()
	_ = yym2003
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2004 := z.DecBinary()
	_ = yym2004
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2005 := z.EncBinary()
		_ = yym2005
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2006 := !z.EncBinary()
			yy2arr2006 := z.EncBasicHandle().StructToArray
			var yyq2006 [4]bool
			_, _, _ = yysep2006, yyq2006, yy2arr2006
			const yyr2006 bool = false
			yyq2006[0] = x.Key != ""
			yyq2006[1] = x.Operator != ""
			yyq2006[2] = x.Value != ""
			yyq2006[3] = x.Effect != ""
			var yynn2006 int
			if yyr2006 || yy2arr2006 {
				r.EncodeArrayStart(4)
			} else {
				yynn2006 = 0
				for _, b := range yyq2006 {
					if b {
						yynn2006++
					}
				}
				r.EncodeMapStart(yynn2006)
				yynn2006 = 0
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2006[0] {
					yym2008 := z.EncBinary()
					_ = yym2008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2006[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2009 := z.EncBinary()
					_ = yym2009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2006[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2006[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2006[2] {
					yym2012 := z.EncBinary()
					_ = yym2012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2006[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2013 := z.EncBinary()
					_ = yym2013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2006[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2006[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2015 := z.DecBinary()
	_ = yym2015
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2016 := r.ContainerType()
		if yyct2016 == codecSelferValueTypeMap1234 {
			yyl2016 := r.ReadMapStart()
			if yyl2016 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2016, d)
			}
		} else if yyct2016 == codecSelferValueTypeArray1234 {
			yyl2016 := r.ReadArrayStart()
			if yyl2016 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2016, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2017Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2017Slc
	var yyhl2017 bool = l >= 0
	for yyj2017 := 0; ; yyj2017++ {
		if yyhl2017 {
			if yyj2017 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2017Slc = r.DecodeBytes(yys2017Slc, true, true)
		yys2017 := string(yys2017Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2017 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2017)
		} // end switch yys2017
	} // end for yyj2017
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2022 int
	var yyb2022 bool
	var yyhl2022 bool = l >= 0
	yyj2022++
	if yyhl2022 {
		yyb2022 = yyj2022 > l
	} else {
		yyb2022 = r.CheckBreak()
	}
	if yyb2022 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2022++
	if yyhl2022 {
		yyb2022 = yyj2022 > l
	} else {
		yyb2022 = r.CheckBreak()
	}
	if yyb2022 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2022++
	if yyhl2022 {
		yyb2022 = yyj2022 > l
	} else {
		yyb2022 = r.CheckBreak()
	}
	if yyb2022 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2022++
	if yyhl2022 {
		yyb2022 = yyj2022 > l
	} else {
		yyb2022 = r.CheckBreak()
	}
	if yyb2022 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2022++
		if yyhl2022 {
			yyb2022 = yyj2022 > l
		} else {
			yyb2022 = r.CheckBreak()
		}
		if yyb2022 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2022-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2027 := z.EncBinary()
	_ = yym2027
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2028 := z.DecBinary()
	_ = yym2028
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2029 := z.EncBinary()
		_ = yym2029
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2030 := !z.EncBinary()
			yy2arr2030 := z.EncBasicHandle().StructToArray
			var yyq2030 [17]bool
			_, _, _ = yysep2030, yyq2030, yy2arr2030
			const yyr2030 bool = false
			yyq2030[0] = len(x.Volumes) != 0
			yyq2030[2] = x.RestartPolicy != ""
			yyq2030[3] = x.TerminationGracePeriodSeconds != nil
			yyq2030[4] = x.ActiveDeadlineSeconds != nil
			yyq2030[5] = x.DNSPolicy != ""
			yyq2030[6] = len(x.NodeSelector) != 0
			yyq2030[7] = x.ServiceAccountName != ""
			yyq2030[8] = x.DeprecatedServiceAccount != ""
			yyq2030[9] = x.NodeName != ""
			yyq2030[10] = x.HostNetwork != false
			yyq2030[11] = x.HostPID != false
			yyq2030[12] = x.HostIPC != false
			yyq2030[13] = x.SecurityContext != nil
			yyq2030[14] = len(x.ImagePullSecrets) != 0
			yyq2030[15] = x.Hostname != ""
			yyq2030[16] = x.Subdomain != ""
			var yynn2030 int
			if yyr2030 || yy2arr2030 {
				r.EncodeArrayStart(17)
			} else {
				yynn2030 = 1
				for _, b := range yyq2030 {
					if b {
						yynn2030++
					}
				}
				r.EncodeMapStart(yynn2030)
				yynn2030 = 0
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2032 := z.EncBinary()
						_ = yym2032
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2030[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2033 := z.EncBinary()
						_ = yym2033
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2035 := z.EncBinary()
					_ = yym2035
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2036 := z.EncBinary()
					_ = yym2036
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2030[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2039 := *x.TerminationGracePeriodSeconds
						yym2040 := z.EncBinary()
						_ = yym2040
						if false {
						} else {
							r.EncodeInt(int64(yy2039))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2030[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2041 := *x.TerminationGracePeriodSeconds
						yym2042 := z.EncBinary()
						_ = yym2042
						if false {
						} else {
							r.EncodeInt(int64(yy2041))
						}
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2044 := *x.ActiveDeadlineSeconds
						yym2045 := z.EncBinary()
						_ = yym2045
						if false {
						} else {
							r.EncodeInt(int64(yy2044))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2030[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2046 := *x.ActiveDeadlineSeconds
						yym2047 := z.EncBinary()
						_ = yym2047
						if false {
						} else {
							r.EncodeInt(int64(yy2046))
						}
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2030[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2050 := z.EncBinary()
						_ = yym2050
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2030[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2051 := z.EncBinary()
						_ = yym2051
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[7] {
					yym2053 := z.EncBinary()
					_ = yym2053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2030[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2054 := z.EncBinary()
					_ = yym2054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[8] {
					yym2056 := z.EncBinary()
					_ = yym2056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2030[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2057 := z.EncBinary()
					_ = yym2057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[9] {
					yym2059 := z.EncBinary()
					_ = yym2059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2030[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2060 := z.EncBinary()
					_ = yym2060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[10] {
					yym2062 := z.EncBinary()
					_ = yym2062
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2030[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2063 := z.EncBinary()
					_ = yym2063
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[11] {
					yym2065 := z.EncBinary()
					_ = yym2065
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2030[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2066 := z.EncBinary()
					_ = yym2066
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[12] {
					yym2068 := z.EncBinary()
					_ = yym2068
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2030[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2069 := z.EncBinary()
					_ = yym2069
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2030[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2072 := z.EncBinary()
						_ = yym2072
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2030[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2073 := z.EncBinary()
						_ = yym2073
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[15] {
					yym2075 := z.EncBinary()
					_ = yym2075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2030[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2076 := z.EncBinary()
					_ = yym2076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2030[16] {
					yym2078 := z.EncBinary()
					_ = yym2078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2030[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2079 := z.EncBinary()
					_ = yym2079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2080 := z.DecBinary()
	_ = yym2080
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2081 := r.ContainerType()
		if yyct2081 == codecSelferValueTypeMap1234 {
			yyl2081 := r.ReadMapStart()
			if yyl2081 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2081, d)
			}
		} else if yyct2081 == codecSelferValueTypeArray1234 {
			yyl2081 := r.ReadArrayStart()
			if yyl2081 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2081, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2082Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2082Slc
	var yyhl2082 bool = l >= 0
	for yyj2082 := 0; ; yyj2082++ {
		if yyhl2082 {
			if yyj2082 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2082Slc = r.DecodeBytes(yys2082Slc, true, true)
		yys2082 := string(yys2082Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2082 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2083 := &x.Volumes
				yym2084 := z.DecBinary()
				_ = yym2084
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2083), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2085 := &x.Containers
				yym2086 := z.DecBinary()
				_ = yym2086
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2085), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2089 := z.DecBinary()
				_ = yym2089
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2091 := z.DecBinary()
				_ = yym2091
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2093 := &x.NodeSelector
				yym2094 := z.DecBinary()
				_ = yym2094
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2093, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2102 := &x.ImagePullSecrets
				yym2103 := z.DecBinary()
				_ = yym2103
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2102), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2082)
		} // end switch yys2082
	} // end for yyj2082
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2106 int
	var yyb2106 bool
	var yyhl2106 bool = l >= 0
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2107 := &x.Volumes
		yym2108 := z.DecBinary()
		_ = yym2108
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2107), d)
		}
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2109 := &x.Containers
		yym2110 := z.DecBinary()
		_ = yym2110
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2109), d)
		}
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2113 := z.DecBinary()
		_ = yym2113
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2115 := z.DecBinary()
		_ = yym2115
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2117 := &x.NodeSelector
		yym2118 := z.DecBinary()
		_ = yym2118
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2117, false, d)
		}
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2126 := &x.ImagePullSecrets
		yym2127 := z.DecBinary()
		_ = yym2127
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2126), d)
		}
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2106++
		if yyhl2106 {
			yyb2106 = yyj2106 > l
		} else {
			yyb2106 = r.CheckBreak()
		}
		if yyb2106 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2106-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2130 := z.EncBinary()
		_ = yym2130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2131 := !z.EncBinary()
			yy2arr2131 := z.EncBasicHandle().StructToArray
			var yyq2131 [5]bool
			_, _, _ = yysep2131, yyq2131, yy2arr2131
			const yyr2131 bool = false
			yyq2131[0] = x.SELinuxOptions != nil
			yyq2131[1] = x.RunAsUser != nil
			yyq2131[2] = x.RunAsNonRoot != nil
			yyq2131[3] = len(x.SupplementalGroups) != 0
			yyq2131[4] = x.FSGroup != nil
			var yynn2131 int
			if yyr2131 || yy2arr2131 {
				r.EncodeArrayStart(5)
			} else {
				yynn2131 = 0
				for _, b := range yyq2131 {
					if b {
						yynn2131++
					}
				}
				r.EncodeMapStart(yynn2131)
				yynn2131 = 0
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2131[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2134 := *x.RunAsUser
						yym2135 := z.EncBinary()
						_ = yym2135
						if false {
						} else {
							r.EncodeInt(int64(yy2134))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2131[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2136 := *x.RunAsUser
						yym2137 := z.EncBinary()
						_ = yym2137
						if false {
						} else {
							r.EncodeInt(int64(yy2136))
						}
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2139 := *x.RunAsNonRoot
						yym2140 := z.EncBinary()
						_ = yym2140
						if false {
						} else {
							r.EncodeBool(bool(yy2139))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2131[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2141 := *x.RunAsNonRoot
						yym2142 := z.EncBinary()
						_ = yym2142
						if false {
						} else {
							r.EncodeBool(bool(yy2141))
						}
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2144 := z.EncBinary()
						_ = yym2144
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2131[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2145 := z.EncBinary()
						_ = yym2145
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2131[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2147 := *x.FSGroup
						yym2148 := z.EncBinary()
						_ = yym2148
						if false {
						} else {
							r.EncodeInt(int64(yy2147))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2131[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2149 := *x.FSGroup
						yym2150 := z.EncBinary()
						_ = yym2150
						if false {
						} else {
							r.EncodeInt(int64(yy2149))
						}
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2151 := z.DecBinary()
	_ = yym2151
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2152 := r.ContainerType()
		if yyct2152 == codecSelferValueTypeMap1234 {
			yyl2152 := r.ReadMapStart()
			if yyl2152 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2152, d)
			}
		} else if yyct2152 == codecSelferValueTypeArray1234 {
			yyl2152 := r.ReadArrayStart()
			if yyl2152 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2152, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2153Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2153Slc
	var yyhl2153 bool = l >= 0
	for yyj2153 := 0; ; yyj2153++ {
		if yyhl2153 {
			if yyj2153 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2153Slc = r.DecodeBytes(yys2153Slc, true, true)
		yys2153 := string(yys2153Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2153 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2156 := z.DecBinary()
				_ = yym2156
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2158 := z.DecBinary()
				_ = yym2158
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2159 := &x.SupplementalGroups
				yym2160 := z.DecBinary()
				_ = yym2160
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2159, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2162 := z.DecBinary()
				_ = yym2162
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2153)
		} // end switch yys2153
	} // end for yyj2153
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2163 int
	var yyb2163 bool
	var yyhl2163 bool = l >= 0
	yyj2163++
	if yyhl2163 {
		yyb2163 = yyj2163 > l
	} else {
		yyb2163 = r.CheckBreak()
	}
	if yyb2163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2163++
	if yyhl2163 {
		yyb2163 = yyj2163 > l
	} else {
		yyb2163 = r.CheckBreak()
	}
	if yyb2163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2166 := z.DecBinary()
		_ = yym2166
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2163++
	if yyhl2163 {
		yyb2163 = yyj2163 > l
	} else {
		yyb2163 = r.CheckBreak()
	}
	if yyb2163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2168 := z.DecBinary()
		_ = yym2168
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2163++
	if yyhl2163 {
		yyb2163 = yyj2163 > l
	} else {
		yyb2163 = r.CheckBreak()
	}
	if yyb2163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2169 := &x.SupplementalGroups
		yym2170 := z.DecBinary()
		_ = yym2170
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2169, false, d)
		}
	}
	yyj2163++
	if yyhl2163 {
		yyb2163 = yyj2163 > l
	} else {
		yyb2163 = r.CheckBreak()
	}
	if yyb2163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2172 := z.DecBinary()
		_ = yym2172
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2163++
		if yyhl2163 {
			yyb2163 = yyj2163 > l
		} else {
			yyb2163 = r.CheckBreak()
		}
		if yyb2163 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2163-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2173 := z.EncBinary()
		_ = yym2173
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2174 := !z.EncBinary()
			yy2arr2174 := z.EncBasicHandle().StructToArray
			var yyq2174 [8]bool
			_, _, _ = yysep2174, yyq2174, yy2arr2174
			const yyr2174 bool = false
			yyq2174[0] = x.Phase != ""
			yyq2174[1] = len(x.Conditions) != 0
			yyq2174[2] = x.Message != ""
			yyq2174[3] = x.Reason != ""
			yyq2174[4] = x.HostIP != ""
			yyq2174[5] = x.PodIP != ""
			yyq2174[6] = x.StartTime != nil
			yyq2174[7] = len(x.ContainerStatuses) != 0
			var yynn2174 int
			if yyr2174 || yy2arr2174 {
				r.EncodeArrayStart(8)
			} else {
				yynn2174 = 0
				for _, b := range yyq2174 {
					if b {
						yynn2174++
					}
				}
				r.EncodeMapStart(yynn2174)
				yynn2174 = 0
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2174[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2177 := z.EncBinary()
						_ = yym2177
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2174[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2178 := z.EncBinary()
						_ = yym2178
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[2] {
					yym2180 := z.EncBinary()
					_ = yym2180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2174[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2181 := z.EncBinary()
					_ = yym2181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[3] {
					yym2183 := z.EncBinary()
					_ = yym2183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2174[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[4] {
					yym2186 := z.EncBinary()
					_ = yym2186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2174[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[5] {
					yym2189 := z.EncBinary()
					_ = yym2189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2174[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2190 := z.EncBinary()
					_ = yym2190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2192 := z.EncBinary()
						_ = yym2192
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2192 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2192 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2174[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2193 := z.EncBinary()
						_ = yym2193
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2193 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2193 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2195 := z.EncBinary()
						_ = yym2195
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2174[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2196 := z.EncBinary()
						_ = yym2196
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2197 := z.DecBinary()
	_ = yym2197
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2198 := r.ContainerType()
		if yyct2198 == codecSelferValueTypeMap1234 {
			yyl2198 := r.ReadMapStart()
			if yyl2198 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2198, d)
			}
		} else if yyct2198 == codecSelferValueTypeArray1234 {
			yyl2198 := r.ReadArrayStart()
			if yyl2198 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2198, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2199Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2199Slc
	var yyhl2199 bool = l >= 0
	for yyj2199 := 0; ; yyj2199++ {
		if yyhl2199 {
			if yyj2199 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2199Slc = r.DecodeBytes(yys2199Slc, true, true)
		yys2199 := string(yys2199Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2199 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2201 := &x.Conditions
				yym2202 := z.DecBinary()
				_ = yym2202
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2201), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2208 := z.DecBinary()
				_ = yym2208
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2208 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2208 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2209 := &x.ContainerStatuses
				yym2210 := z.DecBinary()
				_ = yym2210
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2209), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2199)
		} // end switch yys2199
	} // end for yyj2199
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2211 int
	var yyb2211 bool
	var yyhl2211 bool = l >= 0
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2213 := &x.Conditions
		yym2214 := z.DecBinary()
		_ = yym2214
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2213), d)
		}
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2220 := z.DecBinary()
		_ = yym2220
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2220 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2220 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2221 := &x.ContainerStatuses
		yym2222 := z.DecBinary()
		_ = yym2222
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2221), d)
		}
	}
	for {
		yyj2211++
		if yyhl2211 {
			yyb2211 = yyj2211 > l
		} else {
			yyb2211 = r.CheckBreak()
		}
		if yyb2211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2223 := z.EncBinary()
		_ = yym2223
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2224 := !z.EncBinary()
			yy2arr2224 := z.EncBasicHandle().StructToArray
			var yyq2224 [4]bool
			_, _, _ = yysep2224, yyq2224, yy2arr2224
			const yyr2224 bool = false
			yyq2224[0] = x.Kind != ""
			yyq2224[1] = x.APIVersion != ""
			yyq2224[2] = true
			yyq2224[3] = true
			var yynn2224 int
			if yyr2224 || yy2arr2224 {
				r.EncodeArrayStart(4)
			} else {
				yynn2224 = 0
				for _, b := range yyq2224 {
					if b {
						yynn2224++
					}
				}
				r.EncodeMapStart(yynn2224)
				yynn2224 = 0
			}
			if yyr2224 || yy2arr2224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2224[0] {
					yym2226 := z.EncBinary()
					_ = yym2226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2224[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2227 := z.EncBinary()
					_ = yym2227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2224 || yy2arr2224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2224[1] {
					yym2229 := z.EncBinary()
					_ = yym2229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2224[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2230 := z.EncBinary()
					_ = yym2230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2224 || yy2arr2224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2224[2] {
					yy2232 := &x.ObjectMeta
					yy2232.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2224[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2233 := &x.ObjectMeta
					yy2233.CodecEncodeSelf(e)
				}
			}
			if yyr2224 || yy2arr2224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2224[3] {
					yy2235 := &x.Status
					yy2235.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2224[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2236 := &x.Status
					yy2236.CodecEncodeSelf(e)
				}
			}
			if yyr2224 || yy2arr2224 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2237 := z.DecBinary()
	_ = yym2237
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2238 := r.ContainerType()
		if yyct2238 == codecSelferValueTypeMap1234 {
			yyl2238 := r.ReadMapStart()
			if yyl2238 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2238, d)
			}
		} else if yyct2238 == codecSelferValueTypeArray1234 {
			yyl2238 := r.ReadArrayStart()
			if yyl2238 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2238, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2239Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2239Slc
	var yyhl2239 bool = l >= 0
	for yyj2239 := 0; ; yyj2239++ {
		if yyhl2239 {
			if yyj2239 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2239Slc = r.DecodeBytes(yys2239Slc, true, true)
		yys2239 := string(yys2239Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2239 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2242 := &x.ObjectMeta
				yyv2242.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2243 := &x.Status
				yyv2243.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2239)
		} // end switch yys2239
	} // end for yyj2239
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2244 int
	var yyb2244 bool
	var yyhl2244 bool = l >= 0
	yyj2244++
	if yyhl2244 {
		yyb2244 = yyj2244 > l
	} else {
		yyb2244 = r.CheckBreak()
	}
	if yyb2244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2244++
	if yyhl2244 {
		yyb2244 = yyj2244 > l
	} else {
		yyb2244 = r.CheckBreak()
	}
	if yyb2244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2244++
	if yyhl2244 {
		yyb2244 = yyj2244 > l
	} else {
		yyb2244 = r.CheckBreak()
	}
	if yyb2244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2247 := &x.ObjectMeta
		yyv2247.CodecDecodeSelf(d)
	}
	yyj2244++
	if yyhl2244 {
		yyb2244 = yyj2244 > l
	} else {
		yyb2244 = r.CheckBreak()
	}
	if yyb2244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2248 := &x.Status
		yyv2248.CodecDecodeSelf(d)
	}
	for {
		yyj2244++
		if yyhl2244 {
			yyb2244 = yyj2244 > l
		} else {
			yyb2244 = r.CheckBreak()
		}
		if yyb2244 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2244-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2249 := z.EncBinary()
		_ = yym2249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2250 := !z.EncBinary()
			yy2arr2250 := z.EncBasicHandle().StructToArray
			var yyq2250 [5]bool
			_, _, _ = yysep2250, yyq2250, yy2arr2250
			const yyr2250 bool = false
			yyq2250[0] = x.Kind != ""
			yyq2250[1] = x.APIVersion != ""
			yyq2250[2] = true
			yyq2250[3] = true
			yyq2250[4] = true
			var yynn2250 int
			if yyr2250 || yy2arr2250 {
				r.EncodeArrayStart(5)
			} else {
				yynn2250 = 0
				for _, b := range yyq2250 {
					if b {
						yynn2250++
					}
				}
				r.EncodeMapStart(yynn2250)
				yynn2250 = 0
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2250[0] {
					yym2252 := z.EncBinary()
					_ = yym2252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2253 := z.EncBinary()
					_ = yym2253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2250[1] {
					yym2255 := z.EncBinary()
					_ = yym2255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2256 := z.EncBinary()
					_ = yym2256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2250[2] {
					yy2258 := &x.ObjectMeta
					yy2258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2250[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2259 := &x.ObjectMeta
					yy2259.CodecEncodeSelf(e)
				}
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2250[3] {
					yy2261 := &x.Spec
					yy2261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2250[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2262 := &x.Spec
					yy2262.CodecEncodeSelf(e)
				}
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2250[4] {
					yy2264 := &x.Status
					yy2264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2250[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2265 := &x.Status
					yy2265.CodecEncodeSelf(e)
				}
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2266 := z.DecBinary()
	_ = yym2266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2267 := r.ContainerType()
		if yyct2267 == codecSelferValueTypeMap1234 {
			yyl2267 := r.ReadMapStart()
			if yyl2267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2267, d)
			}
		} else if yyct2267 == codecSelferValueTypeArray1234 {
			yyl2267 := r.ReadArrayStart()
			if yyl2267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2268Slc
	var yyhl2268 bool = l >= 0
	for yyj2268 := 0; ; yyj2268++ {
		if yyhl2268 {
			if yyj2268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2268Slc = r.DecodeBytes(yys2268Slc, true, true)
		yys2268 := string(yys2268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2271 := &x.ObjectMeta
				yyv2271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2272 := &x.Spec
				yyv2272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2273 := &x.Status
				yyv2273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2268)
		} // end switch yys2268
	} // end for yyj2268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2274 int
	var yyb2274 bool
	var yyhl2274 bool = l >= 0
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2277 := &x.ObjectMeta
		yyv2277.CodecDecodeSelf(d)
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2278 := &x.Spec
		yyv2278.CodecDecodeSelf(d)
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2279 := &x.Status
		yyv2279.CodecDecodeSelf(d)
	}
	for {
		yyj2274++
		if yyhl2274 {
			yyb2274 = yyj2274 > l
		} else {
			yyb2274 = r.CheckBreak()
		}
		if yyb2274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2280 := z.EncBinary()
		_ = yym2280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2281 := !z.EncBinary()
			yy2arr2281 := z.EncBasicHandle().StructToArray
			var yyq2281 [4]bool
			_, _, _ = yysep2281, yyq2281, yy2arr2281
			const yyr2281 bool = false
			yyq2281[0] = x.Kind != ""
			yyq2281[1] = x.APIVersion != ""
			yyq2281[2] = true
			var yynn2281 int
			if yyr2281 || yy2arr2281 {
				r.EncodeArrayStart(4)
			} else {
				yynn2281 = 1
				for _, b := range yyq2281 {
					if b {
						yynn2281++
					}
				}
				r.EncodeMapStart(yynn2281)
				yynn2281 = 0
			}
			if yyr2281 || yy2arr2281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2281[0] {
					yym2283 := z.EncBinary()
					_ = yym2283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2281[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2284 := z.EncBinary()
					_ = yym2284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2281 || yy2arr2281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2281[1] {
					yym2286 := z.EncBinary()
					_ = yym2286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2281[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2287 := z.EncBinary()
					_ = yym2287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2281 || yy2arr2281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2281[2] {
					yy2289 := &x.ListMeta
					yym2290 := z.EncBinary()
					_ = yym2290
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2289) {
					} else {
						z.EncFallback(yy2289)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2281[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2291 := &x.ListMeta
					yym2292 := z.EncBinary()
					_ = yym2292
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2291) {
					} else {
						z.EncFallback(yy2291)
					}
				}
			}
			if yyr2281 || yy2arr2281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2294 := z.EncBinary()
					_ = yym2294
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2295 := z.EncBinary()
					_ = yym2295
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2281 || yy2arr2281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2296 := z.DecBinary()
	_ = yym2296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2297 := r.ContainerType()
		if yyct2297 == codecSelferValueTypeMap1234 {
			yyl2297 := r.ReadMapStart()
			if yyl2297 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2297, d)
			}
		} else if yyct2297 == codecSelferValueTypeArray1234 {
			yyl2297 := r.ReadArrayStart()
			if yyl2297 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2297, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2298Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2298Slc
	var yyhl2298 bool = l >= 0
	for yyj2298 := 0; ; yyj2298++ {
		if yyhl2298 {
			if yyj2298 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2298Slc = r.DecodeBytes(yys2298Slc, true, true)
		yys2298 := string(yys2298Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2298 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2301 := &x.ListMeta
				yym2302 := z.DecBinary()
				_ = yym2302
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2301) {
				} else {
					z.DecFallback(yyv2301, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2303 := &x.Items
				yym2304 := z.DecBinary()
				_ = yym2304
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2303), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2298)
		} // end switch yys2298
	} // end for yyj2298
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2305 int
	var yyb2305 bool
	var yyhl2305 bool = l >= 0
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2308 := &x.ListMeta
		yym2309 := z.DecBinary()
		_ = yym2309
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2308) {
		} else {
			z.DecFallback(yyv2308, false)
		}
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2310 := &x.Items
		yym2311 := z.DecBinary()
		_ = yym2311
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2310), d)
		}
	}
	for {
		yyj2305++
		if yyhl2305 {
			yyb2305 = yyj2305 > l
		} else {
			yyb2305 = r.CheckBreak()
		}
		if yyb2305 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2305-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2312 := z.EncBinary()
		_ = yym2312
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2313 := !z.EncBinary()
			yy2arr2313 := z.EncBasicHandle().StructToArray
			var yyq2313 [2]bool
			_, _, _ = yysep2313, yyq2313, yy2arr2313
			const yyr2313 bool = false
			yyq2313[0] = true
			yyq2313[1] = true
			var yynn2313 int
			if yyr2313 || yy2arr2313 {
				r.EncodeArrayStart(2)
			} else {
				yynn2313 = 0
				for _, b := range yyq2313 {
					if b {
						yynn2313++
					}
				}
				r.EncodeMapStart(yynn2313)
				yynn2313 = 0
			}
			if yyr2313 || yy2arr2313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2313[0] {
					yy2315 := &x.ObjectMeta
					yy2315.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2313[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2316 := &x.ObjectMeta
					yy2316.CodecEncodeSelf(e)
				}
			}
			if yyr2313 || yy2arr2313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2313[1] {
					yy2318 := &x.Spec
					yy2318.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2313[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2319 := &x.Spec
					yy2319.CodecEncodeSelf(e)
				}
			}
			if yyr2313 || yy2arr2313 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2320 := z.DecBinary()
	_ = yym2320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2321 := r.ContainerType()
		if yyct2321 == codecSelferValueTypeMap1234 {
			yyl2321 := r.ReadMapStart()
			if yyl2321 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2321, d)
			}
		} else if yyct2321 == codecSelferValueTypeArray1234 {
			yyl2321 := r.ReadArrayStart()
			if yyl2321 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2321, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2322Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2322Slc
	var yyhl2322 bool = l >= 0
	for yyj2322 := 0; ; yyj2322++ {
		if yyhl2322 {
			if yyj2322 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2322Slc = r.DecodeBytes(yys2322Slc, true, true)
		yys2322 := string(yys2322Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2322 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2323 := &x.ObjectMeta
				yyv2323.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2324 := &x.Spec
				yyv2324.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2322)
		} // end switch yys2322
	} // end for yyj2322
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2325 int
	var yyb2325 bool
	var yyhl2325 bool = l >= 0
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2326 := &x.ObjectMeta
		yyv2326.CodecDecodeSelf(d)
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2327 := &x.Spec
		yyv2327.CodecDecodeSelf(d)
	}
	for {
		yyj2325++
		if yyhl2325 {
			yyb2325 = yyj2325 > l
		} else {
			yyb2325 = r.CheckBreak()
		}
		if yyb2325 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2325-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2328 := z.EncBinary()
		_ = yym2328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2329 := !z.EncBinary()
			yy2arr2329 := z.EncBasicHandle().StructToArray
			var yyq2329 [4]bool
			_, _, _ = yysep2329, yyq2329, yy2arr2329
			const yyr2329 bool = false
			yyq2329[0] = x.Kind != ""
			yyq2329[1] = x.APIVersion != ""
			yyq2329[2] = true
			yyq2329[3] = true
			var yynn2329 int
			if yyr2329 || yy2arr2329 {
				r.EncodeArrayStart(4)
			} else {
				yynn2329 = 0
				for _, b := range yyq2329 {
					if b {
						yynn2329++
					}
				}
				r.EncodeMapStart(yynn2329)
				yynn2329 = 0
			}
			if yyr2329 || yy2arr2329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2329[0] {
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2329[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2332 := z.EncBinary()
					_ = yym2332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2329 || yy2arr2329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2329[1] {
					yym2334 := z.EncBinary()
					_ = yym2334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2329[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2335 := z.EncBinary()
					_ = yym2335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2329 || yy2arr2329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2329[2] {
					yy2337 := &x.ObjectMeta
					yy2337.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2329[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2338 := &x.ObjectMeta
					yy2338.CodecEncodeSelf(e)
				}
			}
			if yyr2329 || yy2arr2329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2329[3] {
					yy2340 := &x.Template
					yy2340.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2329[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2341 := &x.Template
					yy2341.CodecEncodeSelf(e)
				}
			}
			if yyr2329 || yy2arr2329 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2342 := z.DecBinary()
	_ = yym2342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2343 := r.ContainerType()
		if yyct2343 == codecSelferValueTypeMap1234 {
			yyl2343 := r.ReadMapStart()
			if yyl2343 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2343, d)
			}
		} else if yyct2343 == codecSelferValueTypeArray1234 {
			yyl2343 := r.ReadArrayStart()
			if yyl2343 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2343, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2344Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2344Slc
	var yyhl2344 bool = l >= 0
	for yyj2344 := 0; ; yyj2344++ {
		if yyhl2344 {
			if yyj2344 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2344Slc = r.DecodeBytes(yys2344Slc, true, true)
		yys2344 := string(yys2344Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2344 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2347 := &x.ObjectMeta
				yyv2347.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2348 := &x.Template
				yyv2348.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2344)
		} // end switch yys2344
	} // end for yyj2344
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2349 int
	var yyb2349 bool
	var yyhl2349 bool = l >= 0
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2352 := &x.ObjectMeta
		yyv2352.CodecDecodeSelf(d)
	}
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2353 := &x.Template
		yyv2353.CodecDecodeSelf(d)
	}
	for {
		yyj2349++
		if yyhl2349 {
			yyb2349 = yyj2349 > l
		} else {
			yyb2349 = r.CheckBreak()
		}
		if yyb2349 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2349-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2354 := z.EncBinary()
		_ = yym2354
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2355 := !z.EncBinary()
			yy2arr2355 := z.EncBasicHandle().StructToArray
			var yyq2355 [4]bool
			_, _, _ = yysep2355, yyq2355, yy2arr2355
			const yyr2355 bool = false
			yyq2355[0] = x.Kind != ""
			yyq2355[1] = x.APIVersion != ""
			yyq2355[2] = true
			var yynn2355 int
			if yyr2355 || yy2arr2355 {
				r.EncodeArrayStart(4)
			} else {
				yynn2355 = 1
				for _, b := range yyq2355 {
					if b {
						yynn2355++
					}
				}
				r.EncodeMapStart(yynn2355)
				yynn2355 = 0
			}
			if yyr2355 || yy2arr2355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2355[0] {
					yym2357 := z.EncBinary()
					_ = yym2357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2355[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2355 || yy2arr2355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2355[1] {
					yym2360 := z.EncBinary()
					_ = yym2360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2355[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2355 || yy2arr2355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2355[2] {
					yy2363 := &x.ListMeta
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2363) {
					} else {
						z.EncFallback(yy2363)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2355[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2365 := &x.ListMeta
					yym2366 := z.EncBinary()
					_ = yym2366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2365) {
					} else {
						z.EncFallback(yy2365)
					}
				}
			}
			if yyr2355 || yy2arr2355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2368 := z.EncBinary()
					_ = yym2368
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2369 := z.EncBinary()
					_ = yym2369
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2355 || yy2arr2355 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2370 := z.DecBinary()
	_ = yym2370
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2371 := r.ContainerType()
		if yyct2371 == codecSelferValueTypeMap1234 {
			yyl2371 := r.ReadMapStart()
			if yyl2371 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2371, d)
			}
		} else if yyct2371 == codecSelferValueTypeArray1234 {
			yyl2371 := r.ReadArrayStart()
			if yyl2371 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2371, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2372Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2372Slc
	var yyhl2372 bool = l >= 0
	for yyj2372 := 0; ; yyj2372++ {
		if yyhl2372 {
			if yyj2372 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2372Slc = r.DecodeBytes(yys2372Slc, true, true)
		yys2372 := string(yys2372Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2372 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2375 := &x.ListMeta
				yym2376 := z.DecBinary()
				_ = yym2376
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2375) {
				} else {
					z.DecFallback(yyv2375, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2377 := &x.Items
				yym2378 := z.DecBinary()
				_ = yym2378
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2377), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2372)
		} // end switch yys2372
	} // end for yyj2372
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2379 int
	var yyb2379 bool
	var yyhl2379 bool = l >= 0
	yyj2379++
	if yyhl2379 {
		yyb2379 = yyj2379 > l
	} else {
		yyb2379 = r.CheckBreak()
	}
	if yyb2379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2379++
	if yyhl2379 {
		yyb2379 = yyj2379 > l
	} else {
		yyb2379 = r.CheckBreak()
	}
	if yyb2379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2379++
	if yyhl2379 {
		yyb2379 = yyj2379 > l
	} else {
		yyb2379 = r.CheckBreak()
	}
	if yyb2379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2382 := &x.ListMeta
		yym2383 := z.DecBinary()
		_ = yym2383
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2382) {
		} else {
			z.DecFallback(yyv2382, false)
		}
	}
	yyj2379++
	if yyhl2379 {
		yyb2379 = yyj2379 > l
	} else {
		yyb2379 = r.CheckBreak()
	}
	if yyb2379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2384 := &x.Items
		yym2385 := z.DecBinary()
		_ = yym2385
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2384), d)
		}
	}
	for {
		yyj2379++
		if yyhl2379 {
			yyb2379 = yyj2379 > l
		} else {
			yyb2379 = r.CheckBreak()
		}
		if yyb2379 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2379-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2386 := z.EncBinary()
		_ = yym2386
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2387 := !z.EncBinary()
			yy2arr2387 := z.EncBasicHandle().StructToArray
			var yyq2387 [4]bool
			_, _, _ = yysep2387, yyq2387, yy2arr2387
			const yyr2387 bool = false
			yyq2387[0] = x.Replicas != nil
			yyq2387[1] = x.MinReadySeconds != 0
			yyq2387[2] = len(x.Selector) != 0
			yyq2387[3] = x.Template != nil
			var yynn2387 int
			if yyr2387 || yy2arr2387 {
				r.EncodeArrayStart(4)
			} else {
				yynn2387 = 0
				for _, b := range yyq2387 {
					if b {
						yynn2387++
					}
				}
				r.EncodeMapStart(yynn2387)
				yynn2387 = 0
			}
			if yyr2387 || yy2arr2387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2387[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2389 := *x.Replicas
						yym2390 := z.EncBinary()
						_ = yym2390
						if false {
						} else {
							r.EncodeInt(int64(yy2389))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2387[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2391 := *x.Replicas
						yym2392 := z.EncBinary()
						_ = yym2392
						if false {
						} else {
							r.EncodeInt(int64(yy2391))
						}
					}
				}
			}
			if yyr2387 || yy2arr2387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2387[1] {
					yym2394 := z.EncBinary()
					_ = yym2394
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2387[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2395 := z.EncBinary()
					_ = yym2395
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr2387 || yy2arr2387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2387[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2397 := z.EncBinary()
						_ = yym2397
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2387[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2398 := z.EncBinary()
						_ = yym2398
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2387 || yy2arr2387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2387[3] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2387[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2387 || yy2arr2387 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2400 := z.DecBinary()
	_ = yym2400
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2401 := r.ContainerType()
		if yyct2401 == codecSelferValueTypeMap1234 {
			yyl2401 := r.ReadMapStart()
			if yyl2401 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2401, d)
			}
		} else if yyct2401 == codecSelferValueTypeArray1234 {
			yyl2401 := r.ReadArrayStart()
			if yyl2401 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2401, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2402Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2402Slc
	var yyhl2402 bool = l >= 0
	for yyj2402 := 0; ; yyj2402++ {
		if yyhl2402 {
			if yyj2402 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2402Slc = r.DecodeBytes(yys2402Slc, true, true)
		yys2402 := string(yys2402Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2402 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2404 := z.DecBinary()
				_ = yym2404
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2406 := &x.Selector
				yym2407 := z.DecBinary()
				_ = yym2407
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2406, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2402)
		} // end switch yys2402
	} // end for yyj2402
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2409 int
	var yyb2409 bool
	var yyhl2409 bool = l >= 0
	yyj2409++
	if yyhl2409 {
		yyb2409 = yyj2409 > l
	} else {
		yyb2409 = r.CheckBreak()
	}
	if yyb2409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2411 := z.DecBinary()
		_ = yym2411
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2409++
	if yyhl2409 {
		yyb2409 = yyj2409 > l
	} else {
		yyb2409 = r.CheckBreak()
	}
	if yyb2409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj2409++
	if yyhl2409 {
		yyb2409 = yyj2409 > l
	} else {
		yyb2409 = r.CheckBreak()
	}
	if yyb2409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2413 := &x.Selector
		yym2414 := z.DecBinary()
		_ = yym2414
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2413, false, d)
		}
	}
	yyj2409++
	if yyhl2409 {
		yyb2409 = yyj2409 > l
	} else {
		yyb2409 = r.CheckBreak()
	}
	if yyb2409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2409++
		if yyhl2409 {
			yyb2409 = yyj2409 > l
		} else {
			yyb2409 = r.CheckBreak()
		}
		if yyb2409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2416 := z.EncBinary()
		_ = yym2416
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2417 := !z.EncBinary()
			yy2arr2417 := z.EncBasicHandle().StructToArray
			var yyq2417 [6]bool
			_, _, _ = yysep2417, yyq2417, yy2arr2417
			const yyr2417 bool = false
			yyq2417[1] = x.FullyLabeledReplicas != 0
			yyq2417[2] = x.ReadyReplicas != 0
			yyq2417[3] = x.AvailableReplicas != 0
			yyq2417[4] = x.ObservedGeneration != 0
			yyq2417[5] = len(x.Conditions) != 0
			var yynn2417 int
			if yyr2417 || yy2arr2417 {
				r.EncodeArrayStart(6)
			} else {
				yynn2417 = 1
				for _, b := range yyq2417 {
					if b {
						yynn2417++
					}
				}
				r.EncodeMapStart(yynn2417)
				yynn2417 = 0
			}
			if yyr2417 || yy2arr2417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2419 := z.EncBinary()
				_ = yym2419
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2420 := z.EncBinary()
				_ = yym2420
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2417 || yy2arr2417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2417[1] {
					yym2422 := z.EncBinary()
					_ = yym2422
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2417[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2423 := z.EncBinary()
					_ = yym2423
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2417 || yy2arr2417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2417[2] {
					yym2425 := z.EncBinary()
					_ = yym2425
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2417[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2426 := z.EncBinary()
					_ = yym2426
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2417 || yy2arr2417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2417[3] {
					yym2428 := z.EncBinary()
					_ = yym2428
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2417[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2429 := z.EncBinary()
					_ = yym2429
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr2417 || yy2arr2417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2417[4] {
					yym2431 := z.EncBinary()
					_ = yym2431
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2417[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2432 := z.EncBinary()
					_ = yym2432
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2417 || yy2arr2417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2417[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2434 := z.EncBinary()
						_ = yym2434
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2417[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2435 := z.EncBinary()
						_ = yym2435
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2417 || yy2arr2417 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2436 := z.DecBinary()
	_ = yym2436
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2437 := r.ContainerType()
		if yyct2437 == codecSelferValueTypeMap1234 {
			yyl2437 := r.ReadMapStart()
			if yyl2437 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2437, d)
			}
		} else if yyct2437 == codecSelferValueTypeArray1234 {
			yyl2437 := r.ReadArrayStart()
			if yyl2437 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2437, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2438Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2438Slc
	var yyhl2438 bool = l >= 0
	for yyj2438 := 0; ; yyj2438++ {
		if yyhl2438 {
			if yyj2438 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2438Slc = r.DecodeBytes(yys2438Slc, true, true)
		yys2438 := string(yys2438Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2438 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2444 := &x.Conditions
				yym2445 := z.DecBinary()
				_ = yym2445
				if false {
				} else {
					h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2444), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2438)
		} // end switch yys2438
	} // end for yyj2438
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2446 int
	var yyb2446 bool
	var yyhl2446 bool = l >= 0
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2452 := &x.Conditions
		yym2453 := z.DecBinary()
		_ = yym2453
		if false {
		} else {
			h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2452), d)
		}
	}
	for {
		yyj2446++
		if yyhl2446 {
			yyb2446 = yyj2446 > l
		} else {
			yyb2446 = r.CheckBreak()
		}
		if yyb2446 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2446-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicationControllerConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2454 := z.EncBinary()
	_ = yym2454
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicationControllerConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2455 := z.DecBinary()
	_ = yym2455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicationControllerCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2456 := z.EncBinary()
		_ = yym2456
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2457 := !z.EncBinary()
			yy2arr2457 := z.EncBasicHandle().StructToArray
			var yyq2457 [5]bool
			_, _, _ = yysep2457, yyq2457, yy2arr2457
			const yyr2457 bool = false
			yyq2457[2] = true
			yyq2457[3] = x.Reason != ""
			yyq2457[4] = x.Message != ""
			var yynn2457 int
			if yyr2457 || yy2arr2457 {
				r.EncodeArrayStart(5)
			} else {
				yynn2457 = 2
				for _, b := range yyq2457 {
					if b {
						yynn2457++
					}
				}
				r.EncodeMapStart(yynn2457)
				yynn2457 = 0
			}
			if yyr2457 || yy2arr2457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2457 || yy2arr2457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2457 || yy2arr2457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2457[2] {
					yy2461 := &x.LastTransitionTime
					yym2462 := z.EncBinary()
					_ = yym2462
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2461) {
					} else if yym2462 {
						z.EncBinaryMarshal(yy2461)
					} else if !yym2462 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2461)
					} else {
						z.EncFallback(yy2461)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2457[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2463 := &x.LastTransitionTime
					yym2464 := z.EncBinary()
					_ = yym2464
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2463) {
					} else if yym2464 {
						z.EncBinaryMarshal(yy2463)
					} else if !yym2464 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2463)
					} else {
						z.EncFallback(yy2463)
					}
				}
			}
			if yyr2457 || yy2arr2457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2457[3] {
					yym2466 := z.EncBinary()
					_ = yym2466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2457[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2467 := z.EncBinary()
					_ = yym2467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2457 || yy2arr2457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2457[4] {
					yym2469 := z.EncBinary()
					_ = yym2469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2457[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2470 := z.EncBinary()
					_ = yym2470
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2457 || yy2arr2457 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2471 := z.DecBinary()
	_ = yym2471
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2472 := r.ContainerType()
		if yyct2472 == codecSelferValueTypeMap1234 {
			yyl2472 := r.ReadMapStart()
			if yyl2472 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2472, d)
			}
		} else if yyct2472 == codecSelferValueTypeArray1234 {
			yyl2472 := r.ReadArrayStart()
			if yyl2472 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2472, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2473Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2473Slc
	var yyhl2473 bool = l >= 0
	for yyj2473 := 0; ; yyj2473++ {
		if yyhl2473 {
			if yyj2473 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2473Slc = r.DecodeBytes(yys2473Slc, true, true)
		yys2473 := string(yys2473Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2473 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicationControllerConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2476 := &x.LastTransitionTime
				yym2477 := z.DecBinary()
				_ = yym2477
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2476) {
				} else if yym2477 {
					z.DecBinaryUnmarshal(yyv2476)
				} else if !yym2477 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2476)
				} else {
					z.DecFallback(yyv2476, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2473)
		} // end switch yys2473
	} // end for yyj2473
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2480 int
	var yyb2480 bool
	var yyhl2480 bool = l >= 0
	yyj2480++
	if yyhl2480 {
		yyb2480 = yyj2480 > l
	} else {
		yyb2480 = r.CheckBreak()
	}
	if yyb2480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicationControllerConditionType(r.DecodeString())
	}
	yyj2480++
	if yyhl2480 {
		yyb2480 = yyj2480 > l
	} else {
		yyb2480 = r.CheckBreak()
	}
	if yyb2480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2480++
	if yyhl2480 {
		yyb2480 = yyj2480 > l
	} else {
		yyb2480 = r.CheckBreak()
	}
	if yyb2480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2483 := &x.LastTransitionTime
		yym2484 := z.DecBinary()
		_ = yym2484
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2483) {
		} else if yym2484 {
			z.DecBinaryUnmarshal(yyv2483)
		} else if !yym2484 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2483)
		} else {
			z.DecFallback(yyv2483, false)
		}
	}
	yyj2480++
	if yyhl2480 {
		yyb2480 = yyj2480 > l
	} else {
		yyb2480 = r.CheckBreak()
	}
	if yyb2480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2480++
	if yyhl2480 {
		yyb2480 = yyj2480 > l
	} else {
		yyb2480 = r.CheckBreak()
	}
	if yyb2480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2480++
		if yyhl2480 {
			yyb2480 = yyj2480 > l
		} else {
			yyb2480 = r.CheckBreak()
		}
		if yyb2480 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2480-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2487 := z.EncBinary()
		_ = yym2487
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2488 := !z.EncBinary()
			yy2arr2488 := z.EncBasicHandle().StructToArray
			var yyq2488 [5]bool
			_, _, _ = yysep2488, yyq2488, yy2arr2488
			const yyr2488 bool = false
			yyq2488[0] = x.Kind != ""
			yyq2488[1] = x.APIVersion != ""
			yyq2488[2] = true
			yyq2488[3] = true
			yyq2488[4] = true
			var yynn2488 int
			if yyr2488 || yy2arr2488 {
				r.EncodeArrayStart(5)
			} else {
				yynn2488 = 0
				for _, b := range yyq2488 {
					if b {
						yynn2488++
					}
				}
				r.EncodeMapStart(yynn2488)
				yynn2488 = 0
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2488[0] {
					yym2490 := z.EncBinary()
					_ = yym2490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2488[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2491 := z.EncBinary()
					_ = yym2491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2488[1] {
					yym2493 := z.EncBinary()
					_ = yym2493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2488[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2494 := z.EncBinary()
					_ = yym2494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2488[2] {
					yy2496 := &x.ObjectMeta
					yy2496.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2488[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2497 := &x.ObjectMeta
					yy2497.CodecEncodeSelf(e)
				}
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2488[3] {
					yy2499 := &x.Spec
					yy2499.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2488[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2500 := &x.Spec
					yy2500.CodecEncodeSelf(e)
				}
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2488[4] {
					yy2502 := &x.Status
					yy2502.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2488[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2503 := &x.Status
					yy2503.CodecEncodeSelf(e)
				}
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2504 := z.DecBinary()
	_ = yym2504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2505 := r.ContainerType()
		if yyct2505 == codecSelferValueTypeMap1234 {
			yyl2505 := r.ReadMapStart()
			if yyl2505 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2505, d)
			}
		} else if yyct2505 == codecSelferValueTypeArray1234 {
			yyl2505 := r.ReadArrayStart()
			if yyl2505 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2506Slc
	var yyhl2506 bool = l >= 0
	for yyj2506 := 0; ; yyj2506++ {
		if yyhl2506 {
			if yyj2506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2506Slc = r.DecodeBytes(yys2506Slc, true, true)
		yys2506 := string(yys2506Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2506 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2509 := &x.ObjectMeta
				yyv2509.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2510 := &x.Spec
				yyv2510.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2511 := &x.Status
				yyv2511.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2506)
		} // end switch yys2506
	} // end for yyj2506
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2512 int
	var yyb2512 bool
	var yyhl2512 bool = l >= 0
	yyj2512++
	if yyhl2512 {
		yyb2512 = yyj2512 > l
	} else {
		yyb2512 = r.CheckBreak()
	}
	if yyb2512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2512++
	if yyhl2512 {
		yyb2512 = yyj2512 > l
	} else {
		yyb2512 = r.CheckBreak()
	}
	if yyb2512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2512++
	if yyhl2512 {
		yyb2512 = yyj2512 > l
	} else {
		yyb2512 = r.CheckBreak()
	}
	if yyb2512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2515 := &x.ObjectMeta
		yyv2515.CodecDecodeSelf(d)
	}
	yyj2512++
	if yyhl2512 {
		yyb2512 = yyj2512 > l
	} else {
		yyb2512 = r.CheckBreak()
	}
	if yyb2512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2516 := &x.Spec
		yyv2516.CodecDecodeSelf(d)
	}
	yyj2512++
	if yyhl2512 {
		yyb2512 = yyj2512 > l
	} else {
		yyb2512 = r.CheckBreak()
	}
	if yyb2512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2517 := &x.Status
		yyv2517.CodecDecodeSelf(d)
	}
	for {
		yyj2512++
		if yyhl2512 {
			yyb2512 = yyj2512 > l
		} else {
			yyb2512 = r.CheckBreak()
		}
		if yyb2512 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2512-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2518 := z.EncBinary()
		_ = yym2518
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2519 := !z.EncBinary()
			yy2arr2519 := z.EncBasicHandle().StructToArray
			var yyq2519 [4]bool
			_, _, _ = yysep2519, yyq2519, yy2arr2519
			const yyr2519 bool = false
			yyq2519[0] = x.Kind != ""
			yyq2519[1] = x.APIVersion != ""
			yyq2519[2] = true
			var yynn2519 int
			if yyr2519 || yy2arr2519 {
				r.EncodeArrayStart(4)
			} else {
				yynn2519 = 1
				for _, b := range yyq2519 {
					if b {
						yynn2519++
					}
				}
				r.EncodeMapStart(yynn2519)
				yynn2519 = 0
			}
			if yyr2519 || yy2arr2519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2519[0] {
					yym2521 := z.EncBinary()
					_ = yym2521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2519[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2522 := z.EncBinary()
					_ = yym2522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2519 || yy2arr2519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2519[1] {
					yym2524 := z.EncBinary()
					_ = yym2524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2519[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2525 := z.EncBinary()
					_ = yym2525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2519 || yy2arr2519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2519[2] {
					yy2527 := &x.ListMeta
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2527) {
					} else {
						z.EncFallback(yy2527)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2519[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2529 := &x.ListMeta
					yym2530 := z.EncBinary()
					_ = yym2530
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2529) {
					} else {
						z.EncFallback(yy2529)
					}
				}
			}
			if yyr2519 || yy2arr2519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2532 := z.EncBinary()
					_ = yym2532
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2533 := z.EncBinary()
					_ = yym2533
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2519 || yy2arr2519 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2534 := z.DecBinary()
	_ = yym2534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2535 := r.ContainerType()
		if yyct2535 == codecSelferValueTypeMap1234 {
			yyl2535 := r.ReadMapStart()
			if yyl2535 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2535, d)
			}
		} else if yyct2535 == codecSelferValueTypeArray1234 {
			yyl2535 := r.ReadArrayStart()
			if yyl2535 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2535, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2536Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2536Slc
	var yyhl2536 bool = l >= 0
	for yyj2536 := 0; ; yyj2536++ {
		if yyhl2536 {
			if yyj2536 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2536Slc = r.DecodeBytes(yys2536Slc, true, true)
		yys2536 := string(yys2536Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2536 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2539 := &x.ListMeta
				yym2540 := z.DecBinary()
				_ = yym2540
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2539) {
				} else {
					z.DecFallback(yyv2539, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2541 := &x.Items
				yym2542 := z.DecBinary()
				_ = yym2542
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2541), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2536)
		} // end switch yys2536
	} // end for yyj2536
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2543 int
	var yyb2543 bool
	var yyhl2543 bool = l >= 0
	yyj2543++
	if yyhl2543 {
		yyb2543 = yyj2543 > l
	} else {
		yyb2543 = r.CheckBreak()
	}
	if yyb2543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2543++
	if yyhl2543 {
		yyb2543 = yyj2543 > l
	} else {
		yyb2543 = r.CheckBreak()
	}
	if yyb2543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2543++
	if yyhl2543 {
		yyb2543 = yyj2543 > l
	} else {
		yyb2543 = r.CheckBreak()
	}
	if yyb2543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2546 := &x.ListMeta
		yym2547 := z.DecBinary()
		_ = yym2547
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2546) {
		} else {
			z.DecFallback(yyv2546, false)
		}
	}
	yyj2543++
	if yyhl2543 {
		yyb2543 = yyj2543 > l
	} else {
		yyb2543 = r.CheckBreak()
	}
	if yyb2543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2548 := &x.Items
		yym2549 := z.DecBinary()
		_ = yym2549
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2548), d)
		}
	}
	for {
		yyj2543++
		if yyhl2543 {
			yyb2543 = yyj2543 > l
		} else {
			yyb2543 = r.CheckBreak()
		}
		if yyb2543 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2543-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2550 := z.EncBinary()
	_ = yym2550
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2551 := z.DecBinary()
	_ = yym2551
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2552 := z.EncBinary()
	_ = yym2552
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2553 := z.DecBinary()
	_ = yym2553
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2554 := z.EncBinary()
		_ = yym2554
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2555 := !z.EncBinary()
			yy2arr2555 := z.EncBasicHandle().StructToArray
			var yyq2555 [1]bool
			_, _, _ = yysep2555, yyq2555, yy2arr2555
			const yyr2555 bool = false
			yyq2555[0] = true
			var yynn2555 int
			if yyr2555 || yy2arr2555 {
				r.EncodeArrayStart(1)
			} else {
				yynn2555 = 0
				for _, b := range yyq2555 {
					if b {
						yynn2555++
					}
				}
				r.EncodeMapStart(yynn2555)
				yynn2555 = 0
			}
			if yyr2555 || yy2arr2555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2555[0] {
					yy2557 := &x.LoadBalancer
					yy2557.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2555[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2558 := &x.LoadBalancer
					yy2558.CodecEncodeSelf(e)
				}
			}
			if yyr2555 || yy2arr2555 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2559 := z.DecBinary()
	_ = yym2559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2560 := r.ContainerType()
		if yyct2560 == codecSelferValueTypeMap1234 {
			yyl2560 := r.ReadMapStart()
			if yyl2560 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2560, d)
			}
		} else if yyct2560 == codecSelferValueTypeArray1234 {
			yyl2560 := r.ReadArrayStart()
			if yyl2560 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2561Slc
	var yyhl2561 bool = l >= 0
	for yyj2561 := 0; ; yyj2561++ {
		if yyhl2561 {
			if yyj2561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2561Slc = r.DecodeBytes(yys2561Slc, true, true)
		yys2561 := string(yys2561Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2561 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2562 := &x.LoadBalancer
				yyv2562.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2561)
		} // end switch yys2561
	} // end for yyj2561
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2563 int
	var yyb2563 bool
	var yyhl2563 bool = l >= 0
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2564 := &x.LoadBalancer
		yyv2564.CodecDecodeSelf(d)
	}
	for {
		yyj2563++
		if yyhl2563 {
			yyb2563 = yyj2563 > l
		} else {
			yyb2563 = r.CheckBreak()
		}
		if yyb2563 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2563-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2565 := z.EncBinary()
		_ = yym2565
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2566 := !z.EncBinary()
			yy2arr2566 := z.EncBasicHandle().StructToArray
			var yyq2566 [1]bool
			_, _, _ = yysep2566, yyq2566, yy2arr2566
			const yyr2566 bool = false
			yyq2566[0] = len(x.Ingress) != 0
			var yynn2566 int
			if yyr2566 || yy2arr2566 {
				r.EncodeArrayStart(1)
			} else {
				yynn2566 = 0
				for _, b := range yyq2566 {
					if b {
						yynn2566++
					}
				}
				r.EncodeMapStart(yynn2566)
				yynn2566 = 0
			}
			if yyr2566 || yy2arr2566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2566[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2568 := z.EncBinary()
						_ = yym2568
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2566[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2569 := z.EncBinary()
						_ = yym2569
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2566 || yy2arr2566 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2570 := z.DecBinary()
	_ = yym2570
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2571 := r.ContainerType()
		if yyct2571 == codecSelferValueTypeMap1234 {
			yyl2571 := r.ReadMapStart()
			if yyl2571 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2571, d)
			}
		} else if yyct2571 == codecSelferValueTypeArray1234 {
			yyl2571 := r.ReadArrayStart()
			if yyl2571 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2571, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2572Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2572Slc
	var yyhl2572 bool = l >= 0
	for yyj2572 := 0; ; yyj2572++ {
		if yyhl2572 {
			if yyj2572 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2572Slc = r.DecodeBytes(yys2572Slc, true, true)
		yys2572 := string(yys2572Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2572 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2573 := &x.Ingress
				yym2574 := z.DecBinary()
				_ = yym2574
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2573), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2572)
		} // end switch yys2572
	} // end for yyj2572
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2575 int
	var yyb2575 bool
	var yyhl2575 bool = l >= 0
	yyj2575++
	if yyhl2575 {
		yyb2575 = yyj2575 > l
	} else {
		yyb2575 = r.CheckBreak()
	}
	if yyb2575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2576 := &x.Ingress
		yym2577 := z.DecBinary()
		_ = yym2577
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2576), d)
		}
	}
	for {
		yyj2575++
		if yyhl2575 {
			yyb2575 = yyj2575 > l
		} else {
			yyb2575 = r.CheckBreak()
		}
		if yyb2575 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2575-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2578 := z.EncBinary()
		_ = yym2578
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2579 := !z.EncBinary()
			yy2arr2579 := z.EncBasicHandle().StructToArray
			var yyq2579 [2]bool
			_, _, _ = yysep2579, yyq2579, yy2arr2579
			const yyr2579 bool = false
			yyq2579[0] = x.IP != ""
			yyq2579[1] = x.Hostname != ""
			var yynn2579 int
			if yyr2579 || yy2arr2579 {
				r.EncodeArrayStart(2)
			} else {
				yynn2579 = 0
				for _, b := range yyq2579 {
					if b {
						yynn2579++
					}
				}
				r.EncodeMapStart(yynn2579)
				yynn2579 = 0
			}
			if yyr2579 || yy2arr2579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2579[0] {
					yym2581 := z.EncBinary()
					_ = yym2581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2579[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2582 := z.EncBinary()
					_ = yym2582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2579 || yy2arr2579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2579[1] {
					yym2584 := z.EncBinary()
					_ = yym2584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2579[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2585 := z.EncBinary()
					_ = yym2585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2579 || yy2arr2579 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2586 := z.DecBinary()
	_ = yym2586
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2587 := r.ContainerType()
		if yyct2587 == codecSelferValueTypeMap1234 {
			yyl2587 := r.ReadMapStart()
			if yyl2587 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2587, d)
			}
		} else if yyct2587 == codecSelferValueTypeArray1234 {
			yyl2587 := r.ReadArrayStart()
			if yyl2587 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2587, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2588Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2588Slc
	var yyhl2588 bool = l >= 0
	for yyj2588 := 0; ; yyj2588++ {
		if yyhl2588 {
			if yyj2588 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2588Slc = r.DecodeBytes(yys2588Slc, true, true)
		yys2588 := string(yys2588Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2588 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2588)
		} // end switch yys2588
	} // end for yyj2588
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2591 int
	var yyb2591 bool
	var yyhl2591 bool = l >= 0
	yyj2591++
	if yyhl2591 {
		yyb2591 = yyj2591 > l
	} else {
		yyb2591 = r.CheckBreak()
	}
	if yyb2591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2591++
	if yyhl2591 {
		yyb2591 = yyj2591 > l
	} else {
		yyb2591 = r.CheckBreak()
	}
	if yyb2591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2591++
		if yyhl2591 {
			yyb2591 = yyj2591 > l
		} else {
			yyb2591 = r.CheckBreak()
		}
		if yyb2591 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2591-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2594 := z.EncBinary()
		_ = yym2594
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2595 := !z.EncBinary()
			yy2arr2595 := z.EncBasicHandle().StructToArray
			var yyq2595 [10]bool
			_, _, _ = yysep2595, yyq2595, yy2arr2595
			const yyr2595 bool = false
			yyq2595[1] = len(x.Selector) != 0
			yyq2595[2] = x.ClusterIP != ""
			yyq2595[3] = x.Type != ""
			yyq2595[4] = len(x.ExternalIPs) != 0
			yyq2595[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2595[6] = x.SessionAffinity != ""
			yyq2595[7] = x.LoadBalancerIP != ""
			yyq2595[8] = len(x.LoadBalancerSourceRanges) != 0
			yyq2595[9] = x.ExternalName != ""
			var yynn2595 int
			if yyr2595 || yy2arr2595 {
				r.EncodeArrayStart(10)
			} else {
				yynn2595 = 1
				for _, b := range yyq2595 {
					if b {
						yynn2595++
					}
				}
				r.EncodeMapStart(yynn2595)
				yynn2595 = 0
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2598 := z.EncBinary()
					_ = yym2598
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2600 := z.EncBinary()
						_ = yym2600
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2595[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2601 := z.EncBinary()
						_ = yym2601
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[2] {
					yym2603 := z.EncBinary()
					_ = yym2603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2595[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2604 := z.EncBinary()
					_ = yym2604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2595[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2607 := z.EncBinary()
						_ = yym2607
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2595[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2608 := z.EncBinary()
						_ = yym2608
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2610 := z.EncBinary()
						_ = yym2610
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2595[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2611 := z.EncBinary()
						_ = yym2611
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2595[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[7] {
					yym2614 := z.EncBinary()
					_ = yym2614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2595[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2615 := z.EncBinary()
					_ = yym2615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2617 := z.EncBinary()
						_ = yym2617
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2595[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2618 := z.EncBinary()
						_ = yym2618
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[9] {
					yym2620 := z.EncBinary()
					_ = yym2620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2595[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2622 := z.DecBinary()
	_ = yym2622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2623 := r.ContainerType()
		if yyct2623 == codecSelferValueTypeMap1234 {
			yyl2623 := r.ReadMapStart()
			if yyl2623 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2623, d)
			}
		} else if yyct2623 == codecSelferValueTypeArray1234 {
			yyl2623 := r.ReadArrayStart()
			if yyl2623 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2623, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2624Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2624Slc
	var yyhl2624 bool = l >= 0
	for yyj2624 := 0; ; yyj2624++ {
		if yyhl2624 {
			if yyj2624 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2624Slc = r.DecodeBytes(yys2624Slc, true, true)
		yys2624 := string(yys2624Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2624 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2625 := &x.Ports
				yym2626 := z.DecBinary()
				_ = yym2626
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2625), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2627 := &x.Selector
				yym2628 := z.DecBinary()
				_ = yym2628
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2627, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2631 := &x.ExternalIPs
				yym2632 := z.DecBinary()
				_ = yym2632
				if false {
				} else {
					z.F.DecSliceStringX(yyv2631, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2633 := &x.DeprecatedPublicIPs
				yym2634 := z.DecBinary()
				_ = yym2634
				if false {
				} else {
					z.F.DecSliceStringX(yyv2633, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2637 := &x.LoadBalancerSourceRanges
				yym2638 := z.DecBinary()
				_ = yym2638
				if false {
				} else {
					z.F.DecSliceStringX(yyv2637, false, d)
				}
			}
		case "externalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2624)
		} // end switch yys2624
	} // end for yyj2624
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2640 int
	var yyb2640 bool
	var yyhl2640 bool = l >= 0
	yyj2640++
	if yyhl2640 {
		yyb2640 = yyj2640 > l
	} else {
		yyb2640 = r.CheckBreak()
	}
	if yyb2640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2641 := &x.Ports
		yym2642 := z.DecBinary()
		_ = yym2642
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2641), d)
		}
	}
	yyj2640++
	if yyhl2640 {
		yyb2640 = yyj2640 > l
	} else {
		yyb2640 = r.CheckBreak()
	}
	if yyb2640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2643 := &x.Selector
		yym2644 := z.DecBinary()
		_ = yym2644
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2643, false, d)
		}
	}
	yyj2640++
	if yyhl2640 {
		yyb2640 = yyj2640 > l
	} else {
		yyb2640 = r.CheckBreak()
	}
	if yyb2640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2640++
	if yyhl2640 {
		yyb2640 = yyj2640 > l
	} else {
		yyb2640 = r.CheckBreak()
	}
	if yyb2640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2640++
	if yyhl2640 {
		yyb2640 = yyj2640 > l
	} else {
		yyb2640 = r.CheckBreak()
	}
	if yyb2640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2647 := &x.ExternalIPs
		yym2648 := z.DecBinary()
		_ = yym2648
		if false {
		} else {
			z.F.DecSliceStringX(yyv2647, false, d)
		}
	}
	yyj2640++
	if yyhl2640 {
		yyb2640 = yyj2640 > l
	} else {
		yyb2640 = r.CheckBreak()
	}
	if yyb2640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2649 := &x.DeprecatedPublicIPs
		yym2650 := z.DecBinary()
		_ = yym2650
		if false {
		} else {
			z.F.DecSliceStringX(yyv2649, false, d)
		}
	}
	yyj2640++
	if yyhl2640 {
		yyb2640 = yyj2640 > l
	} else {
		yyb2640 = r.CheckBreak()
	}
	if yyb2640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2640++
	if yyhl2640 {
		yyb2640 = yyj2640 > l
	} else {
		yyb2640 = r.CheckBreak()
	}
	if yyb2640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2640++
	if yyhl2640 {
		yyb2640 = yyj2640 > l
	} else {
		yyb2640 = r.CheckBreak()
	}
	if yyb2640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2653 := &x.LoadBalancerSourceRanges
		yym2654 := z.DecBinary()
		_ = yym2654
		if false {
		} else {
			z.F.DecSliceStringX(yyv2653, false, d)
		}
	}
	yyj2640++
	if yyhl2640 {
		yyb2640 = yyj2640 > l
	} else {
		yyb2640 = r.CheckBreak()
	}
	if yyb2640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	for {
		yyj2640++
		if yyhl2640 {
			yyb2640 = yyj2640 > l
		} else {
			yyb2640 = r.CheckBreak()
		}
		if yyb2640 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2640-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2656 := z.EncBinary()
		_ = yym2656
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2657 := !z.EncBinary()
			yy2arr2657 := z.EncBasicHandle().StructToArray
			var yyq2657 [5]bool
			_, _, _ = yysep2657, yyq2657, yy2arr2657
			const yyr2657 bool = false
			yyq2657[0] = x.Name != ""
			yyq2657[1] = x.Protocol != ""
			yyq2657[3] = true
			yyq2657[4] = x.NodePort != 0
			var yynn2657 int
			if yyr2657 || yy2arr2657 {
				r.EncodeArrayStart(5)
			} else {
				yynn2657 = 1
				for _, b := range yyq2657 {
					if b {
						yynn2657++
					}
				}
				r.EncodeMapStart(yynn2657)
				yynn2657 = 0
			}
			if yyr2657 || yy2arr2657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2657[0] {
					yym2659 := z.EncBinary()
					_ = yym2659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2657[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2657 || yy2arr2657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2657[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2657[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2657 || yy2arr2657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2663 := z.EncBinary()
				_ = yym2663
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2664 := z.EncBinary()
				_ = yym2664
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2657 || yy2arr2657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2657[3] {
					yy2666 := &x.TargetPort
					yym2667 := z.EncBinary()
					_ = yym2667
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2666) {
					} else if !yym2667 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2666)
					} else {
						z.EncFallback(yy2666)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2657[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2668 := &x.TargetPort
					yym2669 := z.EncBinary()
					_ = yym2669
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2668) {
					} else if !yym2669 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2668)
					} else {
						z.EncFallback(yy2668)
					}
				}
			}
			if yyr2657 || yy2arr2657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2657[4] {
					yym2671 := z.EncBinary()
					_ = yym2671
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2657[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2672 := z.EncBinary()
					_ = yym2672
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2657 || yy2arr2657 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2673 := z.DecBinary()
	_ = yym2673
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2674 := r.ContainerType()
		if yyct2674 == codecSelferValueTypeMap1234 {
			yyl2674 := r.ReadMapStart()
			if yyl2674 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2674, d)
			}
		} else if yyct2674 == codecSelferValueTypeArray1234 {
			yyl2674 := r.ReadArrayStart()
			if yyl2674 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2674, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2675Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2675Slc
	var yyhl2675 bool = l >= 0
	for yyj2675 := 0; ; yyj2675++ {
		if yyhl2675 {
			if yyj2675 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2675Slc = r.DecodeBytes(yys2675Slc, true, true)
		yys2675 := string(yys2675Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2675 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2679 := &x.TargetPort
				yym2680 := z.DecBinary()
				_ = yym2680
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2679) {
				} else if !yym2680 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2679)
				} else {
					z.DecFallback(yyv2679, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2675)
		} // end switch yys2675
	} // end for yyj2675
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2682 int
	var yyb2682 bool
	var yyhl2682 bool = l >= 0
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2686 := &x.TargetPort
		yym2687 := z.DecBinary()
		_ = yym2687
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2686) {
		} else if !yym2687 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2686)
		} else {
			z.DecFallback(yyv2686, false)
		}
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2682++
		if yyhl2682 {
			yyb2682 = yyj2682 > l
		} else {
			yyb2682 = r.CheckBreak()
		}
		if yyb2682 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2682-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2689 := z.EncBinary()
		_ = yym2689
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2690 := !z.EncBinary()
			yy2arr2690 := z.EncBasicHandle().StructToArray
			var yyq2690 [5]bool
			_, _, _ = yysep2690, yyq2690, yy2arr2690
			const yyr2690 bool = false
			yyq2690[0] = x.Kind != ""
			yyq2690[1] = x.APIVersion != ""
			yyq2690[2] = true
			yyq2690[3] = true
			yyq2690[4] = true
			var yynn2690 int
			if yyr2690 || yy2arr2690 {
				r.EncodeArrayStart(5)
			} else {
				yynn2690 = 0
				for _, b := range yyq2690 {
					if b {
						yynn2690++
					}
				}
				r.EncodeMapStart(yynn2690)
				yynn2690 = 0
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2690[0] {
					yym2692 := z.EncBinary()
					_ = yym2692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2690[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2693 := z.EncBinary()
					_ = yym2693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2690[1] {
					yym2695 := z.EncBinary()
					_ = yym2695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2690[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2696 := z.EncBinary()
					_ = yym2696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2690[2] {
					yy2698 := &x.ObjectMeta
					yy2698.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2690[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2699 := &x.ObjectMeta
					yy2699.CodecEncodeSelf(e)
				}
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2690[3] {
					yy2701 := &x.Spec
					yy2701.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2690[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2702 := &x.Spec
					yy2702.CodecEncodeSelf(e)
				}
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2690[4] {
					yy2704 := &x.Status
					yy2704.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2690[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2705 := &x.Status
					yy2705.CodecEncodeSelf(e)
				}
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2706 := z.DecBinary()
	_ = yym2706
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2707 := r.ContainerType()
		if yyct2707 == codecSelferValueTypeMap1234 {
			yyl2707 := r.ReadMapStart()
			if yyl2707 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2707, d)
			}
		} else if yyct2707 == codecSelferValueTypeArray1234 {
			yyl2707 := r.ReadArrayStart()
			if yyl2707 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2707, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2708Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2708Slc
	var yyhl2708 bool = l >= 0
	for yyj2708 := 0; ; yyj2708++ {
		if yyhl2708 {
			if yyj2708 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2708Slc = r.DecodeBytes(yys2708Slc, true, true)
		yys2708 := string(yys2708Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2708 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2711 := &x.ObjectMeta
				yyv2711.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2712 := &x.Spec
				yyv2712.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2713 := &x.Status
				yyv2713.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2708)
		} // end switch yys2708
	} // end for yyj2708
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2714 int
	var yyb2714 bool
	var yyhl2714 bool = l >= 0
	yyj2714++
	if yyhl2714 {
		yyb2714 = yyj2714 > l
	} else {
		yyb2714 = r.CheckBreak()
	}
	if yyb2714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2714++
	if yyhl2714 {
		yyb2714 = yyj2714 > l
	} else {
		yyb2714 = r.CheckBreak()
	}
	if yyb2714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2714++
	if yyhl2714 {
		yyb2714 = yyj2714 > l
	} else {
		yyb2714 = r.CheckBreak()
	}
	if yyb2714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2717 := &x.ObjectMeta
		yyv2717.CodecDecodeSelf(d)
	}
	yyj2714++
	if yyhl2714 {
		yyb2714 = yyj2714 > l
	} else {
		yyb2714 = r.CheckBreak()
	}
	if yyb2714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2718 := &x.Spec
		yyv2718.CodecDecodeSelf(d)
	}
	yyj2714++
	if yyhl2714 {
		yyb2714 = yyj2714 > l
	} else {
		yyb2714 = r.CheckBreak()
	}
	if yyb2714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2719 := &x.Status
		yyv2719.CodecDecodeSelf(d)
	}
	for {
		yyj2714++
		if yyhl2714 {
			yyb2714 = yyj2714 > l
		} else {
			yyb2714 = r.CheckBreak()
		}
		if yyb2714 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2714-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2720 := z.EncBinary()
		_ = yym2720
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2721 := !z.EncBinary()
			yy2arr2721 := z.EncBasicHandle().StructToArray
			var yyq2721 [4]bool
			_, _, _ = yysep2721, yyq2721, yy2arr2721
			const yyr2721 bool = false
			yyq2721[0] = x.Kind != ""
			yyq2721[1] = x.APIVersion != ""
			yyq2721[2] = true
			var yynn2721 int
			if yyr2721 || yy2arr2721 {
				r.EncodeArrayStart(4)
			} else {
				yynn2721 = 1
				for _, b := range yyq2721 {
					if b {
						yynn2721++
					}
				}
				r.EncodeMapStart(yynn2721)
				yynn2721 = 0
			}
			if yyr2721 || yy2arr2721 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2721[0] {
					yym2723 := z.EncBinary()
					_ = yym2723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2721[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2721 || yy2arr2721 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2721[1] {
					yym2726 := z.EncBinary()
					_ = yym2726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2721[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2721 || yy2arr2721 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2721[2] {
					yy2729 := &x.ListMeta
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2729) {
					} else {
						z.EncFallback(yy2729)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2721[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2731 := &x.ListMeta
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2731) {
					} else {
						z.EncFallback(yy2731)
					}
				}
			}
			if yyr2721 || yy2arr2721 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2734 := z.EncBinary()
					_ = yym2734
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2721 || yy2arr2721 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2736 := z.DecBinary()
	_ = yym2736
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2737 := r.ContainerType()
		if yyct2737 == codecSelferValueTypeMap1234 {
			yyl2737 := r.ReadMapStart()
			if yyl2737 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2737, d)
			}
		} else if yyct2737 == codecSelferValueTypeArray1234 {
			yyl2737 := r.ReadArrayStart()
			if yyl2737 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2737, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2738Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2738Slc
	var yyhl2738 bool = l >= 0
	for yyj2738 := 0; ; yyj2738++ {
		if yyhl2738 {
			if yyj2738 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2738Slc = r.DecodeBytes(yys2738Slc, true, true)
		yys2738 := string(yys2738Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2738 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2741 := &x.ListMeta
				yym2742 := z.DecBinary()
				_ = yym2742
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2741) {
				} else {
					z.DecFallback(yyv2741, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2743 := &x.Items
				yym2744 := z.DecBinary()
				_ = yym2744
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2743), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2738)
		} // end switch yys2738
	} // end for yyj2738
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2745 int
	var yyb2745 bool
	var yyhl2745 bool = l >= 0
	yyj2745++
	if yyhl2745 {
		yyb2745 = yyj2745 > l
	} else {
		yyb2745 = r.CheckBreak()
	}
	if yyb2745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2745++
	if yyhl2745 {
		yyb2745 = yyj2745 > l
	} else {
		yyb2745 = r.CheckBreak()
	}
	if yyb2745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2745++
	if yyhl2745 {
		yyb2745 = yyj2745 > l
	} else {
		yyb2745 = r.CheckBreak()
	}
	if yyb2745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2748 := &x.ListMeta
		yym2749 := z.DecBinary()
		_ = yym2749
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2748) {
		} else {
			z.DecFallback(yyv2748, false)
		}
	}
	yyj2745++
	if yyhl2745 {
		yyb2745 = yyj2745 > l
	} else {
		yyb2745 = r.CheckBreak()
	}
	if yyb2745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2750 := &x.Items
		yym2751 := z.DecBinary()
		_ = yym2751
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2750), d)
		}
	}
	for {
		yyj2745++
		if yyhl2745 {
			yyb2745 = yyj2745 > l
		} else {
			yyb2745 = r.CheckBreak()
		}
		if yyb2745 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2745-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2752 := z.EncBinary()
		_ = yym2752
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2753 := !z.EncBinary()
			yy2arr2753 := z.EncBasicHandle().StructToArray
			var yyq2753 [5]bool
			_, _, _ = yysep2753, yyq2753, yy2arr2753
			const yyr2753 bool = false
			yyq2753[0] = x.Kind != ""
			yyq2753[1] = x.APIVersion != ""
			yyq2753[2] = true
			yyq2753[3] = len(x.Secrets) != 0
			yyq2753[4] = len(x.ImagePullSecrets) != 0
			var yynn2753 int
			if yyr2753 || yy2arr2753 {
				r.EncodeArrayStart(5)
			} else {
				yynn2753 = 0
				for _, b := range yyq2753 {
					if b {
						yynn2753++
					}
				}
				r.EncodeMapStart(yynn2753)
				yynn2753 = 0
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[0] {
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2753[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[1] {
					yym2758 := z.EncBinary()
					_ = yym2758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2753[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2759 := z.EncBinary()
					_ = yym2759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[2] {
					yy2761 := &x.ObjectMeta
					yy2761.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2753[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2762 := &x.ObjectMeta
					yy2762.CodecEncodeSelf(e)
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2764 := z.EncBinary()
						_ = yym2764
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2753[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2765 := z.EncBinary()
						_ = yym2765
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2767 := z.EncBinary()
						_ = yym2767
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2753[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2768 := z.EncBinary()
						_ = yym2768
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2769 := z.DecBinary()
	_ = yym2769
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2770 := r.ContainerType()
		if yyct2770 == codecSelferValueTypeMap1234 {
			yyl2770 := r.ReadMapStart()
			if yyl2770 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2770, d)
			}
		} else if yyct2770 == codecSelferValueTypeArray1234 {
			yyl2770 := r.ReadArrayStart()
			if yyl2770 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2770, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2771Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2771Slc
	var yyhl2771 bool = l >= 0
	for yyj2771 := 0; ; yyj2771++ {
		if yyhl2771 {
			if yyj2771 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2771Slc = r.DecodeBytes(yys2771Slc, true, true)
		yys2771 := string(yys2771Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2771 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2774 := &x.ObjectMeta
				yyv2774.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2775 := &x.Secrets
				yym2776 := z.DecBinary()
				_ = yym2776
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2775), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2777 := &x.ImagePullSecrets
				yym2778 := z.DecBinary()
				_ = yym2778
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2777), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2771)
		} // end switch yys2771
	} // end for yyj2771
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2779 int
	var yyb2779 bool
	var yyhl2779 bool = l >= 0
	yyj2779++
	if yyhl2779 {
		yyb2779 = yyj2779 > l
	} else {
		yyb2779 = r.CheckBreak()
	}
	if yyb2779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2779++
	if yyhl2779 {
		yyb2779 = yyj2779 > l
	} else {
		yyb2779 = r.CheckBreak()
	}
	if yyb2779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2779++
	if yyhl2779 {
		yyb2779 = yyj2779 > l
	} else {
		yyb2779 = r.CheckBreak()
	}
	if yyb2779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2782 := &x.ObjectMeta
		yyv2782.CodecDecodeSelf(d)
	}
	yyj2779++
	if yyhl2779 {
		yyb2779 = yyj2779 > l
	} else {
		yyb2779 = r.CheckBreak()
	}
	if yyb2779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2783 := &x.Secrets
		yym2784 := z.DecBinary()
		_ = yym2784
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2783), d)
		}
	}
	yyj2779++
	if yyhl2779 {
		yyb2779 = yyj2779 > l
	} else {
		yyb2779 = r.CheckBreak()
	}
	if yyb2779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2785 := &x.ImagePullSecrets
		yym2786 := z.DecBinary()
		_ = yym2786
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2785), d)
		}
	}
	for {
		yyj2779++
		if yyhl2779 {
			yyb2779 = yyj2779 > l
		} else {
			yyb2779 = r.CheckBreak()
		}
		if yyb2779 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2779-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2787 := z.EncBinary()
		_ = yym2787
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2788 := !z.EncBinary()
			yy2arr2788 := z.EncBasicHandle().StructToArray
			var yyq2788 [4]bool
			_, _, _ = yysep2788, yyq2788, yy2arr2788
			const yyr2788 bool = false
			yyq2788[0] = x.Kind != ""
			yyq2788[1] = x.APIVersion != ""
			yyq2788[2] = true
			var yynn2788 int
			if yyr2788 || yy2arr2788 {
				r.EncodeArrayStart(4)
			} else {
				yynn2788 = 1
				for _, b := range yyq2788 {
					if b {
						yynn2788++
					}
				}
				r.EncodeMapStart(yynn2788)
				yynn2788 = 0
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2788[0] {
					yym2790 := z.EncBinary()
					_ = yym2790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2788[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2791 := z.EncBinary()
					_ = yym2791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2788[1] {
					yym2793 := z.EncBinary()
					_ = yym2793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2788[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2794 := z.EncBinary()
					_ = yym2794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2788[2] {
					yy2796 := &x.ListMeta
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2796) {
					} else {
						z.EncFallback(yy2796)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2788[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2798 := &x.ListMeta
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2798) {
					} else {
						z.EncFallback(yy2798)
					}
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2801 := z.EncBinary()
					_ = yym2801
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2803 := z.DecBinary()
	_ = yym2803
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2804 := r.ContainerType()
		if yyct2804 == codecSelferValueTypeMap1234 {
			yyl2804 := r.ReadMapStart()
			if yyl2804 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2804, d)
			}
		} else if yyct2804 == codecSelferValueTypeArray1234 {
			yyl2804 := r.ReadArrayStart()
			if yyl2804 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2804, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2805Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2805Slc
	var yyhl2805 bool = l >= 0
	for yyj2805 := 0; ; yyj2805++ {
		if yyhl2805 {
			if yyj2805 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2805Slc = r.DecodeBytes(yys2805Slc, true, true)
		yys2805 := string(yys2805Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2805 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2808 := &x.ListMeta
				yym2809 := z.DecBinary()
				_ = yym2809
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2808) {
				} else {
					z.DecFallback(yyv2808, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2810 := &x.Items
				yym2811 := z.DecBinary()
				_ = yym2811
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2810), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2805)
		} // end switch yys2805
	} // end for yyj2805
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2812 int
	var yyb2812 bool
	var yyhl2812 bool = l >= 0
	yyj2812++
	if yyhl2812 {
		yyb2812 = yyj2812 > l
	} else {
		yyb2812 = r.CheckBreak()
	}
	if yyb2812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2812++
	if yyhl2812 {
		yyb2812 = yyj2812 > l
	} else {
		yyb2812 = r.CheckBreak()
	}
	if yyb2812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2812++
	if yyhl2812 {
		yyb2812 = yyj2812 > l
	} else {
		yyb2812 = r.CheckBreak()
	}
	if yyb2812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2815 := &x.ListMeta
		yym2816 := z.DecBinary()
		_ = yym2816
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2815) {
		} else {
			z.DecFallback(yyv2815, false)
		}
	}
	yyj2812++
	if yyhl2812 {
		yyb2812 = yyj2812 > l
	} else {
		yyb2812 = r.CheckBreak()
	}
	if yyb2812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2817 := &x.Items
		yym2818 := z.DecBinary()
		_ = yym2818
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2817), d)
		}
	}
	for {
		yyj2812++
		if yyhl2812 {
			yyb2812 = yyj2812 > l
		} else {
			yyb2812 = r.CheckBreak()
		}
		if yyb2812 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2812-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2819 := z.EncBinary()
		_ = yym2819
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2820 := !z.EncBinary()
			yy2arr2820 := z.EncBasicHandle().StructToArray
			var yyq2820 [4]bool
			_, _, _ = yysep2820, yyq2820, yy2arr2820
			const yyr2820 bool = false
			yyq2820[0] = x.Kind != ""
			yyq2820[1] = x.APIVersion != ""
			yyq2820[2] = true
			var yynn2820 int
			if yyr2820 || yy2arr2820 {
				r.EncodeArrayStart(4)
			} else {
				yynn2820 = 1
				for _, b := range yyq2820 {
					if b {
						yynn2820++
					}
				}
				r.EncodeMapStart(yynn2820)
				yynn2820 = 0
			}
			if yyr2820 || yy2arr2820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2820[0] {
					yym2822 := z.EncBinary()
					_ = yym2822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2820[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2823 := z.EncBinary()
					_ = yym2823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2820 || yy2arr2820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2820[1] {
					yym2825 := z.EncBinary()
					_ = yym2825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2820[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2826 := z.EncBinary()
					_ = yym2826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2820 || yy2arr2820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2820[2] {
					yy2828 := &x.ObjectMeta
					yy2828.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2820[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2829 := &x.ObjectMeta
					yy2829.CodecEncodeSelf(e)
				}
			}
			if yyr2820 || yy2arr2820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2831 := z.EncBinary()
					_ = yym2831
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2832 := z.EncBinary()
					_ = yym2832
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2820 || yy2arr2820 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2833 := z.DecBinary()
	_ = yym2833
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2834 := r.ContainerType()
		if yyct2834 == codecSelferValueTypeMap1234 {
			yyl2834 := r.ReadMapStart()
			if yyl2834 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2834, d)
			}
		} else if yyct2834 == codecSelferValueTypeArray1234 {
			yyl2834 := r.ReadArrayStart()
			if yyl2834 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2834, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2835Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2835Slc
	var yyhl2835 bool = l >= 0
	for yyj2835 := 0; ; yyj2835++ {
		if yyhl2835 {
			if yyj2835 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2835Slc = r.DecodeBytes(yys2835Slc, true, true)
		yys2835 := string(yys2835Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2835 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2838 := &x.ObjectMeta
				yyv2838.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2839 := &x.Subsets
				yym2840 := z.DecBinary()
				_ = yym2840
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2839), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2835)
		} // end switch yys2835
	} // end for yyj2835
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2841 int
	var yyb2841 bool
	var yyhl2841 bool = l >= 0
	yyj2841++
	if yyhl2841 {
		yyb2841 = yyj2841 > l
	} else {
		yyb2841 = r.CheckBreak()
	}
	if yyb2841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2841++
	if yyhl2841 {
		yyb2841 = yyj2841 > l
	} else {
		yyb2841 = r.CheckBreak()
	}
	if yyb2841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2841++
	if yyhl2841 {
		yyb2841 = yyj2841 > l
	} else {
		yyb2841 = r.CheckBreak()
	}
	if yyb2841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2844 := &x.ObjectMeta
		yyv2844.CodecDecodeSelf(d)
	}
	yyj2841++
	if yyhl2841 {
		yyb2841 = yyj2841 > l
	} else {
		yyb2841 = r.CheckBreak()
	}
	if yyb2841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2845 := &x.Subsets
		yym2846 := z.DecBinary()
		_ = yym2846
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2845), d)
		}
	}
	for {
		yyj2841++
		if yyhl2841 {
			yyb2841 = yyj2841 > l
		} else {
			yyb2841 = r.CheckBreak()
		}
		if yyb2841 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2841-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2847 := z.EncBinary()
		_ = yym2847
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2848 := !z.EncBinary()
			yy2arr2848 := z.EncBasicHandle().StructToArray
			var yyq2848 [3]bool
			_, _, _ = yysep2848, yyq2848, yy2arr2848
			const yyr2848 bool = false
			yyq2848[0] = len(x.Addresses) != 0
			yyq2848[1] = len(x.NotReadyAddresses) != 0
			yyq2848[2] = len(x.Ports) != 0
			var yynn2848 int
			if yyr2848 || yy2arr2848 {
				r.EncodeArrayStart(3)
			} else {
				yynn2848 = 0
				for _, b := range yyq2848 {
					if b {
						yynn2848++
					}
				}
				r.EncodeMapStart(yynn2848)
				yynn2848 = 0
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2848[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2850 := z.EncBinary()
						_ = yym2850
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2848[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2851 := z.EncBinary()
						_ = yym2851
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2848[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2853 := z.EncBinary()
						_ = yym2853
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2848[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2854 := z.EncBinary()
						_ = yym2854
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2848[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2856 := z.EncBinary()
						_ = yym2856
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2848[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2857 := z.EncBinary()
						_ = yym2857
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2858 := z.DecBinary()
	_ = yym2858
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2859 := r.ContainerType()
		if yyct2859 == codecSelferValueTypeMap1234 {
			yyl2859 := r.ReadMapStart()
			if yyl2859 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2859, d)
			}
		} else if yyct2859 == codecSelferValueTypeArray1234 {
			yyl2859 := r.ReadArrayStart()
			if yyl2859 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2859, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2860Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2860Slc
	var yyhl2860 bool = l >= 0
	for yyj2860 := 0; ; yyj2860++ {
		if yyhl2860 {
			if yyj2860 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2860Slc = r.DecodeBytes(yys2860Slc, true, true)
		yys2860 := string(yys2860Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2860 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2861 := &x.Addresses
				yym2862 := z.DecBinary()
				_ = yym2862
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2861), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2863 := &x.NotReadyAddresses
				yym2864 := z.DecBinary()
				_ = yym2864
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2863), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2865 := &x.Ports
				yym2866 := z.DecBinary()
				_ = yym2866
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2865), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2860)
		} // end switch yys2860
	} // end for yyj2860
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2867 int
	var yyb2867 bool
	var yyhl2867 bool = l >= 0
	yyj2867++
	if yyhl2867 {
		yyb2867 = yyj2867 > l
	} else {
		yyb2867 = r.CheckBreak()
	}
	if yyb2867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2868 := &x.Addresses
		yym2869 := z.DecBinary()
		_ = yym2869
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2868), d)
		}
	}
	yyj2867++
	if yyhl2867 {
		yyb2867 = yyj2867 > l
	} else {
		yyb2867 = r.CheckBreak()
	}
	if yyb2867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2870 := &x.NotReadyAddresses
		yym2871 := z.DecBinary()
		_ = yym2871
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2870), d)
		}
	}
	yyj2867++
	if yyhl2867 {
		yyb2867 = yyj2867 > l
	} else {
		yyb2867 = r.CheckBreak()
	}
	if yyb2867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2872 := &x.Ports
		yym2873 := z.DecBinary()
		_ = yym2873
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2872), d)
		}
	}
	for {
		yyj2867++
		if yyhl2867 {
			yyb2867 = yyj2867 > l
		} else {
			yyb2867 = r.CheckBreak()
		}
		if yyb2867 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2867-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2874 := z.EncBinary()
		_ = yym2874
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2875 := !z.EncBinary()
			yy2arr2875 := z.EncBasicHandle().StructToArray
			var yyq2875 [4]bool
			_, _, _ = yysep2875, yyq2875, yy2arr2875
			const yyr2875 bool = false
			yyq2875[1] = x.Hostname != ""
			yyq2875[2] = x.NodeName != nil
			yyq2875[3] = x.TargetRef != nil
			var yynn2875 int
			if yyr2875 || yy2arr2875 {
				r.EncodeArrayStart(4)
			} else {
				yynn2875 = 1
				for _, b := range yyq2875 {
					if b {
						yynn2875++
					}
				}
				r.EncodeMapStart(yynn2875)
				yynn2875 = 0
			}
			if yyr2875 || yy2arr2875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2877 := z.EncBinary()
				_ = yym2877
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2878 := z.EncBinary()
				_ = yym2878
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2875 || yy2arr2875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2875[1] {
					yym2880 := z.EncBinary()
					_ = yym2880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2875[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2881 := z.EncBinary()
					_ = yym2881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2875 || yy2arr2875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2875[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2883 := *x.NodeName
						yym2884 := z.EncBinary()
						_ = yym2884
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2883))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2875[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2885 := *x.NodeName
						yym2886 := z.EncBinary()
						_ = yym2886
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2885))
						}
					}
				}
			}
			if yyr2875 || yy2arr2875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2875[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2875[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2875 || yy2arr2875 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2888 := z.DecBinary()
	_ = yym2888
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2889 := r.ContainerType()
		if yyct2889 == codecSelferValueTypeMap1234 {
			yyl2889 := r.ReadMapStart()
			if yyl2889 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2889, d)
			}
		} else if yyct2889 == codecSelferValueTypeArray1234 {
			yyl2889 := r.ReadArrayStart()
			if yyl2889 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2889, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2890Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2890Slc
	var yyhl2890 bool = l >= 0
	for yyj2890 := 0; ; yyj2890++ {
		if yyhl2890 {
			if yyj2890 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2890Slc = r.DecodeBytes(yys2890Slc, true, true)
		yys2890 := string(yys2890Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2890 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2894 := z.DecBinary()
				_ = yym2894
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2890)
		} // end switch yys2890
	} // end for yyj2890
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2896 int
	var yyb2896 bool
	var yyhl2896 bool = l >= 0
	yyj2896++
	if yyhl2896 {
		yyb2896 = yyj2896 > l
	} else {
		yyb2896 = r.CheckBreak()
	}
	if yyb2896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2896++
	if yyhl2896 {
		yyb2896 = yyj2896 > l
	} else {
		yyb2896 = r.CheckBreak()
	}
	if yyb2896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2896++
	if yyhl2896 {
		yyb2896 = yyj2896 > l
	} else {
		yyb2896 = r.CheckBreak()
	}
	if yyb2896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2900 := z.DecBinary()
		_ = yym2900
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2896++
	if yyhl2896 {
		yyb2896 = yyj2896 > l
	} else {
		yyb2896 = r.CheckBreak()
	}
	if yyb2896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2896++
		if yyhl2896 {
			yyb2896 = yyj2896 > l
		} else {
			yyb2896 = r.CheckBreak()
		}
		if yyb2896 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2896-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2902 := z.EncBinary()
		_ = yym2902
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2903 := !z.EncBinary()
			yy2arr2903 := z.EncBasicHandle().StructToArray
			var yyq2903 [3]bool
			_, _, _ = yysep2903, yyq2903, yy2arr2903
			const yyr2903 bool = false
			yyq2903[0] = x.Name != ""
			yyq2903[2] = x.Protocol != ""
			var yynn2903 int
			if yyr2903 || yy2arr2903 {
				r.EncodeArrayStart(3)
			} else {
				yynn2903 = 1
				for _, b := range yyq2903 {
					if b {
						yynn2903++
					}
				}
				r.EncodeMapStart(yynn2903)
				yynn2903 = 0
			}
			if yyr2903 || yy2arr2903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2903[0] {
					yym2905 := z.EncBinary()
					_ = yym2905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2903[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2906 := z.EncBinary()
					_ = yym2906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2903 || yy2arr2903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2908 := z.EncBinary()
				_ = yym2908
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2909 := z.EncBinary()
				_ = yym2909
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2903 || yy2arr2903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2903[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2903[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2903 || yy2arr2903 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2911 := z.DecBinary()
	_ = yym2911
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2912 := r.ContainerType()
		if yyct2912 == codecSelferValueTypeMap1234 {
			yyl2912 := r.ReadMapStart()
			if yyl2912 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2912, d)
			}
		} else if yyct2912 == codecSelferValueTypeArray1234 {
			yyl2912 := r.ReadArrayStart()
			if yyl2912 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2912, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2913Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2913Slc
	var yyhl2913 bool = l >= 0
	for yyj2913 := 0; ; yyj2913++ {
		if yyhl2913 {
			if yyj2913 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2913Slc = r.DecodeBytes(yys2913Slc, true, true)
		yys2913 := string(yys2913Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2913 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2913)
		} // end switch yys2913
	} // end for yyj2913
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2917 int
	var yyb2917 bool
	var yyhl2917 bool = l >= 0
	yyj2917++
	if yyhl2917 {
		yyb2917 = yyj2917 > l
	} else {
		yyb2917 = r.CheckBreak()
	}
	if yyb2917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2917++
	if yyhl2917 {
		yyb2917 = yyj2917 > l
	} else {
		yyb2917 = r.CheckBreak()
	}
	if yyb2917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2917++
	if yyhl2917 {
		yyb2917 = yyj2917 > l
	} else {
		yyb2917 = r.CheckBreak()
	}
	if yyb2917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2917++
		if yyhl2917 {
			yyb2917 = yyj2917 > l
		} else {
			yyb2917 = r.CheckBreak()
		}
		if yyb2917 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2917-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2921 := z.EncBinary()
		_ = yym2921
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2922 := !z.EncBinary()
			yy2arr2922 := z.EncBasicHandle().StructToArray
			var yyq2922 [4]bool
			_, _, _ = yysep2922, yyq2922, yy2arr2922
			const yyr2922 bool = false
			yyq2922[0] = x.Kind != ""
			yyq2922[1] = x.APIVersion != ""
			yyq2922[2] = true
			var yynn2922 int
			if yyr2922 || yy2arr2922 {
				r.EncodeArrayStart(4)
			} else {
				yynn2922 = 1
				for _, b := range yyq2922 {
					if b {
						yynn2922++
					}
				}
				r.EncodeMapStart(yynn2922)
				yynn2922 = 0
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2922[0] {
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2922[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2925 := z.EncBinary()
					_ = yym2925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2922[1] {
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2922[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2928 := z.EncBinary()
					_ = yym2928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2922[2] {
					yy2930 := &x.ListMeta
					yym2931 := z.EncBinary()
					_ = yym2931
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2930) {
					} else {
						z.EncFallback(yy2930)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2922[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2932 := &x.ListMeta
					yym2933 := z.EncBinary()
					_ = yym2933
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2932) {
					} else {
						z.EncFallback(yy2932)
					}
				}
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2935 := z.EncBinary()
					_ = yym2935
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2936 := z.EncBinary()
					_ = yym2936
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2937 := z.DecBinary()
	_ = yym2937
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2938 := r.ContainerType()
		if yyct2938 == codecSelferValueTypeMap1234 {
			yyl2938 := r.ReadMapStart()
			if yyl2938 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2938, d)
			}
		} else if yyct2938 == codecSelferValueTypeArray1234 {
			yyl2938 := r.ReadArrayStart()
			if yyl2938 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2938, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2939Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2939Slc
	var yyhl2939 bool = l >= 0
	for yyj2939 := 0; ; yyj2939++ {
		if yyhl2939 {
			if yyj2939 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2939Slc = r.DecodeBytes(yys2939Slc, true, true)
		yys2939 := string(yys2939Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2939 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2942 := &x.ListMeta
				yym2943 := z.DecBinary()
				_ = yym2943
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2942) {
				} else {
					z.DecFallback(yyv2942, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2944 := &x.Items
				yym2945 := z.DecBinary()
				_ = yym2945
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2944), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2939)
		} // end switch yys2939
	} // end for yyj2939
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2946 int
	var yyb2946 bool
	var yyhl2946 bool = l >= 0
	yyj2946++
	if yyhl2946 {
		yyb2946 = yyj2946 > l
	} else {
		yyb2946 = r.CheckBreak()
	}
	if yyb2946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2946++
	if yyhl2946 {
		yyb2946 = yyj2946 > l
	} else {
		yyb2946 = r.CheckBreak()
	}
	if yyb2946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2946++
	if yyhl2946 {
		yyb2946 = yyj2946 > l
	} else {
		yyb2946 = r.CheckBreak()
	}
	if yyb2946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2949 := &x.ListMeta
		yym2950 := z.DecBinary()
		_ = yym2950
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2949) {
		} else {
			z.DecFallback(yyv2949, false)
		}
	}
	yyj2946++
	if yyhl2946 {
		yyb2946 = yyj2946 > l
	} else {
		yyb2946 = r.CheckBreak()
	}
	if yyb2946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2951 := &x.Items
		yym2952 := z.DecBinary()
		_ = yym2952
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2951), d)
		}
	}
	for {
		yyj2946++
		if yyhl2946 {
			yyb2946 = yyj2946 > l
		} else {
			yyb2946 = r.CheckBreak()
		}
		if yyb2946 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2946-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2953 := z.EncBinary()
		_ = yym2953
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2954 := !z.EncBinary()
			yy2arr2954 := z.EncBasicHandle().StructToArray
			var yyq2954 [4]bool
			_, _, _ = yysep2954, yyq2954, yy2arr2954
			const yyr2954 bool = false
			yyq2954[0] = x.PodCIDR != ""
			yyq2954[1] = x.ExternalID != ""
			yyq2954[2] = x.ProviderID != ""
			yyq2954[3] = x.Unschedulable != false
			var yynn2954 int
			if yyr2954 || yy2arr2954 {
				r.EncodeArrayStart(4)
			} else {
				yynn2954 = 0
				for _, b := range yyq2954 {
					if b {
						yynn2954++
					}
				}
				r.EncodeMapStart(yynn2954)
				yynn2954 = 0
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2954[0] {
					yym2956 := z.EncBinary()
					_ = yym2956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2954[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2957 := z.EncBinary()
					_ = yym2957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2954[1] {
					yym2959 := z.EncBinary()
					_ = yym2959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2954[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2960 := z.EncBinary()
					_ = yym2960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2954[2] {
					yym2962 := z.EncBinary()
					_ = yym2962
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2954[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2963 := z.EncBinary()
					_ = yym2963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2954[3] {
					yym2965 := z.EncBinary()
					_ = yym2965
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2954[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2966 := z.EncBinary()
					_ = yym2966
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2967 := z.DecBinary()
	_ = yym2967
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2968 := r.ContainerType()
		if yyct2968 == codecSelferValueTypeMap1234 {
			yyl2968 := r.ReadMapStart()
			if yyl2968 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2968, d)
			}
		} else if yyct2968 == codecSelferValueTypeArray1234 {
			yyl2968 := r.ReadArrayStart()
			if yyl2968 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2968, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2969Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2969Slc
	var yyhl2969 bool = l >= 0
	for yyj2969 := 0; ; yyj2969++ {
		if yyhl2969 {
			if yyj2969 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2969Slc = r.DecodeBytes(yys2969Slc, true, true)
		yys2969 := string(yys2969Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2969 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2969)
		} // end switch yys2969
	} // end for yyj2969
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2974 int
	var yyb2974 bool
	var yyhl2974 bool = l >= 0
	yyj2974++
	if yyhl2974 {
		yyb2974 = yyj2974 > l
	} else {
		yyb2974 = r.CheckBreak()
	}
	if yyb2974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2974++
	if yyhl2974 {
		yyb2974 = yyj2974 > l
	} else {
		yyb2974 = r.CheckBreak()
	}
	if yyb2974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2974++
	if yyhl2974 {
		yyb2974 = yyj2974 > l
	} else {
		yyb2974 = r.CheckBreak()
	}
	if yyb2974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2974++
	if yyhl2974 {
		yyb2974 = yyj2974 > l
	} else {
		yyb2974 = r.CheckBreak()
	}
	if yyb2974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2974++
		if yyhl2974 {
			yyb2974 = yyj2974 > l
		} else {
			yyb2974 = r.CheckBreak()
		}
		if yyb2974 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2974-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2979 := z.EncBinary()
		_ = yym2979
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2980 := !z.EncBinary()
			yy2arr2980 := z.EncBasicHandle().StructToArray
			var yyq2980 [1]bool
			_, _, _ = yysep2980, yyq2980, yy2arr2980
			const yyr2980 bool = false
			var yynn2980 int
			if yyr2980 || yy2arr2980 {
				r.EncodeArrayStart(1)
			} else {
				yynn2980 = 1
				for _, b := range yyq2980 {
					if b {
						yynn2980++
					}
				}
				r.EncodeMapStart(yynn2980)
				yynn2980 = 0
			}
			if yyr2980 || yy2arr2980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2982 := z.EncBinary()
				_ = yym2982
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2983 := z.EncBinary()
				_ = yym2983
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2980 || yy2arr2980 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2984 := z.DecBinary()
	_ = yym2984
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2985 := r.ContainerType()
		if yyct2985 == codecSelferValueTypeMap1234 {
			yyl2985 := r.ReadMapStart()
			if yyl2985 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2985, d)
			}
		} else if yyct2985 == codecSelferValueTypeArray1234 {
			yyl2985 := r.ReadArrayStart()
			if yyl2985 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2985, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2986Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2986Slc
	var yyhl2986 bool = l >= 0
	for yyj2986 := 0; ; yyj2986++ {
		if yyhl2986 {
			if yyj2986 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2986Slc = r.DecodeBytes(yys2986Slc, true, true)
		yys2986 := string(yys2986Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2986 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2986)
		} // end switch yys2986
	} // end for yyj2986
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2988 int
	var yyb2988 bool
	var yyhl2988 bool = l >= 0
	yyj2988++
	if yyhl2988 {
		yyb2988 = yyj2988 > l
	} else {
		yyb2988 = r.CheckBreak()
	}
	if yyb2988 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2988++
		if yyhl2988 {
			yyb2988 = yyj2988 > l
		} else {
			yyb2988 = r.CheckBreak()
		}
		if yyb2988 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2988-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2990 := z.EncBinary()
		_ = yym2990
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2991 := !z.EncBinary()
			yy2arr2991 := z.EncBasicHandle().StructToArray
			var yyq2991 [1]bool
			_, _, _ = yysep2991, yyq2991, yy2arr2991
			const yyr2991 bool = false
			yyq2991[0] = true
			var yynn2991 int
			if yyr2991 || yy2arr2991 {
				r.EncodeArrayStart(1)
			} else {
				yynn2991 = 0
				for _, b := range yyq2991 {
					if b {
						yynn2991++
					}
				}
				r.EncodeMapStart(yynn2991)
				yynn2991 = 0
			}
			if yyr2991 || yy2arr2991 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2991[0] {
					yy2993 := &x.KubeletEndpoint
					yy2993.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2991[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2994 := &x.KubeletEndpoint
					yy2994.CodecEncodeSelf(e)
				}
			}
			if yyr2991 || yy2arr2991 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2995 := z.DecBinary()
	_ = yym2995
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2996 := r.ContainerType()
		if yyct2996 == codecSelferValueTypeMap1234 {
			yyl2996 := r.ReadMapStart()
			if yyl2996 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2996, d)
			}
		} else if yyct2996 == codecSelferValueTypeArray1234 {
			yyl2996 := r.ReadArrayStart()
			if yyl2996 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2996, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2997Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2997Slc
	var yyhl2997 bool = l >= 0
	for yyj2997 := 0; ; yyj2997++ {
		if yyhl2997 {
			if yyj2997 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2997Slc = r.DecodeBytes(yys2997Slc, true, true)
		yys2997 := string(yys2997Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2997 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2998 := &x.KubeletEndpoint
				yyv2998.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2997)
		} // end switch yys2997
	} // end for yyj2997
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2999 int
	var yyb2999 bool
	var yyhl2999 bool = l >= 0
	yyj2999++
	if yyhl2999 {
		yyb2999 = yyj2999 > l
	} else {
		yyb2999 = r.CheckBreak()
	}
	if yyb2999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv3000 := &x.KubeletEndpoint
		yyv3000.CodecDecodeSelf(d)
	}
	for {
		yyj2999++
		if yyhl2999 {
			yyb2999 = yyj2999 > l
		} else {
			yyb2999 = r.CheckBreak()
		}
		if yyb2999 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2999-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3001 := z.EncBinary()
		_ = yym3001
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3002 := !z.EncBinary()
			yy2arr3002 := z.EncBasicHandle().StructToArray
			var yyq3002 [10]bool
			_, _, _ = yysep3002, yyq3002, yy2arr3002
			const yyr3002 bool = false
			var yynn3002 int
			if yyr3002 || yy2arr3002 {
				r.EncodeArrayStart(10)
			} else {
				yynn3002 = 10
				for _, b := range yyq3002 {
					if b {
						yynn3002++
					}
				}
				r.EncodeMapStart(yynn3002)
				yynn3002 = 0
			}
			if yyr3002 || yy2arr3002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3004 := z.EncBinary()
				_ = yym3004
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3005 := z.EncBinary()
				_ = yym3005
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr3002 || yy2arr3002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3007 := z.EncBinary()
				_ = yym3007
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3008 := z.EncBinary()
				_ = yym3008
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr3002 || yy2arr3002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3010 := z.EncBinary()
				_ = yym3010
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3011 := z.EncBinary()
				_ = yym3011
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr3002 || yy2arr3002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3013 := z.EncBinary()
				_ = yym3013
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3014 := z.EncBinary()
				_ = yym3014
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr3002 || yy2arr3002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3016 := z.EncBinary()
				_ = yym3016
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3017 := z.EncBinary()
				_ = yym3017
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr3002 || yy2arr3002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3019 := z.EncBinary()
				_ = yym3019
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3020 := z.EncBinary()
				_ = yym3020
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr3002 || yy2arr3002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3022 := z.EncBinary()
				_ = yym3022
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3023 := z.EncBinary()
				_ = yym3023
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr3002 || yy2arr3002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3025 := z.EncBinary()
				_ = yym3025
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3026 := z.EncBinary()
				_ = yym3026
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr3002 || yy2arr3002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3028 := z.EncBinary()
				_ = yym3028
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3029 := z.EncBinary()
				_ = yym3029
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr3002 || yy2arr3002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3031 := z.EncBinary()
				_ = yym3031
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3032 := z.EncBinary()
				_ = yym3032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr3002 || yy2arr3002 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3033 := z.DecBinary()
	_ = yym3033
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3034 := r.ContainerType()
		if yyct3034 == codecSelferValueTypeMap1234 {
			yyl3034 := r.ReadMapStart()
			if yyl3034 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3034, d)
			}
		} else if yyct3034 == codecSelferValueTypeArray1234 {
			yyl3034 := r.ReadArrayStart()
			if yyl3034 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3034, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3035Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3035Slc
	var yyhl3035 bool = l >= 0
	for yyj3035 := 0; ; yyj3035++ {
		if yyhl3035 {
			if yyj3035 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3035Slc = r.DecodeBytes(yys3035Slc, true, true)
		yys3035 := string(yys3035Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3035 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3035)
		} // end switch yys3035
	} // end for yyj3035
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3046 int
	var yyb3046 bool
	var yyhl3046 bool = l >= 0
	yyj3046++
	if yyhl3046 {
		yyb3046 = yyj3046 > l
	} else {
		yyb3046 = r.CheckBreak()
	}
	if yyb3046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj3046++
	if yyhl3046 {
		yyb3046 = yyj3046 > l
	} else {
		yyb3046 = r.CheckBreak()
	}
	if yyb3046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj3046++
	if yyhl3046 {
		yyb3046 = yyj3046 > l
	} else {
		yyb3046 = r.CheckBreak()
	}
	if yyb3046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj3046++
	if yyhl3046 {
		yyb3046 = yyj3046 > l
	} else {
		yyb3046 = r.CheckBreak()
	}
	if yyb3046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj3046++
	if yyhl3046 {
		yyb3046 = yyj3046 > l
	} else {
		yyb3046 = r.CheckBreak()
	}
	if yyb3046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj3046++
	if yyhl3046 {
		yyb3046 = yyj3046 > l
	} else {
		yyb3046 = r.CheckBreak()
	}
	if yyb3046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj3046++
	if yyhl3046 {
		yyb3046 = yyj3046 > l
	} else {
		yyb3046 = r.CheckBreak()
	}
	if yyb3046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj3046++
	if yyhl3046 {
		yyb3046 = yyj3046 > l
	} else {
		yyb3046 = r.CheckBreak()
	}
	if yyb3046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj3046++
	if yyhl3046 {
		yyb3046 = yyj3046 > l
	} else {
		yyb3046 = r.CheckBreak()
	}
	if yyb3046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj3046++
	if yyhl3046 {
		yyb3046 = yyj3046 > l
	} else {
		yyb3046 = r.CheckBreak()
	}
	if yyb3046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj3046++
		if yyhl3046 {
			yyb3046 = yyj3046 > l
		} else {
			yyb3046 = r.CheckBreak()
		}
		if yyb3046 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3046-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3057 := z.EncBinary()
		_ = yym3057
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3058 := !z.EncBinary()
			yy2arr3058 := z.EncBasicHandle().StructToArray
			var yyq3058 [10]bool
			_, _, _ = yysep3058, yyq3058, yy2arr3058
			const yyr3058 bool = false
			yyq3058[0] = len(x.Capacity) != 0
			yyq3058[1] = len(x.Allocatable) != 0
			yyq3058[2] = x.Phase != ""
			yyq3058[3] = len(x.Conditions) != 0
			yyq3058[4] = len(x.Addresses) != 0
			yyq3058[5] = true
			yyq3058[6] = true
			yyq3058[7] = len(x.Images) != 0
			yyq3058[8] = len(x.VolumesInUse) != 0
			yyq3058[9] = len(x.VolumesAttached) != 0
			var yynn3058 int
			if yyr3058 || yy2arr3058 {
				r.EncodeArrayStart(10)
			} else {
				yynn3058 = 0
				for _, b := range yyq3058 {
					if b {
						yynn3058++
					}
				}
				r.EncodeMapStart(yynn3058)
				yynn3058 = 0
			}
			if yyr3058 || yy2arr3058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3058[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3058 || yy2arr3058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3058[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3058 || yy2arr3058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3058[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3058[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3058 || yy2arr3058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3058[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3063 := z.EncBinary()
						_ = yym3063
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3064 := z.EncBinary()
						_ = yym3064
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3058 || yy2arr3058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3058[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3066 := z.EncBinary()
						_ = yym3066
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3067 := z.EncBinary()
						_ = yym3067
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3058 || yy2arr3058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3058[5] {
					yy3069 := &x.DaemonEndpoints
					yy3069.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3070 := &x.DaemonEndpoints
					yy3070.CodecEncodeSelf(e)
				}
			}
			if yyr3058 || yy2arr3058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3058[6] {
					yy3072 := &x.NodeInfo
					yy3072.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3073 := &x.NodeInfo
					yy3073.CodecEncodeSelf(e)
				}
			}
			if yyr3058 || yy2arr3058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3058[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3075 := z.EncBinary()
						_ = yym3075
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3076 := z.EncBinary()
						_ = yym3076
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3058 || yy2arr3058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3058[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3078 := z.EncBinary()
						_ = yym3078
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3079 := z.EncBinary()
						_ = yym3079
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3058 || yy2arr3058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3058[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3081 := z.EncBinary()
						_ = yym3081
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3082 := z.EncBinary()
						_ = yym3082
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3058 || yy2arr3058 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3083 := z.DecBinary()
	_ = yym3083
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3084 := r.ContainerType()
		if yyct3084 == codecSelferValueTypeMap1234 {
			yyl3084 := r.ReadMapStart()
			if yyl3084 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3084, d)
			}
		} else if yyct3084 == codecSelferValueTypeArray1234 {
			yyl3084 := r.ReadArrayStart()
			if yyl3084 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3084, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3085Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3085Slc
	var yyhl3085 bool = l >= 0
	for yyj3085 := 0; ; yyj3085++ {
		if yyhl3085 {
			if yyj3085 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3085Slc = r.DecodeBytes(yys3085Slc, true, true)
		yys3085 := string(yys3085Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3085 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3086 := &x.Capacity
				yyv3086.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3087 := &x.Allocatable
				yyv3087.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3089 := &x.Conditions
				yym3090 := z.DecBinary()
				_ = yym3090
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3089), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3091 := &x.Addresses
				yym3092 := z.DecBinary()
				_ = yym3092
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3091), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3093 := &x.DaemonEndpoints
				yyv3093.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3094 := &x.NodeInfo
				yyv3094.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3095 := &x.Images
				yym3096 := z.DecBinary()
				_ = yym3096
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3095), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3097 := &x.VolumesInUse
				yym3098 := z.DecBinary()
				_ = yym3098
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3097), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3099 := &x.VolumesAttached
				yym3100 := z.DecBinary()
				_ = yym3100
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3099), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3085)
		} // end switch yys3085
	} // end for yyj3085
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3101 int
	var yyb3101 bool
	var yyhl3101 bool = l >= 0
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3102 := &x.Capacity
		yyv3102.CodecDecodeSelf(d)
	}
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3103 := &x.Allocatable
		yyv3103.CodecDecodeSelf(d)
	}
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3105 := &x.Conditions
		yym3106 := z.DecBinary()
		_ = yym3106
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3105), d)
		}
	}
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3107 := &x.Addresses
		yym3108 := z.DecBinary()
		_ = yym3108
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3107), d)
		}
	}
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3109 := &x.DaemonEndpoints
		yyv3109.CodecDecodeSelf(d)
	}
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3110 := &x.NodeInfo
		yyv3110.CodecDecodeSelf(d)
	}
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3111 := &x.Images
		yym3112 := z.DecBinary()
		_ = yym3112
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3111), d)
		}
	}
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3113 := &x.VolumesInUse
		yym3114 := z.DecBinary()
		_ = yym3114
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3113), d)
		}
	}
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3115 := &x.VolumesAttached
		yym3116 := z.DecBinary()
		_ = yym3116
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3115), d)
		}
	}
	for {
		yyj3101++
		if yyhl3101 {
			yyb3101 = yyj3101 > l
		} else {
			yyb3101 = r.CheckBreak()
		}
		if yyb3101 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3101-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3117 := z.EncBinary()
	_ = yym3117
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3118 := z.DecBinary()
	_ = yym3118
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3119 := z.EncBinary()
		_ = yym3119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3120 := !z.EncBinary()
			yy2arr3120 := z.EncBasicHandle().StructToArray
			var yyq3120 [2]bool
			_, _, _ = yysep3120, yyq3120, yy2arr3120
			const yyr3120 bool = false
			var yynn3120 int
			if yyr3120 || yy2arr3120 {
				r.EncodeArrayStart(2)
			} else {
				yynn3120 = 2
				for _, b := range yyq3120 {
					if b {
						yynn3120++
					}
				}
				r.EncodeMapStart(yynn3120)
				yynn3120 = 0
			}
			if yyr3120 || yy2arr3120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3120 || yy2arr3120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3123 := z.EncBinary()
				_ = yym3123
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3124 := z.EncBinary()
				_ = yym3124
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3120 || yy2arr3120 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3125 := z.DecBinary()
	_ = yym3125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3126 := r.ContainerType()
		if yyct3126 == codecSelferValueTypeMap1234 {
			yyl3126 := r.ReadMapStart()
			if yyl3126 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3126, d)
			}
		} else if yyct3126 == codecSelferValueTypeArray1234 {
			yyl3126 := r.ReadArrayStart()
			if yyl3126 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3126, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3127Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3127Slc
	var yyhl3127 bool = l >= 0
	for yyj3127 := 0; ; yyj3127++ {
		if yyhl3127 {
			if yyj3127 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3127Slc = r.DecodeBytes(yys3127Slc, true, true)
		yys3127 := string(yys3127Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3127 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3127)
		} // end switch yys3127
	} // end for yyj3127
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3130 int
	var yyb3130 bool
	var yyhl3130 bool = l >= 0
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3130++
		if yyhl3130 {
			yyb3130 = yyj3130 > l
		} else {
			yyb3130 = r.CheckBreak()
		}
		if yyb3130 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3130-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3133 := z.EncBinary()
		_ = yym3133
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3134 := !z.EncBinary()
			yy2arr3134 := z.EncBasicHandle().StructToArray
			var yyq3134 [1]bool
			_, _, _ = yysep3134, yyq3134, yy2arr3134
			const yyr3134 bool = false
			yyq3134[0] = len(x.PreferAvoidPods) != 0
			var yynn3134 int
			if yyr3134 || yy2arr3134 {
				r.EncodeArrayStart(1)
			} else {
				yynn3134 = 0
				for _, b := range yyq3134 {
					if b {
						yynn3134++
					}
				}
				r.EncodeMapStart(yynn3134)
				yynn3134 = 0
			}
			if yyr3134 || yy2arr3134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3134[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3136 := z.EncBinary()
						_ = yym3136
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3134[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3137 := z.EncBinary()
						_ = yym3137
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3134 || yy2arr3134 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3138 := z.DecBinary()
	_ = yym3138
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3139 := r.ContainerType()
		if yyct3139 == codecSelferValueTypeMap1234 {
			yyl3139 := r.ReadMapStart()
			if yyl3139 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3139, d)
			}
		} else if yyct3139 == codecSelferValueTypeArray1234 {
			yyl3139 := r.ReadArrayStart()
			if yyl3139 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3139, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3140Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3140Slc
	var yyhl3140 bool = l >= 0
	for yyj3140 := 0; ; yyj3140++ {
		if yyhl3140 {
			if yyj3140 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3140Slc = r.DecodeBytes(yys3140Slc, true, true)
		yys3140 := string(yys3140Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3140 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3141 := &x.PreferAvoidPods
				yym3142 := z.DecBinary()
				_ = yym3142
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3141), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3140)
		} // end switch yys3140
	} // end for yyj3140
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3143 int
	var yyb3143 bool
	var yyhl3143 bool = l >= 0
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3144 := &x.PreferAvoidPods
		yym3145 := z.DecBinary()
		_ = yym3145
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3144), d)
		}
	}
	for {
		yyj3143++
		if yyhl3143 {
			yyb3143 = yyj3143 > l
		} else {
			yyb3143 = r.CheckBreak()
		}
		if yyb3143 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3143-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3146 := z.EncBinary()
		_ = yym3146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3147 := !z.EncBinary()
			yy2arr3147 := z.EncBasicHandle().StructToArray
			var yyq3147 [4]bool
			_, _, _ = yysep3147, yyq3147, yy2arr3147
			const yyr3147 bool = false
			yyq3147[1] = true
			yyq3147[2] = x.Reason != ""
			yyq3147[3] = x.Message != ""
			var yynn3147 int
			if yyr3147 || yy2arr3147 {
				r.EncodeArrayStart(4)
			} else {
				yynn3147 = 1
				for _, b := range yyq3147 {
					if b {
						yynn3147++
					}
				}
				r.EncodeMapStart(yynn3147)
				yynn3147 = 0
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3149 := &x.PodSignature
				yy3149.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3150 := &x.PodSignature
				yy3150.CodecEncodeSelf(e)
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3147[1] {
					yy3152 := &x.EvictionTime
					yym3153 := z.EncBinary()
					_ = yym3153
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3152) {
					} else if yym3153 {
						z.EncBinaryMarshal(yy3152)
					} else if !yym3153 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3152)
					} else {
						z.EncFallback(yy3152)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3147[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3154 := &x.EvictionTime
					yym3155 := z.EncBinary()
					_ = yym3155
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3154) {
					} else if yym3155 {
						z.EncBinaryMarshal(yy3154)
					} else if !yym3155 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3154)
					} else {
						z.EncFallback(yy3154)
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3147[2] {
					yym3157 := z.EncBinary()
					_ = yym3157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3147[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3158 := z.EncBinary()
					_ = yym3158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3147[3] {
					yym3160 := z.EncBinary()
					_ = yym3160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3147[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3161 := z.EncBinary()
					_ = yym3161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3162 := z.DecBinary()
	_ = yym3162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3163 := r.ContainerType()
		if yyct3163 == codecSelferValueTypeMap1234 {
			yyl3163 := r.ReadMapStart()
			if yyl3163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3163, d)
			}
		} else if yyct3163 == codecSelferValueTypeArray1234 {
			yyl3163 := r.ReadArrayStart()
			if yyl3163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3164Slc
	var yyhl3164 bool = l >= 0
	for yyj3164 := 0; ; yyj3164++ {
		if yyhl3164 {
			if yyj3164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3164Slc = r.DecodeBytes(yys3164Slc, true, true)
		yys3164 := string(yys3164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3164 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3165 := &x.PodSignature
				yyv3165.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3166 := &x.EvictionTime
				yym3167 := z.DecBinary()
				_ = yym3167
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3166) {
				} else if yym3167 {
					z.DecBinaryUnmarshal(yyv3166)
				} else if !yym3167 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3166)
				} else {
					z.DecFallback(yyv3166, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3164)
		} // end switch yys3164
	} // end for yyj3164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3170 int
	var yyb3170 bool
	var yyhl3170 bool = l >= 0
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3171 := &x.PodSignature
		yyv3171.CodecDecodeSelf(d)
	}
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3172 := &x.EvictionTime
		yym3173 := z.DecBinary()
		_ = yym3173
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3172) {
		} else if yym3173 {
			z.DecBinaryUnmarshal(yyv3172)
		} else if !yym3173 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3172)
		} else {
			z.DecFallback(yyv3172, false)
		}
	}
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3170++
		if yyhl3170 {
			yyb3170 = yyj3170 > l
		} else {
			yyb3170 = r.CheckBreak()
		}
		if yyb3170 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3170-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3176 := z.EncBinary()
		_ = yym3176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3177 := !z.EncBinary()
			yy2arr3177 := z.EncBasicHandle().StructToArray
			var yyq3177 [1]bool
			_, _, _ = yysep3177, yyq3177, yy2arr3177
			const yyr3177 bool = false
			yyq3177[0] = x.PodController != nil
			var yynn3177 int
			if yyr3177 || yy2arr3177 {
				r.EncodeArrayStart(1)
			} else {
				yynn3177 = 0
				for _, b := range yyq3177 {
					if b {
						yynn3177++
					}
				}
				r.EncodeMapStart(yynn3177)
				yynn3177 = 0
			}
			if yyr3177 || yy2arr3177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3177[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3177[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3177 || yy2arr3177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3179 := z.DecBinary()
	_ = yym3179
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3180 := r.ContainerType()
		if yyct3180 == codecSelferValueTypeMap1234 {
			yyl3180 := r.ReadMapStart()
			if yyl3180 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3180, d)
			}
		} else if yyct3180 == codecSelferValueTypeArray1234 {
			yyl3180 := r.ReadArrayStart()
			if yyl3180 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3180, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3181Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3181Slc
	var yyhl3181 bool = l >= 0
	for yyj3181 := 0; ; yyj3181++ {
		if yyhl3181 {
			if yyj3181 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3181Slc = r.DecodeBytes(yys3181Slc, true, true)
		yys3181 := string(yys3181Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3181 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3181)
		} // end switch yys3181
	} // end for yyj3181
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3183 int
	var yyb3183 bool
	var yyhl3183 bool = l >= 0
	yyj3183++
	if yyhl3183 {
		yyb3183 = yyj3183 > l
	} else {
		yyb3183 = r.CheckBreak()
	}
	if yyb3183 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3183++
		if yyhl3183 {
			yyb3183 = yyj3183 > l
		} else {
			yyb3183 = r.CheckBreak()
		}
		if yyb3183 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3183-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3185 := z.EncBinary()
		_ = yym3185
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3186 := !z.EncBinary()
			yy2arr3186 := z.EncBasicHandle().StructToArray
			var yyq3186 [2]bool
			_, _, _ = yysep3186, yyq3186, yy2arr3186
			const yyr3186 bool = false
			yyq3186[1] = x.SizeBytes != 0
			var yynn3186 int
			if yyr3186 || yy2arr3186 {
				r.EncodeArrayStart(2)
			} else {
				yynn3186 = 1
				for _, b := range yyq3186 {
					if b {
						yynn3186++
					}
				}
				r.EncodeMapStart(yynn3186)
				yynn3186 = 0
			}
			if yyr3186 || yy2arr3186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3189 := z.EncBinary()
					_ = yym3189
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3186 || yy2arr3186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3186[1] {
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3186[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3192 := z.EncBinary()
					_ = yym3192
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3186 || yy2arr3186 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3193 := z.DecBinary()
	_ = yym3193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3194 := r.ContainerType()
		if yyct3194 == codecSelferValueTypeMap1234 {
			yyl3194 := r.ReadMapStart()
			if yyl3194 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3194, d)
			}
		} else if yyct3194 == codecSelferValueTypeArray1234 {
			yyl3194 := r.ReadArrayStart()
			if yyl3194 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3195Slc
	var yyhl3195 bool = l >= 0
	for yyj3195 := 0; ; yyj3195++ {
		if yyhl3195 {
			if yyj3195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3195Slc = r.DecodeBytes(yys3195Slc, true, true)
		yys3195 := string(yys3195Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3195 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3196 := &x.Names
				yym3197 := z.DecBinary()
				_ = yym3197
				if false {
				} else {
					z.F.DecSliceStringX(yyv3196, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3195)
		} // end switch yys3195
	} // end for yyj3195
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3199 int
	var yyb3199 bool
	var yyhl3199 bool = l >= 0
	yyj3199++
	if yyhl3199 {
		yyb3199 = yyj3199 > l
	} else {
		yyb3199 = r.CheckBreak()
	}
	if yyb3199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3200 := &x.Names
		yym3201 := z.DecBinary()
		_ = yym3201
		if false {
		} else {
			z.F.DecSliceStringX(yyv3200, false, d)
		}
	}
	yyj3199++
	if yyhl3199 {
		yyb3199 = yyj3199 > l
	} else {
		yyb3199 = r.CheckBreak()
	}
	if yyb3199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3199++
		if yyhl3199 {
			yyb3199 = yyj3199 > l
		} else {
			yyb3199 = r.CheckBreak()
		}
		if yyb3199 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3199-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3203 := z.EncBinary()
	_ = yym3203
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3204 := z.DecBinary()
	_ = yym3204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3205 := z.EncBinary()
	_ = yym3205
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3206 := z.DecBinary()
	_ = yym3206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3207 := z.EncBinary()
		_ = yym3207
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3208 := !z.EncBinary()
			yy2arr3208 := z.EncBasicHandle().StructToArray
			var yyq3208 [6]bool
			_, _, _ = yysep3208, yyq3208, yy2arr3208
			const yyr3208 bool = false
			yyq3208[2] = true
			yyq3208[3] = true
			yyq3208[4] = x.Reason != ""
			yyq3208[5] = x.Message != ""
			var yynn3208 int
			if yyr3208 || yy2arr3208 {
				r.EncodeArrayStart(6)
			} else {
				yynn3208 = 2
				for _, b := range yyq3208 {
					if b {
						yynn3208++
					}
				}
				r.EncodeMapStart(yynn3208)
				yynn3208 = 0
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3208[2] {
					yy3212 := &x.LastHeartbeatTime
					yym3213 := z.EncBinary()
					_ = yym3213
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3212) {
					} else if yym3213 {
						z.EncBinaryMarshal(yy3212)
					} else if !yym3213 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3212)
					} else {
						z.EncFallback(yy3212)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3208[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3214 := &x.LastHeartbeatTime
					yym3215 := z.EncBinary()
					_ = yym3215
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3214) {
					} else if yym3215 {
						z.EncBinaryMarshal(yy3214)
					} else if !yym3215 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3214)
					} else {
						z.EncFallback(yy3214)
					}
				}
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3208[3] {
					yy3217 := &x.LastTransitionTime
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3217) {
					} else if yym3218 {
						z.EncBinaryMarshal(yy3217)
					} else if !yym3218 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3217)
					} else {
						z.EncFallback(yy3217)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3208[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3219 := &x.LastTransitionTime
					yym3220 := z.EncBinary()
					_ = yym3220
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3219) {
					} else if yym3220 {
						z.EncBinaryMarshal(yy3219)
					} else if !yym3220 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3219)
					} else {
						z.EncFallback(yy3219)
					}
				}
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3208[4] {
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3208[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3223 := z.EncBinary()
					_ = yym3223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3208[5] {
					yym3225 := z.EncBinary()
					_ = yym3225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3208[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3226 := z.EncBinary()
					_ = yym3226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3227 := z.DecBinary()
	_ = yym3227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3228 := r.ContainerType()
		if yyct3228 == codecSelferValueTypeMap1234 {
			yyl3228 := r.ReadMapStart()
			if yyl3228 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3228, d)
			}
		} else if yyct3228 == codecSelferValueTypeArray1234 {
			yyl3228 := r.ReadArrayStart()
			if yyl3228 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3228, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3229Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3229Slc
	var yyhl3229 bool = l >= 0
	for yyj3229 := 0; ; yyj3229++ {
		if yyhl3229 {
			if yyj3229 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3229Slc = r.DecodeBytes(yys3229Slc, true, true)
		yys3229 := string(yys3229Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3229 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3232 := &x.LastHeartbeatTime
				yym3233 := z.DecBinary()
				_ = yym3233
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3232) {
				} else if yym3233 {
					z.DecBinaryUnmarshal(yyv3232)
				} else if !yym3233 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3232)
				} else {
					z.DecFallback(yyv3232, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3234 := &x.LastTransitionTime
				yym3235 := z.DecBinary()
				_ = yym3235
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3234) {
				} else if yym3235 {
					z.DecBinaryUnmarshal(yyv3234)
				} else if !yym3235 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3234)
				} else {
					z.DecFallback(yyv3234, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3229)
		} // end switch yys3229
	} // end for yyj3229
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3238 int
	var yyb3238 bool
	var yyhl3238 bool = l >= 0
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3241 := &x.LastHeartbeatTime
		yym3242 := z.DecBinary()
		_ = yym3242
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3241) {
		} else if yym3242 {
			z.DecBinaryUnmarshal(yyv3241)
		} else if !yym3242 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3241)
		} else {
			z.DecFallback(yyv3241, false)
		}
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3243 := &x.LastTransitionTime
		yym3244 := z.DecBinary()
		_ = yym3244
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3243) {
		} else if yym3244 {
			z.DecBinaryUnmarshal(yyv3243)
		} else if !yym3244 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3243)
		} else {
			z.DecFallback(yyv3243, false)
		}
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3238++
		if yyhl3238 {
			yyb3238 = yyj3238 > l
		} else {
			yyb3238 = r.CheckBreak()
		}
		if yyb3238 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3238-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3247 := z.EncBinary()
	_ = yym3247
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3248 := z.DecBinary()
	_ = yym3248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3249 := z.EncBinary()
		_ = yym3249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3250 := !z.EncBinary()
			yy2arr3250 := z.EncBasicHandle().StructToArray
			var yyq3250 [2]bool
			_, _, _ = yysep3250, yyq3250, yy2arr3250
			const yyr3250 bool = false
			var yynn3250 int
			if yyr3250 || yy2arr3250 {
				r.EncodeArrayStart(2)
			} else {
				yynn3250 = 2
				for _, b := range yyq3250 {
					if b {
						yynn3250++
					}
				}
				r.EncodeMapStart(yynn3250)
				yynn3250 = 0
			}
			if yyr3250 || yy2arr3250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3250 || yy2arr3250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3253 := z.EncBinary()
				_ = yym3253
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3254 := z.EncBinary()
				_ = yym3254
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3250 || yy2arr3250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3255 := z.DecBinary()
	_ = yym3255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3256 := r.ContainerType()
		if yyct3256 == codecSelferValueTypeMap1234 {
			yyl3256 := r.ReadMapStart()
			if yyl3256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3256, d)
			}
		} else if yyct3256 == codecSelferValueTypeArray1234 {
			yyl3256 := r.ReadArrayStart()
			if yyl3256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3257Slc
	var yyhl3257 bool = l >= 0
	for yyj3257 := 0; ; yyj3257++ {
		if yyhl3257 {
			if yyj3257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3257Slc = r.DecodeBytes(yys3257Slc, true, true)
		yys3257 := string(yys3257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3257 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3257)
		} // end switch yys3257
	} // end for yyj3257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3260 int
	var yyb3260 bool
	var yyhl3260 bool = l >= 0
	yyj3260++
	if yyhl3260 {
		yyb3260 = yyj3260 > l
	} else {
		yyb3260 = r.CheckBreak()
	}
	if yyb3260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3260++
	if yyhl3260 {
		yyb3260 = yyj3260 > l
	} else {
		yyb3260 = r.CheckBreak()
	}
	if yyb3260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3260++
		if yyhl3260 {
			yyb3260 = yyj3260 > l
		} else {
			yyb3260 = r.CheckBreak()
		}
		if yyb3260 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3260-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3263 := z.EncBinary()
	_ = yym3263
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3264 := z.DecBinary()
	_ = yym3264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3265 := z.EncBinary()
		_ = yym3265
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3266 := z.DecBinary()
	_ = yym3266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3267 := z.EncBinary()
		_ = yym3267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3268 := !z.EncBinary()
			yy2arr3268 := z.EncBasicHandle().StructToArray
			var yyq3268 [5]bool
			_, _, _ = yysep3268, yyq3268, yy2arr3268
			const yyr3268 bool = false
			yyq3268[0] = x.Kind != ""
			yyq3268[1] = x.APIVersion != ""
			yyq3268[2] = true
			yyq3268[3] = true
			yyq3268[4] = true
			var yynn3268 int
			if yyr3268 || yy2arr3268 {
				r.EncodeArrayStart(5)
			} else {
				yynn3268 = 0
				for _, b := range yyq3268 {
					if b {
						yynn3268++
					}
				}
				r.EncodeMapStart(yynn3268)
				yynn3268 = 0
			}
			if yyr3268 || yy2arr3268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3268[0] {
					yym3270 := z.EncBinary()
					_ = yym3270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3268[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3271 := z.EncBinary()
					_ = yym3271
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3268 || yy2arr3268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3268[1] {
					yym3273 := z.EncBinary()
					_ = yym3273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3268[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3274 := z.EncBinary()
					_ = yym3274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3268 || yy2arr3268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3268[2] {
					yy3276 := &x.ObjectMeta
					yy3276.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3268[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3277 := &x.ObjectMeta
					yy3277.CodecEncodeSelf(e)
				}
			}
			if yyr3268 || yy2arr3268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3268[3] {
					yy3279 := &x.Spec
					yy3279.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3268[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3280 := &x.Spec
					yy3280.CodecEncodeSelf(e)
				}
			}
			if yyr3268 || yy2arr3268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3268[4] {
					yy3282 := &x.Status
					yy3282.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3268[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3283 := &x.Status
					yy3283.CodecEncodeSelf(e)
				}
			}
			if yyr3268 || yy2arr3268 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3284 := z.DecBinary()
	_ = yym3284
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3285 := r.ContainerType()
		if yyct3285 == codecSelferValueTypeMap1234 {
			yyl3285 := r.ReadMapStart()
			if yyl3285 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3285, d)
			}
		} else if yyct3285 == codecSelferValueTypeArray1234 {
			yyl3285 := r.ReadArrayStart()
			if yyl3285 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3285, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3286Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3286Slc
	var yyhl3286 bool = l >= 0
	for yyj3286 := 0; ; yyj3286++ {
		if yyhl3286 {
			if yyj3286 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3286Slc = r.DecodeBytes(yys3286Slc, true, true)
		yys3286 := string(yys3286Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3286 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3289 := &x.ObjectMeta
				yyv3289.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3290 := &x.Spec
				yyv3290.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3291 := &x.Status
				yyv3291.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3286)
		} // end switch yys3286
	} // end for yyj3286
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3292 int
	var yyb3292 bool
	var yyhl3292 bool = l >= 0
	yyj3292++
	if yyhl3292 {
		yyb3292 = yyj3292 > l
	} else {
		yyb3292 = r.CheckBreak()
	}
	if yyb3292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3292++
	if yyhl3292 {
		yyb3292 = yyj3292 > l
	} else {
		yyb3292 = r.CheckBreak()
	}
	if yyb3292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3292++
	if yyhl3292 {
		yyb3292 = yyj3292 > l
	} else {
		yyb3292 = r.CheckBreak()
	}
	if yyb3292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3295 := &x.ObjectMeta
		yyv3295.CodecDecodeSelf(d)
	}
	yyj3292++
	if yyhl3292 {
		yyb3292 = yyj3292 > l
	} else {
		yyb3292 = r.CheckBreak()
	}
	if yyb3292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3296 := &x.Spec
		yyv3296.CodecDecodeSelf(d)
	}
	yyj3292++
	if yyhl3292 {
		yyb3292 = yyj3292 > l
	} else {
		yyb3292 = r.CheckBreak()
	}
	if yyb3292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3297 := &x.Status
		yyv3297.CodecDecodeSelf(d)
	}
	for {
		yyj3292++
		if yyhl3292 {
			yyb3292 = yyj3292 > l
		} else {
			yyb3292 = r.CheckBreak()
		}
		if yyb3292 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3292-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3298 := z.EncBinary()
		_ = yym3298
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3299 := !z.EncBinary()
			yy2arr3299 := z.EncBasicHandle().StructToArray
			var yyq3299 [4]bool
			_, _, _ = yysep3299, yyq3299, yy2arr3299
			const yyr3299 bool = false
			yyq3299[0] = x.Kind != ""
			yyq3299[1] = x.APIVersion != ""
			yyq3299[2] = true
			var yynn3299 int
			if yyr3299 || yy2arr3299 {
				r.EncodeArrayStart(4)
			} else {
				yynn3299 = 1
				for _, b := range yyq3299 {
					if b {
						yynn3299++
					}
				}
				r.EncodeMapStart(yynn3299)
				yynn3299 = 0
			}
			if yyr3299 || yy2arr3299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3299[0] {
					yym3301 := z.EncBinary()
					_ = yym3301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3299[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3302 := z.EncBinary()
					_ = yym3302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3299 || yy2arr3299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3299[1] {
					yym3304 := z.EncBinary()
					_ = yym3304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3299[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3305 := z.EncBinary()
					_ = yym3305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3299 || yy2arr3299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3299[2] {
					yy3307 := &x.ListMeta
					yym3308 := z.EncBinary()
					_ = yym3308
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3307) {
					} else {
						z.EncFallback(yy3307)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3299[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3309 := &x.ListMeta
					yym3310 := z.EncBinary()
					_ = yym3310
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3309) {
					} else {
						z.EncFallback(yy3309)
					}
				}
			}
			if yyr3299 || yy2arr3299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3312 := z.EncBinary()
					_ = yym3312
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3313 := z.EncBinary()
					_ = yym3313
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3299 || yy2arr3299 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3314 := z.DecBinary()
	_ = yym3314
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3315 := r.ContainerType()
		if yyct3315 == codecSelferValueTypeMap1234 {
			yyl3315 := r.ReadMapStart()
			if yyl3315 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3315, d)
			}
		} else if yyct3315 == codecSelferValueTypeArray1234 {
			yyl3315 := r.ReadArrayStart()
			if yyl3315 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3315, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3316Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3316Slc
	var yyhl3316 bool = l >= 0
	for yyj3316 := 0; ; yyj3316++ {
		if yyhl3316 {
			if yyj3316 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3316Slc = r.DecodeBytes(yys3316Slc, true, true)
		yys3316 := string(yys3316Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3316 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3319 := &x.ListMeta
				yym3320 := z.DecBinary()
				_ = yym3320
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3319) {
				} else {
					z.DecFallback(yyv3319, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3321 := &x.Items
				yym3322 := z.DecBinary()
				_ = yym3322
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3321), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3316)
		} // end switch yys3316
	} // end for yyj3316
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3323 int
	var yyb3323 bool
	var yyhl3323 bool = l >= 0
	yyj3323++
	if yyhl3323 {
		yyb3323 = yyj3323 > l
	} else {
		yyb3323 = r.CheckBreak()
	}
	if yyb3323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3323++
	if yyhl3323 {
		yyb3323 = yyj3323 > l
	} else {
		yyb3323 = r.CheckBreak()
	}
	if yyb3323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3323++
	if yyhl3323 {
		yyb3323 = yyj3323 > l
	} else {
		yyb3323 = r.CheckBreak()
	}
	if yyb3323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3326 := &x.ListMeta
		yym3327 := z.DecBinary()
		_ = yym3327
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3326) {
		} else {
			z.DecFallback(yyv3326, false)
		}
	}
	yyj3323++
	if yyhl3323 {
		yyb3323 = yyj3323 > l
	} else {
		yyb3323 = r.CheckBreak()
	}
	if yyb3323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3328 := &x.Items
		yym3329 := z.DecBinary()
		_ = yym3329
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3328), d)
		}
	}
	for {
		yyj3323++
		if yyhl3323 {
			yyb3323 = yyj3323 > l
		} else {
			yyb3323 = r.CheckBreak()
		}
		if yyb3323 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3323-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3330 := z.EncBinary()
	_ = yym3330
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3331 := z.DecBinary()
	_ = yym3331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3332 := z.EncBinary()
		_ = yym3332
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3333 := !z.EncBinary()
			yy2arr3333 := z.EncBasicHandle().StructToArray
			var yyq3333 [1]bool
			_, _, _ = yysep3333, yyq3333, yy2arr3333
			const yyr3333 bool = false
			yyq3333[0] = len(x.Finalizers) != 0
			var yynn3333 int
			if yyr3333 || yy2arr3333 {
				r.EncodeArrayStart(1)
			} else {
				yynn3333 = 0
				for _, b := range yyq3333 {
					if b {
						yynn3333++
					}
				}
				r.EncodeMapStart(yynn3333)
				yynn3333 = 0
			}
			if yyr3333 || yy2arr3333 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3333[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3335 := z.EncBinary()
						_ = yym3335
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3333[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3336 := z.EncBinary()
						_ = yym3336
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3333 || yy2arr3333 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3337 := z.DecBinary()
	_ = yym3337
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3338 := r.ContainerType()
		if yyct3338 == codecSelferValueTypeMap1234 {
			yyl3338 := r.ReadMapStart()
			if yyl3338 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3338, d)
			}
		} else if yyct3338 == codecSelferValueTypeArray1234 {
			yyl3338 := r.ReadArrayStart()
			if yyl3338 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3338, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3339Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3339Slc
	var yyhl3339 bool = l >= 0
	for yyj3339 := 0; ; yyj3339++ {
		if yyhl3339 {
			if yyj3339 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3339Slc = r.DecodeBytes(yys3339Slc, true, true)
		yys3339 := string(yys3339Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3339 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3340 := &x.Finalizers
				yym3341 := z.DecBinary()
				_ = yym3341
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3340), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3339)
		} // end switch yys3339
	} // end for yyj3339
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3342 int
	var yyb3342 bool
	var yyhl3342 bool = l >= 0
	yyj3342++
	if yyhl3342 {
		yyb3342 = yyj3342 > l
	} else {
		yyb3342 = r.CheckBreak()
	}
	if yyb3342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3343 := &x.Finalizers
		yym3344 := z.DecBinary()
		_ = yym3344
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3343), d)
		}
	}
	for {
		yyj3342++
		if yyhl3342 {
			yyb3342 = yyj3342 > l
		} else {
			yyb3342 = r.CheckBreak()
		}
		if yyb3342 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3342-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3345 := z.EncBinary()
		_ = yym3345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3346 := !z.EncBinary()
			yy2arr3346 := z.EncBasicHandle().StructToArray
			var yyq3346 [1]bool
			_, _, _ = yysep3346, yyq3346, yy2arr3346
			const yyr3346 bool = false
			yyq3346[0] = x.Phase != ""
			var yynn3346 int
			if yyr3346 || yy2arr3346 {
				r.EncodeArrayStart(1)
			} else {
				yynn3346 = 0
				for _, b := range yyq3346 {
					if b {
						yynn3346++
					}
				}
				r.EncodeMapStart(yynn3346)
				yynn3346 = 0
			}
			if yyr3346 || yy2arr3346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3346[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3346[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3346 || yy2arr3346 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3348 := z.DecBinary()
	_ = yym3348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3349 := r.ContainerType()
		if yyct3349 == codecSelferValueTypeMap1234 {
			yyl3349 := r.ReadMapStart()
			if yyl3349 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3349, d)
			}
		} else if yyct3349 == codecSelferValueTypeArray1234 {
			yyl3349 := r.ReadArrayStart()
			if yyl3349 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3349, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3350Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3350Slc
	var yyhl3350 bool = l >= 0
	for yyj3350 := 0; ; yyj3350++ {
		if yyhl3350 {
			if yyj3350 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3350Slc = r.DecodeBytes(yys3350Slc, true, true)
		yys3350 := string(yys3350Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3350 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3350)
		} // end switch yys3350
	} // end for yyj3350
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3352 int
	var yyb3352 bool
	var yyhl3352 bool = l >= 0
	yyj3352++
	if yyhl3352 {
		yyb3352 = yyj3352 > l
	} else {
		yyb3352 = r.CheckBreak()
	}
	if yyb3352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3352++
		if yyhl3352 {
			yyb3352 = yyj3352 > l
		} else {
			yyb3352 = r.CheckBreak()
		}
		if yyb3352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3354 := z.EncBinary()
	_ = yym3354
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3355 := z.DecBinary()
	_ = yym3355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3356 := z.EncBinary()
		_ = yym3356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3357 := !z.EncBinary()
			yy2arr3357 := z.EncBasicHandle().StructToArray
			var yyq3357 [5]bool
			_, _, _ = yysep3357, yyq3357, yy2arr3357
			const yyr3357 bool = false
			yyq3357[0] = x.Kind != ""
			yyq3357[1] = x.APIVersion != ""
			yyq3357[2] = true
			yyq3357[3] = true
			yyq3357[4] = true
			var yynn3357 int
			if yyr3357 || yy2arr3357 {
				r.EncodeArrayStart(5)
			} else {
				yynn3357 = 0
				for _, b := range yyq3357 {
					if b {
						yynn3357++
					}
				}
				r.EncodeMapStart(yynn3357)
				yynn3357 = 0
			}
			if yyr3357 || yy2arr3357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3357[0] {
					yym3359 := z.EncBinary()
					_ = yym3359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3357[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3360 := z.EncBinary()
					_ = yym3360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3357 || yy2arr3357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3357[1] {
					yym3362 := z.EncBinary()
					_ = yym3362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3357[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3363 := z.EncBinary()
					_ = yym3363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3357 || yy2arr3357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3357[2] {
					yy3365 := &x.ObjectMeta
					yy3365.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3357[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3366 := &x.ObjectMeta
					yy3366.CodecEncodeSelf(e)
				}
			}
			if yyr3357 || yy2arr3357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3357[3] {
					yy3368 := &x.Spec
					yy3368.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3357[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3369 := &x.Spec
					yy3369.CodecEncodeSelf(e)
				}
			}
			if yyr3357 || yy2arr3357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3357[4] {
					yy3371 := &x.Status
					yy3371.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3357[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3372 := &x.Status
					yy3372.CodecEncodeSelf(e)
				}
			}
			if yyr3357 || yy2arr3357 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3373 := z.DecBinary()
	_ = yym3373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3374 := r.ContainerType()
		if yyct3374 == codecSelferValueTypeMap1234 {
			yyl3374 := r.ReadMapStart()
			if yyl3374 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3374, d)
			}
		} else if yyct3374 == codecSelferValueTypeArray1234 {
			yyl3374 := r.ReadArrayStart()
			if yyl3374 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3375Slc
	var yyhl3375 bool = l >= 0
	for yyj3375 := 0; ; yyj3375++ {
		if yyhl3375 {
			if yyj3375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3375Slc = r.DecodeBytes(yys3375Slc, true, true)
		yys3375 := string(yys3375Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3375 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3378 := &x.ObjectMeta
				yyv3378.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3379 := &x.Spec
				yyv3379.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3380 := &x.Status
				yyv3380.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3375)
		} // end switch yys3375
	} // end for yyj3375
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3381 int
	var yyb3381 bool
	var yyhl3381 bool = l >= 0
	yyj3381++
	if yyhl3381 {
		yyb3381 = yyj3381 > l
	} else {
		yyb3381 = r.CheckBreak()
	}
	if yyb3381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3381++
	if yyhl3381 {
		yyb3381 = yyj3381 > l
	} else {
		yyb3381 = r.CheckBreak()
	}
	if yyb3381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3381++
	if yyhl3381 {
		yyb3381 = yyj3381 > l
	} else {
		yyb3381 = r.CheckBreak()
	}
	if yyb3381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3384 := &x.ObjectMeta
		yyv3384.CodecDecodeSelf(d)
	}
	yyj3381++
	if yyhl3381 {
		yyb3381 = yyj3381 > l
	} else {
		yyb3381 = r.CheckBreak()
	}
	if yyb3381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3385 := &x.Spec
		yyv3385.CodecDecodeSelf(d)
	}
	yyj3381++
	if yyhl3381 {
		yyb3381 = yyj3381 > l
	} else {
		yyb3381 = r.CheckBreak()
	}
	if yyb3381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3386 := &x.Status
		yyv3386.CodecDecodeSelf(d)
	}
	for {
		yyj3381++
		if yyhl3381 {
			yyb3381 = yyj3381 > l
		} else {
			yyb3381 = r.CheckBreak()
		}
		if yyb3381 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3381-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3387 := z.EncBinary()
		_ = yym3387
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3388 := !z.EncBinary()
			yy2arr3388 := z.EncBasicHandle().StructToArray
			var yyq3388 [4]bool
			_, _, _ = yysep3388, yyq3388, yy2arr3388
			const yyr3388 bool = false
			yyq3388[0] = x.Kind != ""
			yyq3388[1] = x.APIVersion != ""
			yyq3388[2] = true
			var yynn3388 int
			if yyr3388 || yy2arr3388 {
				r.EncodeArrayStart(4)
			} else {
				yynn3388 = 1
				for _, b := range yyq3388 {
					if b {
						yynn3388++
					}
				}
				r.EncodeMapStart(yynn3388)
				yynn3388 = 0
			}
			if yyr3388 || yy2arr3388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3388[0] {
					yym3390 := z.EncBinary()
					_ = yym3390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3388[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3391 := z.EncBinary()
					_ = yym3391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3388[1] {
					yym3393 := z.EncBinary()
					_ = yym3393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3388[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3394 := z.EncBinary()
					_ = yym3394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3388[2] {
					yy3396 := &x.ListMeta
					yym3397 := z.EncBinary()
					_ = yym3397
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3396) {
					} else {
						z.EncFallback(yy3396)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3388[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3398 := &x.ListMeta
					yym3399 := z.EncBinary()
					_ = yym3399
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3398) {
					} else {
						z.EncFallback(yy3398)
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3401 := z.EncBinary()
					_ = yym3401
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3402 := z.EncBinary()
					_ = yym3402
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3403 := z.DecBinary()
	_ = yym3403
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3404 := r.ContainerType()
		if yyct3404 == codecSelferValueTypeMap1234 {
			yyl3404 := r.ReadMapStart()
			if yyl3404 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3404, d)
			}
		} else if yyct3404 == codecSelferValueTypeArray1234 {
			yyl3404 := r.ReadArrayStart()
			if yyl3404 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3404, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3405Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3405Slc
	var yyhl3405 bool = l >= 0
	for yyj3405 := 0; ; yyj3405++ {
		if yyhl3405 {
			if yyj3405 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3405Slc = r.DecodeBytes(yys3405Slc, true, true)
		yys3405 := string(yys3405Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3405 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3408 := &x.ListMeta
				yym3409 := z.DecBinary()
				_ = yym3409
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3408) {
				} else {
					z.DecFallback(yyv3408, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3410 := &x.Items
				yym3411 := z.DecBinary()
				_ = yym3411
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3410), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3405)
		} // end switch yys3405
	} // end for yyj3405
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3412 int
	var yyb3412 bool
	var yyhl3412 bool = l >= 0
	yyj3412++
	if yyhl3412 {
		yyb3412 = yyj3412 > l
	} else {
		yyb3412 = r.CheckBreak()
	}
	if yyb3412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3412++
	if yyhl3412 {
		yyb3412 = yyj3412 > l
	} else {
		yyb3412 = r.CheckBreak()
	}
	if yyb3412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3412++
	if yyhl3412 {
		yyb3412 = yyj3412 > l
	} else {
		yyb3412 = r.CheckBreak()
	}
	if yyb3412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3415 := &x.ListMeta
		yym3416 := z.DecBinary()
		_ = yym3416
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3415) {
		} else {
			z.DecFallback(yyv3415, false)
		}
	}
	yyj3412++
	if yyhl3412 {
		yyb3412 = yyj3412 > l
	} else {
		yyb3412 = r.CheckBreak()
	}
	if yyb3412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3417 := &x.Items
		yym3418 := z.DecBinary()
		_ = yym3418
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3417), d)
		}
	}
	for {
		yyj3412++
		if yyhl3412 {
			yyb3412 = yyj3412 > l
		} else {
			yyb3412 = r.CheckBreak()
		}
		if yyb3412 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3412-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3419 := z.EncBinary()
		_ = yym3419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3420 := !z.EncBinary()
			yy2arr3420 := z.EncBasicHandle().StructToArray
			var yyq3420 [4]bool
			_, _, _ = yysep3420, yyq3420, yy2arr3420
			const yyr3420 bool = false
			yyq3420[0] = x.Kind != ""
			yyq3420[1] = x.APIVersion != ""
			yyq3420[2] = true
			var yynn3420 int
			if yyr3420 || yy2arr3420 {
				r.EncodeArrayStart(4)
			} else {
				yynn3420 = 1
				for _, b := range yyq3420 {
					if b {
						yynn3420++
					}
				}
				r.EncodeMapStart(yynn3420)
				yynn3420 = 0
			}
			if yyr3420 || yy2arr3420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3420[0] {
					yym3422 := z.EncBinary()
					_ = yym3422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3423 := z.EncBinary()
					_ = yym3423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3420 || yy2arr3420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3420[1] {
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3420[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3426 := z.EncBinary()
					_ = yym3426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3420 || yy2arr3420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3420[2] {
					yy3428 := &x.ObjectMeta
					yy3428.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3420[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3429 := &x.ObjectMeta
					yy3429.CodecEncodeSelf(e)
				}
			}
			if yyr3420 || yy2arr3420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3431 := &x.Target
				yy3431.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3432 := &x.Target
				yy3432.CodecEncodeSelf(e)
			}
			if yyr3420 || yy2arr3420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3433 := z.DecBinary()
	_ = yym3433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3434 := r.ContainerType()
		if yyct3434 == codecSelferValueTypeMap1234 {
			yyl3434 := r.ReadMapStart()
			if yyl3434 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3434, d)
			}
		} else if yyct3434 == codecSelferValueTypeArray1234 {
			yyl3434 := r.ReadArrayStart()
			if yyl3434 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3434, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3435Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3435Slc
	var yyhl3435 bool = l >= 0
	for yyj3435 := 0; ; yyj3435++ {
		if yyhl3435 {
			if yyj3435 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3435Slc = r.DecodeBytes(yys3435Slc, true, true)
		yys3435 := string(yys3435Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3435 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3438 := &x.ObjectMeta
				yyv3438.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3439 := &x.Target
				yyv3439.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3435)
		} // end switch yys3435
	} // end for yyj3435
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3440 int
	var yyb3440 bool
	var yyhl3440 bool = l >= 0
	yyj3440++
	if yyhl3440 {
		yyb3440 = yyj3440 > l
	} else {
		yyb3440 = r.CheckBreak()
	}
	if yyb3440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3440++
	if yyhl3440 {
		yyb3440 = yyj3440 > l
	} else {
		yyb3440 = r.CheckBreak()
	}
	if yyb3440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3440++
	if yyhl3440 {
		yyb3440 = yyj3440 > l
	} else {
		yyb3440 = r.CheckBreak()
	}
	if yyb3440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3443 := &x.ObjectMeta
		yyv3443.CodecDecodeSelf(d)
	}
	yyj3440++
	if yyhl3440 {
		yyb3440 = yyj3440 > l
	} else {
		yyb3440 = r.CheckBreak()
	}
	if yyb3440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3444 := &x.Target
		yyv3444.CodecDecodeSelf(d)
	}
	for {
		yyj3440++
		if yyhl3440 {
			yyb3440 = yyj3440 > l
		} else {
			yyb3440 = r.CheckBreak()
		}
		if yyb3440 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3440-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3445 := z.EncBinary()
		_ = yym3445
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3446 := !z.EncBinary()
			yy2arr3446 := z.EncBasicHandle().StructToArray
			var yyq3446 [1]bool
			_, _, _ = yysep3446, yyq3446, yy2arr3446
			const yyr3446 bool = false
			yyq3446[0] = x.UID != nil
			var yynn3446 int
			if yyr3446 || yy2arr3446 {
				r.EncodeArrayStart(1)
			} else {
				yynn3446 = 0
				for _, b := range yyq3446 {
					if b {
						yynn3446++
					}
				}
				r.EncodeMapStart(yynn3446)
				yynn3446 = 0
			}
			if yyr3446 || yy2arr3446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3446[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3448 := *x.UID
						yym3449 := z.EncBinary()
						_ = yym3449
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3448) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3448))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3446[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3450 := *x.UID
						yym3451 := z.EncBinary()
						_ = yym3451
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3450) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3450))
						}
					}
				}
			}
			if yyr3446 || yy2arr3446 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3452 := z.DecBinary()
	_ = yym3452
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3453 := r.ContainerType()
		if yyct3453 == codecSelferValueTypeMap1234 {
			yyl3453 := r.ReadMapStart()
			if yyl3453 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3453, d)
			}
		} else if yyct3453 == codecSelferValueTypeArray1234 {
			yyl3453 := r.ReadArrayStart()
			if yyl3453 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3453, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3454Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3454Slc
	var yyhl3454 bool = l >= 0
	for yyj3454 := 0; ; yyj3454++ {
		if yyhl3454 {
			if yyj3454 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3454Slc = r.DecodeBytes(yys3454Slc, true, true)
		yys3454 := string(yys3454Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3454 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3456 := z.DecBinary()
				_ = yym3456
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3454)
		} // end switch yys3454
	} // end for yyj3454
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3457 int
	var yyb3457 bool
	var yyhl3457 bool = l >= 0
	yyj3457++
	if yyhl3457 {
		yyb3457 = yyj3457 > l
	} else {
		yyb3457 = r.CheckBreak()
	}
	if yyb3457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3459 := z.DecBinary()
		_ = yym3459
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3457++
		if yyhl3457 {
			yyb3457 = yyj3457 > l
		} else {
			yyb3457 = r.CheckBreak()
		}
		if yyb3457 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3457-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3460 := z.EncBinary()
		_ = yym3460
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3461 := !z.EncBinary()
			yy2arr3461 := z.EncBasicHandle().StructToArray
			var yyq3461 [5]bool
			_, _, _ = yysep3461, yyq3461, yy2arr3461
			const yyr3461 bool = false
			yyq3461[0] = x.Kind != ""
			yyq3461[1] = x.APIVersion != ""
			yyq3461[2] = x.GracePeriodSeconds != nil
			yyq3461[3] = x.Preconditions != nil
			yyq3461[4] = x.OrphanDependents != nil
			var yynn3461 int
			if yyr3461 || yy2arr3461 {
				r.EncodeArrayStart(5)
			} else {
				yynn3461 = 0
				for _, b := range yyq3461 {
					if b {
						yynn3461++
					}
				}
				r.EncodeMapStart(yynn3461)
				yynn3461 = 0
			}
			if yyr3461 || yy2arr3461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3461[0] {
					yym3463 := z.EncBinary()
					_ = yym3463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3461[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3464 := z.EncBinary()
					_ = yym3464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3461 || yy2arr3461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3461[1] {
					yym3466 := z.EncBinary()
					_ = yym3466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3461[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3467 := z.EncBinary()
					_ = yym3467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3461 || yy2arr3461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3461[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3469 := *x.GracePeriodSeconds
						yym3470 := z.EncBinary()
						_ = yym3470
						if false {
						} else {
							r.EncodeInt(int64(yy3469))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3461[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3471 := *x.GracePeriodSeconds
						yym3472 := z.EncBinary()
						_ = yym3472
						if false {
						} else {
							r.EncodeInt(int64(yy3471))
						}
					}
				}
			}
			if yyr3461 || yy2arr3461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3461[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3461[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3461 || yy2arr3461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3461[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3475 := *x.OrphanDependents
						yym3476 := z.EncBinary()
						_ = yym3476
						if false {
						} else {
							r.EncodeBool(bool(yy3475))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3461[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3477 := *x.OrphanDependents
						yym3478 := z.EncBinary()
						_ = yym3478
						if false {
						} else {
							r.EncodeBool(bool(yy3477))
						}
					}
				}
			}
			if yyr3461 || yy2arr3461 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3479 := z.DecBinary()
	_ = yym3479
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3480 := r.ContainerType()
		if yyct3480 == codecSelferValueTypeMap1234 {
			yyl3480 := r.ReadMapStart()
			if yyl3480 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3480, d)
			}
		} else if yyct3480 == codecSelferValueTypeArray1234 {
			yyl3480 := r.ReadArrayStart()
			if yyl3480 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3480, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3481Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3481Slc
	var yyhl3481 bool = l >= 0
	for yyj3481 := 0; ; yyj3481++ {
		if yyhl3481 {
			if yyj3481 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3481Slc = r.DecodeBytes(yys3481Slc, true, true)
		yys3481 := string(yys3481Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3481 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3485 := z.DecBinary()
				_ = yym3485
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3488 := z.DecBinary()
				_ = yym3488
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3481)
		} // end switch yys3481
	} // end for yyj3481
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3489 int
	var yyb3489 bool
	var yyhl3489 bool = l >= 0
	yyj3489++
	if yyhl3489 {
		yyb3489 = yyj3489 > l
	} else {
		yyb3489 = r.CheckBreak()
	}
	if yyb3489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3489++
	if yyhl3489 {
		yyb3489 = yyj3489 > l
	} else {
		yyb3489 = r.CheckBreak()
	}
	if yyb3489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3489++
	if yyhl3489 {
		yyb3489 = yyj3489 > l
	} else {
		yyb3489 = r.CheckBreak()
	}
	if yyb3489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3493 := z.DecBinary()
		_ = yym3493
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3489++
	if yyhl3489 {
		yyb3489 = yyj3489 > l
	} else {
		yyb3489 = r.CheckBreak()
	}
	if yyb3489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3489++
	if yyhl3489 {
		yyb3489 = yyj3489 > l
	} else {
		yyb3489 = r.CheckBreak()
	}
	if yyb3489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3496 := z.DecBinary()
		_ = yym3496
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3489++
		if yyhl3489 {
			yyb3489 = yyj3489 > l
		} else {
			yyb3489 = r.CheckBreak()
		}
		if yyb3489 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3489-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3497 := z.EncBinary()
		_ = yym3497
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3498 := !z.EncBinary()
			yy2arr3498 := z.EncBasicHandle().StructToArray
			var yyq3498 [4]bool
			_, _, _ = yysep3498, yyq3498, yy2arr3498
			const yyr3498 bool = false
			yyq3498[0] = x.Kind != ""
			yyq3498[1] = x.APIVersion != ""
			var yynn3498 int
			if yyr3498 || yy2arr3498 {
				r.EncodeArrayStart(4)
			} else {
				yynn3498 = 2
				for _, b := range yyq3498 {
					if b {
						yynn3498++
					}
				}
				r.EncodeMapStart(yynn3498)
				yynn3498 = 0
			}
			if yyr3498 || yy2arr3498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3498[0] {
					yym3500 := z.EncBinary()
					_ = yym3500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3498[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3501 := z.EncBinary()
					_ = yym3501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3498 || yy2arr3498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3498[1] {
					yym3503 := z.EncBinary()
					_ = yym3503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3498[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3504 := z.EncBinary()
					_ = yym3504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3498 || yy2arr3498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3506 := z.EncBinary()
				_ = yym3506
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3507 := z.EncBinary()
				_ = yym3507
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3498 || yy2arr3498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3509 := z.EncBinary()
				_ = yym3509
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3510 := z.EncBinary()
				_ = yym3510
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3498 || yy2arr3498 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3511 := z.DecBinary()
	_ = yym3511
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3512 := r.ContainerType()
		if yyct3512 == codecSelferValueTypeMap1234 {
			yyl3512 := r.ReadMapStart()
			if yyl3512 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3512, d)
			}
		} else if yyct3512 == codecSelferValueTypeArray1234 {
			yyl3512 := r.ReadArrayStart()
			if yyl3512 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3512, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3513Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3513Slc
	var yyhl3513 bool = l >= 0
	for yyj3513 := 0; ; yyj3513++ {
		if yyhl3513 {
			if yyj3513 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3513Slc = r.DecodeBytes(yys3513Slc, true, true)
		yys3513 := string(yys3513Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3513 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3513)
		} // end switch yys3513
	} // end for yyj3513
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3518 int
	var yyb3518 bool
	var yyhl3518 bool = l >= 0
	yyj3518++
	if yyhl3518 {
		yyb3518 = yyj3518 > l
	} else {
		yyb3518 = r.CheckBreak()
	}
	if yyb3518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3518++
	if yyhl3518 {
		yyb3518 = yyj3518 > l
	} else {
		yyb3518 = r.CheckBreak()
	}
	if yyb3518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3518++
	if yyhl3518 {
		yyb3518 = yyj3518 > l
	} else {
		yyb3518 = r.CheckBreak()
	}
	if yyb3518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3518++
	if yyhl3518 {
		yyb3518 = yyj3518 > l
	} else {
		yyb3518 = r.CheckBreak()
	}
	if yyb3518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3518++
		if yyhl3518 {
			yyb3518 = yyj3518 > l
		} else {
			yyb3518 = r.CheckBreak()
		}
		if yyb3518 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3518-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3523 := z.EncBinary()
		_ = yym3523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3524 := !z.EncBinary()
			yy2arr3524 := z.EncBasicHandle().StructToArray
			var yyq3524 [7]bool
			_, _, _ = yysep3524, yyq3524, yy2arr3524
			const yyr3524 bool = false
			yyq3524[0] = x.Kind != ""
			yyq3524[1] = x.APIVersion != ""
			yyq3524[2] = x.LabelSelector != ""
			yyq3524[3] = x.FieldSelector != ""
			yyq3524[4] = x.Watch != false
			yyq3524[5] = x.ResourceVersion != ""
			yyq3524[6] = x.TimeoutSeconds != nil
			var yynn3524 int
			if yyr3524 || yy2arr3524 {
				r.EncodeArrayStart(7)
			} else {
				yynn3524 = 0
				for _, b := range yyq3524 {
					if b {
						yynn3524++
					}
				}
				r.EncodeMapStart(yynn3524)
				yynn3524 = 0
			}
			if yyr3524 || yy2arr3524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3524[0] {
					yym3526 := z.EncBinary()
					_ = yym3526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3524[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3527 := z.EncBinary()
					_ = yym3527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3524 || yy2arr3524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3524[1] {
					yym3529 := z.EncBinary()
					_ = yym3529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3524[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3530 := z.EncBinary()
					_ = yym3530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3524 || yy2arr3524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3524[2] {
					yym3532 := z.EncBinary()
					_ = yym3532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3524[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3533 := z.EncBinary()
					_ = yym3533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3524 || yy2arr3524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3524[3] {
					yym3535 := z.EncBinary()
					_ = yym3535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3524[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3536 := z.EncBinary()
					_ = yym3536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3524 || yy2arr3524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3524[4] {
					yym3538 := z.EncBinary()
					_ = yym3538
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3524[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3539 := z.EncBinary()
					_ = yym3539
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3524 || yy2arr3524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3524[5] {
					yym3541 := z.EncBinary()
					_ = yym3541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3524[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3542 := z.EncBinary()
					_ = yym3542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3524 || yy2arr3524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3524[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3544 := *x.TimeoutSeconds
						yym3545 := z.EncBinary()
						_ = yym3545
						if false {
						} else {
							r.EncodeInt(int64(yy3544))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3524[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3546 := *x.TimeoutSeconds
						yym3547 := z.EncBinary()
						_ = yym3547
						if false {
						} else {
							r.EncodeInt(int64(yy3546))
						}
					}
				}
			}
			if yyr3524 || yy2arr3524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3548 := z.DecBinary()
	_ = yym3548
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3549 := r.ContainerType()
		if yyct3549 == codecSelferValueTypeMap1234 {
			yyl3549 := r.ReadMapStart()
			if yyl3549 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3549, d)
			}
		} else if yyct3549 == codecSelferValueTypeArray1234 {
			yyl3549 := r.ReadArrayStart()
			if yyl3549 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3549, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3550Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3550Slc
	var yyhl3550 bool = l >= 0
	for yyj3550 := 0; ; yyj3550++ {
		if yyhl3550 {
			if yyj3550 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3550Slc = r.DecodeBytes(yys3550Slc, true, true)
		yys3550 := string(yys3550Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3550 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3558 := z.DecBinary()
				_ = yym3558
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3550)
		} // end switch yys3550
	} // end for yyj3550
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3559 int
	var yyb3559 bool
	var yyhl3559 bool = l >= 0
	yyj3559++
	if yyhl3559 {
		yyb3559 = yyj3559 > l
	} else {
		yyb3559 = r.CheckBreak()
	}
	if yyb3559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3559++
	if yyhl3559 {
		yyb3559 = yyj3559 > l
	} else {
		yyb3559 = r.CheckBreak()
	}
	if yyb3559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3559++
	if yyhl3559 {
		yyb3559 = yyj3559 > l
	} else {
		yyb3559 = r.CheckBreak()
	}
	if yyb3559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3559++
	if yyhl3559 {
		yyb3559 = yyj3559 > l
	} else {
		yyb3559 = r.CheckBreak()
	}
	if yyb3559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3559++
	if yyhl3559 {
		yyb3559 = yyj3559 > l
	} else {
		yyb3559 = r.CheckBreak()
	}
	if yyb3559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3559++
	if yyhl3559 {
		yyb3559 = yyj3559 > l
	} else {
		yyb3559 = r.CheckBreak()
	}
	if yyb3559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3559++
	if yyhl3559 {
		yyb3559 = yyj3559 > l
	} else {
		yyb3559 = r.CheckBreak()
	}
	if yyb3559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3567 := z.DecBinary()
		_ = yym3567
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3559++
		if yyhl3559 {
			yyb3559 = yyj3559 > l
		} else {
			yyb3559 = r.CheckBreak()
		}
		if yyb3559 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3559-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3568 := z.EncBinary()
		_ = yym3568
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3569 := !z.EncBinary()
			yy2arr3569 := z.EncBasicHandle().StructToArray
			var yyq3569 [10]bool
			_, _, _ = yysep3569, yyq3569, yy2arr3569
			const yyr3569 bool = false
			yyq3569[0] = x.Kind != ""
			yyq3569[1] = x.APIVersion != ""
			yyq3569[2] = x.Container != ""
			yyq3569[3] = x.Follow != false
			yyq3569[4] = x.Previous != false
			yyq3569[5] = x.SinceSeconds != nil
			yyq3569[6] = x.SinceTime != nil
			yyq3569[7] = x.Timestamps != false
			yyq3569[8] = x.TailLines != nil
			yyq3569[9] = x.LimitBytes != nil
			var yynn3569 int
			if yyr3569 || yy2arr3569 {
				r.EncodeArrayStart(10)
			} else {
				yynn3569 = 0
				for _, b := range yyq3569 {
					if b {
						yynn3569++
					}
				}
				r.EncodeMapStart(yynn3569)
				yynn3569 = 0
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3569[0] {
					yym3571 := z.EncBinary()
					_ = yym3571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3569[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3572 := z.EncBinary()
					_ = yym3572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3569[1] {
					yym3574 := z.EncBinary()
					_ = yym3574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3569[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3575 := z.EncBinary()
					_ = yym3575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3569[2] {
					yym3577 := z.EncBinary()
					_ = yym3577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3569[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3578 := z.EncBinary()
					_ = yym3578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3569[3] {
					yym3580 := z.EncBinary()
					_ = yym3580
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3569[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3581 := z.EncBinary()
					_ = yym3581
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3569[4] {
					yym3583 := z.EncBinary()
					_ = yym3583
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3569[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3584 := z.EncBinary()
					_ = yym3584
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3569[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3586 := *x.SinceSeconds
						yym3587 := z.EncBinary()
						_ = yym3587
						if false {
						} else {
							r.EncodeInt(int64(yy3586))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3569[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3588 := *x.SinceSeconds
						yym3589 := z.EncBinary()
						_ = yym3589
						if false {
						} else {
							r.EncodeInt(int64(yy3588))
						}
					}
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3569[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3591 := z.EncBinary()
						_ = yym3591
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3591 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3591 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3569[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3592 := z.EncBinary()
						_ = yym3592
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3592 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3592 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3569[7] {
					yym3594 := z.EncBinary()
					_ = yym3594
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3569[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3595 := z.EncBinary()
					_ = yym3595
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3569[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3597 := *x.TailLines
						yym3598 := z.EncBinary()
						_ = yym3598
						if false {
						} else {
							r.EncodeInt(int64(yy3597))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3569[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3599 := *x.TailLines
						yym3600 := z.EncBinary()
						_ = yym3600
						if false {
						} else {
							r.EncodeInt(int64(yy3599))
						}
					}
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3569[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3602 := *x.LimitBytes
						yym3603 := z.EncBinary()
						_ = yym3603
						if false {
						} else {
							r.EncodeInt(int64(yy3602))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3569[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3604 := *x.LimitBytes
						yym3605 := z.EncBinary()
						_ = yym3605
						if false {
						} else {
							r.EncodeInt(int64(yy3604))
						}
					}
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3606 := z.DecBinary()
	_ = yym3606
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3607 := r.ContainerType()
		if yyct3607 == codecSelferValueTypeMap1234 {
			yyl3607 := r.ReadMapStart()
			if yyl3607 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3607, d)
			}
		} else if yyct3607 == codecSelferValueTypeArray1234 {
			yyl3607 := r.ReadArrayStart()
			if yyl3607 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3607, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3608Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3608Slc
	var yyhl3608 bool = l >= 0
	for yyj3608 := 0; ; yyj3608++ {
		if yyhl3608 {
			if yyj3608 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3608Slc = r.DecodeBytes(yys3608Slc, true, true)
		yys3608 := string(yys3608Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3608 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3615 := z.DecBinary()
				_ = yym3615
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3617 := z.DecBinary()
				_ = yym3617
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3617 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3617 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3620 := z.DecBinary()
				_ = yym3620
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3622 := z.DecBinary()
				_ = yym3622
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3608)
		} // end switch yys3608
	} // end for yyj3608
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3623 int
	var yyb3623 bool
	var yyhl3623 bool = l >= 0
	yyj3623++
	if yyhl3623 {
		yyb3623 = yyj3623 > l
	} else {
		yyb3623 = r.CheckBreak()
	}
	if yyb3623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3623++
	if yyhl3623 {
		yyb3623 = yyj3623 > l
	} else {
		yyb3623 = r.CheckBreak()
	}
	if yyb3623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3623++
	if yyhl3623 {
		yyb3623 = yyj3623 > l
	} else {
		yyb3623 = r.CheckBreak()
	}
	if yyb3623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3623++
	if yyhl3623 {
		yyb3623 = yyj3623 > l
	} else {
		yyb3623 = r.CheckBreak()
	}
	if yyb3623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3623++
	if yyhl3623 {
		yyb3623 = yyj3623 > l
	} else {
		yyb3623 = r.CheckBreak()
	}
	if yyb3623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3623++
	if yyhl3623 {
		yyb3623 = yyj3623 > l
	} else {
		yyb3623 = r.CheckBreak()
	}
	if yyb3623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3630 := z.DecBinary()
		_ = yym3630
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3623++
	if yyhl3623 {
		yyb3623 = yyj3623 > l
	} else {
		yyb3623 = r.CheckBreak()
	}
	if yyb3623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3632 := z.DecBinary()
		_ = yym3632
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3632 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3632 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3623++
	if yyhl3623 {
		yyb3623 = yyj3623 > l
	} else {
		yyb3623 = r.CheckBreak()
	}
	if yyb3623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3623++
	if yyhl3623 {
		yyb3623 = yyj3623 > l
	} else {
		yyb3623 = r.CheckBreak()
	}
	if yyb3623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3635 := z.DecBinary()
		_ = yym3635
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3623++
	if yyhl3623 {
		yyb3623 = yyj3623 > l
	} else {
		yyb3623 = r.CheckBreak()
	}
	if yyb3623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3637 := z.DecBinary()
		_ = yym3637
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3623++
		if yyhl3623 {
			yyb3623 = yyj3623 > l
		} else {
			yyb3623 = r.CheckBreak()
		}
		if yyb3623 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3623-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3638 := z.EncBinary()
		_ = yym3638
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3639 := !z.EncBinary()
			yy2arr3639 := z.EncBasicHandle().StructToArray
			var yyq3639 [7]bool
			_, _, _ = yysep3639, yyq3639, yy2arr3639
			const yyr3639 bool = false
			yyq3639[0] = x.Kind != ""
			yyq3639[1] = x.APIVersion != ""
			yyq3639[2] = x.Stdin != false
			yyq3639[3] = x.Stdout != false
			yyq3639[4] = x.Stderr != false
			yyq3639[5] = x.TTY != false
			yyq3639[6] = x.Container != ""
			var yynn3639 int
			if yyr3639 || yy2arr3639 {
				r.EncodeArrayStart(7)
			} else {
				yynn3639 = 0
				for _, b := range yyq3639 {
					if b {
						yynn3639++
					}
				}
				r.EncodeMapStart(yynn3639)
				yynn3639 = 0
			}
			if yyr3639 || yy2arr3639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3639[0] {
					yym3641 := z.EncBinary()
					_ = yym3641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3639[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3642 := z.EncBinary()
					_ = yym3642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3639 || yy2arr3639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3639[1] {
					yym3644 := z.EncBinary()
					_ = yym3644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3639[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3645 := z.EncBinary()
					_ = yym3645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3639 || yy2arr3639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3639[2] {
					yym3647 := z.EncBinary()
					_ = yym3647
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3639[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3648 := z.EncBinary()
					_ = yym3648
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3639 || yy2arr3639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3639[3] {
					yym3650 := z.EncBinary()
					_ = yym3650
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3639[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3651 := z.EncBinary()
					_ = yym3651
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3639 || yy2arr3639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3639[4] {
					yym3653 := z.EncBinary()
					_ = yym3653
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3639[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3654 := z.EncBinary()
					_ = yym3654
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3639 || yy2arr3639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3639[5] {
					yym3656 := z.EncBinary()
					_ = yym3656
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3639[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3657 := z.EncBinary()
					_ = yym3657
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3639 || yy2arr3639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3639[6] {
					yym3659 := z.EncBinary()
					_ = yym3659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3639[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3660 := z.EncBinary()
					_ = yym3660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3639 || yy2arr3639 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3661 := z.DecBinary()
	_ = yym3661
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3662 := r.ContainerType()
		if yyct3662 == codecSelferValueTypeMap1234 {
			yyl3662 := r.ReadMapStart()
			if yyl3662 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3662, d)
			}
		} else if yyct3662 == codecSelferValueTypeArray1234 {
			yyl3662 := r.ReadArrayStart()
			if yyl3662 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3662, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3663Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3663Slc
	var yyhl3663 bool = l >= 0
	for yyj3663 := 0; ; yyj3663++ {
		if yyhl3663 {
			if yyj3663 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3663Slc = r.DecodeBytes(yys3663Slc, true, true)
		yys3663 := string(yys3663Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3663 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3663)
		} // end switch yys3663
	} // end for yyj3663
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3671 int
	var yyb3671 bool
	var yyhl3671 bool = l >= 0
	yyj3671++
	if yyhl3671 {
		yyb3671 = yyj3671 > l
	} else {
		yyb3671 = r.CheckBreak()
	}
	if yyb3671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3671++
	if yyhl3671 {
		yyb3671 = yyj3671 > l
	} else {
		yyb3671 = r.CheckBreak()
	}
	if yyb3671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3671++
	if yyhl3671 {
		yyb3671 = yyj3671 > l
	} else {
		yyb3671 = r.CheckBreak()
	}
	if yyb3671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3671++
	if yyhl3671 {
		yyb3671 = yyj3671 > l
	} else {
		yyb3671 = r.CheckBreak()
	}
	if yyb3671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3671++
	if yyhl3671 {
		yyb3671 = yyj3671 > l
	} else {
		yyb3671 = r.CheckBreak()
	}
	if yyb3671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3671++
	if yyhl3671 {
		yyb3671 = yyj3671 > l
	} else {
		yyb3671 = r.CheckBreak()
	}
	if yyb3671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3671++
	if yyhl3671 {
		yyb3671 = yyj3671 > l
	} else {
		yyb3671 = r.CheckBreak()
	}
	if yyb3671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3671++
		if yyhl3671 {
			yyb3671 = yyj3671 > l
		} else {
			yyb3671 = r.CheckBreak()
		}
		if yyb3671 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3671-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3679 := z.EncBinary()
		_ = yym3679
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3680 := !z.EncBinary()
			yy2arr3680 := z.EncBasicHandle().StructToArray
			var yyq3680 [8]bool
			_, _, _ = yysep3680, yyq3680, yy2arr3680
			const yyr3680 bool = false
			yyq3680[0] = x.Kind != ""
			yyq3680[1] = x.APIVersion != ""
			yyq3680[2] = x.Stdin != false
			yyq3680[3] = x.Stdout != false
			yyq3680[4] = x.Stderr != false
			yyq3680[5] = x.TTY != false
			yyq3680[6] = x.Container != ""
			var yynn3680 int
			if yyr3680 || yy2arr3680 {
				r.EncodeArrayStart(8)
			} else {
				yynn3680 = 1
				for _, b := range yyq3680 {
					if b {
						yynn3680++
					}
				}
				r.EncodeMapStart(yynn3680)
				yynn3680 = 0
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3680[0] {
					yym3682 := z.EncBinary()
					_ = yym3682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3680[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3683 := z.EncBinary()
					_ = yym3683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3680[1] {
					yym3685 := z.EncBinary()
					_ = yym3685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3680[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3686 := z.EncBinary()
					_ = yym3686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3680[2] {
					yym3688 := z.EncBinary()
					_ = yym3688
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3680[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3689 := z.EncBinary()
					_ = yym3689
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3680[3] {
					yym3691 := z.EncBinary()
					_ = yym3691
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3680[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3692 := z.EncBinary()
					_ = yym3692
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3680[4] {
					yym3694 := z.EncBinary()
					_ = yym3694
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3680[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3695 := z.EncBinary()
					_ = yym3695
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3680[5] {
					yym3697 := z.EncBinary()
					_ = yym3697
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3680[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3698 := z.EncBinary()
					_ = yym3698
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3680[6] {
					yym3700 := z.EncBinary()
					_ = yym3700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3680[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3701 := z.EncBinary()
					_ = yym3701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3703 := z.EncBinary()
					_ = yym3703
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3704 := z.EncBinary()
					_ = yym3704
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3705 := z.DecBinary()
	_ = yym3705
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3706 := r.ContainerType()
		if yyct3706 == codecSelferValueTypeMap1234 {
			yyl3706 := r.ReadMapStart()
			if yyl3706 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3706, d)
			}
		} else if yyct3706 == codecSelferValueTypeArray1234 {
			yyl3706 := r.ReadArrayStart()
			if yyl3706 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3706, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3707Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3707Slc
	var yyhl3707 bool = l >= 0
	for yyj3707 := 0; ; yyj3707++ {
		if yyhl3707 {
			if yyj3707 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3707Slc = r.DecodeBytes(yys3707Slc, true, true)
		yys3707 := string(yys3707Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3707 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3715 := &x.Command
				yym3716 := z.DecBinary()
				_ = yym3716
				if false {
				} else {
					z.F.DecSliceStringX(yyv3715, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3707)
		} // end switch yys3707
	} // end for yyj3707
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3717 int
	var yyb3717 bool
	var yyhl3717 bool = l >= 0
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3725 := &x.Command
		yym3726 := z.DecBinary()
		_ = yym3726
		if false {
		} else {
			z.F.DecSliceStringX(yyv3725, false, d)
		}
	}
	for {
		yyj3717++
		if yyhl3717 {
			yyb3717 = yyj3717 > l
		} else {
			yyb3717 = r.CheckBreak()
		}
		if yyb3717 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3717-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3727 := z.EncBinary()
		_ = yym3727
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3728 := !z.EncBinary()
			yy2arr3728 := z.EncBasicHandle().StructToArray
			var yyq3728 [3]bool
			_, _, _ = yysep3728, yyq3728, yy2arr3728
			const yyr3728 bool = false
			yyq3728[0] = x.Kind != ""
			yyq3728[1] = x.APIVersion != ""
			yyq3728[2] = x.Path != ""
			var yynn3728 int
			if yyr3728 || yy2arr3728 {
				r.EncodeArrayStart(3)
			} else {
				yynn3728 = 0
				for _, b := range yyq3728 {
					if b {
						yynn3728++
					}
				}
				r.EncodeMapStart(yynn3728)
				yynn3728 = 0
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[0] {
					yym3730 := z.EncBinary()
					_ = yym3730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3728[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3731 := z.EncBinary()
					_ = yym3731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[1] {
					yym3733 := z.EncBinary()
					_ = yym3733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3728[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3734 := z.EncBinary()
					_ = yym3734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3728[2] {
					yym3736 := z.EncBinary()
					_ = yym3736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3728[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3737 := z.EncBinary()
					_ = yym3737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3728 || yy2arr3728 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3738 := z.DecBinary()
	_ = yym3738
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3739 := r.ContainerType()
		if yyct3739 == codecSelferValueTypeMap1234 {
			yyl3739 := r.ReadMapStart()
			if yyl3739 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3739, d)
			}
		} else if yyct3739 == codecSelferValueTypeArray1234 {
			yyl3739 := r.ReadArrayStart()
			if yyl3739 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3739, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3740Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3740Slc
	var yyhl3740 bool = l >= 0
	for yyj3740 := 0; ; yyj3740++ {
		if yyhl3740 {
			if yyj3740 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3740Slc = r.DecodeBytes(yys3740Slc, true, true)
		yys3740 := string(yys3740Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3740 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3740)
		} // end switch yys3740
	} // end for yyj3740
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3744 int
	var yyb3744 bool
	var yyhl3744 bool = l >= 0
	yyj3744++
	if yyhl3744 {
		yyb3744 = yyj3744 > l
	} else {
		yyb3744 = r.CheckBreak()
	}
	if yyb3744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3744++
	if yyhl3744 {
		yyb3744 = yyj3744 > l
	} else {
		yyb3744 = r.CheckBreak()
	}
	if yyb3744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3744++
	if yyhl3744 {
		yyb3744 = yyj3744 > l
	} else {
		yyb3744 = r.CheckBreak()
	}
	if yyb3744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3744++
		if yyhl3744 {
			yyb3744 = yyj3744 > l
		} else {
			yyb3744 = r.CheckBreak()
		}
		if yyb3744 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3744-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3748 := z.EncBinary()
		_ = yym3748
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3749 := !z.EncBinary()
			yy2arr3749 := z.EncBasicHandle().StructToArray
			var yyq3749 [3]bool
			_, _, _ = yysep3749, yyq3749, yy2arr3749
			const yyr3749 bool = false
			yyq3749[0] = x.Kind != ""
			yyq3749[1] = x.APIVersion != ""
			yyq3749[2] = x.Path != ""
			var yynn3749 int
			if yyr3749 || yy2arr3749 {
				r.EncodeArrayStart(3)
			} else {
				yynn3749 = 0
				for _, b := range yyq3749 {
					if b {
						yynn3749++
					}
				}
				r.EncodeMapStart(yynn3749)
				yynn3749 = 0
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3749[0] {
					yym3751 := z.EncBinary()
					_ = yym3751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3749[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3752 := z.EncBinary()
					_ = yym3752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3749[1] {
					yym3754 := z.EncBinary()
					_ = yym3754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3749[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3755 := z.EncBinary()
					_ = yym3755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3749[2] {
					yym3757 := z.EncBinary()
					_ = yym3757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3749[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3758 := z.EncBinary()
					_ = yym3758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3759 := z.DecBinary()
	_ = yym3759
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3760 := r.ContainerType()
		if yyct3760 == codecSelferValueTypeMap1234 {
			yyl3760 := r.ReadMapStart()
			if yyl3760 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3760, d)
			}
		} else if yyct3760 == codecSelferValueTypeArray1234 {
			yyl3760 := r.ReadArrayStart()
			if yyl3760 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3760, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3761Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3761Slc
	var yyhl3761 bool = l >= 0
	for yyj3761 := 0; ; yyj3761++ {
		if yyhl3761 {
			if yyj3761 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3761Slc = r.DecodeBytes(yys3761Slc, true, true)
		yys3761 := string(yys3761Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3761 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3761)
		} // end switch yys3761
	} // end for yyj3761
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3765 int
	var yyb3765 bool
	var yyhl3765 bool = l >= 0
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3765++
		if yyhl3765 {
			yyb3765 = yyj3765 > l
		} else {
			yyb3765 = r.CheckBreak()
		}
		if yyb3765 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3765-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3769 := z.EncBinary()
		_ = yym3769
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3770 := !z.EncBinary()
			yy2arr3770 := z.EncBasicHandle().StructToArray
			var yyq3770 [3]bool
			_, _, _ = yysep3770, yyq3770, yy2arr3770
			const yyr3770 bool = false
			yyq3770[0] = x.Kind != ""
			yyq3770[1] = x.APIVersion != ""
			yyq3770[2] = x.Path != ""
			var yynn3770 int
			if yyr3770 || yy2arr3770 {
				r.EncodeArrayStart(3)
			} else {
				yynn3770 = 0
				for _, b := range yyq3770 {
					if b {
						yynn3770++
					}
				}
				r.EncodeMapStart(yynn3770)
				yynn3770 = 0
			}
			if yyr3770 || yy2arr3770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3770[0] {
					yym3772 := z.EncBinary()
					_ = yym3772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3770[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3773 := z.EncBinary()
					_ = yym3773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3770 || yy2arr3770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3770[1] {
					yym3775 := z.EncBinary()
					_ = yym3775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3770[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3776 := z.EncBinary()
					_ = yym3776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3770 || yy2arr3770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3770[2] {
					yym3778 := z.EncBinary()
					_ = yym3778
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3770[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3779 := z.EncBinary()
					_ = yym3779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3770 || yy2arr3770 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3780 := z.DecBinary()
	_ = yym3780
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3781 := r.ContainerType()
		if yyct3781 == codecSelferValueTypeMap1234 {
			yyl3781 := r.ReadMapStart()
			if yyl3781 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3781, d)
			}
		} else if yyct3781 == codecSelferValueTypeArray1234 {
			yyl3781 := r.ReadArrayStart()
			if yyl3781 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3781, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3782Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3782Slc
	var yyhl3782 bool = l >= 0
	for yyj3782 := 0; ; yyj3782++ {
		if yyhl3782 {
			if yyj3782 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3782Slc = r.DecodeBytes(yys3782Slc, true, true)
		yys3782 := string(yys3782Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3782 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3782)
		} // end switch yys3782
	} // end for yyj3782
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3786 int
	var yyb3786 bool
	var yyhl3786 bool = l >= 0
	yyj3786++
	if yyhl3786 {
		yyb3786 = yyj3786 > l
	} else {
		yyb3786 = r.CheckBreak()
	}
	if yyb3786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3786++
	if yyhl3786 {
		yyb3786 = yyj3786 > l
	} else {
		yyb3786 = r.CheckBreak()
	}
	if yyb3786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3786++
	if yyhl3786 {
		yyb3786 = yyj3786 > l
	} else {
		yyb3786 = r.CheckBreak()
	}
	if yyb3786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3786++
		if yyhl3786 {
			yyb3786 = yyj3786 > l
		} else {
			yyb3786 = r.CheckBreak()
		}
		if yyb3786 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3786-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3790 := z.EncBinary()
		_ = yym3790
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3791 := !z.EncBinary()
			yy2arr3791 := z.EncBasicHandle().StructToArray
			var yyq3791 [5]bool
			_, _, _ = yysep3791, yyq3791, yy2arr3791
			const yyr3791 bool = false
			yyq3791[4] = x.Controller != nil
			var yynn3791 int
			if yyr3791 || yy2arr3791 {
				r.EncodeArrayStart(5)
			} else {
				yynn3791 = 4
				for _, b := range yyq3791 {
					if b {
						yynn3791++
					}
				}
				r.EncodeMapStart(yynn3791)
				yynn3791 = 0
			}
			if yyr3791 || yy2arr3791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3793 := z.EncBinary()
				_ = yym3793
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3794 := z.EncBinary()
				_ = yym3794
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3791 || yy2arr3791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3796 := z.EncBinary()
				_ = yym3796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3797 := z.EncBinary()
				_ = yym3797
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3791 || yy2arr3791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3799 := z.EncBinary()
				_ = yym3799
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3800 := z.EncBinary()
				_ = yym3800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3791 || yy2arr3791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3802 := z.EncBinary()
				_ = yym3802
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3803 := z.EncBinary()
				_ = yym3803
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3791 || yy2arr3791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3791[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3805 := *x.Controller
						yym3806 := z.EncBinary()
						_ = yym3806
						if false {
						} else {
							r.EncodeBool(bool(yy3805))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3791[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3807 := *x.Controller
						yym3808 := z.EncBinary()
						_ = yym3808
						if false {
						} else {
							r.EncodeBool(bool(yy3807))
						}
					}
				}
			}
			if yyr3791 || yy2arr3791 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3809 := z.DecBinary()
	_ = yym3809
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3810 := r.ContainerType()
		if yyct3810 == codecSelferValueTypeMap1234 {
			yyl3810 := r.ReadMapStart()
			if yyl3810 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3810, d)
			}
		} else if yyct3810 == codecSelferValueTypeArray1234 {
			yyl3810 := r.ReadArrayStart()
			if yyl3810 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3810, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3811Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3811Slc
	var yyhl3811 bool = l >= 0
	for yyj3811 := 0; ; yyj3811++ {
		if yyhl3811 {
			if yyj3811 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3811Slc = r.DecodeBytes(yys3811Slc, true, true)
		yys3811 := string(yys3811Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3811 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3817 := z.DecBinary()
				_ = yym3817
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3811)
		} // end switch yys3811
	} // end for yyj3811
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3818 int
	var yyb3818 bool
	var yyhl3818 bool = l >= 0
	yyj3818++
	if yyhl3818 {
		yyb3818 = yyj3818 > l
	} else {
		yyb3818 = r.CheckBreak()
	}
	if yyb3818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3818++
	if yyhl3818 {
		yyb3818 = yyj3818 > l
	} else {
		yyb3818 = r.CheckBreak()
	}
	if yyb3818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3818++
	if yyhl3818 {
		yyb3818 = yyj3818 > l
	} else {
		yyb3818 = r.CheckBreak()
	}
	if yyb3818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3818++
	if yyhl3818 {
		yyb3818 = yyj3818 > l
	} else {
		yyb3818 = r.CheckBreak()
	}
	if yyb3818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3818++
	if yyhl3818 {
		yyb3818 = yyj3818 > l
	} else {
		yyb3818 = r.CheckBreak()
	}
	if yyb3818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3824 := z.DecBinary()
		_ = yym3824
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3818++
		if yyhl3818 {
			yyb3818 = yyj3818 > l
		} else {
			yyb3818 = r.CheckBreak()
		}
		if yyb3818 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3818-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3825 := z.EncBinary()
		_ = yym3825
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3826 := !z.EncBinary()
			yy2arr3826 := z.EncBasicHandle().StructToArray
			var yyq3826 [7]bool
			_, _, _ = yysep3826, yyq3826, yy2arr3826
			const yyr3826 bool = false
			yyq3826[0] = x.Kind != ""
			yyq3826[1] = x.Namespace != ""
			yyq3826[2] = x.Name != ""
			yyq3826[3] = x.UID != ""
			yyq3826[4] = x.APIVersion != ""
			yyq3826[5] = x.ResourceVersion != ""
			yyq3826[6] = x.FieldPath != ""
			var yynn3826 int
			if yyr3826 || yy2arr3826 {
				r.EncodeArrayStart(7)
			} else {
				yynn3826 = 0
				for _, b := range yyq3826 {
					if b {
						yynn3826++
					}
				}
				r.EncodeMapStart(yynn3826)
				yynn3826 = 0
			}
			if yyr3826 || yy2arr3826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3826[0] {
					yym3828 := z.EncBinary()
					_ = yym3828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3826[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3829 := z.EncBinary()
					_ = yym3829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3826 || yy2arr3826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3826[1] {
					yym3831 := z.EncBinary()
					_ = yym3831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3826[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3832 := z.EncBinary()
					_ = yym3832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3826 || yy2arr3826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3826[2] {
					yym3834 := z.EncBinary()
					_ = yym3834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3826[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3835 := z.EncBinary()
					_ = yym3835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3826 || yy2arr3826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3826[3] {
					yym3837 := z.EncBinary()
					_ = yym3837
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3826[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3838 := z.EncBinary()
					_ = yym3838
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3826 || yy2arr3826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3826[4] {
					yym3840 := z.EncBinary()
					_ = yym3840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3826[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3841 := z.EncBinary()
					_ = yym3841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3826 || yy2arr3826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3826[5] {
					yym3843 := z.EncBinary()
					_ = yym3843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3826[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3844 := z.EncBinary()
					_ = yym3844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3826 || yy2arr3826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3826[6] {
					yym3846 := z.EncBinary()
					_ = yym3846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3826[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3847 := z.EncBinary()
					_ = yym3847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3826 || yy2arr3826 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3848 := z.DecBinary()
	_ = yym3848
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3849 := r.ContainerType()
		if yyct3849 == codecSelferValueTypeMap1234 {
			yyl3849 := r.ReadMapStart()
			if yyl3849 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3849, d)
			}
		} else if yyct3849 == codecSelferValueTypeArray1234 {
			yyl3849 := r.ReadArrayStart()
			if yyl3849 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3849, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3850Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3850Slc
	var yyhl3850 bool = l >= 0
	for yyj3850 := 0; ; yyj3850++ {
		if yyhl3850 {
			if yyj3850 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3850Slc = r.DecodeBytes(yys3850Slc, true, true)
		yys3850 := string(yys3850Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3850 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3850)
		} // end switch yys3850
	} // end for yyj3850
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3858 int
	var yyb3858 bool
	var yyhl3858 bool = l >= 0
	yyj3858++
	if yyhl3858 {
		yyb3858 = yyj3858 > l
	} else {
		yyb3858 = r.CheckBreak()
	}
	if yyb3858 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3858++
	if yyhl3858 {
		yyb3858 = yyj3858 > l
	} else {
		yyb3858 = r.CheckBreak()
	}
	if yyb3858 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3858++
	if yyhl3858 {
		yyb3858 = yyj3858 > l
	} else {
		yyb3858 = r.CheckBreak()
	}
	if yyb3858 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3858++
	if yyhl3858 {
		yyb3858 = yyj3858 > l
	} else {
		yyb3858 = r.CheckBreak()
	}
	if yyb3858 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3858++
	if yyhl3858 {
		yyb3858 = yyj3858 > l
	} else {
		yyb3858 = r.CheckBreak()
	}
	if yyb3858 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3858++
	if yyhl3858 {
		yyb3858 = yyj3858 > l
	} else {
		yyb3858 = r.CheckBreak()
	}
	if yyb3858 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3858++
	if yyhl3858 {
		yyb3858 = yyj3858 > l
	} else {
		yyb3858 = r.CheckBreak()
	}
	if yyb3858 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3858++
		if yyhl3858 {
			yyb3858 = yyj3858 > l
		} else {
			yyb3858 = r.CheckBreak()
		}
		if yyb3858 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3858-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3866 := z.EncBinary()
		_ = yym3866
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3867 := !z.EncBinary()
			yy2arr3867 := z.EncBasicHandle().StructToArray
			var yyq3867 [1]bool
			_, _, _ = yysep3867, yyq3867, yy2arr3867
			const yyr3867 bool = false
			yyq3867[0] = x.Name != ""
			var yynn3867 int
			if yyr3867 || yy2arr3867 {
				r.EncodeArrayStart(1)
			} else {
				yynn3867 = 0
				for _, b := range yyq3867 {
					if b {
						yynn3867++
					}
				}
				r.EncodeMapStart(yynn3867)
				yynn3867 = 0
			}
			if yyr3867 || yy2arr3867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3867[0] {
					yym3869 := z.EncBinary()
					_ = yym3869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3867[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3870 := z.EncBinary()
					_ = yym3870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3867 || yy2arr3867 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3871 := z.DecBinary()
	_ = yym3871
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3872 := r.ContainerType()
		if yyct3872 == codecSelferValueTypeMap1234 {
			yyl3872 := r.ReadMapStart()
			if yyl3872 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3872, d)
			}
		} else if yyct3872 == codecSelferValueTypeArray1234 {
			yyl3872 := r.ReadArrayStart()
			if yyl3872 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3872, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3873Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3873Slc
	var yyhl3873 bool = l >= 0
	for yyj3873 := 0; ; yyj3873++ {
		if yyhl3873 {
			if yyj3873 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3873Slc = r.DecodeBytes(yys3873Slc, true, true)
		yys3873 := string(yys3873Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3873 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3873)
		} // end switch yys3873
	} // end for yyj3873
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3875 int
	var yyb3875 bool
	var yyhl3875 bool = l >= 0
	yyj3875++
	if yyhl3875 {
		yyb3875 = yyj3875 > l
	} else {
		yyb3875 = r.CheckBreak()
	}
	if yyb3875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3875++
		if yyhl3875 {
			yyb3875 = yyj3875 > l
		} else {
			yyb3875 = r.CheckBreak()
		}
		if yyb3875 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3875-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3877 := z.EncBinary()
		_ = yym3877
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3878 := !z.EncBinary()
			yy2arr3878 := z.EncBasicHandle().StructToArray
			var yyq3878 [3]bool
			_, _, _ = yysep3878, yyq3878, yy2arr3878
			const yyr3878 bool = false
			yyq3878[0] = x.Kind != ""
			yyq3878[1] = x.APIVersion != ""
			yyq3878[2] = true
			var yynn3878 int
			if yyr3878 || yy2arr3878 {
				r.EncodeArrayStart(3)
			} else {
				yynn3878 = 0
				for _, b := range yyq3878 {
					if b {
						yynn3878++
					}
				}
				r.EncodeMapStart(yynn3878)
				yynn3878 = 0
			}
			if yyr3878 || yy2arr3878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3878[0] {
					yym3880 := z.EncBinary()
					_ = yym3880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3878[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3881 := z.EncBinary()
					_ = yym3881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3878 || yy2arr3878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3878[1] {
					yym3883 := z.EncBinary()
					_ = yym3883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3878[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3884 := z.EncBinary()
					_ = yym3884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3878 || yy2arr3878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3878[2] {
					yy3886 := &x.Reference
					yy3886.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3878[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3887 := &x.Reference
					yy3887.CodecEncodeSelf(e)
				}
			}
			if yyr3878 || yy2arr3878 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3888 := z.DecBinary()
	_ = yym3888
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3889 := r.ContainerType()
		if yyct3889 == codecSelferValueTypeMap1234 {
			yyl3889 := r.ReadMapStart()
			if yyl3889 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3889, d)
			}
		} else if yyct3889 == codecSelferValueTypeArray1234 {
			yyl3889 := r.ReadArrayStart()
			if yyl3889 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3889, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3890Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3890Slc
	var yyhl3890 bool = l >= 0
	for yyj3890 := 0; ; yyj3890++ {
		if yyhl3890 {
			if yyj3890 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3890Slc = r.DecodeBytes(yys3890Slc, true, true)
		yys3890 := string(yys3890Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3890 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3893 := &x.Reference
				yyv3893.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3890)
		} // end switch yys3890
	} // end for yyj3890
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3894 int
	var yyb3894 bool
	var yyhl3894 bool = l >= 0
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3897 := &x.Reference
		yyv3897.CodecDecodeSelf(d)
	}
	for {
		yyj3894++
		if yyhl3894 {
			yyb3894 = yyj3894 > l
		} else {
			yyb3894 = r.CheckBreak()
		}
		if yyb3894 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3894-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3898 := z.EncBinary()
		_ = yym3898
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3899 := !z.EncBinary()
			yy2arr3899 := z.EncBasicHandle().StructToArray
			var yyq3899 [2]bool
			_, _, _ = yysep3899, yyq3899, yy2arr3899
			const yyr3899 bool = false
			yyq3899[0] = x.Component != ""
			yyq3899[1] = x.Host != ""
			var yynn3899 int
			if yyr3899 || yy2arr3899 {
				r.EncodeArrayStart(2)
			} else {
				yynn3899 = 0
				for _, b := range yyq3899 {
					if b {
						yynn3899++
					}
				}
				r.EncodeMapStart(yynn3899)
				yynn3899 = 0
			}
			if yyr3899 || yy2arr3899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3899[0] {
					yym3901 := z.EncBinary()
					_ = yym3901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3899[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3902 := z.EncBinary()
					_ = yym3902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3899 || yy2arr3899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3899[1] {
					yym3904 := z.EncBinary()
					_ = yym3904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3899[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3905 := z.EncBinary()
					_ = yym3905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3899 || yy2arr3899 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3906 := z.DecBinary()
	_ = yym3906
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3907 := r.ContainerType()
		if yyct3907 == codecSelferValueTypeMap1234 {
			yyl3907 := r.ReadMapStart()
			if yyl3907 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3907, d)
			}
		} else if yyct3907 == codecSelferValueTypeArray1234 {
			yyl3907 := r.ReadArrayStart()
			if yyl3907 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3907, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3908Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3908Slc
	var yyhl3908 bool = l >= 0
	for yyj3908 := 0; ; yyj3908++ {
		if yyhl3908 {
			if yyj3908 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3908Slc = r.DecodeBytes(yys3908Slc, true, true)
		yys3908 := string(yys3908Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3908 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3908)
		} // end switch yys3908
	} // end for yyj3908
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3911 int
	var yyb3911 bool
	var yyhl3911 bool = l >= 0
	yyj3911++
	if yyhl3911 {
		yyb3911 = yyj3911 > l
	} else {
		yyb3911 = r.CheckBreak()
	}
	if yyb3911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3911++
	if yyhl3911 {
		yyb3911 = yyj3911 > l
	} else {
		yyb3911 = r.CheckBreak()
	}
	if yyb3911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3911++
		if yyhl3911 {
			yyb3911 = yyj3911 > l
		} else {
			yyb3911 = r.CheckBreak()
		}
		if yyb3911 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3911-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3914 := z.EncBinary()
		_ = yym3914
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3915 := !z.EncBinary()
			yy2arr3915 := z.EncBasicHandle().StructToArray
			var yyq3915 [11]bool
			_, _, _ = yysep3915, yyq3915, yy2arr3915
			const yyr3915 bool = false
			yyq3915[0] = x.Kind != ""
			yyq3915[1] = x.APIVersion != ""
			yyq3915[4] = x.Reason != ""
			yyq3915[5] = x.Message != ""
			yyq3915[6] = true
			yyq3915[7] = true
			yyq3915[8] = true
			yyq3915[9] = x.Count != 0
			yyq3915[10] = x.Type != ""
			var yynn3915 int
			if yyr3915 || yy2arr3915 {
				r.EncodeArrayStart(11)
			} else {
				yynn3915 = 2
				for _, b := range yyq3915 {
					if b {
						yynn3915++
					}
				}
				r.EncodeMapStart(yynn3915)
				yynn3915 = 0
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[0] {
					yym3917 := z.EncBinary()
					_ = yym3917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3915[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3918 := z.EncBinary()
					_ = yym3918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[1] {
					yym3920 := z.EncBinary()
					_ = yym3920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3915[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3921 := z.EncBinary()
					_ = yym3921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3923 := &x.ObjectMeta
				yy3923.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3924 := &x.ObjectMeta
				yy3924.CodecEncodeSelf(e)
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3926 := &x.InvolvedObject
				yy3926.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3927 := &x.InvolvedObject
				yy3927.CodecEncodeSelf(e)
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[4] {
					yym3929 := z.EncBinary()
					_ = yym3929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3915[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3930 := z.EncBinary()
					_ = yym3930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[5] {
					yym3932 := z.EncBinary()
					_ = yym3932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3915[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3933 := z.EncBinary()
					_ = yym3933
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[6] {
					yy3935 := &x.Source
					yy3935.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3915[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3936 := &x.Source
					yy3936.CodecEncodeSelf(e)
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[7] {
					yy3938 := &x.FirstTimestamp
					yym3939 := z.EncBinary()
					_ = yym3939
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3938) {
					} else if yym3939 {
						z.EncBinaryMarshal(yy3938)
					} else if !yym3939 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3938)
					} else {
						z.EncFallback(yy3938)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3915[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3940 := &x.FirstTimestamp
					yym3941 := z.EncBinary()
					_ = yym3941
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3940) {
					} else if yym3941 {
						z.EncBinaryMarshal(yy3940)
					} else if !yym3941 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3940)
					} else {
						z.EncFallback(yy3940)
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[8] {
					yy3943 := &x.LastTimestamp
					yym3944 := z.EncBinary()
					_ = yym3944
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3943) {
					} else if yym3944 {
						z.EncBinaryMarshal(yy3943)
					} else if !yym3944 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3943)
					} else {
						z.EncFallback(yy3943)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3915[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3945 := &x.LastTimestamp
					yym3946 := z.EncBinary()
					_ = yym3946
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3945) {
					} else if yym3946 {
						z.EncBinaryMarshal(yy3945)
					} else if !yym3946 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3945)
					} else {
						z.EncFallback(yy3945)
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[9] {
					yym3948 := z.EncBinary()
					_ = yym3948
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3915[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3949 := z.EncBinary()
					_ = yym3949
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3915[10] {
					yym3951 := z.EncBinary()
					_ = yym3951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3915[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3952 := z.EncBinary()
					_ = yym3952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3915 || yy2arr3915 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3953 := z.DecBinary()
	_ = yym3953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3954 := r.ContainerType()
		if yyct3954 == codecSelferValueTypeMap1234 {
			yyl3954 := r.ReadMapStart()
			if yyl3954 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3954, d)
			}
		} else if yyct3954 == codecSelferValueTypeArray1234 {
			yyl3954 := r.ReadArrayStart()
			if yyl3954 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3954, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3955Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3955Slc
	var yyhl3955 bool = l >= 0
	for yyj3955 := 0; ; yyj3955++ {
		if yyhl3955 {
			if yyj3955 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3955Slc = r.DecodeBytes(yys3955Slc, true, true)
		yys3955 := string(yys3955Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3955 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3958 := &x.ObjectMeta
				yyv3958.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3959 := &x.InvolvedObject
				yyv3959.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3962 := &x.Source
				yyv3962.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3963 := &x.FirstTimestamp
				yym3964 := z.DecBinary()
				_ = yym3964
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3963) {
				} else if yym3964 {
					z.DecBinaryUnmarshal(yyv3963)
				} else if !yym3964 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3963)
				} else {
					z.DecFallback(yyv3963, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3965 := &x.LastTimestamp
				yym3966 := z.DecBinary()
				_ = yym3966
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3965) {
				} else if yym3966 {
					z.DecBinaryUnmarshal(yyv3965)
				} else if !yym3966 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3965)
				} else {
					z.DecFallback(yyv3965, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3955)
		} // end switch yys3955
	} // end for yyj3955
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3969 int
	var yyb3969 bool
	var yyhl3969 bool = l >= 0
	yyj3969++
	if yyhl3969 {
		yyb3969 = yyj3969 > l
	} else {
		yyb3969 = r.CheckBreak()
	}
	if yyb3969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3969++
	if yyhl3969 {
		yyb3969 = yyj3969 > l
	} else {
		yyb3969 = r.CheckBreak()
	}
	if yyb3969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3969++
	if yyhl3969 {
		yyb3969 = yyj3969 > l
	} else {
		yyb3969 = r.CheckBreak()
	}
	if yyb3969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3972 := &x.ObjectMeta
		yyv3972.CodecDecodeSelf(d)
	}
	yyj3969++
	if yyhl3969 {
		yyb3969 = yyj3969 > l
	} else {
		yyb3969 = r.CheckBreak()
	}
	if yyb3969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3973 := &x.InvolvedObject
		yyv3973.CodecDecodeSelf(d)
	}
	yyj3969++
	if yyhl3969 {
		yyb3969 = yyj3969 > l
	} else {
		yyb3969 = r.CheckBreak()
	}
	if yyb3969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3969++
	if yyhl3969 {
		yyb3969 = yyj3969 > l
	} else {
		yyb3969 = r.CheckBreak()
	}
	if yyb3969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3969++
	if yyhl3969 {
		yyb3969 = yyj3969 > l
	} else {
		yyb3969 = r.CheckBreak()
	}
	if yyb3969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3976 := &x.Source
		yyv3976.CodecDecodeSelf(d)
	}
	yyj3969++
	if yyhl3969 {
		yyb3969 = yyj3969 > l
	} else {
		yyb3969 = r.CheckBreak()
	}
	if yyb3969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3977 := &x.FirstTimestamp
		yym3978 := z.DecBinary()
		_ = yym3978
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3977) {
		} else if yym3978 {
			z.DecBinaryUnmarshal(yyv3977)
		} else if !yym3978 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3977)
		} else {
			z.DecFallback(yyv3977, false)
		}
	}
	yyj3969++
	if yyhl3969 {
		yyb3969 = yyj3969 > l
	} else {
		yyb3969 = r.CheckBreak()
	}
	if yyb3969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3979 := &x.LastTimestamp
		yym3980 := z.DecBinary()
		_ = yym3980
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3979) {
		} else if yym3980 {
			z.DecBinaryUnmarshal(yyv3979)
		} else if !yym3980 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3979)
		} else {
			z.DecFallback(yyv3979, false)
		}
	}
	yyj3969++
	if yyhl3969 {
		yyb3969 = yyj3969 > l
	} else {
		yyb3969 = r.CheckBreak()
	}
	if yyb3969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3969++
	if yyhl3969 {
		yyb3969 = yyj3969 > l
	} else {
		yyb3969 = r.CheckBreak()
	}
	if yyb3969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3969++
		if yyhl3969 {
			yyb3969 = yyj3969 > l
		} else {
			yyb3969 = r.CheckBreak()
		}
		if yyb3969 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3969-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3983 := z.EncBinary()
		_ = yym3983
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3984 := !z.EncBinary()
			yy2arr3984 := z.EncBasicHandle().StructToArray
			var yyq3984 [4]bool
			_, _, _ = yysep3984, yyq3984, yy2arr3984
			const yyr3984 bool = false
			yyq3984[0] = x.Kind != ""
			yyq3984[1] = x.APIVersion != ""
			yyq3984[2] = true
			var yynn3984 int
			if yyr3984 || yy2arr3984 {
				r.EncodeArrayStart(4)
			} else {
				yynn3984 = 1
				for _, b := range yyq3984 {
					if b {
						yynn3984++
					}
				}
				r.EncodeMapStart(yynn3984)
				yynn3984 = 0
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[0] {
					yym3986 := z.EncBinary()
					_ = yym3986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3984[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3987 := z.EncBinary()
					_ = yym3987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[1] {
					yym3989 := z.EncBinary()
					_ = yym3989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3984[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3990 := z.EncBinary()
					_ = yym3990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[2] {
					yy3992 := &x.ListMeta
					yym3993 := z.EncBinary()
					_ = yym3993
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3992) {
					} else {
						z.EncFallback(yy3992)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3984[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3994 := &x.ListMeta
					yym3995 := z.EncBinary()
					_ = yym3995
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3994) {
					} else {
						z.EncFallback(yy3994)
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3997 := z.EncBinary()
					_ = yym3997
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3998 := z.EncBinary()
					_ = yym3998
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3999 := z.DecBinary()
	_ = yym3999
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4000 := r.ContainerType()
		if yyct4000 == codecSelferValueTypeMap1234 {
			yyl4000 := r.ReadMapStart()
			if yyl4000 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4000, d)
			}
		} else if yyct4000 == codecSelferValueTypeArray1234 {
			yyl4000 := r.ReadArrayStart()
			if yyl4000 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4000, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4001Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4001Slc
	var yyhl4001 bool = l >= 0
	for yyj4001 := 0; ; yyj4001++ {
		if yyhl4001 {
			if yyj4001 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4001Slc = r.DecodeBytes(yys4001Slc, true, true)
		yys4001 := string(yys4001Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4001 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4004 := &x.ListMeta
				yym4005 := z.DecBinary()
				_ = yym4005
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4004) {
				} else {
					z.DecFallback(yyv4004, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4006 := &x.Items
				yym4007 := z.DecBinary()
				_ = yym4007
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv4006), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4001)
		} // end switch yys4001
	} // end for yyj4001
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4008 int
	var yyb4008 bool
	var yyhl4008 bool = l >= 0
	yyj4008++
	if yyhl4008 {
		yyb4008 = yyj4008 > l
	} else {
		yyb4008 = r.CheckBreak()
	}
	if yyb4008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4008++
	if yyhl4008 {
		yyb4008 = yyj4008 > l
	} else {
		yyb4008 = r.CheckBreak()
	}
	if yyb4008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4008++
	if yyhl4008 {
		yyb4008 = yyj4008 > l
	} else {
		yyb4008 = r.CheckBreak()
	}
	if yyb4008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4011 := &x.ListMeta
		yym4012 := z.DecBinary()
		_ = yym4012
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4011) {
		} else {
			z.DecFallback(yyv4011, false)
		}
	}
	yyj4008++
	if yyhl4008 {
		yyb4008 = yyj4008 > l
	} else {
		yyb4008 = r.CheckBreak()
	}
	if yyb4008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4013 := &x.Items
		yym4014 := z.DecBinary()
		_ = yym4014
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv4013), d)
		}
	}
	for {
		yyj4008++
		if yyhl4008 {
			yyb4008 = yyj4008 > l
		} else {
			yyb4008 = r.CheckBreak()
		}
		if yyb4008 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4008-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4015 := z.EncBinary()
		_ = yym4015
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4016 := !z.EncBinary()
			yy2arr4016 := z.EncBasicHandle().StructToArray
			var yyq4016 [4]bool
			_, _, _ = yysep4016, yyq4016, yy2arr4016
			const yyr4016 bool = false
			yyq4016[0] = x.Kind != ""
			yyq4016[1] = x.APIVersion != ""
			yyq4016[2] = true
			var yynn4016 int
			if yyr4016 || yy2arr4016 {
				r.EncodeArrayStart(4)
			} else {
				yynn4016 = 1
				for _, b := range yyq4016 {
					if b {
						yynn4016++
					}
				}
				r.EncodeMapStart(yynn4016)
				yynn4016 = 0
			}
			if yyr4016 || yy2arr4016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4016[0] {
					yym4018 := z.EncBinary()
					_ = yym4018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4016[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4019 := z.EncBinary()
					_ = yym4019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4016 || yy2arr4016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4016[1] {
					yym4021 := z.EncBinary()
					_ = yym4021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4016[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4022 := z.EncBinary()
					_ = yym4022
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4016 || yy2arr4016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4016[2] {
					yy4024 := &x.ListMeta
					yym4025 := z.EncBinary()
					_ = yym4025
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4024) {
					} else {
						z.EncFallback(yy4024)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4016[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4026 := &x.ListMeta
					yym4027 := z.EncBinary()
					_ = yym4027
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4026) {
					} else {
						z.EncFallback(yy4026)
					}
				}
			}
			if yyr4016 || yy2arr4016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4029 := z.EncBinary()
					_ = yym4029
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4030 := z.EncBinary()
					_ = yym4030
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr4016 || yy2arr4016 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4031 := z.DecBinary()
	_ = yym4031
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4032 := r.ContainerType()
		if yyct4032 == codecSelferValueTypeMap1234 {
			yyl4032 := r.ReadMapStart()
			if yyl4032 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4032, d)
			}
		} else if yyct4032 == codecSelferValueTypeArray1234 {
			yyl4032 := r.ReadArrayStart()
			if yyl4032 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4032, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4033Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4033Slc
	var yyhl4033 bool = l >= 0
	for yyj4033 := 0; ; yyj4033++ {
		if yyhl4033 {
			if yyj4033 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4033Slc = r.DecodeBytes(yys4033Slc, true, true)
		yys4033 := string(yys4033Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4033 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4036 := &x.ListMeta
				yym4037 := z.DecBinary()
				_ = yym4037
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4036) {
				} else {
					z.DecFallback(yyv4036, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4038 := &x.Items
				yym4039 := z.DecBinary()
				_ = yym4039
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv4038), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4033)
		} // end switch yys4033
	} // end for yyj4033
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4040 int
	var yyb4040 bool
	var yyhl4040 bool = l >= 0
	yyj4040++
	if yyhl4040 {
		yyb4040 = yyj4040 > l
	} else {
		yyb4040 = r.CheckBreak()
	}
	if yyb4040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4040++
	if yyhl4040 {
		yyb4040 = yyj4040 > l
	} else {
		yyb4040 = r.CheckBreak()
	}
	if yyb4040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4040++
	if yyhl4040 {
		yyb4040 = yyj4040 > l
	} else {
		yyb4040 = r.CheckBreak()
	}
	if yyb4040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4043 := &x.ListMeta
		yym4044 := z.DecBinary()
		_ = yym4044
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4043) {
		} else {
			z.DecFallback(yyv4043, false)
		}
	}
	yyj4040++
	if yyhl4040 {
		yyb4040 = yyj4040 > l
	} else {
		yyb4040 = r.CheckBreak()
	}
	if yyb4040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4045 := &x.Items
		yym4046 := z.DecBinary()
		_ = yym4046
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv4045), d)
		}
	}
	for {
		yyj4040++
		if yyhl4040 {
			yyb4040 = yyj4040 > l
		} else {
			yyb4040 = r.CheckBreak()
		}
		if yyb4040 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4040-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4047 := z.EncBinary()
	_ = yym4047
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4048 := z.DecBinary()
	_ = yym4048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4049 := z.EncBinary()
		_ = yym4049
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4050 := !z.EncBinary()
			yy2arr4050 := z.EncBasicHandle().StructToArray
			var yyq4050 [6]bool
			_, _, _ = yysep4050, yyq4050, yy2arr4050
			const yyr4050 bool = false
			yyq4050[0] = x.Type != ""
			yyq4050[1] = len(x.Max) != 0
			yyq4050[2] = len(x.Min) != 0
			yyq4050[3] = len(x.Default) != 0
			yyq4050[4] = len(x.DefaultRequest) != 0
			yyq4050[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn4050 int
			if yyr4050 || yy2arr4050 {
				r.EncodeArrayStart(6)
			} else {
				yynn4050 = 0
				for _, b := range yyq4050 {
					if b {
						yynn4050++
					}
				}
				r.EncodeMapStart(yynn4050)
				yynn4050 = 0
			}
			if yyr4050 || yy2arr4050 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4050[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4050[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4050 || yy2arr4050 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4050[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4050[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4050 || yy2arr4050 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4050[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4050[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4050 || yy2arr4050 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4050[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4050[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4050 || yy2arr4050 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4050[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4050[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4050 || yy2arr4050 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4050[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4050[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4050 || yy2arr4050 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4057 := z.DecBinary()
	_ = yym4057
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4058 := r.ContainerType()
		if yyct4058 == codecSelferValueTypeMap1234 {
			yyl4058 := r.ReadMapStart()
			if yyl4058 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4058, d)
			}
		} else if yyct4058 == codecSelferValueTypeArray1234 {
			yyl4058 := r.ReadArrayStart()
			if yyl4058 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4058, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4059Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4059Slc
	var yyhl4059 bool = l >= 0
	for yyj4059 := 0; ; yyj4059++ {
		if yyhl4059 {
			if yyj4059 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4059Slc = r.DecodeBytes(yys4059Slc, true, true)
		yys4059 := string(yys4059Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4059 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4061 := &x.Max
				yyv4061.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4062 := &x.Min
				yyv4062.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4063 := &x.Default
				yyv4063.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4064 := &x.DefaultRequest
				yyv4064.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4065 := &x.MaxLimitRequestRatio
				yyv4065.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4059)
		} // end switch yys4059
	} // end for yyj4059
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4066 int
	var yyb4066 bool
	var yyhl4066 bool = l >= 0
	yyj4066++
	if yyhl4066 {
		yyb4066 = yyj4066 > l
	} else {
		yyb4066 = r.CheckBreak()
	}
	if yyb4066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4066++
	if yyhl4066 {
		yyb4066 = yyj4066 > l
	} else {
		yyb4066 = r.CheckBreak()
	}
	if yyb4066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4068 := &x.Max
		yyv4068.CodecDecodeSelf(d)
	}
	yyj4066++
	if yyhl4066 {
		yyb4066 = yyj4066 > l
	} else {
		yyb4066 = r.CheckBreak()
	}
	if yyb4066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4069 := &x.Min
		yyv4069.CodecDecodeSelf(d)
	}
	yyj4066++
	if yyhl4066 {
		yyb4066 = yyj4066 > l
	} else {
		yyb4066 = r.CheckBreak()
	}
	if yyb4066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4070 := &x.Default
		yyv4070.CodecDecodeSelf(d)
	}
	yyj4066++
	if yyhl4066 {
		yyb4066 = yyj4066 > l
	} else {
		yyb4066 = r.CheckBreak()
	}
	if yyb4066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4071 := &x.DefaultRequest
		yyv4071.CodecDecodeSelf(d)
	}
	yyj4066++
	if yyhl4066 {
		yyb4066 = yyj4066 > l
	} else {
		yyb4066 = r.CheckBreak()
	}
	if yyb4066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4072 := &x.MaxLimitRequestRatio
		yyv4072.CodecDecodeSelf(d)
	}
	for {
		yyj4066++
		if yyhl4066 {
			yyb4066 = yyj4066 > l
		} else {
			yyb4066 = r.CheckBreak()
		}
		if yyb4066 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4066-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4073 := z.EncBinary()
		_ = yym4073
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4074 := !z.EncBinary()
			yy2arr4074 := z.EncBasicHandle().StructToArray
			var yyq4074 [1]bool
			_, _, _ = yysep4074, yyq4074, yy2arr4074
			const yyr4074 bool = false
			var yynn4074 int
			if yyr4074 || yy2arr4074 {
				r.EncodeArrayStart(1)
			} else {
				yynn4074 = 1
				for _, b := range yyq4074 {
					if b {
						yynn4074++
					}
				}
				r.EncodeMapStart(yynn4074)
				yynn4074 = 0
			}
			if yyr4074 || yy2arr4074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4076 := z.EncBinary()
					_ = yym4076
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4077 := z.EncBinary()
					_ = yym4077
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4074 || yy2arr4074 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4078 := z.DecBinary()
	_ = yym4078
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4079 := r.ContainerType()
		if yyct4079 == codecSelferValueTypeMap1234 {
			yyl4079 := r.ReadMapStart()
			if yyl4079 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4079, d)
			}
		} else if yyct4079 == codecSelferValueTypeArray1234 {
			yyl4079 := r.ReadArrayStart()
			if yyl4079 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4079, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4080Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4080Slc
	var yyhl4080 bool = l >= 0
	for yyj4080 := 0; ; yyj4080++ {
		if yyhl4080 {
			if yyj4080 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4080Slc = r.DecodeBytes(yys4080Slc, true, true)
		yys4080 := string(yys4080Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4080 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4081 := &x.Limits
				yym4082 := z.DecBinary()
				_ = yym4082
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4081), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4080)
		} // end switch yys4080
	} // end for yyj4080
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4083 int
	var yyb4083 bool
	var yyhl4083 bool = l >= 0
	yyj4083++
	if yyhl4083 {
		yyb4083 = yyj4083 > l
	} else {
		yyb4083 = r.CheckBreak()
	}
	if yyb4083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4084 := &x.Limits
		yym4085 := z.DecBinary()
		_ = yym4085
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4084), d)
		}
	}
	for {
		yyj4083++
		if yyhl4083 {
			yyb4083 = yyj4083 > l
		} else {
			yyb4083 = r.CheckBreak()
		}
		if yyb4083 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4083-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4086 := z.EncBinary()
		_ = yym4086
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4087 := !z.EncBinary()
			yy2arr4087 := z.EncBasicHandle().StructToArray
			var yyq4087 [4]bool
			_, _, _ = yysep4087, yyq4087, yy2arr4087
			const yyr4087 bool = false
			yyq4087[0] = x.Kind != ""
			yyq4087[1] = x.APIVersion != ""
			yyq4087[2] = true
			yyq4087[3] = true
			var yynn4087 int
			if yyr4087 || yy2arr4087 {
				r.EncodeArrayStart(4)
			} else {
				yynn4087 = 0
				for _, b := range yyq4087 {
					if b {
						yynn4087++
					}
				}
				r.EncodeMapStart(yynn4087)
				yynn4087 = 0
			}
			if yyr4087 || yy2arr4087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4087[0] {
					yym4089 := z.EncBinary()
					_ = yym4089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4087[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4090 := z.EncBinary()
					_ = yym4090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4087 || yy2arr4087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4087[1] {
					yym4092 := z.EncBinary()
					_ = yym4092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4087[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4093 := z.EncBinary()
					_ = yym4093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4087 || yy2arr4087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4087[2] {
					yy4095 := &x.ObjectMeta
					yy4095.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4087[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4096 := &x.ObjectMeta
					yy4096.CodecEncodeSelf(e)
				}
			}
			if yyr4087 || yy2arr4087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4087[3] {
					yy4098 := &x.Spec
					yy4098.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4087[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4099 := &x.Spec
					yy4099.CodecEncodeSelf(e)
				}
			}
			if yyr4087 || yy2arr4087 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4100 := z.DecBinary()
	_ = yym4100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4101 := r.ContainerType()
		if yyct4101 == codecSelferValueTypeMap1234 {
			yyl4101 := r.ReadMapStart()
			if yyl4101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4101, d)
			}
		} else if yyct4101 == codecSelferValueTypeArray1234 {
			yyl4101 := r.ReadArrayStart()
			if yyl4101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4102Slc
	var yyhl4102 bool = l >= 0
	for yyj4102 := 0; ; yyj4102++ {
		if yyhl4102 {
			if yyj4102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4102Slc = r.DecodeBytes(yys4102Slc, true, true)
		yys4102 := string(yys4102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4102 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4105 := &x.ObjectMeta
				yyv4105.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4106 := &x.Spec
				yyv4106.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4102)
		} // end switch yys4102
	} // end for yyj4102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4107 int
	var yyb4107 bool
	var yyhl4107 bool = l >= 0
	yyj4107++
	if yyhl4107 {
		yyb4107 = yyj4107 > l
	} else {
		yyb4107 = r.CheckBreak()
	}
	if yyb4107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4107++
	if yyhl4107 {
		yyb4107 = yyj4107 > l
	} else {
		yyb4107 = r.CheckBreak()
	}
	if yyb4107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4107++
	if yyhl4107 {
		yyb4107 = yyj4107 > l
	} else {
		yyb4107 = r.CheckBreak()
	}
	if yyb4107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4110 := &x.ObjectMeta
		yyv4110.CodecDecodeSelf(d)
	}
	yyj4107++
	if yyhl4107 {
		yyb4107 = yyj4107 > l
	} else {
		yyb4107 = r.CheckBreak()
	}
	if yyb4107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4111 := &x.Spec
		yyv4111.CodecDecodeSelf(d)
	}
	for {
		yyj4107++
		if yyhl4107 {
			yyb4107 = yyj4107 > l
		} else {
			yyb4107 = r.CheckBreak()
		}
		if yyb4107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4112 := z.EncBinary()
		_ = yym4112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4113 := !z.EncBinary()
			yy2arr4113 := z.EncBasicHandle().StructToArray
			var yyq4113 [4]bool
			_, _, _ = yysep4113, yyq4113, yy2arr4113
			const yyr4113 bool = false
			yyq4113[0] = x.Kind != ""
			yyq4113[1] = x.APIVersion != ""
			yyq4113[2] = true
			var yynn4113 int
			if yyr4113 || yy2arr4113 {
				r.EncodeArrayStart(4)
			} else {
				yynn4113 = 1
				for _, b := range yyq4113 {
					if b {
						yynn4113++
					}
				}
				r.EncodeMapStart(yynn4113)
				yynn4113 = 0
			}
			if yyr4113 || yy2arr4113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4113[0] {
					yym4115 := z.EncBinary()
					_ = yym4115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4113[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4116 := z.EncBinary()
					_ = yym4116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4113 || yy2arr4113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4113[1] {
					yym4118 := z.EncBinary()
					_ = yym4118
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4113[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4119 := z.EncBinary()
					_ = yym4119
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4113 || yy2arr4113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4113[2] {
					yy4121 := &x.ListMeta
					yym4122 := z.EncBinary()
					_ = yym4122
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4121) {
					} else {
						z.EncFallback(yy4121)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4113[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4123 := &x.ListMeta
					yym4124 := z.EncBinary()
					_ = yym4124
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4123) {
					} else {
						z.EncFallback(yy4123)
					}
				}
			}
			if yyr4113 || yy2arr4113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4126 := z.EncBinary()
					_ = yym4126
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4127 := z.EncBinary()
					_ = yym4127
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4113 || yy2arr4113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4128 := z.DecBinary()
	_ = yym4128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4129 := r.ContainerType()
		if yyct4129 == codecSelferValueTypeMap1234 {
			yyl4129 := r.ReadMapStart()
			if yyl4129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4129, d)
			}
		} else if yyct4129 == codecSelferValueTypeArray1234 {
			yyl4129 := r.ReadArrayStart()
			if yyl4129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4130Slc
	var yyhl4130 bool = l >= 0
	for yyj4130 := 0; ; yyj4130++ {
		if yyhl4130 {
			if yyj4130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4130Slc = r.DecodeBytes(yys4130Slc, true, true)
		yys4130 := string(yys4130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4130 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4133 := &x.ListMeta
				yym4134 := z.DecBinary()
				_ = yym4134
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4133) {
				} else {
					z.DecFallback(yyv4133, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4135 := &x.Items
				yym4136 := z.DecBinary()
				_ = yym4136
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4135), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4130)
		} // end switch yys4130
	} // end for yyj4130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4137 int
	var yyb4137 bool
	var yyhl4137 bool = l >= 0
	yyj4137++
	if yyhl4137 {
		yyb4137 = yyj4137 > l
	} else {
		yyb4137 = r.CheckBreak()
	}
	if yyb4137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4137++
	if yyhl4137 {
		yyb4137 = yyj4137 > l
	} else {
		yyb4137 = r.CheckBreak()
	}
	if yyb4137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4137++
	if yyhl4137 {
		yyb4137 = yyj4137 > l
	} else {
		yyb4137 = r.CheckBreak()
	}
	if yyb4137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4140 := &x.ListMeta
		yym4141 := z.DecBinary()
		_ = yym4141
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4140) {
		} else {
			z.DecFallback(yyv4140, false)
		}
	}
	yyj4137++
	if yyhl4137 {
		yyb4137 = yyj4137 > l
	} else {
		yyb4137 = r.CheckBreak()
	}
	if yyb4137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4142 := &x.Items
		yym4143 := z.DecBinary()
		_ = yym4143
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4142), d)
		}
	}
	for {
		yyj4137++
		if yyhl4137 {
			yyb4137 = yyj4137 > l
		} else {
			yyb4137 = r.CheckBreak()
		}
		if yyb4137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4144 := z.EncBinary()
	_ = yym4144
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4145 := z.DecBinary()
	_ = yym4145
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4146 := z.EncBinary()
		_ = yym4146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4147 := !z.EncBinary()
			yy2arr4147 := z.EncBasicHandle().StructToArray
			var yyq4147 [2]bool
			_, _, _ = yysep4147, yyq4147, yy2arr4147
			const yyr4147 bool = false
			yyq4147[0] = len(x.Hard) != 0
			yyq4147[1] = len(x.Scopes) != 0
			var yynn4147 int
			if yyr4147 || yy2arr4147 {
				r.EncodeArrayStart(2)
			} else {
				yynn4147 = 0
				for _, b := range yyq4147 {
					if b {
						yynn4147++
					}
				}
				r.EncodeMapStart(yynn4147)
				yynn4147 = 0
			}
			if yyr4147 || yy2arr4147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4147[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4147[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4147 || yy2arr4147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4147[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4150 := z.EncBinary()
						_ = yym4150
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4147[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4151 := z.EncBinary()
						_ = yym4151
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4147 || yy2arr4147 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4152 := z.DecBinary()
	_ = yym4152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4153 := r.ContainerType()
		if yyct4153 == codecSelferValueTypeMap1234 {
			yyl4153 := r.ReadMapStart()
			if yyl4153 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4153, d)
			}
		} else if yyct4153 == codecSelferValueTypeArray1234 {
			yyl4153 := r.ReadArrayStart()
			if yyl4153 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4153, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4154Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4154Slc
	var yyhl4154 bool = l >= 0
	for yyj4154 := 0; ; yyj4154++ {
		if yyhl4154 {
			if yyj4154 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4154Slc = r.DecodeBytes(yys4154Slc, true, true)
		yys4154 := string(yys4154Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4154 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4155 := &x.Hard
				yyv4155.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4156 := &x.Scopes
				yym4157 := z.DecBinary()
				_ = yym4157
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4156), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4154)
		} // end switch yys4154
	} // end for yyj4154
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4158 int
	var yyb4158 bool
	var yyhl4158 bool = l >= 0
	yyj4158++
	if yyhl4158 {
		yyb4158 = yyj4158 > l
	} else {
		yyb4158 = r.CheckBreak()
	}
	if yyb4158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4159 := &x.Hard
		yyv4159.CodecDecodeSelf(d)
	}
	yyj4158++
	if yyhl4158 {
		yyb4158 = yyj4158 > l
	} else {
		yyb4158 = r.CheckBreak()
	}
	if yyb4158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4160 := &x.Scopes
		yym4161 := z.DecBinary()
		_ = yym4161
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4160), d)
		}
	}
	for {
		yyj4158++
		if yyhl4158 {
			yyb4158 = yyj4158 > l
		} else {
			yyb4158 = r.CheckBreak()
		}
		if yyb4158 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4158-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4162 := z.EncBinary()
		_ = yym4162
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4163 := !z.EncBinary()
			yy2arr4163 := z.EncBasicHandle().StructToArray
			var yyq4163 [2]bool
			_, _, _ = yysep4163, yyq4163, yy2arr4163
			const yyr4163 bool = false
			yyq4163[0] = len(x.Hard) != 0
			yyq4163[1] = len(x.Used) != 0
			var yynn4163 int
			if yyr4163 || yy2arr4163 {
				r.EncodeArrayStart(2)
			} else {
				yynn4163 = 0
				for _, b := range yyq4163 {
					if b {
						yynn4163++
					}
				}
				r.EncodeMapStart(yynn4163)
				yynn4163 = 0
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4163[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4163[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4166 := z.DecBinary()
	_ = yym4166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4167 := r.ContainerType()
		if yyct4167 == codecSelferValueTypeMap1234 {
			yyl4167 := r.ReadMapStart()
			if yyl4167 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4167, d)
			}
		} else if yyct4167 == codecSelferValueTypeArray1234 {
			yyl4167 := r.ReadArrayStart()
			if yyl4167 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4167, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4168Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4168Slc
	var yyhl4168 bool = l >= 0
	for yyj4168 := 0; ; yyj4168++ {
		if yyhl4168 {
			if yyj4168 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4168Slc = r.DecodeBytes(yys4168Slc, true, true)
		yys4168 := string(yys4168Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4168 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4169 := &x.Hard
				yyv4169.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4170 := &x.Used
				yyv4170.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4168)
		} // end switch yys4168
	} // end for yyj4168
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4171 int
	var yyb4171 bool
	var yyhl4171 bool = l >= 0
	yyj4171++
	if yyhl4171 {
		yyb4171 = yyj4171 > l
	} else {
		yyb4171 = r.CheckBreak()
	}
	if yyb4171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4172 := &x.Hard
		yyv4172.CodecDecodeSelf(d)
	}
	yyj4171++
	if yyhl4171 {
		yyb4171 = yyj4171 > l
	} else {
		yyb4171 = r.CheckBreak()
	}
	if yyb4171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4173 := &x.Used
		yyv4173.CodecDecodeSelf(d)
	}
	for {
		yyj4171++
		if yyhl4171 {
			yyb4171 = yyj4171 > l
		} else {
			yyb4171 = r.CheckBreak()
		}
		if yyb4171 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4171-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4174 := z.EncBinary()
		_ = yym4174
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4175 := !z.EncBinary()
			yy2arr4175 := z.EncBasicHandle().StructToArray
			var yyq4175 [5]bool
			_, _, _ = yysep4175, yyq4175, yy2arr4175
			const yyr4175 bool = false
			yyq4175[0] = x.Kind != ""
			yyq4175[1] = x.APIVersion != ""
			yyq4175[2] = true
			yyq4175[3] = true
			yyq4175[4] = true
			var yynn4175 int
			if yyr4175 || yy2arr4175 {
				r.EncodeArrayStart(5)
			} else {
				yynn4175 = 0
				for _, b := range yyq4175 {
					if b {
						yynn4175++
					}
				}
				r.EncodeMapStart(yynn4175)
				yynn4175 = 0
			}
			if yyr4175 || yy2arr4175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4175[0] {
					yym4177 := z.EncBinary()
					_ = yym4177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4175[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4178 := z.EncBinary()
					_ = yym4178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4175 || yy2arr4175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4175[1] {
					yym4180 := z.EncBinary()
					_ = yym4180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4175[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4181 := z.EncBinary()
					_ = yym4181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4175 || yy2arr4175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4175[2] {
					yy4183 := &x.ObjectMeta
					yy4183.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4175[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4184 := &x.ObjectMeta
					yy4184.CodecEncodeSelf(e)
				}
			}
			if yyr4175 || yy2arr4175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4175[3] {
					yy4186 := &x.Spec
					yy4186.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4175[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4187 := &x.Spec
					yy4187.CodecEncodeSelf(e)
				}
			}
			if yyr4175 || yy2arr4175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4175[4] {
					yy4189 := &x.Status
					yy4189.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4175[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4190 := &x.Status
					yy4190.CodecEncodeSelf(e)
				}
			}
			if yyr4175 || yy2arr4175 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4191 := z.DecBinary()
	_ = yym4191
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4192 := r.ContainerType()
		if yyct4192 == codecSelferValueTypeMap1234 {
			yyl4192 := r.ReadMapStart()
			if yyl4192 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4192, d)
			}
		} else if yyct4192 == codecSelferValueTypeArray1234 {
			yyl4192 := r.ReadArrayStart()
			if yyl4192 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4192, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4193Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4193Slc
	var yyhl4193 bool = l >= 0
	for yyj4193 := 0; ; yyj4193++ {
		if yyhl4193 {
			if yyj4193 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4193Slc = r.DecodeBytes(yys4193Slc, true, true)
		yys4193 := string(yys4193Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4193 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4196 := &x.ObjectMeta
				yyv4196.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4197 := &x.Spec
				yyv4197.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4198 := &x.Status
				yyv4198.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4193)
		} // end switch yys4193
	} // end for yyj4193
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4199 int
	var yyb4199 bool
	var yyhl4199 bool = l >= 0
	yyj4199++
	if yyhl4199 {
		yyb4199 = yyj4199 > l
	} else {
		yyb4199 = r.CheckBreak()
	}
	if yyb4199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4199++
	if yyhl4199 {
		yyb4199 = yyj4199 > l
	} else {
		yyb4199 = r.CheckBreak()
	}
	if yyb4199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4199++
	if yyhl4199 {
		yyb4199 = yyj4199 > l
	} else {
		yyb4199 = r.CheckBreak()
	}
	if yyb4199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4202 := &x.ObjectMeta
		yyv4202.CodecDecodeSelf(d)
	}
	yyj4199++
	if yyhl4199 {
		yyb4199 = yyj4199 > l
	} else {
		yyb4199 = r.CheckBreak()
	}
	if yyb4199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4203 := &x.Spec
		yyv4203.CodecDecodeSelf(d)
	}
	yyj4199++
	if yyhl4199 {
		yyb4199 = yyj4199 > l
	} else {
		yyb4199 = r.CheckBreak()
	}
	if yyb4199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4204 := &x.Status
		yyv4204.CodecDecodeSelf(d)
	}
	for {
		yyj4199++
		if yyhl4199 {
			yyb4199 = yyj4199 > l
		} else {
			yyb4199 = r.CheckBreak()
		}
		if yyb4199 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4199-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4205 := z.EncBinary()
		_ = yym4205
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4206 := !z.EncBinary()
			yy2arr4206 := z.EncBasicHandle().StructToArray
			var yyq4206 [4]bool
			_, _, _ = yysep4206, yyq4206, yy2arr4206
			const yyr4206 bool = false
			yyq4206[0] = x.Kind != ""
			yyq4206[1] = x.APIVersion != ""
			yyq4206[2] = true
			var yynn4206 int
			if yyr4206 || yy2arr4206 {
				r.EncodeArrayStart(4)
			} else {
				yynn4206 = 1
				for _, b := range yyq4206 {
					if b {
						yynn4206++
					}
				}
				r.EncodeMapStart(yynn4206)
				yynn4206 = 0
			}
			if yyr4206 || yy2arr4206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4206[0] {
					yym4208 := z.EncBinary()
					_ = yym4208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4206[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4209 := z.EncBinary()
					_ = yym4209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4206 || yy2arr4206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4206[1] {
					yym4211 := z.EncBinary()
					_ = yym4211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4206[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4212 := z.EncBinary()
					_ = yym4212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4206 || yy2arr4206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4206[2] {
					yy4214 := &x.ListMeta
					yym4215 := z.EncBinary()
					_ = yym4215
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4214) {
					} else {
						z.EncFallback(yy4214)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4206[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4216 := &x.ListMeta
					yym4217 := z.EncBinary()
					_ = yym4217
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4216) {
					} else {
						z.EncFallback(yy4216)
					}
				}
			}
			if yyr4206 || yy2arr4206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4219 := z.EncBinary()
					_ = yym4219
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4220 := z.EncBinary()
					_ = yym4220
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4206 || yy2arr4206 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4221 := z.DecBinary()
	_ = yym4221
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4222 := r.ContainerType()
		if yyct4222 == codecSelferValueTypeMap1234 {
			yyl4222 := r.ReadMapStart()
			if yyl4222 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4222, d)
			}
		} else if yyct4222 == codecSelferValueTypeArray1234 {
			yyl4222 := r.ReadArrayStart()
			if yyl4222 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4222, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4223Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4223Slc
	var yyhl4223 bool = l >= 0
	for yyj4223 := 0; ; yyj4223++ {
		if yyhl4223 {
			if yyj4223 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4223Slc = r.DecodeBytes(yys4223Slc, true, true)
		yys4223 := string(yys4223Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4223 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4226 := &x.ListMeta
				yym4227 := z.DecBinary()
				_ = yym4227
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4226) {
				} else {
					z.DecFallback(yyv4226, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4228 := &x.Items
				yym4229 := z.DecBinary()
				_ = yym4229
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4228), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4223)
		} // end switch yys4223
	} // end for yyj4223
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4230 int
	var yyb4230 bool
	var yyhl4230 bool = l >= 0
	yyj4230++
	if yyhl4230 {
		yyb4230 = yyj4230 > l
	} else {
		yyb4230 = r.CheckBreak()
	}
	if yyb4230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4230++
	if yyhl4230 {
		yyb4230 = yyj4230 > l
	} else {
		yyb4230 = r.CheckBreak()
	}
	if yyb4230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4230++
	if yyhl4230 {
		yyb4230 = yyj4230 > l
	} else {
		yyb4230 = r.CheckBreak()
	}
	if yyb4230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4233 := &x.ListMeta
		yym4234 := z.DecBinary()
		_ = yym4234
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4233) {
		} else {
			z.DecFallback(yyv4233, false)
		}
	}
	yyj4230++
	if yyhl4230 {
		yyb4230 = yyj4230 > l
	} else {
		yyb4230 = r.CheckBreak()
	}
	if yyb4230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4235 := &x.Items
		yym4236 := z.DecBinary()
		_ = yym4236
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4235), d)
		}
	}
	for {
		yyj4230++
		if yyhl4230 {
			yyb4230 = yyj4230 > l
		} else {
			yyb4230 = r.CheckBreak()
		}
		if yyb4230 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4230-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4237 := z.EncBinary()
		_ = yym4237
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4238 := !z.EncBinary()
			yy2arr4238 := z.EncBasicHandle().StructToArray
			var yyq4238 [6]bool
			_, _, _ = yysep4238, yyq4238, yy2arr4238
			const yyr4238 bool = false
			yyq4238[0] = x.Kind != ""
			yyq4238[1] = x.APIVersion != ""
			yyq4238[2] = true
			yyq4238[3] = len(x.Data) != 0
			yyq4238[4] = len(x.StringData) != 0
			yyq4238[5] = x.Type != ""
			var yynn4238 int
			if yyr4238 || yy2arr4238 {
				r.EncodeArrayStart(6)
			} else {
				yynn4238 = 0
				for _, b := range yyq4238 {
					if b {
						yynn4238++
					}
				}
				r.EncodeMapStart(yynn4238)
				yynn4238 = 0
			}
			if yyr4238 || yy2arr4238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4238[0] {
					yym4240 := z.EncBinary()
					_ = yym4240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4238[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4241 := z.EncBinary()
					_ = yym4241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4238 || yy2arr4238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4238[1] {
					yym4243 := z.EncBinary()
					_ = yym4243
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4238[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4244 := z.EncBinary()
					_ = yym4244
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4238 || yy2arr4238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4238[2] {
					yy4246 := &x.ObjectMeta
					yy4246.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4238[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4247 := &x.ObjectMeta
					yy4247.CodecEncodeSelf(e)
				}
			}
			if yyr4238 || yy2arr4238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4238[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4249 := z.EncBinary()
						_ = yym4249
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4238[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4250 := z.EncBinary()
						_ = yym4250
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4238 || yy2arr4238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4238[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4252 := z.EncBinary()
						_ = yym4252
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4238[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4253 := z.EncBinary()
						_ = yym4253
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4238 || yy2arr4238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4238[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4238[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4238 || yy2arr4238 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4255 := z.DecBinary()
	_ = yym4255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4256 := r.ContainerType()
		if yyct4256 == codecSelferValueTypeMap1234 {
			yyl4256 := r.ReadMapStart()
			if yyl4256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4256, d)
			}
		} else if yyct4256 == codecSelferValueTypeArray1234 {
			yyl4256 := r.ReadArrayStart()
			if yyl4256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4257Slc
	var yyhl4257 bool = l >= 0
	for yyj4257 := 0; ; yyj4257++ {
		if yyhl4257 {
			if yyj4257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4257Slc = r.DecodeBytes(yys4257Slc, true, true)
		yys4257 := string(yys4257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4257 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4260 := &x.ObjectMeta
				yyv4260.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4261 := &x.Data
				yym4262 := z.DecBinary()
				_ = yym4262
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4261), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4263 := &x.StringData
				yym4264 := z.DecBinary()
				_ = yym4264
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4263, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4257)
		} // end switch yys4257
	} // end for yyj4257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4266 int
	var yyb4266 bool
	var yyhl4266 bool = l >= 0
	yyj4266++
	if yyhl4266 {
		yyb4266 = yyj4266 > l
	} else {
		yyb4266 = r.CheckBreak()
	}
	if yyb4266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4266++
	if yyhl4266 {
		yyb4266 = yyj4266 > l
	} else {
		yyb4266 = r.CheckBreak()
	}
	if yyb4266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4266++
	if yyhl4266 {
		yyb4266 = yyj4266 > l
	} else {
		yyb4266 = r.CheckBreak()
	}
	if yyb4266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4269 := &x.ObjectMeta
		yyv4269.CodecDecodeSelf(d)
	}
	yyj4266++
	if yyhl4266 {
		yyb4266 = yyj4266 > l
	} else {
		yyb4266 = r.CheckBreak()
	}
	if yyb4266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4270 := &x.Data
		yym4271 := z.DecBinary()
		_ = yym4271
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4270), d)
		}
	}
	yyj4266++
	if yyhl4266 {
		yyb4266 = yyj4266 > l
	} else {
		yyb4266 = r.CheckBreak()
	}
	if yyb4266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4272 := &x.StringData
		yym4273 := z.DecBinary()
		_ = yym4273
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4272, false, d)
		}
	}
	yyj4266++
	if yyhl4266 {
		yyb4266 = yyj4266 > l
	} else {
		yyb4266 = r.CheckBreak()
	}
	if yyb4266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4266++
		if yyhl4266 {
			yyb4266 = yyj4266 > l
		} else {
			yyb4266 = r.CheckBreak()
		}
		if yyb4266 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4266-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4275 := z.EncBinary()
	_ = yym4275
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4276 := z.DecBinary()
	_ = yym4276
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4277 := z.EncBinary()
		_ = yym4277
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4278 := !z.EncBinary()
			yy2arr4278 := z.EncBasicHandle().StructToArray
			var yyq4278 [4]bool
			_, _, _ = yysep4278, yyq4278, yy2arr4278
			const yyr4278 bool = false
			yyq4278[0] = x.Kind != ""
			yyq4278[1] = x.APIVersion != ""
			yyq4278[2] = true
			var yynn4278 int
			if yyr4278 || yy2arr4278 {
				r.EncodeArrayStart(4)
			} else {
				yynn4278 = 1
				for _, b := range yyq4278 {
					if b {
						yynn4278++
					}
				}
				r.EncodeMapStart(yynn4278)
				yynn4278 = 0
			}
			if yyr4278 || yy2arr4278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4278[0] {
					yym4280 := z.EncBinary()
					_ = yym4280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4278[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4281 := z.EncBinary()
					_ = yym4281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4278 || yy2arr4278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4278[1] {
					yym4283 := z.EncBinary()
					_ = yym4283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4278[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4284 := z.EncBinary()
					_ = yym4284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4278 || yy2arr4278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4278[2] {
					yy4286 := &x.ListMeta
					yym4287 := z.EncBinary()
					_ = yym4287
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4286) {
					} else {
						z.EncFallback(yy4286)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4278[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4288 := &x.ListMeta
					yym4289 := z.EncBinary()
					_ = yym4289
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4288) {
					} else {
						z.EncFallback(yy4288)
					}
				}
			}
			if yyr4278 || yy2arr4278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4291 := z.EncBinary()
					_ = yym4291
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4292 := z.EncBinary()
					_ = yym4292
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4278 || yy2arr4278 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4293 := z.DecBinary()
	_ = yym4293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4294 := r.ContainerType()
		if yyct4294 == codecSelferValueTypeMap1234 {
			yyl4294 := r.ReadMapStart()
			if yyl4294 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4294, d)
			}
		} else if yyct4294 == codecSelferValueTypeArray1234 {
			yyl4294 := r.ReadArrayStart()
			if yyl4294 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4295Slc
	var yyhl4295 bool = l >= 0
	for yyj4295 := 0; ; yyj4295++ {
		if yyhl4295 {
			if yyj4295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4295Slc = r.DecodeBytes(yys4295Slc, true, true)
		yys4295 := string(yys4295Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4295 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4298 := &x.ListMeta
				yym4299 := z.DecBinary()
				_ = yym4299
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4298) {
				} else {
					z.DecFallback(yyv4298, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4300 := &x.Items
				yym4301 := z.DecBinary()
				_ = yym4301
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4300), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4295)
		} // end switch yys4295
	} // end for yyj4295
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4302 int
	var yyb4302 bool
	var yyhl4302 bool = l >= 0
	yyj4302++
	if yyhl4302 {
		yyb4302 = yyj4302 > l
	} else {
		yyb4302 = r.CheckBreak()
	}
	if yyb4302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4302++
	if yyhl4302 {
		yyb4302 = yyj4302 > l
	} else {
		yyb4302 = r.CheckBreak()
	}
	if yyb4302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4302++
	if yyhl4302 {
		yyb4302 = yyj4302 > l
	} else {
		yyb4302 = r.CheckBreak()
	}
	if yyb4302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4305 := &x.ListMeta
		yym4306 := z.DecBinary()
		_ = yym4306
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4305) {
		} else {
			z.DecFallback(yyv4305, false)
		}
	}
	yyj4302++
	if yyhl4302 {
		yyb4302 = yyj4302 > l
	} else {
		yyb4302 = r.CheckBreak()
	}
	if yyb4302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4307 := &x.Items
		yym4308 := z.DecBinary()
		_ = yym4308
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4307), d)
		}
	}
	for {
		yyj4302++
		if yyhl4302 {
			yyb4302 = yyj4302 > l
		} else {
			yyb4302 = r.CheckBreak()
		}
		if yyb4302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4309 := z.EncBinary()
		_ = yym4309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4310 := !z.EncBinary()
			yy2arr4310 := z.EncBasicHandle().StructToArray
			var yyq4310 [4]bool
			_, _, _ = yysep4310, yyq4310, yy2arr4310
			const yyr4310 bool = false
			yyq4310[0] = x.Kind != ""
			yyq4310[1] = x.APIVersion != ""
			yyq4310[2] = true
			yyq4310[3] = len(x.Data) != 0
			var yynn4310 int
			if yyr4310 || yy2arr4310 {
				r.EncodeArrayStart(4)
			} else {
				yynn4310 = 0
				for _, b := range yyq4310 {
					if b {
						yynn4310++
					}
				}
				r.EncodeMapStart(yynn4310)
				yynn4310 = 0
			}
			if yyr4310 || yy2arr4310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4310[0] {
					yym4312 := z.EncBinary()
					_ = yym4312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4310[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4313 := z.EncBinary()
					_ = yym4313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4310 || yy2arr4310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4310[1] {
					yym4315 := z.EncBinary()
					_ = yym4315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4310[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4316 := z.EncBinary()
					_ = yym4316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4310 || yy2arr4310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4310[2] {
					yy4318 := &x.ObjectMeta
					yy4318.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4310[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4319 := &x.ObjectMeta
					yy4319.CodecEncodeSelf(e)
				}
			}
			if yyr4310 || yy2arr4310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4310[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4321 := z.EncBinary()
						_ = yym4321
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4310[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4322 := z.EncBinary()
						_ = yym4322
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4310 || yy2arr4310 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4323 := z.DecBinary()
	_ = yym4323
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4324 := r.ContainerType()
		if yyct4324 == codecSelferValueTypeMap1234 {
			yyl4324 := r.ReadMapStart()
			if yyl4324 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4324, d)
			}
		} else if yyct4324 == codecSelferValueTypeArray1234 {
			yyl4324 := r.ReadArrayStart()
			if yyl4324 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4324, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4325Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4325Slc
	var yyhl4325 bool = l >= 0
	for yyj4325 := 0; ; yyj4325++ {
		if yyhl4325 {
			if yyj4325 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4325Slc = r.DecodeBytes(yys4325Slc, true, true)
		yys4325 := string(yys4325Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4325 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4328 := &x.ObjectMeta
				yyv4328.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4329 := &x.Data
				yym4330 := z.DecBinary()
				_ = yym4330
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4329, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4325)
		} // end switch yys4325
	} // end for yyj4325
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4331 int
	var yyb4331 bool
	var yyhl4331 bool = l >= 0
	yyj4331++
	if yyhl4331 {
		yyb4331 = yyj4331 > l
	} else {
		yyb4331 = r.CheckBreak()
	}
	if yyb4331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4331++
	if yyhl4331 {
		yyb4331 = yyj4331 > l
	} else {
		yyb4331 = r.CheckBreak()
	}
	if yyb4331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4331++
	if yyhl4331 {
		yyb4331 = yyj4331 > l
	} else {
		yyb4331 = r.CheckBreak()
	}
	if yyb4331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4334 := &x.ObjectMeta
		yyv4334.CodecDecodeSelf(d)
	}
	yyj4331++
	if yyhl4331 {
		yyb4331 = yyj4331 > l
	} else {
		yyb4331 = r.CheckBreak()
	}
	if yyb4331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4335 := &x.Data
		yym4336 := z.DecBinary()
		_ = yym4336
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4335, false, d)
		}
	}
	for {
		yyj4331++
		if yyhl4331 {
			yyb4331 = yyj4331 > l
		} else {
			yyb4331 = r.CheckBreak()
		}
		if yyb4331 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4331-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4337 := z.EncBinary()
		_ = yym4337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4338 := !z.EncBinary()
			yy2arr4338 := z.EncBasicHandle().StructToArray
			var yyq4338 [4]bool
			_, _, _ = yysep4338, yyq4338, yy2arr4338
			const yyr4338 bool = false
			yyq4338[0] = x.Kind != ""
			yyq4338[1] = x.APIVersion != ""
			yyq4338[2] = true
			var yynn4338 int
			if yyr4338 || yy2arr4338 {
				r.EncodeArrayStart(4)
			} else {
				yynn4338 = 1
				for _, b := range yyq4338 {
					if b {
						yynn4338++
					}
				}
				r.EncodeMapStart(yynn4338)
				yynn4338 = 0
			}
			if yyr4338 || yy2arr4338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4338[0] {
					yym4340 := z.EncBinary()
					_ = yym4340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4341 := z.EncBinary()
					_ = yym4341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4338 || yy2arr4338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4338[1] {
					yym4343 := z.EncBinary()
					_ = yym4343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4338[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4344 := z.EncBinary()
					_ = yym4344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4338 || yy2arr4338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4338[2] {
					yy4346 := &x.ListMeta
					yym4347 := z.EncBinary()
					_ = yym4347
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4346) {
					} else {
						z.EncFallback(yy4346)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4338[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4348 := &x.ListMeta
					yym4349 := z.EncBinary()
					_ = yym4349
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4348) {
					} else {
						z.EncFallback(yy4348)
					}
				}
			}
			if yyr4338 || yy2arr4338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4351 := z.EncBinary()
					_ = yym4351
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4352 := z.EncBinary()
					_ = yym4352
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4338 || yy2arr4338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4353 := z.DecBinary()
	_ = yym4353
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4354 := r.ContainerType()
		if yyct4354 == codecSelferValueTypeMap1234 {
			yyl4354 := r.ReadMapStart()
			if yyl4354 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4354, d)
			}
		} else if yyct4354 == codecSelferValueTypeArray1234 {
			yyl4354 := r.ReadArrayStart()
			if yyl4354 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4354, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4355Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4355Slc
	var yyhl4355 bool = l >= 0
	for yyj4355 := 0; ; yyj4355++ {
		if yyhl4355 {
			if yyj4355 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4355Slc = r.DecodeBytes(yys4355Slc, true, true)
		yys4355 := string(yys4355Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4355 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4358 := &x.ListMeta
				yym4359 := z.DecBinary()
				_ = yym4359
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4358) {
				} else {
					z.DecFallback(yyv4358, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4360 := &x.Items
				yym4361 := z.DecBinary()
				_ = yym4361
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4360), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4355)
		} // end switch yys4355
	} // end for yyj4355
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4362 int
	var yyb4362 bool
	var yyhl4362 bool = l >= 0
	yyj4362++
	if yyhl4362 {
		yyb4362 = yyj4362 > l
	} else {
		yyb4362 = r.CheckBreak()
	}
	if yyb4362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4362++
	if yyhl4362 {
		yyb4362 = yyj4362 > l
	} else {
		yyb4362 = r.CheckBreak()
	}
	if yyb4362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4362++
	if yyhl4362 {
		yyb4362 = yyj4362 > l
	} else {
		yyb4362 = r.CheckBreak()
	}
	if yyb4362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4365 := &x.ListMeta
		yym4366 := z.DecBinary()
		_ = yym4366
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4365) {
		} else {
			z.DecFallback(yyv4365, false)
		}
	}
	yyj4362++
	if yyhl4362 {
		yyb4362 = yyj4362 > l
	} else {
		yyb4362 = r.CheckBreak()
	}
	if yyb4362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4367 := &x.Items
		yym4368 := z.DecBinary()
		_ = yym4368
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4367), d)
		}
	}
	for {
		yyj4362++
		if yyhl4362 {
			yyb4362 = yyj4362 > l
		} else {
			yyb4362 = r.CheckBreak()
		}
		if yyb4362 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4362-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4369 := z.EncBinary()
	_ = yym4369
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4370 := z.DecBinary()
	_ = yym4370
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4371 := z.EncBinary()
		_ = yym4371
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4372 := !z.EncBinary()
			yy2arr4372 := z.EncBasicHandle().StructToArray
			var yyq4372 [4]bool
			_, _, _ = yysep4372, yyq4372, yy2arr4372
			const yyr4372 bool = false
			yyq4372[2] = x.Message != ""
			yyq4372[3] = x.Error != ""
			var yynn4372 int
			if yyr4372 || yy2arr4372 {
				r.EncodeArrayStart(4)
			} else {
				yynn4372 = 2
				for _, b := range yyq4372 {
					if b {
						yynn4372++
					}
				}
				r.EncodeMapStart(yynn4372)
				yynn4372 = 0
			}
			if yyr4372 || yy2arr4372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4372 || yy2arr4372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4372 || yy2arr4372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4372[2] {
					yym4376 := z.EncBinary()
					_ = yym4376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4372[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4377 := z.EncBinary()
					_ = yym4377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4372 || yy2arr4372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4372[3] {
					yym4379 := z.EncBinary()
					_ = yym4379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4372[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4380 := z.EncBinary()
					_ = yym4380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4372 || yy2arr4372 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4381 := z.DecBinary()
	_ = yym4381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4382 := r.ContainerType()
		if yyct4382 == codecSelferValueTypeMap1234 {
			yyl4382 := r.ReadMapStart()
			if yyl4382 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4382, d)
			}
		} else if yyct4382 == codecSelferValueTypeArray1234 {
			yyl4382 := r.ReadArrayStart()
			if yyl4382 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4382, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4383Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4383Slc
	var yyhl4383 bool = l >= 0
	for yyj4383 := 0; ; yyj4383++ {
		if yyhl4383 {
			if yyj4383 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4383Slc = r.DecodeBytes(yys4383Slc, true, true)
		yys4383 := string(yys4383Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4383 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4383)
		} // end switch yys4383
	} // end for yyj4383
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4388 int
	var yyb4388 bool
	var yyhl4388 bool = l >= 0
	yyj4388++
	if yyhl4388 {
		yyb4388 = yyj4388 > l
	} else {
		yyb4388 = r.CheckBreak()
	}
	if yyb4388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4388++
	if yyhl4388 {
		yyb4388 = yyj4388 > l
	} else {
		yyb4388 = r.CheckBreak()
	}
	if yyb4388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4388++
	if yyhl4388 {
		yyb4388 = yyj4388 > l
	} else {
		yyb4388 = r.CheckBreak()
	}
	if yyb4388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4388++
	if yyhl4388 {
		yyb4388 = yyj4388 > l
	} else {
		yyb4388 = r.CheckBreak()
	}
	if yyb4388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4388++
		if yyhl4388 {
			yyb4388 = yyj4388 > l
		} else {
			yyb4388 = r.CheckBreak()
		}
		if yyb4388 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4388-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4393 := z.EncBinary()
		_ = yym4393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4394 := !z.EncBinary()
			yy2arr4394 := z.EncBasicHandle().StructToArray
			var yyq4394 [4]bool
			_, _, _ = yysep4394, yyq4394, yy2arr4394
			const yyr4394 bool = false
			yyq4394[0] = x.Kind != ""
			yyq4394[1] = x.APIVersion != ""
			yyq4394[2] = true
			yyq4394[3] = len(x.Conditions) != 0
			var yynn4394 int
			if yyr4394 || yy2arr4394 {
				r.EncodeArrayStart(4)
			} else {
				yynn4394 = 0
				for _, b := range yyq4394 {
					if b {
						yynn4394++
					}
				}
				r.EncodeMapStart(yynn4394)
				yynn4394 = 0
			}
			if yyr4394 || yy2arr4394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4394[0] {
					yym4396 := z.EncBinary()
					_ = yym4396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4394[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4397 := z.EncBinary()
					_ = yym4397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4394 || yy2arr4394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4394[1] {
					yym4399 := z.EncBinary()
					_ = yym4399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4394[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4400 := z.EncBinary()
					_ = yym4400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4394 || yy2arr4394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4394[2] {
					yy4402 := &x.ObjectMeta
					yy4402.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4394[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4403 := &x.ObjectMeta
					yy4403.CodecEncodeSelf(e)
				}
			}
			if yyr4394 || yy2arr4394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4394[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4405 := z.EncBinary()
						_ = yym4405
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4394[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4406 := z.EncBinary()
						_ = yym4406
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4394 || yy2arr4394 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4407 := z.DecBinary()
	_ = yym4407
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4408 := r.ContainerType()
		if yyct4408 == codecSelferValueTypeMap1234 {
			yyl4408 := r.ReadMapStart()
			if yyl4408 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4408, d)
			}
		} else if yyct4408 == codecSelferValueTypeArray1234 {
			yyl4408 := r.ReadArrayStart()
			if yyl4408 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4408, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4409Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4409Slc
	var yyhl4409 bool = l >= 0
	for yyj4409 := 0; ; yyj4409++ {
		if yyhl4409 {
			if yyj4409 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4409Slc = r.DecodeBytes(yys4409Slc, true, true)
		yys4409 := string(yys4409Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4409 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4412 := &x.ObjectMeta
				yyv4412.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4413 := &x.Conditions
				yym4414 := z.DecBinary()
				_ = yym4414
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4413), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4409)
		} // end switch yys4409
	} // end for yyj4409
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4415 int
	var yyb4415 bool
	var yyhl4415 bool = l >= 0
	yyj4415++
	if yyhl4415 {
		yyb4415 = yyj4415 > l
	} else {
		yyb4415 = r.CheckBreak()
	}
	if yyb4415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4415++
	if yyhl4415 {
		yyb4415 = yyj4415 > l
	} else {
		yyb4415 = r.CheckBreak()
	}
	if yyb4415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4415++
	if yyhl4415 {
		yyb4415 = yyj4415 > l
	} else {
		yyb4415 = r.CheckBreak()
	}
	if yyb4415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4418 := &x.ObjectMeta
		yyv4418.CodecDecodeSelf(d)
	}
	yyj4415++
	if yyhl4415 {
		yyb4415 = yyj4415 > l
	} else {
		yyb4415 = r.CheckBreak()
	}
	if yyb4415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4419 := &x.Conditions
		yym4420 := z.DecBinary()
		_ = yym4420
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4419), d)
		}
	}
	for {
		yyj4415++
		if yyhl4415 {
			yyb4415 = yyj4415 > l
		} else {
			yyb4415 = r.CheckBreak()
		}
		if yyb4415 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4415-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4421 := z.EncBinary()
		_ = yym4421
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4422 := !z.EncBinary()
			yy2arr4422 := z.EncBasicHandle().StructToArray
			var yyq4422 [4]bool
			_, _, _ = yysep4422, yyq4422, yy2arr4422
			const yyr4422 bool = false
			yyq4422[0] = x.Kind != ""
			yyq4422[1] = x.APIVersion != ""
			yyq4422[2] = true
			var yynn4422 int
			if yyr4422 || yy2arr4422 {
				r.EncodeArrayStart(4)
			} else {
				yynn4422 = 1
				for _, b := range yyq4422 {
					if b {
						yynn4422++
					}
				}
				r.EncodeMapStart(yynn4422)
				yynn4422 = 0
			}
			if yyr4422 || yy2arr4422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4422[0] {
					yym4424 := z.EncBinary()
					_ = yym4424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4422[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4425 := z.EncBinary()
					_ = yym4425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4422 || yy2arr4422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4422[1] {
					yym4427 := z.EncBinary()
					_ = yym4427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4422[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4428 := z.EncBinary()
					_ = yym4428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4422 || yy2arr4422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4422[2] {
					yy4430 := &x.ListMeta
					yym4431 := z.EncBinary()
					_ = yym4431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4430) {
					} else {
						z.EncFallback(yy4430)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4422[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4432 := &x.ListMeta
					yym4433 := z.EncBinary()
					_ = yym4433
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4432) {
					} else {
						z.EncFallback(yy4432)
					}
				}
			}
			if yyr4422 || yy2arr4422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4435 := z.EncBinary()
					_ = yym4435
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4436 := z.EncBinary()
					_ = yym4436
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4422 || yy2arr4422 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4437 := z.DecBinary()
	_ = yym4437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4438 := r.ContainerType()
		if yyct4438 == codecSelferValueTypeMap1234 {
			yyl4438 := r.ReadMapStart()
			if yyl4438 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4438, d)
			}
		} else if yyct4438 == codecSelferValueTypeArray1234 {
			yyl4438 := r.ReadArrayStart()
			if yyl4438 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4438, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4439Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4439Slc
	var yyhl4439 bool = l >= 0
	for yyj4439 := 0; ; yyj4439++ {
		if yyhl4439 {
			if yyj4439 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4439Slc = r.DecodeBytes(yys4439Slc, true, true)
		yys4439 := string(yys4439Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4439 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4442 := &x.ListMeta
				yym4443 := z.DecBinary()
				_ = yym4443
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4442) {
				} else {
					z.DecFallback(yyv4442, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4444 := &x.Items
				yym4445 := z.DecBinary()
				_ = yym4445
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4444), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4439)
		} // end switch yys4439
	} // end for yyj4439
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4446 int
	var yyb4446 bool
	var yyhl4446 bool = l >= 0
	yyj4446++
	if yyhl4446 {
		yyb4446 = yyj4446 > l
	} else {
		yyb4446 = r.CheckBreak()
	}
	if yyb4446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4446++
	if yyhl4446 {
		yyb4446 = yyj4446 > l
	} else {
		yyb4446 = r.CheckBreak()
	}
	if yyb4446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4446++
	if yyhl4446 {
		yyb4446 = yyj4446 > l
	} else {
		yyb4446 = r.CheckBreak()
	}
	if yyb4446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4449 := &x.ListMeta
		yym4450 := z.DecBinary()
		_ = yym4450
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4449) {
		} else {
			z.DecFallback(yyv4449, false)
		}
	}
	yyj4446++
	if yyhl4446 {
		yyb4446 = yyj4446 > l
	} else {
		yyb4446 = r.CheckBreak()
	}
	if yyb4446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4451 := &x.Items
		yym4452 := z.DecBinary()
		_ = yym4452
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4451), d)
		}
	}
	for {
		yyj4446++
		if yyhl4446 {
			yyb4446 = yyj4446 > l
		} else {
			yyb4446 = r.CheckBreak()
		}
		if yyb4446 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4446-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4453 := z.EncBinary()
		_ = yym4453
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4454 := !z.EncBinary()
			yy2arr4454 := z.EncBasicHandle().StructToArray
			var yyq4454 [2]bool
			_, _, _ = yysep4454, yyq4454, yy2arr4454
			const yyr4454 bool = false
			yyq4454[0] = len(x.Items) != 0
			yyq4454[1] = x.DefaultMode != nil
			var yynn4454 int
			if yyr4454 || yy2arr4454 {
				r.EncodeArrayStart(2)
			} else {
				yynn4454 = 0
				for _, b := range yyq4454 {
					if b {
						yynn4454++
					}
				}
				r.EncodeMapStart(yynn4454)
				yynn4454 = 0
			}
			if yyr4454 || yy2arr4454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4454[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4456 := z.EncBinary()
						_ = yym4456
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4454[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4457 := z.EncBinary()
						_ = yym4457
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4454 || yy2arr4454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4454[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4459 := *x.DefaultMode
						yym4460 := z.EncBinary()
						_ = yym4460
						if false {
						} else {
							r.EncodeInt(int64(yy4459))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4454[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4461 := *x.DefaultMode
						yym4462 := z.EncBinary()
						_ = yym4462
						if false {
						} else {
							r.EncodeInt(int64(yy4461))
						}
					}
				}
			}
			if yyr4454 || yy2arr4454 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4463 := z.DecBinary()
	_ = yym4463
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4464 := r.ContainerType()
		if yyct4464 == codecSelferValueTypeMap1234 {
			yyl4464 := r.ReadMapStart()
			if yyl4464 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4464, d)
			}
		} else if yyct4464 == codecSelferValueTypeArray1234 {
			yyl4464 := r.ReadArrayStart()
			if yyl4464 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4464, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4465Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4465Slc
	var yyhl4465 bool = l >= 0
	for yyj4465 := 0; ; yyj4465++ {
		if yyhl4465 {
			if yyj4465 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4465Slc = r.DecodeBytes(yys4465Slc, true, true)
		yys4465 := string(yys4465Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4465 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4466 := &x.Items
				yym4467 := z.DecBinary()
				_ = yym4467
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4466), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym4469 := z.DecBinary()
				_ = yym4469
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4465)
		} // end switch yys4465
	} // end for yyj4465
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4470 int
	var yyb4470 bool
	var yyhl4470 bool = l >= 0
	yyj4470++
	if yyhl4470 {
		yyb4470 = yyj4470 > l
	} else {
		yyb4470 = r.CheckBreak()
	}
	if yyb4470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4471 := &x.Items
		yym4472 := z.DecBinary()
		_ = yym4472
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4471), d)
		}
	}
	yyj4470++
	if yyhl4470 {
		yyb4470 = yyj4470 > l
	} else {
		yyb4470 = r.CheckBreak()
	}
	if yyb4470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym4474 := z.DecBinary()
		_ = yym4474
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4470++
		if yyhl4470 {
			yyb4470 = yyj4470 > l
		} else {
			yyb4470 = r.CheckBreak()
		}
		if yyb4470 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4470-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4475 := z.EncBinary()
		_ = yym4475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4476 := !z.EncBinary()
			yy2arr4476 := z.EncBasicHandle().StructToArray
			var yyq4476 [4]bool
			_, _, _ = yysep4476, yyq4476, yy2arr4476
			const yyr4476 bool = false
			yyq4476[1] = x.FieldRef != nil
			yyq4476[2] = x.ResourceFieldRef != nil
			yyq4476[3] = x.Mode != nil
			var yynn4476 int
			if yyr4476 || yy2arr4476 {
				r.EncodeArrayStart(4)
			} else {
				yynn4476 = 1
				for _, b := range yyq4476 {
					if b {
						yynn4476++
					}
				}
				r.EncodeMapStart(yynn4476)
				yynn4476 = 0
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4478 := z.EncBinary()
				_ = yym4478
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4479 := z.EncBinary()
				_ = yym4479
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4476[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4476[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4476[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4483 := *x.Mode
						yym4484 := z.EncBinary()
						_ = yym4484
						if false {
						} else {
							r.EncodeInt(int64(yy4483))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4476[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4485 := *x.Mode
						yym4486 := z.EncBinary()
						_ = yym4486
						if false {
						} else {
							r.EncodeInt(int64(yy4485))
						}
					}
				}
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4487 := z.DecBinary()
	_ = yym4487
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4488 := r.ContainerType()
		if yyct4488 == codecSelferValueTypeMap1234 {
			yyl4488 := r.ReadMapStart()
			if yyl4488 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4488, d)
			}
		} else if yyct4488 == codecSelferValueTypeArray1234 {
			yyl4488 := r.ReadArrayStart()
			if yyl4488 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4488, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4489Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4489Slc
	var yyhl4489 bool = l >= 0
	for yyj4489 := 0; ; yyj4489++ {
		if yyhl4489 {
			if yyj4489 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4489Slc = r.DecodeBytes(yys4489Slc, true, true)
		yys4489 := string(yys4489Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4489 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym4494 := z.DecBinary()
				_ = yym4494
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4489)
		} // end switch yys4489
	} // end for yyj4489
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4495 int
	var yyb4495 bool
	var yyhl4495 bool = l >= 0
	yyj4495++
	if yyhl4495 {
		yyb4495 = yyj4495 > l
	} else {
		yyb4495 = r.CheckBreak()
	}
	if yyb4495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4495++
	if yyhl4495 {
		yyb4495 = yyj4495 > l
	} else {
		yyb4495 = r.CheckBreak()
	}
	if yyb4495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4495++
	if yyhl4495 {
		yyb4495 = yyj4495 > l
	} else {
		yyb4495 = r.CheckBreak()
	}
	if yyb4495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj4495++
	if yyhl4495 {
		yyb4495 = yyj4495 > l
	} else {
		yyb4495 = r.CheckBreak()
	}
	if yyb4495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym4500 := z.DecBinary()
		_ = yym4500
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4495++
		if yyhl4495 {
			yyb4495 = yyj4495 > l
		} else {
			yyb4495 = r.CheckBreak()
		}
		if yyb4495 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4495-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4501 := z.EncBinary()
		_ = yym4501
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4502 := !z.EncBinary()
			yy2arr4502 := z.EncBasicHandle().StructToArray
			var yyq4502 [6]bool
			_, _, _ = yysep4502, yyq4502, yy2arr4502
			const yyr4502 bool = false
			yyq4502[0] = x.Capabilities != nil
			yyq4502[1] = x.Privileged != nil
			yyq4502[2] = x.SELinuxOptions != nil
			yyq4502[3] = x.RunAsUser != nil
			yyq4502[4] = x.RunAsNonRoot != nil
			yyq4502[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4502 int
			if yyr4502 || yy2arr4502 {
				r.EncodeArrayStart(6)
			} else {
				yynn4502 = 0
				for _, b := range yyq4502 {
					if b {
						yynn4502++
					}
				}
				r.EncodeMapStart(yynn4502)
				yynn4502 = 0
			}
			if yyr4502 || yy2arr4502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4502[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4502[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4502 || yy2arr4502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4502[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4505 := *x.Privileged
						yym4506 := z.EncBinary()
						_ = yym4506
						if false {
						} else {
							r.EncodeBool(bool(yy4505))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4502[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4507 := *x.Privileged
						yym4508 := z.EncBinary()
						_ = yym4508
						if false {
						} else {
							r.EncodeBool(bool(yy4507))
						}
					}
				}
			}
			if yyr4502 || yy2arr4502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4502[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4502[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4502 || yy2arr4502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4502[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4511 := *x.RunAsUser
						yym4512 := z.EncBinary()
						_ = yym4512
						if false {
						} else {
							r.EncodeInt(int64(yy4511))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4502[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4513 := *x.RunAsUser
						yym4514 := z.EncBinary()
						_ = yym4514
						if false {
						} else {
							r.EncodeInt(int64(yy4513))
						}
					}
				}
			}
			if yyr4502 || yy2arr4502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4502[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4516 := *x.RunAsNonRoot
						yym4517 := z.EncBinary()
						_ = yym4517
						if false {
						} else {
							r.EncodeBool(bool(yy4516))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4502[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4518 := *x.RunAsNonRoot
						yym4519 := z.EncBinary()
						_ = yym4519
						if false {
						} else {
							r.EncodeBool(bool(yy4518))
						}
					}
				}
			}
			if yyr4502 || yy2arr4502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4502[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4521 := *x.ReadOnlyRootFilesystem
						yym4522 := z.EncBinary()
						_ = yym4522
						if false {
						} else {
							r.EncodeBool(bool(yy4521))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4502[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4523 := *x.ReadOnlyRootFilesystem
						yym4524 := z.EncBinary()
						_ = yym4524
						if false {
						} else {
							r.EncodeBool(bool(yy4523))
						}
					}
				}
			}
			if yyr4502 || yy2arr4502 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4525 := z.DecBinary()
	_ = yym4525
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4526 := r.ContainerType()
		if yyct4526 == codecSelferValueTypeMap1234 {
			yyl4526 := r.ReadMapStart()
			if yyl4526 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4526, d)
			}
		} else if yyct4526 == codecSelferValueTypeArray1234 {
			yyl4526 := r.ReadArrayStart()
			if yyl4526 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4526, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4527Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4527Slc
	var yyhl4527 bool = l >= 0
	for yyj4527 := 0; ; yyj4527++ {
		if yyhl4527 {
			if yyj4527 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4527Slc = r.DecodeBytes(yys4527Slc, true, true)
		yys4527 := string(yys4527Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4527 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4530 := z.DecBinary()
				_ = yym4530
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4533 := z.DecBinary()
				_ = yym4533
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4535 := z.DecBinary()
				_ = yym4535
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4537 := z.DecBinary()
				_ = yym4537
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4527)
		} // end switch yys4527
	} // end for yyj4527
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4538 int
	var yyb4538 bool
	var yyhl4538 bool = l >= 0
	yyj4538++
	if yyhl4538 {
		yyb4538 = yyj4538 > l
	} else {
		yyb4538 = r.CheckBreak()
	}
	if yyb4538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4538++
	if yyhl4538 {
		yyb4538 = yyj4538 > l
	} else {
		yyb4538 = r.CheckBreak()
	}
	if yyb4538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4541 := z.DecBinary()
		_ = yym4541
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4538++
	if yyhl4538 {
		yyb4538 = yyj4538 > l
	} else {
		yyb4538 = r.CheckBreak()
	}
	if yyb4538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4538++
	if yyhl4538 {
		yyb4538 = yyj4538 > l
	} else {
		yyb4538 = r.CheckBreak()
	}
	if yyb4538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4544 := z.DecBinary()
		_ = yym4544
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4538++
	if yyhl4538 {
		yyb4538 = yyj4538 > l
	} else {
		yyb4538 = r.CheckBreak()
	}
	if yyb4538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4546 := z.DecBinary()
		_ = yym4546
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4538++
	if yyhl4538 {
		yyb4538 = yyj4538 > l
	} else {
		yyb4538 = r.CheckBreak()
	}
	if yyb4538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4548 := z.DecBinary()
		_ = yym4548
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4538++
		if yyhl4538 {
			yyb4538 = yyj4538 > l
		} else {
			yyb4538 = r.CheckBreak()
		}
		if yyb4538 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4538-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4549 := z.EncBinary()
		_ = yym4549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4550 := !z.EncBinary()
			yy2arr4550 := z.EncBasicHandle().StructToArray
			var yyq4550 [4]bool
			_, _, _ = yysep4550, yyq4550, yy2arr4550
			const yyr4550 bool = false
			yyq4550[0] = x.User != ""
			yyq4550[1] = x.Role != ""
			yyq4550[2] = x.Type != ""
			yyq4550[3] = x.Level != ""
			var yynn4550 int
			if yyr4550 || yy2arr4550 {
				r.EncodeArrayStart(4)
			} else {
				yynn4550 = 0
				for _, b := range yyq4550 {
					if b {
						yynn4550++
					}
				}
				r.EncodeMapStart(yynn4550)
				yynn4550 = 0
			}
			if yyr4550 || yy2arr4550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4550[0] {
					yym4552 := z.EncBinary()
					_ = yym4552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4550[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4553 := z.EncBinary()
					_ = yym4553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4550 || yy2arr4550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4550[1] {
					yym4555 := z.EncBinary()
					_ = yym4555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4550[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4556 := z.EncBinary()
					_ = yym4556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4550 || yy2arr4550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4550[2] {
					yym4558 := z.EncBinary()
					_ = yym4558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4550[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4559 := z.EncBinary()
					_ = yym4559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4550 || yy2arr4550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4550[3] {
					yym4561 := z.EncBinary()
					_ = yym4561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4550[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4562 := z.EncBinary()
					_ = yym4562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4550 || yy2arr4550 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4563 := z.DecBinary()
	_ = yym4563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4564 := r.ContainerType()
		if yyct4564 == codecSelferValueTypeMap1234 {
			yyl4564 := r.ReadMapStart()
			if yyl4564 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4564, d)
			}
		} else if yyct4564 == codecSelferValueTypeArray1234 {
			yyl4564 := r.ReadArrayStart()
			if yyl4564 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4564, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4565Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4565Slc
	var yyhl4565 bool = l >= 0
	for yyj4565 := 0; ; yyj4565++ {
		if yyhl4565 {
			if yyj4565 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4565Slc = r.DecodeBytes(yys4565Slc, true, true)
		yys4565 := string(yys4565Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4565 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4565)
		} // end switch yys4565
	} // end for yyj4565
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4570 int
	var yyb4570 bool
	var yyhl4570 bool = l >= 0
	yyj4570++
	if yyhl4570 {
		yyb4570 = yyj4570 > l
	} else {
		yyb4570 = r.CheckBreak()
	}
	if yyb4570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4570++
	if yyhl4570 {
		yyb4570 = yyj4570 > l
	} else {
		yyb4570 = r.CheckBreak()
	}
	if yyb4570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4570++
	if yyhl4570 {
		yyb4570 = yyj4570 > l
	} else {
		yyb4570 = r.CheckBreak()
	}
	if yyb4570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4570++
	if yyhl4570 {
		yyb4570 = yyj4570 > l
	} else {
		yyb4570 = r.CheckBreak()
	}
	if yyb4570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4570++
		if yyhl4570 {
			yyb4570 = yyj4570 > l
		} else {
			yyb4570 = r.CheckBreak()
		}
		if yyb4570 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4570-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4575 := z.EncBinary()
		_ = yym4575
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4576 := !z.EncBinary()
			yy2arr4576 := z.EncBasicHandle().StructToArray
			var yyq4576 [5]bool
			_, _, _ = yysep4576, yyq4576, yy2arr4576
			const yyr4576 bool = false
			yyq4576[0] = x.Kind != ""
			yyq4576[1] = x.APIVersion != ""
			yyq4576[2] = true
			var yynn4576 int
			if yyr4576 || yy2arr4576 {
				r.EncodeArrayStart(5)
			} else {
				yynn4576 = 2
				for _, b := range yyq4576 {
					if b {
						yynn4576++
					}
				}
				r.EncodeMapStart(yynn4576)
				yynn4576 = 0
			}
			if yyr4576 || yy2arr4576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4576[0] {
					yym4578 := z.EncBinary()
					_ = yym4578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4576[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4579 := z.EncBinary()
					_ = yym4579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4576 || yy2arr4576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4576[1] {
					yym4581 := z.EncBinary()
					_ = yym4581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4576[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4582 := z.EncBinary()
					_ = yym4582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4576 || yy2arr4576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4576[2] {
					yy4584 := &x.ObjectMeta
					yy4584.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4576[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4585 := &x.ObjectMeta
					yy4585.CodecEncodeSelf(e)
				}
			}
			if yyr4576 || yy2arr4576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4587 := z.EncBinary()
				_ = yym4587
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4588 := z.EncBinary()
				_ = yym4588
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4576 || yy2arr4576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4590 := z.EncBinary()
					_ = yym4590
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4591 := z.EncBinary()
					_ = yym4591
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4576 || yy2arr4576 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4592 := z.DecBinary()
	_ = yym4592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4593 := r.ContainerType()
		if yyct4593 == codecSelferValueTypeMap1234 {
			yyl4593 := r.ReadMapStart()
			if yyl4593 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4593, d)
			}
		} else if yyct4593 == codecSelferValueTypeArray1234 {
			yyl4593 := r.ReadArrayStart()
			if yyl4593 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4594Slc
	var yyhl4594 bool = l >= 0
	for yyj4594 := 0; ; yyj4594++ {
		if yyhl4594 {
			if yyj4594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4594Slc = r.DecodeBytes(yys4594Slc, true, true)
		yys4594 := string(yys4594Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4594 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4597 := &x.ObjectMeta
				yyv4597.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4599 := &x.Data
				yym4600 := z.DecBinary()
				_ = yym4600
				if false {
				} else {
					*yyv4599 = r.DecodeBytes(*(*[]byte)(yyv4599), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4594)
		} // end switch yys4594
	} // end for yyj4594
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4601 int
	var yyb4601 bool
	var yyhl4601 bool = l >= 0
	yyj4601++
	if yyhl4601 {
		yyb4601 = yyj4601 > l
	} else {
		yyb4601 = r.CheckBreak()
	}
	if yyb4601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4601++
	if yyhl4601 {
		yyb4601 = yyj4601 > l
	} else {
		yyb4601 = r.CheckBreak()
	}
	if yyb4601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4601++
	if yyhl4601 {
		yyb4601 = yyj4601 > l
	} else {
		yyb4601 = r.CheckBreak()
	}
	if yyb4601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4604 := &x.ObjectMeta
		yyv4604.CodecDecodeSelf(d)
	}
	yyj4601++
	if yyhl4601 {
		yyb4601 = yyj4601 > l
	} else {
		yyb4601 = r.CheckBreak()
	}
	if yyb4601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4601++
	if yyhl4601 {
		yyb4601 = yyj4601 > l
	} else {
		yyb4601 = r.CheckBreak()
	}
	if yyb4601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4606 := &x.Data
		yym4607 := z.DecBinary()
		_ = yym4607
		if false {
		} else {
			*yyv4606 = r.DecodeBytes(*(*[]byte)(yyv4606), false, false)
		}
	}
	for {
		yyj4601++
		if yyhl4601 {
			yyb4601 = yyj4601 > l
		} else {
			yyb4601 = r.CheckBreak()
		}
		if yyb4601 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4601-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4608 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4609 := &yyv4608
		yy4609.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4610 := *v
	yyh4610, yyl4610 := z.DecSliceHelperStart()
	var yyc4610 bool
	if yyl4610 == 0 {
		if yyv4610 == nil {
			yyv4610 = []OwnerReference{}
			yyc4610 = true
		} else if len(yyv4610) != 0 {
			yyv4610 = yyv4610[:0]
			yyc4610 = true
		}
	} else if yyl4610 > 0 {
		var yyrr4610, yyrl4610 int
		var yyrt4610 bool
		if yyl4610 > cap(yyv4610) {

			yyrg4610 := len(yyv4610) > 0
			yyv24610 := yyv4610
			yyrl4610, yyrt4610 = z.DecInferLen(yyl4610, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4610 {
				if yyrl4610 <= cap(yyv4610) {
					yyv4610 = yyv4610[:yyrl4610]
				} else {
					yyv4610 = make([]OwnerReference, yyrl4610)
				}
			} else {
				yyv4610 = make([]OwnerReference, yyrl4610)
			}
			yyc4610 = true
			yyrr4610 = len(yyv4610)
			if yyrg4610 {
				copy(yyv4610, yyv24610)
			}
		} else if yyl4610 != len(yyv4610) {
			yyv4610 = yyv4610[:yyl4610]
			yyc4610 = true
		}
		yyj4610 := 0
		for ; yyj4610 < yyrr4610; yyj4610++ {
			yyh4610.ElemContainerState(yyj4610)
			if r.TryDecodeAsNil() {
				yyv4610[yyj4610] = OwnerReference{}
			} else {
				yyv4611 := &yyv4610[yyj4610]
				yyv4611.CodecDecodeSelf(d)
			}

		}
		if yyrt4610 {
			for ; yyj4610 < yyl4610; yyj4610++ {
				yyv4610 = append(yyv4610, OwnerReference{})
				yyh4610.ElemContainerState(yyj4610)
				if r.TryDecodeAsNil() {
					yyv4610[yyj4610] = OwnerReference{}
				} else {
					yyv4612 := &yyv4610[yyj4610]
					yyv4612.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4610 := 0
		for ; !r.CheckBreak(); yyj4610++ {

			if yyj4610 >= len(yyv4610) {
				yyv4610 = append(yyv4610, OwnerReference{}) // var yyz4610 OwnerReference
				yyc4610 = true
			}
			yyh4610.ElemContainerState(yyj4610)
			if yyj4610 < len(yyv4610) {
				if r.TryDecodeAsNil() {
					yyv4610[yyj4610] = OwnerReference{}
				} else {
					yyv4613 := &yyv4610[yyj4610]
					yyv4613.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4610 < len(yyv4610) {
			yyv4610 = yyv4610[:yyj4610]
			yyc4610 = true
		} else if yyj4610 == 0 && yyv4610 == nil {
			yyv4610 = []OwnerReference{}
			yyc4610 = true
		}
	}
	yyh4610.End()
	if yyc4610 {
		*v = yyv4610
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4614 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4614.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4615 := *v
	yyh4615, yyl4615 := z.DecSliceHelperStart()
	var yyc4615 bool
	if yyl4615 == 0 {
		if yyv4615 == nil {
			yyv4615 = []PersistentVolumeAccessMode{}
			yyc4615 = true
		} else if len(yyv4615) != 0 {
			yyv4615 = yyv4615[:0]
			yyc4615 = true
		}
	} else if yyl4615 > 0 {
		var yyrr4615, yyrl4615 int
		var yyrt4615 bool
		if yyl4615 > cap(yyv4615) {

			yyrl4615, yyrt4615 = z.DecInferLen(yyl4615, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4615 {
				if yyrl4615 <= cap(yyv4615) {
					yyv4615 = yyv4615[:yyrl4615]
				} else {
					yyv4615 = make([]PersistentVolumeAccessMode, yyrl4615)
				}
			} else {
				yyv4615 = make([]PersistentVolumeAccessMode, yyrl4615)
			}
			yyc4615 = true
			yyrr4615 = len(yyv4615)
		} else if yyl4615 != len(yyv4615) {
			yyv4615 = yyv4615[:yyl4615]
			yyc4615 = true
		}
		yyj4615 := 0
		for ; yyj4615 < yyrr4615; yyj4615++ {
			yyh4615.ElemContainerState(yyj4615)
			if r.TryDecodeAsNil() {
				yyv4615[yyj4615] = ""
			} else {
				yyv4615[yyj4615] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4615 {
			for ; yyj4615 < yyl4615; yyj4615++ {
				yyv4615 = append(yyv4615, "")
				yyh4615.ElemContainerState(yyj4615)
				if r.TryDecodeAsNil() {
					yyv4615[yyj4615] = ""
				} else {
					yyv4615[yyj4615] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4615 := 0
		for ; !r.CheckBreak(); yyj4615++ {

			if yyj4615 >= len(yyv4615) {
				yyv4615 = append(yyv4615, "") // var yyz4615 PersistentVolumeAccessMode
				yyc4615 = true
			}
			yyh4615.ElemContainerState(yyj4615)
			if yyj4615 < len(yyv4615) {
				if r.TryDecodeAsNil() {
					yyv4615[yyj4615] = ""
				} else {
					yyv4615[yyj4615] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4615 < len(yyv4615) {
			yyv4615 = yyv4615[:yyj4615]
			yyc4615 = true
		} else if yyj4615 == 0 && yyv4615 == nil {
			yyv4615 = []PersistentVolumeAccessMode{}
			yyc4615 = true
		}
	}
	yyh4615.End()
	if yyc4615 {
		*v = yyv4615
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4619 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4620 := &yyv4619
		yy4620.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4621 := *v
	yyh4621, yyl4621 := z.DecSliceHelperStart()
	var yyc4621 bool
	if yyl4621 == 0 {
		if yyv4621 == nil {
			yyv4621 = []PersistentVolume{}
			yyc4621 = true
		} else if len(yyv4621) != 0 {
			yyv4621 = yyv4621[:0]
			yyc4621 = true
		}
	} else if yyl4621 > 0 {
		var yyrr4621, yyrl4621 int
		var yyrt4621 bool
		if yyl4621 > cap(yyv4621) {

			yyrg4621 := len(yyv4621) > 0
			yyv24621 := yyv4621
			yyrl4621, yyrt4621 = z.DecInferLen(yyl4621, z.DecBasicHandle().MaxInitLen, 520)
			if yyrt4621 {
				if yyrl4621 <= cap(yyv4621) {
					yyv4621 = yyv4621[:yyrl4621]
				} else {
					yyv4621 = make([]PersistentVolume, yyrl4621)
				}
			} else {
				yyv4621 = make([]PersistentVolume, yyrl4621)
			}
			yyc4621 = true
			yyrr4621 = len(yyv4621)
			if yyrg4621 {
				copy(yyv4621, yyv24621)
			}
		} else if yyl4621 != len(yyv4621) {
			yyv4621 = yyv4621[:yyl4621]
			yyc4621 = true
		}
		yyj4621 := 0
		for ; yyj4621 < yyrr4621; yyj4621++ {
			yyh4621.ElemContainerState(yyj4621)
			if r.TryDecodeAsNil() {
				yyv4621[yyj4621] = PersistentVolume{}
			} else {
				yyv4622 := &yyv4621[yyj4621]
				yyv4622.CodecDecodeSelf(d)
			}

		}
		if yyrt4621 {
			for ; yyj4621 < yyl4621; yyj4621++ {
				yyv4621 = append(yyv4621, PersistentVolume{})
				yyh4621.ElemContainerState(yyj4621)
				if r.TryDecodeAsNil() {
					yyv4621[yyj4621] = PersistentVolume{}
				} else {
					yyv4623 := &yyv4621[yyj4621]
					yyv4623.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4621 := 0
		for ; !r.CheckBreak(); yyj4621++ {

			if yyj4621 >= len(yyv4621) {
				yyv4621 = append(yyv4621, PersistentVolume{}) // var yyz4621 PersistentVolume
				yyc4621 = true
			}
			yyh4621.ElemContainerState(yyj4621)
			if yyj4621 < len(yyv4621) {
				if r.TryDecodeAsNil() {
					yyv4621[yyj4621] = PersistentVolume{}
				} else {
					yyv4624 := &yyv4621[yyj4621]
					yyv4624.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4621 < len(yyv4621) {
			yyv4621 = yyv4621[:yyj4621]
			yyc4621 = true
		} else if yyj4621 == 0 && yyv4621 == nil {
			yyv4621 = []PersistentVolume{}
			yyc4621 = true
		}
	}
	yyh4621.End()
	if yyc4621 {
		*v = yyv4621
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4625 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4626 := &yyv4625
		yy4626.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4627 := *v
	yyh4627, yyl4627 := z.DecSliceHelperStart()
	var yyc4627 bool
	if yyl4627 == 0 {
		if yyv4627 == nil {
			yyv4627 = []PersistentVolumeClaim{}
			yyc4627 = true
		} else if len(yyv4627) != 0 {
			yyv4627 = yyv4627[:0]
			yyc4627 = true
		}
	} else if yyl4627 > 0 {
		var yyrr4627, yyrl4627 int
		var yyrt4627 bool
		if yyl4627 > cap(yyv4627) {

			yyrg4627 := len(yyv4627) > 0
			yyv24627 := yyv4627
			yyrl4627, yyrt4627 = z.DecInferLen(yyl4627, z.DecBasicHandle().MaxInitLen, 392)
			if yyrt4627 {
				if yyrl4627 <= cap(yyv4627) {
					yyv4627 = yyv4627[:yyrl4627]
				} else {
					yyv4627 = make([]PersistentVolumeClaim, yyrl4627)
				}
			} else {
				yyv4627 = make([]PersistentVolumeClaim, yyrl4627)
			}
			yyc4627 = true
			yyrr4627 = len(yyv4627)
			if yyrg4627 {
				copy(yyv4627, yyv24627)
			}
		} else if yyl4627 != len(yyv4627) {
			yyv4627 = yyv4627[:yyl4627]
			yyc4627 = true
		}
		yyj4627 := 0
		for ; yyj4627 < yyrr4627; yyj4627++ {
			yyh4627.ElemContainerState(yyj4627)
			if r.TryDecodeAsNil() {
				yyv4627[yyj4627] = PersistentVolumeClaim{}
			} else {
				yyv4628 := &yyv4627[yyj4627]
				yyv4628.CodecDecodeSelf(d)
			}

		}
		if yyrt4627 {
			for ; yyj4627 < yyl4627; yyj4627++ {
				yyv4627 = append(yyv4627, PersistentVolumeClaim{})
				yyh4627.ElemContainerState(yyj4627)
				if r.TryDecodeAsNil() {
					yyv4627[yyj4627] = PersistentVolumeClaim{}
				} else {
					yyv4629 := &yyv4627[yyj4627]
					yyv4629.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4627 := 0
		for ; !r.CheckBreak(); yyj4627++ {

			if yyj4627 >= len(yyv4627) {
				yyv4627 = append(yyv4627, PersistentVolumeClaim{}) // var yyz4627 PersistentVolumeClaim
				yyc4627 = true
			}
			yyh4627.ElemContainerState(yyj4627)
			if yyj4627 < len(yyv4627) {
				if r.TryDecodeAsNil() {
					yyv4627[yyj4627] = PersistentVolumeClaim{}
				} else {
					yyv4630 := &yyv4627[yyj4627]
					yyv4630.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4627 < len(yyv4627) {
			yyv4627 = yyv4627[:yyj4627]
			yyc4627 = true
		} else if yyj4627 == 0 && yyv4627 == nil {
			yyv4627 = []PersistentVolumeClaim{}
			yyc4627 = true
		}
	}
	yyh4627.End()
	if yyc4627 {
		*v = yyv4627
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4631 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4632 := &yyv4631
		yy4632.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4633 := *v
	yyh4633, yyl4633 := z.DecSliceHelperStart()
	var yyc4633 bool
	if yyl4633 == 0 {
		if yyv4633 == nil {
			yyv4633 = []KeyToPath{}
			yyc4633 = true
		} else if len(yyv4633) != 0 {
			yyv4633 = yyv4633[:0]
			yyc4633 = true
		}
	} else if yyl4633 > 0 {
		var yyrr4633, yyrl4633 int
		var yyrt4633 bool
		if yyl4633 > cap(yyv4633) {

			yyrg4633 := len(yyv4633) > 0
			yyv24633 := yyv4633
			yyrl4633, yyrt4633 = z.DecInferLen(yyl4633, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4633 {
				if yyrl4633 <= cap(yyv4633) {
					yyv4633 = yyv4633[:yyrl4633]
				} else {
					yyv4633 = make([]KeyToPath, yyrl4633)
				}
			} else {
				yyv4633 = make([]KeyToPath, yyrl4633)
			}
			yyc4633 = true
			yyrr4633 = len(yyv4633)
			if yyrg4633 {
				copy(yyv4633, yyv24633)
			}
		} else if yyl4633 != len(yyv4633) {
			yyv4633 = yyv4633[:yyl4633]
			yyc4633 = true
		}
		yyj4633 := 0
		for ; yyj4633 < yyrr4633; yyj4633++ {
			yyh4633.ElemContainerState(yyj4633)
			if r.TryDecodeAsNil() {
				yyv4633[yyj4633] = KeyToPath{}
			} else {
				yyv4634 := &yyv4633[yyj4633]
				yyv4634.CodecDecodeSelf(d)
			}

		}
		if yyrt4633 {
			for ; yyj4633 < yyl4633; yyj4633++ {
				yyv4633 = append(yyv4633, KeyToPath{})
				yyh4633.ElemContainerState(yyj4633)
				if r.TryDecodeAsNil() {
					yyv4633[yyj4633] = KeyToPath{}
				} else {
					yyv4635 := &yyv4633[yyj4633]
					yyv4635.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4633 := 0
		for ; !r.CheckBreak(); yyj4633++ {

			if yyj4633 >= len(yyv4633) {
				yyv4633 = append(yyv4633, KeyToPath{}) // var yyz4633 KeyToPath
				yyc4633 = true
			}
			yyh4633.ElemContainerState(yyj4633)
			if yyj4633 < len(yyv4633) {
				if r.TryDecodeAsNil() {
					yyv4633[yyj4633] = KeyToPath{}
				} else {
					yyv4636 := &yyv4633[yyj4633]
					yyv4636.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4633 < len(yyv4633) {
			yyv4633 = yyv4633[:yyj4633]
			yyc4633 = true
		} else if yyj4633 == 0 && yyv4633 == nil {
			yyv4633 = []KeyToPath{}
			yyc4633 = true
		}
	}
	yyh4633.End()
	if yyc4633 {
		*v = yyv4633
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4637 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4638 := &yyv4637
		yy4638.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4639 := *v
	yyh4639, yyl4639 := z.DecSliceHelperStart()
	var yyc4639 bool
	if yyl4639 == 0 {
		if yyv4639 == nil {
			yyv4639 = []HTTPHeader{}
			yyc4639 = true
		} else if len(yyv4639) != 0 {
			yyv4639 = yyv4639[:0]
			yyc4639 = true
		}
	} else if yyl4639 > 0 {
		var yyrr4639, yyrl4639 int
		var yyrt4639 bool
		if yyl4639 > cap(yyv4639) {

			yyrg4639 := len(yyv4639) > 0
			yyv24639 := yyv4639
			yyrl4639, yyrt4639 = z.DecInferLen(yyl4639, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4639 {
				if yyrl4639 <= cap(yyv4639) {
					yyv4639 = yyv4639[:yyrl4639]
				} else {
					yyv4639 = make([]HTTPHeader, yyrl4639)
				}
			} else {
				yyv4639 = make([]HTTPHeader, yyrl4639)
			}
			yyc4639 = true
			yyrr4639 = len(yyv4639)
			if yyrg4639 {
				copy(yyv4639, yyv24639)
			}
		} else if yyl4639 != len(yyv4639) {
			yyv4639 = yyv4639[:yyl4639]
			yyc4639 = true
		}
		yyj4639 := 0
		for ; yyj4639 < yyrr4639; yyj4639++ {
			yyh4639.ElemContainerState(yyj4639)
			if r.TryDecodeAsNil() {
				yyv4639[yyj4639] = HTTPHeader{}
			} else {
				yyv4640 := &yyv4639[yyj4639]
				yyv4640.CodecDecodeSelf(d)
			}

		}
		if yyrt4639 {
			for ; yyj4639 < yyl4639; yyj4639++ {
				yyv4639 = append(yyv4639, HTTPHeader{})
				yyh4639.ElemContainerState(yyj4639)
				if r.TryDecodeAsNil() {
					yyv4639[yyj4639] = HTTPHeader{}
				} else {
					yyv4641 := &yyv4639[yyj4639]
					yyv4641.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4639 := 0
		for ; !r.CheckBreak(); yyj4639++ {

			if yyj4639 >= len(yyv4639) {
				yyv4639 = append(yyv4639, HTTPHeader{}) // var yyz4639 HTTPHeader
				yyc4639 = true
			}
			yyh4639.ElemContainerState(yyj4639)
			if yyj4639 < len(yyv4639) {
				if r.TryDecodeAsNil() {
					yyv4639[yyj4639] = HTTPHeader{}
				} else {
					yyv4642 := &yyv4639[yyj4639]
					yyv4642.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4639 < len(yyv4639) {
			yyv4639 = yyv4639[:yyj4639]
			yyc4639 = true
		} else if yyj4639 == 0 && yyv4639 == nil {
			yyv4639 = []HTTPHeader{}
			yyc4639 = true
		}
	}
	yyh4639.End()
	if yyc4639 {
		*v = yyv4639
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4643 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4643.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4644 := *v
	yyh4644, yyl4644 := z.DecSliceHelperStart()
	var yyc4644 bool
	if yyl4644 == 0 {
		if yyv4644 == nil {
			yyv4644 = []Capability{}
			yyc4644 = true
		} else if len(yyv4644) != 0 {
			yyv4644 = yyv4644[:0]
			yyc4644 = true
		}
	} else if yyl4644 > 0 {
		var yyrr4644, yyrl4644 int
		var yyrt4644 bool
		if yyl4644 > cap(yyv4644) {

			yyrl4644, yyrt4644 = z.DecInferLen(yyl4644, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4644 {
				if yyrl4644 <= cap(yyv4644) {
					yyv4644 = yyv4644[:yyrl4644]
				} else {
					yyv4644 = make([]Capability, yyrl4644)
				}
			} else {
				yyv4644 = make([]Capability, yyrl4644)
			}
			yyc4644 = true
			yyrr4644 = len(yyv4644)
		} else if yyl4644 != len(yyv4644) {
			yyv4644 = yyv4644[:yyl4644]
			yyc4644 = true
		}
		yyj4644 := 0
		for ; yyj4644 < yyrr4644; yyj4644++ {
			yyh4644.ElemContainerState(yyj4644)
			if r.TryDecodeAsNil() {
				yyv4644[yyj4644] = ""
			} else {
				yyv4644[yyj4644] = Capability(r.DecodeString())
			}

		}
		if yyrt4644 {
			for ; yyj4644 < yyl4644; yyj4644++ {
				yyv4644 = append(yyv4644, "")
				yyh4644.ElemContainerState(yyj4644)
				if r.TryDecodeAsNil() {
					yyv4644[yyj4644] = ""
				} else {
					yyv4644[yyj4644] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4644 := 0
		for ; !r.CheckBreak(); yyj4644++ {

			if yyj4644 >= len(yyv4644) {
				yyv4644 = append(yyv4644, "") // var yyz4644 Capability
				yyc4644 = true
			}
			yyh4644.ElemContainerState(yyj4644)
			if yyj4644 < len(yyv4644) {
				if r.TryDecodeAsNil() {
					yyv4644[yyj4644] = ""
				} else {
					yyv4644[yyj4644] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4644 < len(yyv4644) {
			yyv4644 = yyv4644[:yyj4644]
			yyc4644 = true
		} else if yyj4644 == 0 && yyv4644 == nil {
			yyv4644 = []Capability{}
			yyc4644 = true
		}
	}
	yyh4644.End()
	if yyc4644 {
		*v = yyv4644
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4648 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4649 := &yyv4648
		yy4649.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4650 := *v
	yyh4650, yyl4650 := z.DecSliceHelperStart()
	var yyc4650 bool
	if yyl4650 == 0 {
		if yyv4650 == nil {
			yyv4650 = []ContainerPort{}
			yyc4650 = true
		} else if len(yyv4650) != 0 {
			yyv4650 = yyv4650[:0]
			yyc4650 = true
		}
	} else if yyl4650 > 0 {
		var yyrr4650, yyrl4650 int
		var yyrt4650 bool
		if yyl4650 > cap(yyv4650) {

			yyrg4650 := len(yyv4650) > 0
			yyv24650 := yyv4650
			yyrl4650, yyrt4650 = z.DecInferLen(yyl4650, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4650 {
				if yyrl4650 <= cap(yyv4650) {
					yyv4650 = yyv4650[:yyrl4650]
				} else {
					yyv4650 = make([]ContainerPort, yyrl4650)
				}
			} else {
				yyv4650 = make([]ContainerPort, yyrl4650)
			}
			yyc4650 = true
			yyrr4650 = len(yyv4650)
			if yyrg4650 {
				copy(yyv4650, yyv24650)
			}
		} else if yyl4650 != len(yyv4650) {
			yyv4650 = yyv4650[:yyl4650]
			yyc4650 = true
		}
		yyj4650 := 0
		for ; yyj4650 < yyrr4650; yyj4650++ {
			yyh4650.ElemContainerState(yyj4650)
			if r.TryDecodeAsNil() {
				yyv4650[yyj4650] = ContainerPort{}
			} else {
				yyv4651 := &yyv4650[yyj4650]
				yyv4651.CodecDecodeSelf(d)
			}

		}
		if yyrt4650 {
			for ; yyj4650 < yyl4650; yyj4650++ {
				yyv4650 = append(yyv4650, ContainerPort{})
				yyh4650.ElemContainerState(yyj4650)
				if r.TryDecodeAsNil() {
					yyv4650[yyj4650] = ContainerPort{}
				} else {
					yyv4652 := &yyv4650[yyj4650]
					yyv4652.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4650 := 0
		for ; !r.CheckBreak(); yyj4650++ {

			if yyj4650 >= len(yyv4650) {
				yyv4650 = append(yyv4650, ContainerPort{}) // var yyz4650 ContainerPort
				yyc4650 = true
			}
			yyh4650.ElemContainerState(yyj4650)
			if yyj4650 < len(yyv4650) {
				if r.TryDecodeAsNil() {
					yyv4650[yyj4650] = ContainerPort{}
				} else {
					yyv4653 := &yyv4650[yyj4650]
					yyv4653.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4650 < len(yyv4650) {
			yyv4650 = yyv4650[:yyj4650]
			yyc4650 = true
		} else if yyj4650 == 0 && yyv4650 == nil {
			yyv4650 = []ContainerPort{}
			yyc4650 = true
		}
	}
	yyh4650.End()
	if yyc4650 {
		*v = yyv4650
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4654 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4655 := &yyv4654
		yy4655.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4656 := *v
	yyh4656, yyl4656 := z.DecSliceHelperStart()
	var yyc4656 bool
	if yyl4656 == 0 {
		if yyv4656 == nil {
			yyv4656 = []EnvVar{}
			yyc4656 = true
		} else if len(yyv4656) != 0 {
			yyv4656 = yyv4656[:0]
			yyc4656 = true
		}
	} else if yyl4656 > 0 {
		var yyrr4656, yyrl4656 int
		var yyrt4656 bool
		if yyl4656 > cap(yyv4656) {

			yyrg4656 := len(yyv4656) > 0
			yyv24656 := yyv4656
			yyrl4656, yyrt4656 = z.DecInferLen(yyl4656, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4656 {
				if yyrl4656 <= cap(yyv4656) {
					yyv4656 = yyv4656[:yyrl4656]
				} else {
					yyv4656 = make([]EnvVar, yyrl4656)
				}
			} else {
				yyv4656 = make([]EnvVar, yyrl4656)
			}
			yyc4656 = true
			yyrr4656 = len(yyv4656)
			if yyrg4656 {
				copy(yyv4656, yyv24656)
			}
		} else if yyl4656 != len(yyv4656) {
			yyv4656 = yyv4656[:yyl4656]
			yyc4656 = true
		}
		yyj4656 := 0
		for ; yyj4656 < yyrr4656; yyj4656++ {
			yyh4656.ElemContainerState(yyj4656)
			if r.TryDecodeAsNil() {
				yyv4656[yyj4656] = EnvVar{}
			} else {
				yyv4657 := &yyv4656[yyj4656]
				yyv4657.CodecDecodeSelf(d)
			}

		}
		if yyrt4656 {
			for ; yyj4656 < yyl4656; yyj4656++ {
				yyv4656 = append(yyv4656, EnvVar{})
				yyh4656.ElemContainerState(yyj4656)
				if r.TryDecodeAsNil() {
					yyv4656[yyj4656] = EnvVar{}
				} else {
					yyv4658 := &yyv4656[yyj4656]
					yyv4658.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4656 := 0
		for ; !r.CheckBreak(); yyj4656++ {

			if yyj4656 >= len(yyv4656) {
				yyv4656 = append(yyv4656, EnvVar{}) // var yyz4656 EnvVar
				yyc4656 = true
			}
			yyh4656.ElemContainerState(yyj4656)
			if yyj4656 < len(yyv4656) {
				if r.TryDecodeAsNil() {
					yyv4656[yyj4656] = EnvVar{}
				} else {
					yyv4659 := &yyv4656[yyj4656]
					yyv4659.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4656 < len(yyv4656) {
			yyv4656 = yyv4656[:yyj4656]
			yyc4656 = true
		} else if yyj4656 == 0 && yyv4656 == nil {
			yyv4656 = []EnvVar{}
			yyc4656 = true
		}
	}
	yyh4656.End()
	if yyc4656 {
		*v = yyv4656
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4660 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4661 := &yyv4660
		yy4661.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4662 := *v
	yyh4662, yyl4662 := z.DecSliceHelperStart()
	var yyc4662 bool
	if yyl4662 == 0 {
		if yyv4662 == nil {
			yyv4662 = []VolumeMount{}
			yyc4662 = true
		} else if len(yyv4662) != 0 {
			yyv4662 = yyv4662[:0]
			yyc4662 = true
		}
	} else if yyl4662 > 0 {
		var yyrr4662, yyrl4662 int
		var yyrt4662 bool
		if yyl4662 > cap(yyv4662) {

			yyrg4662 := len(yyv4662) > 0
			yyv24662 := yyv4662
			yyrl4662, yyrt4662 = z.DecInferLen(yyl4662, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4662 {
				if yyrl4662 <= cap(yyv4662) {
					yyv4662 = yyv4662[:yyrl4662]
				} else {
					yyv4662 = make([]VolumeMount, yyrl4662)
				}
			} else {
				yyv4662 = make([]VolumeMount, yyrl4662)
			}
			yyc4662 = true
			yyrr4662 = len(yyv4662)
			if yyrg4662 {
				copy(yyv4662, yyv24662)
			}
		} else if yyl4662 != len(yyv4662) {
			yyv4662 = yyv4662[:yyl4662]
			yyc4662 = true
		}
		yyj4662 := 0
		for ; yyj4662 < yyrr4662; yyj4662++ {
			yyh4662.ElemContainerState(yyj4662)
			if r.TryDecodeAsNil() {
				yyv4662[yyj4662] = VolumeMount{}
			} else {
				yyv4663 := &yyv4662[yyj4662]
				yyv4663.CodecDecodeSelf(d)
			}

		}
		if yyrt4662 {
			for ; yyj4662 < yyl4662; yyj4662++ {
				yyv4662 = append(yyv4662, VolumeMount{})
				yyh4662.ElemContainerState(yyj4662)
				if r.TryDecodeAsNil() {
					yyv4662[yyj4662] = VolumeMount{}
				} else {
					yyv4664 := &yyv4662[yyj4662]
					yyv4664.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4662 := 0
		for ; !r.CheckBreak(); yyj4662++ {

			if yyj4662 >= len(yyv4662) {
				yyv4662 = append(yyv4662, VolumeMount{}) // var yyz4662 VolumeMount
				yyc4662 = true
			}
			yyh4662.ElemContainerState(yyj4662)
			if yyj4662 < len(yyv4662) {
				if r.TryDecodeAsNil() {
					yyv4662[yyj4662] = VolumeMount{}
				} else {
					yyv4665 := &yyv4662[yyj4662]
					yyv4665.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4662 < len(yyv4662) {
			yyv4662 = yyv4662[:yyj4662]
			yyc4662 = true
		} else if yyj4662 == 0 && yyv4662 == nil {
			yyv4662 = []VolumeMount{}
			yyc4662 = true
		}
	}
	yyh4662.End()
	if yyc4662 {
		*v = yyv4662
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4666 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4667 := &yyv4666
		yy4667.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4668 := *v
	yyh4668, yyl4668 := z.DecSliceHelperStart()
	var yyc4668 bool
	if yyl4668 == 0 {
		if yyv4668 == nil {
			yyv4668 = []NodeSelectorTerm{}
			yyc4668 = true
		} else if len(yyv4668) != 0 {
			yyv4668 = yyv4668[:0]
			yyc4668 = true
		}
	} else if yyl4668 > 0 {
		var yyrr4668, yyrl4668 int
		var yyrt4668 bool
		if yyl4668 > cap(yyv4668) {

			yyrg4668 := len(yyv4668) > 0
			yyv24668 := yyv4668
			yyrl4668, yyrt4668 = z.DecInferLen(yyl4668, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4668 {
				if yyrl4668 <= cap(yyv4668) {
					yyv4668 = yyv4668[:yyrl4668]
				} else {
					yyv4668 = make([]NodeSelectorTerm, yyrl4668)
				}
			} else {
				yyv4668 = make([]NodeSelectorTerm, yyrl4668)
			}
			yyc4668 = true
			yyrr4668 = len(yyv4668)
			if yyrg4668 {
				copy(yyv4668, yyv24668)
			}
		} else if yyl4668 != len(yyv4668) {
			yyv4668 = yyv4668[:yyl4668]
			yyc4668 = true
		}
		yyj4668 := 0
		for ; yyj4668 < yyrr4668; yyj4668++ {
			yyh4668.ElemContainerState(yyj4668)
			if r.TryDecodeAsNil() {
				yyv4668[yyj4668] = NodeSelectorTerm{}
			} else {
				yyv4669 := &yyv4668[yyj4668]
				yyv4669.CodecDecodeSelf(d)
			}

		}
		if yyrt4668 {
			for ; yyj4668 < yyl4668; yyj4668++ {
				yyv4668 = append(yyv4668, NodeSelectorTerm{})
				yyh4668.ElemContainerState(yyj4668)
				if r.TryDecodeAsNil() {
					yyv4668[yyj4668] = NodeSelectorTerm{}
				} else {
					yyv4670 := &yyv4668[yyj4668]
					yyv4670.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4668 := 0
		for ; !r.CheckBreak(); yyj4668++ {

			if yyj4668 >= len(yyv4668) {
				yyv4668 = append(yyv4668, NodeSelectorTerm{}) // var yyz4668 NodeSelectorTerm
				yyc4668 = true
			}
			yyh4668.ElemContainerState(yyj4668)
			if yyj4668 < len(yyv4668) {
				if r.TryDecodeAsNil() {
					yyv4668[yyj4668] = NodeSelectorTerm{}
				} else {
					yyv4671 := &yyv4668[yyj4668]
					yyv4671.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4668 < len(yyv4668) {
			yyv4668 = yyv4668[:yyj4668]
			yyc4668 = true
		} else if yyj4668 == 0 && yyv4668 == nil {
			yyv4668 = []NodeSelectorTerm{}
			yyc4668 = true
		}
	}
	yyh4668.End()
	if yyc4668 {
		*v = yyv4668
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4672 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4673 := &yyv4672
		yy4673.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4674 := *v
	yyh4674, yyl4674 := z.DecSliceHelperStart()
	var yyc4674 bool
	if yyl4674 == 0 {
		if yyv4674 == nil {
			yyv4674 = []NodeSelectorRequirement{}
			yyc4674 = true
		} else if len(yyv4674) != 0 {
			yyv4674 = yyv4674[:0]
			yyc4674 = true
		}
	} else if yyl4674 > 0 {
		var yyrr4674, yyrl4674 int
		var yyrt4674 bool
		if yyl4674 > cap(yyv4674) {

			yyrg4674 := len(yyv4674) > 0
			yyv24674 := yyv4674
			yyrl4674, yyrt4674 = z.DecInferLen(yyl4674, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4674 {
				if yyrl4674 <= cap(yyv4674) {
					yyv4674 = yyv4674[:yyrl4674]
				} else {
					yyv4674 = make([]NodeSelectorRequirement, yyrl4674)
				}
			} else {
				yyv4674 = make([]NodeSelectorRequirement, yyrl4674)
			}
			yyc4674 = true
			yyrr4674 = len(yyv4674)
			if yyrg4674 {
				copy(yyv4674, yyv24674)
			}
		} else if yyl4674 != len(yyv4674) {
			yyv4674 = yyv4674[:yyl4674]
			yyc4674 = true
		}
		yyj4674 := 0
		for ; yyj4674 < yyrr4674; yyj4674++ {
			yyh4674.ElemContainerState(yyj4674)
			if r.TryDecodeAsNil() {
				yyv4674[yyj4674] = NodeSelectorRequirement{}
			} else {
				yyv4675 := &yyv4674[yyj4674]
				yyv4675.CodecDecodeSelf(d)
			}

		}
		if yyrt4674 {
			for ; yyj4674 < yyl4674; yyj4674++ {
				yyv4674 = append(yyv4674, NodeSelectorRequirement{})
				yyh4674.ElemContainerState(yyj4674)
				if r.TryDecodeAsNil() {
					yyv4674[yyj4674] = NodeSelectorRequirement{}
				} else {
					yyv4676 := &yyv4674[yyj4674]
					yyv4676.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4674 := 0
		for ; !r.CheckBreak(); yyj4674++ {

			if yyj4674 >= len(yyv4674) {
				yyv4674 = append(yyv4674, NodeSelectorRequirement{}) // var yyz4674 NodeSelectorRequirement
				yyc4674 = true
			}
			yyh4674.ElemContainerState(yyj4674)
			if yyj4674 < len(yyv4674) {
				if r.TryDecodeAsNil() {
					yyv4674[yyj4674] = NodeSelectorRequirement{}
				} else {
					yyv4677 := &yyv4674[yyj4674]
					yyv4677.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4674 < len(yyv4674) {
			yyv4674 = yyv4674[:yyj4674]
			yyc4674 = true
		} else if yyj4674 == 0 && yyv4674 == nil {
			yyv4674 = []NodeSelectorRequirement{}
			yyc4674 = true
		}
	}
	yyh4674.End()
	if yyc4674 {
		*v = yyv4674
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4678 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4679 := &yyv4678
		yy4679.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4680 := *v
	yyh4680, yyl4680 := z.DecSliceHelperStart()
	var yyc4680 bool
	if yyl4680 == 0 {
		if yyv4680 == nil {
			yyv4680 = []PodAffinityTerm{}
			yyc4680 = true
		} else if len(yyv4680) != 0 {
			yyv4680 = yyv4680[:0]
			yyc4680 = true
		}
	} else if yyl4680 > 0 {
		var yyrr4680, yyrl4680 int
		var yyrt4680 bool
		if yyl4680 > cap(yyv4680) {

			yyrg4680 := len(yyv4680) > 0
			yyv24680 := yyv4680
			yyrl4680, yyrt4680 = z.DecInferLen(yyl4680, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4680 {
				if yyrl4680 <= cap(yyv4680) {
					yyv4680 = yyv4680[:yyrl4680]
				} else {
					yyv4680 = make([]PodAffinityTerm, yyrl4680)
				}
			} else {
				yyv4680 = make([]PodAffinityTerm, yyrl4680)
			}
			yyc4680 = true
			yyrr4680 = len(yyv4680)
			if yyrg4680 {
				copy(yyv4680, yyv24680)
			}
		} else if yyl4680 != len(yyv4680) {
			yyv4680 = yyv4680[:yyl4680]
			yyc4680 = true
		}
		yyj4680 := 0
		for ; yyj4680 < yyrr4680; yyj4680++ {
			yyh4680.ElemContainerState(yyj4680)
			if r.TryDecodeAsNil() {
				yyv4680[yyj4680] = PodAffinityTerm{}
			} else {
				yyv4681 := &yyv4680[yyj4680]
				yyv4681.CodecDecodeSelf(d)
			}

		}
		if yyrt4680 {
			for ; yyj4680 < yyl4680; yyj4680++ {
				yyv4680 = append(yyv4680, PodAffinityTerm{})
				yyh4680.ElemContainerState(yyj4680)
				if r.TryDecodeAsNil() {
					yyv4680[yyj4680] = PodAffinityTerm{}
				} else {
					yyv4682 := &yyv4680[yyj4680]
					yyv4682.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4680 := 0
		for ; !r.CheckBreak(); yyj4680++ {

			if yyj4680 >= len(yyv4680) {
				yyv4680 = append(yyv4680, PodAffinityTerm{}) // var yyz4680 PodAffinityTerm
				yyc4680 = true
			}
			yyh4680.ElemContainerState(yyj4680)
			if yyj4680 < len(yyv4680) {
				if r.TryDecodeAsNil() {
					yyv4680[yyj4680] = PodAffinityTerm{}
				} else {
					yyv4683 := &yyv4680[yyj4680]
					yyv4683.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4680 < len(yyv4680) {
			yyv4680 = yyv4680[:yyj4680]
			yyc4680 = true
		} else if yyj4680 == 0 && yyv4680 == nil {
			yyv4680 = []PodAffinityTerm{}
			yyc4680 = true
		}
	}
	yyh4680.End()
	if yyc4680 {
		*v = yyv4680
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4684 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4685 := &yyv4684
		yy4685.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4686 := *v
	yyh4686, yyl4686 := z.DecSliceHelperStart()
	var yyc4686 bool
	if yyl4686 == 0 {
		if yyv4686 == nil {
			yyv4686 = []WeightedPodAffinityTerm{}
			yyc4686 = true
		} else if len(yyv4686) != 0 {
			yyv4686 = yyv4686[:0]
			yyc4686 = true
		}
	} else if yyl4686 > 0 {
		var yyrr4686, yyrl4686 int
		var yyrt4686 bool
		if yyl4686 > cap(yyv4686) {

			yyrg4686 := len(yyv4686) > 0
			yyv24686 := yyv4686
			yyrl4686, yyrt4686 = z.DecInferLen(yyl4686, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4686 {
				if yyrl4686 <= cap(yyv4686) {
					yyv4686 = yyv4686[:yyrl4686]
				} else {
					yyv4686 = make([]WeightedPodAffinityTerm, yyrl4686)
				}
			} else {
				yyv4686 = make([]WeightedPodAffinityTerm, yyrl4686)
			}
			yyc4686 = true
			yyrr4686 = len(yyv4686)
			if yyrg4686 {
				copy(yyv4686, yyv24686)
			}
		} else if yyl4686 != len(yyv4686) {
			yyv4686 = yyv4686[:yyl4686]
			yyc4686 = true
		}
		yyj4686 := 0
		for ; yyj4686 < yyrr4686; yyj4686++ {
			yyh4686.ElemContainerState(yyj4686)
			if r.TryDecodeAsNil() {
				yyv4686[yyj4686] = WeightedPodAffinityTerm{}
			} else {
				yyv4687 := &yyv4686[yyj4686]
				yyv4687.CodecDecodeSelf(d)
			}

		}
		if yyrt4686 {
			for ; yyj4686 < yyl4686; yyj4686++ {
				yyv4686 = append(yyv4686, WeightedPodAffinityTerm{})
				yyh4686.ElemContainerState(yyj4686)
				if r.TryDecodeAsNil() {
					yyv4686[yyj4686] = WeightedPodAffinityTerm{}
				} else {
					yyv4688 := &yyv4686[yyj4686]
					yyv4688.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4686 := 0
		for ; !r.CheckBreak(); yyj4686++ {

			if yyj4686 >= len(yyv4686) {
				yyv4686 = append(yyv4686, WeightedPodAffinityTerm{}) // var yyz4686 WeightedPodAffinityTerm
				yyc4686 = true
			}
			yyh4686.ElemContainerState(yyj4686)
			if yyj4686 < len(yyv4686) {
				if r.TryDecodeAsNil() {
					yyv4686[yyj4686] = WeightedPodAffinityTerm{}
				} else {
					yyv4689 := &yyv4686[yyj4686]
					yyv4689.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4686 < len(yyv4686) {
			yyv4686 = yyv4686[:yyj4686]
			yyc4686 = true
		} else if yyj4686 == 0 && yyv4686 == nil {
			yyv4686 = []WeightedPodAffinityTerm{}
			yyc4686 = true
		}
	}
	yyh4686.End()
	if yyc4686 {
		*v = yyv4686
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4690 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4691 := &yyv4690
		yy4691.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4692 := *v
	yyh4692, yyl4692 := z.DecSliceHelperStart()
	var yyc4692 bool
	if yyl4692 == 0 {
		if yyv4692 == nil {
			yyv4692 = []PreferredSchedulingTerm{}
			yyc4692 = true
		} else if len(yyv4692) != 0 {
			yyv4692 = yyv4692[:0]
			yyc4692 = true
		}
	} else if yyl4692 > 0 {
		var yyrr4692, yyrl4692 int
		var yyrt4692 bool
		if yyl4692 > cap(yyv4692) {

			yyrg4692 := len(yyv4692) > 0
			yyv24692 := yyv4692
			yyrl4692, yyrt4692 = z.DecInferLen(yyl4692, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4692 {
				if yyrl4692 <= cap(yyv4692) {
					yyv4692 = yyv4692[:yyrl4692]
				} else {
					yyv4692 = make([]PreferredSchedulingTerm, yyrl4692)
				}
			} else {
				yyv4692 = make([]PreferredSchedulingTerm, yyrl4692)
			}
			yyc4692 = true
			yyrr4692 = len(yyv4692)
			if yyrg4692 {
				copy(yyv4692, yyv24692)
			}
		} else if yyl4692 != len(yyv4692) {
			yyv4692 = yyv4692[:yyl4692]
			yyc4692 = true
		}
		yyj4692 := 0
		for ; yyj4692 < yyrr4692; yyj4692++ {
			yyh4692.ElemContainerState(yyj4692)
			if r.TryDecodeAsNil() {
				yyv4692[yyj4692] = PreferredSchedulingTerm{}
			} else {
				yyv4693 := &yyv4692[yyj4692]
				yyv4693.CodecDecodeSelf(d)
			}

		}
		if yyrt4692 {
			for ; yyj4692 < yyl4692; yyj4692++ {
				yyv4692 = append(yyv4692, PreferredSchedulingTerm{})
				yyh4692.ElemContainerState(yyj4692)
				if r.TryDecodeAsNil() {
					yyv4692[yyj4692] = PreferredSchedulingTerm{}
				} else {
					yyv4694 := &yyv4692[yyj4692]
					yyv4694.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4692 := 0
		for ; !r.CheckBreak(); yyj4692++ {

			if yyj4692 >= len(yyv4692) {
				yyv4692 = append(yyv4692, PreferredSchedulingTerm{}) // var yyz4692 PreferredSchedulingTerm
				yyc4692 = true
			}
			yyh4692.ElemContainerState(yyj4692)
			if yyj4692 < len(yyv4692) {
				if r.TryDecodeAsNil() {
					yyv4692[yyj4692] = PreferredSchedulingTerm{}
				} else {
					yyv4695 := &yyv4692[yyj4692]
					yyv4695.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4692 < len(yyv4692) {
			yyv4692 = yyv4692[:yyj4692]
			yyc4692 = true
		} else if yyj4692 == 0 && yyv4692 == nil {
			yyv4692 = []PreferredSchedulingTerm{}
			yyc4692 = true
		}
	}
	yyh4692.End()
	if yyc4692 {
		*v = yyv4692
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4696 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4697 := &yyv4696
		yy4697.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4698 := *v
	yyh4698, yyl4698 := z.DecSliceHelperStart()
	var yyc4698 bool
	if yyl4698 == 0 {
		if yyv4698 == nil {
			yyv4698 = []Volume{}
			yyc4698 = true
		} else if len(yyv4698) != 0 {
			yyv4698 = yyv4698[:0]
			yyc4698 = true
		}
	} else if yyl4698 > 0 {
		var yyrr4698, yyrl4698 int
		var yyrt4698 bool
		if yyl4698 > cap(yyv4698) {

			yyrg4698 := len(yyv4698) > 0
			yyv24698 := yyv4698
			yyrl4698, yyrt4698 = z.DecInferLen(yyl4698, z.DecBasicHandle().MaxInitLen, 200)
			if yyrt4698 {
				if yyrl4698 <= cap(yyv4698) {
					yyv4698 = yyv4698[:yyrl4698]
				} else {
					yyv4698 = make([]Volume, yyrl4698)
				}
			} else {
				yyv4698 = make([]Volume, yyrl4698)
			}
			yyc4698 = true
			yyrr4698 = len(yyv4698)
			if yyrg4698 {
				copy(yyv4698, yyv24698)
			}
		} else if yyl4698 != len(yyv4698) {
			yyv4698 = yyv4698[:yyl4698]
			yyc4698 = true
		}
		yyj4698 := 0
		for ; yyj4698 < yyrr4698; yyj4698++ {
			yyh4698.ElemContainerState(yyj4698)
			if r.TryDecodeAsNil() {
				yyv4698[yyj4698] = Volume{}
			} else {
				yyv4699 := &yyv4698[yyj4698]
				yyv4699.CodecDecodeSelf(d)
			}

		}
		if yyrt4698 {
			for ; yyj4698 < yyl4698; yyj4698++ {
				yyv4698 = append(yyv4698, Volume{})
				yyh4698.ElemContainerState(yyj4698)
				if r.TryDecodeAsNil() {
					yyv4698[yyj4698] = Volume{}
				} else {
					yyv4700 := &yyv4698[yyj4698]
					yyv4700.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4698 := 0
		for ; !r.CheckBreak(); yyj4698++ {

			if yyj4698 >= len(yyv4698) {
				yyv4698 = append(yyv4698, Volume{}) // var yyz4698 Volume
				yyc4698 = true
			}
			yyh4698.ElemContainerState(yyj4698)
			if yyj4698 < len(yyv4698) {
				if r.TryDecodeAsNil() {
					yyv4698[yyj4698] = Volume{}
				} else {
					yyv4701 := &yyv4698[yyj4698]
					yyv4701.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4698 < len(yyv4698) {
			yyv4698 = yyv4698[:yyj4698]
			yyc4698 = true
		} else if yyj4698 == 0 && yyv4698 == nil {
			yyv4698 = []Volume{}
			yyc4698 = true
		}
	}
	yyh4698.End()
	if yyc4698 {
		*v = yyv4698
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4702 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4703 := &yyv4702
		yy4703.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4704 := *v
	yyh4704, yyl4704 := z.DecSliceHelperStart()
	var yyc4704 bool
	if yyl4704 == 0 {
		if yyv4704 == nil {
			yyv4704 = []Container{}
			yyc4704 = true
		} else if len(yyv4704) != 0 {
			yyv4704 = yyv4704[:0]
			yyc4704 = true
		}
	} else if yyl4704 > 0 {
		var yyrr4704, yyrl4704 int
		var yyrt4704 bool
		if yyl4704 > cap(yyv4704) {

			yyrg4704 := len(yyv4704) > 0
			yyv24704 := yyv4704
			yyrl4704, yyrt4704 = z.DecInferLen(yyl4704, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4704 {
				if yyrl4704 <= cap(yyv4704) {
					yyv4704 = yyv4704[:yyrl4704]
				} else {
					yyv4704 = make([]Container, yyrl4704)
				}
			} else {
				yyv4704 = make([]Container, yyrl4704)
			}
			yyc4704 = true
			yyrr4704 = len(yyv4704)
			if yyrg4704 {
				copy(yyv4704, yyv24704)
			}
		} else if yyl4704 != len(yyv4704) {
			yyv4704 = yyv4704[:yyl4704]
			yyc4704 = true
		}
		yyj4704 := 0
		for ; yyj4704 < yyrr4704; yyj4704++ {
			yyh4704.ElemContainerState(yyj4704)
			if r.TryDecodeAsNil() {
				yyv4704[yyj4704] = Container{}
			} else {
				yyv4705 := &yyv4704[yyj4704]
				yyv4705.CodecDecodeSelf(d)
			}

		}
		if yyrt4704 {
			for ; yyj4704 < yyl4704; yyj4704++ {
				yyv4704 = append(yyv4704, Container{})
				yyh4704.ElemContainerState(yyj4704)
				if r.TryDecodeAsNil() {
					yyv4704[yyj4704] = Container{}
				} else {
					yyv4706 := &yyv4704[yyj4704]
					yyv4706.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4704 := 0
		for ; !r.CheckBreak(); yyj4704++ {

			if yyj4704 >= len(yyv4704) {
				yyv4704 = append(yyv4704, Container{}) // var yyz4704 Container
				yyc4704 = true
			}
			yyh4704.ElemContainerState(yyj4704)
			if yyj4704 < len(yyv4704) {
				if r.TryDecodeAsNil() {
					yyv4704[yyj4704] = Container{}
				} else {
					yyv4707 := &yyv4704[yyj4704]
					yyv4707.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4704 < len(yyv4704) {
			yyv4704 = yyv4704[:yyj4704]
			yyc4704 = true
		} else if yyj4704 == 0 && yyv4704 == nil {
			yyv4704 = []Container{}
			yyc4704 = true
		}
	}
	yyh4704.End()
	if yyc4704 {
		*v = yyv4704
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4708 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4709 := &yyv4708
		yy4709.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4710 := *v
	yyh4710, yyl4710 := z.DecSliceHelperStart()
	var yyc4710 bool
	if yyl4710 == 0 {
		if yyv4710 == nil {
			yyv4710 = []LocalObjectReference{}
			yyc4710 = true
		} else if len(yyv4710) != 0 {
			yyv4710 = yyv4710[:0]
			yyc4710 = true
		}
	} else if yyl4710 > 0 {
		var yyrr4710, yyrl4710 int
		var yyrt4710 bool
		if yyl4710 > cap(yyv4710) {

			yyrg4710 := len(yyv4710) > 0
			yyv24710 := yyv4710
			yyrl4710, yyrt4710 = z.DecInferLen(yyl4710, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4710 {
				if yyrl4710 <= cap(yyv4710) {
					yyv4710 = yyv4710[:yyrl4710]
				} else {
					yyv4710 = make([]LocalObjectReference, yyrl4710)
				}
			} else {
				yyv4710 = make([]LocalObjectReference, yyrl4710)
			}
			yyc4710 = true
			yyrr4710 = len(yyv4710)
			if yyrg4710 {
				copy(yyv4710, yyv24710)
			}
		} else if yyl4710 != len(yyv4710) {
			yyv4710 = yyv4710[:yyl4710]
			yyc4710 = true
		}
		yyj4710 := 0
		for ; yyj4710 < yyrr4710; yyj4710++ {
			yyh4710.ElemContainerState(yyj4710)
			if r.TryDecodeAsNil() {
				yyv4710[yyj4710] = LocalObjectReference{}
			} else {
				yyv4711 := &yyv4710[yyj4710]
				yyv4711.CodecDecodeSelf(d)
			}

		}
		if yyrt4710 {
			for ; yyj4710 < yyl4710; yyj4710++ {
				yyv4710 = append(yyv4710, LocalObjectReference{})
				yyh4710.ElemContainerState(yyj4710)
				if r.TryDecodeAsNil() {
					yyv4710[yyj4710] = LocalObjectReference{}
				} else {
					yyv4712 := &yyv4710[yyj4710]
					yyv4712.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4710 := 0
		for ; !r.CheckBreak(); yyj4710++ {

			if yyj4710 >= len(yyv4710) {
				yyv4710 = append(yyv4710, LocalObjectReference{}) // var yyz4710 LocalObjectReference
				yyc4710 = true
			}
			yyh4710.ElemContainerState(yyj4710)
			if yyj4710 < len(yyv4710) {
				if r.TryDecodeAsNil() {
					yyv4710[yyj4710] = LocalObjectReference{}
				} else {
					yyv4713 := &yyv4710[yyj4710]
					yyv4713.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4710 < len(yyv4710) {
			yyv4710 = yyv4710[:yyj4710]
			yyc4710 = true
		} else if yyj4710 == 0 && yyv4710 == nil {
			yyv4710 = []LocalObjectReference{}
			yyc4710 = true
		}
	}
	yyh4710.End()
	if yyc4710 {
		*v = yyv4710
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4714 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4715 := &yyv4714
		yy4715.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4716 := *v
	yyh4716, yyl4716 := z.DecSliceHelperStart()
	var yyc4716 bool
	if yyl4716 == 0 {
		if yyv4716 == nil {
			yyv4716 = []PodCondition{}
			yyc4716 = true
		} else if len(yyv4716) != 0 {
			yyv4716 = yyv4716[:0]
			yyc4716 = true
		}
	} else if yyl4716 > 0 {
		var yyrr4716, yyrl4716 int
		var yyrt4716 bool
		if yyl4716 > cap(yyv4716) {

			yyrg4716 := len(yyv4716) > 0
			yyv24716 := yyv4716
			yyrl4716, yyrt4716 = z.DecInferLen(yyl4716, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4716 {
				if yyrl4716 <= cap(yyv4716) {
					yyv4716 = yyv4716[:yyrl4716]
				} else {
					yyv4716 = make([]PodCondition, yyrl4716)
				}
			} else {
				yyv4716 = make([]PodCondition, yyrl4716)
			}
			yyc4716 = true
			yyrr4716 = len(yyv4716)
			if yyrg4716 {
				copy(yyv4716, yyv24716)
			}
		} else if yyl4716 != len(yyv4716) {
			yyv4716 = yyv4716[:yyl4716]
			yyc4716 = true
		}
		yyj4716 := 0
		for ; yyj4716 < yyrr4716; yyj4716++ {
			yyh4716.ElemContainerState(yyj4716)
			if r.TryDecodeAsNil() {
				yyv4716[yyj4716] = PodCondition{}
			} else {
				yyv4717 := &yyv4716[yyj4716]
				yyv4717.CodecDecodeSelf(d)
			}

		}
		if yyrt4716 {
			for ; yyj4716 < yyl4716; yyj4716++ {
				yyv4716 = append(yyv4716, PodCondition{})
				yyh4716.ElemContainerState(yyj4716)
				if r.TryDecodeAsNil() {
					yyv4716[yyj4716] = PodCondition{}
				} else {
					yyv4718 := &yyv4716[yyj4716]
					yyv4718.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4716 := 0
		for ; !r.CheckBreak(); yyj4716++ {

			if yyj4716 >= len(yyv4716) {
				yyv4716 = append(yyv4716, PodCondition{}) // var yyz4716 PodCondition
				yyc4716 = true
			}
			yyh4716.ElemContainerState(yyj4716)
			if yyj4716 < len(yyv4716) {
				if r.TryDecodeAsNil() {
					yyv4716[yyj4716] = PodCondition{}
				} else {
					yyv4719 := &yyv4716[yyj4716]
					yyv4719.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4716 < len(yyv4716) {
			yyv4716 = yyv4716[:yyj4716]
			yyc4716 = true
		} else if yyj4716 == 0 && yyv4716 == nil {
			yyv4716 = []PodCondition{}
			yyc4716 = true
		}
	}
	yyh4716.End()
	if yyc4716 {
		*v = yyv4716
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4720 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4721 := &yyv4720
		yy4721.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4722 := *v
	yyh4722, yyl4722 := z.DecSliceHelperStart()
	var yyc4722 bool
	if yyl4722 == 0 {
		if yyv4722 == nil {
			yyv4722 = []ContainerStatus{}
			yyc4722 = true
		} else if len(yyv4722) != 0 {
			yyv4722 = yyv4722[:0]
			yyc4722 = true
		}
	} else if yyl4722 > 0 {
		var yyrr4722, yyrl4722 int
		var yyrt4722 bool
		if yyl4722 > cap(yyv4722) {

			yyrg4722 := len(yyv4722) > 0
			yyv24722 := yyv4722
			yyrl4722, yyrt4722 = z.DecInferLen(yyl4722, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4722 {
				if yyrl4722 <= cap(yyv4722) {
					yyv4722 = yyv4722[:yyrl4722]
				} else {
					yyv4722 = make([]ContainerStatus, yyrl4722)
				}
			} else {
				yyv4722 = make([]ContainerStatus, yyrl4722)
			}
			yyc4722 = true
			yyrr4722 = len(yyv4722)
			if yyrg4722 {
				copy(yyv4722, yyv24722)
			}
		} else if yyl4722 != len(yyv4722) {
			yyv4722 = yyv4722[:yyl4722]
			yyc4722 = true
		}
		yyj4722 := 0
		for ; yyj4722 < yyrr4722; yyj4722++ {
			yyh4722.ElemContainerState(yyj4722)
			if r.TryDecodeAsNil() {
				yyv4722[yyj4722] = ContainerStatus{}
			} else {
				yyv4723 := &yyv4722[yyj4722]
				yyv4723.CodecDecodeSelf(d)
			}

		}
		if yyrt4722 {
			for ; yyj4722 < yyl4722; yyj4722++ {
				yyv4722 = append(yyv4722, ContainerStatus{})
				yyh4722.ElemContainerState(yyj4722)
				if r.TryDecodeAsNil() {
					yyv4722[yyj4722] = ContainerStatus{}
				} else {
					yyv4724 := &yyv4722[yyj4722]
					yyv4724.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4722 := 0
		for ; !r.CheckBreak(); yyj4722++ {

			if yyj4722 >= len(yyv4722) {
				yyv4722 = append(yyv4722, ContainerStatus{}) // var yyz4722 ContainerStatus
				yyc4722 = true
			}
			yyh4722.ElemContainerState(yyj4722)
			if yyj4722 < len(yyv4722) {
				if r.TryDecodeAsNil() {
					yyv4722[yyj4722] = ContainerStatus{}
				} else {
					yyv4725 := &yyv4722[yyj4722]
					yyv4725.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4722 < len(yyv4722) {
			yyv4722 = yyv4722[:yyj4722]
			yyc4722 = true
		} else if yyj4722 == 0 && yyv4722 == nil {
			yyv4722 = []ContainerStatus{}
			yyc4722 = true
		}
	}
	yyh4722.End()
	if yyc4722 {
		*v = yyv4722
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4726 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4727 := &yyv4726
		yy4727.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4728 := *v
	yyh4728, yyl4728 := z.DecSliceHelperStart()
	var yyc4728 bool
	if yyl4728 == 0 {
		if yyv4728 == nil {
			yyv4728 = []Pod{}
			yyc4728 = true
		} else if len(yyv4728) != 0 {
			yyv4728 = yyv4728[:0]
			yyc4728 = true
		}
	} else if yyl4728 > 0 {
		var yyrr4728, yyrl4728 int
		var yyrt4728 bool
		if yyl4728 > cap(yyv4728) {

			yyrg4728 := len(yyv4728) > 0
			yyv24728 := yyv4728
			yyrl4728, yyrt4728 = z.DecInferLen(yyl4728, z.DecBasicHandle().MaxInitLen, 688)
			if yyrt4728 {
				if yyrl4728 <= cap(yyv4728) {
					yyv4728 = yyv4728[:yyrl4728]
				} else {
					yyv4728 = make([]Pod, yyrl4728)
				}
			} else {
				yyv4728 = make([]Pod, yyrl4728)
			}
			yyc4728 = true
			yyrr4728 = len(yyv4728)
			if yyrg4728 {
				copy(yyv4728, yyv24728)
			}
		} else if yyl4728 != len(yyv4728) {
			yyv4728 = yyv4728[:yyl4728]
			yyc4728 = true
		}
		yyj4728 := 0
		for ; yyj4728 < yyrr4728; yyj4728++ {
			yyh4728.ElemContainerState(yyj4728)
			if r.TryDecodeAsNil() {
				yyv4728[yyj4728] = Pod{}
			} else {
				yyv4729 := &yyv4728[yyj4728]
				yyv4729.CodecDecodeSelf(d)
			}

		}
		if yyrt4728 {
			for ; yyj4728 < yyl4728; yyj4728++ {
				yyv4728 = append(yyv4728, Pod{})
				yyh4728.ElemContainerState(yyj4728)
				if r.TryDecodeAsNil() {
					yyv4728[yyj4728] = Pod{}
				} else {
					yyv4730 := &yyv4728[yyj4728]
					yyv4730.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4728 := 0
		for ; !r.CheckBreak(); yyj4728++ {

			if yyj4728 >= len(yyv4728) {
				yyv4728 = append(yyv4728, Pod{}) // var yyz4728 Pod
				yyc4728 = true
			}
			yyh4728.ElemContainerState(yyj4728)
			if yyj4728 < len(yyv4728) {
				if r.TryDecodeAsNil() {
					yyv4728[yyj4728] = Pod{}
				} else {
					yyv4731 := &yyv4728[yyj4728]
					yyv4731.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4728 < len(yyv4728) {
			yyv4728 = yyv4728[:yyj4728]
			yyc4728 = true
		} else if yyj4728 == 0 && yyv4728 == nil {
			yyv4728 = []Pod{}
			yyc4728 = true
		}
	}
	yyh4728.End()
	if yyc4728 {
		*v = yyv4728
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4732 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4733 := &yyv4732
		yy4733.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4734 := *v
	yyh4734, yyl4734 := z.DecSliceHelperStart()
	var yyc4734 bool
	if yyl4734 == 0 {
		if yyv4734 == nil {
			yyv4734 = []PodTemplate{}
			yyc4734 = true
		} else if len(yyv4734) != 0 {
			yyv4734 = yyv4734[:0]
			yyc4734 = true
		}
	} else if yyl4734 > 0 {
		var yyrr4734, yyrl4734 int
		var yyrt4734 bool
		if yyl4734 > cap(yyv4734) {

			yyrg4734 := len(yyv4734) > 0
			yyv24734 := yyv4734
			yyrl4734, yyrt4734 = z.DecInferLen(yyl4734, z.DecBasicHandle().MaxInitLen, 776)
			if yyrt4734 {
				if yyrl4734 <= cap(yyv4734) {
					yyv4734 = yyv4734[:yyrl4734]
				} else {
					yyv4734 = make([]PodTemplate, yyrl4734)
				}
			} else {
				yyv4734 = make([]PodTemplate, yyrl4734)
			}
			yyc4734 = true
			yyrr4734 = len(yyv4734)
			if yyrg4734 {
				copy(yyv4734, yyv24734)
			}
		} else if yyl4734 != len(yyv4734) {
			yyv4734 = yyv4734[:yyl4734]
			yyc4734 = true
		}
		yyj4734 := 0
		for ; yyj4734 < yyrr4734; yyj4734++ {
			yyh4734.ElemContainerState(yyj4734)
			if r.TryDecodeAsNil() {
				yyv4734[yyj4734] = PodTemplate{}
			} else {
				yyv4735 := &yyv4734[yyj4734]
				yyv4735.CodecDecodeSelf(d)
			}

		}
		if yyrt4734 {
			for ; yyj4734 < yyl4734; yyj4734++ {
				yyv4734 = append(yyv4734, PodTemplate{})
				yyh4734.ElemContainerState(yyj4734)
				if r.TryDecodeAsNil() {
					yyv4734[yyj4734] = PodTemplate{}
				} else {
					yyv4736 := &yyv4734[yyj4734]
					yyv4736.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4734 := 0
		for ; !r.CheckBreak(); yyj4734++ {

			if yyj4734 >= len(yyv4734) {
				yyv4734 = append(yyv4734, PodTemplate{}) // var yyz4734 PodTemplate
				yyc4734 = true
			}
			yyh4734.ElemContainerState(yyj4734)
			if yyj4734 < len(yyv4734) {
				if r.TryDecodeAsNil() {
					yyv4734[yyj4734] = PodTemplate{}
				} else {
					yyv4737 := &yyv4734[yyj4734]
					yyv4737.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4734 < len(yyv4734) {
			yyv4734 = yyv4734[:yyj4734]
			yyc4734 = true
		} else if yyj4734 == 0 && yyv4734 == nil {
			yyv4734 = []PodTemplate{}
			yyc4734 = true
		}
	}
	yyh4734.End()
	if yyc4734 {
		*v = yyv4734
	}
}

func (x codecSelfer1234) encSliceReplicationControllerCondition(v []ReplicationControllerCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4738 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4739 := &yyv4738
		yy4739.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationControllerCondition(v *[]ReplicationControllerCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4740 := *v
	yyh4740, yyl4740 := z.DecSliceHelperStart()
	var yyc4740 bool
	if yyl4740 == 0 {
		if yyv4740 == nil {
			yyv4740 = []ReplicationControllerCondition{}
			yyc4740 = true
		} else if len(yyv4740) != 0 {
			yyv4740 = yyv4740[:0]
			yyc4740 = true
		}
	} else if yyl4740 > 0 {
		var yyrr4740, yyrl4740 int
		var yyrt4740 bool
		if yyl4740 > cap(yyv4740) {

			yyrg4740 := len(yyv4740) > 0
			yyv24740 := yyv4740
			yyrl4740, yyrt4740 = z.DecInferLen(yyl4740, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt4740 {
				if yyrl4740 <= cap(yyv4740) {
					yyv4740 = yyv4740[:yyrl4740]
				} else {
					yyv4740 = make([]ReplicationControllerCondition, yyrl4740)
				}
			} else {
				yyv4740 = make([]ReplicationControllerCondition, yyrl4740)
			}
			yyc4740 = true
			yyrr4740 = len(yyv4740)
			if yyrg4740 {
				copy(yyv4740, yyv24740)
			}
		} else if yyl4740 != len(yyv4740) {
			yyv4740 = yyv4740[:yyl4740]
			yyc4740 = true
		}
		yyj4740 := 0
		for ; yyj4740 < yyrr4740; yyj4740++ {
			yyh4740.ElemContainerState(yyj4740)
			if r.TryDecodeAsNil() {
				yyv4740[yyj4740] = ReplicationControllerCondition{}
			} else {
				yyv4741 := &yyv4740[yyj4740]
				yyv4741.CodecDecodeSelf(d)
			}

		}
		if yyrt4740 {
			for ; yyj4740 < yyl4740; yyj4740++ {
				yyv4740 = append(yyv4740, ReplicationControllerCondition{})
				yyh4740.ElemContainerState(yyj4740)
				if r.TryDecodeAsNil() {
					yyv4740[yyj4740] = ReplicationControllerCondition{}
				} else {
					yyv4742 := &yyv4740[yyj4740]
					yyv4742.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4740 := 0
		for ; !r.CheckBreak(); yyj4740++ {

			if yyj4740 >= len(yyv4740) {
				yyv4740 = append(yyv4740, ReplicationControllerCondition{}) // var yyz4740 ReplicationControllerCondition
				yyc4740 = true
			}
			yyh4740.ElemContainerState(yyj4740)
			if yyj4740 < len(yyv4740) {
				if r.TryDecodeAsNil() {
					yyv4740[yyj4740] = ReplicationControllerCondition{}
				} else {
					yyv4743 := &yyv4740[yyj4740]
					yyv4743.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4740 < len(yyv4740) {
			yyv4740 = yyv4740[:yyj4740]
			yyc4740 = true
		} else if yyj4740 == 0 && yyv4740 == nil {
			yyv4740 = []ReplicationControllerCondition{}
			yyc4740 = true
		}
	}
	yyh4740.End()
	if yyc4740 {
		*v = yyv4740
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4744 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4745 := &yyv4744
		yy4745.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4746 := *v
	yyh4746, yyl4746 := z.DecSliceHelperStart()
	var yyc4746 bool
	if yyl4746 == 0 {
		if yyv4746 == nil {
			yyv4746 = []ReplicationController{}
			yyc4746 = true
		} else if len(yyv4746) != 0 {
			yyv4746 = yyv4746[:0]
			yyc4746 = true
		}
	} else if yyl4746 > 0 {
		var yyrr4746, yyrl4746 int
		var yyrt4746 bool
		if yyl4746 > cap(yyv4746) {

			yyrg4746 := len(yyv4746) > 0
			yyv24746 := yyv4746
			yyrl4746, yyrt4746 = z.DecInferLen(yyl4746, z.DecBasicHandle().MaxInitLen, 360)
			if yyrt4746 {
				if yyrl4746 <= cap(yyv4746) {
					yyv4746 = yyv4746[:yyrl4746]
				} else {
					yyv4746 = make([]ReplicationController, yyrl4746)
				}
			} else {
				yyv4746 = make([]ReplicationController, yyrl4746)
			}
			yyc4746 = true
			yyrr4746 = len(yyv4746)
			if yyrg4746 {
				copy(yyv4746, yyv24746)
			}
		} else if yyl4746 != len(yyv4746) {
			yyv4746 = yyv4746[:yyl4746]
			yyc4746 = true
		}
		yyj4746 := 0
		for ; yyj4746 < yyrr4746; yyj4746++ {
			yyh4746.ElemContainerState(yyj4746)
			if r.TryDecodeAsNil() {
				yyv4746[yyj4746] = ReplicationController{}
			} else {
				yyv4747 := &yyv4746[yyj4746]
				yyv4747.CodecDecodeSelf(d)
			}

		}
		if yyrt4746 {
			for ; yyj4746 < yyl4746; yyj4746++ {
				yyv4746 = append(yyv4746, ReplicationController{})
				yyh4746.ElemContainerState(yyj4746)
				if r.TryDecodeAsNil() {
					yyv4746[yyj4746] = ReplicationController{}
				} else {
					yyv4748 := &yyv4746[yyj4746]
					yyv4748.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4746 := 0
		for ; !r.CheckBreak(); yyj4746++ {

			if yyj4746 >= len(yyv4746) {
				yyv4746 = append(yyv4746, ReplicationController{}) // var yyz4746 ReplicationController
				yyc4746 = true
			}
			yyh4746.ElemContainerState(yyj4746)
			if yyj4746 < len(yyv4746) {
				if r.TryDecodeAsNil() {
					yyv4746[yyj4746] = ReplicationController{}
				} else {
					yyv4749 := &yyv4746[yyj4746]
					yyv4749.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4746 < len(yyv4746) {
			yyv4746 = yyv4746[:yyj4746]
			yyc4746 = true
		} else if yyj4746 == 0 && yyv4746 == nil {
			yyv4746 = []ReplicationController{}
			yyc4746 = true
		}
	}
	yyh4746.End()
	if yyc4746 {
		*v = yyv4746
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4750 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4751 := &yyv4750
		yy4751.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4752 := *v
	yyh4752, yyl4752 := z.DecSliceHelperStart()
	var yyc4752 bool
	if yyl4752 == 0 {
		if yyv4752 == nil {
			yyv4752 = []LoadBalancerIngress{}
			yyc4752 = true
		} else if len(yyv4752) != 0 {
			yyv4752 = yyv4752[:0]
			yyc4752 = true
		}
	} else if yyl4752 > 0 {
		var yyrr4752, yyrl4752 int
		var yyrt4752 bool
		if yyl4752 > cap(yyv4752) {

			yyrg4752 := len(yyv4752) > 0
			yyv24752 := yyv4752
			yyrl4752, yyrt4752 = z.DecInferLen(yyl4752, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4752 {
				if yyrl4752 <= cap(yyv4752) {
					yyv4752 = yyv4752[:yyrl4752]
				} else {
					yyv4752 = make([]LoadBalancerIngress, yyrl4752)
				}
			} else {
				yyv4752 = make([]LoadBalancerIngress, yyrl4752)
			}
			yyc4752 = true
			yyrr4752 = len(yyv4752)
			if yyrg4752 {
				copy(yyv4752, yyv24752)
			}
		} else if yyl4752 != len(yyv4752) {
			yyv4752 = yyv4752[:yyl4752]
			yyc4752 = true
		}
		yyj4752 := 0
		for ; yyj4752 < yyrr4752; yyj4752++ {
			yyh4752.ElemContainerState(yyj4752)
			if r.TryDecodeAsNil() {
				yyv4752[yyj4752] = LoadBalancerIngress{}
			} else {
				yyv4753 := &yyv4752[yyj4752]
				yyv4753.CodecDecodeSelf(d)
			}

		}
		if yyrt4752 {
			for ; yyj4752 < yyl4752; yyj4752++ {
				yyv4752 = append(yyv4752, LoadBalancerIngress{})
				yyh4752.ElemContainerState(yyj4752)
				if r.TryDecodeAsNil() {
					yyv4752[yyj4752] = LoadBalancerIngress{}
				} else {
					yyv4754 := &yyv4752[yyj4752]
					yyv4754.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4752 := 0
		for ; !r.CheckBreak(); yyj4752++ {

			if yyj4752 >= len(yyv4752) {
				yyv4752 = append(yyv4752, LoadBalancerIngress{}) // var yyz4752 LoadBalancerIngress
				yyc4752 = true
			}
			yyh4752.ElemContainerState(yyj4752)
			if yyj4752 < len(yyv4752) {
				if r.TryDecodeAsNil() {
					yyv4752[yyj4752] = LoadBalancerIngress{}
				} else {
					yyv4755 := &yyv4752[yyj4752]
					yyv4755.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4752 < len(yyv4752) {
			yyv4752 = yyv4752[:yyj4752]
			yyc4752 = true
		} else if yyj4752 == 0 && yyv4752 == nil {
			yyv4752 = []LoadBalancerIngress{}
			yyc4752 = true
		}
	}
	yyh4752.End()
	if yyc4752 {
		*v = yyv4752
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4756 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4757 := &yyv4756
		yy4757.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4758 := *v
	yyh4758, yyl4758 := z.DecSliceHelperStart()
	var yyc4758 bool
	if yyl4758 == 0 {
		if yyv4758 == nil {
			yyv4758 = []ServicePort{}
			yyc4758 = true
		} else if len(yyv4758) != 0 {
			yyv4758 = yyv4758[:0]
			yyc4758 = true
		}
	} else if yyl4758 > 0 {
		var yyrr4758, yyrl4758 int
		var yyrt4758 bool
		if yyl4758 > cap(yyv4758) {

			yyrg4758 := len(yyv4758) > 0
			yyv24758 := yyv4758
			yyrl4758, yyrt4758 = z.DecInferLen(yyl4758, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4758 {
				if yyrl4758 <= cap(yyv4758) {
					yyv4758 = yyv4758[:yyrl4758]
				} else {
					yyv4758 = make([]ServicePort, yyrl4758)
				}
			} else {
				yyv4758 = make([]ServicePort, yyrl4758)
			}
			yyc4758 = true
			yyrr4758 = len(yyv4758)
			if yyrg4758 {
				copy(yyv4758, yyv24758)
			}
		} else if yyl4758 != len(yyv4758) {
			yyv4758 = yyv4758[:yyl4758]
			yyc4758 = true
		}
		yyj4758 := 0
		for ; yyj4758 < yyrr4758; yyj4758++ {
			yyh4758.ElemContainerState(yyj4758)
			if r.TryDecodeAsNil() {
				yyv4758[yyj4758] = ServicePort{}
			} else {
				yyv4759 := &yyv4758[yyj4758]
				yyv4759.CodecDecodeSelf(d)
			}

		}
		if yyrt4758 {
			for ; yyj4758 < yyl4758; yyj4758++ {
				yyv4758 = append(yyv4758, ServicePort{})
				yyh4758.ElemContainerState(yyj4758)
				if r.TryDecodeAsNil() {
					yyv4758[yyj4758] = ServicePort{}
				} else {
					yyv4760 := &yyv4758[yyj4758]
					yyv4760.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4758 := 0
		for ; !r.CheckBreak(); yyj4758++ {

			if yyj4758 >= len(yyv4758) {
				yyv4758 = append(yyv4758, ServicePort{}) // var yyz4758 ServicePort
				yyc4758 = true
			}
			yyh4758.ElemContainerState(yyj4758)
			if yyj4758 < len(yyv4758) {
				if r.TryDecodeAsNil() {
					yyv4758[yyj4758] = ServicePort{}
				} else {
					yyv4761 := &yyv4758[yyj4758]
					yyv4761.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4758 < len(yyv4758) {
			yyv4758 = yyv4758[:yyj4758]
			yyc4758 = true
		} else if yyj4758 == 0 && yyv4758 == nil {
			yyv4758 = []ServicePort{}
			yyc4758 = true
		}
	}
	yyh4758.End()
	if yyc4758 {
		*v = yyv4758
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4762 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4763 := &yyv4762
		yy4763.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4764 := *v
	yyh4764, yyl4764 := z.DecSliceHelperStart()
	var yyc4764 bool
	if yyl4764 == 0 {
		if yyv4764 == nil {
			yyv4764 = []Service{}
			yyc4764 = true
		} else if len(yyv4764) != 0 {
			yyv4764 = yyv4764[:0]
			yyc4764 = true
		}
	} else if yyl4764 > 0 {
		var yyrr4764, yyrl4764 int
		var yyrt4764 bool
		if yyl4764 > cap(yyv4764) {

			yyrg4764 := len(yyv4764) > 0
			yyv24764 := yyv4764
			yyrl4764, yyrt4764 = z.DecInferLen(yyl4764, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4764 {
				if yyrl4764 <= cap(yyv4764) {
					yyv4764 = yyv4764[:yyrl4764]
				} else {
					yyv4764 = make([]Service, yyrl4764)
				}
			} else {
				yyv4764 = make([]Service, yyrl4764)
			}
			yyc4764 = true
			yyrr4764 = len(yyv4764)
			if yyrg4764 {
				copy(yyv4764, yyv24764)
			}
		} else if yyl4764 != len(yyv4764) {
			yyv4764 = yyv4764[:yyl4764]
			yyc4764 = true
		}
		yyj4764 := 0
		for ; yyj4764 < yyrr4764; yyj4764++ {
			yyh4764.ElemContainerState(yyj4764)
			if r.TryDecodeAsNil() {
				yyv4764[yyj4764] = Service{}
			} else {
				yyv4765 := &yyv4764[yyj4764]
				yyv4765.CodecDecodeSelf(d)
			}

		}
		if yyrt4764 {
			for ; yyj4764 < yyl4764; yyj4764++ {
				yyv4764 = append(yyv4764, Service{})
				yyh4764.ElemContainerState(yyj4764)
				if r.TryDecodeAsNil() {
					yyv4764[yyj4764] = Service{}
				} else {
					yyv4766 := &yyv4764[yyj4764]
					yyv4766.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4764 := 0
		for ; !r.CheckBreak(); yyj4764++ {

			if yyj4764 >= len(yyv4764) {
				yyv4764 = append(yyv4764, Service{}) // var yyz4764 Service
				yyc4764 = true
			}
			yyh4764.ElemContainerState(yyj4764)
			if yyj4764 < len(yyv4764) {
				if r.TryDecodeAsNil() {
					yyv4764[yyj4764] = Service{}
				} else {
					yyv4767 := &yyv4764[yyj4764]
					yyv4767.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4764 < len(yyv4764) {
			yyv4764 = yyv4764[:yyj4764]
			yyc4764 = true
		} else if yyj4764 == 0 && yyv4764 == nil {
			yyv4764 = []Service{}
			yyc4764 = true
		}
	}
	yyh4764.End()
	if yyc4764 {
		*v = yyv4764
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4768 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4769 := &yyv4768
		yy4769.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4770 := *v
	yyh4770, yyl4770 := z.DecSliceHelperStart()
	var yyc4770 bool
	if yyl4770 == 0 {
		if yyv4770 == nil {
			yyv4770 = []ObjectReference{}
			yyc4770 = true
		} else if len(yyv4770) != 0 {
			yyv4770 = yyv4770[:0]
			yyc4770 = true
		}
	} else if yyl4770 > 0 {
		var yyrr4770, yyrl4770 int
		var yyrt4770 bool
		if yyl4770 > cap(yyv4770) {

			yyrg4770 := len(yyv4770) > 0
			yyv24770 := yyv4770
			yyrl4770, yyrt4770 = z.DecInferLen(yyl4770, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4770 {
				if yyrl4770 <= cap(yyv4770) {
					yyv4770 = yyv4770[:yyrl4770]
				} else {
					yyv4770 = make([]ObjectReference, yyrl4770)
				}
			} else {
				yyv4770 = make([]ObjectReference, yyrl4770)
			}
			yyc4770 = true
			yyrr4770 = len(yyv4770)
			if yyrg4770 {
				copy(yyv4770, yyv24770)
			}
		} else if yyl4770 != len(yyv4770) {
			yyv4770 = yyv4770[:yyl4770]
			yyc4770 = true
		}
		yyj4770 := 0
		for ; yyj4770 < yyrr4770; yyj4770++ {
			yyh4770.ElemContainerState(yyj4770)
			if r.TryDecodeAsNil() {
				yyv4770[yyj4770] = ObjectReference{}
			} else {
				yyv4771 := &yyv4770[yyj4770]
				yyv4771.CodecDecodeSelf(d)
			}

		}
		if yyrt4770 {
			for ; yyj4770 < yyl4770; yyj4770++ {
				yyv4770 = append(yyv4770, ObjectReference{})
				yyh4770.ElemContainerState(yyj4770)
				if r.TryDecodeAsNil() {
					yyv4770[yyj4770] = ObjectReference{}
				} else {
					yyv4772 := &yyv4770[yyj4770]
					yyv4772.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4770 := 0
		for ; !r.CheckBreak(); yyj4770++ {

			if yyj4770 >= len(yyv4770) {
				yyv4770 = append(yyv4770, ObjectReference{}) // var yyz4770 ObjectReference
				yyc4770 = true
			}
			yyh4770.ElemContainerState(yyj4770)
			if yyj4770 < len(yyv4770) {
				if r.TryDecodeAsNil() {
					yyv4770[yyj4770] = ObjectReference{}
				} else {
					yyv4773 := &yyv4770[yyj4770]
					yyv4773.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4770 < len(yyv4770) {
			yyv4770 = yyv4770[:yyj4770]
			yyc4770 = true
		} else if yyj4770 == 0 && yyv4770 == nil {
			yyv4770 = []ObjectReference{}
			yyc4770 = true
		}
	}
	yyh4770.End()
	if yyc4770 {
		*v = yyv4770
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4774 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4775 := &yyv4774
		yy4775.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4776 := *v
	yyh4776, yyl4776 := z.DecSliceHelperStart()
	var yyc4776 bool
	if yyl4776 == 0 {
		if yyv4776 == nil {
			yyv4776 = []ServiceAccount{}
			yyc4776 = true
		} else if len(yyv4776) != 0 {
			yyv4776 = yyv4776[:0]
			yyc4776 = true
		}
	} else if yyl4776 > 0 {
		var yyrr4776, yyrl4776 int
		var yyrt4776 bool
		if yyl4776 > cap(yyv4776) {

			yyrg4776 := len(yyv4776) > 0
			yyv24776 := yyv4776
			yyrl4776, yyrt4776 = z.DecInferLen(yyl4776, z.DecBasicHandle().MaxInitLen, 328)
			if yyrt4776 {
				if yyrl4776 <= cap(yyv4776) {
					yyv4776 = yyv4776[:yyrl4776]
				} else {
					yyv4776 = make([]ServiceAccount, yyrl4776)
				}
			} else {
				yyv4776 = make([]ServiceAccount, yyrl4776)
			}
			yyc4776 = true
			yyrr4776 = len(yyv4776)
			if yyrg4776 {
				copy(yyv4776, yyv24776)
			}
		} else if yyl4776 != len(yyv4776) {
			yyv4776 = yyv4776[:yyl4776]
			yyc4776 = true
		}
		yyj4776 := 0
		for ; yyj4776 < yyrr4776; yyj4776++ {
			yyh4776.ElemContainerState(yyj4776)
			if r.TryDecodeAsNil() {
				yyv4776[yyj4776] = ServiceAccount{}
			} else {
				yyv4777 := &yyv4776[yyj4776]
				yyv4777.CodecDecodeSelf(d)
			}

		}
		if yyrt4776 {
			for ; yyj4776 < yyl4776; yyj4776++ {
				yyv4776 = append(yyv4776, ServiceAccount{})
				yyh4776.ElemContainerState(yyj4776)
				if r.TryDecodeAsNil() {
					yyv4776[yyj4776] = ServiceAccount{}
				} else {
					yyv4778 := &yyv4776[yyj4776]
					yyv4778.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4776 := 0
		for ; !r.CheckBreak(); yyj4776++ {

			if yyj4776 >= len(yyv4776) {
				yyv4776 = append(yyv4776, ServiceAccount{}) // var yyz4776 ServiceAccount
				yyc4776 = true
			}
			yyh4776.ElemContainerState(yyj4776)
			if yyj4776 < len(yyv4776) {
				if r.TryDecodeAsNil() {
					yyv4776[yyj4776] = ServiceAccount{}
				} else {
					yyv4779 := &yyv4776[yyj4776]
					yyv4779.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4776 < len(yyv4776) {
			yyv4776 = yyv4776[:yyj4776]
			yyc4776 = true
		} else if yyj4776 == 0 && yyv4776 == nil {
			yyv4776 = []ServiceAccount{}
			yyc4776 = true
		}
	}
	yyh4776.End()
	if yyc4776 {
		*v = yyv4776
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4780 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4781 := &yyv4780
		yy4781.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4782 := *v
	yyh4782, yyl4782 := z.DecSliceHelperStart()
	var yyc4782 bool
	if yyl4782 == 0 {
		if yyv4782 == nil {
			yyv4782 = []EndpointSubset{}
			yyc4782 = true
		} else if len(yyv4782) != 0 {
			yyv4782 = yyv4782[:0]
			yyc4782 = true
		}
	} else if yyl4782 > 0 {
		var yyrr4782, yyrl4782 int
		var yyrt4782 bool
		if yyl4782 > cap(yyv4782) {

			yyrg4782 := len(yyv4782) > 0
			yyv24782 := yyv4782
			yyrl4782, yyrt4782 = z.DecInferLen(yyl4782, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4782 {
				if yyrl4782 <= cap(yyv4782) {
					yyv4782 = yyv4782[:yyrl4782]
				} else {
					yyv4782 = make([]EndpointSubset, yyrl4782)
				}
			} else {
				yyv4782 = make([]EndpointSubset, yyrl4782)
			}
			yyc4782 = true
			yyrr4782 = len(yyv4782)
			if yyrg4782 {
				copy(yyv4782, yyv24782)
			}
		} else if yyl4782 != len(yyv4782) {
			yyv4782 = yyv4782[:yyl4782]
			yyc4782 = true
		}
		yyj4782 := 0
		for ; yyj4782 < yyrr4782; yyj4782++ {
			yyh4782.ElemContainerState(yyj4782)
			if r.TryDecodeAsNil() {
				yyv4782[yyj4782] = EndpointSubset{}
			} else {
				yyv4783 := &yyv4782[yyj4782]
				yyv4783.CodecDecodeSelf(d)
			}

		}
		if yyrt4782 {
			for ; yyj4782 < yyl4782; yyj4782++ {
				yyv4782 = append(yyv4782, EndpointSubset{})
				yyh4782.ElemContainerState(yyj4782)
				if r.TryDecodeAsNil() {
					yyv4782[yyj4782] = EndpointSubset{}
				} else {
					yyv4784 := &yyv4782[yyj4782]
					yyv4784.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4782 := 0
		for ; !r.CheckBreak(); yyj4782++ {

			if yyj4782 >= len(yyv4782) {
				yyv4782 = append(yyv4782, EndpointSubset{}) // var yyz4782 EndpointSubset
				yyc4782 = true
			}
			yyh4782.ElemContainerState(yyj4782)
			if yyj4782 < len(yyv4782) {
				if r.TryDecodeAsNil() {
					yyv4782[yyj4782] = EndpointSubset{}
				} else {
					yyv4785 := &yyv4782[yyj4782]
					yyv4785.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4782 < len(yyv4782) {
			yyv4782 = yyv4782[:yyj4782]
			yyc4782 = true
		} else if yyj4782 == 0 && yyv4782 == nil {
			yyv4782 = []EndpointSubset{}
			yyc4782 = true
		}
	}
	yyh4782.End()
	if yyc4782 {
		*v = yyv4782
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4786 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4787 := &yyv4786
		yy4787.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4788 := *v
	yyh4788, yyl4788 := z.DecSliceHelperStart()
	var yyc4788 bool
	if yyl4788 == 0 {
		if yyv4788 == nil {
			yyv4788 = []EndpointAddress{}
			yyc4788 = true
		} else if len(yyv4788) != 0 {
			yyv4788 = yyv4788[:0]
			yyc4788 = true
		}
	} else if yyl4788 > 0 {
		var yyrr4788, yyrl4788 int
		var yyrt4788 bool
		if yyl4788 > cap(yyv4788) {

			yyrg4788 := len(yyv4788) > 0
			yyv24788 := yyv4788
			yyrl4788, yyrt4788 = z.DecInferLen(yyl4788, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4788 {
				if yyrl4788 <= cap(yyv4788) {
					yyv4788 = yyv4788[:yyrl4788]
				} else {
					yyv4788 = make([]EndpointAddress, yyrl4788)
				}
			} else {
				yyv4788 = make([]EndpointAddress, yyrl4788)
			}
			yyc4788 = true
			yyrr4788 = len(yyv4788)
			if yyrg4788 {
				copy(yyv4788, yyv24788)
			}
		} else if yyl4788 != len(yyv4788) {
			yyv4788 = yyv4788[:yyl4788]
			yyc4788 = true
		}
		yyj4788 := 0
		for ; yyj4788 < yyrr4788; yyj4788++ {
			yyh4788.ElemContainerState(yyj4788)
			if r.TryDecodeAsNil() {
				yyv4788[yyj4788] = EndpointAddress{}
			} else {
				yyv4789 := &yyv4788[yyj4788]
				yyv4789.CodecDecodeSelf(d)
			}

		}
		if yyrt4788 {
			for ; yyj4788 < yyl4788; yyj4788++ {
				yyv4788 = append(yyv4788, EndpointAddress{})
				yyh4788.ElemContainerState(yyj4788)
				if r.TryDecodeAsNil() {
					yyv4788[yyj4788] = EndpointAddress{}
				} else {
					yyv4790 := &yyv4788[yyj4788]
					yyv4790.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4788 := 0
		for ; !r.CheckBreak(); yyj4788++ {

			if yyj4788 >= len(yyv4788) {
				yyv4788 = append(yyv4788, EndpointAddress{}) // var yyz4788 EndpointAddress
				yyc4788 = true
			}
			yyh4788.ElemContainerState(yyj4788)
			if yyj4788 < len(yyv4788) {
				if r.TryDecodeAsNil() {
					yyv4788[yyj4788] = EndpointAddress{}
				} else {
					yyv4791 := &yyv4788[yyj4788]
					yyv4791.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4788 < len(yyv4788) {
			yyv4788 = yyv4788[:yyj4788]
			yyc4788 = true
		} else if yyj4788 == 0 && yyv4788 == nil {
			yyv4788 = []EndpointAddress{}
			yyc4788 = true
		}
	}
	yyh4788.End()
	if yyc4788 {
		*v = yyv4788
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4792 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4793 := &yyv4792
		yy4793.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4794 := *v
	yyh4794, yyl4794 := z.DecSliceHelperStart()
	var yyc4794 bool
	if yyl4794 == 0 {
		if yyv4794 == nil {
			yyv4794 = []EndpointPort{}
			yyc4794 = true
		} else if len(yyv4794) != 0 {
			yyv4794 = yyv4794[:0]
			yyc4794 = true
		}
	} else if yyl4794 > 0 {
		var yyrr4794, yyrl4794 int
		var yyrt4794 bool
		if yyl4794 > cap(yyv4794) {

			yyrg4794 := len(yyv4794) > 0
			yyv24794 := yyv4794
			yyrl4794, yyrt4794 = z.DecInferLen(yyl4794, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4794 {
				if yyrl4794 <= cap(yyv4794) {
					yyv4794 = yyv4794[:yyrl4794]
				} else {
					yyv4794 = make([]EndpointPort, yyrl4794)
				}
			} else {
				yyv4794 = make([]EndpointPort, yyrl4794)
			}
			yyc4794 = true
			yyrr4794 = len(yyv4794)
			if yyrg4794 {
				copy(yyv4794, yyv24794)
			}
		} else if yyl4794 != len(yyv4794) {
			yyv4794 = yyv4794[:yyl4794]
			yyc4794 = true
		}
		yyj4794 := 0
		for ; yyj4794 < yyrr4794; yyj4794++ {
			yyh4794.ElemContainerState(yyj4794)
			if r.TryDecodeAsNil() {
				yyv4794[yyj4794] = EndpointPort{}
			} else {
				yyv4795 := &yyv4794[yyj4794]
				yyv4795.CodecDecodeSelf(d)
			}

		}
		if yyrt4794 {
			for ; yyj4794 < yyl4794; yyj4794++ {
				yyv4794 = append(yyv4794, EndpointPort{})
				yyh4794.ElemContainerState(yyj4794)
				if r.TryDecodeAsNil() {
					yyv4794[yyj4794] = EndpointPort{}
				} else {
					yyv4796 := &yyv4794[yyj4794]
					yyv4796.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4794 := 0
		for ; !r.CheckBreak(); yyj4794++ {

			if yyj4794 >= len(yyv4794) {
				yyv4794 = append(yyv4794, EndpointPort{}) // var yyz4794 EndpointPort
				yyc4794 = true
			}
			yyh4794.ElemContainerState(yyj4794)
			if yyj4794 < len(yyv4794) {
				if r.TryDecodeAsNil() {
					yyv4794[yyj4794] = EndpointPort{}
				} else {
					yyv4797 := &yyv4794[yyj4794]
					yyv4797.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4794 < len(yyv4794) {
			yyv4794 = yyv4794[:yyj4794]
			yyc4794 = true
		} else if yyj4794 == 0 && yyv4794 == nil {
			yyv4794 = []EndpointPort{}
			yyc4794 = true
		}
	}
	yyh4794.End()
	if yyc4794 {
		*v = yyv4794
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4798 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4799 := &yyv4798
		yy4799.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4800 := *v
	yyh4800, yyl4800 := z.DecSliceHelperStart()
	var yyc4800 bool
	if yyl4800 == 0 {
		if yyv4800 == nil {
			yyv4800 = []Endpoints{}
			yyc4800 = true
		} else if len(yyv4800) != 0 {
			yyv4800 = yyv4800[:0]
			yyc4800 = true
		}
	} else if yyl4800 > 0 {
		var yyrr4800, yyrl4800 int
		var yyrt4800 bool
		if yyl4800 > cap(yyv4800) {

			yyrg4800 := len(yyv4800) > 0
			yyv24800 := yyv4800
			yyrl4800, yyrt4800 = z.DecInferLen(yyl4800, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4800 {
				if yyrl4800 <= cap(yyv4800) {
					yyv4800 = yyv4800[:yyrl4800]
				} else {
					yyv4800 = make([]Endpoints, yyrl4800)
				}
			} else {
				yyv4800 = make([]Endpoints, yyrl4800)
			}
			yyc4800 = true
			yyrr4800 = len(yyv4800)
			if yyrg4800 {
				copy(yyv4800, yyv24800)
			}
		} else if yyl4800 != len(yyv4800) {
			yyv4800 = yyv4800[:yyl4800]
			yyc4800 = true
		}
		yyj4800 := 0
		for ; yyj4800 < yyrr4800; yyj4800++ {
			yyh4800.ElemContainerState(yyj4800)
			if r.TryDecodeAsNil() {
				yyv4800[yyj4800] = Endpoints{}
			} else {
				yyv4801 := &yyv4800[yyj4800]
				yyv4801.CodecDecodeSelf(d)
			}

		}
		if yyrt4800 {
			for ; yyj4800 < yyl4800; yyj4800++ {
				yyv4800 = append(yyv4800, Endpoints{})
				yyh4800.ElemContainerState(yyj4800)
				if r.TryDecodeAsNil() {
					yyv4800[yyj4800] = Endpoints{}
				} else {
					yyv4802 := &yyv4800[yyj4800]
					yyv4802.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4800 := 0
		for ; !r.CheckBreak(); yyj4800++ {

			if yyj4800 >= len(yyv4800) {
				yyv4800 = append(yyv4800, Endpoints{}) // var yyz4800 Endpoints
				yyc4800 = true
			}
			yyh4800.ElemContainerState(yyj4800)
			if yyj4800 < len(yyv4800) {
				if r.TryDecodeAsNil() {
					yyv4800[yyj4800] = Endpoints{}
				} else {
					yyv4803 := &yyv4800[yyj4800]
					yyv4803.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4800 < len(yyv4800) {
			yyv4800 = yyv4800[:yyj4800]
			yyc4800 = true
		} else if yyj4800 == 0 && yyv4800 == nil {
			yyv4800 = []Endpoints{}
			yyc4800 = true
		}
	}
	yyh4800.End()
	if yyc4800 {
		*v = yyv4800
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4804 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4805 := &yyv4804
		yy4805.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4806 := *v
	yyh4806, yyl4806 := z.DecSliceHelperStart()
	var yyc4806 bool
	if yyl4806 == 0 {
		if yyv4806 == nil {
			yyv4806 = []NodeCondition{}
			yyc4806 = true
		} else if len(yyv4806) != 0 {
			yyv4806 = yyv4806[:0]
			yyc4806 = true
		}
	} else if yyl4806 > 0 {
		var yyrr4806, yyrl4806 int
		var yyrt4806 bool
		if yyl4806 > cap(yyv4806) {

			yyrg4806 := len(yyv4806) > 0
			yyv24806 := yyv4806
			yyrl4806, yyrt4806 = z.DecInferLen(yyl4806, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4806 {
				if yyrl4806 <= cap(yyv4806) {
					yyv4806 = yyv4806[:yyrl4806]
				} else {
					yyv4806 = make([]NodeCondition, yyrl4806)
				}
			} else {
				yyv4806 = make([]NodeCondition, yyrl4806)
			}
			yyc4806 = true
			yyrr4806 = len(yyv4806)
			if yyrg4806 {
				copy(yyv4806, yyv24806)
			}
		} else if yyl4806 != len(yyv4806) {
			yyv4806 = yyv4806[:yyl4806]
			yyc4806 = true
		}
		yyj4806 := 0
		for ; yyj4806 < yyrr4806; yyj4806++ {
			yyh4806.ElemContainerState(yyj4806)
			if r.TryDecodeAsNil() {
				yyv4806[yyj4806] = NodeCondition{}
			} else {
				yyv4807 := &yyv4806[yyj4806]
				yyv4807.CodecDecodeSelf(d)
			}

		}
		if yyrt4806 {
			for ; yyj4806 < yyl4806; yyj4806++ {
				yyv4806 = append(yyv4806, NodeCondition{})
				yyh4806.ElemContainerState(yyj4806)
				if r.TryDecodeAsNil() {
					yyv4806[yyj4806] = NodeCondition{}
				} else {
					yyv4808 := &yyv4806[yyj4806]
					yyv4808.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4806 := 0
		for ; !r.CheckBreak(); yyj4806++ {

			if yyj4806 >= len(yyv4806) {
				yyv4806 = append(yyv4806, NodeCondition{}) // var yyz4806 NodeCondition
				yyc4806 = true
			}
			yyh4806.ElemContainerState(yyj4806)
			if yyj4806 < len(yyv4806) {
				if r.TryDecodeAsNil() {
					yyv4806[yyj4806] = NodeCondition{}
				} else {
					yyv4809 := &yyv4806[yyj4806]
					yyv4809.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4806 < len(yyv4806) {
			yyv4806 = yyv4806[:yyj4806]
			yyc4806 = true
		} else if yyj4806 == 0 && yyv4806 == nil {
			yyv4806 = []NodeCondition{}
			yyc4806 = true
		}
	}
	yyh4806.End()
	if yyc4806 {
		*v = yyv4806
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4810 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4811 := &yyv4810
		yy4811.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4812 := *v
	yyh4812, yyl4812 := z.DecSliceHelperStart()
	var yyc4812 bool
	if yyl4812 == 0 {
		if yyv4812 == nil {
			yyv4812 = []NodeAddress{}
			yyc4812 = true
		} else if len(yyv4812) != 0 {
			yyv4812 = yyv4812[:0]
			yyc4812 = true
		}
	} else if yyl4812 > 0 {
		var yyrr4812, yyrl4812 int
		var yyrt4812 bool
		if yyl4812 > cap(yyv4812) {

			yyrg4812 := len(yyv4812) > 0
			yyv24812 := yyv4812
			yyrl4812, yyrt4812 = z.DecInferLen(yyl4812, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4812 {
				if yyrl4812 <= cap(yyv4812) {
					yyv4812 = yyv4812[:yyrl4812]
				} else {
					yyv4812 = make([]NodeAddress, yyrl4812)
				}
			} else {
				yyv4812 = make([]NodeAddress, yyrl4812)
			}
			yyc4812 = true
			yyrr4812 = len(yyv4812)
			if yyrg4812 {
				copy(yyv4812, yyv24812)
			}
		} else if yyl4812 != len(yyv4812) {
			yyv4812 = yyv4812[:yyl4812]
			yyc4812 = true
		}
		yyj4812 := 0
		for ; yyj4812 < yyrr4812; yyj4812++ {
			yyh4812.ElemContainerState(yyj4812)
			if r.TryDecodeAsNil() {
				yyv4812[yyj4812] = NodeAddress{}
			} else {
				yyv4813 := &yyv4812[yyj4812]
				yyv4813.CodecDecodeSelf(d)
			}

		}
		if yyrt4812 {
			for ; yyj4812 < yyl4812; yyj4812++ {
				yyv4812 = append(yyv4812, NodeAddress{})
				yyh4812.ElemContainerState(yyj4812)
				if r.TryDecodeAsNil() {
					yyv4812[yyj4812] = NodeAddress{}
				} else {
					yyv4814 := &yyv4812[yyj4812]
					yyv4814.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4812 := 0
		for ; !r.CheckBreak(); yyj4812++ {

			if yyj4812 >= len(yyv4812) {
				yyv4812 = append(yyv4812, NodeAddress{}) // var yyz4812 NodeAddress
				yyc4812 = true
			}
			yyh4812.ElemContainerState(yyj4812)
			if yyj4812 < len(yyv4812) {
				if r.TryDecodeAsNil() {
					yyv4812[yyj4812] = NodeAddress{}
				} else {
					yyv4815 := &yyv4812[yyj4812]
					yyv4815.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4812 < len(yyv4812) {
			yyv4812 = yyv4812[:yyj4812]
			yyc4812 = true
		} else if yyj4812 == 0 && yyv4812 == nil {
			yyv4812 = []NodeAddress{}
			yyc4812 = true
		}
	}
	yyh4812.End()
	if yyc4812 {
		*v = yyv4812
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4816 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4817 := &yyv4816
		yy4817.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4818 := *v
	yyh4818, yyl4818 := z.DecSliceHelperStart()
	var yyc4818 bool
	if yyl4818 == 0 {
		if yyv4818 == nil {
			yyv4818 = []ContainerImage{}
			yyc4818 = true
		} else if len(yyv4818) != 0 {
			yyv4818 = yyv4818[:0]
			yyc4818 = true
		}
	} else if yyl4818 > 0 {
		var yyrr4818, yyrl4818 int
		var yyrt4818 bool
		if yyl4818 > cap(yyv4818) {

			yyrg4818 := len(yyv4818) > 0
			yyv24818 := yyv4818
			yyrl4818, yyrt4818 = z.DecInferLen(yyl4818, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4818 {
				if yyrl4818 <= cap(yyv4818) {
					yyv4818 = yyv4818[:yyrl4818]
				} else {
					yyv4818 = make([]ContainerImage, yyrl4818)
				}
			} else {
				yyv4818 = make([]ContainerImage, yyrl4818)
			}
			yyc4818 = true
			yyrr4818 = len(yyv4818)
			if yyrg4818 {
				copy(yyv4818, yyv24818)
			}
		} else if yyl4818 != len(yyv4818) {
			yyv4818 = yyv4818[:yyl4818]
			yyc4818 = true
		}
		yyj4818 := 0
		for ; yyj4818 < yyrr4818; yyj4818++ {
			yyh4818.ElemContainerState(yyj4818)
			if r.TryDecodeAsNil() {
				yyv4818[yyj4818] = ContainerImage{}
			} else {
				yyv4819 := &yyv4818[yyj4818]
				yyv4819.CodecDecodeSelf(d)
			}

		}
		if yyrt4818 {
			for ; yyj4818 < yyl4818; yyj4818++ {
				yyv4818 = append(yyv4818, ContainerImage{})
				yyh4818.ElemContainerState(yyj4818)
				if r.TryDecodeAsNil() {
					yyv4818[yyj4818] = ContainerImage{}
				} else {
					yyv4820 := &yyv4818[yyj4818]
					yyv4820.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4818 := 0
		for ; !r.CheckBreak(); yyj4818++ {

			if yyj4818 >= len(yyv4818) {
				yyv4818 = append(yyv4818, ContainerImage{}) // var yyz4818 ContainerImage
				yyc4818 = true
			}
			yyh4818.ElemContainerState(yyj4818)
			if yyj4818 < len(yyv4818) {
				if r.TryDecodeAsNil() {
					yyv4818[yyj4818] = ContainerImage{}
				} else {
					yyv4821 := &yyv4818[yyj4818]
					yyv4821.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4818 < len(yyv4818) {
			yyv4818 = yyv4818[:yyj4818]
			yyc4818 = true
		} else if yyj4818 == 0 && yyv4818 == nil {
			yyv4818 = []ContainerImage{}
			yyc4818 = true
		}
	}
	yyh4818.End()
	if yyc4818 {
		*v = yyv4818
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4822 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4822.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4823 := *v
	yyh4823, yyl4823 := z.DecSliceHelperStart()
	var yyc4823 bool
	if yyl4823 == 0 {
		if yyv4823 == nil {
			yyv4823 = []UniqueVolumeName{}
			yyc4823 = true
		} else if len(yyv4823) != 0 {
			yyv4823 = yyv4823[:0]
			yyc4823 = true
		}
	} else if yyl4823 > 0 {
		var yyrr4823, yyrl4823 int
		var yyrt4823 bool
		if yyl4823 > cap(yyv4823) {

			yyrl4823, yyrt4823 = z.DecInferLen(yyl4823, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4823 {
				if yyrl4823 <= cap(yyv4823) {
					yyv4823 = yyv4823[:yyrl4823]
				} else {
					yyv4823 = make([]UniqueVolumeName, yyrl4823)
				}
			} else {
				yyv4823 = make([]UniqueVolumeName, yyrl4823)
			}
			yyc4823 = true
			yyrr4823 = len(yyv4823)
		} else if yyl4823 != len(yyv4823) {
			yyv4823 = yyv4823[:yyl4823]
			yyc4823 = true
		}
		yyj4823 := 0
		for ; yyj4823 < yyrr4823; yyj4823++ {
			yyh4823.ElemContainerState(yyj4823)
			if r.TryDecodeAsNil() {
				yyv4823[yyj4823] = ""
			} else {
				yyv4823[yyj4823] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4823 {
			for ; yyj4823 < yyl4823; yyj4823++ {
				yyv4823 = append(yyv4823, "")
				yyh4823.ElemContainerState(yyj4823)
				if r.TryDecodeAsNil() {
					yyv4823[yyj4823] = ""
				} else {
					yyv4823[yyj4823] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4823 := 0
		for ; !r.CheckBreak(); yyj4823++ {

			if yyj4823 >= len(yyv4823) {
				yyv4823 = append(yyv4823, "") // var yyz4823 UniqueVolumeName
				yyc4823 = true
			}
			yyh4823.ElemContainerState(yyj4823)
			if yyj4823 < len(yyv4823) {
				if r.TryDecodeAsNil() {
					yyv4823[yyj4823] = ""
				} else {
					yyv4823[yyj4823] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4823 < len(yyv4823) {
			yyv4823 = yyv4823[:yyj4823]
			yyc4823 = true
		} else if yyj4823 == 0 && yyv4823 == nil {
			yyv4823 = []UniqueVolumeName{}
			yyc4823 = true
		}
	}
	yyh4823.End()
	if yyc4823 {
		*v = yyv4823
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4827 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4828 := &yyv4827
		yy4828.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4829 := *v
	yyh4829, yyl4829 := z.DecSliceHelperStart()
	var yyc4829 bool
	if yyl4829 == 0 {
		if yyv4829 == nil {
			yyv4829 = []AttachedVolume{}
			yyc4829 = true
		} else if len(yyv4829) != 0 {
			yyv4829 = yyv4829[:0]
			yyc4829 = true
		}
	} else if yyl4829 > 0 {
		var yyrr4829, yyrl4829 int
		var yyrt4829 bool
		if yyl4829 > cap(yyv4829) {

			yyrg4829 := len(yyv4829) > 0
			yyv24829 := yyv4829
			yyrl4829, yyrt4829 = z.DecInferLen(yyl4829, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4829 {
				if yyrl4829 <= cap(yyv4829) {
					yyv4829 = yyv4829[:yyrl4829]
				} else {
					yyv4829 = make([]AttachedVolume, yyrl4829)
				}
			} else {
				yyv4829 = make([]AttachedVolume, yyrl4829)
			}
			yyc4829 = true
			yyrr4829 = len(yyv4829)
			if yyrg4829 {
				copy(yyv4829, yyv24829)
			}
		} else if yyl4829 != len(yyv4829) {
			yyv4829 = yyv4829[:yyl4829]
			yyc4829 = true
		}
		yyj4829 := 0
		for ; yyj4829 < yyrr4829; yyj4829++ {
			yyh4829.ElemContainerState(yyj4829)
			if r.TryDecodeAsNil() {
				yyv4829[yyj4829] = AttachedVolume{}
			} else {
				yyv4830 := &yyv4829[yyj4829]
				yyv4830.CodecDecodeSelf(d)
			}

		}
		if yyrt4829 {
			for ; yyj4829 < yyl4829; yyj4829++ {
				yyv4829 = append(yyv4829, AttachedVolume{})
				yyh4829.ElemContainerState(yyj4829)
				if r.TryDecodeAsNil() {
					yyv4829[yyj4829] = AttachedVolume{}
				} else {
					yyv4831 := &yyv4829[yyj4829]
					yyv4831.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4829 := 0
		for ; !r.CheckBreak(); yyj4829++ {

			if yyj4829 >= len(yyv4829) {
				yyv4829 = append(yyv4829, AttachedVolume{}) // var yyz4829 AttachedVolume
				yyc4829 = true
			}
			yyh4829.ElemContainerState(yyj4829)
			if yyj4829 < len(yyv4829) {
				if r.TryDecodeAsNil() {
					yyv4829[yyj4829] = AttachedVolume{}
				} else {
					yyv4832 := &yyv4829[yyj4829]
					yyv4832.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4829 < len(yyv4829) {
			yyv4829 = yyv4829[:yyj4829]
			yyc4829 = true
		} else if yyj4829 == 0 && yyv4829 == nil {
			yyv4829 = []AttachedVolume{}
			yyc4829 = true
		}
	}
	yyh4829.End()
	if yyc4829 {
		*v = yyv4829
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4833 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4834 := &yyv4833
		yy4834.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4835 := *v
	yyh4835, yyl4835 := z.DecSliceHelperStart()
	var yyc4835 bool
	if yyl4835 == 0 {
		if yyv4835 == nil {
			yyv4835 = []PreferAvoidPodsEntry{}
			yyc4835 = true
		} else if len(yyv4835) != 0 {
			yyv4835 = yyv4835[:0]
			yyc4835 = true
		}
	} else if yyl4835 > 0 {
		var yyrr4835, yyrl4835 int
		var yyrt4835 bool
		if yyl4835 > cap(yyv4835) {

			yyrg4835 := len(yyv4835) > 0
			yyv24835 := yyv4835
			yyrl4835, yyrt4835 = z.DecInferLen(yyl4835, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4835 {
				if yyrl4835 <= cap(yyv4835) {
					yyv4835 = yyv4835[:yyrl4835]
				} else {
					yyv4835 = make([]PreferAvoidPodsEntry, yyrl4835)
				}
			} else {
				yyv4835 = make([]PreferAvoidPodsEntry, yyrl4835)
			}
			yyc4835 = true
			yyrr4835 = len(yyv4835)
			if yyrg4835 {
				copy(yyv4835, yyv24835)
			}
		} else if yyl4835 != len(yyv4835) {
			yyv4835 = yyv4835[:yyl4835]
			yyc4835 = true
		}
		yyj4835 := 0
		for ; yyj4835 < yyrr4835; yyj4835++ {
			yyh4835.ElemContainerState(yyj4835)
			if r.TryDecodeAsNil() {
				yyv4835[yyj4835] = PreferAvoidPodsEntry{}
			} else {
				yyv4836 := &yyv4835[yyj4835]
				yyv4836.CodecDecodeSelf(d)
			}

		}
		if yyrt4835 {
			for ; yyj4835 < yyl4835; yyj4835++ {
				yyv4835 = append(yyv4835, PreferAvoidPodsEntry{})
				yyh4835.ElemContainerState(yyj4835)
				if r.TryDecodeAsNil() {
					yyv4835[yyj4835] = PreferAvoidPodsEntry{}
				} else {
					yyv4837 := &yyv4835[yyj4835]
					yyv4837.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4835 := 0
		for ; !r.CheckBreak(); yyj4835++ {

			if yyj4835 >= len(yyv4835) {
				yyv4835 = append(yyv4835, PreferAvoidPodsEntry{}) // var yyz4835 PreferAvoidPodsEntry
				yyc4835 = true
			}
			yyh4835.ElemContainerState(yyj4835)
			if yyj4835 < len(yyv4835) {
				if r.TryDecodeAsNil() {
					yyv4835[yyj4835] = PreferAvoidPodsEntry{}
				} else {
					yyv4838 := &yyv4835[yyj4835]
					yyv4838.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4835 < len(yyv4835) {
			yyv4835 = yyv4835[:yyj4835]
			yyc4835 = true
		} else if yyj4835 == 0 && yyv4835 == nil {
			yyv4835 = []PreferAvoidPodsEntry{}
			yyc4835 = true
		}
	}
	yyh4835.End()
	if yyc4835 {
		*v = yyv4835
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4839, yyv4839 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4839.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4840 := &yyv4839
		yym4841 := z.EncBinary()
		_ = yym4841
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4840) {
		} else if !yym4841 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4840)
		} else {
			z.EncFallback(yy4840)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4842 := *v
	yyl4842 := r.ReadMapStart()
	yybh4842 := z.DecBasicHandle()
	if yyv4842 == nil {
		yyrl4842, _ := z.DecInferLen(yyl4842, yybh4842.MaxInitLen, 72)
		yyv4842 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4842)
		*v = yyv4842
	}
	var yymk4842 ResourceName
	var yymv4842 pkg3_resource.Quantity
	var yymg4842 bool
	if yybh4842.MapValueReset {
		yymg4842 = true
	}
	if yyl4842 > 0 {
		for yyj4842 := 0; yyj4842 < yyl4842; yyj4842++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4842 = ""
			} else {
				yymk4842 = ResourceName(r.DecodeString())
			}

			if yymg4842 {
				yymv4842 = yyv4842[yymk4842]
			} else {
				yymv4842 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4842 = pkg3_resource.Quantity{}
			} else {
				yyv4844 := &yymv4842
				yym4845 := z.DecBinary()
				_ = yym4845
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4844) {
				} else if !yym4845 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4844)
				} else {
					z.DecFallback(yyv4844, false)
				}
			}

			if yyv4842 != nil {
				yyv4842[yymk4842] = yymv4842
			}
		}
	} else if yyl4842 < 0 {
		for yyj4842 := 0; !r.CheckBreak(); yyj4842++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4842 = ""
			} else {
				yymk4842 = ResourceName(r.DecodeString())
			}

			if yymg4842 {
				yymv4842 = yyv4842[yymk4842]
			} else {
				yymv4842 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4842 = pkg3_resource.Quantity{}
			} else {
				yyv4847 := &yymv4842
				yym4848 := z.DecBinary()
				_ = yym4848
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4847) {
				} else if !yym4848 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4847)
				} else {
					z.DecFallback(yyv4847, false)
				}
			}

			if yyv4842 != nil {
				yyv4842[yymk4842] = yymv4842
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4849 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4850 := &yyv4849
		yy4850.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4851 := *v
	yyh4851, yyl4851 := z.DecSliceHelperStart()
	var yyc4851 bool
	if yyl4851 == 0 {
		if yyv4851 == nil {
			yyv4851 = []Node{}
			yyc4851 = true
		} else if len(yyv4851) != 0 {
			yyv4851 = yyv4851[:0]
			yyc4851 = true
		}
	} else if yyl4851 > 0 {
		var yyrr4851, yyrl4851 int
		var yyrt4851 bool
		if yyl4851 > cap(yyv4851) {

			yyrg4851 := len(yyv4851) > 0
			yyv24851 := yyv4851
			yyrl4851, yyrt4851 = z.DecInferLen(yyl4851, z.DecBasicHandle().MaxInitLen, 656)
			if yyrt4851 {
				if yyrl4851 <= cap(yyv4851) {
					yyv4851 = yyv4851[:yyrl4851]
				} else {
					yyv4851 = make([]Node, yyrl4851)
				}
			} else {
				yyv4851 = make([]Node, yyrl4851)
			}
			yyc4851 = true
			yyrr4851 = len(yyv4851)
			if yyrg4851 {
				copy(yyv4851, yyv24851)
			}
		} else if yyl4851 != len(yyv4851) {
			yyv4851 = yyv4851[:yyl4851]
			yyc4851 = true
		}
		yyj4851 := 0
		for ; yyj4851 < yyrr4851; yyj4851++ {
			yyh4851.ElemContainerState(yyj4851)
			if r.TryDecodeAsNil() {
				yyv4851[yyj4851] = Node{}
			} else {
				yyv4852 := &yyv4851[yyj4851]
				yyv4852.CodecDecodeSelf(d)
			}

		}
		if yyrt4851 {
			for ; yyj4851 < yyl4851; yyj4851++ {
				yyv4851 = append(yyv4851, Node{})
				yyh4851.ElemContainerState(yyj4851)
				if r.TryDecodeAsNil() {
					yyv4851[yyj4851] = Node{}
				} else {
					yyv4853 := &yyv4851[yyj4851]
					yyv4853.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4851 := 0
		for ; !r.CheckBreak(); yyj4851++ {

			if yyj4851 >= len(yyv4851) {
				yyv4851 = append(yyv4851, Node{}) // var yyz4851 Node
				yyc4851 = true
			}
			yyh4851.ElemContainerState(yyj4851)
			if yyj4851 < len(yyv4851) {
				if r.TryDecodeAsNil() {
					yyv4851[yyj4851] = Node{}
				} else {
					yyv4854 := &yyv4851[yyj4851]
					yyv4854.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4851 < len(yyv4851) {
			yyv4851 = yyv4851[:yyj4851]
			yyc4851 = true
		} else if yyj4851 == 0 && yyv4851 == nil {
			yyv4851 = []Node{}
			yyc4851 = true
		}
	}
	yyh4851.End()
	if yyc4851 {
		*v = yyv4851
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4855 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4855.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4856 := *v
	yyh4856, yyl4856 := z.DecSliceHelperStart()
	var yyc4856 bool
	if yyl4856 == 0 {
		if yyv4856 == nil {
			yyv4856 = []FinalizerName{}
			yyc4856 = true
		} else if len(yyv4856) != 0 {
			yyv4856 = yyv4856[:0]
			yyc4856 = true
		}
	} else if yyl4856 > 0 {
		var yyrr4856, yyrl4856 int
		var yyrt4856 bool
		if yyl4856 > cap(yyv4856) {

			yyrl4856, yyrt4856 = z.DecInferLen(yyl4856, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4856 {
				if yyrl4856 <= cap(yyv4856) {
					yyv4856 = yyv4856[:yyrl4856]
				} else {
					yyv4856 = make([]FinalizerName, yyrl4856)
				}
			} else {
				yyv4856 = make([]FinalizerName, yyrl4856)
			}
			yyc4856 = true
			yyrr4856 = len(yyv4856)
		} else if yyl4856 != len(yyv4856) {
			yyv4856 = yyv4856[:yyl4856]
			yyc4856 = true
		}
		yyj4856 := 0
		for ; yyj4856 < yyrr4856; yyj4856++ {
			yyh4856.ElemContainerState(yyj4856)
			if r.TryDecodeAsNil() {
				yyv4856[yyj4856] = ""
			} else {
				yyv4856[yyj4856] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4856 {
			for ; yyj4856 < yyl4856; yyj4856++ {
				yyv4856 = append(yyv4856, "")
				yyh4856.ElemContainerState(yyj4856)
				if r.TryDecodeAsNil() {
					yyv4856[yyj4856] = ""
				} else {
					yyv4856[yyj4856] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4856 := 0
		for ; !r.CheckBreak(); yyj4856++ {

			if yyj4856 >= len(yyv4856) {
				yyv4856 = append(yyv4856, "") // var yyz4856 FinalizerName
				yyc4856 = true
			}
			yyh4856.ElemContainerState(yyj4856)
			if yyj4856 < len(yyv4856) {
				if r.TryDecodeAsNil() {
					yyv4856[yyj4856] = ""
				} else {
					yyv4856[yyj4856] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4856 < len(yyv4856) {
			yyv4856 = yyv4856[:yyj4856]
			yyc4856 = true
		} else if yyj4856 == 0 && yyv4856 == nil {
			yyv4856 = []FinalizerName{}
			yyc4856 = true
		}
	}
	yyh4856.End()
	if yyc4856 {
		*v = yyv4856
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4860 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4861 := &yyv4860
		yy4861.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4862 := *v
	yyh4862, yyl4862 := z.DecSliceHelperStart()
	var yyc4862 bool
	if yyl4862 == 0 {
		if yyv4862 == nil {
			yyv4862 = []Namespace{}
			yyc4862 = true
		} else if len(yyv4862) != 0 {
			yyv4862 = yyv4862[:0]
			yyc4862 = true
		}
	} else if yyl4862 > 0 {
		var yyrr4862, yyrl4862 int
		var yyrt4862 bool
		if yyl4862 > cap(yyv4862) {

			yyrg4862 := len(yyv4862) > 0
			yyv24862 := yyv4862
			yyrl4862, yyrt4862 = z.DecInferLen(yyl4862, z.DecBasicHandle().MaxInitLen, 320)
			if yyrt4862 {
				if yyrl4862 <= cap(yyv4862) {
					yyv4862 = yyv4862[:yyrl4862]
				} else {
					yyv4862 = make([]Namespace, yyrl4862)
				}
			} else {
				yyv4862 = make([]Namespace, yyrl4862)
			}
			yyc4862 = true
			yyrr4862 = len(yyv4862)
			if yyrg4862 {
				copy(yyv4862, yyv24862)
			}
		} else if yyl4862 != len(yyv4862) {
			yyv4862 = yyv4862[:yyl4862]
			yyc4862 = true
		}
		yyj4862 := 0
		for ; yyj4862 < yyrr4862; yyj4862++ {
			yyh4862.ElemContainerState(yyj4862)
			if r.TryDecodeAsNil() {
				yyv4862[yyj4862] = Namespace{}
			} else {
				yyv4863 := &yyv4862[yyj4862]
				yyv4863.CodecDecodeSelf(d)
			}

		}
		if yyrt4862 {
			for ; yyj4862 < yyl4862; yyj4862++ {
				yyv4862 = append(yyv4862, Namespace{})
				yyh4862.ElemContainerState(yyj4862)
				if r.TryDecodeAsNil() {
					yyv4862[yyj4862] = Namespace{}
				} else {
					yyv4864 := &yyv4862[yyj4862]
					yyv4864.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4862 := 0
		for ; !r.CheckBreak(); yyj4862++ {

			if yyj4862 >= len(yyv4862) {
				yyv4862 = append(yyv4862, Namespace{}) // var yyz4862 Namespace
				yyc4862 = true
			}
			yyh4862.ElemContainerState(yyj4862)
			if yyj4862 < len(yyv4862) {
				if r.TryDecodeAsNil() {
					yyv4862[yyj4862] = Namespace{}
				} else {
					yyv4865 := &yyv4862[yyj4862]
					yyv4865.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4862 < len(yyv4862) {
			yyv4862 = yyv4862[:yyj4862]
			yyc4862 = true
		} else if yyj4862 == 0 && yyv4862 == nil {
			yyv4862 = []Namespace{}
			yyc4862 = true
		}
	}
	yyh4862.End()
	if yyc4862 {
		*v = yyv4862
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4866 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4867 := &yyv4866
		yy4867.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4868 := *v
	yyh4868, yyl4868 := z.DecSliceHelperStart()
	var yyc4868 bool
	if yyl4868 == 0 {
		if yyv4868 == nil {
			yyv4868 = []Event{}
			yyc4868 = true
		} else if len(yyv4868) != 0 {
			yyv4868 = yyv4868[:0]
			yyc4868 = true
		}
	} else if yyl4868 > 0 {
		var yyrr4868, yyrl4868 int
		var yyrt4868 bool
		if yyl4868 > cap(yyv4868) {

			yyrg4868 := len(yyv4868) > 0
			yyv24868 := yyv4868
			yyrl4868, yyrt4868 = z.DecInferLen(yyl4868, z.DecBasicHandle().MaxInitLen, 528)
			if yyrt4868 {
				if yyrl4868 <= cap(yyv4868) {
					yyv4868 = yyv4868[:yyrl4868]
				} else {
					yyv4868 = make([]Event, yyrl4868)
				}
			} else {
				yyv4868 = make([]Event, yyrl4868)
			}
			yyc4868 = true
			yyrr4868 = len(yyv4868)
			if yyrg4868 {
				copy(yyv4868, yyv24868)
			}
		} else if yyl4868 != len(yyv4868) {
			yyv4868 = yyv4868[:yyl4868]
			yyc4868 = true
		}
		yyj4868 := 0
		for ; yyj4868 < yyrr4868; yyj4868++ {
			yyh4868.ElemContainerState(yyj4868)
			if r.TryDecodeAsNil() {
				yyv4868[yyj4868] = Event{}
			} else {
				yyv4869 := &yyv4868[yyj4868]
				yyv4869.CodecDecodeSelf(d)
			}

		}
		if yyrt4868 {
			for ; yyj4868 < yyl4868; yyj4868++ {
				yyv4868 = append(yyv4868, Event{})
				yyh4868.ElemContainerState(yyj4868)
				if r.TryDecodeAsNil() {
					yyv4868[yyj4868] = Event{}
				} else {
					yyv4870 := &yyv4868[yyj4868]
					yyv4870.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4868 := 0
		for ; !r.CheckBreak(); yyj4868++ {

			if yyj4868 >= len(yyv4868) {
				yyv4868 = append(yyv4868, Event{}) // var yyz4868 Event
				yyc4868 = true
			}
			yyh4868.ElemContainerState(yyj4868)
			if yyj4868 < len(yyv4868) {
				if r.TryDecodeAsNil() {
					yyv4868[yyj4868] = Event{}
				} else {
					yyv4871 := &yyv4868[yyj4868]
					yyv4871.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4868 < len(yyv4868) {
			yyv4868 = yyv4868[:yyj4868]
			yyc4868 = true
		} else if yyj4868 == 0 && yyv4868 == nil {
			yyv4868 = []Event{}
			yyc4868 = true
		}
	}
	yyh4868.End()
	if yyc4868 {
		*v = yyv4868
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4872 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4873 := &yyv4872
		yym4874 := z.EncBinary()
		_ = yym4874
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4873) {
		} else if !yym4874 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4873)
		} else {
			z.EncFallback(yy4873)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4875 := *v
	yyh4875, yyl4875 := z.DecSliceHelperStart()
	var yyc4875 bool
	if yyl4875 == 0 {
		if yyv4875 == nil {
			yyv4875 = []pkg5_runtime.RawExtension{}
			yyc4875 = true
		} else if len(yyv4875) != 0 {
			yyv4875 = yyv4875[:0]
			yyc4875 = true
		}
	} else if yyl4875 > 0 {
		var yyrr4875, yyrl4875 int
		var yyrt4875 bool
		if yyl4875 > cap(yyv4875) {

			yyrg4875 := len(yyv4875) > 0
			yyv24875 := yyv4875
			yyrl4875, yyrt4875 = z.DecInferLen(yyl4875, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4875 {
				if yyrl4875 <= cap(yyv4875) {
					yyv4875 = yyv4875[:yyrl4875]
				} else {
					yyv4875 = make([]pkg5_runtime.RawExtension, yyrl4875)
				}
			} else {
				yyv4875 = make([]pkg5_runtime.RawExtension, yyrl4875)
			}
			yyc4875 = true
			yyrr4875 = len(yyv4875)
			if yyrg4875 {
				copy(yyv4875, yyv24875)
			}
		} else if yyl4875 != len(yyv4875) {
			yyv4875 = yyv4875[:yyl4875]
			yyc4875 = true
		}
		yyj4875 := 0
		for ; yyj4875 < yyrr4875; yyj4875++ {
			yyh4875.ElemContainerState(yyj4875)
			if r.TryDecodeAsNil() {
				yyv4875[yyj4875] = pkg5_runtime.RawExtension{}
			} else {
				yyv4876 := &yyv4875[yyj4875]
				yym4877 := z.DecBinary()
				_ = yym4877
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4876) {
				} else if !yym4877 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4876)
				} else {
					z.DecFallback(yyv4876, false)
				}
			}

		}
		if yyrt4875 {
			for ; yyj4875 < yyl4875; yyj4875++ {
				yyv4875 = append(yyv4875, pkg5_runtime.RawExtension{})
				yyh4875.ElemContainerState(yyj4875)
				if r.TryDecodeAsNil() {
					yyv4875[yyj4875] = pkg5_runtime.RawExtension{}
				} else {
					yyv4878 := &yyv4875[yyj4875]
					yym4879 := z.DecBinary()
					_ = yym4879
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4878) {
					} else if !yym4879 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4878)
					} else {
						z.DecFallback(yyv4878, false)
					}
				}

			}
		}

	} else {
		yyj4875 := 0
		for ; !r.CheckBreak(); yyj4875++ {

			if yyj4875 >= len(yyv4875) {
				yyv4875 = append(yyv4875, pkg5_runtime.RawExtension{}) // var yyz4875 pkg5_runtime.RawExtension
				yyc4875 = true
			}
			yyh4875.ElemContainerState(yyj4875)
			if yyj4875 < len(yyv4875) {
				if r.TryDecodeAsNil() {
					yyv4875[yyj4875] = pkg5_runtime.RawExtension{}
				} else {
					yyv4880 := &yyv4875[yyj4875]
					yym4881 := z.DecBinary()
					_ = yym4881
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4880) {
					} else if !yym4881 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4880)
					} else {
						z.DecFallback(yyv4880, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4875 < len(yyv4875) {
			yyv4875 = yyv4875[:yyj4875]
			yyc4875 = true
		} else if yyj4875 == 0 && yyv4875 == nil {
			yyv4875 = []pkg5_runtime.RawExtension{}
			yyc4875 = true
		}
	}
	yyh4875.End()
	if yyc4875 {
		*v = yyv4875
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4882 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4883 := &yyv4882
		yy4883.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4884 := *v
	yyh4884, yyl4884 := z.DecSliceHelperStart()
	var yyc4884 bool
	if yyl4884 == 0 {
		if yyv4884 == nil {
			yyv4884 = []LimitRangeItem{}
			yyc4884 = true
		} else if len(yyv4884) != 0 {
			yyv4884 = yyv4884[:0]
			yyc4884 = true
		}
	} else if yyl4884 > 0 {
		var yyrr4884, yyrl4884 int
		var yyrt4884 bool
		if yyl4884 > cap(yyv4884) {

			yyrg4884 := len(yyv4884) > 0
			yyv24884 := yyv4884
			yyrl4884, yyrt4884 = z.DecInferLen(yyl4884, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4884 {
				if yyrl4884 <= cap(yyv4884) {
					yyv4884 = yyv4884[:yyrl4884]
				} else {
					yyv4884 = make([]LimitRangeItem, yyrl4884)
				}
			} else {
				yyv4884 = make([]LimitRangeItem, yyrl4884)
			}
			yyc4884 = true
			yyrr4884 = len(yyv4884)
			if yyrg4884 {
				copy(yyv4884, yyv24884)
			}
		} else if yyl4884 != len(yyv4884) {
			yyv4884 = yyv4884[:yyl4884]
			yyc4884 = true
		}
		yyj4884 := 0
		for ; yyj4884 < yyrr4884; yyj4884++ {
			yyh4884.ElemContainerState(yyj4884)
			if r.TryDecodeAsNil() {
				yyv4884[yyj4884] = LimitRangeItem{}
			} else {
				yyv4885 := &yyv4884[yyj4884]
				yyv4885.CodecDecodeSelf(d)
			}

		}
		if yyrt4884 {
			for ; yyj4884 < yyl4884; yyj4884++ {
				yyv4884 = append(yyv4884, LimitRangeItem{})
				yyh4884.ElemContainerState(yyj4884)
				if r.TryDecodeAsNil() {
					yyv4884[yyj4884] = LimitRangeItem{}
				} else {
					yyv4886 := &yyv4884[yyj4884]
					yyv4886.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4884 := 0
		for ; !r.CheckBreak(); yyj4884++ {

			if yyj4884 >= len(yyv4884) {
				yyv4884 = append(yyv4884, LimitRangeItem{}) // var yyz4884 LimitRangeItem
				yyc4884 = true
			}
			yyh4884.ElemContainerState(yyj4884)
			if yyj4884 < len(yyv4884) {
				if r.TryDecodeAsNil() {
					yyv4884[yyj4884] = LimitRangeItem{}
				} else {
					yyv4887 := &yyv4884[yyj4884]
					yyv4887.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4884 < len(yyv4884) {
			yyv4884 = yyv4884[:yyj4884]
			yyc4884 = true
		} else if yyj4884 == 0 && yyv4884 == nil {
			yyv4884 = []LimitRangeItem{}
			yyc4884 = true
		}
	}
	yyh4884.End()
	if yyc4884 {
		*v = yyv4884
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4888 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4889 := &yyv4888
		yy4889.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4890 := *v
	yyh4890, yyl4890 := z.DecSliceHelperStart()
	var yyc4890 bool
	if yyl4890 == 0 {
		if yyv4890 == nil {
			yyv4890 = []LimitRange{}
			yyc4890 = true
		} else if len(yyv4890) != 0 {
			yyv4890 = yyv4890[:0]
			yyc4890 = true
		}
	} else if yyl4890 > 0 {
		var yyrr4890, yyrl4890 int
		var yyrt4890 bool
		if yyl4890 > cap(yyv4890) {

			yyrg4890 := len(yyv4890) > 0
			yyv24890 := yyv4890
			yyrl4890, yyrt4890 = z.DecInferLen(yyl4890, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4890 {
				if yyrl4890 <= cap(yyv4890) {
					yyv4890 = yyv4890[:yyrl4890]
				} else {
					yyv4890 = make([]LimitRange, yyrl4890)
				}
			} else {
				yyv4890 = make([]LimitRange, yyrl4890)
			}
			yyc4890 = true
			yyrr4890 = len(yyv4890)
			if yyrg4890 {
				copy(yyv4890, yyv24890)
			}
		} else if yyl4890 != len(yyv4890) {
			yyv4890 = yyv4890[:yyl4890]
			yyc4890 = true
		}
		yyj4890 := 0
		for ; yyj4890 < yyrr4890; yyj4890++ {
			yyh4890.ElemContainerState(yyj4890)
			if r.TryDecodeAsNil() {
				yyv4890[yyj4890] = LimitRange{}
			} else {
				yyv4891 := &yyv4890[yyj4890]
				yyv4891.CodecDecodeSelf(d)
			}

		}
		if yyrt4890 {
			for ; yyj4890 < yyl4890; yyj4890++ {
				yyv4890 = append(yyv4890, LimitRange{})
				yyh4890.ElemContainerState(yyj4890)
				if r.TryDecodeAsNil() {
					yyv4890[yyj4890] = LimitRange{}
				} else {
					yyv4892 := &yyv4890[yyj4890]
					yyv4892.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4890 := 0
		for ; !r.CheckBreak(); yyj4890++ {

			if yyj4890 >= len(yyv4890) {
				yyv4890 = append(yyv4890, LimitRange{}) // var yyz4890 LimitRange
				yyc4890 = true
			}
			yyh4890.ElemContainerState(yyj4890)
			if yyj4890 < len(yyv4890) {
				if r.TryDecodeAsNil() {
					yyv4890[yyj4890] = LimitRange{}
				} else {
					yyv4893 := &yyv4890[yyj4890]
					yyv4893.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4890 < len(yyv4890) {
			yyv4890 = yyv4890[:yyj4890]
			yyc4890 = true
		} else if yyj4890 == 0 && yyv4890 == nil {
			yyv4890 = []LimitRange{}
			yyc4890 = true
		}
	}
	yyh4890.End()
	if yyc4890 {
		*v = yyv4890
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4894 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4894.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4895 := *v
	yyh4895, yyl4895 := z.DecSliceHelperStart()
	var yyc4895 bool
	if yyl4895 == 0 {
		if yyv4895 == nil {
			yyv4895 = []ResourceQuotaScope{}
			yyc4895 = true
		} else if len(yyv4895) != 0 {
			yyv4895 = yyv4895[:0]
			yyc4895 = true
		}
	} else if yyl4895 > 0 {
		var yyrr4895, yyrl4895 int
		var yyrt4895 bool
		if yyl4895 > cap(yyv4895) {

			yyrl4895, yyrt4895 = z.DecInferLen(yyl4895, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4895 {
				if yyrl4895 <= cap(yyv4895) {
					yyv4895 = yyv4895[:yyrl4895]
				} else {
					yyv4895 = make([]ResourceQuotaScope, yyrl4895)
				}
			} else {
				yyv4895 = make([]ResourceQuotaScope, yyrl4895)
			}
			yyc4895 = true
			yyrr4895 = len(yyv4895)
		} else if yyl4895 != len(yyv4895) {
			yyv4895 = yyv4895[:yyl4895]
			yyc4895 = true
		}
		yyj4895 := 0
		for ; yyj4895 < yyrr4895; yyj4895++ {
			yyh4895.ElemContainerState(yyj4895)
			if r.TryDecodeAsNil() {
				yyv4895[yyj4895] = ""
			} else {
				yyv4895[yyj4895] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4895 {
			for ; yyj4895 < yyl4895; yyj4895++ {
				yyv4895 = append(yyv4895, "")
				yyh4895.ElemContainerState(yyj4895)
				if r.TryDecodeAsNil() {
					yyv4895[yyj4895] = ""
				} else {
					yyv4895[yyj4895] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4895 := 0
		for ; !r.CheckBreak(); yyj4895++ {

			if yyj4895 >= len(yyv4895) {
				yyv4895 = append(yyv4895, "") // var yyz4895 ResourceQuotaScope
				yyc4895 = true
			}
			yyh4895.ElemContainerState(yyj4895)
			if yyj4895 < len(yyv4895) {
				if r.TryDecodeAsNil() {
					yyv4895[yyj4895] = ""
				} else {
					yyv4895[yyj4895] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4895 < len(yyv4895) {
			yyv4895 = yyv4895[:yyj4895]
			yyc4895 = true
		} else if yyj4895 == 0 && yyv4895 == nil {
			yyv4895 = []ResourceQuotaScope{}
			yyc4895 = true
		}
	}
	yyh4895.End()
	if yyc4895 {
		*v = yyv4895
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4899 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4900 := &yyv4899
		yy4900.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4901 := *v
	yyh4901, yyl4901 := z.DecSliceHelperStart()
	var yyc4901 bool
	if yyl4901 == 0 {
		if yyv4901 == nil {
			yyv4901 = []ResourceQuota{}
			yyc4901 = true
		} else if len(yyv4901) != 0 {
			yyv4901 = yyv4901[:0]
			yyc4901 = true
		}
	} else if yyl4901 > 0 {
		var yyrr4901, yyrl4901 int
		var yyrt4901 bool
		if yyl4901 > cap(yyv4901) {

			yyrg4901 := len(yyv4901) > 0
			yyv24901 := yyv4901
			yyrl4901, yyrt4901 = z.DecInferLen(yyl4901, z.DecBasicHandle().MaxInitLen, 328)
			if yyrt4901 {
				if yyrl4901 <= cap(yyv4901) {
					yyv4901 = yyv4901[:yyrl4901]
				} else {
					yyv4901 = make([]ResourceQuota, yyrl4901)
				}
			} else {
				yyv4901 = make([]ResourceQuota, yyrl4901)
			}
			yyc4901 = true
			yyrr4901 = len(yyv4901)
			if yyrg4901 {
				copy(yyv4901, yyv24901)
			}
		} else if yyl4901 != len(yyv4901) {
			yyv4901 = yyv4901[:yyl4901]
			yyc4901 = true
		}
		yyj4901 := 0
		for ; yyj4901 < yyrr4901; yyj4901++ {
			yyh4901.ElemContainerState(yyj4901)
			if r.TryDecodeAsNil() {
				yyv4901[yyj4901] = ResourceQuota{}
			} else {
				yyv4902 := &yyv4901[yyj4901]
				yyv4902.CodecDecodeSelf(d)
			}

		}
		if yyrt4901 {
			for ; yyj4901 < yyl4901; yyj4901++ {
				yyv4901 = append(yyv4901, ResourceQuota{})
				yyh4901.ElemContainerState(yyj4901)
				if r.TryDecodeAsNil() {
					yyv4901[yyj4901] = ResourceQuota{}
				} else {
					yyv4903 := &yyv4901[yyj4901]
					yyv4903.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4901 := 0
		for ; !r.CheckBreak(); yyj4901++ {

			if yyj4901 >= len(yyv4901) {
				yyv4901 = append(yyv4901, ResourceQuota{}) // var yyz4901 ResourceQuota
				yyc4901 = true
			}
			yyh4901.ElemContainerState(yyj4901)
			if yyj4901 < len(yyv4901) {
				if r.TryDecodeAsNil() {
					yyv4901[yyj4901] = ResourceQuota{}
				} else {
					yyv4904 := &yyv4901[yyj4901]
					yyv4904.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4901 < len(yyv4901) {
			yyv4901 = yyv4901[:yyj4901]
			yyc4901 = true
		} else if yyj4901 == 0 && yyv4901 == nil {
			yyv4901 = []ResourceQuota{}
			yyc4901 = true
		}
	}
	yyh4901.End()
	if yyc4901 {
		*v = yyv4901
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4905, yyv4905 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4906 := z.EncBinary()
		_ = yym4906
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4905))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4905 == nil {
			r.EncodeNil()
		} else {
			yym4907 := z.EncBinary()
			_ = yym4907
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4905))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4908 := *v
	yyl4908 := r.ReadMapStart()
	yybh4908 := z.DecBasicHandle()
	if yyv4908 == nil {
		yyrl4908, _ := z.DecInferLen(yyl4908, yybh4908.MaxInitLen, 40)
		yyv4908 = make(map[string][]uint8, yyrl4908)
		*v = yyv4908
	}
	var yymk4908 string
	var yymv4908 []uint8
	var yymg4908 bool
	if yybh4908.MapValueReset {
		yymg4908 = true
	}
	if yyl4908 > 0 {
		for yyj4908 := 0; yyj4908 < yyl4908; yyj4908++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4908 = ""
			} else {
				yymk4908 = string(r.DecodeString())
			}

			if yymg4908 {
				yymv4908 = yyv4908[yymk4908]
			} else {
				yymv4908 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4908 = nil
			} else {
				yyv4910 := &yymv4908
				yym4911 := z.DecBinary()
				_ = yym4911
				if false {
				} else {
					*yyv4910 = r.DecodeBytes(*(*[]byte)(yyv4910), false, false)
				}
			}

			if yyv4908 != nil {
				yyv4908[yymk4908] = yymv4908
			}
		}
	} else if yyl4908 < 0 {
		for yyj4908 := 0; !r.CheckBreak(); yyj4908++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4908 = ""
			} else {
				yymk4908 = string(r.DecodeString())
			}

			if yymg4908 {
				yymv4908 = yyv4908[yymk4908]
			} else {
				yymv4908 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4908 = nil
			} else {
				yyv4913 := &yymv4908
				yym4914 := z.DecBinary()
				_ = yym4914
				if false {
				} else {
					*yyv4913 = r.DecodeBytes(*(*[]byte)(yyv4913), false, false)
				}
			}

			if yyv4908 != nil {
				yyv4908[yymk4908] = yymv4908
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4915 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4916 := &yyv4915
		yy4916.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4917 := *v
	yyh4917, yyl4917 := z.DecSliceHelperStart()
	var yyc4917 bool
	if yyl4917 == 0 {
		if yyv4917 == nil {
			yyv4917 = []Secret{}
			yyc4917 = true
		} else if len(yyv4917) != 0 {
			yyv4917 = yyv4917[:0]
			yyc4917 = true
		}
	} else if yyl4917 > 0 {
		var yyrr4917, yyrl4917 int
		var yyrt4917 bool
		if yyl4917 > cap(yyv4917) {

			yyrg4917 := len(yyv4917) > 0
			yyv24917 := yyv4917
			yyrl4917, yyrt4917 = z.DecInferLen(yyl4917, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt4917 {
				if yyrl4917 <= cap(yyv4917) {
					yyv4917 = yyv4917[:yyrl4917]
				} else {
					yyv4917 = make([]Secret, yyrl4917)
				}
			} else {
				yyv4917 = make([]Secret, yyrl4917)
			}
			yyc4917 = true
			yyrr4917 = len(yyv4917)
			if yyrg4917 {
				copy(yyv4917, yyv24917)
			}
		} else if yyl4917 != len(yyv4917) {
			yyv4917 = yyv4917[:yyl4917]
			yyc4917 = true
		}
		yyj4917 := 0
		for ; yyj4917 < yyrr4917; yyj4917++ {
			yyh4917.ElemContainerState(yyj4917)
			if r.TryDecodeAsNil() {
				yyv4917[yyj4917] = Secret{}
			} else {
				yyv4918 := &yyv4917[yyj4917]
				yyv4918.CodecDecodeSelf(d)
			}

		}
		if yyrt4917 {
			for ; yyj4917 < yyl4917; yyj4917++ {
				yyv4917 = append(yyv4917, Secret{})
				yyh4917.ElemContainerState(yyj4917)
				if r.TryDecodeAsNil() {
					yyv4917[yyj4917] = Secret{}
				} else {
					yyv4919 := &yyv4917[yyj4917]
					yyv4919.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4917 := 0
		for ; !r.CheckBreak(); yyj4917++ {

			if yyj4917 >= len(yyv4917) {
				yyv4917 = append(yyv4917, Secret{}) // var yyz4917 Secret
				yyc4917 = true
			}
			yyh4917.ElemContainerState(yyj4917)
			if yyj4917 < len(yyv4917) {
				if r.TryDecodeAsNil() {
					yyv4917[yyj4917] = Secret{}
				} else {
					yyv4920 := &yyv4917[yyj4917]
					yyv4920.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4917 < len(yyv4917) {
			yyv4917 = yyv4917[:yyj4917]
			yyc4917 = true
		} else if yyj4917 == 0 && yyv4917 == nil {
			yyv4917 = []Secret{}
			yyc4917 = true
		}
	}
	yyh4917.End()
	if yyc4917 {
		*v = yyv4917
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4921 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4922 := &yyv4921
		yy4922.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4923 := *v
	yyh4923, yyl4923 := z.DecSliceHelperStart()
	var yyc4923 bool
	if yyl4923 == 0 {
		if yyv4923 == nil {
			yyv4923 = []ConfigMap{}
			yyc4923 = true
		} else if len(yyv4923) != 0 {
			yyv4923 = yyv4923[:0]
			yyc4923 = true
		}
	} else if yyl4923 > 0 {
		var yyrr4923, yyrl4923 int
		var yyrt4923 bool
		if yyl4923 > cap(yyv4923) {

			yyrg4923 := len(yyv4923) > 0
			yyv24923 := yyv4923
			yyrl4923, yyrt4923 = z.DecInferLen(yyl4923, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4923 {
				if yyrl4923 <= cap(yyv4923) {
					yyv4923 = yyv4923[:yyrl4923]
				} else {
					yyv4923 = make([]ConfigMap, yyrl4923)
				}
			} else {
				yyv4923 = make([]ConfigMap, yyrl4923)
			}
			yyc4923 = true
			yyrr4923 = len(yyv4923)
			if yyrg4923 {
				copy(yyv4923, yyv24923)
			}
		} else if yyl4923 != len(yyv4923) {
			yyv4923 = yyv4923[:yyl4923]
			yyc4923 = true
		}
		yyj4923 := 0
		for ; yyj4923 < yyrr4923; yyj4923++ {
			yyh4923.ElemContainerState(yyj4923)
			if r.TryDecodeAsNil() {
				yyv4923[yyj4923] = ConfigMap{}
			} else {
				yyv4924 := &yyv4923[yyj4923]
				yyv4924.CodecDecodeSelf(d)
			}

		}
		if yyrt4923 {
			for ; yyj4923 < yyl4923; yyj4923++ {
				yyv4923 = append(yyv4923, ConfigMap{})
				yyh4923.ElemContainerState(yyj4923)
				if r.TryDecodeAsNil() {
					yyv4923[yyj4923] = ConfigMap{}
				} else {
					yyv4925 := &yyv4923[yyj4923]
					yyv4925.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4923 := 0
		for ; !r.CheckBreak(); yyj4923++ {

			if yyj4923 >= len(yyv4923) {
				yyv4923 = append(yyv4923, ConfigMap{}) // var yyz4923 ConfigMap
				yyc4923 = true
			}
			yyh4923.ElemContainerState(yyj4923)
			if yyj4923 < len(yyv4923) {
				if r.TryDecodeAsNil() {
					yyv4923[yyj4923] = ConfigMap{}
				} else {
					yyv4926 := &yyv4923[yyj4923]
					yyv4926.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4923 < len(yyv4923) {
			yyv4923 = yyv4923[:yyj4923]
			yyc4923 = true
		} else if yyj4923 == 0 && yyv4923 == nil {
			yyv4923 = []ConfigMap{}
			yyc4923 = true
		}
	}
	yyh4923.End()
	if yyc4923 {
		*v = yyv4923
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4927 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4928 := &yyv4927
		yy4928.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4929 := *v
	yyh4929, yyl4929 := z.DecSliceHelperStart()
	var yyc4929 bool
	if yyl4929 == 0 {
		if yyv4929 == nil {
			yyv4929 = []ComponentCondition{}
			yyc4929 = true
		} else if len(yyv4929) != 0 {
			yyv4929 = yyv4929[:0]
			yyc4929 = true
		}
	} else if yyl4929 > 0 {
		var yyrr4929, yyrl4929 int
		var yyrt4929 bool
		if yyl4929 > cap(yyv4929) {

			yyrg4929 := len(yyv4929) > 0
			yyv24929 := yyv4929
			yyrl4929, yyrt4929 = z.DecInferLen(yyl4929, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4929 {
				if yyrl4929 <= cap(yyv4929) {
					yyv4929 = yyv4929[:yyrl4929]
				} else {
					yyv4929 = make([]ComponentCondition, yyrl4929)
				}
			} else {
				yyv4929 = make([]ComponentCondition, yyrl4929)
			}
			yyc4929 = true
			yyrr4929 = len(yyv4929)
			if yyrg4929 {
				copy(yyv4929, yyv24929)
			}
		} else if yyl4929 != len(yyv4929) {
			yyv4929 = yyv4929[:yyl4929]
			yyc4929 = true
		}
		yyj4929 := 0
		for ; yyj4929 < yyrr4929; yyj4929++ {
			yyh4929.ElemContainerState(yyj4929)
			if r.TryDecodeAsNil() {
				yyv4929[yyj4929] = ComponentCondition{}
			} else {
				yyv4930 := &yyv4929[yyj4929]
				yyv4930.CodecDecodeSelf(d)
			}

		}
		if yyrt4929 {
			for ; yyj4929 < yyl4929; yyj4929++ {
				yyv4929 = append(yyv4929, ComponentCondition{})
				yyh4929.ElemContainerState(yyj4929)
				if r.TryDecodeAsNil() {
					yyv4929[yyj4929] = ComponentCondition{}
				} else {
					yyv4931 := &yyv4929[yyj4929]
					yyv4931.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4929 := 0
		for ; !r.CheckBreak(); yyj4929++ {

			if yyj4929 >= len(yyv4929) {
				yyv4929 = append(yyv4929, ComponentCondition{}) // var yyz4929 ComponentCondition
				yyc4929 = true
			}
			yyh4929.ElemContainerState(yyj4929)
			if yyj4929 < len(yyv4929) {
				if r.TryDecodeAsNil() {
					yyv4929[yyj4929] = ComponentCondition{}
				} else {
					yyv4932 := &yyv4929[yyj4929]
					yyv4932.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4929 < len(yyv4929) {
			yyv4929 = yyv4929[:yyj4929]
			yyc4929 = true
		} else if yyj4929 == 0 && yyv4929 == nil {
			yyv4929 = []ComponentCondition{}
			yyc4929 = true
		}
	}
	yyh4929.End()
	if yyc4929 {
		*v = yyv4929
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4933 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4934 := &yyv4933
		yy4934.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4935 := *v
	yyh4935, yyl4935 := z.DecSliceHelperStart()
	var yyc4935 bool
	if yyl4935 == 0 {
		if yyv4935 == nil {
			yyv4935 = []ComponentStatus{}
			yyc4935 = true
		} else if len(yyv4935) != 0 {
			yyv4935 = yyv4935[:0]
			yyc4935 = true
		}
	} else if yyl4935 > 0 {
		var yyrr4935, yyrl4935 int
		var yyrt4935 bool
		if yyl4935 > cap(yyv4935) {

			yyrg4935 := len(yyv4935) > 0
			yyv24935 := yyv4935
			yyrl4935, yyrt4935 = z.DecInferLen(yyl4935, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4935 {
				if yyrl4935 <= cap(yyv4935) {
					yyv4935 = yyv4935[:yyrl4935]
				} else {
					yyv4935 = make([]ComponentStatus, yyrl4935)
				}
			} else {
				yyv4935 = make([]ComponentStatus, yyrl4935)
			}
			yyc4935 = true
			yyrr4935 = len(yyv4935)
			if yyrg4935 {
				copy(yyv4935, yyv24935)
			}
		} else if yyl4935 != len(yyv4935) {
			yyv4935 = yyv4935[:yyl4935]
			yyc4935 = true
		}
		yyj4935 := 0
		for ; yyj4935 < yyrr4935; yyj4935++ {
			yyh4935.ElemContainerState(yyj4935)
			if r.TryDecodeAsNil() {
				yyv4935[yyj4935] = ComponentStatus{}
			} else {
				yyv4936 := &yyv4935[yyj4935]
				yyv4936.CodecDecodeSelf(d)
			}

		}
		if yyrt4935 {
			for ; yyj4935 < yyl4935; yyj4935++ {
				yyv4935 = append(yyv4935, ComponentStatus{})
				yyh4935.ElemContainerState(yyj4935)
				if r.TryDecodeAsNil() {
					yyv4935[yyj4935] = ComponentStatus{}
				} else {
					yyv4937 := &yyv4935[yyj4935]
					yyv4937.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4935 := 0
		for ; !r.CheckBreak(); yyj4935++ {

			if yyj4935 >= len(yyv4935) {
				yyv4935 = append(yyv4935, ComponentStatus{}) // var yyz4935 ComponentStatus
				yyc4935 = true
			}
			yyh4935.ElemContainerState(yyj4935)
			if yyj4935 < len(yyv4935) {
				if r.TryDecodeAsNil() {
					yyv4935[yyj4935] = ComponentStatus{}
				} else {
					yyv4938 := &yyv4935[yyj4935]
					yyv4938.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4935 < len(yyv4935) {
			yyv4935 = yyv4935[:yyj4935]
			yyc4935 = true
		} else if yyj4935 == 0 && yyv4935 == nil {
			yyv4935 = []ComponentStatus{}
			yyc4935 = true
		}
	}
	yyh4935.End()
	if yyc4935 {
		*v = yyv4935
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4939 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4940 := &yyv4939
		yy4940.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4941 := *v
	yyh4941, yyl4941 := z.DecSliceHelperStart()
	var yyc4941 bool
	if yyl4941 == 0 {
		if yyv4941 == nil {
			yyv4941 = []DownwardAPIVolumeFile{}
			yyc4941 = true
		} else if len(yyv4941) != 0 {
			yyv4941 = yyv4941[:0]
			yyc4941 = true
		}
	} else if yyl4941 > 0 {
		var yyrr4941, yyrl4941 int
		var yyrt4941 bool
		if yyl4941 > cap(yyv4941) {

			yyrg4941 := len(yyv4941) > 0
			yyv24941 := yyv4941
			yyrl4941, yyrt4941 = z.DecInferLen(yyl4941, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4941 {
				if yyrl4941 <= cap(yyv4941) {
					yyv4941 = yyv4941[:yyrl4941]
				} else {
					yyv4941 = make([]DownwardAPIVolumeFile, yyrl4941)
				}
			} else {
				yyv4941 = make([]DownwardAPIVolumeFile, yyrl4941)
			}
			yyc4941 = true
			yyrr4941 = len(yyv4941)
			if yyrg4941 {
				copy(yyv4941, yyv24941)
			}
		} else if yyl4941 != len(yyv4941) {
			yyv4941 = yyv4941[:yyl4941]
			yyc4941 = true
		}
		yyj4941 := 0
		for ; yyj4941 < yyrr4941; yyj4941++ {
			yyh4941.ElemContainerState(yyj4941)
			if r.TryDecodeAsNil() {
				yyv4941[yyj4941] = DownwardAPIVolumeFile{}
			} else {
				yyv4942 := &yyv4941[yyj4941]
				yyv4942.CodecDecodeSelf(d)
			}

		}
		if yyrt4941 {
			for ; yyj4941 < yyl4941; yyj4941++ {
				yyv4941 = append(yyv4941, DownwardAPIVolumeFile{})
				yyh4941.ElemContainerState(yyj4941)
				if r.TryDecodeAsNil() {
					yyv4941[yyj4941] = DownwardAPIVolumeFile{}
				} else {
					yyv4943 := &yyv4941[yyj4941]
					yyv4943.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4941 := 0
		for ; !r.CheckBreak(); yyj4941++ {

			if yyj4941 >= len(yyv4941) {
				yyv4941 = append(yyv4941, DownwardAPIVolumeFile{}) // var yyz4941 DownwardAPIVolumeFile
				yyc4941 = true
			}
			yyh4941.ElemContainerState(yyj4941)
			if yyj4941 < len(yyv4941) {
				if r.TryDecodeAsNil() {
					yyv4941[yyj4941] = DownwardAPIVolumeFile{}
				} else {
					yyv4944 := &yyv4941[yyj4941]
					yyv4944.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4941 < len(yyv4941) {
			yyv4941 = yyv4941[:yyj4941]
			yyc4941 = true
		} else if yyj4941 == 0 && yyv4941 == nil {
			yyv4941 = []DownwardAPIVolumeFile{}
			yyc4941 = true
		}
	}
	yyh4941.End()
	if yyc4941 {
		*v = yyv4941
	}
}
