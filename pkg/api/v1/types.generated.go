/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_v1 "k8s.io/kubernetes/pkg/apis/meta/v1"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_v1.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSlicev1_OwnerReference(([]pkg2_v1.OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSlicev1_OwnerReference(([]pkg2_v1.OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_v1.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_v1.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSlicev1_OwnerReference((*[]pkg2_v1.OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_v1.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_v1.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSlicev1_OwnerReference((*[]pkg2_v1.OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [24]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[21] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq101[23] = x.VolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(24)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.Cinder == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.CephFS == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.Flocker == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.FC == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.AzureFile == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.Quobyte == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.PhotonPersistentDisk == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr101 || yy2arr101 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[23] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym128 := z.DecBinary()
	_ = yym128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct129 := r.ContainerType()
		if yyct129 == codecSelferValueTypeMap1234 {
			yyl129 := r.ReadMapStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl129, d)
			}
		} else if yyct129 == codecSelferValueTypeArray1234 {
			yyl129 := r.ReadArrayStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys130Slc
	var yyhl130 bool = l >= 0
	for yyj130 := 0; ; yyj130++ {
		if yyhl130 {
			if yyj130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys130Slc = r.DecodeBytes(yys130Slc, true, true)
		yys130 := string(yys130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys130 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.VolumeSource.PhotonPersistentDisk == nil {
				x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys130)
		} // end switch yys130
	} // end for yyj130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj155 int
	var yyb155 bool
	var yyhl155 bool = l >= 0
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PhotonPersistentDisk == nil {
		x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj155++
		if yyhl155 {
			yyb155 = yyj155 > l
		} else {
			yyb155 = r.CheckBreak()
		}
		if yyb155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym180 := z.EncBinary()
		_ = yym180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep181 := !z.EncBinary()
			yy2arr181 := z.EncBasicHandle().StructToArray
			var yyq181 [23]bool
			_, _, _ = yysep181, yyq181, yy2arr181
			const yyr181 bool = false
			yyq181[0] = x.HostPath != nil
			yyq181[1] = x.EmptyDir != nil
			yyq181[2] = x.GCEPersistentDisk != nil
			yyq181[3] = x.AWSElasticBlockStore != nil
			yyq181[4] = x.GitRepo != nil
			yyq181[5] = x.Secret != nil
			yyq181[6] = x.NFS != nil
			yyq181[7] = x.ISCSI != nil
			yyq181[8] = x.Glusterfs != nil
			yyq181[9] = x.PersistentVolumeClaim != nil
			yyq181[10] = x.RBD != nil
			yyq181[11] = x.FlexVolume != nil
			yyq181[12] = x.Cinder != nil
			yyq181[13] = x.CephFS != nil
			yyq181[14] = x.Flocker != nil
			yyq181[15] = x.DownwardAPI != nil
			yyq181[16] = x.FC != nil
			yyq181[17] = x.AzureFile != nil
			yyq181[18] = x.ConfigMap != nil
			yyq181[19] = x.VsphereVolume != nil
			yyq181[20] = x.Quobyte != nil
			yyq181[21] = x.AzureDisk != nil
			yyq181[22] = x.PhotonPersistentDisk != nil
			var yynn181 int
			if yyr181 || yy2arr181 {
				r.EncodeArrayStart(23)
			} else {
				yynn181 = 0
				for _, b := range yyq181 {
					if b {
						yynn181++
					}
				}
				r.EncodeMapStart(yynn181)
				yynn181 = 0
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[20] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[22] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym205 := z.DecBinary()
	_ = yym205
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct206 := r.ContainerType()
		if yyct206 == codecSelferValueTypeMap1234 {
			yyl206 := r.ReadMapStart()
			if yyl206 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl206, d)
			}
		} else if yyct206 == codecSelferValueTypeArray1234 {
			yyl206 := r.ReadArrayStart()
			if yyl206 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl206, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys207Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys207Slc
	var yyhl207 bool = l >= 0
	for yyj207 := 0; ; yyj207++ {
		if yyhl207 {
			if yyj207 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys207Slc = r.DecodeBytes(yys207Slc, true, true)
		yys207 := string(yys207Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys207 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys207)
		} // end switch yys207
	} // end for yyj207
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj231 int
	var yyb231 bool
	var yyhl231 bool = l >= 0
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj231++
		if yyhl231 {
			yyb231 = yyj231 > l
		} else {
			yyb231 = r.CheckBreak()
		}
		if yyb231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym255 := z.EncBinary()
		_ = yym255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep256 := !z.EncBinary()
			yy2arr256 := z.EncBasicHandle().StructToArray
			var yyq256 [2]bool
			_, _, _ = yysep256, yyq256, yy2arr256
			const yyr256 bool = false
			yyq256[1] = x.ReadOnly != false
			var yynn256 int
			if yyr256 || yy2arr256 {
				r.EncodeArrayStart(2)
			} else {
				yynn256 = 1
				for _, b := range yyq256 {
					if b {
						yynn256++
					}
				}
				r.EncodeMapStart(yynn256)
				yynn256 = 0
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym258 := z.EncBinary()
				_ = yym258
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym259 := z.EncBinary()
				_ = yym259
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[1] {
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq256[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym263 := z.DecBinary()
	_ = yym263
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct264 := r.ContainerType()
		if yyct264 == codecSelferValueTypeMap1234 {
			yyl264 := r.ReadMapStart()
			if yyl264 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl264, d)
			}
		} else if yyct264 == codecSelferValueTypeArray1234 {
			yyl264 := r.ReadArrayStart()
			if yyl264 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl264, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys265Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys265Slc
	var yyhl265 bool = l >= 0
	for yyj265 := 0; ; yyj265++ {
		if yyhl265 {
			if yyj265 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys265Slc = r.DecodeBytes(yys265Slc, true, true)
		yys265 := string(yys265Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys265 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys265)
		} // end switch yys265
	} // end for yyj265
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj268 int
	var yyb268 bool
	var yyhl268 bool = l >= 0
	yyj268++
	if yyhl268 {
		yyb268 = yyj268 > l
	} else {
		yyb268 = r.CheckBreak()
	}
	if yyb268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj268++
	if yyhl268 {
		yyb268 = yyj268 > l
	} else {
		yyb268 = r.CheckBreak()
	}
	if yyb268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj268++
		if yyhl268 {
			yyb268 = yyj268 > l
		} else {
			yyb268 = r.CheckBreak()
		}
		if yyb268 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj268-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym271 := z.EncBinary()
		_ = yym271
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep272 := !z.EncBinary()
			yy2arr272 := z.EncBasicHandle().StructToArray
			var yyq272 [17]bool
			_, _, _ = yysep272, yyq272, yy2arr272
			const yyr272 bool = false
			yyq272[0] = x.GCEPersistentDisk != nil
			yyq272[1] = x.AWSElasticBlockStore != nil
			yyq272[2] = x.HostPath != nil
			yyq272[3] = x.Glusterfs != nil
			yyq272[4] = x.NFS != nil
			yyq272[5] = x.RBD != nil
			yyq272[6] = x.ISCSI != nil
			yyq272[7] = x.Cinder != nil
			yyq272[8] = x.CephFS != nil
			yyq272[9] = x.FC != nil
			yyq272[10] = x.Flocker != nil
			yyq272[11] = x.FlexVolume != nil
			yyq272[12] = x.AzureFile != nil
			yyq272[13] = x.VsphereVolume != nil
			yyq272[14] = x.Quobyte != nil
			yyq272[15] = x.AzureDisk != nil
			yyq272[16] = x.PhotonPersistentDisk != nil
			var yynn272 int
			if yyr272 || yy2arr272 {
				r.EncodeArrayStart(17)
			} else {
				yynn272 = 0
				for _, b := range yyq272 {
					if b {
						yynn272++
					}
				}
				r.EncodeMapStart(yynn272)
				yynn272 = 0
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[14] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[16] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym290 := z.DecBinary()
	_ = yym290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct291 := r.ContainerType()
		if yyct291 == codecSelferValueTypeMap1234 {
			yyl291 := r.ReadMapStart()
			if yyl291 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl291, d)
			}
		} else if yyct291 == codecSelferValueTypeArray1234 {
			yyl291 := r.ReadArrayStart()
			if yyl291 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl291, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys292Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys292Slc
	var yyhl292 bool = l >= 0
	for yyj292 := 0; ; yyj292++ {
		if yyhl292 {
			if yyj292 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys292Slc = r.DecodeBytes(yys292Slc, true, true)
		yys292 := string(yys292Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys292 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys292)
		} // end switch yys292
	} // end for yyj292
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj310 int
	var yyb310 bool
	var yyhl310 bool = l >= 0
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj310++
		if yyhl310 {
			yyb310 = yyj310 > l
		} else {
			yyb310 = r.CheckBreak()
		}
		if yyb310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym328 := z.EncBinary()
		_ = yym328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep329 := !z.EncBinary()
			yy2arr329 := z.EncBasicHandle().StructToArray
			var yyq329 [5]bool
			_, _, _ = yysep329, yyq329, yy2arr329
			const yyr329 bool = false
			yyq329[0] = x.Kind != ""
			yyq329[1] = x.APIVersion != ""
			yyq329[2] = true
			yyq329[3] = true
			yyq329[4] = true
			var yynn329 int
			if yyr329 || yy2arr329 {
				r.EncodeArrayStart(5)
			} else {
				yynn329 = 0
				for _, b := range yyq329 {
					if b {
						yynn329++
					}
				}
				r.EncodeMapStart(yynn329)
				yynn329 = 0
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[0] {
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[1] {
					yym334 := z.EncBinary()
					_ = yym334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[2] {
					yy337 := &x.ObjectMeta
					yy337.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy338 := &x.ObjectMeta
					yy338.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[3] {
					yy340 := &x.Spec
					yy340.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy341 := &x.Spec
					yy341.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[4] {
					yy343 := &x.Status
					yy343.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy344 := &x.Status
					yy344.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym345 := z.DecBinary()
	_ = yym345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct346 := r.ContainerType()
		if yyct346 == codecSelferValueTypeMap1234 {
			yyl346 := r.ReadMapStart()
			if yyl346 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl346, d)
			}
		} else if yyct346 == codecSelferValueTypeArray1234 {
			yyl346 := r.ReadArrayStart()
			if yyl346 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl346, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys347Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys347Slc
	var yyhl347 bool = l >= 0
	for yyj347 := 0; ; yyj347++ {
		if yyhl347 {
			if yyj347 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys347Slc = r.DecodeBytes(yys347Slc, true, true)
		yys347 := string(yys347Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys347 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv350 := &x.ObjectMeta
				yyv350.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv351 := &x.Spec
				yyv351.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv352 := &x.Status
				yyv352.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys347)
		} // end switch yys347
	} // end for yyj347
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj353 int
	var yyb353 bool
	var yyhl353 bool = l >= 0
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv356 := &x.ObjectMeta
		yyv356.CodecDecodeSelf(d)
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv357 := &x.Spec
		yyv357.CodecDecodeSelf(d)
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv358 := &x.Status
		yyv358.CodecDecodeSelf(d)
	}
	for {
		yyj353++
		if yyhl353 {
			yyb353 = yyj353 > l
		} else {
			yyb353 = r.CheckBreak()
		}
		if yyb353 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj353-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym359 := z.EncBinary()
		_ = yym359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep360 := !z.EncBinary()
			yy2arr360 := z.EncBasicHandle().StructToArray
			var yyq360 [21]bool
			_, _, _ = yysep360, yyq360, yy2arr360
			const yyr360 bool = false
			yyq360[0] = len(x.Capacity) != 0
			yyq360[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq360[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq360[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq360[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq360[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq360[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq360[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq360[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq360[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq360[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq360[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq360[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq360[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq360[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq360[15] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq360[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq360[17] = x.PersistentVolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq360[18] = len(x.AccessModes) != 0
			yyq360[19] = x.ClaimRef != nil
			yyq360[20] = x.PersistentVolumeReclaimPolicy != ""
			var yynn360 int
			if yyr360 || yy2arr360 {
				r.EncodeArrayStart(21)
			} else {
				yynn360 = 0
				for _, b := range yyq360 {
					if b {
						yynn360++
					}
				}
				r.EncodeMapStart(yynn360)
				yynn360 = 0
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn362 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn362 = true
				goto LABEL362
			}
		LABEL362:
			if yyr360 || yy2arr360 {
				if yyn362 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn362 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn363 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn363 = true
				goto LABEL363
			}
		LABEL363:
			if yyr360 || yy2arr360 {
				if yyn363 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn363 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn364 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn364 = true
				goto LABEL364
			}
		LABEL364:
			if yyr360 || yy2arr360 {
				if yyn364 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn364 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn365 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn365 = true
				goto LABEL365
			}
		LABEL365:
			if yyr360 || yy2arr360 {
				if yyn365 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn365 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn366 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn366 = true
				goto LABEL366
			}
		LABEL366:
			if yyr360 || yy2arr360 {
				if yyn366 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn366 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn367 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn367 = true
				goto LABEL367
			}
		LABEL367:
			if yyr360 || yy2arr360 {
				if yyn367 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn367 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn368 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn368 = true
				goto LABEL368
			}
		LABEL368:
			if yyr360 || yy2arr360 {
				if yyn368 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn368 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn369 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn369 = true
				goto LABEL369
			}
		LABEL369:
			if yyr360 || yy2arr360 {
				if yyn369 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn369 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn370 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn370 = true
				goto LABEL370
			}
		LABEL370:
			if yyr360 || yy2arr360 {
				if yyn370 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn370 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn371 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn371 = true
				goto LABEL371
			}
		LABEL371:
			if yyr360 || yy2arr360 {
				if yyn371 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn371 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn372 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn372 = true
				goto LABEL372
			}
		LABEL372:
			if yyr360 || yy2arr360 {
				if yyn372 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn372 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn373 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn373 = true
				goto LABEL373
			}
		LABEL373:
			if yyr360 || yy2arr360 {
				if yyn373 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn373 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn374 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn374 = true
				goto LABEL374
			}
		LABEL374:
			if yyr360 || yy2arr360 {
				if yyn374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn374 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn375 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn375 = true
				goto LABEL375
			}
		LABEL375:
			if yyr360 || yy2arr360 {
				if yyn375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn375 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn376 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn376 = true
				goto LABEL376
			}
		LABEL376:
			if yyr360 || yy2arr360 {
				if yyn376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[15] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn376 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn377 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn377 = true
				goto LABEL377
			}
		LABEL377:
			if yyr360 || yy2arr360 {
				if yyn377 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn377 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn378 bool
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				yyn378 = true
				goto LABEL378
			}
		LABEL378:
			if yyr360 || yy2arr360 {
				if yyn378 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[17] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn378 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[18] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym380 := z.EncBinary()
						_ = yym380
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym381 := z.EncBinary()
						_ = yym381
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[19] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[20] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym384 := z.DecBinary()
	_ = yym384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct385 := r.ContainerType()
		if yyct385 == codecSelferValueTypeMap1234 {
			yyl385 := r.ReadMapStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl385, d)
			}
		} else if yyct385 == codecSelferValueTypeArray1234 {
			yyl385 := r.ReadArrayStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys386Slc
	var yyhl386 bool = l >= 0
	for yyj386 := 0; ; yyj386++ {
		if yyhl386 {
			if yyj386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys386Slc = r.DecodeBytes(yys386Slc, true, true)
		yys386 := string(yys386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys386 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv387 := &x.Capacity
				yyv387.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv405 := &x.AccessModes
				yym406 := z.DecBinary()
				_ = yym406
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv405), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys386)
		} // end switch yys386
	} // end for yyj386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj409 int
	var yyb409 bool
	var yyhl409 bool = l >= 0
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv410 := &x.Capacity
		yyv410.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
		x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv428 := &x.AccessModes
		yym429 := z.DecBinary()
		_ = yym429
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv428), d)
		}
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj409++
		if yyhl409 {
			yyb409 = yyj409 > l
		} else {
			yyb409 = r.CheckBreak()
		}
		if yyb409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym432 := z.EncBinary()
	_ = yym432
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym433 := z.DecBinary()
	_ = yym433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym434 := z.EncBinary()
		_ = yym434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep435 := !z.EncBinary()
			yy2arr435 := z.EncBasicHandle().StructToArray
			var yyq435 [3]bool
			_, _, _ = yysep435, yyq435, yy2arr435
			const yyr435 bool = false
			yyq435[0] = x.Phase != ""
			yyq435[1] = x.Message != ""
			yyq435[2] = x.Reason != ""
			var yynn435 int
			if yyr435 || yy2arr435 {
				r.EncodeArrayStart(3)
			} else {
				yynn435 = 0
				for _, b := range yyq435 {
					if b {
						yynn435++
					}
				}
				r.EncodeMapStart(yynn435)
				yynn435 = 0
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[1] {
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[2] {
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym442 := z.EncBinary()
					_ = yym442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym443 := z.DecBinary()
	_ = yym443
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct444 := r.ContainerType()
		if yyct444 == codecSelferValueTypeMap1234 {
			yyl444 := r.ReadMapStart()
			if yyl444 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl444, d)
			}
		} else if yyct444 == codecSelferValueTypeArray1234 {
			yyl444 := r.ReadArrayStart()
			if yyl444 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl444, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys445Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys445Slc
	var yyhl445 bool = l >= 0
	for yyj445 := 0; ; yyj445++ {
		if yyhl445 {
			if yyj445 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys445Slc = r.DecodeBytes(yys445Slc, true, true)
		yys445 := string(yys445Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys445 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys445)
		} // end switch yys445
	} // end for yyj445
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj449 int
	var yyb449 bool
	var yyhl449 bool = l >= 0
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj449++
		if yyhl449 {
			yyb449 = yyj449 > l
		} else {
			yyb449 = r.CheckBreak()
		}
		if yyb449 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj449-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym453 := z.EncBinary()
		_ = yym453
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep454 := !z.EncBinary()
			yy2arr454 := z.EncBasicHandle().StructToArray
			var yyq454 [4]bool
			_, _, _ = yysep454, yyq454, yy2arr454
			const yyr454 bool = false
			yyq454[0] = x.Kind != ""
			yyq454[1] = x.APIVersion != ""
			yyq454[2] = true
			var yynn454 int
			if yyr454 || yy2arr454 {
				r.EncodeArrayStart(4)
			} else {
				yynn454 = 1
				for _, b := range yyq454 {
					if b {
						yynn454++
					}
				}
				r.EncodeMapStart(yynn454)
				yynn454 = 0
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[0] {
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq454[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym457 := z.EncBinary()
					_ = yym457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[1] {
					yym459 := z.EncBinary()
					_ = yym459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq454[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[2] {
					yy462 := &x.ListMeta
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else if z.HasExtensions() && z.EncExt(yy462) {
					} else {
						z.EncFallback(yy462)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq454[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy464 := &x.ListMeta
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else if z.HasExtensions() && z.EncExt(yy464) {
					} else {
						z.EncFallback(yy464)
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym469 := z.DecBinary()
	_ = yym469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct470 := r.ContainerType()
		if yyct470 == codecSelferValueTypeMap1234 {
			yyl470 := r.ReadMapStart()
			if yyl470 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl470, d)
			}
		} else if yyct470 == codecSelferValueTypeArray1234 {
			yyl470 := r.ReadArrayStart()
			if yyl470 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl470, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys471Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys471Slc
	var yyhl471 bool = l >= 0
	for yyj471 := 0; ; yyj471++ {
		if yyhl471 {
			if yyj471 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys471Slc = r.DecodeBytes(yys471Slc, true, true)
		yys471 := string(yys471Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys471 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv474 := &x.ListMeta
				yym475 := z.DecBinary()
				_ = yym475
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv474) {
				} else {
					z.DecFallback(yyv474, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv476 := &x.Items
				yym477 := z.DecBinary()
				_ = yym477
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv476), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys471)
		} // end switch yys471
	} // end for yyj471
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj478 int
	var yyb478 bool
	var yyhl478 bool = l >= 0
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv481 := &x.ListMeta
		yym482 := z.DecBinary()
		_ = yym482
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv481) {
		} else {
			z.DecFallback(yyv481, false)
		}
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv483 := &x.Items
		yym484 := z.DecBinary()
		_ = yym484
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv483), d)
		}
	}
	for {
		yyj478++
		if yyhl478 {
			yyb478 = yyj478 > l
		} else {
			yyb478 = r.CheckBreak()
		}
		if yyb478 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj478-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym485 := z.EncBinary()
		_ = yym485
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep486 := !z.EncBinary()
			yy2arr486 := z.EncBasicHandle().StructToArray
			var yyq486 [5]bool
			_, _, _ = yysep486, yyq486, yy2arr486
			const yyr486 bool = false
			yyq486[0] = x.Kind != ""
			yyq486[1] = x.APIVersion != ""
			yyq486[2] = true
			yyq486[3] = true
			yyq486[4] = true
			var yynn486 int
			if yyr486 || yy2arr486 {
				r.EncodeArrayStart(5)
			} else {
				yynn486 = 0
				for _, b := range yyq486 {
					if b {
						yynn486++
					}
				}
				r.EncodeMapStart(yynn486)
				yynn486 = 0
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[0] {
					yym488 := z.EncBinary()
					_ = yym488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq486[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[1] {
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq486[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[2] {
					yy494 := &x.ObjectMeta
					yy494.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy495 := &x.ObjectMeta
					yy495.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[3] {
					yy497 := &x.Spec
					yy497.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy498 := &x.Spec
					yy498.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[4] {
					yy500 := &x.Status
					yy500.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy501 := &x.Status
					yy501.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym502 := z.DecBinary()
	_ = yym502
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct503 := r.ContainerType()
		if yyct503 == codecSelferValueTypeMap1234 {
			yyl503 := r.ReadMapStart()
			if yyl503 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl503, d)
			}
		} else if yyct503 == codecSelferValueTypeArray1234 {
			yyl503 := r.ReadArrayStart()
			if yyl503 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl503, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys504Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys504Slc
	var yyhl504 bool = l >= 0
	for yyj504 := 0; ; yyj504++ {
		if yyhl504 {
			if yyj504 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys504Slc = r.DecodeBytes(yys504Slc, true, true)
		yys504 := string(yys504Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys504 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv507 := &x.ObjectMeta
				yyv507.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv508 := &x.Spec
				yyv508.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv509 := &x.Status
				yyv509.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys504)
		} // end switch yys504
	} // end for yyj504
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj510 int
	var yyb510 bool
	var yyhl510 bool = l >= 0
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv513 := &x.ObjectMeta
		yyv513.CodecDecodeSelf(d)
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv514 := &x.Spec
		yyv514.CodecDecodeSelf(d)
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv515 := &x.Status
		yyv515.CodecDecodeSelf(d)
	}
	for {
		yyj510++
		if yyhl510 {
			yyb510 = yyj510 > l
		} else {
			yyb510 = r.CheckBreak()
		}
		if yyb510 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj510-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym516 := z.EncBinary()
		_ = yym516
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep517 := !z.EncBinary()
			yy2arr517 := z.EncBasicHandle().StructToArray
			var yyq517 [4]bool
			_, _, _ = yysep517, yyq517, yy2arr517
			const yyr517 bool = false
			yyq517[0] = x.Kind != ""
			yyq517[1] = x.APIVersion != ""
			yyq517[2] = true
			var yynn517 int
			if yyr517 || yy2arr517 {
				r.EncodeArrayStart(4)
			} else {
				yynn517 = 1
				for _, b := range yyq517 {
					if b {
						yynn517++
					}
				}
				r.EncodeMapStart(yynn517)
				yynn517 = 0
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[0] {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq517[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[1] {
					yym522 := z.EncBinary()
					_ = yym522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq517[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym523 := z.EncBinary()
					_ = yym523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[2] {
					yy525 := &x.ListMeta
					yym526 := z.EncBinary()
					_ = yym526
					if false {
					} else if z.HasExtensions() && z.EncExt(yy525) {
					} else {
						z.EncFallback(yy525)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq517[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy527 := &x.ListMeta
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else if z.HasExtensions() && z.EncExt(yy527) {
					} else {
						z.EncFallback(yy527)
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym532 := z.DecBinary()
	_ = yym532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct533 := r.ContainerType()
		if yyct533 == codecSelferValueTypeMap1234 {
			yyl533 := r.ReadMapStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl533, d)
			}
		} else if yyct533 == codecSelferValueTypeArray1234 {
			yyl533 := r.ReadArrayStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys534Slc
	var yyhl534 bool = l >= 0
	for yyj534 := 0; ; yyj534++ {
		if yyhl534 {
			if yyj534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys534Slc = r.DecodeBytes(yys534Slc, true, true)
		yys534 := string(yys534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys534 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv537 := &x.ListMeta
				yym538 := z.DecBinary()
				_ = yym538
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv537) {
				} else {
					z.DecFallback(yyv537, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv539 := &x.Items
				yym540 := z.DecBinary()
				_ = yym540
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv539), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys534)
		} // end switch yys534
	} // end for yyj534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj541 int
	var yyb541 bool
	var yyhl541 bool = l >= 0
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv544 := &x.ListMeta
		yym545 := z.DecBinary()
		_ = yym545
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv544) {
		} else {
			z.DecFallback(yyv544, false)
		}
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv546 := &x.Items
		yym547 := z.DecBinary()
		_ = yym547
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv546), d)
		}
	}
	for {
		yyj541++
		if yyhl541 {
			yyb541 = yyj541 > l
		} else {
			yyb541 = r.CheckBreak()
		}
		if yyb541 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj541-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym548 := z.EncBinary()
		_ = yym548
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep549 := !z.EncBinary()
			yy2arr549 := z.EncBasicHandle().StructToArray
			var yyq549 [4]bool
			_, _, _ = yysep549, yyq549, yy2arr549
			const yyr549 bool = false
			yyq549[0] = len(x.AccessModes) != 0
			yyq549[1] = x.Selector != nil
			yyq549[2] = true
			yyq549[3] = x.VolumeName != ""
			var yynn549 int
			if yyr549 || yy2arr549 {
				r.EncodeArrayStart(4)
			} else {
				yynn549 = 0
				for _, b := range yyq549 {
					if b {
						yynn549++
					}
				}
				r.EncodeMapStart(yynn549)
				yynn549 = 0
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym551 := z.EncBinary()
						_ = yym551
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym552 := z.EncBinary()
						_ = yym552
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym554 := z.EncBinary()
						_ = yym554
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym555 := z.EncBinary()
						_ = yym555
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[2] {
					yy557 := &x.Resources
					yy557.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy558 := &x.Resources
					yy558.CodecEncodeSelf(e)
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[3] {
					yym560 := z.EncBinary()
					_ = yym560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq549[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym562 := z.DecBinary()
	_ = yym562
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct563 := r.ContainerType()
		if yyct563 == codecSelferValueTypeMap1234 {
			yyl563 := r.ReadMapStart()
			if yyl563 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl563, d)
			}
		} else if yyct563 == codecSelferValueTypeArray1234 {
			yyl563 := r.ReadArrayStart()
			if yyl563 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl563, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys564Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys564Slc
	var yyhl564 bool = l >= 0
	for yyj564 := 0; ; yyj564++ {
		if yyhl564 {
			if yyj564 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys564Slc = r.DecodeBytes(yys564Slc, true, true)
		yys564 := string(yys564Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys564 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv565 := &x.AccessModes
				yym566 := z.DecBinary()
				_ = yym566
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv565), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_v1.LabelSelector)
				}
				yym568 := z.DecBinary()
				_ = yym568
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv569 := &x.Resources
				yyv569.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys564)
		} // end switch yys564
	} // end for yyj564
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj571 int
	var yyb571 bool
	var yyhl571 bool = l >= 0
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv572 := &x.AccessModes
		yym573 := z.DecBinary()
		_ = yym573
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv572), d)
		}
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_v1.LabelSelector)
		}
		yym575 := z.DecBinary()
		_ = yym575
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv576 := &x.Resources
		yyv576.CodecDecodeSelf(d)
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj571++
		if yyhl571 {
			yyb571 = yyj571 > l
		} else {
			yyb571 = r.CheckBreak()
		}
		if yyb571 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj571-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym578 := z.EncBinary()
		_ = yym578
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep579 := !z.EncBinary()
			yy2arr579 := z.EncBasicHandle().StructToArray
			var yyq579 [3]bool
			_, _, _ = yysep579, yyq579, yy2arr579
			const yyr579 bool = false
			yyq579[0] = x.Phase != ""
			yyq579[1] = len(x.AccessModes) != 0
			yyq579[2] = len(x.Capacity) != 0
			var yynn579 int
			if yyr579 || yy2arr579 {
				r.EncodeArrayStart(3)
			} else {
				yynn579 = 0
				for _, b := range yyq579 {
					if b {
						yynn579++
					}
				}
				r.EncodeMapStart(yynn579)
				yynn579 = 0
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq579[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym582 := z.EncBinary()
						_ = yym582
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym583 := z.EncBinary()
						_ = yym583
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym585 := z.DecBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct586 := r.ContainerType()
		if yyct586 == codecSelferValueTypeMap1234 {
			yyl586 := r.ReadMapStart()
			if yyl586 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl586, d)
			}
		} else if yyct586 == codecSelferValueTypeArray1234 {
			yyl586 := r.ReadArrayStart()
			if yyl586 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl586, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys587Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys587Slc
	var yyhl587 bool = l >= 0
	for yyj587 := 0; ; yyj587++ {
		if yyhl587 {
			if yyj587 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys587Slc = r.DecodeBytes(yys587Slc, true, true)
		yys587 := string(yys587Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys587 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv589 := &x.AccessModes
				yym590 := z.DecBinary()
				_ = yym590
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv589), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv591 := &x.Capacity
				yyv591.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys587)
		} // end switch yys587
	} // end for yyj587
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj592 int
	var yyb592 bool
	var yyhl592 bool = l >= 0
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv594 := &x.AccessModes
		yym595 := z.DecBinary()
		_ = yym595
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv594), d)
		}
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv596 := &x.Capacity
		yyv596.CodecDecodeSelf(d)
	}
	for {
		yyj592++
		if yyhl592 {
			yyb592 = yyj592 > l
		} else {
			yyb592 = r.CheckBreak()
		}
		if yyb592 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj592-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym597 := z.EncBinary()
	_ = yym597
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym598 := z.DecBinary()
	_ = yym598
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym599 := z.EncBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym600 := z.DecBinary()
	_ = yym600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym601 := z.EncBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym602 := z.DecBinary()
	_ = yym602
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym603 := z.EncBinary()
		_ = yym603
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep604 := !z.EncBinary()
			yy2arr604 := z.EncBasicHandle().StructToArray
			var yyq604 [1]bool
			_, _, _ = yysep604, yyq604, yy2arr604
			const yyr604 bool = false
			var yynn604 int
			if yyr604 || yy2arr604 {
				r.EncodeArrayStart(1)
			} else {
				yynn604 = 1
				for _, b := range yyq604 {
					if b {
						yynn604++
					}
				}
				r.EncodeMapStart(yynn604)
				yynn604 = 0
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym606 := z.EncBinary()
				_ = yym606
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym607 := z.EncBinary()
				_ = yym607
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym608 := z.DecBinary()
	_ = yym608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct609 := r.ContainerType()
		if yyct609 == codecSelferValueTypeMap1234 {
			yyl609 := r.ReadMapStart()
			if yyl609 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl609, d)
			}
		} else if yyct609 == codecSelferValueTypeArray1234 {
			yyl609 := r.ReadArrayStart()
			if yyl609 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl609, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys610Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys610Slc
	var yyhl610 bool = l >= 0
	for yyj610 := 0; ; yyj610++ {
		if yyhl610 {
			if yyj610 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys610Slc = r.DecodeBytes(yys610Slc, true, true)
		yys610 := string(yys610Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys610 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys610)
		} // end switch yys610
	} // end for yyj610
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj612 int
	var yyb612 bool
	var yyhl612 bool = l >= 0
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj612++
		if yyhl612 {
			yyb612 = yyj612 > l
		} else {
			yyb612 = r.CheckBreak()
		}
		if yyb612 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj612-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym614 := z.EncBinary()
		_ = yym614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep615 := !z.EncBinary()
			yy2arr615 := z.EncBasicHandle().StructToArray
			var yyq615 [1]bool
			_, _, _ = yysep615, yyq615, yy2arr615
			const yyr615 bool = false
			yyq615[0] = x.Medium != ""
			var yynn615 int
			if yyr615 || yy2arr615 {
				r.EncodeArrayStart(1)
			} else {
				yynn615 = 0
				for _, b := range yyq615 {
					if b {
						yynn615++
					}
				}
				r.EncodeMapStart(yynn615)
				yynn615 = 0
			}
			if yyr615 || yy2arr615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq615[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq615[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr615 || yy2arr615 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym617 := z.DecBinary()
	_ = yym617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct618 := r.ContainerType()
		if yyct618 == codecSelferValueTypeMap1234 {
			yyl618 := r.ReadMapStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl618, d)
			}
		} else if yyct618 == codecSelferValueTypeArray1234 {
			yyl618 := r.ReadArrayStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys619Slc
	var yyhl619 bool = l >= 0
	for yyj619 := 0; ; yyj619++ {
		if yyhl619 {
			if yyj619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys619Slc = r.DecodeBytes(yys619Slc, true, true)
		yys619 := string(yys619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys619 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys619)
		} // end switch yys619
	} // end for yyj619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj621 int
	var yyb621 bool
	var yyhl621 bool = l >= 0
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj621++
		if yyhl621 {
			yyb621 = yyj621 > l
		} else {
			yyb621 = r.CheckBreak()
		}
		if yyb621 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj621-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym623 := z.EncBinary()
		_ = yym623
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep624 := !z.EncBinary()
			yy2arr624 := z.EncBasicHandle().StructToArray
			var yyq624 [3]bool
			_, _, _ = yysep624, yyq624, yy2arr624
			const yyr624 bool = false
			yyq624[2] = x.ReadOnly != false
			var yynn624 int
			if yyr624 || yy2arr624 {
				r.EncodeArrayStart(3)
			} else {
				yynn624 = 2
				for _, b := range yyq624 {
					if b {
						yynn624++
					}
				}
				r.EncodeMapStart(yynn624)
				yynn624 = 0
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym626 := z.EncBinary()
				_ = yym626
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym627 := z.EncBinary()
				_ = yym627
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym629 := z.EncBinary()
				_ = yym629
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym630 := z.EncBinary()
				_ = yym630
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq624[2] {
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq624[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym634 := z.DecBinary()
	_ = yym634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct635 := r.ContainerType()
		if yyct635 == codecSelferValueTypeMap1234 {
			yyl635 := r.ReadMapStart()
			if yyl635 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl635, d)
			}
		} else if yyct635 == codecSelferValueTypeArray1234 {
			yyl635 := r.ReadArrayStart()
			if yyl635 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys636Slc
	var yyhl636 bool = l >= 0
	for yyj636 := 0; ; yyj636++ {
		if yyhl636 {
			if yyj636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys636Slc = r.DecodeBytes(yys636Slc, true, true)
		yys636 := string(yys636Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys636 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys636)
		} // end switch yys636
	} // end for yyj636
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj640 int
	var yyb640 bool
	var yyhl640 bool = l >= 0
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj640++
		if yyhl640 {
			yyb640 = yyj640 > l
		} else {
			yyb640 = r.CheckBreak()
		}
		if yyb640 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj640-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym644 := z.EncBinary()
		_ = yym644
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep645 := !z.EncBinary()
			yy2arr645 := z.EncBasicHandle().StructToArray
			var yyq645 [8]bool
			_, _, _ = yysep645, yyq645, yy2arr645
			const yyr645 bool = false
			yyq645[2] = x.FSType != ""
			yyq645[3] = x.RBDPool != ""
			yyq645[4] = x.RadosUser != ""
			yyq645[5] = x.Keyring != ""
			yyq645[6] = x.SecretRef != nil
			yyq645[7] = x.ReadOnly != false
			var yynn645 int
			if yyr645 || yy2arr645 {
				r.EncodeArrayStart(8)
			} else {
				yynn645 = 2
				for _, b := range yyq645 {
					if b {
						yynn645++
					}
				}
				r.EncodeMapStart(yynn645)
				yynn645 = 0
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym650 := z.EncBinary()
				_ = yym650
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym651 := z.EncBinary()
				_ = yym651
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[2] {
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym654 := z.EncBinary()
					_ = yym654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[3] {
					yym656 := z.EncBinary()
					_ = yym656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[4] {
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[5] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq645[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[7] {
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq645[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym667 := z.EncBinary()
					_ = yym667
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym668 := z.DecBinary()
	_ = yym668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct669 := r.ContainerType()
		if yyct669 == codecSelferValueTypeMap1234 {
			yyl669 := r.ReadMapStart()
			if yyl669 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl669, d)
			}
		} else if yyct669 == codecSelferValueTypeArray1234 {
			yyl669 := r.ReadArrayStart()
			if yyl669 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys670Slc
	var yyhl670 bool = l >= 0
	for yyj670 := 0; ; yyj670++ {
		if yyhl670 {
			if yyj670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys670Slc = r.DecodeBytes(yys670Slc, true, true)
		yys670 := string(yys670Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys670 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv671 := &x.CephMonitors
				yym672 := z.DecBinary()
				_ = yym672
				if false {
				} else {
					z.F.DecSliceStringX(yyv671, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys670)
		} // end switch yys670
	} // end for yyj670
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj680 int
	var yyb680 bool
	var yyhl680 bool = l >= 0
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv681 := &x.CephMonitors
		yym682 := z.DecBinary()
		_ = yym682
		if false {
		} else {
			z.F.DecSliceStringX(yyv681, false, d)
		}
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj680++
		if yyhl680 {
			yyb680 = yyj680 > l
		} else {
			yyb680 = r.CheckBreak()
		}
		if yyb680 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj680-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym690 := z.EncBinary()
		_ = yym690
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep691 := !z.EncBinary()
			yy2arr691 := z.EncBasicHandle().StructToArray
			var yyq691 [3]bool
			_, _, _ = yysep691, yyq691, yy2arr691
			const yyr691 bool = false
			yyq691[1] = x.FSType != ""
			yyq691[2] = x.ReadOnly != false
			var yynn691 int
			if yyr691 || yy2arr691 {
				r.EncodeArrayStart(3)
			} else {
				yynn691 = 1
				for _, b := range yyq691 {
					if b {
						yynn691++
					}
				}
				r.EncodeMapStart(yynn691)
				yynn691 = 0
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym693 := z.EncBinary()
				_ = yym693
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym694 := z.EncBinary()
				_ = yym694
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq691[1] {
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq691[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym697 := z.EncBinary()
					_ = yym697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq691[2] {
					yym699 := z.EncBinary()
					_ = yym699
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq691[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym700 := z.EncBinary()
					_ = yym700
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym701 := z.DecBinary()
	_ = yym701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct702 := r.ContainerType()
		if yyct702 == codecSelferValueTypeMap1234 {
			yyl702 := r.ReadMapStart()
			if yyl702 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl702, d)
			}
		} else if yyct702 == codecSelferValueTypeArray1234 {
			yyl702 := r.ReadArrayStart()
			if yyl702 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl702, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys703Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys703Slc
	var yyhl703 bool = l >= 0
	for yyj703 := 0; ; yyj703++ {
		if yyhl703 {
			if yyj703 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys703Slc = r.DecodeBytes(yys703Slc, true, true)
		yys703 := string(yys703Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys703 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys703)
		} // end switch yys703
	} // end for yyj703
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj707 int
	var yyb707 bool
	var yyhl707 bool = l >= 0
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj707++
		if yyhl707 {
			yyb707 = yyj707 > l
		} else {
			yyb707 = r.CheckBreak()
		}
		if yyb707 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj707-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym711 := z.EncBinary()
		_ = yym711
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep712 := !z.EncBinary()
			yy2arr712 := z.EncBasicHandle().StructToArray
			var yyq712 [6]bool
			_, _, _ = yysep712, yyq712, yy2arr712
			const yyr712 bool = false
			yyq712[1] = x.Path != ""
			yyq712[2] = x.User != ""
			yyq712[3] = x.SecretFile != ""
			yyq712[4] = x.SecretRef != nil
			yyq712[5] = x.ReadOnly != false
			var yynn712 int
			if yyr712 || yy2arr712 {
				r.EncodeArrayStart(6)
			} else {
				yynn712 = 1
				for _, b := range yyq712 {
					if b {
						yynn712++
					}
				}
				r.EncodeMapStart(yynn712)
				yynn712 = 0
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym714 := z.EncBinary()
					_ = yym714
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[1] {
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq712[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym718 := z.EncBinary()
					_ = yym718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[2] {
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq712[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[3] {
					yym723 := z.EncBinary()
					_ = yym723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq712[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym724 := z.EncBinary()
					_ = yym724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq712[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[5] {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq712[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym729 := z.DecBinary()
	_ = yym729
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct730 := r.ContainerType()
		if yyct730 == codecSelferValueTypeMap1234 {
			yyl730 := r.ReadMapStart()
			if yyl730 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl730, d)
			}
		} else if yyct730 == codecSelferValueTypeArray1234 {
			yyl730 := r.ReadArrayStart()
			if yyl730 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl730, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys731Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys731Slc
	var yyhl731 bool = l >= 0
	for yyj731 := 0; ; yyj731++ {
		if yyhl731 {
			if yyj731 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys731Slc = r.DecodeBytes(yys731Slc, true, true)
		yys731 := string(yys731Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys731 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv732 := &x.Monitors
				yym733 := z.DecBinary()
				_ = yym733
				if false {
				} else {
					z.F.DecSliceStringX(yyv732, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys731)
		} // end switch yys731
	} // end for yyj731
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj739 int
	var yyb739 bool
	var yyhl739 bool = l >= 0
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv740 := &x.Monitors
		yym741 := z.DecBinary()
		_ = yym741
		if false {
		} else {
			z.F.DecSliceStringX(yyv740, false, d)
		}
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj739++
		if yyhl739 {
			yyb739 = yyj739 > l
		} else {
			yyb739 = r.CheckBreak()
		}
		if yyb739 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj739-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym747 := z.EncBinary()
		_ = yym747
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep748 := !z.EncBinary()
			yy2arr748 := z.EncBasicHandle().StructToArray
			var yyq748 [2]bool
			_, _, _ = yysep748, yyq748, yy2arr748
			const yyr748 bool = false
			yyq748[0] = x.DatasetName != ""
			yyq748[1] = x.DatasetUUID != ""
			var yynn748 int
			if yyr748 || yy2arr748 {
				r.EncodeArrayStart(2)
			} else {
				yynn748 = 0
				for _, b := range yyq748 {
					if b {
						yynn748++
					}
				}
				r.EncodeMapStart(yynn748)
				yynn748 = 0
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq748[0] {
					yym750 := z.EncBinary()
					_ = yym750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq748[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym751 := z.EncBinary()
					_ = yym751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				}
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq748[1] {
					yym753 := z.EncBinary()
					_ = yym753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq748[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetUUID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym754 := z.EncBinary()
					_ = yym754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				}
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym755 := z.DecBinary()
	_ = yym755
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct756 := r.ContainerType()
		if yyct756 == codecSelferValueTypeMap1234 {
			yyl756 := r.ReadMapStart()
			if yyl756 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl756, d)
			}
		} else if yyct756 == codecSelferValueTypeArray1234 {
			yyl756 := r.ReadArrayStart()
			if yyl756 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl756, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys757Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys757Slc
	var yyhl757 bool = l >= 0
	for yyj757 := 0; ; yyj757++ {
		if yyhl757 {
			if yyj757 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys757Slc = r.DecodeBytes(yys757Slc, true, true)
		yys757 := string(yys757Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys757 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		case "datasetUUID":
			if r.TryDecodeAsNil() {
				x.DatasetUUID = ""
			} else {
				x.DatasetUUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys757)
		} // end switch yys757
	} // end for yyj757
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj760 int
	var yyb760 bool
	var yyhl760 bool = l >= 0
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetUUID = ""
	} else {
		x.DatasetUUID = string(r.DecodeString())
	}
	for {
		yyj760++
		if yyhl760 {
			yyb760 = yyj760 > l
		} else {
			yyb760 = r.CheckBreak()
		}
		if yyb760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym763 := z.EncBinary()
	_ = yym763
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym764 := z.DecBinary()
	_ = yym764
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym765 := z.EncBinary()
	_ = yym765
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym766 := z.DecBinary()
	_ = yym766
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym767 := z.EncBinary()
		_ = yym767
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep768 := !z.EncBinary()
			yy2arr768 := z.EncBasicHandle().StructToArray
			var yyq768 [4]bool
			_, _, _ = yysep768, yyq768, yy2arr768
			const yyr768 bool = false
			yyq768[1] = x.FSType != ""
			yyq768[2] = x.Partition != 0
			yyq768[3] = x.ReadOnly != false
			var yynn768 int
			if yyr768 || yy2arr768 {
				r.EncodeArrayStart(4)
			} else {
				yynn768 = 1
				for _, b := range yyq768 {
					if b {
						yynn768++
					}
				}
				r.EncodeMapStart(yynn768)
				yynn768 = 0
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym770 := z.EncBinary()
				_ = yym770
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym771 := z.EncBinary()
				_ = yym771
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq768[1] {
					yym773 := z.EncBinary()
					_ = yym773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq768[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym774 := z.EncBinary()
					_ = yym774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq768[2] {
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq768[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq768[3] {
					yym779 := z.EncBinary()
					_ = yym779
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq768[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym781 := z.DecBinary()
	_ = yym781
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct782 := r.ContainerType()
		if yyct782 == codecSelferValueTypeMap1234 {
			yyl782 := r.ReadMapStart()
			if yyl782 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl782, d)
			}
		} else if yyct782 == codecSelferValueTypeArray1234 {
			yyl782 := r.ReadArrayStart()
			if yyl782 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl782, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys783Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys783Slc
	var yyhl783 bool = l >= 0
	for yyj783 := 0; ; yyj783++ {
		if yyhl783 {
			if yyj783 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys783Slc = r.DecodeBytes(yys783Slc, true, true)
		yys783 := string(yys783Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys783 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys783)
		} // end switch yys783
	} // end for yyj783
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj788 int
	var yyb788 bool
	var yyhl788 bool = l >= 0
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj788++
		if yyhl788 {
			yyb788 = yyj788 > l
		} else {
			yyb788 = r.CheckBreak()
		}
		if yyb788 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj788-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym793 := z.EncBinary()
		_ = yym793
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep794 := !z.EncBinary()
			yy2arr794 := z.EncBasicHandle().StructToArray
			var yyq794 [5]bool
			_, _, _ = yysep794, yyq794, yy2arr794
			const yyr794 bool = false
			yyq794[2] = x.ReadOnly != false
			yyq794[3] = x.User != ""
			yyq794[4] = x.Group != ""
			var yynn794 int
			if yyr794 || yy2arr794 {
				r.EncodeArrayStart(5)
			} else {
				yynn794 = 2
				for _, b := range yyq794 {
					if b {
						yynn794++
					}
				}
				r.EncodeMapStart(yynn794)
				yynn794 = 0
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym796 := z.EncBinary()
				_ = yym796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym797 := z.EncBinary()
				_ = yym797
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym799 := z.EncBinary()
				_ = yym799
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym800 := z.EncBinary()
				_ = yym800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq794[2] {
					yym802 := z.EncBinary()
					_ = yym802
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq794[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq794[3] {
					yym805 := z.EncBinary()
					_ = yym805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq794[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym806 := z.EncBinary()
					_ = yym806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq794[4] {
					yym808 := z.EncBinary()
					_ = yym808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq794[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym810 := z.DecBinary()
	_ = yym810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct811 := r.ContainerType()
		if yyct811 == codecSelferValueTypeMap1234 {
			yyl811 := r.ReadMapStart()
			if yyl811 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl811, d)
			}
		} else if yyct811 == codecSelferValueTypeArray1234 {
			yyl811 := r.ReadArrayStart()
			if yyl811 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys812Slc
	var yyhl812 bool = l >= 0
	for yyj812 := 0; ; yyj812++ {
		if yyhl812 {
			if yyj812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys812Slc = r.DecodeBytes(yys812Slc, true, true)
		yys812 := string(yys812Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys812 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys812)
		} // end switch yys812
	} // end for yyj812
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj818 int
	var yyb818 bool
	var yyhl818 bool = l >= 0
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj818++
		if yyhl818 {
			yyb818 = yyj818 > l
		} else {
			yyb818 = r.CheckBreak()
		}
		if yyb818 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj818-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym824 := z.EncBinary()
		_ = yym824
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep825 := !z.EncBinary()
			yy2arr825 := z.EncBasicHandle().StructToArray
			var yyq825 [5]bool
			_, _, _ = yysep825, yyq825, yy2arr825
			const yyr825 bool = false
			yyq825[1] = x.FSType != ""
			yyq825[2] = x.SecretRef != nil
			yyq825[3] = x.ReadOnly != false
			yyq825[4] = len(x.Options) != 0
			var yynn825 int
			if yyr825 || yy2arr825 {
				r.EncodeArrayStart(5)
			} else {
				yynn825 = 1
				for _, b := range yyq825 {
					if b {
						yynn825++
					}
				}
				r.EncodeMapStart(yynn825)
				yynn825 = 0
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym827 := z.EncBinary()
				_ = yym827
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym828 := z.EncBinary()
				_ = yym828
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[1] {
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq825[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym831 := z.EncBinary()
					_ = yym831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq825[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[3] {
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq825[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym837 := z.EncBinary()
						_ = yym837
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq825[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym838 := z.EncBinary()
						_ = yym838
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym839 := z.DecBinary()
	_ = yym839
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct840 := r.ContainerType()
		if yyct840 == codecSelferValueTypeMap1234 {
			yyl840 := r.ReadMapStart()
			if yyl840 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl840, d)
			}
		} else if yyct840 == codecSelferValueTypeArray1234 {
			yyl840 := r.ReadArrayStart()
			if yyl840 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl840, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys841Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys841Slc
	var yyhl841 bool = l >= 0
	for yyj841 := 0; ; yyj841++ {
		if yyhl841 {
			if yyj841 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys841Slc = r.DecodeBytes(yys841Slc, true, true)
		yys841 := string(yys841Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys841 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv846 := &x.Options
				yym847 := z.DecBinary()
				_ = yym847
				if false {
				} else {
					z.F.DecMapStringStringX(yyv846, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys841)
		} // end switch yys841
	} // end for yyj841
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj848 int
	var yyb848 bool
	var yyhl848 bool = l >= 0
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv853 := &x.Options
		yym854 := z.DecBinary()
		_ = yym854
		if false {
		} else {
			z.F.DecMapStringStringX(yyv853, false, d)
		}
	}
	for {
		yyj848++
		if yyhl848 {
			yyb848 = yyj848 > l
		} else {
			yyb848 = r.CheckBreak()
		}
		if yyb848 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj848-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym855 := z.EncBinary()
		_ = yym855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep856 := !z.EncBinary()
			yy2arr856 := z.EncBasicHandle().StructToArray
			var yyq856 [4]bool
			_, _, _ = yysep856, yyq856, yy2arr856
			const yyr856 bool = false
			yyq856[1] = x.FSType != ""
			yyq856[2] = x.Partition != 0
			yyq856[3] = x.ReadOnly != false
			var yynn856 int
			if yyr856 || yy2arr856 {
				r.EncodeArrayStart(4)
			} else {
				yynn856 = 1
				for _, b := range yyq856 {
					if b {
						yynn856++
					}
				}
				r.EncodeMapStart(yynn856)
				yynn856 = 0
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym858 := z.EncBinary()
				_ = yym858
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym859 := z.EncBinary()
				_ = yym859
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[1] {
					yym861 := z.EncBinary()
					_ = yym861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq856[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[2] {
					yym864 := z.EncBinary()
					_ = yym864
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq856[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[3] {
					yym867 := z.EncBinary()
					_ = yym867
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq856[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym869 := z.DecBinary()
	_ = yym869
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct870 := r.ContainerType()
		if yyct870 == codecSelferValueTypeMap1234 {
			yyl870 := r.ReadMapStart()
			if yyl870 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl870, d)
			}
		} else if yyct870 == codecSelferValueTypeArray1234 {
			yyl870 := r.ReadArrayStart()
			if yyl870 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl870, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys871Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys871Slc
	var yyhl871 bool = l >= 0
	for yyj871 := 0; ; yyj871++ {
		if yyhl871 {
			if yyj871 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys871Slc = r.DecodeBytes(yys871Slc, true, true)
		yys871 := string(yys871Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys871 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys871)
		} // end switch yys871
	} // end for yyj871
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj876 int
	var yyb876 bool
	var yyhl876 bool = l >= 0
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj876++
		if yyhl876 {
			yyb876 = yyj876 > l
		} else {
			yyb876 = r.CheckBreak()
		}
		if yyb876 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj876-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym881 := z.EncBinary()
		_ = yym881
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep882 := !z.EncBinary()
			yy2arr882 := z.EncBasicHandle().StructToArray
			var yyq882 [3]bool
			_, _, _ = yysep882, yyq882, yy2arr882
			const yyr882 bool = false
			yyq882[1] = x.Revision != ""
			yyq882[2] = x.Directory != ""
			var yynn882 int
			if yyr882 || yy2arr882 {
				r.EncodeArrayStart(3)
			} else {
				yynn882 = 1
				for _, b := range yyq882 {
					if b {
						yynn882++
					}
				}
				r.EncodeMapStart(yynn882)
				yynn882 = 0
			}
			if yyr882 || yy2arr882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym884 := z.EncBinary()
				_ = yym884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym885 := z.EncBinary()
				_ = yym885
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr882 || yy2arr882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq882[1] {
					yym887 := z.EncBinary()
					_ = yym887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq882[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr882 || yy2arr882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq882[2] {
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq882[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr882 || yy2arr882 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym892 := z.DecBinary()
	_ = yym892
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct893 := r.ContainerType()
		if yyct893 == codecSelferValueTypeMap1234 {
			yyl893 := r.ReadMapStart()
			if yyl893 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl893, d)
			}
		} else if yyct893 == codecSelferValueTypeArray1234 {
			yyl893 := r.ReadArrayStart()
			if yyl893 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl893, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys894Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys894Slc
	var yyhl894 bool = l >= 0
	for yyj894 := 0; ; yyj894++ {
		if yyhl894 {
			if yyj894 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys894Slc = r.DecodeBytes(yys894Slc, true, true)
		yys894 := string(yys894Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys894 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys894)
		} // end switch yys894
	} // end for yyj894
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj898 int
	var yyb898 bool
	var yyhl898 bool = l >= 0
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj898++
		if yyhl898 {
			yyb898 = yyj898 > l
		} else {
			yyb898 = r.CheckBreak()
		}
		if yyb898 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj898-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym902 := z.EncBinary()
		_ = yym902
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep903 := !z.EncBinary()
			yy2arr903 := z.EncBasicHandle().StructToArray
			var yyq903 [3]bool
			_, _, _ = yysep903, yyq903, yy2arr903
			const yyr903 bool = false
			yyq903[0] = x.SecretName != ""
			yyq903[1] = len(x.Items) != 0
			yyq903[2] = x.DefaultMode != nil
			var yynn903 int
			if yyr903 || yy2arr903 {
				r.EncodeArrayStart(3)
			} else {
				yynn903 = 0
				for _, b := range yyq903 {
					if b {
						yynn903++
					}
				}
				r.EncodeMapStart(yynn903)
				yynn903 = 0
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq903[0] {
					yym905 := z.EncBinary()
					_ = yym905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq903[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq903[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym908 := z.EncBinary()
						_ = yym908
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq903[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym909 := z.EncBinary()
						_ = yym909
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq903[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy911 := *x.DefaultMode
						yym912 := z.EncBinary()
						_ = yym912
						if false {
						} else {
							r.EncodeInt(int64(yy911))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq903[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy913 := *x.DefaultMode
						yym914 := z.EncBinary()
						_ = yym914
						if false {
						} else {
							r.EncodeInt(int64(yy913))
						}
					}
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym915 := z.DecBinary()
	_ = yym915
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct916 := r.ContainerType()
		if yyct916 == codecSelferValueTypeMap1234 {
			yyl916 := r.ReadMapStart()
			if yyl916 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl916, d)
			}
		} else if yyct916 == codecSelferValueTypeArray1234 {
			yyl916 := r.ReadArrayStart()
			if yyl916 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl916, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys917Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys917Slc
	var yyhl917 bool = l >= 0
	for yyj917 := 0; ; yyj917++ {
		if yyhl917 {
			if yyj917 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys917Slc = r.DecodeBytes(yys917Slc, true, true)
		yys917 := string(yys917Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys917 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv919 := &x.Items
				yym920 := z.DecBinary()
				_ = yym920
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv919), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym922 := z.DecBinary()
				_ = yym922
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys917)
		} // end switch yys917
	} // end for yyj917
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj923 int
	var yyb923 bool
	var yyhl923 bool = l >= 0
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv925 := &x.Items
		yym926 := z.DecBinary()
		_ = yym926
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv925), d)
		}
	}
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym928 := z.DecBinary()
		_ = yym928
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj923++
		if yyhl923 {
			yyb923 = yyj923 > l
		} else {
			yyb923 = r.CheckBreak()
		}
		if yyb923 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj923-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym929 := z.EncBinary()
		_ = yym929
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep930 := !z.EncBinary()
			yy2arr930 := z.EncBasicHandle().StructToArray
			var yyq930 [3]bool
			_, _, _ = yysep930, yyq930, yy2arr930
			const yyr930 bool = false
			yyq930[2] = x.ReadOnly != false
			var yynn930 int
			if yyr930 || yy2arr930 {
				r.EncodeArrayStart(3)
			} else {
				yynn930 = 2
				for _, b := range yyq930 {
					if b {
						yynn930++
					}
				}
				r.EncodeMapStart(yynn930)
				yynn930 = 0
			}
			if yyr930 || yy2arr930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym932 := z.EncBinary()
				_ = yym932
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym933 := z.EncBinary()
				_ = yym933
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr930 || yy2arr930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym935 := z.EncBinary()
				_ = yym935
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym936 := z.EncBinary()
				_ = yym936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr930 || yy2arr930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq930[2] {
					yym938 := z.EncBinary()
					_ = yym938
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq930[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym939 := z.EncBinary()
					_ = yym939
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr930 || yy2arr930 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym940 := z.DecBinary()
	_ = yym940
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct941 := r.ContainerType()
		if yyct941 == codecSelferValueTypeMap1234 {
			yyl941 := r.ReadMapStart()
			if yyl941 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl941, d)
			}
		} else if yyct941 == codecSelferValueTypeArray1234 {
			yyl941 := r.ReadArrayStart()
			if yyl941 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl941, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys942Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys942Slc
	var yyhl942 bool = l >= 0
	for yyj942 := 0; ; yyj942++ {
		if yyhl942 {
			if yyj942 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys942Slc = r.DecodeBytes(yys942Slc, true, true)
		yys942 := string(yys942Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys942 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys942)
		} // end switch yys942
	} // end for yyj942
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj946 int
	var yyb946 bool
	var yyhl946 bool = l >= 0
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj946++
		if yyhl946 {
			yyb946 = yyj946 > l
		} else {
			yyb946 = r.CheckBreak()
		}
		if yyb946 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj946-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym950 := z.EncBinary()
		_ = yym950
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep951 := !z.EncBinary()
			yy2arr951 := z.EncBasicHandle().StructToArray
			var yyq951 [6]bool
			_, _, _ = yysep951, yyq951, yy2arr951
			const yyr951 bool = false
			yyq951[3] = x.ISCSIInterface != ""
			yyq951[4] = x.FSType != ""
			yyq951[5] = x.ReadOnly != false
			var yynn951 int
			if yyr951 || yy2arr951 {
				r.EncodeArrayStart(6)
			} else {
				yynn951 = 3
				for _, b := range yyq951 {
					if b {
						yynn951++
					}
				}
				r.EncodeMapStart(yynn951)
				yynn951 = 0
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym953 := z.EncBinary()
				_ = yym953
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym954 := z.EncBinary()
				_ = yym954
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym956 := z.EncBinary()
				_ = yym956
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym957 := z.EncBinary()
				_ = yym957
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym959 := z.EncBinary()
				_ = yym959
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym960 := z.EncBinary()
				_ = yym960
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq951[3] {
					yym962 := z.EncBinary()
					_ = yym962
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq951[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym963 := z.EncBinary()
					_ = yym963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq951[4] {
					yym965 := z.EncBinary()
					_ = yym965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq951[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym966 := z.EncBinary()
					_ = yym966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq951[5] {
					yym968 := z.EncBinary()
					_ = yym968
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq951[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym969 := z.EncBinary()
					_ = yym969
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym970 := z.DecBinary()
	_ = yym970
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct971 := r.ContainerType()
		if yyct971 == codecSelferValueTypeMap1234 {
			yyl971 := r.ReadMapStart()
			if yyl971 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl971, d)
			}
		} else if yyct971 == codecSelferValueTypeArray1234 {
			yyl971 := r.ReadArrayStart()
			if yyl971 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl971, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys972Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys972Slc
	var yyhl972 bool = l >= 0
	for yyj972 := 0; ; yyj972++ {
		if yyhl972 {
			if yyj972 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys972Slc = r.DecodeBytes(yys972Slc, true, true)
		yys972 := string(yys972Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys972 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys972)
		} // end switch yys972
	} // end for yyj972
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj979 int
	var yyb979 bool
	var yyhl979 bool = l >= 0
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj979++
		if yyhl979 {
			yyb979 = yyj979 > l
		} else {
			yyb979 = r.CheckBreak()
		}
		if yyb979 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj979-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym986 := z.EncBinary()
		_ = yym986
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep987 := !z.EncBinary()
			yy2arr987 := z.EncBasicHandle().StructToArray
			var yyq987 [4]bool
			_, _, _ = yysep987, yyq987, yy2arr987
			const yyr987 bool = false
			yyq987[2] = x.FSType != ""
			yyq987[3] = x.ReadOnly != false
			var yynn987 int
			if yyr987 || yy2arr987 {
				r.EncodeArrayStart(4)
			} else {
				yynn987 = 2
				for _, b := range yyq987 {
					if b {
						yynn987++
					}
				}
				r.EncodeMapStart(yynn987)
				yynn987 = 0
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym989 := z.EncBinary()
					_ = yym989
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy992 := *x.Lun
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeInt(int64(yy992))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy994 := *x.Lun
					yym995 := z.EncBinary()
					_ = yym995
					if false {
					} else {
						r.EncodeInt(int64(yy994))
					}
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq987[2] {
					yym997 := z.EncBinary()
					_ = yym997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq987[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym998 := z.EncBinary()
					_ = yym998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq987[3] {
					yym1000 := z.EncBinary()
					_ = yym1000
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq987[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1001 := z.EncBinary()
					_ = yym1001
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1002 := z.DecBinary()
	_ = yym1002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1003 := r.ContainerType()
		if yyct1003 == codecSelferValueTypeMap1234 {
			yyl1003 := r.ReadMapStart()
			if yyl1003 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1003, d)
			}
		} else if yyct1003 == codecSelferValueTypeArray1234 {
			yyl1003 := r.ReadArrayStart()
			if yyl1003 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1003, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1004Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1004Slc
	var yyhl1004 bool = l >= 0
	for yyj1004 := 0; ; yyj1004++ {
		if yyhl1004 {
			if yyj1004 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1004Slc = r.DecodeBytes(yys1004Slc, true, true)
		yys1004 := string(yys1004Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1004 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv1005 := &x.TargetWWNs
				yym1006 := z.DecBinary()
				_ = yym1006
				if false {
				} else {
					z.F.DecSliceStringX(yyv1005, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym1008 := z.DecBinary()
				_ = yym1008
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1004)
		} // end switch yys1004
	} // end for yyj1004
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1011 int
	var yyb1011 bool
	var yyhl1011 bool = l >= 0
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv1012 := &x.TargetWWNs
		yym1013 := z.DecBinary()
		_ = yym1013
		if false {
		} else {
			z.F.DecSliceStringX(yyv1012, false, d)
		}
	}
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym1015 := z.DecBinary()
		_ = yym1015
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1011++
		if yyhl1011 {
			yyb1011 = yyj1011 > l
		} else {
			yyb1011 = r.CheckBreak()
		}
		if yyb1011 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1011-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1018 := z.EncBinary()
		_ = yym1018
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1019 := !z.EncBinary()
			yy2arr1019 := z.EncBasicHandle().StructToArray
			var yyq1019 [3]bool
			_, _, _ = yysep1019, yyq1019, yy2arr1019
			const yyr1019 bool = false
			yyq1019[2] = x.ReadOnly != false
			var yynn1019 int
			if yyr1019 || yy2arr1019 {
				r.EncodeArrayStart(3)
			} else {
				yynn1019 = 2
				for _, b := range yyq1019 {
					if b {
						yynn1019++
					}
				}
				r.EncodeMapStart(yynn1019)
				yynn1019 = 0
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1021 := z.EncBinary()
				_ = yym1021
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1022 := z.EncBinary()
				_ = yym1022
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1024 := z.EncBinary()
				_ = yym1024
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1025 := z.EncBinary()
				_ = yym1025
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1019[2] {
					yym1027 := z.EncBinary()
					_ = yym1027
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1019[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1028 := z.EncBinary()
					_ = yym1028
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1029 := z.DecBinary()
	_ = yym1029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1030 := r.ContainerType()
		if yyct1030 == codecSelferValueTypeMap1234 {
			yyl1030 := r.ReadMapStart()
			if yyl1030 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1030, d)
			}
		} else if yyct1030 == codecSelferValueTypeArray1234 {
			yyl1030 := r.ReadArrayStart()
			if yyl1030 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1030, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1031Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1031Slc
	var yyhl1031 bool = l >= 0
	for yyj1031 := 0; ; yyj1031++ {
		if yyhl1031 {
			if yyj1031 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1031Slc = r.DecodeBytes(yys1031Slc, true, true)
		yys1031 := string(yys1031Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1031 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1031)
		} // end switch yys1031
	} // end for yyj1031
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1035 int
	var yyb1035 bool
	var yyhl1035 bool = l >= 0
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1035++
		if yyhl1035 {
			yyb1035 = yyj1035 > l
		} else {
			yyb1035 = r.CheckBreak()
		}
		if yyb1035 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1035-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1039 := z.EncBinary()
		_ = yym1039
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1040 := !z.EncBinary()
			yy2arr1040 := z.EncBasicHandle().StructToArray
			var yyq1040 [2]bool
			_, _, _ = yysep1040, yyq1040, yy2arr1040
			const yyr1040 bool = false
			yyq1040[1] = x.FSType != ""
			var yynn1040 int
			if yyr1040 || yy2arr1040 {
				r.EncodeArrayStart(2)
			} else {
				yynn1040 = 1
				for _, b := range yyq1040 {
					if b {
						yynn1040++
					}
				}
				r.EncodeMapStart(yynn1040)
				yynn1040 = 0
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1042 := z.EncBinary()
				_ = yym1042
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1043 := z.EncBinary()
				_ = yym1043
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1040[1] {
					yym1045 := z.EncBinary()
					_ = yym1045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1040[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1046 := z.EncBinary()
					_ = yym1046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1047 := z.DecBinary()
	_ = yym1047
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1048 := r.ContainerType()
		if yyct1048 == codecSelferValueTypeMap1234 {
			yyl1048 := r.ReadMapStart()
			if yyl1048 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1048, d)
			}
		} else if yyct1048 == codecSelferValueTypeArray1234 {
			yyl1048 := r.ReadArrayStart()
			if yyl1048 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1048, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1049Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1049Slc
	var yyhl1049 bool = l >= 0
	for yyj1049 := 0; ; yyj1049++ {
		if yyhl1049 {
			if yyj1049 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1049Slc = r.DecodeBytes(yys1049Slc, true, true)
		yys1049 := string(yys1049Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1049 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1049)
		} // end switch yys1049
	} // end for yyj1049
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1052 int
	var yyb1052 bool
	var yyhl1052 bool = l >= 0
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1052++
		if yyhl1052 {
			yyb1052 = yyj1052 > l
		} else {
			yyb1052 = r.CheckBreak()
		}
		if yyb1052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1055 := z.EncBinary()
		_ = yym1055
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1056 := !z.EncBinary()
			yy2arr1056 := z.EncBasicHandle().StructToArray
			var yyq1056 [2]bool
			_, _, _ = yysep1056, yyq1056, yy2arr1056
			const yyr1056 bool = false
			yyq1056[1] = x.FSType != ""
			var yynn1056 int
			if yyr1056 || yy2arr1056 {
				r.EncodeArrayStart(2)
			} else {
				yynn1056 = 1
				for _, b := range yyq1056 {
					if b {
						yynn1056++
					}
				}
				r.EncodeMapStart(yynn1056)
				yynn1056 = 0
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1058 := z.EncBinary()
				_ = yym1058
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1059 := z.EncBinary()
				_ = yym1059
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1056[1] {
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1056[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1063 := z.DecBinary()
	_ = yym1063
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1064 := r.ContainerType()
		if yyct1064 == codecSelferValueTypeMap1234 {
			yyl1064 := r.ReadMapStart()
			if yyl1064 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1064, d)
			}
		} else if yyct1064 == codecSelferValueTypeArray1234 {
			yyl1064 := r.ReadArrayStart()
			if yyl1064 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1064, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1065Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1065Slc
	var yyhl1065 bool = l >= 0
	for yyj1065 := 0; ; yyj1065++ {
		if yyhl1065 {
			if yyj1065 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1065Slc = r.DecodeBytes(yys1065Slc, true, true)
		yys1065 := string(yys1065Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1065 {
		case "pdID":
			if r.TryDecodeAsNil() {
				x.PdID = ""
			} else {
				x.PdID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1065)
		} // end switch yys1065
	} // end for yyj1065
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1068 int
	var yyb1068 bool
	var yyhl1068 bool = l >= 0
	yyj1068++
	if yyhl1068 {
		yyb1068 = yyj1068 > l
	} else {
		yyb1068 = r.CheckBreak()
	}
	if yyb1068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PdID = ""
	} else {
		x.PdID = string(r.DecodeString())
	}
	yyj1068++
	if yyhl1068 {
		yyb1068 = yyj1068 > l
	} else {
		yyb1068 = r.CheckBreak()
	}
	if yyb1068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1068++
		if yyhl1068 {
			yyb1068 = yyj1068 > l
		} else {
			yyb1068 = r.CheckBreak()
		}
		if yyb1068 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1068-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1071 := z.EncBinary()
	_ = yym1071
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1072 := z.DecBinary()
	_ = yym1072
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1073 := z.EncBinary()
		_ = yym1073
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1074 := !z.EncBinary()
			yy2arr1074 := z.EncBasicHandle().StructToArray
			var yyq1074 [5]bool
			_, _, _ = yysep1074, yyq1074, yy2arr1074
			const yyr1074 bool = false
			yyq1074[2] = x.CachingMode != nil
			yyq1074[3] = x.FSType != nil
			yyq1074[4] = x.ReadOnly != nil
			var yynn1074 int
			if yyr1074 || yy2arr1074 {
				r.EncodeArrayStart(5)
			} else {
				yynn1074 = 2
				for _, b := range yyq1074 {
					if b {
						yynn1074++
					}
				}
				r.EncodeMapStart(yynn1074)
				yynn1074 = 0
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1076 := z.EncBinary()
				_ = yym1076
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1077 := z.EncBinary()
				_ = yym1077
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1079 := z.EncBinary()
				_ = yym1079
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1080 := z.EncBinary()
				_ = yym1080
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1082 := *x.CachingMode
						yy1082.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1083 := *x.CachingMode
						yy1083.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1085 := *x.FSType
						yym1086 := z.EncBinary()
						_ = yym1086
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1085))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1087 := *x.FSType
						yym1088 := z.EncBinary()
						_ = yym1088
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1087))
						}
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1090 := *x.ReadOnly
						yym1091 := z.EncBinary()
						_ = yym1091
						if false {
						} else {
							r.EncodeBool(bool(yy1090))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1092 := *x.ReadOnly
						yym1093 := z.EncBinary()
						_ = yym1093
						if false {
						} else {
							r.EncodeBool(bool(yy1092))
						}
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1094 := z.DecBinary()
	_ = yym1094
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1095 := r.ContainerType()
		if yyct1095 == codecSelferValueTypeMap1234 {
			yyl1095 := r.ReadMapStart()
			if yyl1095 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1095, d)
			}
		} else if yyct1095 == codecSelferValueTypeArray1234 {
			yyl1095 := r.ReadArrayStart()
			if yyl1095 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1095, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1096Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1096Slc
	var yyhl1096 bool = l >= 0
	for yyj1096 := 0; ; yyj1096++ {
		if yyhl1096 {
			if yyj1096 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1096Slc = r.DecodeBytes(yys1096Slc, true, true)
		yys1096 := string(yys1096Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1096 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1101 := z.DecBinary()
				_ = yym1101
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1103 := z.DecBinary()
				_ = yym1103
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1096)
		} // end switch yys1096
	} // end for yyj1096
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1104 int
	var yyb1104 bool
	var yyhl1104 bool = l >= 0
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1109 := z.DecBinary()
		_ = yym1109
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1111 := z.DecBinary()
		_ = yym1111
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1104++
		if yyhl1104 {
			yyb1104 = yyj1104 > l
		} else {
			yyb1104 = r.CheckBreak()
		}
		if yyb1104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1112 := z.EncBinary()
		_ = yym1112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1113 := !z.EncBinary()
			yy2arr1113 := z.EncBasicHandle().StructToArray
			var yyq1113 [3]bool
			_, _, _ = yysep1113, yyq1113, yy2arr1113
			const yyr1113 bool = false
			yyq1113[0] = x.Name != ""
			yyq1113[1] = len(x.Items) != 0
			yyq1113[2] = x.DefaultMode != nil
			var yynn1113 int
			if yyr1113 || yy2arr1113 {
				r.EncodeArrayStart(3)
			} else {
				yynn1113 = 0
				for _, b := range yyq1113 {
					if b {
						yynn1113++
					}
				}
				r.EncodeMapStart(yynn1113)
				yynn1113 = 0
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1113[0] {
					yym1115 := z.EncBinary()
					_ = yym1115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1113[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1116 := z.EncBinary()
					_ = yym1116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1113[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1118 := z.EncBinary()
						_ = yym1118
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1113[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1119 := z.EncBinary()
						_ = yym1119
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1113[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1121 := *x.DefaultMode
						yym1122 := z.EncBinary()
						_ = yym1122
						if false {
						} else {
							r.EncodeInt(int64(yy1121))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1113[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1123 := *x.DefaultMode
						yym1124 := z.EncBinary()
						_ = yym1124
						if false {
						} else {
							r.EncodeInt(int64(yy1123))
						}
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1125 := z.DecBinary()
	_ = yym1125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1126 := r.ContainerType()
		if yyct1126 == codecSelferValueTypeMap1234 {
			yyl1126 := r.ReadMapStart()
			if yyl1126 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1126, d)
			}
		} else if yyct1126 == codecSelferValueTypeArray1234 {
			yyl1126 := r.ReadArrayStart()
			if yyl1126 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1126, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1127Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1127Slc
	var yyhl1127 bool = l >= 0
	for yyj1127 := 0; ; yyj1127++ {
		if yyhl1127 {
			if yyj1127 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1127Slc = r.DecodeBytes(yys1127Slc, true, true)
		yys1127 := string(yys1127Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1127 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1129 := &x.Items
				yym1130 := z.DecBinary()
				_ = yym1130
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1129), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1132 := z.DecBinary()
				_ = yym1132
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1127)
		} // end switch yys1127
	} // end for yyj1127
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1133 int
	var yyb1133 bool
	var yyhl1133 bool = l >= 0
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1135 := &x.Items
		yym1136 := z.DecBinary()
		_ = yym1136
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1135), d)
		}
	}
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1138 := z.DecBinary()
		_ = yym1138
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1133++
		if yyhl1133 {
			yyb1133 = yyj1133 > l
		} else {
			yyb1133 = r.CheckBreak()
		}
		if yyb1133 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1133-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1139 := z.EncBinary()
		_ = yym1139
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1140 := !z.EncBinary()
			yy2arr1140 := z.EncBasicHandle().StructToArray
			var yyq1140 [3]bool
			_, _, _ = yysep1140, yyq1140, yy2arr1140
			const yyr1140 bool = false
			yyq1140[2] = x.Mode != nil
			var yynn1140 int
			if yyr1140 || yy2arr1140 {
				r.EncodeArrayStart(3)
			} else {
				yynn1140 = 2
				for _, b := range yyq1140 {
					if b {
						yynn1140++
					}
				}
				r.EncodeMapStart(yynn1140)
				yynn1140 = 0
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1142 := z.EncBinary()
				_ = yym1142
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1143 := z.EncBinary()
				_ = yym1143
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1145 := z.EncBinary()
				_ = yym1145
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1146 := z.EncBinary()
				_ = yym1146
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1140[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1148 := *x.Mode
						yym1149 := z.EncBinary()
						_ = yym1149
						if false {
						} else {
							r.EncodeInt(int64(yy1148))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1140[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1150 := *x.Mode
						yym1151 := z.EncBinary()
						_ = yym1151
						if false {
						} else {
							r.EncodeInt(int64(yy1150))
						}
					}
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1152 := z.DecBinary()
	_ = yym1152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1153 := r.ContainerType()
		if yyct1153 == codecSelferValueTypeMap1234 {
			yyl1153 := r.ReadMapStart()
			if yyl1153 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1153, d)
			}
		} else if yyct1153 == codecSelferValueTypeArray1234 {
			yyl1153 := r.ReadArrayStart()
			if yyl1153 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1153, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1154Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1154Slc
	var yyhl1154 bool = l >= 0
	for yyj1154 := 0; ; yyj1154++ {
		if yyhl1154 {
			if yyj1154 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1154Slc = r.DecodeBytes(yys1154Slc, true, true)
		yys1154 := string(yys1154Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1154 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1158 := z.DecBinary()
				_ = yym1158
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1154)
		} // end switch yys1154
	} // end for yyj1154
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1159 int
	var yyb1159 bool
	var yyhl1159 bool = l >= 0
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1163 := z.DecBinary()
		_ = yym1163
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1159++
		if yyhl1159 {
			yyb1159 = yyj1159 > l
		} else {
			yyb1159 = r.CheckBreak()
		}
		if yyb1159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1164 := z.EncBinary()
		_ = yym1164
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1165 := !z.EncBinary()
			yy2arr1165 := z.EncBasicHandle().StructToArray
			var yyq1165 [5]bool
			_, _, _ = yysep1165, yyq1165, yy2arr1165
			const yyr1165 bool = false
			yyq1165[0] = x.Name != ""
			yyq1165[1] = x.HostPort != 0
			yyq1165[3] = x.Protocol != ""
			yyq1165[4] = x.HostIP != ""
			var yynn1165 int
			if yyr1165 || yy2arr1165 {
				r.EncodeArrayStart(5)
			} else {
				yynn1165 = 1
				for _, b := range yyq1165 {
					if b {
						yynn1165++
					}
				}
				r.EncodeMapStart(yynn1165)
				yynn1165 = 0
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[0] {
					yym1167 := z.EncBinary()
					_ = yym1167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1165[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1168 := z.EncBinary()
					_ = yym1168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[1] {
					yym1170 := z.EncBinary()
					_ = yym1170
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1165[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1171 := z.EncBinary()
					_ = yym1171
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1173 := z.EncBinary()
				_ = yym1173
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1174 := z.EncBinary()
				_ = yym1174
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1165[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[4] {
					yym1177 := z.EncBinary()
					_ = yym1177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1165[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1178 := z.EncBinary()
					_ = yym1178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1179 := z.DecBinary()
	_ = yym1179
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1180 := r.ContainerType()
		if yyct1180 == codecSelferValueTypeMap1234 {
			yyl1180 := r.ReadMapStart()
			if yyl1180 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1180, d)
			}
		} else if yyct1180 == codecSelferValueTypeArray1234 {
			yyl1180 := r.ReadArrayStart()
			if yyl1180 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1180, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1181Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1181Slc
	var yyhl1181 bool = l >= 0
	for yyj1181 := 0; ; yyj1181++ {
		if yyhl1181 {
			if yyj1181 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1181Slc = r.DecodeBytes(yys1181Slc, true, true)
		yys1181 := string(yys1181Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1181 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1181)
		} // end switch yys1181
	} // end for yyj1181
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1187 int
	var yyb1187 bool
	var yyhl1187 bool = l >= 0
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1187++
		if yyhl1187 {
			yyb1187 = yyj1187 > l
		} else {
			yyb1187 = r.CheckBreak()
		}
		if yyb1187 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1187-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1193 := z.EncBinary()
		_ = yym1193
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1194 := !z.EncBinary()
			yy2arr1194 := z.EncBasicHandle().StructToArray
			var yyq1194 [4]bool
			_, _, _ = yysep1194, yyq1194, yy2arr1194
			const yyr1194 bool = false
			yyq1194[1] = x.ReadOnly != false
			yyq1194[3] = x.SubPath != ""
			var yynn1194 int
			if yyr1194 || yy2arr1194 {
				r.EncodeArrayStart(4)
			} else {
				yynn1194 = 2
				for _, b := range yyq1194 {
					if b {
						yynn1194++
					}
				}
				r.EncodeMapStart(yynn1194)
				yynn1194 = 0
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1196 := z.EncBinary()
				_ = yym1196
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1197 := z.EncBinary()
				_ = yym1197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[1] {
					yym1199 := z.EncBinary()
					_ = yym1199
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1194[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1200 := z.EncBinary()
					_ = yym1200
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1202 := z.EncBinary()
				_ = yym1202
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1203 := z.EncBinary()
				_ = yym1203
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[3] {
					yym1205 := z.EncBinary()
					_ = yym1205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1194[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1207 := z.DecBinary()
	_ = yym1207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1208 := r.ContainerType()
		if yyct1208 == codecSelferValueTypeMap1234 {
			yyl1208 := r.ReadMapStart()
			if yyl1208 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1208, d)
			}
		} else if yyct1208 == codecSelferValueTypeArray1234 {
			yyl1208 := r.ReadArrayStart()
			if yyl1208 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1209Slc
	var yyhl1209 bool = l >= 0
	for yyj1209 := 0; ; yyj1209++ {
		if yyhl1209 {
			if yyj1209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1209Slc = r.DecodeBytes(yys1209Slc, true, true)
		yys1209 := string(yys1209Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1209 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1209)
		} // end switch yys1209
	} // end for yyj1209
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1214 int
	var yyb1214 bool
	var yyhl1214 bool = l >= 0
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1214++
		if yyhl1214 {
			yyb1214 = yyj1214 > l
		} else {
			yyb1214 = r.CheckBreak()
		}
		if yyb1214 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1214-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1219 := z.EncBinary()
		_ = yym1219
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1220 := !z.EncBinary()
			yy2arr1220 := z.EncBasicHandle().StructToArray
			var yyq1220 [3]bool
			_, _, _ = yysep1220, yyq1220, yy2arr1220
			const yyr1220 bool = false
			yyq1220[1] = x.Value != ""
			yyq1220[2] = x.ValueFrom != nil
			var yynn1220 int
			if yyr1220 || yy2arr1220 {
				r.EncodeArrayStart(3)
			} else {
				yynn1220 = 1
				for _, b := range yyq1220 {
					if b {
						yynn1220++
					}
				}
				r.EncodeMapStart(yynn1220)
				yynn1220 = 0
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1222 := z.EncBinary()
				_ = yym1222
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1223 := z.EncBinary()
				_ = yym1223
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1220[1] {
					yym1225 := z.EncBinary()
					_ = yym1225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1220[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1220[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1220[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1228 := z.DecBinary()
	_ = yym1228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1229 := r.ContainerType()
		if yyct1229 == codecSelferValueTypeMap1234 {
			yyl1229 := r.ReadMapStart()
			if yyl1229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1229, d)
			}
		} else if yyct1229 == codecSelferValueTypeArray1234 {
			yyl1229 := r.ReadArrayStart()
			if yyl1229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1230Slc
	var yyhl1230 bool = l >= 0
	for yyj1230 := 0; ; yyj1230++ {
		if yyhl1230 {
			if yyj1230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1230Slc = r.DecodeBytes(yys1230Slc, true, true)
		yys1230 := string(yys1230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1230 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1230)
		} // end switch yys1230
	} // end for yyj1230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1234 int
	var yyb1234 bool
	var yyhl1234 bool = l >= 0
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1234++
		if yyhl1234 {
			yyb1234 = yyj1234 > l
		} else {
			yyb1234 = r.CheckBreak()
		}
		if yyb1234 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1234-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1238 := z.EncBinary()
		_ = yym1238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1239 := !z.EncBinary()
			yy2arr1239 := z.EncBasicHandle().StructToArray
			var yyq1239 [4]bool
			_, _, _ = yysep1239, yyq1239, yy2arr1239
			const yyr1239 bool = false
			yyq1239[0] = x.FieldRef != nil
			yyq1239[1] = x.ResourceFieldRef != nil
			yyq1239[2] = x.ConfigMapKeyRef != nil
			yyq1239[3] = x.SecretKeyRef != nil
			var yynn1239 int
			if yyr1239 || yy2arr1239 {
				r.EncodeArrayStart(4)
			} else {
				yynn1239 = 0
				for _, b := range yyq1239 {
					if b {
						yynn1239++
					}
				}
				r.EncodeMapStart(yynn1239)
				yynn1239 = 0
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1244 := z.DecBinary()
	_ = yym1244
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1245 := r.ContainerType()
		if yyct1245 == codecSelferValueTypeMap1234 {
			yyl1245 := r.ReadMapStart()
			if yyl1245 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1245, d)
			}
		} else if yyct1245 == codecSelferValueTypeArray1234 {
			yyl1245 := r.ReadArrayStart()
			if yyl1245 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1245, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1246Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1246Slc
	var yyhl1246 bool = l >= 0
	for yyj1246 := 0; ; yyj1246++ {
		if yyhl1246 {
			if yyj1246 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1246Slc = r.DecodeBytes(yys1246Slc, true, true)
		yys1246 := string(yys1246Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1246 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1246)
		} // end switch yys1246
	} // end for yyj1246
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1251 int
	var yyb1251 bool
	var yyhl1251 bool = l >= 0
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1251++
		if yyhl1251 {
			yyb1251 = yyj1251 > l
		} else {
			yyb1251 = r.CheckBreak()
		}
		if yyb1251 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1251-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1256 := z.EncBinary()
		_ = yym1256
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1257 := !z.EncBinary()
			yy2arr1257 := z.EncBasicHandle().StructToArray
			var yyq1257 [2]bool
			_, _, _ = yysep1257, yyq1257, yy2arr1257
			const yyr1257 bool = false
			yyq1257[0] = x.APIVersion != ""
			var yynn1257 int
			if yyr1257 || yy2arr1257 {
				r.EncodeArrayStart(2)
			} else {
				yynn1257 = 1
				for _, b := range yyq1257 {
					if b {
						yynn1257++
					}
				}
				r.EncodeMapStart(yynn1257)
				yynn1257 = 0
			}
			if yyr1257 || yy2arr1257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1257[0] {
					yym1259 := z.EncBinary()
					_ = yym1259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1257[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1260 := z.EncBinary()
					_ = yym1260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1257 || yy2arr1257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1262 := z.EncBinary()
				_ = yym1262
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1263 := z.EncBinary()
				_ = yym1263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1257 || yy2arr1257 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1264 := z.DecBinary()
	_ = yym1264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1265 := r.ContainerType()
		if yyct1265 == codecSelferValueTypeMap1234 {
			yyl1265 := r.ReadMapStart()
			if yyl1265 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1265, d)
			}
		} else if yyct1265 == codecSelferValueTypeArray1234 {
			yyl1265 := r.ReadArrayStart()
			if yyl1265 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1266Slc
	var yyhl1266 bool = l >= 0
	for yyj1266 := 0; ; yyj1266++ {
		if yyhl1266 {
			if yyj1266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1266Slc = r.DecodeBytes(yys1266Slc, true, true)
		yys1266 := string(yys1266Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1266 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1266)
		} // end switch yys1266
	} // end for yyj1266
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1269 int
	var yyb1269 bool
	var yyhl1269 bool = l >= 0
	yyj1269++
	if yyhl1269 {
		yyb1269 = yyj1269 > l
	} else {
		yyb1269 = r.CheckBreak()
	}
	if yyb1269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1269++
	if yyhl1269 {
		yyb1269 = yyj1269 > l
	} else {
		yyb1269 = r.CheckBreak()
	}
	if yyb1269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1269++
		if yyhl1269 {
			yyb1269 = yyj1269 > l
		} else {
			yyb1269 = r.CheckBreak()
		}
		if yyb1269 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1269-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1272 := z.EncBinary()
		_ = yym1272
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1273 := !z.EncBinary()
			yy2arr1273 := z.EncBasicHandle().StructToArray
			var yyq1273 [3]bool
			_, _, _ = yysep1273, yyq1273, yy2arr1273
			const yyr1273 bool = false
			yyq1273[0] = x.ContainerName != ""
			yyq1273[2] = true
			var yynn1273 int
			if yyr1273 || yy2arr1273 {
				r.EncodeArrayStart(3)
			} else {
				yynn1273 = 1
				for _, b := range yyq1273 {
					if b {
						yynn1273++
					}
				}
				r.EncodeMapStart(yynn1273)
				yynn1273 = 0
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1273[0] {
					yym1275 := z.EncBinary()
					_ = yym1275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1273[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1278 := z.EncBinary()
				_ = yym1278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1279 := z.EncBinary()
				_ = yym1279
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1273[2] {
					yy1281 := &x.Divisor
					yym1282 := z.EncBinary()
					_ = yym1282
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1281) {
					} else if !yym1282 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1281)
					} else {
						z.EncFallback(yy1281)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1273[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1283 := &x.Divisor
					yym1284 := z.EncBinary()
					_ = yym1284
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1283) {
					} else if !yym1284 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1283)
					} else {
						z.EncFallback(yy1283)
					}
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1285 := z.DecBinary()
	_ = yym1285
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1286 := r.ContainerType()
		if yyct1286 == codecSelferValueTypeMap1234 {
			yyl1286 := r.ReadMapStart()
			if yyl1286 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1286, d)
			}
		} else if yyct1286 == codecSelferValueTypeArray1234 {
			yyl1286 := r.ReadArrayStart()
			if yyl1286 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1286, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1287Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1287Slc
	var yyhl1287 bool = l >= 0
	for yyj1287 := 0; ; yyj1287++ {
		if yyhl1287 {
			if yyj1287 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1287Slc = r.DecodeBytes(yys1287Slc, true, true)
		yys1287 := string(yys1287Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1287 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1290 := &x.Divisor
				yym1291 := z.DecBinary()
				_ = yym1291
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1290) {
				} else if !yym1291 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1290)
				} else {
					z.DecFallback(yyv1290, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1287)
		} // end switch yys1287
	} // end for yyj1287
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1292 int
	var yyb1292 bool
	var yyhl1292 bool = l >= 0
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1295 := &x.Divisor
		yym1296 := z.DecBinary()
		_ = yym1296
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1295) {
		} else if !yym1296 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1295)
		} else {
			z.DecFallback(yyv1295, false)
		}
	}
	for {
		yyj1292++
		if yyhl1292 {
			yyb1292 = yyj1292 > l
		} else {
			yyb1292 = r.CheckBreak()
		}
		if yyb1292 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1292-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1297 := z.EncBinary()
		_ = yym1297
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1298 := !z.EncBinary()
			yy2arr1298 := z.EncBasicHandle().StructToArray
			var yyq1298 [2]bool
			_, _, _ = yysep1298, yyq1298, yy2arr1298
			const yyr1298 bool = false
			yyq1298[0] = x.Name != ""
			var yynn1298 int
			if yyr1298 || yy2arr1298 {
				r.EncodeArrayStart(2)
			} else {
				yynn1298 = 1
				for _, b := range yyq1298 {
					if b {
						yynn1298++
					}
				}
				r.EncodeMapStart(yynn1298)
				yynn1298 = 0
			}
			if yyr1298 || yy2arr1298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1298[0] {
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1298[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1301 := z.EncBinary()
					_ = yym1301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1298 || yy2arr1298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1303 := z.EncBinary()
				_ = yym1303
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1304 := z.EncBinary()
				_ = yym1304
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1298 || yy2arr1298 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1305 := z.DecBinary()
	_ = yym1305
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1306 := r.ContainerType()
		if yyct1306 == codecSelferValueTypeMap1234 {
			yyl1306 := r.ReadMapStart()
			if yyl1306 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1306, d)
			}
		} else if yyct1306 == codecSelferValueTypeArray1234 {
			yyl1306 := r.ReadArrayStart()
			if yyl1306 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1306, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1307Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1307Slc
	var yyhl1307 bool = l >= 0
	for yyj1307 := 0; ; yyj1307++ {
		if yyhl1307 {
			if yyj1307 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1307Slc = r.DecodeBytes(yys1307Slc, true, true)
		yys1307 := string(yys1307Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1307 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1307)
		} // end switch yys1307
	} // end for yyj1307
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1310 int
	var yyb1310 bool
	var yyhl1310 bool = l >= 0
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1310++
		if yyhl1310 {
			yyb1310 = yyj1310 > l
		} else {
			yyb1310 = r.CheckBreak()
		}
		if yyb1310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1313 := z.EncBinary()
		_ = yym1313
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1314 := !z.EncBinary()
			yy2arr1314 := z.EncBasicHandle().StructToArray
			var yyq1314 [2]bool
			_, _, _ = yysep1314, yyq1314, yy2arr1314
			const yyr1314 bool = false
			yyq1314[0] = x.Name != ""
			var yynn1314 int
			if yyr1314 || yy2arr1314 {
				r.EncodeArrayStart(2)
			} else {
				yynn1314 = 1
				for _, b := range yyq1314 {
					if b {
						yynn1314++
					}
				}
				r.EncodeMapStart(yynn1314)
				yynn1314 = 0
			}
			if yyr1314 || yy2arr1314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1314[0] {
					yym1316 := z.EncBinary()
					_ = yym1316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1314[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1317 := z.EncBinary()
					_ = yym1317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1314 || yy2arr1314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1319 := z.EncBinary()
				_ = yym1319
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1320 := z.EncBinary()
				_ = yym1320
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1314 || yy2arr1314 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1321 := z.DecBinary()
	_ = yym1321
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1322 := r.ContainerType()
		if yyct1322 == codecSelferValueTypeMap1234 {
			yyl1322 := r.ReadMapStart()
			if yyl1322 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1322, d)
			}
		} else if yyct1322 == codecSelferValueTypeArray1234 {
			yyl1322 := r.ReadArrayStart()
			if yyl1322 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1322, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1323Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1323Slc
	var yyhl1323 bool = l >= 0
	for yyj1323 := 0; ; yyj1323++ {
		if yyhl1323 {
			if yyj1323 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1323Slc = r.DecodeBytes(yys1323Slc, true, true)
		yys1323 := string(yys1323Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1323 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1323)
		} // end switch yys1323
	} // end for yyj1323
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1326 int
	var yyb1326 bool
	var yyhl1326 bool = l >= 0
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1326++
		if yyhl1326 {
			yyb1326 = yyj1326 > l
		} else {
			yyb1326 = r.CheckBreak()
		}
		if yyb1326 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1326-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvFromSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1329 := z.EncBinary()
		_ = yym1329
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1330 := !z.EncBinary()
			yy2arr1330 := z.EncBasicHandle().StructToArray
			var yyq1330 [2]bool
			_, _, _ = yysep1330, yyq1330, yy2arr1330
			const yyr1330 bool = false
			yyq1330[0] = x.Prefix != ""
			yyq1330[1] = x.ConfigMapRef != nil
			var yynn1330 int
			if yyr1330 || yy2arr1330 {
				r.EncodeArrayStart(2)
			} else {
				yynn1330 = 0
				for _, b := range yyq1330 {
					if b {
						yynn1330++
					}
				}
				r.EncodeMapStart(yynn1330)
				yynn1330 = 0
			}
			if yyr1330 || yy2arr1330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1330[0] {
					yym1332 := z.EncBinary()
					_ = yym1332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Prefix))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1330[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("prefix"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1333 := z.EncBinary()
					_ = yym1333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Prefix))
					}
				}
			}
			if yyr1330 || yy2arr1330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1330[1] {
					if x.ConfigMapRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1330[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1330 || yy2arr1330 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvFromSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1335 := z.DecBinary()
	_ = yym1335
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1336 := r.ContainerType()
		if yyct1336 == codecSelferValueTypeMap1234 {
			yyl1336 := r.ReadMapStart()
			if yyl1336 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1336, d)
			}
		} else if yyct1336 == codecSelferValueTypeArray1234 {
			yyl1336 := r.ReadArrayStart()
			if yyl1336 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1336, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvFromSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1337Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1337Slc
	var yyhl1337 bool = l >= 0
	for yyj1337 := 0; ; yyj1337++ {
		if yyhl1337 {
			if yyj1337 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1337Slc = r.DecodeBytes(yys1337Slc, true, true)
		yys1337 := string(yys1337Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1337 {
		case "prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				x.Prefix = string(r.DecodeString())
			}
		case "configMapRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapRef != nil {
					x.ConfigMapRef = nil
				}
			} else {
				if x.ConfigMapRef == nil {
					x.ConfigMapRef = new(ConfigMapEnvSource)
				}
				x.ConfigMapRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1337)
		} // end switch yys1337
	} // end for yyj1337
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvFromSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1340 int
	var yyb1340 bool
	var yyhl1340 bool = l >= 0
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		x.Prefix = string(r.DecodeString())
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapRef != nil {
			x.ConfigMapRef = nil
		}
	} else {
		if x.ConfigMapRef == nil {
			x.ConfigMapRef = new(ConfigMapEnvSource)
		}
		x.ConfigMapRef.CodecDecodeSelf(d)
	}
	for {
		yyj1340++
		if yyhl1340 {
			yyb1340 = yyj1340 > l
		} else {
			yyb1340 = r.CheckBreak()
		}
		if yyb1340 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1340-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapEnvSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1343 := z.EncBinary()
		_ = yym1343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1344 := !z.EncBinary()
			yy2arr1344 := z.EncBasicHandle().StructToArray
			var yyq1344 [1]bool
			_, _, _ = yysep1344, yyq1344, yy2arr1344
			const yyr1344 bool = false
			yyq1344[0] = x.Name != ""
			var yynn1344 int
			if yyr1344 || yy2arr1344 {
				r.EncodeArrayStart(1)
			} else {
				yynn1344 = 0
				for _, b := range yyq1344 {
					if b {
						yynn1344++
					}
				}
				r.EncodeMapStart(yynn1344)
				yynn1344 = 0
			}
			if yyr1344 || yy2arr1344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1344[0] {
					yym1346 := z.EncBinary()
					_ = yym1346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1347 := z.EncBinary()
					_ = yym1347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapEnvSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1348 := z.DecBinary()
	_ = yym1348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1349 := r.ContainerType()
		if yyct1349 == codecSelferValueTypeMap1234 {
			yyl1349 := r.ReadMapStart()
			if yyl1349 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1349, d)
			}
		} else if yyct1349 == codecSelferValueTypeArray1234 {
			yyl1349 := r.ReadArrayStart()
			if yyl1349 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1349, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapEnvSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1350Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1350Slc
	var yyhl1350 bool = l >= 0
	for yyj1350 := 0; ; yyj1350++ {
		if yyhl1350 {
			if yyj1350 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1350Slc = r.DecodeBytes(yys1350Slc, true, true)
		yys1350 := string(yys1350Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1350 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1350)
		} // end switch yys1350
	} // end for yyj1350
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapEnvSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1352 int
	var yyb1352 bool
	var yyhl1352 bool = l >= 0
	yyj1352++
	if yyhl1352 {
		yyb1352 = yyj1352 > l
	} else {
		yyb1352 = r.CheckBreak()
	}
	if yyb1352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj1352++
		if yyhl1352 {
			yyb1352 = yyj1352 > l
		} else {
			yyb1352 = r.CheckBreak()
		}
		if yyb1352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1354 := z.EncBinary()
		_ = yym1354
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1355 := !z.EncBinary()
			yy2arr1355 := z.EncBasicHandle().StructToArray
			var yyq1355 [2]bool
			_, _, _ = yysep1355, yyq1355, yy2arr1355
			const yyr1355 bool = false
			var yynn1355 int
			if yyr1355 || yy2arr1355 {
				r.EncodeArrayStart(2)
			} else {
				yynn1355 = 2
				for _, b := range yyq1355 {
					if b {
						yynn1355++
					}
				}
				r.EncodeMapStart(yynn1355)
				yynn1355 = 0
			}
			if yyr1355 || yy2arr1355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1357 := z.EncBinary()
				_ = yym1357
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1358 := z.EncBinary()
				_ = yym1358
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1355 || yy2arr1355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1360 := z.EncBinary()
				_ = yym1360
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1361 := z.EncBinary()
				_ = yym1361
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1355 || yy2arr1355 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1362 := z.DecBinary()
	_ = yym1362
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1363 := r.ContainerType()
		if yyct1363 == codecSelferValueTypeMap1234 {
			yyl1363 := r.ReadMapStart()
			if yyl1363 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1363, d)
			}
		} else if yyct1363 == codecSelferValueTypeArray1234 {
			yyl1363 := r.ReadArrayStart()
			if yyl1363 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1363, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1364Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1364Slc
	var yyhl1364 bool = l >= 0
	for yyj1364 := 0; ; yyj1364++ {
		if yyhl1364 {
			if yyj1364 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1364Slc = r.DecodeBytes(yys1364Slc, true, true)
		yys1364 := string(yys1364Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1364 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1364)
		} // end switch yys1364
	} // end for yyj1364
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1367 int
	var yyb1367 bool
	var yyhl1367 bool = l >= 0
	yyj1367++
	if yyhl1367 {
		yyb1367 = yyj1367 > l
	} else {
		yyb1367 = r.CheckBreak()
	}
	if yyb1367 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1367++
	if yyhl1367 {
		yyb1367 = yyj1367 > l
	} else {
		yyb1367 = r.CheckBreak()
	}
	if yyb1367 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1367++
		if yyhl1367 {
			yyb1367 = yyj1367 > l
		} else {
			yyb1367 = r.CheckBreak()
		}
		if yyb1367 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1367-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1370 := z.EncBinary()
		_ = yym1370
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1371 := !z.EncBinary()
			yy2arr1371 := z.EncBasicHandle().StructToArray
			var yyq1371 [5]bool
			_, _, _ = yysep1371, yyq1371, yy2arr1371
			const yyr1371 bool = false
			yyq1371[0] = x.Path != ""
			yyq1371[2] = x.Host != ""
			yyq1371[3] = x.Scheme != ""
			yyq1371[4] = len(x.HTTPHeaders) != 0
			var yynn1371 int
			if yyr1371 || yy2arr1371 {
				r.EncodeArrayStart(5)
			} else {
				yynn1371 = 1
				for _, b := range yyq1371 {
					if b {
						yynn1371++
					}
				}
				r.EncodeMapStart(yynn1371)
				yynn1371 = 0
			}
			if yyr1371 || yy2arr1371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1371[0] {
					yym1373 := z.EncBinary()
					_ = yym1373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1371[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1371 || yy2arr1371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1376 := &x.Port
				yym1377 := z.EncBinary()
				_ = yym1377
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1376) {
				} else if !yym1377 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1376)
				} else {
					z.EncFallback(yy1376)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1378 := &x.Port
				yym1379 := z.EncBinary()
				_ = yym1379
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1378) {
				} else if !yym1379 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1378)
				} else {
					z.EncFallback(yy1378)
				}
			}
			if yyr1371 || yy2arr1371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1371[2] {
					yym1381 := z.EncBinary()
					_ = yym1381
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1371[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1371 || yy2arr1371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1371[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1371[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1371 || yy2arr1371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1371[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1385 := z.EncBinary()
						_ = yym1385
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1371[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1386 := z.EncBinary()
						_ = yym1386
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1371 || yy2arr1371 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1387 := z.DecBinary()
	_ = yym1387
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1388 := r.ContainerType()
		if yyct1388 == codecSelferValueTypeMap1234 {
			yyl1388 := r.ReadMapStart()
			if yyl1388 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1388, d)
			}
		} else if yyct1388 == codecSelferValueTypeArray1234 {
			yyl1388 := r.ReadArrayStart()
			if yyl1388 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1388, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1389Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1389Slc
	var yyhl1389 bool = l >= 0
	for yyj1389 := 0; ; yyj1389++ {
		if yyhl1389 {
			if yyj1389 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1389Slc = r.DecodeBytes(yys1389Slc, true, true)
		yys1389 := string(yys1389Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1389 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1391 := &x.Port
				yym1392 := z.DecBinary()
				_ = yym1392
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1391) {
				} else if !yym1392 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1391)
				} else {
					z.DecFallback(yyv1391, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1395 := &x.HTTPHeaders
				yym1396 := z.DecBinary()
				_ = yym1396
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1395), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1389)
		} // end switch yys1389
	} // end for yyj1389
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1397 int
	var yyb1397 bool
	var yyhl1397 bool = l >= 0
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1399 := &x.Port
		yym1400 := z.DecBinary()
		_ = yym1400
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1399) {
		} else if !yym1400 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1399)
		} else {
			z.DecFallback(yyv1399, false)
		}
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1403 := &x.HTTPHeaders
		yym1404 := z.DecBinary()
		_ = yym1404
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1403), d)
		}
	}
	for {
		yyj1397++
		if yyhl1397 {
			yyb1397 = yyj1397 > l
		} else {
			yyb1397 = r.CheckBreak()
		}
		if yyb1397 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1397-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1405 := z.EncBinary()
	_ = yym1405
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1406 := z.DecBinary()
	_ = yym1406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1407 := z.EncBinary()
		_ = yym1407
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1408 := !z.EncBinary()
			yy2arr1408 := z.EncBasicHandle().StructToArray
			var yyq1408 [1]bool
			_, _, _ = yysep1408, yyq1408, yy2arr1408
			const yyr1408 bool = false
			var yynn1408 int
			if yyr1408 || yy2arr1408 {
				r.EncodeArrayStart(1)
			} else {
				yynn1408 = 1
				for _, b := range yyq1408 {
					if b {
						yynn1408++
					}
				}
				r.EncodeMapStart(yynn1408)
				yynn1408 = 0
			}
			if yyr1408 || yy2arr1408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1410 := &x.Port
				yym1411 := z.EncBinary()
				_ = yym1411
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1410) {
				} else if !yym1411 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1410)
				} else {
					z.EncFallback(yy1410)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1412 := &x.Port
				yym1413 := z.EncBinary()
				_ = yym1413
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1412) {
				} else if !yym1413 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1412)
				} else {
					z.EncFallback(yy1412)
				}
			}
			if yyr1408 || yy2arr1408 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1414 := z.DecBinary()
	_ = yym1414
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1415 := r.ContainerType()
		if yyct1415 == codecSelferValueTypeMap1234 {
			yyl1415 := r.ReadMapStart()
			if yyl1415 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1415, d)
			}
		} else if yyct1415 == codecSelferValueTypeArray1234 {
			yyl1415 := r.ReadArrayStart()
			if yyl1415 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1415, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1416Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1416Slc
	var yyhl1416 bool = l >= 0
	for yyj1416 := 0; ; yyj1416++ {
		if yyhl1416 {
			if yyj1416 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1416Slc = r.DecodeBytes(yys1416Slc, true, true)
		yys1416 := string(yys1416Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1416 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1417 := &x.Port
				yym1418 := z.DecBinary()
				_ = yym1418
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1417) {
				} else if !yym1418 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1417)
				} else {
					z.DecFallback(yyv1417, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1416)
		} // end switch yys1416
	} // end for yyj1416
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1419 int
	var yyb1419 bool
	var yyhl1419 bool = l >= 0
	yyj1419++
	if yyhl1419 {
		yyb1419 = yyj1419 > l
	} else {
		yyb1419 = r.CheckBreak()
	}
	if yyb1419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1420 := &x.Port
		yym1421 := z.DecBinary()
		_ = yym1421
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1420) {
		} else if !yym1421 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1420)
		} else {
			z.DecFallback(yyv1420, false)
		}
	}
	for {
		yyj1419++
		if yyhl1419 {
			yyb1419 = yyj1419 > l
		} else {
			yyb1419 = r.CheckBreak()
		}
		if yyb1419 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1419-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1422 := z.EncBinary()
		_ = yym1422
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1423 := !z.EncBinary()
			yy2arr1423 := z.EncBasicHandle().StructToArray
			var yyq1423 [1]bool
			_, _, _ = yysep1423, yyq1423, yy2arr1423
			const yyr1423 bool = false
			yyq1423[0] = len(x.Command) != 0
			var yynn1423 int
			if yyr1423 || yy2arr1423 {
				r.EncodeArrayStart(1)
			} else {
				yynn1423 = 0
				for _, b := range yyq1423 {
					if b {
						yynn1423++
					}
				}
				r.EncodeMapStart(yynn1423)
				yynn1423 = 0
			}
			if yyr1423 || yy2arr1423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1423[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1425 := z.EncBinary()
						_ = yym1425
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1423[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1426 := z.EncBinary()
						_ = yym1426
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1423 || yy2arr1423 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1427 := z.DecBinary()
	_ = yym1427
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1428 := r.ContainerType()
		if yyct1428 == codecSelferValueTypeMap1234 {
			yyl1428 := r.ReadMapStart()
			if yyl1428 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1428, d)
			}
		} else if yyct1428 == codecSelferValueTypeArray1234 {
			yyl1428 := r.ReadArrayStart()
			if yyl1428 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1428, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1429Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1429Slc
	var yyhl1429 bool = l >= 0
	for yyj1429 := 0; ; yyj1429++ {
		if yyhl1429 {
			if yyj1429 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1429Slc = r.DecodeBytes(yys1429Slc, true, true)
		yys1429 := string(yys1429Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1429 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1430 := &x.Command
				yym1431 := z.DecBinary()
				_ = yym1431
				if false {
				} else {
					z.F.DecSliceStringX(yyv1430, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1429)
		} // end switch yys1429
	} // end for yyj1429
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1432 int
	var yyb1432 bool
	var yyhl1432 bool = l >= 0
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1433 := &x.Command
		yym1434 := z.DecBinary()
		_ = yym1434
		if false {
		} else {
			z.F.DecSliceStringX(yyv1433, false, d)
		}
	}
	for {
		yyj1432++
		if yyhl1432 {
			yyb1432 = yyj1432 > l
		} else {
			yyb1432 = r.CheckBreak()
		}
		if yyb1432 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1432-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1435 := z.EncBinary()
		_ = yym1435
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1436 := !z.EncBinary()
			yy2arr1436 := z.EncBasicHandle().StructToArray
			var yyq1436 [8]bool
			_, _, _ = yysep1436, yyq1436, yy2arr1436
			const yyr1436 bool = false
			yyq1436[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1436[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1436[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1436[3] = x.InitialDelaySeconds != 0
			yyq1436[4] = x.TimeoutSeconds != 0
			yyq1436[5] = x.PeriodSeconds != 0
			yyq1436[6] = x.SuccessThreshold != 0
			yyq1436[7] = x.FailureThreshold != 0
			var yynn1436 int
			if yyr1436 || yy2arr1436 {
				r.EncodeArrayStart(8)
			} else {
				yynn1436 = 0
				for _, b := range yyq1436 {
					if b {
						yynn1436++
					}
				}
				r.EncodeMapStart(yynn1436)
				yynn1436 = 0
			}
			var yyn1437 bool
			if x.Handler.Exec == nil {
				yyn1437 = true
				goto LABEL1437
			}
		LABEL1437:
			if yyr1436 || yy2arr1436 {
				if yyn1437 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1436[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1436[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1437 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1438 bool
			if x.Handler.HTTPGet == nil {
				yyn1438 = true
				goto LABEL1438
			}
		LABEL1438:
			if yyr1436 || yy2arr1436 {
				if yyn1438 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1436[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1436[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1438 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1439 bool
			if x.Handler.TCPSocket == nil {
				yyn1439 = true
				goto LABEL1439
			}
		LABEL1439:
			if yyr1436 || yy2arr1436 {
				if yyn1439 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1436[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1436[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1439 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1436[3] {
					yym1441 := z.EncBinary()
					_ = yym1441
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1436[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1442 := z.EncBinary()
					_ = yym1442
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1436[4] {
					yym1444 := z.EncBinary()
					_ = yym1444
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1436[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1445 := z.EncBinary()
					_ = yym1445
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1436[5] {
					yym1447 := z.EncBinary()
					_ = yym1447
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1436[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1448 := z.EncBinary()
					_ = yym1448
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1436[6] {
					yym1450 := z.EncBinary()
					_ = yym1450
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1436[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1451 := z.EncBinary()
					_ = yym1451
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1436[7] {
					yym1453 := z.EncBinary()
					_ = yym1453
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1436[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1454 := z.EncBinary()
					_ = yym1454
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1455 := z.DecBinary()
	_ = yym1455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1456 := r.ContainerType()
		if yyct1456 == codecSelferValueTypeMap1234 {
			yyl1456 := r.ReadMapStart()
			if yyl1456 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1456, d)
			}
		} else if yyct1456 == codecSelferValueTypeArray1234 {
			yyl1456 := r.ReadArrayStart()
			if yyl1456 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1456, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1457Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1457Slc
	var yyhl1457 bool = l >= 0
	for yyj1457 := 0; ; yyj1457++ {
		if yyhl1457 {
			if yyj1457 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1457Slc = r.DecodeBytes(yys1457Slc, true, true)
		yys1457 := string(yys1457Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1457 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1457)
		} // end switch yys1457
	} // end for yyj1457
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1466 int
	var yyb1466 bool
	var yyhl1466 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1466++
	if yyhl1466 {
		yyb1466 = yyj1466 > l
	} else {
		yyb1466 = r.CheckBreak()
	}
	if yyb1466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1466++
	if yyhl1466 {
		yyb1466 = yyj1466 > l
	} else {
		yyb1466 = r.CheckBreak()
	}
	if yyb1466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1466++
	if yyhl1466 {
		yyb1466 = yyj1466 > l
	} else {
		yyb1466 = r.CheckBreak()
	}
	if yyb1466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1466++
	if yyhl1466 {
		yyb1466 = yyj1466 > l
	} else {
		yyb1466 = r.CheckBreak()
	}
	if yyb1466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1466++
	if yyhl1466 {
		yyb1466 = yyj1466 > l
	} else {
		yyb1466 = r.CheckBreak()
	}
	if yyb1466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1466++
	if yyhl1466 {
		yyb1466 = yyj1466 > l
	} else {
		yyb1466 = r.CheckBreak()
	}
	if yyb1466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1466++
	if yyhl1466 {
		yyb1466 = yyj1466 > l
	} else {
		yyb1466 = r.CheckBreak()
	}
	if yyb1466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1466++
	if yyhl1466 {
		yyb1466 = yyj1466 > l
	} else {
		yyb1466 = r.CheckBreak()
	}
	if yyb1466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1466++
		if yyhl1466 {
			yyb1466 = yyj1466 > l
		} else {
			yyb1466 = r.CheckBreak()
		}
		if yyb1466 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1466-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1475 := z.EncBinary()
	_ = yym1475
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1476 := z.DecBinary()
	_ = yym1476
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1477 := z.EncBinary()
	_ = yym1477
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1478 := z.DecBinary()
	_ = yym1478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1479 := z.EncBinary()
		_ = yym1479
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1480 := !z.EncBinary()
			yy2arr1480 := z.EncBasicHandle().StructToArray
			var yyq1480 [2]bool
			_, _, _ = yysep1480, yyq1480, yy2arr1480
			const yyr1480 bool = false
			yyq1480[0] = len(x.Add) != 0
			yyq1480[1] = len(x.Drop) != 0
			var yynn1480 int
			if yyr1480 || yy2arr1480 {
				r.EncodeArrayStart(2)
			} else {
				yynn1480 = 0
				for _, b := range yyq1480 {
					if b {
						yynn1480++
					}
				}
				r.EncodeMapStart(yynn1480)
				yynn1480 = 0
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1480[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1482 := z.EncBinary()
						_ = yym1482
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1480[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1483 := z.EncBinary()
						_ = yym1483
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1480[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1485 := z.EncBinary()
						_ = yym1485
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1480[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1486 := z.EncBinary()
						_ = yym1486
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1487 := z.DecBinary()
	_ = yym1487
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1488 := r.ContainerType()
		if yyct1488 == codecSelferValueTypeMap1234 {
			yyl1488 := r.ReadMapStart()
			if yyl1488 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1488, d)
			}
		} else if yyct1488 == codecSelferValueTypeArray1234 {
			yyl1488 := r.ReadArrayStart()
			if yyl1488 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1488, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1489Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1489Slc
	var yyhl1489 bool = l >= 0
	for yyj1489 := 0; ; yyj1489++ {
		if yyhl1489 {
			if yyj1489 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1489Slc = r.DecodeBytes(yys1489Slc, true, true)
		yys1489 := string(yys1489Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1489 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1490 := &x.Add
				yym1491 := z.DecBinary()
				_ = yym1491
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1490), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1492 := &x.Drop
				yym1493 := z.DecBinary()
				_ = yym1493
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1492), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1489)
		} // end switch yys1489
	} // end for yyj1489
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1494 int
	var yyb1494 bool
	var yyhl1494 bool = l >= 0
	yyj1494++
	if yyhl1494 {
		yyb1494 = yyj1494 > l
	} else {
		yyb1494 = r.CheckBreak()
	}
	if yyb1494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1495 := &x.Add
		yym1496 := z.DecBinary()
		_ = yym1496
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1495), d)
		}
	}
	yyj1494++
	if yyhl1494 {
		yyb1494 = yyj1494 > l
	} else {
		yyb1494 = r.CheckBreak()
	}
	if yyb1494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1497 := &x.Drop
		yym1498 := z.DecBinary()
		_ = yym1498
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1497), d)
		}
	}
	for {
		yyj1494++
		if yyhl1494 {
			yyb1494 = yyj1494 > l
		} else {
			yyb1494 = r.CheckBreak()
		}
		if yyb1494 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1494-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1499 := z.EncBinary()
		_ = yym1499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1500 := !z.EncBinary()
			yy2arr1500 := z.EncBasicHandle().StructToArray
			var yyq1500 [2]bool
			_, _, _ = yysep1500, yyq1500, yy2arr1500
			const yyr1500 bool = false
			yyq1500[0] = len(x.Limits) != 0
			yyq1500[1] = len(x.Requests) != 0
			var yynn1500 int
			if yyr1500 || yy2arr1500 {
				r.EncodeArrayStart(2)
			} else {
				yynn1500 = 0
				for _, b := range yyq1500 {
					if b {
						yynn1500++
					}
				}
				r.EncodeMapStart(yynn1500)
				yynn1500 = 0
			}
			if yyr1500 || yy2arr1500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1500[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1500[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1500 || yy2arr1500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1500[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1500[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1500 || yy2arr1500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1503 := z.DecBinary()
	_ = yym1503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1504 := r.ContainerType()
		if yyct1504 == codecSelferValueTypeMap1234 {
			yyl1504 := r.ReadMapStart()
			if yyl1504 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1504, d)
			}
		} else if yyct1504 == codecSelferValueTypeArray1234 {
			yyl1504 := r.ReadArrayStart()
			if yyl1504 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1504, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1505Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1505Slc
	var yyhl1505 bool = l >= 0
	for yyj1505 := 0; ; yyj1505++ {
		if yyhl1505 {
			if yyj1505 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1505Slc = r.DecodeBytes(yys1505Slc, true, true)
		yys1505 := string(yys1505Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1505 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1506 := &x.Limits
				yyv1506.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1507 := &x.Requests
				yyv1507.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1505)
		} // end switch yys1505
	} // end for yyj1505
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1508 int
	var yyb1508 bool
	var yyhl1508 bool = l >= 0
	yyj1508++
	if yyhl1508 {
		yyb1508 = yyj1508 > l
	} else {
		yyb1508 = r.CheckBreak()
	}
	if yyb1508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1509 := &x.Limits
		yyv1509.CodecDecodeSelf(d)
	}
	yyj1508++
	if yyhl1508 {
		yyb1508 = yyj1508 > l
	} else {
		yyb1508 = r.CheckBreak()
	}
	if yyb1508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1510 := &x.Requests
		yyv1510.CodecDecodeSelf(d)
	}
	for {
		yyj1508++
		if yyhl1508 {
			yyb1508 = yyj1508 > l
		} else {
			yyb1508 = r.CheckBreak()
		}
		if yyb1508 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1508-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1511 := z.EncBinary()
		_ = yym1511
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1512 := !z.EncBinary()
			yy2arr1512 := z.EncBasicHandle().StructToArray
			var yyq1512 [19]bool
			_, _, _ = yysep1512, yyq1512, yy2arr1512
			const yyr1512 bool = false
			yyq1512[1] = x.Image != ""
			yyq1512[2] = len(x.Command) != 0
			yyq1512[3] = len(x.Args) != 0
			yyq1512[4] = x.WorkingDir != ""
			yyq1512[5] = len(x.Ports) != 0
			yyq1512[6] = len(x.EnvFrom) != 0
			yyq1512[7] = len(x.Env) != 0
			yyq1512[8] = true
			yyq1512[9] = len(x.VolumeMounts) != 0
			yyq1512[10] = x.LivenessProbe != nil
			yyq1512[11] = x.ReadinessProbe != nil
			yyq1512[12] = x.Lifecycle != nil
			yyq1512[13] = x.TerminationMessagePath != ""
			yyq1512[14] = x.ImagePullPolicy != ""
			yyq1512[15] = x.SecurityContext != nil
			yyq1512[16] = x.Stdin != false
			yyq1512[17] = x.StdinOnce != false
			yyq1512[18] = x.TTY != false
			var yynn1512 int
			if yyr1512 || yy2arr1512 {
				r.EncodeArrayStart(19)
			} else {
				yynn1512 = 1
				for _, b := range yyq1512 {
					if b {
						yynn1512++
					}
				}
				r.EncodeMapStart(yynn1512)
				yynn1512 = 0
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1514 := z.EncBinary()
				_ = yym1514
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1515 := z.EncBinary()
				_ = yym1515
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[1] {
					yym1517 := z.EncBinary()
					_ = yym1517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1512[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1518 := z.EncBinary()
					_ = yym1518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1520 := z.EncBinary()
						_ = yym1520
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1521 := z.EncBinary()
						_ = yym1521
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1523 := z.EncBinary()
						_ = yym1523
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1524 := z.EncBinary()
						_ = yym1524
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[4] {
					yym1526 := z.EncBinary()
					_ = yym1526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1512[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1527 := z.EncBinary()
					_ = yym1527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1529 := z.EncBinary()
						_ = yym1529
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1530 := z.EncBinary()
						_ = yym1530
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[6] {
					if x.EnvFrom == nil {
						r.EncodeNil()
					} else {
						yym1532 := z.EncBinary()
						_ = yym1532
						if false {
						} else {
							h.encSliceEnvFromSource(([]EnvFromSource)(x.EnvFrom), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("envFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EnvFrom == nil {
						r.EncodeNil()
					} else {
						yym1533 := z.EncBinary()
						_ = yym1533
						if false {
						} else {
							h.encSliceEnvFromSource(([]EnvFromSource)(x.EnvFrom), e)
						}
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[7] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1535 := z.EncBinary()
						_ = yym1535
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1536 := z.EncBinary()
						_ = yym1536
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[8] {
					yy1538 := &x.Resources
					yy1538.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1539 := &x.Resources
					yy1539.CodecEncodeSelf(e)
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[9] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1541 := z.EncBinary()
						_ = yym1541
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1542 := z.EncBinary()
						_ = yym1542
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[10] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[11] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[12] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[13] {
					yym1547 := z.EncBinary()
					_ = yym1547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1512[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1548 := z.EncBinary()
					_ = yym1548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[14] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1512[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[15] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[16] {
					yym1552 := z.EncBinary()
					_ = yym1552
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1512[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1553 := z.EncBinary()
					_ = yym1553
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[17] {
					yym1555 := z.EncBinary()
					_ = yym1555
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1512[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1556 := z.EncBinary()
					_ = yym1556
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[18] {
					yym1558 := z.EncBinary()
					_ = yym1558
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1512[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1559 := z.EncBinary()
					_ = yym1559
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1560 := z.DecBinary()
	_ = yym1560
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1561 := r.ContainerType()
		if yyct1561 == codecSelferValueTypeMap1234 {
			yyl1561 := r.ReadMapStart()
			if yyl1561 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1561, d)
			}
		} else if yyct1561 == codecSelferValueTypeArray1234 {
			yyl1561 := r.ReadArrayStart()
			if yyl1561 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1561, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1562Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1562Slc
	var yyhl1562 bool = l >= 0
	for yyj1562 := 0; ; yyj1562++ {
		if yyhl1562 {
			if yyj1562 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1562Slc = r.DecodeBytes(yys1562Slc, true, true)
		yys1562 := string(yys1562Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1562 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1565 := &x.Command
				yym1566 := z.DecBinary()
				_ = yym1566
				if false {
				} else {
					z.F.DecSliceStringX(yyv1565, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1567 := &x.Args
				yym1568 := z.DecBinary()
				_ = yym1568
				if false {
				} else {
					z.F.DecSliceStringX(yyv1567, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1570 := &x.Ports
				yym1571 := z.DecBinary()
				_ = yym1571
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1570), d)
				}
			}
		case "envFrom":
			if r.TryDecodeAsNil() {
				x.EnvFrom = nil
			} else {
				yyv1572 := &x.EnvFrom
				yym1573 := z.DecBinary()
				_ = yym1573
				if false {
				} else {
					h.decSliceEnvFromSource((*[]EnvFromSource)(yyv1572), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1574 := &x.Env
				yym1575 := z.DecBinary()
				_ = yym1575
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1574), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1576 := &x.Resources
				yyv1576.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1577 := &x.VolumeMounts
				yym1578 := z.DecBinary()
				_ = yym1578
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1577), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1562)
		} // end switch yys1562
	} // end for yyj1562
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1588 int
	var yyb1588 bool
	var yyhl1588 bool = l >= 0
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1591 := &x.Command
		yym1592 := z.DecBinary()
		_ = yym1592
		if false {
		} else {
			z.F.DecSliceStringX(yyv1591, false, d)
		}
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1593 := &x.Args
		yym1594 := z.DecBinary()
		_ = yym1594
		if false {
		} else {
			z.F.DecSliceStringX(yyv1593, false, d)
		}
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1596 := &x.Ports
		yym1597 := z.DecBinary()
		_ = yym1597
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1596), d)
		}
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EnvFrom = nil
	} else {
		yyv1598 := &x.EnvFrom
		yym1599 := z.DecBinary()
		_ = yym1599
		if false {
		} else {
			h.decSliceEnvFromSource((*[]EnvFromSource)(yyv1598), d)
		}
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1600 := &x.Env
		yym1601 := z.DecBinary()
		_ = yym1601
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1600), d)
		}
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1602 := &x.Resources
		yyv1602.CodecDecodeSelf(d)
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1603 := &x.VolumeMounts
		yym1604 := z.DecBinary()
		_ = yym1604
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1603), d)
		}
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1588++
		if yyhl1588 {
			yyb1588 = yyj1588 > l
		} else {
			yyb1588 = r.CheckBreak()
		}
		if yyb1588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1614 := z.EncBinary()
		_ = yym1614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1615 := !z.EncBinary()
			yy2arr1615 := z.EncBasicHandle().StructToArray
			var yyq1615 [3]bool
			_, _, _ = yysep1615, yyq1615, yy2arr1615
			const yyr1615 bool = false
			yyq1615[0] = x.Exec != nil
			yyq1615[1] = x.HTTPGet != nil
			yyq1615[2] = x.TCPSocket != nil
			var yynn1615 int
			if yyr1615 || yy2arr1615 {
				r.EncodeArrayStart(3)
			} else {
				yynn1615 = 0
				for _, b := range yyq1615 {
					if b {
						yynn1615++
					}
				}
				r.EncodeMapStart(yynn1615)
				yynn1615 = 0
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1615[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1615[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1615[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1619 := z.DecBinary()
	_ = yym1619
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1620 := r.ContainerType()
		if yyct1620 == codecSelferValueTypeMap1234 {
			yyl1620 := r.ReadMapStart()
			if yyl1620 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1620, d)
			}
		} else if yyct1620 == codecSelferValueTypeArray1234 {
			yyl1620 := r.ReadArrayStart()
			if yyl1620 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1620, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1621Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1621Slc
	var yyhl1621 bool = l >= 0
	for yyj1621 := 0; ; yyj1621++ {
		if yyhl1621 {
			if yyj1621 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1621Slc = r.DecodeBytes(yys1621Slc, true, true)
		yys1621 := string(yys1621Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1621 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1621)
		} // end switch yys1621
	} // end for yyj1621
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1625 int
	var yyb1625 bool
	var yyhl1625 bool = l >= 0
	yyj1625++
	if yyhl1625 {
		yyb1625 = yyj1625 > l
	} else {
		yyb1625 = r.CheckBreak()
	}
	if yyb1625 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1625++
	if yyhl1625 {
		yyb1625 = yyj1625 > l
	} else {
		yyb1625 = r.CheckBreak()
	}
	if yyb1625 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1625++
	if yyhl1625 {
		yyb1625 = yyj1625 > l
	} else {
		yyb1625 = r.CheckBreak()
	}
	if yyb1625 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1625++
		if yyhl1625 {
			yyb1625 = yyj1625 > l
		} else {
			yyb1625 = r.CheckBreak()
		}
		if yyb1625 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1625-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1629 := z.EncBinary()
		_ = yym1629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1630 := !z.EncBinary()
			yy2arr1630 := z.EncBasicHandle().StructToArray
			var yyq1630 [2]bool
			_, _, _ = yysep1630, yyq1630, yy2arr1630
			const yyr1630 bool = false
			yyq1630[0] = x.PostStart != nil
			yyq1630[1] = x.PreStop != nil
			var yynn1630 int
			if yyr1630 || yy2arr1630 {
				r.EncodeArrayStart(2)
			} else {
				yynn1630 = 0
				for _, b := range yyq1630 {
					if b {
						yynn1630++
					}
				}
				r.EncodeMapStart(yynn1630)
				yynn1630 = 0
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1630[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1630[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1633 := z.DecBinary()
	_ = yym1633
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1634 := r.ContainerType()
		if yyct1634 == codecSelferValueTypeMap1234 {
			yyl1634 := r.ReadMapStart()
			if yyl1634 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1634, d)
			}
		} else if yyct1634 == codecSelferValueTypeArray1234 {
			yyl1634 := r.ReadArrayStart()
			if yyl1634 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1634, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1635Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1635Slc
	var yyhl1635 bool = l >= 0
	for yyj1635 := 0; ; yyj1635++ {
		if yyhl1635 {
			if yyj1635 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1635Slc = r.DecodeBytes(yys1635Slc, true, true)
		yys1635 := string(yys1635Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1635 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1635)
		} // end switch yys1635
	} // end for yyj1635
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1638 int
	var yyb1638 bool
	var yyhl1638 bool = l >= 0
	yyj1638++
	if yyhl1638 {
		yyb1638 = yyj1638 > l
	} else {
		yyb1638 = r.CheckBreak()
	}
	if yyb1638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1638++
	if yyhl1638 {
		yyb1638 = yyj1638 > l
	} else {
		yyb1638 = r.CheckBreak()
	}
	if yyb1638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1638++
		if yyhl1638 {
			yyb1638 = yyj1638 > l
		} else {
			yyb1638 = r.CheckBreak()
		}
		if yyb1638 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1638-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1641 := z.EncBinary()
	_ = yym1641
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1642 := z.DecBinary()
	_ = yym1642
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1643 := z.EncBinary()
		_ = yym1643
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1644 := !z.EncBinary()
			yy2arr1644 := z.EncBasicHandle().StructToArray
			var yyq1644 [2]bool
			_, _, _ = yysep1644, yyq1644, yy2arr1644
			const yyr1644 bool = false
			yyq1644[0] = x.Reason != ""
			yyq1644[1] = x.Message != ""
			var yynn1644 int
			if yyr1644 || yy2arr1644 {
				r.EncodeArrayStart(2)
			} else {
				yynn1644 = 0
				for _, b := range yyq1644 {
					if b {
						yynn1644++
					}
				}
				r.EncodeMapStart(yynn1644)
				yynn1644 = 0
			}
			if yyr1644 || yy2arr1644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1644[0] {
					yym1646 := z.EncBinary()
					_ = yym1646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1644[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1647 := z.EncBinary()
					_ = yym1647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1644 || yy2arr1644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1644[1] {
					yym1649 := z.EncBinary()
					_ = yym1649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1644[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1650 := z.EncBinary()
					_ = yym1650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1644 || yy2arr1644 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1651 := z.DecBinary()
	_ = yym1651
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1652 := r.ContainerType()
		if yyct1652 == codecSelferValueTypeMap1234 {
			yyl1652 := r.ReadMapStart()
			if yyl1652 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1652, d)
			}
		} else if yyct1652 == codecSelferValueTypeArray1234 {
			yyl1652 := r.ReadArrayStart()
			if yyl1652 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1652, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1653Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1653Slc
	var yyhl1653 bool = l >= 0
	for yyj1653 := 0; ; yyj1653++ {
		if yyhl1653 {
			if yyj1653 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1653Slc = r.DecodeBytes(yys1653Slc, true, true)
		yys1653 := string(yys1653Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1653 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1653)
		} // end switch yys1653
	} // end for yyj1653
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1656 int
	var yyb1656 bool
	var yyhl1656 bool = l >= 0
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1656++
		if yyhl1656 {
			yyb1656 = yyj1656 > l
		} else {
			yyb1656 = r.CheckBreak()
		}
		if yyb1656 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1656-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1659 := z.EncBinary()
		_ = yym1659
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1660 := !z.EncBinary()
			yy2arr1660 := z.EncBasicHandle().StructToArray
			var yyq1660 [1]bool
			_, _, _ = yysep1660, yyq1660, yy2arr1660
			const yyr1660 bool = false
			yyq1660[0] = true
			var yynn1660 int
			if yyr1660 || yy2arr1660 {
				r.EncodeArrayStart(1)
			} else {
				yynn1660 = 0
				for _, b := range yyq1660 {
					if b {
						yynn1660++
					}
				}
				r.EncodeMapStart(yynn1660)
				yynn1660 = 0
			}
			if yyr1660 || yy2arr1660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1660[0] {
					yy1662 := &x.StartedAt
					yym1663 := z.EncBinary()
					_ = yym1663
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1662) {
					} else if yym1663 {
						z.EncBinaryMarshal(yy1662)
					} else if !yym1663 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1662)
					} else {
						z.EncFallback(yy1662)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1660[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1664 := &x.StartedAt
					yym1665 := z.EncBinary()
					_ = yym1665
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1664) {
					} else if yym1665 {
						z.EncBinaryMarshal(yy1664)
					} else if !yym1665 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1664)
					} else {
						z.EncFallback(yy1664)
					}
				}
			}
			if yyr1660 || yy2arr1660 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1666 := z.DecBinary()
	_ = yym1666
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1667 := r.ContainerType()
		if yyct1667 == codecSelferValueTypeMap1234 {
			yyl1667 := r.ReadMapStart()
			if yyl1667 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1667, d)
			}
		} else if yyct1667 == codecSelferValueTypeArray1234 {
			yyl1667 := r.ReadArrayStart()
			if yyl1667 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1667, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1668Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1668Slc
	var yyhl1668 bool = l >= 0
	for yyj1668 := 0; ; yyj1668++ {
		if yyhl1668 {
			if yyj1668 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1668Slc = r.DecodeBytes(yys1668Slc, true, true)
		yys1668 := string(yys1668Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1668 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_v1.Time{}
			} else {
				yyv1669 := &x.StartedAt
				yym1670 := z.DecBinary()
				_ = yym1670
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1669) {
				} else if yym1670 {
					z.DecBinaryUnmarshal(yyv1669)
				} else if !yym1670 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1669)
				} else {
					z.DecFallback(yyv1669, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1668)
		} // end switch yys1668
	} // end for yyj1668
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1671 int
	var yyb1671 bool
	var yyhl1671 bool = l >= 0
	yyj1671++
	if yyhl1671 {
		yyb1671 = yyj1671 > l
	} else {
		yyb1671 = r.CheckBreak()
	}
	if yyb1671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_v1.Time{}
	} else {
		yyv1672 := &x.StartedAt
		yym1673 := z.DecBinary()
		_ = yym1673
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1672) {
		} else if yym1673 {
			z.DecBinaryUnmarshal(yyv1672)
		} else if !yym1673 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1672)
		} else {
			z.DecFallback(yyv1672, false)
		}
	}
	for {
		yyj1671++
		if yyhl1671 {
			yyb1671 = yyj1671 > l
		} else {
			yyb1671 = r.CheckBreak()
		}
		if yyb1671 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1671-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1674 := z.EncBinary()
		_ = yym1674
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1675 := !z.EncBinary()
			yy2arr1675 := z.EncBasicHandle().StructToArray
			var yyq1675 [7]bool
			_, _, _ = yysep1675, yyq1675, yy2arr1675
			const yyr1675 bool = false
			yyq1675[1] = x.Signal != 0
			yyq1675[2] = x.Reason != ""
			yyq1675[3] = x.Message != ""
			yyq1675[4] = true
			yyq1675[5] = true
			yyq1675[6] = x.ContainerID != ""
			var yynn1675 int
			if yyr1675 || yy2arr1675 {
				r.EncodeArrayStart(7)
			} else {
				yynn1675 = 1
				for _, b := range yyq1675 {
					if b {
						yynn1675++
					}
				}
				r.EncodeMapStart(yynn1675)
				yynn1675 = 0
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1677 := z.EncBinary()
				_ = yym1677
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1678 := z.EncBinary()
				_ = yym1678
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1675[1] {
					yym1680 := z.EncBinary()
					_ = yym1680
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1675[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1681 := z.EncBinary()
					_ = yym1681
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1675[2] {
					yym1683 := z.EncBinary()
					_ = yym1683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1675[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1675[3] {
					yym1686 := z.EncBinary()
					_ = yym1686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1675[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1687 := z.EncBinary()
					_ = yym1687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1675[4] {
					yy1689 := &x.StartedAt
					yym1690 := z.EncBinary()
					_ = yym1690
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1689) {
					} else if yym1690 {
						z.EncBinaryMarshal(yy1689)
					} else if !yym1690 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1689)
					} else {
						z.EncFallback(yy1689)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1675[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1691 := &x.StartedAt
					yym1692 := z.EncBinary()
					_ = yym1692
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1691) {
					} else if yym1692 {
						z.EncBinaryMarshal(yy1691)
					} else if !yym1692 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1691)
					} else {
						z.EncFallback(yy1691)
					}
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1675[5] {
					yy1694 := &x.FinishedAt
					yym1695 := z.EncBinary()
					_ = yym1695
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1694) {
					} else if yym1695 {
						z.EncBinaryMarshal(yy1694)
					} else if !yym1695 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1694)
					} else {
						z.EncFallback(yy1694)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1675[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1696 := &x.FinishedAt
					yym1697 := z.EncBinary()
					_ = yym1697
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1696) {
					} else if yym1697 {
						z.EncBinaryMarshal(yy1696)
					} else if !yym1697 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1696)
					} else {
						z.EncFallback(yy1696)
					}
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1675[6] {
					yym1699 := z.EncBinary()
					_ = yym1699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1675[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1700 := z.EncBinary()
					_ = yym1700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1701 := z.DecBinary()
	_ = yym1701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1702 := r.ContainerType()
		if yyct1702 == codecSelferValueTypeMap1234 {
			yyl1702 := r.ReadMapStart()
			if yyl1702 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1702, d)
			}
		} else if yyct1702 == codecSelferValueTypeArray1234 {
			yyl1702 := r.ReadArrayStart()
			if yyl1702 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1702, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1703Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1703Slc
	var yyhl1703 bool = l >= 0
	for yyj1703 := 0; ; yyj1703++ {
		if yyhl1703 {
			if yyj1703 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1703Slc = r.DecodeBytes(yys1703Slc, true, true)
		yys1703 := string(yys1703Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1703 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_v1.Time{}
			} else {
				yyv1708 := &x.StartedAt
				yym1709 := z.DecBinary()
				_ = yym1709
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1708) {
				} else if yym1709 {
					z.DecBinaryUnmarshal(yyv1708)
				} else if !yym1709 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1708)
				} else {
					z.DecFallback(yyv1708, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_v1.Time{}
			} else {
				yyv1710 := &x.FinishedAt
				yym1711 := z.DecBinary()
				_ = yym1711
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1710) {
				} else if yym1711 {
					z.DecBinaryUnmarshal(yyv1710)
				} else if !yym1711 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1710)
				} else {
					z.DecFallback(yyv1710, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1703)
		} // end switch yys1703
	} // end for yyj1703
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1713 int
	var yyb1713 bool
	var yyhl1713 bool = l >= 0
	yyj1713++
	if yyhl1713 {
		yyb1713 = yyj1713 > l
	} else {
		yyb1713 = r.CheckBreak()
	}
	if yyb1713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1713++
	if yyhl1713 {
		yyb1713 = yyj1713 > l
	} else {
		yyb1713 = r.CheckBreak()
	}
	if yyb1713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1713++
	if yyhl1713 {
		yyb1713 = yyj1713 > l
	} else {
		yyb1713 = r.CheckBreak()
	}
	if yyb1713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1713++
	if yyhl1713 {
		yyb1713 = yyj1713 > l
	} else {
		yyb1713 = r.CheckBreak()
	}
	if yyb1713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1713++
	if yyhl1713 {
		yyb1713 = yyj1713 > l
	} else {
		yyb1713 = r.CheckBreak()
	}
	if yyb1713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_v1.Time{}
	} else {
		yyv1718 := &x.StartedAt
		yym1719 := z.DecBinary()
		_ = yym1719
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1718) {
		} else if yym1719 {
			z.DecBinaryUnmarshal(yyv1718)
		} else if !yym1719 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1718)
		} else {
			z.DecFallback(yyv1718, false)
		}
	}
	yyj1713++
	if yyhl1713 {
		yyb1713 = yyj1713 > l
	} else {
		yyb1713 = r.CheckBreak()
	}
	if yyb1713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_v1.Time{}
	} else {
		yyv1720 := &x.FinishedAt
		yym1721 := z.DecBinary()
		_ = yym1721
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1720) {
		} else if yym1721 {
			z.DecBinaryUnmarshal(yyv1720)
		} else if !yym1721 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1720)
		} else {
			z.DecFallback(yyv1720, false)
		}
	}
	yyj1713++
	if yyhl1713 {
		yyb1713 = yyj1713 > l
	} else {
		yyb1713 = r.CheckBreak()
	}
	if yyb1713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1713++
		if yyhl1713 {
			yyb1713 = yyj1713 > l
		} else {
			yyb1713 = r.CheckBreak()
		}
		if yyb1713 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1713-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1723 := z.EncBinary()
		_ = yym1723
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1724 := !z.EncBinary()
			yy2arr1724 := z.EncBasicHandle().StructToArray
			var yyq1724 [3]bool
			_, _, _ = yysep1724, yyq1724, yy2arr1724
			const yyr1724 bool = false
			yyq1724[0] = x.Waiting != nil
			yyq1724[1] = x.Running != nil
			yyq1724[2] = x.Terminated != nil
			var yynn1724 int
			if yyr1724 || yy2arr1724 {
				r.EncodeArrayStart(3)
			} else {
				yynn1724 = 0
				for _, b := range yyq1724 {
					if b {
						yynn1724++
					}
				}
				r.EncodeMapStart(yynn1724)
				yynn1724 = 0
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1724[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1724[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1724[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1724[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1724[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1724[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1728 := z.DecBinary()
	_ = yym1728
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1729 := r.ContainerType()
		if yyct1729 == codecSelferValueTypeMap1234 {
			yyl1729 := r.ReadMapStart()
			if yyl1729 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1729, d)
			}
		} else if yyct1729 == codecSelferValueTypeArray1234 {
			yyl1729 := r.ReadArrayStart()
			if yyl1729 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1729, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1730Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1730Slc
	var yyhl1730 bool = l >= 0
	for yyj1730 := 0; ; yyj1730++ {
		if yyhl1730 {
			if yyj1730 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1730Slc = r.DecodeBytes(yys1730Slc, true, true)
		yys1730 := string(yys1730Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1730 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1730)
		} // end switch yys1730
	} // end for yyj1730
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1734 int
	var yyb1734 bool
	var yyhl1734 bool = l >= 0
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1734++
		if yyhl1734 {
			yyb1734 = yyj1734 > l
		} else {
			yyb1734 = r.CheckBreak()
		}
		if yyb1734 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1734-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1738 := z.EncBinary()
		_ = yym1738
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1739 := !z.EncBinary()
			yy2arr1739 := z.EncBasicHandle().StructToArray
			var yyq1739 [8]bool
			_, _, _ = yysep1739, yyq1739, yy2arr1739
			const yyr1739 bool = false
			yyq1739[1] = true
			yyq1739[2] = true
			yyq1739[7] = x.ContainerID != ""
			var yynn1739 int
			if yyr1739 || yy2arr1739 {
				r.EncodeArrayStart(8)
			} else {
				yynn1739 = 5
				for _, b := range yyq1739 {
					if b {
						yynn1739++
					}
				}
				r.EncodeMapStart(yynn1739)
				yynn1739 = 0
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1741 := z.EncBinary()
				_ = yym1741
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1742 := z.EncBinary()
				_ = yym1742
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1739[1] {
					yy1744 := &x.State
					yy1744.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1739[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1745 := &x.State
					yy1745.CodecEncodeSelf(e)
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1739[2] {
					yy1747 := &x.LastTerminationState
					yy1747.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1739[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1748 := &x.LastTerminationState
					yy1748.CodecEncodeSelf(e)
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1750 := z.EncBinary()
				_ = yym1750
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1751 := z.EncBinary()
				_ = yym1751
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1753 := z.EncBinary()
				_ = yym1753
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1754 := z.EncBinary()
				_ = yym1754
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1756 := z.EncBinary()
				_ = yym1756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1757 := z.EncBinary()
				_ = yym1757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1759 := z.EncBinary()
				_ = yym1759
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1760 := z.EncBinary()
				_ = yym1760
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1739[7] {
					yym1762 := z.EncBinary()
					_ = yym1762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1739[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1763 := z.EncBinary()
					_ = yym1763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1764 := z.DecBinary()
	_ = yym1764
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1765 := r.ContainerType()
		if yyct1765 == codecSelferValueTypeMap1234 {
			yyl1765 := r.ReadMapStart()
			if yyl1765 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1765, d)
			}
		} else if yyct1765 == codecSelferValueTypeArray1234 {
			yyl1765 := r.ReadArrayStart()
			if yyl1765 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1765, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1766Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1766Slc
	var yyhl1766 bool = l >= 0
	for yyj1766 := 0; ; yyj1766++ {
		if yyhl1766 {
			if yyj1766 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1766Slc = r.DecodeBytes(yys1766Slc, true, true)
		yys1766 := string(yys1766Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1766 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1768 := &x.State
				yyv1768.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1769 := &x.LastTerminationState
				yyv1769.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1766)
		} // end switch yys1766
	} // end for yyj1766
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1775 int
	var yyb1775 bool
	var yyhl1775 bool = l >= 0
	yyj1775++
	if yyhl1775 {
		yyb1775 = yyj1775 > l
	} else {
		yyb1775 = r.CheckBreak()
	}
	if yyb1775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1775++
	if yyhl1775 {
		yyb1775 = yyj1775 > l
	} else {
		yyb1775 = r.CheckBreak()
	}
	if yyb1775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1777 := &x.State
		yyv1777.CodecDecodeSelf(d)
	}
	yyj1775++
	if yyhl1775 {
		yyb1775 = yyj1775 > l
	} else {
		yyb1775 = r.CheckBreak()
	}
	if yyb1775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1778 := &x.LastTerminationState
		yyv1778.CodecDecodeSelf(d)
	}
	yyj1775++
	if yyhl1775 {
		yyb1775 = yyj1775 > l
	} else {
		yyb1775 = r.CheckBreak()
	}
	if yyb1775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1775++
	if yyhl1775 {
		yyb1775 = yyj1775 > l
	} else {
		yyb1775 = r.CheckBreak()
	}
	if yyb1775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1775++
	if yyhl1775 {
		yyb1775 = yyj1775 > l
	} else {
		yyb1775 = r.CheckBreak()
	}
	if yyb1775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1775++
	if yyhl1775 {
		yyb1775 = yyj1775 > l
	} else {
		yyb1775 = r.CheckBreak()
	}
	if yyb1775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1775++
	if yyhl1775 {
		yyb1775 = yyj1775 > l
	} else {
		yyb1775 = r.CheckBreak()
	}
	if yyb1775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1775++
		if yyhl1775 {
			yyb1775 = yyj1775 > l
		} else {
			yyb1775 = r.CheckBreak()
		}
		if yyb1775 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1775-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1784 := z.EncBinary()
	_ = yym1784
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1785 := z.DecBinary()
	_ = yym1785
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1786 := z.EncBinary()
	_ = yym1786
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1787 := z.DecBinary()
	_ = yym1787
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1788 := z.EncBinary()
		_ = yym1788
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1789 := !z.EncBinary()
			yy2arr1789 := z.EncBasicHandle().StructToArray
			var yyq1789 [6]bool
			_, _, _ = yysep1789, yyq1789, yy2arr1789
			const yyr1789 bool = false
			yyq1789[2] = true
			yyq1789[3] = true
			yyq1789[4] = x.Reason != ""
			yyq1789[5] = x.Message != ""
			var yynn1789 int
			if yyr1789 || yy2arr1789 {
				r.EncodeArrayStart(6)
			} else {
				yynn1789 = 2
				for _, b := range yyq1789 {
					if b {
						yynn1789++
					}
				}
				r.EncodeMapStart(yynn1789)
				yynn1789 = 0
			}
			if yyr1789 || yy2arr1789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1789 || yy2arr1789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1789 || yy2arr1789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1789[2] {
					yy1793 := &x.LastProbeTime
					yym1794 := z.EncBinary()
					_ = yym1794
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1793) {
					} else if yym1794 {
						z.EncBinaryMarshal(yy1793)
					} else if !yym1794 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1793)
					} else {
						z.EncFallback(yy1793)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1789[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1795 := &x.LastProbeTime
					yym1796 := z.EncBinary()
					_ = yym1796
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1795) {
					} else if yym1796 {
						z.EncBinaryMarshal(yy1795)
					} else if !yym1796 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1795)
					} else {
						z.EncFallback(yy1795)
					}
				}
			}
			if yyr1789 || yy2arr1789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1789[3] {
					yy1798 := &x.LastTransitionTime
					yym1799 := z.EncBinary()
					_ = yym1799
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1798) {
					} else if yym1799 {
						z.EncBinaryMarshal(yy1798)
					} else if !yym1799 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1798)
					} else {
						z.EncFallback(yy1798)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1789[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1800 := &x.LastTransitionTime
					yym1801 := z.EncBinary()
					_ = yym1801
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1800) {
					} else if yym1801 {
						z.EncBinaryMarshal(yy1800)
					} else if !yym1801 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1800)
					} else {
						z.EncFallback(yy1800)
					}
				}
			}
			if yyr1789 || yy2arr1789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1789[4] {
					yym1803 := z.EncBinary()
					_ = yym1803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1789[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1804 := z.EncBinary()
					_ = yym1804
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1789 || yy2arr1789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1789[5] {
					yym1806 := z.EncBinary()
					_ = yym1806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1789[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1807 := z.EncBinary()
					_ = yym1807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1789 || yy2arr1789 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1808 := z.DecBinary()
	_ = yym1808
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1809 := r.ContainerType()
		if yyct1809 == codecSelferValueTypeMap1234 {
			yyl1809 := r.ReadMapStart()
			if yyl1809 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1809, d)
			}
		} else if yyct1809 == codecSelferValueTypeArray1234 {
			yyl1809 := r.ReadArrayStart()
			if yyl1809 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1809, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1810Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1810Slc
	var yyhl1810 bool = l >= 0
	for yyj1810 := 0; ; yyj1810++ {
		if yyhl1810 {
			if yyj1810 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1810Slc = r.DecodeBytes(yys1810Slc, true, true)
		yys1810 := string(yys1810Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1810 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_v1.Time{}
			} else {
				yyv1813 := &x.LastProbeTime
				yym1814 := z.DecBinary()
				_ = yym1814
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1813) {
				} else if yym1814 {
					z.DecBinaryUnmarshal(yyv1813)
				} else if !yym1814 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1813)
				} else {
					z.DecFallback(yyv1813, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_v1.Time{}
			} else {
				yyv1815 := &x.LastTransitionTime
				yym1816 := z.DecBinary()
				_ = yym1816
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1815) {
				} else if yym1816 {
					z.DecBinaryUnmarshal(yyv1815)
				} else if !yym1816 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1815)
				} else {
					z.DecFallback(yyv1815, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1810)
		} // end switch yys1810
	} // end for yyj1810
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1819 int
	var yyb1819 bool
	var yyhl1819 bool = l >= 0
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_v1.Time{}
	} else {
		yyv1822 := &x.LastProbeTime
		yym1823 := z.DecBinary()
		_ = yym1823
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1822) {
		} else if yym1823 {
			z.DecBinaryUnmarshal(yyv1822)
		} else if !yym1823 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1822)
		} else {
			z.DecFallback(yyv1822, false)
		}
	}
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_v1.Time{}
	} else {
		yyv1824 := &x.LastTransitionTime
		yym1825 := z.DecBinary()
		_ = yym1825
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1824) {
		} else if yym1825 {
			z.DecBinaryUnmarshal(yyv1824)
		} else if !yym1825 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1824)
		} else {
			z.DecFallback(yyv1824, false)
		}
	}
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1819++
	if yyhl1819 {
		yyb1819 = yyj1819 > l
	} else {
		yyb1819 = r.CheckBreak()
	}
	if yyb1819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1819++
		if yyhl1819 {
			yyb1819 = yyj1819 > l
		} else {
			yyb1819 = r.CheckBreak()
		}
		if yyb1819 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1819-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1828 := z.EncBinary()
	_ = yym1828
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1829 := z.DecBinary()
	_ = yym1829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1830 := z.EncBinary()
	_ = yym1830
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1831 := z.DecBinary()
	_ = yym1831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1832 := z.EncBinary()
		_ = yym1832
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1833 := !z.EncBinary()
			yy2arr1833 := z.EncBasicHandle().StructToArray
			var yyq1833 [1]bool
			_, _, _ = yysep1833, yyq1833, yy2arr1833
			const yyr1833 bool = false
			var yynn1833 int
			if yyr1833 || yy2arr1833 {
				r.EncodeArrayStart(1)
			} else {
				yynn1833 = 1
				for _, b := range yyq1833 {
					if b {
						yynn1833++
					}
				}
				r.EncodeMapStart(yynn1833)
				yynn1833 = 0
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1835 := z.EncBinary()
					_ = yym1835
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1836 := z.EncBinary()
					_ = yym1836
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1833 || yy2arr1833 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1837 := z.DecBinary()
	_ = yym1837
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1838 := r.ContainerType()
		if yyct1838 == codecSelferValueTypeMap1234 {
			yyl1838 := r.ReadMapStart()
			if yyl1838 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1838, d)
			}
		} else if yyct1838 == codecSelferValueTypeArray1234 {
			yyl1838 := r.ReadArrayStart()
			if yyl1838 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1838, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1839Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1839Slc
	var yyhl1839 bool = l >= 0
	for yyj1839 := 0; ; yyj1839++ {
		if yyhl1839 {
			if yyj1839 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1839Slc = r.DecodeBytes(yys1839Slc, true, true)
		yys1839 := string(yys1839Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1839 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1840 := &x.NodeSelectorTerms
				yym1841 := z.DecBinary()
				_ = yym1841
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1840), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1839)
		} // end switch yys1839
	} // end for yyj1839
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1842 int
	var yyb1842 bool
	var yyhl1842 bool = l >= 0
	yyj1842++
	if yyhl1842 {
		yyb1842 = yyj1842 > l
	} else {
		yyb1842 = r.CheckBreak()
	}
	if yyb1842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1843 := &x.NodeSelectorTerms
		yym1844 := z.DecBinary()
		_ = yym1844
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1843), d)
		}
	}
	for {
		yyj1842++
		if yyhl1842 {
			yyb1842 = yyj1842 > l
		} else {
			yyb1842 = r.CheckBreak()
		}
		if yyb1842 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1842-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1845 := z.EncBinary()
		_ = yym1845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1846 := !z.EncBinary()
			yy2arr1846 := z.EncBasicHandle().StructToArray
			var yyq1846 [1]bool
			_, _, _ = yysep1846, yyq1846, yy2arr1846
			const yyr1846 bool = false
			var yynn1846 int
			if yyr1846 || yy2arr1846 {
				r.EncodeArrayStart(1)
			} else {
				yynn1846 = 1
				for _, b := range yyq1846 {
					if b {
						yynn1846++
					}
				}
				r.EncodeMapStart(yynn1846)
				yynn1846 = 0
			}
			if yyr1846 || yy2arr1846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1849 := z.EncBinary()
					_ = yym1849
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1846 || yy2arr1846 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1850 := z.DecBinary()
	_ = yym1850
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1851 := r.ContainerType()
		if yyct1851 == codecSelferValueTypeMap1234 {
			yyl1851 := r.ReadMapStart()
			if yyl1851 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1851, d)
			}
		} else if yyct1851 == codecSelferValueTypeArray1234 {
			yyl1851 := r.ReadArrayStart()
			if yyl1851 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1851, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1852Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1852Slc
	var yyhl1852 bool = l >= 0
	for yyj1852 := 0; ; yyj1852++ {
		if yyhl1852 {
			if yyj1852 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1852Slc = r.DecodeBytes(yys1852Slc, true, true)
		yys1852 := string(yys1852Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1852 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1853 := &x.MatchExpressions
				yym1854 := z.DecBinary()
				_ = yym1854
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1853), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1852)
		} // end switch yys1852
	} // end for yyj1852
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1855 int
	var yyb1855 bool
	var yyhl1855 bool = l >= 0
	yyj1855++
	if yyhl1855 {
		yyb1855 = yyj1855 > l
	} else {
		yyb1855 = r.CheckBreak()
	}
	if yyb1855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1856 := &x.MatchExpressions
		yym1857 := z.DecBinary()
		_ = yym1857
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1856), d)
		}
	}
	for {
		yyj1855++
		if yyhl1855 {
			yyb1855 = yyj1855 > l
		} else {
			yyb1855 = r.CheckBreak()
		}
		if yyb1855 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1855-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1858 := z.EncBinary()
		_ = yym1858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1859 := !z.EncBinary()
			yy2arr1859 := z.EncBasicHandle().StructToArray
			var yyq1859 [3]bool
			_, _, _ = yysep1859, yyq1859, yy2arr1859
			const yyr1859 bool = false
			yyq1859[2] = len(x.Values) != 0
			var yynn1859 int
			if yyr1859 || yy2arr1859 {
				r.EncodeArrayStart(3)
			} else {
				yynn1859 = 2
				for _, b := range yyq1859 {
					if b {
						yynn1859++
					}
				}
				r.EncodeMapStart(yynn1859)
				yynn1859 = 0
			}
			if yyr1859 || yy2arr1859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1861 := z.EncBinary()
				_ = yym1861
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1862 := z.EncBinary()
				_ = yym1862
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1859 || yy2arr1859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1859 || yy2arr1859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1859[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1865 := z.EncBinary()
						_ = yym1865
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1859[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1866 := z.EncBinary()
						_ = yym1866
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1859 || yy2arr1859 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1867 := z.DecBinary()
	_ = yym1867
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1868 := r.ContainerType()
		if yyct1868 == codecSelferValueTypeMap1234 {
			yyl1868 := r.ReadMapStart()
			if yyl1868 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1868, d)
			}
		} else if yyct1868 == codecSelferValueTypeArray1234 {
			yyl1868 := r.ReadArrayStart()
			if yyl1868 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1868, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1869Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1869Slc
	var yyhl1869 bool = l >= 0
	for yyj1869 := 0; ; yyj1869++ {
		if yyhl1869 {
			if yyj1869 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1869Slc = r.DecodeBytes(yys1869Slc, true, true)
		yys1869 := string(yys1869Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1869 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1872 := &x.Values
				yym1873 := z.DecBinary()
				_ = yym1873
				if false {
				} else {
					z.F.DecSliceStringX(yyv1872, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1869)
		} // end switch yys1869
	} // end for yyj1869
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1874 int
	var yyb1874 bool
	var yyhl1874 bool = l >= 0
	yyj1874++
	if yyhl1874 {
		yyb1874 = yyj1874 > l
	} else {
		yyb1874 = r.CheckBreak()
	}
	if yyb1874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1874++
	if yyhl1874 {
		yyb1874 = yyj1874 > l
	} else {
		yyb1874 = r.CheckBreak()
	}
	if yyb1874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1874++
	if yyhl1874 {
		yyb1874 = yyj1874 > l
	} else {
		yyb1874 = r.CheckBreak()
	}
	if yyb1874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1877 := &x.Values
		yym1878 := z.DecBinary()
		_ = yym1878
		if false {
		} else {
			z.F.DecSliceStringX(yyv1877, false, d)
		}
	}
	for {
		yyj1874++
		if yyhl1874 {
			yyb1874 = yyj1874 > l
		} else {
			yyb1874 = r.CheckBreak()
		}
		if yyb1874 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1874-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1879 := z.EncBinary()
	_ = yym1879
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1880 := z.DecBinary()
	_ = yym1880
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1881 := z.EncBinary()
		_ = yym1881
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1882 := !z.EncBinary()
			yy2arr1882 := z.EncBasicHandle().StructToArray
			var yyq1882 [3]bool
			_, _, _ = yysep1882, yyq1882, yy2arr1882
			const yyr1882 bool = false
			yyq1882[0] = x.NodeAffinity != nil
			yyq1882[1] = x.PodAffinity != nil
			yyq1882[2] = x.PodAntiAffinity != nil
			var yynn1882 int
			if yyr1882 || yy2arr1882 {
				r.EncodeArrayStart(3)
			} else {
				yynn1882 = 0
				for _, b := range yyq1882 {
					if b {
						yynn1882++
					}
				}
				r.EncodeMapStart(yynn1882)
				yynn1882 = 0
			}
			if yyr1882 || yy2arr1882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1882[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1882[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1882 || yy2arr1882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1882[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1882[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1882 || yy2arr1882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1882[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1882[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1882 || yy2arr1882 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1886 := z.DecBinary()
	_ = yym1886
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1887 := r.ContainerType()
		if yyct1887 == codecSelferValueTypeMap1234 {
			yyl1887 := r.ReadMapStart()
			if yyl1887 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1887, d)
			}
		} else if yyct1887 == codecSelferValueTypeArray1234 {
			yyl1887 := r.ReadArrayStart()
			if yyl1887 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1887, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1888Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1888Slc
	var yyhl1888 bool = l >= 0
	for yyj1888 := 0; ; yyj1888++ {
		if yyhl1888 {
			if yyj1888 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1888Slc = r.DecodeBytes(yys1888Slc, true, true)
		yys1888 := string(yys1888Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1888 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1888)
		} // end switch yys1888
	} // end for yyj1888
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1892 int
	var yyb1892 bool
	var yyhl1892 bool = l >= 0
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1892++
		if yyhl1892 {
			yyb1892 = yyj1892 > l
		} else {
			yyb1892 = r.CheckBreak()
		}
		if yyb1892 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1892-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1896 := z.EncBinary()
		_ = yym1896
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1897 := !z.EncBinary()
			yy2arr1897 := z.EncBasicHandle().StructToArray
			var yyq1897 [2]bool
			_, _, _ = yysep1897, yyq1897, yy2arr1897
			const yyr1897 bool = false
			yyq1897[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1897[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1897 int
			if yyr1897 || yy2arr1897 {
				r.EncodeArrayStart(2)
			} else {
				yynn1897 = 0
				for _, b := range yyq1897 {
					if b {
						yynn1897++
					}
				}
				r.EncodeMapStart(yynn1897)
				yynn1897 = 0
			}
			if yyr1897 || yy2arr1897 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1897[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1899 := z.EncBinary()
						_ = yym1899
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1897[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1900 := z.EncBinary()
						_ = yym1900
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1897 || yy2arr1897 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1897[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1902 := z.EncBinary()
						_ = yym1902
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1897[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1903 := z.EncBinary()
						_ = yym1903
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1897 || yy2arr1897 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1904 := z.DecBinary()
	_ = yym1904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1905 := r.ContainerType()
		if yyct1905 == codecSelferValueTypeMap1234 {
			yyl1905 := r.ReadMapStart()
			if yyl1905 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1905, d)
			}
		} else if yyct1905 == codecSelferValueTypeArray1234 {
			yyl1905 := r.ReadArrayStart()
			if yyl1905 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1905, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1906Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1906Slc
	var yyhl1906 bool = l >= 0
	for yyj1906 := 0; ; yyj1906++ {
		if yyhl1906 {
			if yyj1906 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1906Slc = r.DecodeBytes(yys1906Slc, true, true)
		yys1906 := string(yys1906Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1906 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1907 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1908 := z.DecBinary()
				_ = yym1908
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1907), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1909 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1910 := z.DecBinary()
				_ = yym1910
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1909), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1906)
		} // end switch yys1906
	} // end for yyj1906
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1911 int
	var yyb1911 bool
	var yyhl1911 bool = l >= 0
	yyj1911++
	if yyhl1911 {
		yyb1911 = yyj1911 > l
	} else {
		yyb1911 = r.CheckBreak()
	}
	if yyb1911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1912 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1913 := z.DecBinary()
		_ = yym1913
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1912), d)
		}
	}
	yyj1911++
	if yyhl1911 {
		yyb1911 = yyj1911 > l
	} else {
		yyb1911 = r.CheckBreak()
	}
	if yyb1911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1914 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1915 := z.DecBinary()
		_ = yym1915
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1914), d)
		}
	}
	for {
		yyj1911++
		if yyhl1911 {
			yyb1911 = yyj1911 > l
		} else {
			yyb1911 = r.CheckBreak()
		}
		if yyb1911 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1911-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1916 := z.EncBinary()
		_ = yym1916
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1917 := !z.EncBinary()
			yy2arr1917 := z.EncBasicHandle().StructToArray
			var yyq1917 [2]bool
			_, _, _ = yysep1917, yyq1917, yy2arr1917
			const yyr1917 bool = false
			yyq1917[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1917[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1917 int
			if yyr1917 || yy2arr1917 {
				r.EncodeArrayStart(2)
			} else {
				yynn1917 = 0
				for _, b := range yyq1917 {
					if b {
						yynn1917++
					}
				}
				r.EncodeMapStart(yynn1917)
				yynn1917 = 0
			}
			if yyr1917 || yy2arr1917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1917[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1919 := z.EncBinary()
						_ = yym1919
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1917[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1920 := z.EncBinary()
						_ = yym1920
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1917 || yy2arr1917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1917[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1922 := z.EncBinary()
						_ = yym1922
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1917[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1923 := z.EncBinary()
						_ = yym1923
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1917 || yy2arr1917 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1924 := z.DecBinary()
	_ = yym1924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1925 := r.ContainerType()
		if yyct1925 == codecSelferValueTypeMap1234 {
			yyl1925 := r.ReadMapStart()
			if yyl1925 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1925, d)
			}
		} else if yyct1925 == codecSelferValueTypeArray1234 {
			yyl1925 := r.ReadArrayStart()
			if yyl1925 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1926Slc
	var yyhl1926 bool = l >= 0
	for yyj1926 := 0; ; yyj1926++ {
		if yyhl1926 {
			if yyj1926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1926Slc = r.DecodeBytes(yys1926Slc, true, true)
		yys1926 := string(yys1926Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1926 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1927 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1928 := z.DecBinary()
				_ = yym1928
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1927), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1929 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1930 := z.DecBinary()
				_ = yym1930
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1929), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1926)
		} // end switch yys1926
	} // end for yyj1926
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1931 int
	var yyb1931 bool
	var yyhl1931 bool = l >= 0
	yyj1931++
	if yyhl1931 {
		yyb1931 = yyj1931 > l
	} else {
		yyb1931 = r.CheckBreak()
	}
	if yyb1931 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1932 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1933 := z.DecBinary()
		_ = yym1933
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1932), d)
		}
	}
	yyj1931++
	if yyhl1931 {
		yyb1931 = yyj1931 > l
	} else {
		yyb1931 = r.CheckBreak()
	}
	if yyb1931 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1934 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1935 := z.DecBinary()
		_ = yym1935
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1934), d)
		}
	}
	for {
		yyj1931++
		if yyhl1931 {
			yyb1931 = yyj1931 > l
		} else {
			yyb1931 = r.CheckBreak()
		}
		if yyb1931 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1931-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1936 := z.EncBinary()
		_ = yym1936
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1937 := !z.EncBinary()
			yy2arr1937 := z.EncBasicHandle().StructToArray
			var yyq1937 [2]bool
			_, _, _ = yysep1937, yyq1937, yy2arr1937
			const yyr1937 bool = false
			var yynn1937 int
			if yyr1937 || yy2arr1937 {
				r.EncodeArrayStart(2)
			} else {
				yynn1937 = 2
				for _, b := range yyq1937 {
					if b {
						yynn1937++
					}
				}
				r.EncodeMapStart(yynn1937)
				yynn1937 = 0
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1939 := z.EncBinary()
				_ = yym1939
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1940 := z.EncBinary()
				_ = yym1940
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1942 := &x.PodAffinityTerm
				yy1942.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1943 := &x.PodAffinityTerm
				yy1943.CodecEncodeSelf(e)
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1944 := z.DecBinary()
	_ = yym1944
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1945 := r.ContainerType()
		if yyct1945 == codecSelferValueTypeMap1234 {
			yyl1945 := r.ReadMapStart()
			if yyl1945 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1945, d)
			}
		} else if yyct1945 == codecSelferValueTypeArray1234 {
			yyl1945 := r.ReadArrayStart()
			if yyl1945 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1945, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1946Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1946Slc
	var yyhl1946 bool = l >= 0
	for yyj1946 := 0; ; yyj1946++ {
		if yyhl1946 {
			if yyj1946 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1946Slc = r.DecodeBytes(yys1946Slc, true, true)
		yys1946 := string(yys1946Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1946 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1948 := &x.PodAffinityTerm
				yyv1948.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1946)
		} // end switch yys1946
	} // end for yyj1946
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1949 int
	var yyb1949 bool
	var yyhl1949 bool = l >= 0
	yyj1949++
	if yyhl1949 {
		yyb1949 = yyj1949 > l
	} else {
		yyb1949 = r.CheckBreak()
	}
	if yyb1949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1949++
	if yyhl1949 {
		yyb1949 = yyj1949 > l
	} else {
		yyb1949 = r.CheckBreak()
	}
	if yyb1949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1951 := &x.PodAffinityTerm
		yyv1951.CodecDecodeSelf(d)
	}
	for {
		yyj1949++
		if yyhl1949 {
			yyb1949 = yyj1949 > l
		} else {
			yyb1949 = r.CheckBreak()
		}
		if yyb1949 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1949-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1952 := z.EncBinary()
		_ = yym1952
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1953 := !z.EncBinary()
			yy2arr1953 := z.EncBasicHandle().StructToArray
			var yyq1953 [3]bool
			_, _, _ = yysep1953, yyq1953, yy2arr1953
			const yyr1953 bool = false
			yyq1953[0] = x.LabelSelector != nil
			yyq1953[2] = x.TopologyKey != ""
			var yynn1953 int
			if yyr1953 || yy2arr1953 {
				r.EncodeArrayStart(3)
			} else {
				yynn1953 = 1
				for _, b := range yyq1953 {
					if b {
						yynn1953++
					}
				}
				r.EncodeMapStart(yynn1953)
				yynn1953 = 0
			}
			if yyr1953 || yy2arr1953 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1953[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1955 := z.EncBinary()
						_ = yym1955
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1953[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1956 := z.EncBinary()
						_ = yym1956
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1953 || yy2arr1953 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1958 := z.EncBinary()
					_ = yym1958
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1959 := z.EncBinary()
					_ = yym1959
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1953 || yy2arr1953 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1953[2] {
					yym1961 := z.EncBinary()
					_ = yym1961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1953[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1962 := z.EncBinary()
					_ = yym1962
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1953 || yy2arr1953 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1963 := z.DecBinary()
	_ = yym1963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1964 := r.ContainerType()
		if yyct1964 == codecSelferValueTypeMap1234 {
			yyl1964 := r.ReadMapStart()
			if yyl1964 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1964, d)
			}
		} else if yyct1964 == codecSelferValueTypeArray1234 {
			yyl1964 := r.ReadArrayStart()
			if yyl1964 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1965Slc
	var yyhl1965 bool = l >= 0
	for yyj1965 := 0; ; yyj1965++ {
		if yyhl1965 {
			if yyj1965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1965Slc = r.DecodeBytes(yys1965Slc, true, true)
		yys1965 := string(yys1965Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1965 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_v1.LabelSelector)
				}
				yym1967 := z.DecBinary()
				_ = yym1967
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1968 := &x.Namespaces
				yym1969 := z.DecBinary()
				_ = yym1969
				if false {
				} else {
					z.F.DecSliceStringX(yyv1968, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1965)
		} // end switch yys1965
	} // end for yyj1965
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1971 int
	var yyb1971 bool
	var yyhl1971 bool = l >= 0
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_v1.LabelSelector)
		}
		yym1973 := z.DecBinary()
		_ = yym1973
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1974 := &x.Namespaces
		yym1975 := z.DecBinary()
		_ = yym1975
		if false {
		} else {
			z.F.DecSliceStringX(yyv1974, false, d)
		}
	}
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1971++
		if yyhl1971 {
			yyb1971 = yyj1971 > l
		} else {
			yyb1971 = r.CheckBreak()
		}
		if yyb1971 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1971-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1977 := z.EncBinary()
		_ = yym1977
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1978 := !z.EncBinary()
			yy2arr1978 := z.EncBasicHandle().StructToArray
			var yyq1978 [2]bool
			_, _, _ = yysep1978, yyq1978, yy2arr1978
			const yyr1978 bool = false
			yyq1978[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1978[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1978 int
			if yyr1978 || yy2arr1978 {
				r.EncodeArrayStart(2)
			} else {
				yynn1978 = 0
				for _, b := range yyq1978 {
					if b {
						yynn1978++
					}
				}
				r.EncodeMapStart(yynn1978)
				yynn1978 = 0
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1978[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1978[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1978[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1981 := z.EncBinary()
						_ = yym1981
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1978[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1982 := z.EncBinary()
						_ = yym1982
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1983 := z.DecBinary()
	_ = yym1983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1984 := r.ContainerType()
		if yyct1984 == codecSelferValueTypeMap1234 {
			yyl1984 := r.ReadMapStart()
			if yyl1984 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1984, d)
			}
		} else if yyct1984 == codecSelferValueTypeArray1234 {
			yyl1984 := r.ReadArrayStart()
			if yyl1984 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1984, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1985Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1985Slc
	var yyhl1985 bool = l >= 0
	for yyj1985 := 0; ; yyj1985++ {
		if yyhl1985 {
			if yyj1985 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1985Slc = r.DecodeBytes(yys1985Slc, true, true)
		yys1985 := string(yys1985Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1985 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1987 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1988 := z.DecBinary()
				_ = yym1988
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1987), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1985)
		} // end switch yys1985
	} // end for yyj1985
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1989 int
	var yyb1989 bool
	var yyhl1989 bool = l >= 0
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1991 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1992 := z.DecBinary()
		_ = yym1992
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1991), d)
		}
	}
	for {
		yyj1989++
		if yyhl1989 {
			yyb1989 = yyj1989 > l
		} else {
			yyb1989 = r.CheckBreak()
		}
		if yyb1989 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1989-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1993 := z.EncBinary()
		_ = yym1993
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1994 := !z.EncBinary()
			yy2arr1994 := z.EncBasicHandle().StructToArray
			var yyq1994 [2]bool
			_, _, _ = yysep1994, yyq1994, yy2arr1994
			const yyr1994 bool = false
			var yynn1994 int
			if yyr1994 || yy2arr1994 {
				r.EncodeArrayStart(2)
			} else {
				yynn1994 = 2
				for _, b := range yyq1994 {
					if b {
						yynn1994++
					}
				}
				r.EncodeMapStart(yynn1994)
				yynn1994 = 0
			}
			if yyr1994 || yy2arr1994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1996 := z.EncBinary()
				_ = yym1996
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1997 := z.EncBinary()
				_ = yym1997
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1994 || yy2arr1994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1999 := &x.Preference
				yy1999.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2000 := &x.Preference
				yy2000.CodecEncodeSelf(e)
			}
			if yyr1994 || yy2arr1994 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2001 := z.DecBinary()
	_ = yym2001
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2002 := r.ContainerType()
		if yyct2002 == codecSelferValueTypeMap1234 {
			yyl2002 := r.ReadMapStart()
			if yyl2002 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2002, d)
			}
		} else if yyct2002 == codecSelferValueTypeArray1234 {
			yyl2002 := r.ReadArrayStart()
			if yyl2002 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2002, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2003Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2003Slc
	var yyhl2003 bool = l >= 0
	for yyj2003 := 0; ; yyj2003++ {
		if yyhl2003 {
			if yyj2003 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2003Slc = r.DecodeBytes(yys2003Slc, true, true)
		yys2003 := string(yys2003Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2003 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv2005 := &x.Preference
				yyv2005.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2003)
		} // end switch yys2003
	} // end for yyj2003
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2006 int
	var yyb2006 bool
	var yyhl2006 bool = l >= 0
	yyj2006++
	if yyhl2006 {
		yyb2006 = yyj2006 > l
	} else {
		yyb2006 = r.CheckBreak()
	}
	if yyb2006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2006++
	if yyhl2006 {
		yyb2006 = yyj2006 > l
	} else {
		yyb2006 = r.CheckBreak()
	}
	if yyb2006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv2008 := &x.Preference
		yyv2008.CodecDecodeSelf(d)
	}
	for {
		yyj2006++
		if yyhl2006 {
			yyb2006 = yyj2006 > l
		} else {
			yyb2006 = r.CheckBreak()
		}
		if yyb2006 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2006-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2009 := z.EncBinary()
		_ = yym2009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2010 := !z.EncBinary()
			yy2arr2010 := z.EncBasicHandle().StructToArray
			var yyq2010 [4]bool
			_, _, _ = yysep2010, yyq2010, yy2arr2010
			const yyr2010 bool = false
			yyq2010[1] = x.Value != ""
			yyq2010[3] = true
			var yynn2010 int
			if yyr2010 || yy2arr2010 {
				r.EncodeArrayStart(4)
			} else {
				yynn2010 = 2
				for _, b := range yyq2010 {
					if b {
						yynn2010++
					}
				}
				r.EncodeMapStart(yynn2010)
				yynn2010 = 0
			}
			if yyr2010 || yy2arr2010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2012 := z.EncBinary()
				_ = yym2012
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2013 := z.EncBinary()
				_ = yym2013
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr2010 || yy2arr2010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2010[1] {
					yym2015 := z.EncBinary()
					_ = yym2015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2010[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2016 := z.EncBinary()
					_ = yym2016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2010 || yy2arr2010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr2010 || yy2arr2010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2010[3] {
					yy2019 := &x.TimeAdded
					yym2020 := z.EncBinary()
					_ = yym2020
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2019) {
					} else if yym2020 {
						z.EncBinaryMarshal(yy2019)
					} else if !yym2020 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2019)
					} else {
						z.EncFallback(yy2019)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2010[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeAdded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2021 := &x.TimeAdded
					yym2022 := z.EncBinary()
					_ = yym2022
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2021) {
					} else if yym2022 {
						z.EncBinaryMarshal(yy2021)
					} else if !yym2022 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2021)
					} else {
						z.EncFallback(yy2021)
					}
				}
			}
			if yyr2010 || yy2arr2010 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2023 := z.DecBinary()
	_ = yym2023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2024 := r.ContainerType()
		if yyct2024 == codecSelferValueTypeMap1234 {
			yyl2024 := r.ReadMapStart()
			if yyl2024 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2024, d)
			}
		} else if yyct2024 == codecSelferValueTypeArray1234 {
			yyl2024 := r.ReadArrayStart()
			if yyl2024 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2024, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2025Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2025Slc
	var yyhl2025 bool = l >= 0
	for yyj2025 := 0; ; yyj2025++ {
		if yyhl2025 {
			if yyj2025 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2025Slc = r.DecodeBytes(yys2025Slc, true, true)
		yys2025 := string(yys2025Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2025 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		case "timeAdded":
			if r.TryDecodeAsNil() {
				x.TimeAdded = pkg2_v1.Time{}
			} else {
				yyv2029 := &x.TimeAdded
				yym2030 := z.DecBinary()
				_ = yym2030
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2029) {
				} else if yym2030 {
					z.DecBinaryUnmarshal(yyv2029)
				} else if !yym2030 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2029)
				} else {
					z.DecFallback(yyv2029, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2025)
		} // end switch yys2025
	} // end for yyj2025
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2031 int
	var yyb2031 bool
	var yyhl2031 bool = l >= 0
	yyj2031++
	if yyhl2031 {
		yyb2031 = yyj2031 > l
	} else {
		yyb2031 = r.CheckBreak()
	}
	if yyb2031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2031++
	if yyhl2031 {
		yyb2031 = yyj2031 > l
	} else {
		yyb2031 = r.CheckBreak()
	}
	if yyb2031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2031++
	if yyhl2031 {
		yyb2031 = yyj2031 > l
	} else {
		yyb2031 = r.CheckBreak()
	}
	if yyb2031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	yyj2031++
	if yyhl2031 {
		yyb2031 = yyj2031 > l
	} else {
		yyb2031 = r.CheckBreak()
	}
	if yyb2031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeAdded = pkg2_v1.Time{}
	} else {
		yyv2035 := &x.TimeAdded
		yym2036 := z.DecBinary()
		_ = yym2036
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2035) {
		} else if yym2036 {
			z.DecBinaryUnmarshal(yyv2035)
		} else if !yym2036 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2035)
		} else {
			z.DecFallback(yyv2035, false)
		}
	}
	for {
		yyj2031++
		if yyhl2031 {
			yyb2031 = yyj2031 > l
		} else {
			yyb2031 = r.CheckBreak()
		}
		if yyb2031 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2031-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2037 := z.EncBinary()
	_ = yym2037
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2038 := z.DecBinary()
	_ = yym2038
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2039 := z.EncBinary()
		_ = yym2039
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2040 := !z.EncBinary()
			yy2arr2040 := z.EncBasicHandle().StructToArray
			var yyq2040 [5]bool
			_, _, _ = yysep2040, yyq2040, yy2arr2040
			const yyr2040 bool = false
			yyq2040[0] = x.Key != ""
			yyq2040[1] = x.Operator != ""
			yyq2040[2] = x.Value != ""
			yyq2040[3] = x.Effect != ""
			yyq2040[4] = x.TolerationSeconds != nil
			var yynn2040 int
			if yyr2040 || yy2arr2040 {
				r.EncodeArrayStart(5)
			} else {
				yynn2040 = 0
				for _, b := range yyq2040 {
					if b {
						yynn2040++
					}
				}
				r.EncodeMapStart(yynn2040)
				yynn2040 = 0
			}
			if yyr2040 || yy2arr2040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2040[0] {
					yym2042 := z.EncBinary()
					_ = yym2042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2040[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2043 := z.EncBinary()
					_ = yym2043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2040 || yy2arr2040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2040[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2040[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2040 || yy2arr2040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2040[2] {
					yym2046 := z.EncBinary()
					_ = yym2046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2040[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2047 := z.EncBinary()
					_ = yym2047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2040 || yy2arr2040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2040[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2040[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2040 || yy2arr2040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2040[4] {
					if x.TolerationSeconds == nil {
						r.EncodeNil()
					} else {
						yy2050 := *x.TolerationSeconds
						yym2051 := z.EncBinary()
						_ = yym2051
						if false {
						} else {
							r.EncodeInt(int64(yy2050))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2040[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tolerationSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TolerationSeconds == nil {
						r.EncodeNil()
					} else {
						yy2052 := *x.TolerationSeconds
						yym2053 := z.EncBinary()
						_ = yym2053
						if false {
						} else {
							r.EncodeInt(int64(yy2052))
						}
					}
				}
			}
			if yyr2040 || yy2arr2040 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2054 := z.DecBinary()
	_ = yym2054
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2055 := r.ContainerType()
		if yyct2055 == codecSelferValueTypeMap1234 {
			yyl2055 := r.ReadMapStart()
			if yyl2055 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2055, d)
			}
		} else if yyct2055 == codecSelferValueTypeArray1234 {
			yyl2055 := r.ReadArrayStart()
			if yyl2055 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2055, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2056Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2056Slc
	var yyhl2056 bool = l >= 0
	for yyj2056 := 0; ; yyj2056++ {
		if yyhl2056 {
			if yyj2056 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2056Slc = r.DecodeBytes(yys2056Slc, true, true)
		yys2056 := string(yys2056Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2056 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		case "tolerationSeconds":
			if r.TryDecodeAsNil() {
				if x.TolerationSeconds != nil {
					x.TolerationSeconds = nil
				}
			} else {
				if x.TolerationSeconds == nil {
					x.TolerationSeconds = new(int64)
				}
				yym2062 := z.DecBinary()
				_ = yym2062
				if false {
				} else {
					*((*int64)(x.TolerationSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2056)
		} // end switch yys2056
	} // end for yyj2056
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2063 int
	var yyb2063 bool
	var yyhl2063 bool = l >= 0
	yyj2063++
	if yyhl2063 {
		yyb2063 = yyj2063 > l
	} else {
		yyb2063 = r.CheckBreak()
	}
	if yyb2063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2063++
	if yyhl2063 {
		yyb2063 = yyj2063 > l
	} else {
		yyb2063 = r.CheckBreak()
	}
	if yyb2063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2063++
	if yyhl2063 {
		yyb2063 = yyj2063 > l
	} else {
		yyb2063 = r.CheckBreak()
	}
	if yyb2063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2063++
	if yyhl2063 {
		yyb2063 = yyj2063 > l
	} else {
		yyb2063 = r.CheckBreak()
	}
	if yyb2063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	yyj2063++
	if yyhl2063 {
		yyb2063 = yyj2063 > l
	} else {
		yyb2063 = r.CheckBreak()
	}
	if yyb2063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TolerationSeconds != nil {
			x.TolerationSeconds = nil
		}
	} else {
		if x.TolerationSeconds == nil {
			x.TolerationSeconds = new(int64)
		}
		yym2069 := z.DecBinary()
		_ = yym2069
		if false {
		} else {
			*((*int64)(x.TolerationSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2063++
		if yyhl2063 {
			yyb2063 = yyj2063 > l
		} else {
			yyb2063 = r.CheckBreak()
		}
		if yyb2063 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2063-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2070 := z.EncBinary()
	_ = yym2070
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2071 := z.DecBinary()
	_ = yym2071
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2072 := z.EncBinary()
		_ = yym2072
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2073 := !z.EncBinary()
			yy2arr2073 := z.EncBasicHandle().StructToArray
			var yyq2073 [18]bool
			_, _, _ = yysep2073, yyq2073, yy2arr2073
			const yyr2073 bool = false
			yyq2073[0] = len(x.Volumes) != 0
			yyq2073[2] = x.RestartPolicy != ""
			yyq2073[3] = x.TerminationGracePeriodSeconds != nil
			yyq2073[4] = x.ActiveDeadlineSeconds != nil
			yyq2073[5] = x.DNSPolicy != ""
			yyq2073[6] = len(x.NodeSelector) != 0
			yyq2073[7] = x.ServiceAccountName != ""
			yyq2073[8] = x.DeprecatedServiceAccount != ""
			yyq2073[9] = x.NodeName != ""
			yyq2073[10] = x.HostNetwork != false
			yyq2073[11] = x.HostPID != false
			yyq2073[12] = x.HostIPC != false
			yyq2073[13] = x.SecurityContext != nil
			yyq2073[14] = len(x.ImagePullSecrets) != 0
			yyq2073[15] = x.Hostname != ""
			yyq2073[16] = x.Subdomain != ""
			yyq2073[17] = x.Affinity != nil
			var yynn2073 int
			if yyr2073 || yy2arr2073 {
				r.EncodeArrayStart(18)
			} else {
				yynn2073 = 1
				for _, b := range yyq2073 {
					if b {
						yynn2073++
					}
				}
				r.EncodeMapStart(yynn2073)
				yynn2073 = 0
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2075 := z.EncBinary()
						_ = yym2075
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2073[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2076 := z.EncBinary()
						_ = yym2076
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2078 := z.EncBinary()
					_ = yym2078
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2079 := z.EncBinary()
					_ = yym2079
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2073[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2082 := *x.TerminationGracePeriodSeconds
						yym2083 := z.EncBinary()
						_ = yym2083
						if false {
						} else {
							r.EncodeInt(int64(yy2082))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2073[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2084 := *x.TerminationGracePeriodSeconds
						yym2085 := z.EncBinary()
						_ = yym2085
						if false {
						} else {
							r.EncodeInt(int64(yy2084))
						}
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2087 := *x.ActiveDeadlineSeconds
						yym2088 := z.EncBinary()
						_ = yym2088
						if false {
						} else {
							r.EncodeInt(int64(yy2087))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2073[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2089 := *x.ActiveDeadlineSeconds
						yym2090 := z.EncBinary()
						_ = yym2090
						if false {
						} else {
							r.EncodeInt(int64(yy2089))
						}
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2073[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2093 := z.EncBinary()
						_ = yym2093
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2073[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2094 := z.EncBinary()
						_ = yym2094
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[7] {
					yym2096 := z.EncBinary()
					_ = yym2096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2073[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2097 := z.EncBinary()
					_ = yym2097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[8] {
					yym2099 := z.EncBinary()
					_ = yym2099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2073[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2100 := z.EncBinary()
					_ = yym2100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[9] {
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2073[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2103 := z.EncBinary()
					_ = yym2103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[10] {
					yym2105 := z.EncBinary()
					_ = yym2105
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2073[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2106 := z.EncBinary()
					_ = yym2106
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[11] {
					yym2108 := z.EncBinary()
					_ = yym2108
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2073[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2109 := z.EncBinary()
					_ = yym2109
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[12] {
					yym2111 := z.EncBinary()
					_ = yym2111
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2073[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2112 := z.EncBinary()
					_ = yym2112
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2073[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2115 := z.EncBinary()
						_ = yym2115
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2073[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2116 := z.EncBinary()
						_ = yym2116
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[15] {
					yym2118 := z.EncBinary()
					_ = yym2118
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2073[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2119 := z.EncBinary()
					_ = yym2119
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[16] {
					yym2121 := z.EncBinary()
					_ = yym2121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2073[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2122 := z.EncBinary()
					_ = yym2122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[17] {
					if x.Affinity == nil {
						r.EncodeNil()
					} else {
						x.Affinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2073[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("affinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Affinity == nil {
						r.EncodeNil()
					} else {
						x.Affinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2124 := z.DecBinary()
	_ = yym2124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2125 := r.ContainerType()
		if yyct2125 == codecSelferValueTypeMap1234 {
			yyl2125 := r.ReadMapStart()
			if yyl2125 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2125, d)
			}
		} else if yyct2125 == codecSelferValueTypeArray1234 {
			yyl2125 := r.ReadArrayStart()
			if yyl2125 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2126Slc
	var yyhl2126 bool = l >= 0
	for yyj2126 := 0; ; yyj2126++ {
		if yyhl2126 {
			if yyj2126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2126Slc = r.DecodeBytes(yys2126Slc, true, true)
		yys2126 := string(yys2126Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2126 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2127 := &x.Volumes
				yym2128 := z.DecBinary()
				_ = yym2128
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2127), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2129 := &x.Containers
				yym2130 := z.DecBinary()
				_ = yym2130
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2129), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2133 := z.DecBinary()
				_ = yym2133
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2135 := z.DecBinary()
				_ = yym2135
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2137 := &x.NodeSelector
				yym2138 := z.DecBinary()
				_ = yym2138
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2137, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2146 := &x.ImagePullSecrets
				yym2147 := z.DecBinary()
				_ = yym2147
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2146), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		case "affinity":
			if r.TryDecodeAsNil() {
				if x.Affinity != nil {
					x.Affinity = nil
				}
			} else {
				if x.Affinity == nil {
					x.Affinity = new(Affinity)
				}
				x.Affinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2126)
		} // end switch yys2126
	} // end for yyj2126
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2151 int
	var yyb2151 bool
	var yyhl2151 bool = l >= 0
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2152 := &x.Volumes
		yym2153 := z.DecBinary()
		_ = yym2153
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2152), d)
		}
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2154 := &x.Containers
		yym2155 := z.DecBinary()
		_ = yym2155
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2154), d)
		}
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2158 := z.DecBinary()
		_ = yym2158
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2160 := z.DecBinary()
		_ = yym2160
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2162 := &x.NodeSelector
		yym2163 := z.DecBinary()
		_ = yym2163
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2162, false, d)
		}
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2171 := &x.ImagePullSecrets
		yym2172 := z.DecBinary()
		_ = yym2172
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2171), d)
		}
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Affinity != nil {
			x.Affinity = nil
		}
	} else {
		if x.Affinity == nil {
			x.Affinity = new(Affinity)
		}
		x.Affinity.CodecDecodeSelf(d)
	}
	for {
		yyj2151++
		if yyhl2151 {
			yyb2151 = yyj2151 > l
		} else {
			yyb2151 = r.CheckBreak()
		}
		if yyb2151 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2151-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2176 := z.EncBinary()
		_ = yym2176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2177 := !z.EncBinary()
			yy2arr2177 := z.EncBasicHandle().StructToArray
			var yyq2177 [5]bool
			_, _, _ = yysep2177, yyq2177, yy2arr2177
			const yyr2177 bool = false
			yyq2177[0] = x.SELinuxOptions != nil
			yyq2177[1] = x.RunAsUser != nil
			yyq2177[2] = x.RunAsNonRoot != nil
			yyq2177[3] = len(x.SupplementalGroups) != 0
			yyq2177[4] = x.FSGroup != nil
			var yynn2177 int
			if yyr2177 || yy2arr2177 {
				r.EncodeArrayStart(5)
			} else {
				yynn2177 = 0
				for _, b := range yyq2177 {
					if b {
						yynn2177++
					}
				}
				r.EncodeMapStart(yynn2177)
				yynn2177 = 0
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2177[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2177[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2177[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2180 := *x.RunAsUser
						yym2181 := z.EncBinary()
						_ = yym2181
						if false {
						} else {
							r.EncodeInt(int64(yy2180))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2177[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2182 := *x.RunAsUser
						yym2183 := z.EncBinary()
						_ = yym2183
						if false {
						} else {
							r.EncodeInt(int64(yy2182))
						}
					}
				}
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2177[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2185 := *x.RunAsNonRoot
						yym2186 := z.EncBinary()
						_ = yym2186
						if false {
						} else {
							r.EncodeBool(bool(yy2185))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2177[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2187 := *x.RunAsNonRoot
						yym2188 := z.EncBinary()
						_ = yym2188
						if false {
						} else {
							r.EncodeBool(bool(yy2187))
						}
					}
				}
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2177[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2190 := z.EncBinary()
						_ = yym2190
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2177[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2191 := z.EncBinary()
						_ = yym2191
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2177[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2193 := *x.FSGroup
						yym2194 := z.EncBinary()
						_ = yym2194
						if false {
						} else {
							r.EncodeInt(int64(yy2193))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2177[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2195 := *x.FSGroup
						yym2196 := z.EncBinary()
						_ = yym2196
						if false {
						} else {
							r.EncodeInt(int64(yy2195))
						}
					}
				}
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2197 := z.DecBinary()
	_ = yym2197
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2198 := r.ContainerType()
		if yyct2198 == codecSelferValueTypeMap1234 {
			yyl2198 := r.ReadMapStart()
			if yyl2198 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2198, d)
			}
		} else if yyct2198 == codecSelferValueTypeArray1234 {
			yyl2198 := r.ReadArrayStart()
			if yyl2198 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2198, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2199Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2199Slc
	var yyhl2199 bool = l >= 0
	for yyj2199 := 0; ; yyj2199++ {
		if yyhl2199 {
			if yyj2199 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2199Slc = r.DecodeBytes(yys2199Slc, true, true)
		yys2199 := string(yys2199Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2199 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2202 := z.DecBinary()
				_ = yym2202
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2204 := z.DecBinary()
				_ = yym2204
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2205 := &x.SupplementalGroups
				yym2206 := z.DecBinary()
				_ = yym2206
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2205, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2208 := z.DecBinary()
				_ = yym2208
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2199)
		} // end switch yys2199
	} // end for yyj2199
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2209 int
	var yyb2209 bool
	var yyhl2209 bool = l >= 0
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2212 := z.DecBinary()
		_ = yym2212
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2214 := z.DecBinary()
		_ = yym2214
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2215 := &x.SupplementalGroups
		yym2216 := z.DecBinary()
		_ = yym2216
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2215, false, d)
		}
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2218 := z.DecBinary()
		_ = yym2218
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2209++
		if yyhl2209 {
			yyb2209 = yyj2209 > l
		} else {
			yyb2209 = r.CheckBreak()
		}
		if yyb2209 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2209-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodQOSClass) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2219 := z.EncBinary()
	_ = yym2219
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodQOSClass) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2220 := z.DecBinary()
	_ = yym2220
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2221 := z.EncBinary()
		_ = yym2221
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2222 := !z.EncBinary()
			yy2arr2222 := z.EncBasicHandle().StructToArray
			var yyq2222 [9]bool
			_, _, _ = yysep2222, yyq2222, yy2arr2222
			const yyr2222 bool = false
			yyq2222[0] = x.Phase != ""
			yyq2222[1] = len(x.Conditions) != 0
			yyq2222[2] = x.Message != ""
			yyq2222[3] = x.Reason != ""
			yyq2222[4] = x.HostIP != ""
			yyq2222[5] = x.PodIP != ""
			yyq2222[6] = x.StartTime != nil
			yyq2222[7] = len(x.ContainerStatuses) != 0
			yyq2222[8] = x.QOSClass != ""
			var yynn2222 int
			if yyr2222 || yy2arr2222 {
				r.EncodeArrayStart(9)
			} else {
				yynn2222 = 0
				for _, b := range yyq2222 {
					if b {
						yynn2222++
					}
				}
				r.EncodeMapStart(yynn2222)
				yynn2222 = 0
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2222[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2225 := z.EncBinary()
						_ = yym2225
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2222[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2226 := z.EncBinary()
						_ = yym2226
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[2] {
					yym2228 := z.EncBinary()
					_ = yym2228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2222[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2229 := z.EncBinary()
					_ = yym2229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[3] {
					yym2231 := z.EncBinary()
					_ = yym2231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2222[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2232 := z.EncBinary()
					_ = yym2232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[4] {
					yym2234 := z.EncBinary()
					_ = yym2234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2222[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2235 := z.EncBinary()
					_ = yym2235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[5] {
					yym2237 := z.EncBinary()
					_ = yym2237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2222[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2238 := z.EncBinary()
					_ = yym2238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2240 := z.EncBinary()
						_ = yym2240
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2240 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2240 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2222[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2241 := z.EncBinary()
						_ = yym2241
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2241 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2241 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2243 := z.EncBinary()
						_ = yym2243
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2222[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2244 := z.EncBinary()
						_ = yym2244
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[8] {
					x.QOSClass.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2222[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("qosClass"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.QOSClass.CodecEncodeSelf(e)
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2246 := z.DecBinary()
	_ = yym2246
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2247 := r.ContainerType()
		if yyct2247 == codecSelferValueTypeMap1234 {
			yyl2247 := r.ReadMapStart()
			if yyl2247 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2247, d)
			}
		} else if yyct2247 == codecSelferValueTypeArray1234 {
			yyl2247 := r.ReadArrayStart()
			if yyl2247 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2247, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2248Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2248Slc
	var yyhl2248 bool = l >= 0
	for yyj2248 := 0; ; yyj2248++ {
		if yyhl2248 {
			if yyj2248 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2248Slc = r.DecodeBytes(yys2248Slc, true, true)
		yys2248 := string(yys2248Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2248 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2250 := &x.Conditions
				yym2251 := z.DecBinary()
				_ = yym2251
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2250), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_v1.Time)
				}
				yym2257 := z.DecBinary()
				_ = yym2257
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2257 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2257 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2258 := &x.ContainerStatuses
				yym2259 := z.DecBinary()
				_ = yym2259
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2258), d)
				}
			}
		case "qosClass":
			if r.TryDecodeAsNil() {
				x.QOSClass = ""
			} else {
				x.QOSClass = PodQOSClass(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2248)
		} // end switch yys2248
	} // end for yyj2248
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2261 int
	var yyb2261 bool
	var yyhl2261 bool = l >= 0
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2263 := &x.Conditions
		yym2264 := z.DecBinary()
		_ = yym2264
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2263), d)
		}
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_v1.Time)
		}
		yym2270 := z.DecBinary()
		_ = yym2270
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2270 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2270 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2271 := &x.ContainerStatuses
		yym2272 := z.DecBinary()
		_ = yym2272
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2271), d)
		}
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.QOSClass = ""
	} else {
		x.QOSClass = PodQOSClass(r.DecodeString())
	}
	for {
		yyj2261++
		if yyhl2261 {
			yyb2261 = yyj2261 > l
		} else {
			yyb2261 = r.CheckBreak()
		}
		if yyb2261 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2261-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2274 := z.EncBinary()
		_ = yym2274
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2275 := !z.EncBinary()
			yy2arr2275 := z.EncBasicHandle().StructToArray
			var yyq2275 [4]bool
			_, _, _ = yysep2275, yyq2275, yy2arr2275
			const yyr2275 bool = false
			yyq2275[0] = x.Kind != ""
			yyq2275[1] = x.APIVersion != ""
			yyq2275[2] = true
			yyq2275[3] = true
			var yynn2275 int
			if yyr2275 || yy2arr2275 {
				r.EncodeArrayStart(4)
			} else {
				yynn2275 = 0
				for _, b := range yyq2275 {
					if b {
						yynn2275++
					}
				}
				r.EncodeMapStart(yynn2275)
				yynn2275 = 0
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[0] {
					yym2277 := z.EncBinary()
					_ = yym2277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2275[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2278 := z.EncBinary()
					_ = yym2278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[1] {
					yym2280 := z.EncBinary()
					_ = yym2280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2275[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2281 := z.EncBinary()
					_ = yym2281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[2] {
					yy2283 := &x.ObjectMeta
					yy2283.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2275[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2284 := &x.ObjectMeta
					yy2284.CodecEncodeSelf(e)
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[3] {
					yy2286 := &x.Status
					yy2286.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2275[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2287 := &x.Status
					yy2287.CodecEncodeSelf(e)
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2288 := z.DecBinary()
	_ = yym2288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2289 := r.ContainerType()
		if yyct2289 == codecSelferValueTypeMap1234 {
			yyl2289 := r.ReadMapStart()
			if yyl2289 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2289, d)
			}
		} else if yyct2289 == codecSelferValueTypeArray1234 {
			yyl2289 := r.ReadArrayStart()
			if yyl2289 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2289, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2290Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2290Slc
	var yyhl2290 bool = l >= 0
	for yyj2290 := 0; ; yyj2290++ {
		if yyhl2290 {
			if yyj2290 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2290Slc = r.DecodeBytes(yys2290Slc, true, true)
		yys2290 := string(yys2290Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2290 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2293 := &x.ObjectMeta
				yyv2293.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2294 := &x.Status
				yyv2294.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2290)
		} // end switch yys2290
	} // end for yyj2290
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2295 int
	var yyb2295 bool
	var yyhl2295 bool = l >= 0
	yyj2295++
	if yyhl2295 {
		yyb2295 = yyj2295 > l
	} else {
		yyb2295 = r.CheckBreak()
	}
	if yyb2295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2295++
	if yyhl2295 {
		yyb2295 = yyj2295 > l
	} else {
		yyb2295 = r.CheckBreak()
	}
	if yyb2295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2295++
	if yyhl2295 {
		yyb2295 = yyj2295 > l
	} else {
		yyb2295 = r.CheckBreak()
	}
	if yyb2295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2298 := &x.ObjectMeta
		yyv2298.CodecDecodeSelf(d)
	}
	yyj2295++
	if yyhl2295 {
		yyb2295 = yyj2295 > l
	} else {
		yyb2295 = r.CheckBreak()
	}
	if yyb2295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2299 := &x.Status
		yyv2299.CodecDecodeSelf(d)
	}
	for {
		yyj2295++
		if yyhl2295 {
			yyb2295 = yyj2295 > l
		} else {
			yyb2295 = r.CheckBreak()
		}
		if yyb2295 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2295-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2300 := z.EncBinary()
		_ = yym2300
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2301 := !z.EncBinary()
			yy2arr2301 := z.EncBasicHandle().StructToArray
			var yyq2301 [5]bool
			_, _, _ = yysep2301, yyq2301, yy2arr2301
			const yyr2301 bool = false
			yyq2301[0] = x.Kind != ""
			yyq2301[1] = x.APIVersion != ""
			yyq2301[2] = true
			yyq2301[3] = true
			yyq2301[4] = true
			var yynn2301 int
			if yyr2301 || yy2arr2301 {
				r.EncodeArrayStart(5)
			} else {
				yynn2301 = 0
				for _, b := range yyq2301 {
					if b {
						yynn2301++
					}
				}
				r.EncodeMapStart(yynn2301)
				yynn2301 = 0
			}
			if yyr2301 || yy2arr2301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2301[0] {
					yym2303 := z.EncBinary()
					_ = yym2303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2301[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2304 := z.EncBinary()
					_ = yym2304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2301 || yy2arr2301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2301[1] {
					yym2306 := z.EncBinary()
					_ = yym2306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2301[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2307 := z.EncBinary()
					_ = yym2307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2301 || yy2arr2301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2301[2] {
					yy2309 := &x.ObjectMeta
					yy2309.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2301[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2310 := &x.ObjectMeta
					yy2310.CodecEncodeSelf(e)
				}
			}
			if yyr2301 || yy2arr2301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2301[3] {
					yy2312 := &x.Spec
					yy2312.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2301[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2313 := &x.Spec
					yy2313.CodecEncodeSelf(e)
				}
			}
			if yyr2301 || yy2arr2301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2301[4] {
					yy2315 := &x.Status
					yy2315.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2301[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2316 := &x.Status
					yy2316.CodecEncodeSelf(e)
				}
			}
			if yyr2301 || yy2arr2301 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2317 := z.DecBinary()
	_ = yym2317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2318 := r.ContainerType()
		if yyct2318 == codecSelferValueTypeMap1234 {
			yyl2318 := r.ReadMapStart()
			if yyl2318 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2318, d)
			}
		} else if yyct2318 == codecSelferValueTypeArray1234 {
			yyl2318 := r.ReadArrayStart()
			if yyl2318 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2318, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2319Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2319Slc
	var yyhl2319 bool = l >= 0
	for yyj2319 := 0; ; yyj2319++ {
		if yyhl2319 {
			if yyj2319 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2319Slc = r.DecodeBytes(yys2319Slc, true, true)
		yys2319 := string(yys2319Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2319 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2322 := &x.ObjectMeta
				yyv2322.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2323 := &x.Spec
				yyv2323.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2324 := &x.Status
				yyv2324.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2319)
		} // end switch yys2319
	} // end for yyj2319
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2325 int
	var yyb2325 bool
	var yyhl2325 bool = l >= 0
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2328 := &x.ObjectMeta
		yyv2328.CodecDecodeSelf(d)
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2329 := &x.Spec
		yyv2329.CodecDecodeSelf(d)
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2330 := &x.Status
		yyv2330.CodecDecodeSelf(d)
	}
	for {
		yyj2325++
		if yyhl2325 {
			yyb2325 = yyj2325 > l
		} else {
			yyb2325 = r.CheckBreak()
		}
		if yyb2325 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2325-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2331 := z.EncBinary()
		_ = yym2331
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2332 := !z.EncBinary()
			yy2arr2332 := z.EncBasicHandle().StructToArray
			var yyq2332 [4]bool
			_, _, _ = yysep2332, yyq2332, yy2arr2332
			const yyr2332 bool = false
			yyq2332[0] = x.Kind != ""
			yyq2332[1] = x.APIVersion != ""
			yyq2332[2] = true
			var yynn2332 int
			if yyr2332 || yy2arr2332 {
				r.EncodeArrayStart(4)
			} else {
				yynn2332 = 1
				for _, b := range yyq2332 {
					if b {
						yynn2332++
					}
				}
				r.EncodeMapStart(yynn2332)
				yynn2332 = 0
			}
			if yyr2332 || yy2arr2332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2332[0] {
					yym2334 := z.EncBinary()
					_ = yym2334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2332[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2335 := z.EncBinary()
					_ = yym2335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2332 || yy2arr2332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2332[1] {
					yym2337 := z.EncBinary()
					_ = yym2337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2332[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2338 := z.EncBinary()
					_ = yym2338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2332 || yy2arr2332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2332[2] {
					yy2340 := &x.ListMeta
					yym2341 := z.EncBinary()
					_ = yym2341
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2340) {
					} else {
						z.EncFallback(yy2340)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2332[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2342 := &x.ListMeta
					yym2343 := z.EncBinary()
					_ = yym2343
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2342) {
					} else {
						z.EncFallback(yy2342)
					}
				}
			}
			if yyr2332 || yy2arr2332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2345 := z.EncBinary()
					_ = yym2345
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2346 := z.EncBinary()
					_ = yym2346
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2332 || yy2arr2332 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2347 := z.DecBinary()
	_ = yym2347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2348 := r.ContainerType()
		if yyct2348 == codecSelferValueTypeMap1234 {
			yyl2348 := r.ReadMapStart()
			if yyl2348 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2348, d)
			}
		} else if yyct2348 == codecSelferValueTypeArray1234 {
			yyl2348 := r.ReadArrayStart()
			if yyl2348 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2348, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2349Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2349Slc
	var yyhl2349 bool = l >= 0
	for yyj2349 := 0; ; yyj2349++ {
		if yyhl2349 {
			if yyj2349 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2349Slc = r.DecodeBytes(yys2349Slc, true, true)
		yys2349 := string(yys2349Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2349 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2352 := &x.ListMeta
				yym2353 := z.DecBinary()
				_ = yym2353
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2352) {
				} else {
					z.DecFallback(yyv2352, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2354 := &x.Items
				yym2355 := z.DecBinary()
				_ = yym2355
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2354), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2349)
		} // end switch yys2349
	} // end for yyj2349
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2356 int
	var yyb2356 bool
	var yyhl2356 bool = l >= 0
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2359 := &x.ListMeta
		yym2360 := z.DecBinary()
		_ = yym2360
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2359) {
		} else {
			z.DecFallback(yyv2359, false)
		}
	}
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2361 := &x.Items
		yym2362 := z.DecBinary()
		_ = yym2362
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2361), d)
		}
	}
	for {
		yyj2356++
		if yyhl2356 {
			yyb2356 = yyj2356 > l
		} else {
			yyb2356 = r.CheckBreak()
		}
		if yyb2356 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2356-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2363 := z.EncBinary()
		_ = yym2363
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2364 := !z.EncBinary()
			yy2arr2364 := z.EncBasicHandle().StructToArray
			var yyq2364 [2]bool
			_, _, _ = yysep2364, yyq2364, yy2arr2364
			const yyr2364 bool = false
			yyq2364[0] = true
			yyq2364[1] = true
			var yynn2364 int
			if yyr2364 || yy2arr2364 {
				r.EncodeArrayStart(2)
			} else {
				yynn2364 = 0
				for _, b := range yyq2364 {
					if b {
						yynn2364++
					}
				}
				r.EncodeMapStart(yynn2364)
				yynn2364 = 0
			}
			if yyr2364 || yy2arr2364 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2364[0] {
					yy2366 := &x.ObjectMeta
					yy2366.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2364[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2367 := &x.ObjectMeta
					yy2367.CodecEncodeSelf(e)
				}
			}
			if yyr2364 || yy2arr2364 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2364[1] {
					yy2369 := &x.Spec
					yy2369.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2364[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2370 := &x.Spec
					yy2370.CodecEncodeSelf(e)
				}
			}
			if yyr2364 || yy2arr2364 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2371 := z.DecBinary()
	_ = yym2371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2372 := r.ContainerType()
		if yyct2372 == codecSelferValueTypeMap1234 {
			yyl2372 := r.ReadMapStart()
			if yyl2372 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2372, d)
			}
		} else if yyct2372 == codecSelferValueTypeArray1234 {
			yyl2372 := r.ReadArrayStart()
			if yyl2372 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2373Slc
	var yyhl2373 bool = l >= 0
	for yyj2373 := 0; ; yyj2373++ {
		if yyhl2373 {
			if yyj2373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2373Slc = r.DecodeBytes(yys2373Slc, true, true)
		yys2373 := string(yys2373Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2373 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2374 := &x.ObjectMeta
				yyv2374.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2375 := &x.Spec
				yyv2375.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2373)
		} // end switch yys2373
	} // end for yyj2373
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2376 int
	var yyb2376 bool
	var yyhl2376 bool = l >= 0
	yyj2376++
	if yyhl2376 {
		yyb2376 = yyj2376 > l
	} else {
		yyb2376 = r.CheckBreak()
	}
	if yyb2376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2377 := &x.ObjectMeta
		yyv2377.CodecDecodeSelf(d)
	}
	yyj2376++
	if yyhl2376 {
		yyb2376 = yyj2376 > l
	} else {
		yyb2376 = r.CheckBreak()
	}
	if yyb2376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2378 := &x.Spec
		yyv2378.CodecDecodeSelf(d)
	}
	for {
		yyj2376++
		if yyhl2376 {
			yyb2376 = yyj2376 > l
		} else {
			yyb2376 = r.CheckBreak()
		}
		if yyb2376 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2376-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2379 := z.EncBinary()
		_ = yym2379
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2380 := !z.EncBinary()
			yy2arr2380 := z.EncBasicHandle().StructToArray
			var yyq2380 [4]bool
			_, _, _ = yysep2380, yyq2380, yy2arr2380
			const yyr2380 bool = false
			yyq2380[0] = x.Kind != ""
			yyq2380[1] = x.APIVersion != ""
			yyq2380[2] = true
			yyq2380[3] = true
			var yynn2380 int
			if yyr2380 || yy2arr2380 {
				r.EncodeArrayStart(4)
			} else {
				yynn2380 = 0
				for _, b := range yyq2380 {
					if b {
						yynn2380++
					}
				}
				r.EncodeMapStart(yynn2380)
				yynn2380 = 0
			}
			if yyr2380 || yy2arr2380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2380[0] {
					yym2382 := z.EncBinary()
					_ = yym2382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2380[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2383 := z.EncBinary()
					_ = yym2383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2380 || yy2arr2380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2380[1] {
					yym2385 := z.EncBinary()
					_ = yym2385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2380[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2386 := z.EncBinary()
					_ = yym2386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2380 || yy2arr2380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2380[2] {
					yy2388 := &x.ObjectMeta
					yy2388.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2380[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2389 := &x.ObjectMeta
					yy2389.CodecEncodeSelf(e)
				}
			}
			if yyr2380 || yy2arr2380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2380[3] {
					yy2391 := &x.Template
					yy2391.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2380[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2392 := &x.Template
					yy2392.CodecEncodeSelf(e)
				}
			}
			if yyr2380 || yy2arr2380 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2393 := z.DecBinary()
	_ = yym2393
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2394 := r.ContainerType()
		if yyct2394 == codecSelferValueTypeMap1234 {
			yyl2394 := r.ReadMapStart()
			if yyl2394 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2394, d)
			}
		} else if yyct2394 == codecSelferValueTypeArray1234 {
			yyl2394 := r.ReadArrayStart()
			if yyl2394 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2394, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2395Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2395Slc
	var yyhl2395 bool = l >= 0
	for yyj2395 := 0; ; yyj2395++ {
		if yyhl2395 {
			if yyj2395 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2395Slc = r.DecodeBytes(yys2395Slc, true, true)
		yys2395 := string(yys2395Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2395 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2398 := &x.ObjectMeta
				yyv2398.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2399 := &x.Template
				yyv2399.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2395)
		} // end switch yys2395
	} // end for yyj2395
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2400 int
	var yyb2400 bool
	var yyhl2400 bool = l >= 0
	yyj2400++
	if yyhl2400 {
		yyb2400 = yyj2400 > l
	} else {
		yyb2400 = r.CheckBreak()
	}
	if yyb2400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2400++
	if yyhl2400 {
		yyb2400 = yyj2400 > l
	} else {
		yyb2400 = r.CheckBreak()
	}
	if yyb2400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2400++
	if yyhl2400 {
		yyb2400 = yyj2400 > l
	} else {
		yyb2400 = r.CheckBreak()
	}
	if yyb2400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2403 := &x.ObjectMeta
		yyv2403.CodecDecodeSelf(d)
	}
	yyj2400++
	if yyhl2400 {
		yyb2400 = yyj2400 > l
	} else {
		yyb2400 = r.CheckBreak()
	}
	if yyb2400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2404 := &x.Template
		yyv2404.CodecDecodeSelf(d)
	}
	for {
		yyj2400++
		if yyhl2400 {
			yyb2400 = yyj2400 > l
		} else {
			yyb2400 = r.CheckBreak()
		}
		if yyb2400 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2400-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2405 := z.EncBinary()
		_ = yym2405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2406 := !z.EncBinary()
			yy2arr2406 := z.EncBasicHandle().StructToArray
			var yyq2406 [4]bool
			_, _, _ = yysep2406, yyq2406, yy2arr2406
			const yyr2406 bool = false
			yyq2406[0] = x.Kind != ""
			yyq2406[1] = x.APIVersion != ""
			yyq2406[2] = true
			var yynn2406 int
			if yyr2406 || yy2arr2406 {
				r.EncodeArrayStart(4)
			} else {
				yynn2406 = 1
				for _, b := range yyq2406 {
					if b {
						yynn2406++
					}
				}
				r.EncodeMapStart(yynn2406)
				yynn2406 = 0
			}
			if yyr2406 || yy2arr2406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2406[0] {
					yym2408 := z.EncBinary()
					_ = yym2408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2406[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2409 := z.EncBinary()
					_ = yym2409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2406 || yy2arr2406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2406[1] {
					yym2411 := z.EncBinary()
					_ = yym2411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2406[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2412 := z.EncBinary()
					_ = yym2412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2406 || yy2arr2406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2406[2] {
					yy2414 := &x.ListMeta
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2414) {
					} else {
						z.EncFallback(yy2414)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2406[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2416 := &x.ListMeta
					yym2417 := z.EncBinary()
					_ = yym2417
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2416) {
					} else {
						z.EncFallback(yy2416)
					}
				}
			}
			if yyr2406 || yy2arr2406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2420 := z.EncBinary()
					_ = yym2420
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2406 || yy2arr2406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2421 := z.DecBinary()
	_ = yym2421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2422 := r.ContainerType()
		if yyct2422 == codecSelferValueTypeMap1234 {
			yyl2422 := r.ReadMapStart()
			if yyl2422 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2422, d)
			}
		} else if yyct2422 == codecSelferValueTypeArray1234 {
			yyl2422 := r.ReadArrayStart()
			if yyl2422 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2423Slc
	var yyhl2423 bool = l >= 0
	for yyj2423 := 0; ; yyj2423++ {
		if yyhl2423 {
			if yyj2423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2423Slc = r.DecodeBytes(yys2423Slc, true, true)
		yys2423 := string(yys2423Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2423 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2426 := &x.ListMeta
				yym2427 := z.DecBinary()
				_ = yym2427
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2426) {
				} else {
					z.DecFallback(yyv2426, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2428 := &x.Items
				yym2429 := z.DecBinary()
				_ = yym2429
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2428), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2423)
		} // end switch yys2423
	} // end for yyj2423
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2430 int
	var yyb2430 bool
	var yyhl2430 bool = l >= 0
	yyj2430++
	if yyhl2430 {
		yyb2430 = yyj2430 > l
	} else {
		yyb2430 = r.CheckBreak()
	}
	if yyb2430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2430++
	if yyhl2430 {
		yyb2430 = yyj2430 > l
	} else {
		yyb2430 = r.CheckBreak()
	}
	if yyb2430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2430++
	if yyhl2430 {
		yyb2430 = yyj2430 > l
	} else {
		yyb2430 = r.CheckBreak()
	}
	if yyb2430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2433 := &x.ListMeta
		yym2434 := z.DecBinary()
		_ = yym2434
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2433) {
		} else {
			z.DecFallback(yyv2433, false)
		}
	}
	yyj2430++
	if yyhl2430 {
		yyb2430 = yyj2430 > l
	} else {
		yyb2430 = r.CheckBreak()
	}
	if yyb2430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2435 := &x.Items
		yym2436 := z.DecBinary()
		_ = yym2436
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2435), d)
		}
	}
	for {
		yyj2430++
		if yyhl2430 {
			yyb2430 = yyj2430 > l
		} else {
			yyb2430 = r.CheckBreak()
		}
		if yyb2430 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2430-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2437 := z.EncBinary()
		_ = yym2437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2438 := !z.EncBinary()
			yy2arr2438 := z.EncBasicHandle().StructToArray
			var yyq2438 [4]bool
			_, _, _ = yysep2438, yyq2438, yy2arr2438
			const yyr2438 bool = false
			yyq2438[0] = x.Replicas != nil
			yyq2438[1] = x.MinReadySeconds != 0
			yyq2438[2] = len(x.Selector) != 0
			yyq2438[3] = x.Template != nil
			var yynn2438 int
			if yyr2438 || yy2arr2438 {
				r.EncodeArrayStart(4)
			} else {
				yynn2438 = 0
				for _, b := range yyq2438 {
					if b {
						yynn2438++
					}
				}
				r.EncodeMapStart(yynn2438)
				yynn2438 = 0
			}
			if yyr2438 || yy2arr2438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2438[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2440 := *x.Replicas
						yym2441 := z.EncBinary()
						_ = yym2441
						if false {
						} else {
							r.EncodeInt(int64(yy2440))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2438[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2442 := *x.Replicas
						yym2443 := z.EncBinary()
						_ = yym2443
						if false {
						} else {
							r.EncodeInt(int64(yy2442))
						}
					}
				}
			}
			if yyr2438 || yy2arr2438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2438[1] {
					yym2445 := z.EncBinary()
					_ = yym2445
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2438[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2446 := z.EncBinary()
					_ = yym2446
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr2438 || yy2arr2438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2438[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2448 := z.EncBinary()
						_ = yym2448
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2438[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2449 := z.EncBinary()
						_ = yym2449
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2438 || yy2arr2438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2438[3] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2438[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2438 || yy2arr2438 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2451 := z.DecBinary()
	_ = yym2451
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2452 := r.ContainerType()
		if yyct2452 == codecSelferValueTypeMap1234 {
			yyl2452 := r.ReadMapStart()
			if yyl2452 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2452, d)
			}
		} else if yyct2452 == codecSelferValueTypeArray1234 {
			yyl2452 := r.ReadArrayStart()
			if yyl2452 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2452, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2453Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2453Slc
	var yyhl2453 bool = l >= 0
	for yyj2453 := 0; ; yyj2453++ {
		if yyhl2453 {
			if yyj2453 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2453Slc = r.DecodeBytes(yys2453Slc, true, true)
		yys2453 := string(yys2453Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2453 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2455 := z.DecBinary()
				_ = yym2455
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2457 := &x.Selector
				yym2458 := z.DecBinary()
				_ = yym2458
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2457, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2453)
		} // end switch yys2453
	} // end for yyj2453
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2460 int
	var yyb2460 bool
	var yyhl2460 bool = l >= 0
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2462 := z.DecBinary()
		_ = yym2462
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2464 := &x.Selector
		yym2465 := z.DecBinary()
		_ = yym2465
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2464, false, d)
		}
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2460++
		if yyhl2460 {
			yyb2460 = yyj2460 > l
		} else {
			yyb2460 = r.CheckBreak()
		}
		if yyb2460 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2460-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2467 := z.EncBinary()
		_ = yym2467
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2468 := !z.EncBinary()
			yy2arr2468 := z.EncBasicHandle().StructToArray
			var yyq2468 [6]bool
			_, _, _ = yysep2468, yyq2468, yy2arr2468
			const yyr2468 bool = false
			yyq2468[1] = x.FullyLabeledReplicas != 0
			yyq2468[2] = x.ReadyReplicas != 0
			yyq2468[3] = x.AvailableReplicas != 0
			yyq2468[4] = x.ObservedGeneration != 0
			yyq2468[5] = len(x.Conditions) != 0
			var yynn2468 int
			if yyr2468 || yy2arr2468 {
				r.EncodeArrayStart(6)
			} else {
				yynn2468 = 1
				for _, b := range yyq2468 {
					if b {
						yynn2468++
					}
				}
				r.EncodeMapStart(yynn2468)
				yynn2468 = 0
			}
			if yyr2468 || yy2arr2468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2470 := z.EncBinary()
				_ = yym2470
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2471 := z.EncBinary()
				_ = yym2471
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2468 || yy2arr2468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2468[1] {
					yym2473 := z.EncBinary()
					_ = yym2473
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2468[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2474 := z.EncBinary()
					_ = yym2474
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2468 || yy2arr2468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2468[2] {
					yym2476 := z.EncBinary()
					_ = yym2476
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2468[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2477 := z.EncBinary()
					_ = yym2477
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2468 || yy2arr2468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2468[3] {
					yym2479 := z.EncBinary()
					_ = yym2479
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2468[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2480 := z.EncBinary()
					_ = yym2480
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr2468 || yy2arr2468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2468[4] {
					yym2482 := z.EncBinary()
					_ = yym2482
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2468[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2483 := z.EncBinary()
					_ = yym2483
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2468 || yy2arr2468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2468[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2485 := z.EncBinary()
						_ = yym2485
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2468[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2486 := z.EncBinary()
						_ = yym2486
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2468 || yy2arr2468 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2487 := z.DecBinary()
	_ = yym2487
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2488 := r.ContainerType()
		if yyct2488 == codecSelferValueTypeMap1234 {
			yyl2488 := r.ReadMapStart()
			if yyl2488 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2488, d)
			}
		} else if yyct2488 == codecSelferValueTypeArray1234 {
			yyl2488 := r.ReadArrayStart()
			if yyl2488 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2488, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2489Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2489Slc
	var yyhl2489 bool = l >= 0
	for yyj2489 := 0; ; yyj2489++ {
		if yyhl2489 {
			if yyj2489 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2489Slc = r.DecodeBytes(yys2489Slc, true, true)
		yys2489 := string(yys2489Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2489 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2495 := &x.Conditions
				yym2496 := z.DecBinary()
				_ = yym2496
				if false {
				} else {
					h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2495), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2489)
		} // end switch yys2489
	} // end for yyj2489
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2497 int
	var yyb2497 bool
	var yyhl2497 bool = l >= 0
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2503 := &x.Conditions
		yym2504 := z.DecBinary()
		_ = yym2504
		if false {
		} else {
			h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2503), d)
		}
	}
	for {
		yyj2497++
		if yyhl2497 {
			yyb2497 = yyj2497 > l
		} else {
			yyb2497 = r.CheckBreak()
		}
		if yyb2497 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2497-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicationControllerConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2505 := z.EncBinary()
	_ = yym2505
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicationControllerConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2506 := z.DecBinary()
	_ = yym2506
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicationControllerCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2507 := z.EncBinary()
		_ = yym2507
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2508 := !z.EncBinary()
			yy2arr2508 := z.EncBasicHandle().StructToArray
			var yyq2508 [5]bool
			_, _, _ = yysep2508, yyq2508, yy2arr2508
			const yyr2508 bool = false
			yyq2508[2] = true
			yyq2508[3] = x.Reason != ""
			yyq2508[4] = x.Message != ""
			var yynn2508 int
			if yyr2508 || yy2arr2508 {
				r.EncodeArrayStart(5)
			} else {
				yynn2508 = 2
				for _, b := range yyq2508 {
					if b {
						yynn2508++
					}
				}
				r.EncodeMapStart(yynn2508)
				yynn2508 = 0
			}
			if yyr2508 || yy2arr2508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2508 || yy2arr2508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2508 || yy2arr2508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2508[2] {
					yy2512 := &x.LastTransitionTime
					yym2513 := z.EncBinary()
					_ = yym2513
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2512) {
					} else if yym2513 {
						z.EncBinaryMarshal(yy2512)
					} else if !yym2513 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2512)
					} else {
						z.EncFallback(yy2512)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2508[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2514 := &x.LastTransitionTime
					yym2515 := z.EncBinary()
					_ = yym2515
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2514) {
					} else if yym2515 {
						z.EncBinaryMarshal(yy2514)
					} else if !yym2515 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2514)
					} else {
						z.EncFallback(yy2514)
					}
				}
			}
			if yyr2508 || yy2arr2508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2508[3] {
					yym2517 := z.EncBinary()
					_ = yym2517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2508[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2518 := z.EncBinary()
					_ = yym2518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2508 || yy2arr2508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2508[4] {
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2508[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2521 := z.EncBinary()
					_ = yym2521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2508 || yy2arr2508 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2522 := z.DecBinary()
	_ = yym2522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2523 := r.ContainerType()
		if yyct2523 == codecSelferValueTypeMap1234 {
			yyl2523 := r.ReadMapStart()
			if yyl2523 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2523, d)
			}
		} else if yyct2523 == codecSelferValueTypeArray1234 {
			yyl2523 := r.ReadArrayStart()
			if yyl2523 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2523, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2524Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2524Slc
	var yyhl2524 bool = l >= 0
	for yyj2524 := 0; ; yyj2524++ {
		if yyhl2524 {
			if yyj2524 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2524Slc = r.DecodeBytes(yys2524Slc, true, true)
		yys2524 := string(yys2524Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2524 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicationControllerConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_v1.Time{}
			} else {
				yyv2527 := &x.LastTransitionTime
				yym2528 := z.DecBinary()
				_ = yym2528
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2527) {
				} else if yym2528 {
					z.DecBinaryUnmarshal(yyv2527)
				} else if !yym2528 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2527)
				} else {
					z.DecFallback(yyv2527, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2524)
		} // end switch yys2524
	} // end for yyj2524
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2531 int
	var yyb2531 bool
	var yyhl2531 bool = l >= 0
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicationControllerConditionType(r.DecodeString())
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_v1.Time{}
	} else {
		yyv2534 := &x.LastTransitionTime
		yym2535 := z.DecBinary()
		_ = yym2535
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2534) {
		} else if yym2535 {
			z.DecBinaryUnmarshal(yyv2534)
		} else if !yym2535 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2534)
		} else {
			z.DecFallback(yyv2534, false)
		}
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2531++
		if yyhl2531 {
			yyb2531 = yyj2531 > l
		} else {
			yyb2531 = r.CheckBreak()
		}
		if yyb2531 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2531-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2538 := z.EncBinary()
		_ = yym2538
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2539 := !z.EncBinary()
			yy2arr2539 := z.EncBasicHandle().StructToArray
			var yyq2539 [5]bool
			_, _, _ = yysep2539, yyq2539, yy2arr2539
			const yyr2539 bool = false
			yyq2539[0] = x.Kind != ""
			yyq2539[1] = x.APIVersion != ""
			yyq2539[2] = true
			yyq2539[3] = true
			yyq2539[4] = true
			var yynn2539 int
			if yyr2539 || yy2arr2539 {
				r.EncodeArrayStart(5)
			} else {
				yynn2539 = 0
				for _, b := range yyq2539 {
					if b {
						yynn2539++
					}
				}
				r.EncodeMapStart(yynn2539)
				yynn2539 = 0
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[0] {
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2539[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2542 := z.EncBinary()
					_ = yym2542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[1] {
					yym2544 := z.EncBinary()
					_ = yym2544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2539[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2545 := z.EncBinary()
					_ = yym2545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[2] {
					yy2547 := &x.ObjectMeta
					yy2547.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2539[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2548 := &x.ObjectMeta
					yy2548.CodecEncodeSelf(e)
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[3] {
					yy2550 := &x.Spec
					yy2550.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2539[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2551 := &x.Spec
					yy2551.CodecEncodeSelf(e)
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[4] {
					yy2553 := &x.Status
					yy2553.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2539[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2554 := &x.Status
					yy2554.CodecEncodeSelf(e)
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2555 := z.DecBinary()
	_ = yym2555
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2556 := r.ContainerType()
		if yyct2556 == codecSelferValueTypeMap1234 {
			yyl2556 := r.ReadMapStart()
			if yyl2556 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2556, d)
			}
		} else if yyct2556 == codecSelferValueTypeArray1234 {
			yyl2556 := r.ReadArrayStart()
			if yyl2556 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2556, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2557Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2557Slc
	var yyhl2557 bool = l >= 0
	for yyj2557 := 0; ; yyj2557++ {
		if yyhl2557 {
			if yyj2557 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2557Slc = r.DecodeBytes(yys2557Slc, true, true)
		yys2557 := string(yys2557Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2557 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2560 := &x.ObjectMeta
				yyv2560.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2561 := &x.Spec
				yyv2561.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2562 := &x.Status
				yyv2562.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2557)
		} // end switch yys2557
	} // end for yyj2557
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2563 int
	var yyb2563 bool
	var yyhl2563 bool = l >= 0
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2566 := &x.ObjectMeta
		yyv2566.CodecDecodeSelf(d)
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2567 := &x.Spec
		yyv2567.CodecDecodeSelf(d)
	}
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2568 := &x.Status
		yyv2568.CodecDecodeSelf(d)
	}
	for {
		yyj2563++
		if yyhl2563 {
			yyb2563 = yyj2563 > l
		} else {
			yyb2563 = r.CheckBreak()
		}
		if yyb2563 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2563-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2569 := z.EncBinary()
		_ = yym2569
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2570 := !z.EncBinary()
			yy2arr2570 := z.EncBasicHandle().StructToArray
			var yyq2570 [4]bool
			_, _, _ = yysep2570, yyq2570, yy2arr2570
			const yyr2570 bool = false
			yyq2570[0] = x.Kind != ""
			yyq2570[1] = x.APIVersion != ""
			yyq2570[2] = true
			var yynn2570 int
			if yyr2570 || yy2arr2570 {
				r.EncodeArrayStart(4)
			} else {
				yynn2570 = 1
				for _, b := range yyq2570 {
					if b {
						yynn2570++
					}
				}
				r.EncodeMapStart(yynn2570)
				yynn2570 = 0
			}
			if yyr2570 || yy2arr2570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2570[0] {
					yym2572 := z.EncBinary()
					_ = yym2572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2570[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2573 := z.EncBinary()
					_ = yym2573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2570 || yy2arr2570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2570[1] {
					yym2575 := z.EncBinary()
					_ = yym2575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2570[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2576 := z.EncBinary()
					_ = yym2576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2570 || yy2arr2570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2570[2] {
					yy2578 := &x.ListMeta
					yym2579 := z.EncBinary()
					_ = yym2579
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2578) {
					} else {
						z.EncFallback(yy2578)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2570[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2580 := &x.ListMeta
					yym2581 := z.EncBinary()
					_ = yym2581
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2580) {
					} else {
						z.EncFallback(yy2580)
					}
				}
			}
			if yyr2570 || yy2arr2570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2583 := z.EncBinary()
					_ = yym2583
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2584 := z.EncBinary()
					_ = yym2584
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2570 || yy2arr2570 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2585 := z.DecBinary()
	_ = yym2585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2586 := r.ContainerType()
		if yyct2586 == codecSelferValueTypeMap1234 {
			yyl2586 := r.ReadMapStart()
			if yyl2586 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2586, d)
			}
		} else if yyct2586 == codecSelferValueTypeArray1234 {
			yyl2586 := r.ReadArrayStart()
			if yyl2586 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2586, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2587Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2587Slc
	var yyhl2587 bool = l >= 0
	for yyj2587 := 0; ; yyj2587++ {
		if yyhl2587 {
			if yyj2587 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2587Slc = r.DecodeBytes(yys2587Slc, true, true)
		yys2587 := string(yys2587Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2587 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2590 := &x.ListMeta
				yym2591 := z.DecBinary()
				_ = yym2591
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2590) {
				} else {
					z.DecFallback(yyv2590, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2592 := &x.Items
				yym2593 := z.DecBinary()
				_ = yym2593
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2592), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2587)
		} // end switch yys2587
	} // end for yyj2587
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2594 int
	var yyb2594 bool
	var yyhl2594 bool = l >= 0
	yyj2594++
	if yyhl2594 {
		yyb2594 = yyj2594 > l
	} else {
		yyb2594 = r.CheckBreak()
	}
	if yyb2594 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2594++
	if yyhl2594 {
		yyb2594 = yyj2594 > l
	} else {
		yyb2594 = r.CheckBreak()
	}
	if yyb2594 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2594++
	if yyhl2594 {
		yyb2594 = yyj2594 > l
	} else {
		yyb2594 = r.CheckBreak()
	}
	if yyb2594 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2597 := &x.ListMeta
		yym2598 := z.DecBinary()
		_ = yym2598
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2597) {
		} else {
			z.DecFallback(yyv2597, false)
		}
	}
	yyj2594++
	if yyhl2594 {
		yyb2594 = yyj2594 > l
	} else {
		yyb2594 = r.CheckBreak()
	}
	if yyb2594 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2599 := &x.Items
		yym2600 := z.DecBinary()
		_ = yym2600
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2599), d)
		}
	}
	for {
		yyj2594++
		if yyhl2594 {
			yyb2594 = yyj2594 > l
		} else {
			yyb2594 = r.CheckBreak()
		}
		if yyb2594 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2594-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2601 := z.EncBinary()
	_ = yym2601
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2602 := z.DecBinary()
	_ = yym2602
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2603 := z.EncBinary()
	_ = yym2603
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2604 := z.DecBinary()
	_ = yym2604
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2605 := z.EncBinary()
		_ = yym2605
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2606 := !z.EncBinary()
			yy2arr2606 := z.EncBasicHandle().StructToArray
			var yyq2606 [1]bool
			_, _, _ = yysep2606, yyq2606, yy2arr2606
			const yyr2606 bool = false
			yyq2606[0] = true
			var yynn2606 int
			if yyr2606 || yy2arr2606 {
				r.EncodeArrayStart(1)
			} else {
				yynn2606 = 0
				for _, b := range yyq2606 {
					if b {
						yynn2606++
					}
				}
				r.EncodeMapStart(yynn2606)
				yynn2606 = 0
			}
			if yyr2606 || yy2arr2606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2606[0] {
					yy2608 := &x.LoadBalancer
					yy2608.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2606[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2609 := &x.LoadBalancer
					yy2609.CodecEncodeSelf(e)
				}
			}
			if yyr2606 || yy2arr2606 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2610 := z.DecBinary()
	_ = yym2610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2611 := r.ContainerType()
		if yyct2611 == codecSelferValueTypeMap1234 {
			yyl2611 := r.ReadMapStart()
			if yyl2611 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2611, d)
			}
		} else if yyct2611 == codecSelferValueTypeArray1234 {
			yyl2611 := r.ReadArrayStart()
			if yyl2611 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2611, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2612Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2612Slc
	var yyhl2612 bool = l >= 0
	for yyj2612 := 0; ; yyj2612++ {
		if yyhl2612 {
			if yyj2612 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2612Slc = r.DecodeBytes(yys2612Slc, true, true)
		yys2612 := string(yys2612Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2612 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2613 := &x.LoadBalancer
				yyv2613.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2612)
		} // end switch yys2612
	} // end for yyj2612
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2614 int
	var yyb2614 bool
	var yyhl2614 bool = l >= 0
	yyj2614++
	if yyhl2614 {
		yyb2614 = yyj2614 > l
	} else {
		yyb2614 = r.CheckBreak()
	}
	if yyb2614 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2615 := &x.LoadBalancer
		yyv2615.CodecDecodeSelf(d)
	}
	for {
		yyj2614++
		if yyhl2614 {
			yyb2614 = yyj2614 > l
		} else {
			yyb2614 = r.CheckBreak()
		}
		if yyb2614 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2614-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2616 := z.EncBinary()
		_ = yym2616
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2617 := !z.EncBinary()
			yy2arr2617 := z.EncBasicHandle().StructToArray
			var yyq2617 [1]bool
			_, _, _ = yysep2617, yyq2617, yy2arr2617
			const yyr2617 bool = false
			yyq2617[0] = len(x.Ingress) != 0
			var yynn2617 int
			if yyr2617 || yy2arr2617 {
				r.EncodeArrayStart(1)
			} else {
				yynn2617 = 0
				for _, b := range yyq2617 {
					if b {
						yynn2617++
					}
				}
				r.EncodeMapStart(yynn2617)
				yynn2617 = 0
			}
			if yyr2617 || yy2arr2617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2617[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2619 := z.EncBinary()
						_ = yym2619
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2617[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2620 := z.EncBinary()
						_ = yym2620
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2617 || yy2arr2617 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2621 := z.DecBinary()
	_ = yym2621
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2622 := r.ContainerType()
		if yyct2622 == codecSelferValueTypeMap1234 {
			yyl2622 := r.ReadMapStart()
			if yyl2622 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2622, d)
			}
		} else if yyct2622 == codecSelferValueTypeArray1234 {
			yyl2622 := r.ReadArrayStart()
			if yyl2622 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2622, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2623Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2623Slc
	var yyhl2623 bool = l >= 0
	for yyj2623 := 0; ; yyj2623++ {
		if yyhl2623 {
			if yyj2623 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2623Slc = r.DecodeBytes(yys2623Slc, true, true)
		yys2623 := string(yys2623Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2623 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2624 := &x.Ingress
				yym2625 := z.DecBinary()
				_ = yym2625
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2624), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2623)
		} // end switch yys2623
	} // end for yyj2623
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2626 int
	var yyb2626 bool
	var yyhl2626 bool = l >= 0
	yyj2626++
	if yyhl2626 {
		yyb2626 = yyj2626 > l
	} else {
		yyb2626 = r.CheckBreak()
	}
	if yyb2626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2627 := &x.Ingress
		yym2628 := z.DecBinary()
		_ = yym2628
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2627), d)
		}
	}
	for {
		yyj2626++
		if yyhl2626 {
			yyb2626 = yyj2626 > l
		} else {
			yyb2626 = r.CheckBreak()
		}
		if yyb2626 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2626-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2629 := z.EncBinary()
		_ = yym2629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2630 := !z.EncBinary()
			yy2arr2630 := z.EncBasicHandle().StructToArray
			var yyq2630 [2]bool
			_, _, _ = yysep2630, yyq2630, yy2arr2630
			const yyr2630 bool = false
			yyq2630[0] = x.IP != ""
			yyq2630[1] = x.Hostname != ""
			var yynn2630 int
			if yyr2630 || yy2arr2630 {
				r.EncodeArrayStart(2)
			} else {
				yynn2630 = 0
				for _, b := range yyq2630 {
					if b {
						yynn2630++
					}
				}
				r.EncodeMapStart(yynn2630)
				yynn2630 = 0
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2630[0] {
					yym2632 := z.EncBinary()
					_ = yym2632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2630[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2633 := z.EncBinary()
					_ = yym2633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2630[1] {
					yym2635 := z.EncBinary()
					_ = yym2635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2630[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2636 := z.EncBinary()
					_ = yym2636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2637 := z.DecBinary()
	_ = yym2637
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2638 := r.ContainerType()
		if yyct2638 == codecSelferValueTypeMap1234 {
			yyl2638 := r.ReadMapStart()
			if yyl2638 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2638, d)
			}
		} else if yyct2638 == codecSelferValueTypeArray1234 {
			yyl2638 := r.ReadArrayStart()
			if yyl2638 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2638, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2639Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2639Slc
	var yyhl2639 bool = l >= 0
	for yyj2639 := 0; ; yyj2639++ {
		if yyhl2639 {
			if yyj2639 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2639Slc = r.DecodeBytes(yys2639Slc, true, true)
		yys2639 := string(yys2639Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2639 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2639)
		} // end switch yys2639
	} // end for yyj2639
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2642 int
	var yyb2642 bool
	var yyhl2642 bool = l >= 0
	yyj2642++
	if yyhl2642 {
		yyb2642 = yyj2642 > l
	} else {
		yyb2642 = r.CheckBreak()
	}
	if yyb2642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2642++
	if yyhl2642 {
		yyb2642 = yyj2642 > l
	} else {
		yyb2642 = r.CheckBreak()
	}
	if yyb2642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2642++
		if yyhl2642 {
			yyb2642 = yyj2642 > l
		} else {
			yyb2642 = r.CheckBreak()
		}
		if yyb2642 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2642-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2645 := z.EncBinary()
		_ = yym2645
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2646 := !z.EncBinary()
			yy2arr2646 := z.EncBasicHandle().StructToArray
			var yyq2646 [10]bool
			_, _, _ = yysep2646, yyq2646, yy2arr2646
			const yyr2646 bool = false
			yyq2646[0] = len(x.Ports) != 0
			yyq2646[1] = len(x.Selector) != 0
			yyq2646[2] = x.ClusterIP != ""
			yyq2646[3] = x.Type != ""
			yyq2646[4] = len(x.ExternalIPs) != 0
			yyq2646[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2646[6] = x.SessionAffinity != ""
			yyq2646[7] = x.LoadBalancerIP != ""
			yyq2646[8] = len(x.LoadBalancerSourceRanges) != 0
			yyq2646[9] = x.ExternalName != ""
			var yynn2646 int
			if yyr2646 || yy2arr2646 {
				r.EncodeArrayStart(10)
			} else {
				yynn2646 = 0
				for _, b := range yyq2646 {
					if b {
						yynn2646++
					}
				}
				r.EncodeMapStart(yynn2646)
				yynn2646 = 0
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[0] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2648 := z.EncBinary()
						_ = yym2648
						if false {
						} else {
							h.encSliceServicePort(([]ServicePort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2646[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2649 := z.EncBinary()
						_ = yym2649
						if false {
						} else {
							h.encSliceServicePort(([]ServicePort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2651 := z.EncBinary()
						_ = yym2651
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2646[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2652 := z.EncBinary()
						_ = yym2652
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[2] {
					yym2654 := z.EncBinary()
					_ = yym2654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2646[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2655 := z.EncBinary()
					_ = yym2655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2646[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2658 := z.EncBinary()
						_ = yym2658
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2646[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2659 := z.EncBinary()
						_ = yym2659
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2661 := z.EncBinary()
						_ = yym2661
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2646[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2662 := z.EncBinary()
						_ = yym2662
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2646[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[7] {
					yym2665 := z.EncBinary()
					_ = yym2665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2646[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2666 := z.EncBinary()
					_ = yym2666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2668 := z.EncBinary()
						_ = yym2668
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2646[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2669 := z.EncBinary()
						_ = yym2669
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[9] {
					yym2671 := z.EncBinary()
					_ = yym2671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2646[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2672 := z.EncBinary()
					_ = yym2672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2673 := z.DecBinary()
	_ = yym2673
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2674 := r.ContainerType()
		if yyct2674 == codecSelferValueTypeMap1234 {
			yyl2674 := r.ReadMapStart()
			if yyl2674 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2674, d)
			}
		} else if yyct2674 == codecSelferValueTypeArray1234 {
			yyl2674 := r.ReadArrayStart()
			if yyl2674 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2674, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2675Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2675Slc
	var yyhl2675 bool = l >= 0
	for yyj2675 := 0; ; yyj2675++ {
		if yyhl2675 {
			if yyj2675 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2675Slc = r.DecodeBytes(yys2675Slc, true, true)
		yys2675 := string(yys2675Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2675 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2676 := &x.Ports
				yym2677 := z.DecBinary()
				_ = yym2677
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2676), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2678 := &x.Selector
				yym2679 := z.DecBinary()
				_ = yym2679
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2678, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2682 := &x.ExternalIPs
				yym2683 := z.DecBinary()
				_ = yym2683
				if false {
				} else {
					z.F.DecSliceStringX(yyv2682, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2684 := &x.DeprecatedPublicIPs
				yym2685 := z.DecBinary()
				_ = yym2685
				if false {
				} else {
					z.F.DecSliceStringX(yyv2684, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2688 := &x.LoadBalancerSourceRanges
				yym2689 := z.DecBinary()
				_ = yym2689
				if false {
				} else {
					z.F.DecSliceStringX(yyv2688, false, d)
				}
			}
		case "externalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2675)
		} // end switch yys2675
	} // end for yyj2675
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2691 int
	var yyb2691 bool
	var yyhl2691 bool = l >= 0
	yyj2691++
	if yyhl2691 {
		yyb2691 = yyj2691 > l
	} else {
		yyb2691 = r.CheckBreak()
	}
	if yyb2691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2692 := &x.Ports
		yym2693 := z.DecBinary()
		_ = yym2693
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2692), d)
		}
	}
	yyj2691++
	if yyhl2691 {
		yyb2691 = yyj2691 > l
	} else {
		yyb2691 = r.CheckBreak()
	}
	if yyb2691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2694 := &x.Selector
		yym2695 := z.DecBinary()
		_ = yym2695
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2694, false, d)
		}
	}
	yyj2691++
	if yyhl2691 {
		yyb2691 = yyj2691 > l
	} else {
		yyb2691 = r.CheckBreak()
	}
	if yyb2691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2691++
	if yyhl2691 {
		yyb2691 = yyj2691 > l
	} else {
		yyb2691 = r.CheckBreak()
	}
	if yyb2691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2691++
	if yyhl2691 {
		yyb2691 = yyj2691 > l
	} else {
		yyb2691 = r.CheckBreak()
	}
	if yyb2691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2698 := &x.ExternalIPs
		yym2699 := z.DecBinary()
		_ = yym2699
		if false {
		} else {
			z.F.DecSliceStringX(yyv2698, false, d)
		}
	}
	yyj2691++
	if yyhl2691 {
		yyb2691 = yyj2691 > l
	} else {
		yyb2691 = r.CheckBreak()
	}
	if yyb2691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2700 := &x.DeprecatedPublicIPs
		yym2701 := z.DecBinary()
		_ = yym2701
		if false {
		} else {
			z.F.DecSliceStringX(yyv2700, false, d)
		}
	}
	yyj2691++
	if yyhl2691 {
		yyb2691 = yyj2691 > l
	} else {
		yyb2691 = r.CheckBreak()
	}
	if yyb2691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2691++
	if yyhl2691 {
		yyb2691 = yyj2691 > l
	} else {
		yyb2691 = r.CheckBreak()
	}
	if yyb2691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2691++
	if yyhl2691 {
		yyb2691 = yyj2691 > l
	} else {
		yyb2691 = r.CheckBreak()
	}
	if yyb2691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2704 := &x.LoadBalancerSourceRanges
		yym2705 := z.DecBinary()
		_ = yym2705
		if false {
		} else {
			z.F.DecSliceStringX(yyv2704, false, d)
		}
	}
	yyj2691++
	if yyhl2691 {
		yyb2691 = yyj2691 > l
	} else {
		yyb2691 = r.CheckBreak()
	}
	if yyb2691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	for {
		yyj2691++
		if yyhl2691 {
			yyb2691 = yyj2691 > l
		} else {
			yyb2691 = r.CheckBreak()
		}
		if yyb2691 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2691-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2707 := z.EncBinary()
		_ = yym2707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2708 := !z.EncBinary()
			yy2arr2708 := z.EncBasicHandle().StructToArray
			var yyq2708 [5]bool
			_, _, _ = yysep2708, yyq2708, yy2arr2708
			const yyr2708 bool = false
			yyq2708[0] = x.Name != ""
			yyq2708[1] = x.Protocol != ""
			yyq2708[3] = true
			yyq2708[4] = x.NodePort != 0
			var yynn2708 int
			if yyr2708 || yy2arr2708 {
				r.EncodeArrayStart(5)
			} else {
				yynn2708 = 1
				for _, b := range yyq2708 {
					if b {
						yynn2708++
					}
				}
				r.EncodeMapStart(yynn2708)
				yynn2708 = 0
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[0] {
					yym2710 := z.EncBinary()
					_ = yym2710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2708[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2711 := z.EncBinary()
					_ = yym2711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2708[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2714 := z.EncBinary()
				_ = yym2714
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2715 := z.EncBinary()
				_ = yym2715
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[3] {
					yy2717 := &x.TargetPort
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2717) {
					} else if !yym2718 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2717)
					} else {
						z.EncFallback(yy2717)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2708[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2719 := &x.TargetPort
					yym2720 := z.EncBinary()
					_ = yym2720
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2719) {
					} else if !yym2720 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2719)
					} else {
						z.EncFallback(yy2719)
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[4] {
					yym2722 := z.EncBinary()
					_ = yym2722
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2708[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2723 := z.EncBinary()
					_ = yym2723
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2724 := z.DecBinary()
	_ = yym2724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2725 := r.ContainerType()
		if yyct2725 == codecSelferValueTypeMap1234 {
			yyl2725 := r.ReadMapStart()
			if yyl2725 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2725, d)
			}
		} else if yyct2725 == codecSelferValueTypeArray1234 {
			yyl2725 := r.ReadArrayStart()
			if yyl2725 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2725, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2726Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2726Slc
	var yyhl2726 bool = l >= 0
	for yyj2726 := 0; ; yyj2726++ {
		if yyhl2726 {
			if yyj2726 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2726Slc = r.DecodeBytes(yys2726Slc, true, true)
		yys2726 := string(yys2726Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2726 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2730 := &x.TargetPort
				yym2731 := z.DecBinary()
				_ = yym2731
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2730) {
				} else if !yym2731 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2730)
				} else {
					z.DecFallback(yyv2730, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2726)
		} // end switch yys2726
	} // end for yyj2726
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2733 int
	var yyb2733 bool
	var yyhl2733 bool = l >= 0
	yyj2733++
	if yyhl2733 {
		yyb2733 = yyj2733 > l
	} else {
		yyb2733 = r.CheckBreak()
	}
	if yyb2733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2733++
	if yyhl2733 {
		yyb2733 = yyj2733 > l
	} else {
		yyb2733 = r.CheckBreak()
	}
	if yyb2733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2733++
	if yyhl2733 {
		yyb2733 = yyj2733 > l
	} else {
		yyb2733 = r.CheckBreak()
	}
	if yyb2733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2733++
	if yyhl2733 {
		yyb2733 = yyj2733 > l
	} else {
		yyb2733 = r.CheckBreak()
	}
	if yyb2733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2737 := &x.TargetPort
		yym2738 := z.DecBinary()
		_ = yym2738
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2737) {
		} else if !yym2738 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2737)
		} else {
			z.DecFallback(yyv2737, false)
		}
	}
	yyj2733++
	if yyhl2733 {
		yyb2733 = yyj2733 > l
	} else {
		yyb2733 = r.CheckBreak()
	}
	if yyb2733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2733++
		if yyhl2733 {
			yyb2733 = yyj2733 > l
		} else {
			yyb2733 = r.CheckBreak()
		}
		if yyb2733 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2733-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2740 := z.EncBinary()
		_ = yym2740
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2741 := !z.EncBinary()
			yy2arr2741 := z.EncBasicHandle().StructToArray
			var yyq2741 [5]bool
			_, _, _ = yysep2741, yyq2741, yy2arr2741
			const yyr2741 bool = false
			yyq2741[0] = x.Kind != ""
			yyq2741[1] = x.APIVersion != ""
			yyq2741[2] = true
			yyq2741[3] = true
			yyq2741[4] = true
			var yynn2741 int
			if yyr2741 || yy2arr2741 {
				r.EncodeArrayStart(5)
			} else {
				yynn2741 = 0
				for _, b := range yyq2741 {
					if b {
						yynn2741++
					}
				}
				r.EncodeMapStart(yynn2741)
				yynn2741 = 0
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2741[0] {
					yym2743 := z.EncBinary()
					_ = yym2743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2741[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2744 := z.EncBinary()
					_ = yym2744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2741[1] {
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2741[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2747 := z.EncBinary()
					_ = yym2747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2741[2] {
					yy2749 := &x.ObjectMeta
					yy2749.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2741[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2750 := &x.ObjectMeta
					yy2750.CodecEncodeSelf(e)
				}
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2741[3] {
					yy2752 := &x.Spec
					yy2752.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2741[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2753 := &x.Spec
					yy2753.CodecEncodeSelf(e)
				}
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2741[4] {
					yy2755 := &x.Status
					yy2755.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2741[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2756 := &x.Status
					yy2756.CodecEncodeSelf(e)
				}
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2757 := z.DecBinary()
	_ = yym2757
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2758 := r.ContainerType()
		if yyct2758 == codecSelferValueTypeMap1234 {
			yyl2758 := r.ReadMapStart()
			if yyl2758 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2758, d)
			}
		} else if yyct2758 == codecSelferValueTypeArray1234 {
			yyl2758 := r.ReadArrayStart()
			if yyl2758 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2758, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2759Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2759Slc
	var yyhl2759 bool = l >= 0
	for yyj2759 := 0; ; yyj2759++ {
		if yyhl2759 {
			if yyj2759 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2759Slc = r.DecodeBytes(yys2759Slc, true, true)
		yys2759 := string(yys2759Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2759 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2762 := &x.ObjectMeta
				yyv2762.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2763 := &x.Spec
				yyv2763.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2764 := &x.Status
				yyv2764.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2759)
		} // end switch yys2759
	} // end for yyj2759
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2765 int
	var yyb2765 bool
	var yyhl2765 bool = l >= 0
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2768 := &x.ObjectMeta
		yyv2768.CodecDecodeSelf(d)
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2769 := &x.Spec
		yyv2769.CodecDecodeSelf(d)
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2770 := &x.Status
		yyv2770.CodecDecodeSelf(d)
	}
	for {
		yyj2765++
		if yyhl2765 {
			yyb2765 = yyj2765 > l
		} else {
			yyb2765 = r.CheckBreak()
		}
		if yyb2765 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2765-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2771 := z.EncBinary()
		_ = yym2771
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2772 := !z.EncBinary()
			yy2arr2772 := z.EncBasicHandle().StructToArray
			var yyq2772 [4]bool
			_, _, _ = yysep2772, yyq2772, yy2arr2772
			const yyr2772 bool = false
			yyq2772[0] = x.Kind != ""
			yyq2772[1] = x.APIVersion != ""
			yyq2772[2] = true
			var yynn2772 int
			if yyr2772 || yy2arr2772 {
				r.EncodeArrayStart(4)
			} else {
				yynn2772 = 1
				for _, b := range yyq2772 {
					if b {
						yynn2772++
					}
				}
				r.EncodeMapStart(yynn2772)
				yynn2772 = 0
			}
			if yyr2772 || yy2arr2772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2772[0] {
					yym2774 := z.EncBinary()
					_ = yym2774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2772[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2775 := z.EncBinary()
					_ = yym2775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2772 || yy2arr2772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2772[1] {
					yym2777 := z.EncBinary()
					_ = yym2777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2772[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2778 := z.EncBinary()
					_ = yym2778
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2772 || yy2arr2772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2772[2] {
					yy2780 := &x.ListMeta
					yym2781 := z.EncBinary()
					_ = yym2781
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2780) {
					} else {
						z.EncFallback(yy2780)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2772[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2782 := &x.ListMeta
					yym2783 := z.EncBinary()
					_ = yym2783
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2782) {
					} else {
						z.EncFallback(yy2782)
					}
				}
			}
			if yyr2772 || yy2arr2772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2785 := z.EncBinary()
					_ = yym2785
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2786 := z.EncBinary()
					_ = yym2786
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2772 || yy2arr2772 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2787 := z.DecBinary()
	_ = yym2787
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2788 := r.ContainerType()
		if yyct2788 == codecSelferValueTypeMap1234 {
			yyl2788 := r.ReadMapStart()
			if yyl2788 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2788, d)
			}
		} else if yyct2788 == codecSelferValueTypeArray1234 {
			yyl2788 := r.ReadArrayStart()
			if yyl2788 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2788, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2789Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2789Slc
	var yyhl2789 bool = l >= 0
	for yyj2789 := 0; ; yyj2789++ {
		if yyhl2789 {
			if yyj2789 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2789Slc = r.DecodeBytes(yys2789Slc, true, true)
		yys2789 := string(yys2789Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2789 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2792 := &x.ListMeta
				yym2793 := z.DecBinary()
				_ = yym2793
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2792) {
				} else {
					z.DecFallback(yyv2792, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2794 := &x.Items
				yym2795 := z.DecBinary()
				_ = yym2795
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2794), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2789)
		} // end switch yys2789
	} // end for yyj2789
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2796 int
	var yyb2796 bool
	var yyhl2796 bool = l >= 0
	yyj2796++
	if yyhl2796 {
		yyb2796 = yyj2796 > l
	} else {
		yyb2796 = r.CheckBreak()
	}
	if yyb2796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2796++
	if yyhl2796 {
		yyb2796 = yyj2796 > l
	} else {
		yyb2796 = r.CheckBreak()
	}
	if yyb2796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2796++
	if yyhl2796 {
		yyb2796 = yyj2796 > l
	} else {
		yyb2796 = r.CheckBreak()
	}
	if yyb2796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2799 := &x.ListMeta
		yym2800 := z.DecBinary()
		_ = yym2800
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2799) {
		} else {
			z.DecFallback(yyv2799, false)
		}
	}
	yyj2796++
	if yyhl2796 {
		yyb2796 = yyj2796 > l
	} else {
		yyb2796 = r.CheckBreak()
	}
	if yyb2796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2801 := &x.Items
		yym2802 := z.DecBinary()
		_ = yym2802
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2801), d)
		}
	}
	for {
		yyj2796++
		if yyhl2796 {
			yyb2796 = yyj2796 > l
		} else {
			yyb2796 = r.CheckBreak()
		}
		if yyb2796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2803 := z.EncBinary()
		_ = yym2803
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2804 := !z.EncBinary()
			yy2arr2804 := z.EncBasicHandle().StructToArray
			var yyq2804 [5]bool
			_, _, _ = yysep2804, yyq2804, yy2arr2804
			const yyr2804 bool = false
			yyq2804[0] = x.Kind != ""
			yyq2804[1] = x.APIVersion != ""
			yyq2804[2] = true
			yyq2804[3] = len(x.Secrets) != 0
			yyq2804[4] = len(x.ImagePullSecrets) != 0
			var yynn2804 int
			if yyr2804 || yy2arr2804 {
				r.EncodeArrayStart(5)
			} else {
				yynn2804 = 0
				for _, b := range yyq2804 {
					if b {
						yynn2804++
					}
				}
				r.EncodeMapStart(yynn2804)
				yynn2804 = 0
			}
			if yyr2804 || yy2arr2804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2804[0] {
					yym2806 := z.EncBinary()
					_ = yym2806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2804[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2807 := z.EncBinary()
					_ = yym2807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2804 || yy2arr2804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2804[1] {
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2804[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2810 := z.EncBinary()
					_ = yym2810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2804 || yy2arr2804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2804[2] {
					yy2812 := &x.ObjectMeta
					yy2812.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2804[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2813 := &x.ObjectMeta
					yy2813.CodecEncodeSelf(e)
				}
			}
			if yyr2804 || yy2arr2804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2804[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2815 := z.EncBinary()
						_ = yym2815
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2804[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2816 := z.EncBinary()
						_ = yym2816
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2804 || yy2arr2804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2804[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2818 := z.EncBinary()
						_ = yym2818
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2804[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2819 := z.EncBinary()
						_ = yym2819
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2804 || yy2arr2804 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2820 := z.DecBinary()
	_ = yym2820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2821 := r.ContainerType()
		if yyct2821 == codecSelferValueTypeMap1234 {
			yyl2821 := r.ReadMapStart()
			if yyl2821 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2821, d)
			}
		} else if yyct2821 == codecSelferValueTypeArray1234 {
			yyl2821 := r.ReadArrayStart()
			if yyl2821 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2821, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2822Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2822Slc
	var yyhl2822 bool = l >= 0
	for yyj2822 := 0; ; yyj2822++ {
		if yyhl2822 {
			if yyj2822 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2822Slc = r.DecodeBytes(yys2822Slc, true, true)
		yys2822 := string(yys2822Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2822 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2825 := &x.ObjectMeta
				yyv2825.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2826 := &x.Secrets
				yym2827 := z.DecBinary()
				_ = yym2827
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2826), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2828 := &x.ImagePullSecrets
				yym2829 := z.DecBinary()
				_ = yym2829
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2828), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2822)
		} // end switch yys2822
	} // end for yyj2822
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2830 int
	var yyb2830 bool
	var yyhl2830 bool = l >= 0
	yyj2830++
	if yyhl2830 {
		yyb2830 = yyj2830 > l
	} else {
		yyb2830 = r.CheckBreak()
	}
	if yyb2830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2830++
	if yyhl2830 {
		yyb2830 = yyj2830 > l
	} else {
		yyb2830 = r.CheckBreak()
	}
	if yyb2830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2830++
	if yyhl2830 {
		yyb2830 = yyj2830 > l
	} else {
		yyb2830 = r.CheckBreak()
	}
	if yyb2830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2833 := &x.ObjectMeta
		yyv2833.CodecDecodeSelf(d)
	}
	yyj2830++
	if yyhl2830 {
		yyb2830 = yyj2830 > l
	} else {
		yyb2830 = r.CheckBreak()
	}
	if yyb2830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2834 := &x.Secrets
		yym2835 := z.DecBinary()
		_ = yym2835
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2834), d)
		}
	}
	yyj2830++
	if yyhl2830 {
		yyb2830 = yyj2830 > l
	} else {
		yyb2830 = r.CheckBreak()
	}
	if yyb2830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2836 := &x.ImagePullSecrets
		yym2837 := z.DecBinary()
		_ = yym2837
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2836), d)
		}
	}
	for {
		yyj2830++
		if yyhl2830 {
			yyb2830 = yyj2830 > l
		} else {
			yyb2830 = r.CheckBreak()
		}
		if yyb2830 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2830-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2838 := z.EncBinary()
		_ = yym2838
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2839 := !z.EncBinary()
			yy2arr2839 := z.EncBasicHandle().StructToArray
			var yyq2839 [4]bool
			_, _, _ = yysep2839, yyq2839, yy2arr2839
			const yyr2839 bool = false
			yyq2839[0] = x.Kind != ""
			yyq2839[1] = x.APIVersion != ""
			yyq2839[2] = true
			var yynn2839 int
			if yyr2839 || yy2arr2839 {
				r.EncodeArrayStart(4)
			} else {
				yynn2839 = 1
				for _, b := range yyq2839 {
					if b {
						yynn2839++
					}
				}
				r.EncodeMapStart(yynn2839)
				yynn2839 = 0
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2839[0] {
					yym2841 := z.EncBinary()
					_ = yym2841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2842 := z.EncBinary()
					_ = yym2842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2839[1] {
					yym2844 := z.EncBinary()
					_ = yym2844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2839[2] {
					yy2847 := &x.ListMeta
					yym2848 := z.EncBinary()
					_ = yym2848
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2847) {
					} else {
						z.EncFallback(yy2847)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2839[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2849 := &x.ListMeta
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2849) {
					} else {
						z.EncFallback(yy2849)
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2852 := z.EncBinary()
					_ = yym2852
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2854 := z.DecBinary()
	_ = yym2854
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2855 := r.ContainerType()
		if yyct2855 == codecSelferValueTypeMap1234 {
			yyl2855 := r.ReadMapStart()
			if yyl2855 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2855, d)
			}
		} else if yyct2855 == codecSelferValueTypeArray1234 {
			yyl2855 := r.ReadArrayStart()
			if yyl2855 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2855, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2856Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2856Slc
	var yyhl2856 bool = l >= 0
	for yyj2856 := 0; ; yyj2856++ {
		if yyhl2856 {
			if yyj2856 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2856Slc = r.DecodeBytes(yys2856Slc, true, true)
		yys2856 := string(yys2856Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2856 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2859 := &x.ListMeta
				yym2860 := z.DecBinary()
				_ = yym2860
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2859) {
				} else {
					z.DecFallback(yyv2859, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2861 := &x.Items
				yym2862 := z.DecBinary()
				_ = yym2862
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2861), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2856)
		} // end switch yys2856
	} // end for yyj2856
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2863 int
	var yyb2863 bool
	var yyhl2863 bool = l >= 0
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2866 := &x.ListMeta
		yym2867 := z.DecBinary()
		_ = yym2867
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2866) {
		} else {
			z.DecFallback(yyv2866, false)
		}
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2868 := &x.Items
		yym2869 := z.DecBinary()
		_ = yym2869
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2868), d)
		}
	}
	for {
		yyj2863++
		if yyhl2863 {
			yyb2863 = yyj2863 > l
		} else {
			yyb2863 = r.CheckBreak()
		}
		if yyb2863 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2863-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2870 := z.EncBinary()
		_ = yym2870
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2871 := !z.EncBinary()
			yy2arr2871 := z.EncBasicHandle().StructToArray
			var yyq2871 [4]bool
			_, _, _ = yysep2871, yyq2871, yy2arr2871
			const yyr2871 bool = false
			yyq2871[0] = x.Kind != ""
			yyq2871[1] = x.APIVersion != ""
			yyq2871[2] = true
			var yynn2871 int
			if yyr2871 || yy2arr2871 {
				r.EncodeArrayStart(4)
			} else {
				yynn2871 = 1
				for _, b := range yyq2871 {
					if b {
						yynn2871++
					}
				}
				r.EncodeMapStart(yynn2871)
				yynn2871 = 0
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[0] {
					yym2873 := z.EncBinary()
					_ = yym2873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2871[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2874 := z.EncBinary()
					_ = yym2874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[1] {
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2871[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2877 := z.EncBinary()
					_ = yym2877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[2] {
					yy2879 := &x.ObjectMeta
					yy2879.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2871[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2880 := &x.ObjectMeta
					yy2880.CodecEncodeSelf(e)
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2882 := z.EncBinary()
					_ = yym2882
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2883 := z.EncBinary()
					_ = yym2883
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2884 := z.DecBinary()
	_ = yym2884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2885 := r.ContainerType()
		if yyct2885 == codecSelferValueTypeMap1234 {
			yyl2885 := r.ReadMapStart()
			if yyl2885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2885, d)
			}
		} else if yyct2885 == codecSelferValueTypeArray1234 {
			yyl2885 := r.ReadArrayStart()
			if yyl2885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2886Slc
	var yyhl2886 bool = l >= 0
	for yyj2886 := 0; ; yyj2886++ {
		if yyhl2886 {
			if yyj2886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2886Slc = r.DecodeBytes(yys2886Slc, true, true)
		yys2886 := string(yys2886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2886 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2889 := &x.ObjectMeta
				yyv2889.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2890 := &x.Subsets
				yym2891 := z.DecBinary()
				_ = yym2891
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2890), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2886)
		} // end switch yys2886
	} // end for yyj2886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2892 int
	var yyb2892 bool
	var yyhl2892 bool = l >= 0
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2895 := &x.ObjectMeta
		yyv2895.CodecDecodeSelf(d)
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2896 := &x.Subsets
		yym2897 := z.DecBinary()
		_ = yym2897
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2896), d)
		}
	}
	for {
		yyj2892++
		if yyhl2892 {
			yyb2892 = yyj2892 > l
		} else {
			yyb2892 = r.CheckBreak()
		}
		if yyb2892 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2892-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2898 := z.EncBinary()
		_ = yym2898
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2899 := !z.EncBinary()
			yy2arr2899 := z.EncBasicHandle().StructToArray
			var yyq2899 [3]bool
			_, _, _ = yysep2899, yyq2899, yy2arr2899
			const yyr2899 bool = false
			yyq2899[0] = len(x.Addresses) != 0
			yyq2899[1] = len(x.NotReadyAddresses) != 0
			yyq2899[2] = len(x.Ports) != 0
			var yynn2899 int
			if yyr2899 || yy2arr2899 {
				r.EncodeArrayStart(3)
			} else {
				yynn2899 = 0
				for _, b := range yyq2899 {
					if b {
						yynn2899++
					}
				}
				r.EncodeMapStart(yynn2899)
				yynn2899 = 0
			}
			if yyr2899 || yy2arr2899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2899[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2901 := z.EncBinary()
						_ = yym2901
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2899[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2902 := z.EncBinary()
						_ = yym2902
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2899 || yy2arr2899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2899[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2904 := z.EncBinary()
						_ = yym2904
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2899[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2905 := z.EncBinary()
						_ = yym2905
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2899 || yy2arr2899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2899[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2907 := z.EncBinary()
						_ = yym2907
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2899[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2908 := z.EncBinary()
						_ = yym2908
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2899 || yy2arr2899 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2909 := z.DecBinary()
	_ = yym2909
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2910 := r.ContainerType()
		if yyct2910 == codecSelferValueTypeMap1234 {
			yyl2910 := r.ReadMapStart()
			if yyl2910 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2910, d)
			}
		} else if yyct2910 == codecSelferValueTypeArray1234 {
			yyl2910 := r.ReadArrayStart()
			if yyl2910 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2910, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2911Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2911Slc
	var yyhl2911 bool = l >= 0
	for yyj2911 := 0; ; yyj2911++ {
		if yyhl2911 {
			if yyj2911 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2911Slc = r.DecodeBytes(yys2911Slc, true, true)
		yys2911 := string(yys2911Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2911 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2912 := &x.Addresses
				yym2913 := z.DecBinary()
				_ = yym2913
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2912), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2914 := &x.NotReadyAddresses
				yym2915 := z.DecBinary()
				_ = yym2915
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2914), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2916 := &x.Ports
				yym2917 := z.DecBinary()
				_ = yym2917
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2916), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2911)
		} // end switch yys2911
	} // end for yyj2911
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2918 int
	var yyb2918 bool
	var yyhl2918 bool = l >= 0
	yyj2918++
	if yyhl2918 {
		yyb2918 = yyj2918 > l
	} else {
		yyb2918 = r.CheckBreak()
	}
	if yyb2918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2919 := &x.Addresses
		yym2920 := z.DecBinary()
		_ = yym2920
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2919), d)
		}
	}
	yyj2918++
	if yyhl2918 {
		yyb2918 = yyj2918 > l
	} else {
		yyb2918 = r.CheckBreak()
	}
	if yyb2918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2921 := &x.NotReadyAddresses
		yym2922 := z.DecBinary()
		_ = yym2922
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2921), d)
		}
	}
	yyj2918++
	if yyhl2918 {
		yyb2918 = yyj2918 > l
	} else {
		yyb2918 = r.CheckBreak()
	}
	if yyb2918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2923 := &x.Ports
		yym2924 := z.DecBinary()
		_ = yym2924
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2923), d)
		}
	}
	for {
		yyj2918++
		if yyhl2918 {
			yyb2918 = yyj2918 > l
		} else {
			yyb2918 = r.CheckBreak()
		}
		if yyb2918 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2918-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2925 := z.EncBinary()
		_ = yym2925
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2926 := !z.EncBinary()
			yy2arr2926 := z.EncBasicHandle().StructToArray
			var yyq2926 [4]bool
			_, _, _ = yysep2926, yyq2926, yy2arr2926
			const yyr2926 bool = false
			yyq2926[1] = x.Hostname != ""
			yyq2926[2] = x.NodeName != nil
			yyq2926[3] = x.TargetRef != nil
			var yynn2926 int
			if yyr2926 || yy2arr2926 {
				r.EncodeArrayStart(4)
			} else {
				yynn2926 = 1
				for _, b := range yyq2926 {
					if b {
						yynn2926++
					}
				}
				r.EncodeMapStart(yynn2926)
				yynn2926 = 0
			}
			if yyr2926 || yy2arr2926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2928 := z.EncBinary()
				_ = yym2928
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2929 := z.EncBinary()
				_ = yym2929
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2926 || yy2arr2926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2926[1] {
					yym2931 := z.EncBinary()
					_ = yym2931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2926[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2932 := z.EncBinary()
					_ = yym2932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2926 || yy2arr2926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2926[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2934 := *x.NodeName
						yym2935 := z.EncBinary()
						_ = yym2935
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2934))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2926[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2936 := *x.NodeName
						yym2937 := z.EncBinary()
						_ = yym2937
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2936))
						}
					}
				}
			}
			if yyr2926 || yy2arr2926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2926[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2926[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2926 || yy2arr2926 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2939 := z.DecBinary()
	_ = yym2939
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2940 := r.ContainerType()
		if yyct2940 == codecSelferValueTypeMap1234 {
			yyl2940 := r.ReadMapStart()
			if yyl2940 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2940, d)
			}
		} else if yyct2940 == codecSelferValueTypeArray1234 {
			yyl2940 := r.ReadArrayStart()
			if yyl2940 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2940, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2941Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2941Slc
	var yyhl2941 bool = l >= 0
	for yyj2941 := 0; ; yyj2941++ {
		if yyhl2941 {
			if yyj2941 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2941Slc = r.DecodeBytes(yys2941Slc, true, true)
		yys2941 := string(yys2941Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2941 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2945 := z.DecBinary()
				_ = yym2945
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2941)
		} // end switch yys2941
	} // end for yyj2941
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2947 int
	var yyb2947 bool
	var yyhl2947 bool = l >= 0
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2951 := z.DecBinary()
		_ = yym2951
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2947++
		if yyhl2947 {
			yyb2947 = yyj2947 > l
		} else {
			yyb2947 = r.CheckBreak()
		}
		if yyb2947 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2947-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2953 := z.EncBinary()
		_ = yym2953
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2954 := !z.EncBinary()
			yy2arr2954 := z.EncBasicHandle().StructToArray
			var yyq2954 [3]bool
			_, _, _ = yysep2954, yyq2954, yy2arr2954
			const yyr2954 bool = false
			yyq2954[0] = x.Name != ""
			yyq2954[2] = x.Protocol != ""
			var yynn2954 int
			if yyr2954 || yy2arr2954 {
				r.EncodeArrayStart(3)
			} else {
				yynn2954 = 1
				for _, b := range yyq2954 {
					if b {
						yynn2954++
					}
				}
				r.EncodeMapStart(yynn2954)
				yynn2954 = 0
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2954[0] {
					yym2956 := z.EncBinary()
					_ = yym2956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2954[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2957 := z.EncBinary()
					_ = yym2957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2959 := z.EncBinary()
				_ = yym2959
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2960 := z.EncBinary()
				_ = yym2960
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2954[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2954[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2962 := z.DecBinary()
	_ = yym2962
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2963 := r.ContainerType()
		if yyct2963 == codecSelferValueTypeMap1234 {
			yyl2963 := r.ReadMapStart()
			if yyl2963 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2963, d)
			}
		} else if yyct2963 == codecSelferValueTypeArray1234 {
			yyl2963 := r.ReadArrayStart()
			if yyl2963 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2963, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2964Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2964Slc
	var yyhl2964 bool = l >= 0
	for yyj2964 := 0; ; yyj2964++ {
		if yyhl2964 {
			if yyj2964 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2964Slc = r.DecodeBytes(yys2964Slc, true, true)
		yys2964 := string(yys2964Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2964 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2964)
		} // end switch yys2964
	} // end for yyj2964
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2968 int
	var yyb2968 bool
	var yyhl2968 bool = l >= 0
	yyj2968++
	if yyhl2968 {
		yyb2968 = yyj2968 > l
	} else {
		yyb2968 = r.CheckBreak()
	}
	if yyb2968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2968++
	if yyhl2968 {
		yyb2968 = yyj2968 > l
	} else {
		yyb2968 = r.CheckBreak()
	}
	if yyb2968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2968++
	if yyhl2968 {
		yyb2968 = yyj2968 > l
	} else {
		yyb2968 = r.CheckBreak()
	}
	if yyb2968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2968++
		if yyhl2968 {
			yyb2968 = yyj2968 > l
		} else {
			yyb2968 = r.CheckBreak()
		}
		if yyb2968 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2968-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2972 := z.EncBinary()
		_ = yym2972
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2973 := !z.EncBinary()
			yy2arr2973 := z.EncBasicHandle().StructToArray
			var yyq2973 [4]bool
			_, _, _ = yysep2973, yyq2973, yy2arr2973
			const yyr2973 bool = false
			yyq2973[0] = x.Kind != ""
			yyq2973[1] = x.APIVersion != ""
			yyq2973[2] = true
			var yynn2973 int
			if yyr2973 || yy2arr2973 {
				r.EncodeArrayStart(4)
			} else {
				yynn2973 = 1
				for _, b := range yyq2973 {
					if b {
						yynn2973++
					}
				}
				r.EncodeMapStart(yynn2973)
				yynn2973 = 0
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2973[0] {
					yym2975 := z.EncBinary()
					_ = yym2975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2973[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2976 := z.EncBinary()
					_ = yym2976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2973[1] {
					yym2978 := z.EncBinary()
					_ = yym2978
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2973[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2979 := z.EncBinary()
					_ = yym2979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2973[2] {
					yy2981 := &x.ListMeta
					yym2982 := z.EncBinary()
					_ = yym2982
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2981) {
					} else {
						z.EncFallback(yy2981)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2973[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2983 := &x.ListMeta
					yym2984 := z.EncBinary()
					_ = yym2984
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2983) {
					} else {
						z.EncFallback(yy2983)
					}
				}
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2986 := z.EncBinary()
					_ = yym2986
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2987 := z.EncBinary()
					_ = yym2987
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2988 := z.DecBinary()
	_ = yym2988
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2989 := r.ContainerType()
		if yyct2989 == codecSelferValueTypeMap1234 {
			yyl2989 := r.ReadMapStart()
			if yyl2989 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2989, d)
			}
		} else if yyct2989 == codecSelferValueTypeArray1234 {
			yyl2989 := r.ReadArrayStart()
			if yyl2989 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2989, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2990Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2990Slc
	var yyhl2990 bool = l >= 0
	for yyj2990 := 0; ; yyj2990++ {
		if yyhl2990 {
			if yyj2990 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2990Slc = r.DecodeBytes(yys2990Slc, true, true)
		yys2990 := string(yys2990Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2990 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2993 := &x.ListMeta
				yym2994 := z.DecBinary()
				_ = yym2994
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2993) {
				} else {
					z.DecFallback(yyv2993, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2995 := &x.Items
				yym2996 := z.DecBinary()
				_ = yym2996
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2995), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2990)
		} // end switch yys2990
	} // end for yyj2990
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2997 int
	var yyb2997 bool
	var yyhl2997 bool = l >= 0
	yyj2997++
	if yyhl2997 {
		yyb2997 = yyj2997 > l
	} else {
		yyb2997 = r.CheckBreak()
	}
	if yyb2997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2997++
	if yyhl2997 {
		yyb2997 = yyj2997 > l
	} else {
		yyb2997 = r.CheckBreak()
	}
	if yyb2997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2997++
	if yyhl2997 {
		yyb2997 = yyj2997 > l
	} else {
		yyb2997 = r.CheckBreak()
	}
	if yyb2997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv3000 := &x.ListMeta
		yym3001 := z.DecBinary()
		_ = yym3001
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3000) {
		} else {
			z.DecFallback(yyv3000, false)
		}
	}
	yyj2997++
	if yyhl2997 {
		yyb2997 = yyj2997 > l
	} else {
		yyb2997 = r.CheckBreak()
	}
	if yyb2997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3002 := &x.Items
		yym3003 := z.DecBinary()
		_ = yym3003
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv3002), d)
		}
	}
	for {
		yyj2997++
		if yyhl2997 {
			yyb2997 = yyj2997 > l
		} else {
			yyb2997 = r.CheckBreak()
		}
		if yyb2997 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2997-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3004 := z.EncBinary()
		_ = yym3004
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3005 := !z.EncBinary()
			yy2arr3005 := z.EncBasicHandle().StructToArray
			var yyq3005 [4]bool
			_, _, _ = yysep3005, yyq3005, yy2arr3005
			const yyr3005 bool = false
			yyq3005[0] = x.PodCIDR != ""
			yyq3005[1] = x.ExternalID != ""
			yyq3005[2] = x.ProviderID != ""
			yyq3005[3] = x.Unschedulable != false
			var yynn3005 int
			if yyr3005 || yy2arr3005 {
				r.EncodeArrayStart(4)
			} else {
				yynn3005 = 0
				for _, b := range yyq3005 {
					if b {
						yynn3005++
					}
				}
				r.EncodeMapStart(yynn3005)
				yynn3005 = 0
			}
			if yyr3005 || yy2arr3005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3005[0] {
					yym3007 := z.EncBinary()
					_ = yym3007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3005[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3008 := z.EncBinary()
					_ = yym3008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr3005 || yy2arr3005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3005[1] {
					yym3010 := z.EncBinary()
					_ = yym3010
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3005[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3011 := z.EncBinary()
					_ = yym3011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr3005 || yy2arr3005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3005[2] {
					yym3013 := z.EncBinary()
					_ = yym3013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3005[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3014 := z.EncBinary()
					_ = yym3014
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr3005 || yy2arr3005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3005[3] {
					yym3016 := z.EncBinary()
					_ = yym3016
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3005[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3017 := z.EncBinary()
					_ = yym3017
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr3005 || yy2arr3005 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3018 := z.DecBinary()
	_ = yym3018
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3019 := r.ContainerType()
		if yyct3019 == codecSelferValueTypeMap1234 {
			yyl3019 := r.ReadMapStart()
			if yyl3019 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3019, d)
			}
		} else if yyct3019 == codecSelferValueTypeArray1234 {
			yyl3019 := r.ReadArrayStart()
			if yyl3019 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3019, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3020Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3020Slc
	var yyhl3020 bool = l >= 0
	for yyj3020 := 0; ; yyj3020++ {
		if yyhl3020 {
			if yyj3020 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3020Slc = r.DecodeBytes(yys3020Slc, true, true)
		yys3020 := string(yys3020Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3020 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3020)
		} // end switch yys3020
	} // end for yyj3020
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3025 int
	var yyb3025 bool
	var yyhl3025 bool = l >= 0
	yyj3025++
	if yyhl3025 {
		yyb3025 = yyj3025 > l
	} else {
		yyb3025 = r.CheckBreak()
	}
	if yyb3025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj3025++
	if yyhl3025 {
		yyb3025 = yyj3025 > l
	} else {
		yyb3025 = r.CheckBreak()
	}
	if yyb3025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj3025++
	if yyhl3025 {
		yyb3025 = yyj3025 > l
	} else {
		yyb3025 = r.CheckBreak()
	}
	if yyb3025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj3025++
	if yyhl3025 {
		yyb3025 = yyj3025 > l
	} else {
		yyb3025 = r.CheckBreak()
	}
	if yyb3025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj3025++
		if yyhl3025 {
			yyb3025 = yyj3025 > l
		} else {
			yyb3025 = r.CheckBreak()
		}
		if yyb3025 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3025-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3030 := z.EncBinary()
		_ = yym3030
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3031 := !z.EncBinary()
			yy2arr3031 := z.EncBasicHandle().StructToArray
			var yyq3031 [1]bool
			_, _, _ = yysep3031, yyq3031, yy2arr3031
			const yyr3031 bool = false
			var yynn3031 int
			if yyr3031 || yy2arr3031 {
				r.EncodeArrayStart(1)
			} else {
				yynn3031 = 1
				for _, b := range yyq3031 {
					if b {
						yynn3031++
					}
				}
				r.EncodeMapStart(yynn3031)
				yynn3031 = 0
			}
			if yyr3031 || yy2arr3031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3033 := z.EncBinary()
				_ = yym3033
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3034 := z.EncBinary()
				_ = yym3034
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr3031 || yy2arr3031 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3035 := z.DecBinary()
	_ = yym3035
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3036 := r.ContainerType()
		if yyct3036 == codecSelferValueTypeMap1234 {
			yyl3036 := r.ReadMapStart()
			if yyl3036 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3036, d)
			}
		} else if yyct3036 == codecSelferValueTypeArray1234 {
			yyl3036 := r.ReadArrayStart()
			if yyl3036 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3036, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3037Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3037Slc
	var yyhl3037 bool = l >= 0
	for yyj3037 := 0; ; yyj3037++ {
		if yyhl3037 {
			if yyj3037 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3037Slc = r.DecodeBytes(yys3037Slc, true, true)
		yys3037 := string(yys3037Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3037 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3037)
		} // end switch yys3037
	} // end for yyj3037
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3039 int
	var yyb3039 bool
	var yyhl3039 bool = l >= 0
	yyj3039++
	if yyhl3039 {
		yyb3039 = yyj3039 > l
	} else {
		yyb3039 = r.CheckBreak()
	}
	if yyb3039 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj3039++
		if yyhl3039 {
			yyb3039 = yyj3039 > l
		} else {
			yyb3039 = r.CheckBreak()
		}
		if yyb3039 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3039-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3041 := z.EncBinary()
		_ = yym3041
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3042 := !z.EncBinary()
			yy2arr3042 := z.EncBasicHandle().StructToArray
			var yyq3042 [1]bool
			_, _, _ = yysep3042, yyq3042, yy2arr3042
			const yyr3042 bool = false
			yyq3042[0] = true
			var yynn3042 int
			if yyr3042 || yy2arr3042 {
				r.EncodeArrayStart(1)
			} else {
				yynn3042 = 0
				for _, b := range yyq3042 {
					if b {
						yynn3042++
					}
				}
				r.EncodeMapStart(yynn3042)
				yynn3042 = 0
			}
			if yyr3042 || yy2arr3042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3042[0] {
					yy3044 := &x.KubeletEndpoint
					yy3044.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3042[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3045 := &x.KubeletEndpoint
					yy3045.CodecEncodeSelf(e)
				}
			}
			if yyr3042 || yy2arr3042 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3046 := z.DecBinary()
	_ = yym3046
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3047 := r.ContainerType()
		if yyct3047 == codecSelferValueTypeMap1234 {
			yyl3047 := r.ReadMapStart()
			if yyl3047 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3047, d)
			}
		} else if yyct3047 == codecSelferValueTypeArray1234 {
			yyl3047 := r.ReadArrayStart()
			if yyl3047 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3047, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3048Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3048Slc
	var yyhl3048 bool = l >= 0
	for yyj3048 := 0; ; yyj3048++ {
		if yyhl3048 {
			if yyj3048 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3048Slc = r.DecodeBytes(yys3048Slc, true, true)
		yys3048 := string(yys3048Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3048 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv3049 := &x.KubeletEndpoint
				yyv3049.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3048)
		} // end switch yys3048
	} // end for yyj3048
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3050 int
	var yyb3050 bool
	var yyhl3050 bool = l >= 0
	yyj3050++
	if yyhl3050 {
		yyb3050 = yyj3050 > l
	} else {
		yyb3050 = r.CheckBreak()
	}
	if yyb3050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv3051 := &x.KubeletEndpoint
		yyv3051.CodecDecodeSelf(d)
	}
	for {
		yyj3050++
		if yyhl3050 {
			yyb3050 = yyj3050 > l
		} else {
			yyb3050 = r.CheckBreak()
		}
		if yyb3050 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3050-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3052 := z.EncBinary()
		_ = yym3052
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3053 := !z.EncBinary()
			yy2arr3053 := z.EncBasicHandle().StructToArray
			var yyq3053 [10]bool
			_, _, _ = yysep3053, yyq3053, yy2arr3053
			const yyr3053 bool = false
			var yynn3053 int
			if yyr3053 || yy2arr3053 {
				r.EncodeArrayStart(10)
			} else {
				yynn3053 = 10
				for _, b := range yyq3053 {
					if b {
						yynn3053++
					}
				}
				r.EncodeMapStart(yynn3053)
				yynn3053 = 0
			}
			if yyr3053 || yy2arr3053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3055 := z.EncBinary()
				_ = yym3055
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3056 := z.EncBinary()
				_ = yym3056
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr3053 || yy2arr3053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3058 := z.EncBinary()
				_ = yym3058
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3059 := z.EncBinary()
				_ = yym3059
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr3053 || yy2arr3053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3061 := z.EncBinary()
				_ = yym3061
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3062 := z.EncBinary()
				_ = yym3062
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr3053 || yy2arr3053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3064 := z.EncBinary()
				_ = yym3064
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3065 := z.EncBinary()
				_ = yym3065
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr3053 || yy2arr3053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3067 := z.EncBinary()
				_ = yym3067
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3068 := z.EncBinary()
				_ = yym3068
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr3053 || yy2arr3053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3070 := z.EncBinary()
				_ = yym3070
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3071 := z.EncBinary()
				_ = yym3071
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr3053 || yy2arr3053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3073 := z.EncBinary()
				_ = yym3073
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3074 := z.EncBinary()
				_ = yym3074
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr3053 || yy2arr3053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3076 := z.EncBinary()
				_ = yym3076
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3077 := z.EncBinary()
				_ = yym3077
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr3053 || yy2arr3053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3079 := z.EncBinary()
				_ = yym3079
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3080 := z.EncBinary()
				_ = yym3080
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr3053 || yy2arr3053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3082 := z.EncBinary()
				_ = yym3082
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3083 := z.EncBinary()
				_ = yym3083
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr3053 || yy2arr3053 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3084 := z.DecBinary()
	_ = yym3084
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3085 := r.ContainerType()
		if yyct3085 == codecSelferValueTypeMap1234 {
			yyl3085 := r.ReadMapStart()
			if yyl3085 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3085, d)
			}
		} else if yyct3085 == codecSelferValueTypeArray1234 {
			yyl3085 := r.ReadArrayStart()
			if yyl3085 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3085, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3086Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3086Slc
	var yyhl3086 bool = l >= 0
	for yyj3086 := 0; ; yyj3086++ {
		if yyhl3086 {
			if yyj3086 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3086Slc = r.DecodeBytes(yys3086Slc, true, true)
		yys3086 := string(yys3086Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3086 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3086)
		} // end switch yys3086
	} // end for yyj3086
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3097 int
	var yyb3097 bool
	var yyhl3097 bool = l >= 0
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj3097++
		if yyhl3097 {
			yyb3097 = yyj3097 > l
		} else {
			yyb3097 = r.CheckBreak()
		}
		if yyb3097 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3097-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3108 := z.EncBinary()
		_ = yym3108
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3109 := !z.EncBinary()
			yy2arr3109 := z.EncBasicHandle().StructToArray
			var yyq3109 [10]bool
			_, _, _ = yysep3109, yyq3109, yy2arr3109
			const yyr3109 bool = false
			yyq3109[0] = len(x.Capacity) != 0
			yyq3109[1] = len(x.Allocatable) != 0
			yyq3109[2] = x.Phase != ""
			yyq3109[3] = len(x.Conditions) != 0
			yyq3109[4] = len(x.Addresses) != 0
			yyq3109[5] = true
			yyq3109[6] = true
			yyq3109[7] = len(x.Images) != 0
			yyq3109[8] = len(x.VolumesInUse) != 0
			yyq3109[9] = len(x.VolumesAttached) != 0
			var yynn3109 int
			if yyr3109 || yy2arr3109 {
				r.EncodeArrayStart(10)
			} else {
				yynn3109 = 0
				for _, b := range yyq3109 {
					if b {
						yynn3109++
					}
				}
				r.EncodeMapStart(yynn3109)
				yynn3109 = 0
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3109[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3109[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3109[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3114 := z.EncBinary()
						_ = yym3114
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3109[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3115 := z.EncBinary()
						_ = yym3115
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3117 := z.EncBinary()
						_ = yym3117
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3109[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3118 := z.EncBinary()
						_ = yym3118
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[5] {
					yy3120 := &x.DaemonEndpoints
					yy3120.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3109[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3121 := &x.DaemonEndpoints
					yy3121.CodecEncodeSelf(e)
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[6] {
					yy3123 := &x.NodeInfo
					yy3123.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3109[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3124 := &x.NodeInfo
					yy3124.CodecEncodeSelf(e)
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3126 := z.EncBinary()
						_ = yym3126
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3109[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3127 := z.EncBinary()
						_ = yym3127
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3129 := z.EncBinary()
						_ = yym3129
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3109[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3130 := z.EncBinary()
						_ = yym3130
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3132 := z.EncBinary()
						_ = yym3132
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3109[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3133 := z.EncBinary()
						_ = yym3133
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3134 := z.DecBinary()
	_ = yym3134
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3135 := r.ContainerType()
		if yyct3135 == codecSelferValueTypeMap1234 {
			yyl3135 := r.ReadMapStart()
			if yyl3135 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3135, d)
			}
		} else if yyct3135 == codecSelferValueTypeArray1234 {
			yyl3135 := r.ReadArrayStart()
			if yyl3135 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3135, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3136Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3136Slc
	var yyhl3136 bool = l >= 0
	for yyj3136 := 0; ; yyj3136++ {
		if yyhl3136 {
			if yyj3136 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3136Slc = r.DecodeBytes(yys3136Slc, true, true)
		yys3136 := string(yys3136Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3136 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3137 := &x.Capacity
				yyv3137.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3138 := &x.Allocatable
				yyv3138.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3140 := &x.Conditions
				yym3141 := z.DecBinary()
				_ = yym3141
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3140), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3142 := &x.Addresses
				yym3143 := z.DecBinary()
				_ = yym3143
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3142), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3144 := &x.DaemonEndpoints
				yyv3144.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3145 := &x.NodeInfo
				yyv3145.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3146 := &x.Images
				yym3147 := z.DecBinary()
				_ = yym3147
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3146), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3148 := &x.VolumesInUse
				yym3149 := z.DecBinary()
				_ = yym3149
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3148), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3150 := &x.VolumesAttached
				yym3151 := z.DecBinary()
				_ = yym3151
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3150), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3136)
		} // end switch yys3136
	} // end for yyj3136
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3152 int
	var yyb3152 bool
	var yyhl3152 bool = l >= 0
	yyj3152++
	if yyhl3152 {
		yyb3152 = yyj3152 > l
	} else {
		yyb3152 = r.CheckBreak()
	}
	if yyb3152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3153 := &x.Capacity
		yyv3153.CodecDecodeSelf(d)
	}
	yyj3152++
	if yyhl3152 {
		yyb3152 = yyj3152 > l
	} else {
		yyb3152 = r.CheckBreak()
	}
	if yyb3152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3154 := &x.Allocatable
		yyv3154.CodecDecodeSelf(d)
	}
	yyj3152++
	if yyhl3152 {
		yyb3152 = yyj3152 > l
	} else {
		yyb3152 = r.CheckBreak()
	}
	if yyb3152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3152++
	if yyhl3152 {
		yyb3152 = yyj3152 > l
	} else {
		yyb3152 = r.CheckBreak()
	}
	if yyb3152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3156 := &x.Conditions
		yym3157 := z.DecBinary()
		_ = yym3157
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3156), d)
		}
	}
	yyj3152++
	if yyhl3152 {
		yyb3152 = yyj3152 > l
	} else {
		yyb3152 = r.CheckBreak()
	}
	if yyb3152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3158 := &x.Addresses
		yym3159 := z.DecBinary()
		_ = yym3159
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3158), d)
		}
	}
	yyj3152++
	if yyhl3152 {
		yyb3152 = yyj3152 > l
	} else {
		yyb3152 = r.CheckBreak()
	}
	if yyb3152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3160 := &x.DaemonEndpoints
		yyv3160.CodecDecodeSelf(d)
	}
	yyj3152++
	if yyhl3152 {
		yyb3152 = yyj3152 > l
	} else {
		yyb3152 = r.CheckBreak()
	}
	if yyb3152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3161 := &x.NodeInfo
		yyv3161.CodecDecodeSelf(d)
	}
	yyj3152++
	if yyhl3152 {
		yyb3152 = yyj3152 > l
	} else {
		yyb3152 = r.CheckBreak()
	}
	if yyb3152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3162 := &x.Images
		yym3163 := z.DecBinary()
		_ = yym3163
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3162), d)
		}
	}
	yyj3152++
	if yyhl3152 {
		yyb3152 = yyj3152 > l
	} else {
		yyb3152 = r.CheckBreak()
	}
	if yyb3152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3164 := &x.VolumesInUse
		yym3165 := z.DecBinary()
		_ = yym3165
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3164), d)
		}
	}
	yyj3152++
	if yyhl3152 {
		yyb3152 = yyj3152 > l
	} else {
		yyb3152 = r.CheckBreak()
	}
	if yyb3152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3166 := &x.VolumesAttached
		yym3167 := z.DecBinary()
		_ = yym3167
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3166), d)
		}
	}
	for {
		yyj3152++
		if yyhl3152 {
			yyb3152 = yyj3152 > l
		} else {
			yyb3152 = r.CheckBreak()
		}
		if yyb3152 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3152-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3168 := z.EncBinary()
	_ = yym3168
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3169 := z.DecBinary()
	_ = yym3169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3170 := z.EncBinary()
		_ = yym3170
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3171 := !z.EncBinary()
			yy2arr3171 := z.EncBasicHandle().StructToArray
			var yyq3171 [2]bool
			_, _, _ = yysep3171, yyq3171, yy2arr3171
			const yyr3171 bool = false
			var yynn3171 int
			if yyr3171 || yy2arr3171 {
				r.EncodeArrayStart(2)
			} else {
				yynn3171 = 2
				for _, b := range yyq3171 {
					if b {
						yynn3171++
					}
				}
				r.EncodeMapStart(yynn3171)
				yynn3171 = 0
			}
			if yyr3171 || yy2arr3171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3171 || yy2arr3171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3174 := z.EncBinary()
				_ = yym3174
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3175 := z.EncBinary()
				_ = yym3175
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3171 || yy2arr3171 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3176 := z.DecBinary()
	_ = yym3176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3177 := r.ContainerType()
		if yyct3177 == codecSelferValueTypeMap1234 {
			yyl3177 := r.ReadMapStart()
			if yyl3177 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3177, d)
			}
		} else if yyct3177 == codecSelferValueTypeArray1234 {
			yyl3177 := r.ReadArrayStart()
			if yyl3177 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3178Slc
	var yyhl3178 bool = l >= 0
	for yyj3178 := 0; ; yyj3178++ {
		if yyhl3178 {
			if yyj3178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3178Slc = r.DecodeBytes(yys3178Slc, true, true)
		yys3178 := string(yys3178Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3178 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3178)
		} // end switch yys3178
	} // end for yyj3178
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3181 int
	var yyb3181 bool
	var yyhl3181 bool = l >= 0
	yyj3181++
	if yyhl3181 {
		yyb3181 = yyj3181 > l
	} else {
		yyb3181 = r.CheckBreak()
	}
	if yyb3181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3181++
	if yyhl3181 {
		yyb3181 = yyj3181 > l
	} else {
		yyb3181 = r.CheckBreak()
	}
	if yyb3181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3181++
		if yyhl3181 {
			yyb3181 = yyj3181 > l
		} else {
			yyb3181 = r.CheckBreak()
		}
		if yyb3181 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3181-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3184 := z.EncBinary()
		_ = yym3184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3185 := !z.EncBinary()
			yy2arr3185 := z.EncBasicHandle().StructToArray
			var yyq3185 [1]bool
			_, _, _ = yysep3185, yyq3185, yy2arr3185
			const yyr3185 bool = false
			yyq3185[0] = len(x.PreferAvoidPods) != 0
			var yynn3185 int
			if yyr3185 || yy2arr3185 {
				r.EncodeArrayStart(1)
			} else {
				yynn3185 = 0
				for _, b := range yyq3185 {
					if b {
						yynn3185++
					}
				}
				r.EncodeMapStart(yynn3185)
				yynn3185 = 0
			}
			if yyr3185 || yy2arr3185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3185[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3187 := z.EncBinary()
						_ = yym3187
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3185[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3188 := z.EncBinary()
						_ = yym3188
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3185 || yy2arr3185 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3189 := z.DecBinary()
	_ = yym3189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3190 := r.ContainerType()
		if yyct3190 == codecSelferValueTypeMap1234 {
			yyl3190 := r.ReadMapStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3190, d)
			}
		} else if yyct3190 == codecSelferValueTypeArray1234 {
			yyl3190 := r.ReadArrayStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3191Slc
	var yyhl3191 bool = l >= 0
	for yyj3191 := 0; ; yyj3191++ {
		if yyhl3191 {
			if yyj3191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3191Slc = r.DecodeBytes(yys3191Slc, true, true)
		yys3191 := string(yys3191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3191 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3192 := &x.PreferAvoidPods
				yym3193 := z.DecBinary()
				_ = yym3193
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3192), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3191)
		} // end switch yys3191
	} // end for yyj3191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3194 int
	var yyb3194 bool
	var yyhl3194 bool = l >= 0
	yyj3194++
	if yyhl3194 {
		yyb3194 = yyj3194 > l
	} else {
		yyb3194 = r.CheckBreak()
	}
	if yyb3194 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3195 := &x.PreferAvoidPods
		yym3196 := z.DecBinary()
		_ = yym3196
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3195), d)
		}
	}
	for {
		yyj3194++
		if yyhl3194 {
			yyb3194 = yyj3194 > l
		} else {
			yyb3194 = r.CheckBreak()
		}
		if yyb3194 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3194-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3197 := z.EncBinary()
		_ = yym3197
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3198 := !z.EncBinary()
			yy2arr3198 := z.EncBasicHandle().StructToArray
			var yyq3198 [4]bool
			_, _, _ = yysep3198, yyq3198, yy2arr3198
			const yyr3198 bool = false
			yyq3198[1] = true
			yyq3198[2] = x.Reason != ""
			yyq3198[3] = x.Message != ""
			var yynn3198 int
			if yyr3198 || yy2arr3198 {
				r.EncodeArrayStart(4)
			} else {
				yynn3198 = 1
				for _, b := range yyq3198 {
					if b {
						yynn3198++
					}
				}
				r.EncodeMapStart(yynn3198)
				yynn3198 = 0
			}
			if yyr3198 || yy2arr3198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3200 := &x.PodSignature
				yy3200.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3201 := &x.PodSignature
				yy3201.CodecEncodeSelf(e)
			}
			if yyr3198 || yy2arr3198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3198[1] {
					yy3203 := &x.EvictionTime
					yym3204 := z.EncBinary()
					_ = yym3204
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3203) {
					} else if yym3204 {
						z.EncBinaryMarshal(yy3203)
					} else if !yym3204 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3203)
					} else {
						z.EncFallback(yy3203)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3198[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3205 := &x.EvictionTime
					yym3206 := z.EncBinary()
					_ = yym3206
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3205) {
					} else if yym3206 {
						z.EncBinaryMarshal(yy3205)
					} else if !yym3206 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3205)
					} else {
						z.EncFallback(yy3205)
					}
				}
			}
			if yyr3198 || yy2arr3198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3198[2] {
					yym3208 := z.EncBinary()
					_ = yym3208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3198[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3209 := z.EncBinary()
					_ = yym3209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3198 || yy2arr3198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3198[3] {
					yym3211 := z.EncBinary()
					_ = yym3211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3198[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3212 := z.EncBinary()
					_ = yym3212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3198 || yy2arr3198 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3213 := z.DecBinary()
	_ = yym3213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3214 := r.ContainerType()
		if yyct3214 == codecSelferValueTypeMap1234 {
			yyl3214 := r.ReadMapStart()
			if yyl3214 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3214, d)
			}
		} else if yyct3214 == codecSelferValueTypeArray1234 {
			yyl3214 := r.ReadArrayStart()
			if yyl3214 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3214, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3215Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3215Slc
	var yyhl3215 bool = l >= 0
	for yyj3215 := 0; ; yyj3215++ {
		if yyhl3215 {
			if yyj3215 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3215Slc = r.DecodeBytes(yys3215Slc, true, true)
		yys3215 := string(yys3215Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3215 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3216 := &x.PodSignature
				yyv3216.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_v1.Time{}
			} else {
				yyv3217 := &x.EvictionTime
				yym3218 := z.DecBinary()
				_ = yym3218
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3217) {
				} else if yym3218 {
					z.DecBinaryUnmarshal(yyv3217)
				} else if !yym3218 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3217)
				} else {
					z.DecFallback(yyv3217, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3215)
		} // end switch yys3215
	} // end for yyj3215
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3221 int
	var yyb3221 bool
	var yyhl3221 bool = l >= 0
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3222 := &x.PodSignature
		yyv3222.CodecDecodeSelf(d)
	}
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_v1.Time{}
	} else {
		yyv3223 := &x.EvictionTime
		yym3224 := z.DecBinary()
		_ = yym3224
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3223) {
		} else if yym3224 {
			z.DecBinaryUnmarshal(yyv3223)
		} else if !yym3224 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3223)
		} else {
			z.DecFallback(yyv3223, false)
		}
	}
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3221++
		if yyhl3221 {
			yyb3221 = yyj3221 > l
		} else {
			yyb3221 = r.CheckBreak()
		}
		if yyb3221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3227 := z.EncBinary()
		_ = yym3227
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3228 := !z.EncBinary()
			yy2arr3228 := z.EncBasicHandle().StructToArray
			var yyq3228 [1]bool
			_, _, _ = yysep3228, yyq3228, yy2arr3228
			const yyr3228 bool = false
			yyq3228[0] = x.PodController != nil
			var yynn3228 int
			if yyr3228 || yy2arr3228 {
				r.EncodeArrayStart(1)
			} else {
				yynn3228 = 0
				for _, b := range yyq3228 {
					if b {
						yynn3228++
					}
				}
				r.EncodeMapStart(yynn3228)
				yynn3228 = 0
			}
			if yyr3228 || yy2arr3228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3228[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						yym3230 := z.EncBinary()
						_ = yym3230
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodController) {
						} else {
							z.EncFallback(x.PodController)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3228[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						yym3231 := z.EncBinary()
						_ = yym3231
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodController) {
						} else {
							z.EncFallback(x.PodController)
						}
					}
				}
			}
			if yyr3228 || yy2arr3228 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3232 := z.DecBinary()
	_ = yym3232
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3233 := r.ContainerType()
		if yyct3233 == codecSelferValueTypeMap1234 {
			yyl3233 := r.ReadMapStart()
			if yyl3233 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3233, d)
			}
		} else if yyct3233 == codecSelferValueTypeArray1234 {
			yyl3233 := r.ReadArrayStart()
			if yyl3233 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3233, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3234Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3234Slc
	var yyhl3234 bool = l >= 0
	for yyj3234 := 0; ; yyj3234++ {
		if yyhl3234 {
			if yyj3234 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3234Slc = r.DecodeBytes(yys3234Slc, true, true)
		yys3234 := string(yys3234Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3234 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(pkg2_v1.OwnerReference)
				}
				yym3236 := z.DecBinary()
				_ = yym3236
				if false {
				} else if z.HasExtensions() && z.DecExt(x.PodController) {
				} else {
					z.DecFallback(x.PodController, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3234)
		} // end switch yys3234
	} // end for yyj3234
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3237 int
	var yyb3237 bool
	var yyhl3237 bool = l >= 0
	yyj3237++
	if yyhl3237 {
		yyb3237 = yyj3237 > l
	} else {
		yyb3237 = r.CheckBreak()
	}
	if yyb3237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(pkg2_v1.OwnerReference)
		}
		yym3239 := z.DecBinary()
		_ = yym3239
		if false {
		} else if z.HasExtensions() && z.DecExt(x.PodController) {
		} else {
			z.DecFallback(x.PodController, false)
		}
	}
	for {
		yyj3237++
		if yyhl3237 {
			yyb3237 = yyj3237 > l
		} else {
			yyb3237 = r.CheckBreak()
		}
		if yyb3237 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3237-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3240 := z.EncBinary()
		_ = yym3240
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3241 := !z.EncBinary()
			yy2arr3241 := z.EncBasicHandle().StructToArray
			var yyq3241 [2]bool
			_, _, _ = yysep3241, yyq3241, yy2arr3241
			const yyr3241 bool = false
			yyq3241[1] = x.SizeBytes != 0
			var yynn3241 int
			if yyr3241 || yy2arr3241 {
				r.EncodeArrayStart(2)
			} else {
				yynn3241 = 1
				for _, b := range yyq3241 {
					if b {
						yynn3241++
					}
				}
				r.EncodeMapStart(yynn3241)
				yynn3241 = 0
			}
			if yyr3241 || yy2arr3241 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3243 := z.EncBinary()
					_ = yym3243
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3244 := z.EncBinary()
					_ = yym3244
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3241 || yy2arr3241 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3241[1] {
					yym3246 := z.EncBinary()
					_ = yym3246
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3241[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3247 := z.EncBinary()
					_ = yym3247
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3241 || yy2arr3241 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3248 := z.DecBinary()
	_ = yym3248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3249 := r.ContainerType()
		if yyct3249 == codecSelferValueTypeMap1234 {
			yyl3249 := r.ReadMapStart()
			if yyl3249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3249, d)
			}
		} else if yyct3249 == codecSelferValueTypeArray1234 {
			yyl3249 := r.ReadArrayStart()
			if yyl3249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3250Slc
	var yyhl3250 bool = l >= 0
	for yyj3250 := 0; ; yyj3250++ {
		if yyhl3250 {
			if yyj3250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3250Slc = r.DecodeBytes(yys3250Slc, true, true)
		yys3250 := string(yys3250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3250 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3251 := &x.Names
				yym3252 := z.DecBinary()
				_ = yym3252
				if false {
				} else {
					z.F.DecSliceStringX(yyv3251, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3250)
		} // end switch yys3250
	} // end for yyj3250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3254 int
	var yyb3254 bool
	var yyhl3254 bool = l >= 0
	yyj3254++
	if yyhl3254 {
		yyb3254 = yyj3254 > l
	} else {
		yyb3254 = r.CheckBreak()
	}
	if yyb3254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3255 := &x.Names
		yym3256 := z.DecBinary()
		_ = yym3256
		if false {
		} else {
			z.F.DecSliceStringX(yyv3255, false, d)
		}
	}
	yyj3254++
	if yyhl3254 {
		yyb3254 = yyj3254 > l
	} else {
		yyb3254 = r.CheckBreak()
	}
	if yyb3254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3254++
		if yyhl3254 {
			yyb3254 = yyj3254 > l
		} else {
			yyb3254 = r.CheckBreak()
		}
		if yyb3254 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3254-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3258 := z.EncBinary()
	_ = yym3258
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3259 := z.DecBinary()
	_ = yym3259
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3260 := z.EncBinary()
	_ = yym3260
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3261 := z.DecBinary()
	_ = yym3261
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3262 := z.EncBinary()
		_ = yym3262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3263 := !z.EncBinary()
			yy2arr3263 := z.EncBasicHandle().StructToArray
			var yyq3263 [6]bool
			_, _, _ = yysep3263, yyq3263, yy2arr3263
			const yyr3263 bool = false
			yyq3263[2] = true
			yyq3263[3] = true
			yyq3263[4] = x.Reason != ""
			yyq3263[5] = x.Message != ""
			var yynn3263 int
			if yyr3263 || yy2arr3263 {
				r.EncodeArrayStart(6)
			} else {
				yynn3263 = 2
				for _, b := range yyq3263 {
					if b {
						yynn3263++
					}
				}
				r.EncodeMapStart(yynn3263)
				yynn3263 = 0
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3263[2] {
					yy3267 := &x.LastHeartbeatTime
					yym3268 := z.EncBinary()
					_ = yym3268
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3267) {
					} else if yym3268 {
						z.EncBinaryMarshal(yy3267)
					} else if !yym3268 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3267)
					} else {
						z.EncFallback(yy3267)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3263[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3269 := &x.LastHeartbeatTime
					yym3270 := z.EncBinary()
					_ = yym3270
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3269) {
					} else if yym3270 {
						z.EncBinaryMarshal(yy3269)
					} else if !yym3270 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3269)
					} else {
						z.EncFallback(yy3269)
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3263[3] {
					yy3272 := &x.LastTransitionTime
					yym3273 := z.EncBinary()
					_ = yym3273
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3272) {
					} else if yym3273 {
						z.EncBinaryMarshal(yy3272)
					} else if !yym3273 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3272)
					} else {
						z.EncFallback(yy3272)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3263[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3274 := &x.LastTransitionTime
					yym3275 := z.EncBinary()
					_ = yym3275
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3274) {
					} else if yym3275 {
						z.EncBinaryMarshal(yy3274)
					} else if !yym3275 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3274)
					} else {
						z.EncFallback(yy3274)
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3263[4] {
					yym3277 := z.EncBinary()
					_ = yym3277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3263[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3278 := z.EncBinary()
					_ = yym3278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3263[5] {
					yym3280 := z.EncBinary()
					_ = yym3280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3263[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3281 := z.EncBinary()
					_ = yym3281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3282 := z.DecBinary()
	_ = yym3282
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3283 := r.ContainerType()
		if yyct3283 == codecSelferValueTypeMap1234 {
			yyl3283 := r.ReadMapStart()
			if yyl3283 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3283, d)
			}
		} else if yyct3283 == codecSelferValueTypeArray1234 {
			yyl3283 := r.ReadArrayStart()
			if yyl3283 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3283, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3284Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3284Slc
	var yyhl3284 bool = l >= 0
	for yyj3284 := 0; ; yyj3284++ {
		if yyhl3284 {
			if yyj3284 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3284Slc = r.DecodeBytes(yys3284Slc, true, true)
		yys3284 := string(yys3284Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3284 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_v1.Time{}
			} else {
				yyv3287 := &x.LastHeartbeatTime
				yym3288 := z.DecBinary()
				_ = yym3288
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3287) {
				} else if yym3288 {
					z.DecBinaryUnmarshal(yyv3287)
				} else if !yym3288 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3287)
				} else {
					z.DecFallback(yyv3287, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_v1.Time{}
			} else {
				yyv3289 := &x.LastTransitionTime
				yym3290 := z.DecBinary()
				_ = yym3290
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3289) {
				} else if yym3290 {
					z.DecBinaryUnmarshal(yyv3289)
				} else if !yym3290 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3289)
				} else {
					z.DecFallback(yyv3289, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3284)
		} // end switch yys3284
	} // end for yyj3284
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3293 int
	var yyb3293 bool
	var yyhl3293 bool = l >= 0
	yyj3293++
	if yyhl3293 {
		yyb3293 = yyj3293 > l
	} else {
		yyb3293 = r.CheckBreak()
	}
	if yyb3293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3293++
	if yyhl3293 {
		yyb3293 = yyj3293 > l
	} else {
		yyb3293 = r.CheckBreak()
	}
	if yyb3293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3293++
	if yyhl3293 {
		yyb3293 = yyj3293 > l
	} else {
		yyb3293 = r.CheckBreak()
	}
	if yyb3293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_v1.Time{}
	} else {
		yyv3296 := &x.LastHeartbeatTime
		yym3297 := z.DecBinary()
		_ = yym3297
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3296) {
		} else if yym3297 {
			z.DecBinaryUnmarshal(yyv3296)
		} else if !yym3297 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3296)
		} else {
			z.DecFallback(yyv3296, false)
		}
	}
	yyj3293++
	if yyhl3293 {
		yyb3293 = yyj3293 > l
	} else {
		yyb3293 = r.CheckBreak()
	}
	if yyb3293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_v1.Time{}
	} else {
		yyv3298 := &x.LastTransitionTime
		yym3299 := z.DecBinary()
		_ = yym3299
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3298) {
		} else if yym3299 {
			z.DecBinaryUnmarshal(yyv3298)
		} else if !yym3299 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3298)
		} else {
			z.DecFallback(yyv3298, false)
		}
	}
	yyj3293++
	if yyhl3293 {
		yyb3293 = yyj3293 > l
	} else {
		yyb3293 = r.CheckBreak()
	}
	if yyb3293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3293++
	if yyhl3293 {
		yyb3293 = yyj3293 > l
	} else {
		yyb3293 = r.CheckBreak()
	}
	if yyb3293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3293++
		if yyhl3293 {
			yyb3293 = yyj3293 > l
		} else {
			yyb3293 = r.CheckBreak()
		}
		if yyb3293 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3293-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3302 := z.EncBinary()
	_ = yym3302
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3303 := z.DecBinary()
	_ = yym3303
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3304 := z.EncBinary()
		_ = yym3304
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3305 := !z.EncBinary()
			yy2arr3305 := z.EncBasicHandle().StructToArray
			var yyq3305 [2]bool
			_, _, _ = yysep3305, yyq3305, yy2arr3305
			const yyr3305 bool = false
			var yynn3305 int
			if yyr3305 || yy2arr3305 {
				r.EncodeArrayStart(2)
			} else {
				yynn3305 = 2
				for _, b := range yyq3305 {
					if b {
						yynn3305++
					}
				}
				r.EncodeMapStart(yynn3305)
				yynn3305 = 0
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3308 := z.EncBinary()
				_ = yym3308
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3309 := z.EncBinary()
				_ = yym3309
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3310 := z.DecBinary()
	_ = yym3310
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3311 := r.ContainerType()
		if yyct3311 == codecSelferValueTypeMap1234 {
			yyl3311 := r.ReadMapStart()
			if yyl3311 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3311, d)
			}
		} else if yyct3311 == codecSelferValueTypeArray1234 {
			yyl3311 := r.ReadArrayStart()
			if yyl3311 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3311, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3312Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3312Slc
	var yyhl3312 bool = l >= 0
	for yyj3312 := 0; ; yyj3312++ {
		if yyhl3312 {
			if yyj3312 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3312Slc = r.DecodeBytes(yys3312Slc, true, true)
		yys3312 := string(yys3312Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3312 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3312)
		} // end switch yys3312
	} // end for yyj3312
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3315 int
	var yyb3315 bool
	var yyhl3315 bool = l >= 0
	yyj3315++
	if yyhl3315 {
		yyb3315 = yyj3315 > l
	} else {
		yyb3315 = r.CheckBreak()
	}
	if yyb3315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3315++
	if yyhl3315 {
		yyb3315 = yyj3315 > l
	} else {
		yyb3315 = r.CheckBreak()
	}
	if yyb3315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3315++
		if yyhl3315 {
			yyb3315 = yyj3315 > l
		} else {
			yyb3315 = r.CheckBreak()
		}
		if yyb3315 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3315-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3318 := z.EncBinary()
	_ = yym3318
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3319 := z.DecBinary()
	_ = yym3319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3320 := z.EncBinary()
		_ = yym3320
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3321 := z.DecBinary()
	_ = yym3321
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3322 := z.EncBinary()
		_ = yym3322
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3323 := !z.EncBinary()
			yy2arr3323 := z.EncBasicHandle().StructToArray
			var yyq3323 [5]bool
			_, _, _ = yysep3323, yyq3323, yy2arr3323
			const yyr3323 bool = false
			yyq3323[0] = x.Kind != ""
			yyq3323[1] = x.APIVersion != ""
			yyq3323[2] = true
			yyq3323[3] = true
			yyq3323[4] = true
			var yynn3323 int
			if yyr3323 || yy2arr3323 {
				r.EncodeArrayStart(5)
			} else {
				yynn3323 = 0
				for _, b := range yyq3323 {
					if b {
						yynn3323++
					}
				}
				r.EncodeMapStart(yynn3323)
				yynn3323 = 0
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3323[0] {
					yym3325 := z.EncBinary()
					_ = yym3325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3323[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3326 := z.EncBinary()
					_ = yym3326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3323[1] {
					yym3328 := z.EncBinary()
					_ = yym3328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3323[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3329 := z.EncBinary()
					_ = yym3329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3323[2] {
					yy3331 := &x.ObjectMeta
					yy3331.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3323[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3332 := &x.ObjectMeta
					yy3332.CodecEncodeSelf(e)
				}
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3323[3] {
					yy3334 := &x.Spec
					yy3334.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3323[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3335 := &x.Spec
					yy3335.CodecEncodeSelf(e)
				}
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3323[4] {
					yy3337 := &x.Status
					yy3337.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3323[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3338 := &x.Status
					yy3338.CodecEncodeSelf(e)
				}
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3339 := z.DecBinary()
	_ = yym3339
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3340 := r.ContainerType()
		if yyct3340 == codecSelferValueTypeMap1234 {
			yyl3340 := r.ReadMapStart()
			if yyl3340 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3340, d)
			}
		} else if yyct3340 == codecSelferValueTypeArray1234 {
			yyl3340 := r.ReadArrayStart()
			if yyl3340 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3340, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3341Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3341Slc
	var yyhl3341 bool = l >= 0
	for yyj3341 := 0; ; yyj3341++ {
		if yyhl3341 {
			if yyj3341 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3341Slc = r.DecodeBytes(yys3341Slc, true, true)
		yys3341 := string(yys3341Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3341 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3344 := &x.ObjectMeta
				yyv3344.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3345 := &x.Spec
				yyv3345.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3346 := &x.Status
				yyv3346.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3341)
		} // end switch yys3341
	} // end for yyj3341
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3347 int
	var yyb3347 bool
	var yyhl3347 bool = l >= 0
	yyj3347++
	if yyhl3347 {
		yyb3347 = yyj3347 > l
	} else {
		yyb3347 = r.CheckBreak()
	}
	if yyb3347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3347++
	if yyhl3347 {
		yyb3347 = yyj3347 > l
	} else {
		yyb3347 = r.CheckBreak()
	}
	if yyb3347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3347++
	if yyhl3347 {
		yyb3347 = yyj3347 > l
	} else {
		yyb3347 = r.CheckBreak()
	}
	if yyb3347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3350 := &x.ObjectMeta
		yyv3350.CodecDecodeSelf(d)
	}
	yyj3347++
	if yyhl3347 {
		yyb3347 = yyj3347 > l
	} else {
		yyb3347 = r.CheckBreak()
	}
	if yyb3347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3351 := &x.Spec
		yyv3351.CodecDecodeSelf(d)
	}
	yyj3347++
	if yyhl3347 {
		yyb3347 = yyj3347 > l
	} else {
		yyb3347 = r.CheckBreak()
	}
	if yyb3347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3352 := &x.Status
		yyv3352.CodecDecodeSelf(d)
	}
	for {
		yyj3347++
		if yyhl3347 {
			yyb3347 = yyj3347 > l
		} else {
			yyb3347 = r.CheckBreak()
		}
		if yyb3347 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3347-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3353 := z.EncBinary()
		_ = yym3353
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3354 := !z.EncBinary()
			yy2arr3354 := z.EncBasicHandle().StructToArray
			var yyq3354 [4]bool
			_, _, _ = yysep3354, yyq3354, yy2arr3354
			const yyr3354 bool = false
			yyq3354[0] = x.Kind != ""
			yyq3354[1] = x.APIVersion != ""
			yyq3354[2] = true
			var yynn3354 int
			if yyr3354 || yy2arr3354 {
				r.EncodeArrayStart(4)
			} else {
				yynn3354 = 1
				for _, b := range yyq3354 {
					if b {
						yynn3354++
					}
				}
				r.EncodeMapStart(yynn3354)
				yynn3354 = 0
			}
			if yyr3354 || yy2arr3354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3354[0] {
					yym3356 := z.EncBinary()
					_ = yym3356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3354[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3357 := z.EncBinary()
					_ = yym3357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3354 || yy2arr3354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3354[1] {
					yym3359 := z.EncBinary()
					_ = yym3359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3354[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3360 := z.EncBinary()
					_ = yym3360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3354 || yy2arr3354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3354[2] {
					yy3362 := &x.ListMeta
					yym3363 := z.EncBinary()
					_ = yym3363
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3362) {
					} else {
						z.EncFallback(yy3362)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3354[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3364 := &x.ListMeta
					yym3365 := z.EncBinary()
					_ = yym3365
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3364) {
					} else {
						z.EncFallback(yy3364)
					}
				}
			}
			if yyr3354 || yy2arr3354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3367 := z.EncBinary()
					_ = yym3367
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3368 := z.EncBinary()
					_ = yym3368
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3354 || yy2arr3354 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3369 := z.DecBinary()
	_ = yym3369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3370 := r.ContainerType()
		if yyct3370 == codecSelferValueTypeMap1234 {
			yyl3370 := r.ReadMapStart()
			if yyl3370 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3370, d)
			}
		} else if yyct3370 == codecSelferValueTypeArray1234 {
			yyl3370 := r.ReadArrayStart()
			if yyl3370 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3370, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3371Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3371Slc
	var yyhl3371 bool = l >= 0
	for yyj3371 := 0; ; yyj3371++ {
		if yyhl3371 {
			if yyj3371 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3371Slc = r.DecodeBytes(yys3371Slc, true, true)
		yys3371 := string(yys3371Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3371 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv3374 := &x.ListMeta
				yym3375 := z.DecBinary()
				_ = yym3375
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3374) {
				} else {
					z.DecFallback(yyv3374, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3376 := &x.Items
				yym3377 := z.DecBinary()
				_ = yym3377
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3376), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3371)
		} // end switch yys3371
	} // end for yyj3371
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3378 int
	var yyb3378 bool
	var yyhl3378 bool = l >= 0
	yyj3378++
	if yyhl3378 {
		yyb3378 = yyj3378 > l
	} else {
		yyb3378 = r.CheckBreak()
	}
	if yyb3378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3378++
	if yyhl3378 {
		yyb3378 = yyj3378 > l
	} else {
		yyb3378 = r.CheckBreak()
	}
	if yyb3378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3378++
	if yyhl3378 {
		yyb3378 = yyj3378 > l
	} else {
		yyb3378 = r.CheckBreak()
	}
	if yyb3378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv3381 := &x.ListMeta
		yym3382 := z.DecBinary()
		_ = yym3382
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3381) {
		} else {
			z.DecFallback(yyv3381, false)
		}
	}
	yyj3378++
	if yyhl3378 {
		yyb3378 = yyj3378 > l
	} else {
		yyb3378 = r.CheckBreak()
	}
	if yyb3378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3383 := &x.Items
		yym3384 := z.DecBinary()
		_ = yym3384
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3383), d)
		}
	}
	for {
		yyj3378++
		if yyhl3378 {
			yyb3378 = yyj3378 > l
		} else {
			yyb3378 = r.CheckBreak()
		}
		if yyb3378 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3378-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3385 := z.EncBinary()
	_ = yym3385
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3386 := z.DecBinary()
	_ = yym3386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3387 := z.EncBinary()
		_ = yym3387
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3388 := !z.EncBinary()
			yy2arr3388 := z.EncBasicHandle().StructToArray
			var yyq3388 [1]bool
			_, _, _ = yysep3388, yyq3388, yy2arr3388
			const yyr3388 bool = false
			yyq3388[0] = len(x.Finalizers) != 0
			var yynn3388 int
			if yyr3388 || yy2arr3388 {
				r.EncodeArrayStart(1)
			} else {
				yynn3388 = 0
				for _, b := range yyq3388 {
					if b {
						yynn3388++
					}
				}
				r.EncodeMapStart(yynn3388)
				yynn3388 = 0
			}
			if yyr3388 || yy2arr3388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3388[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3390 := z.EncBinary()
						_ = yym3390
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3388[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3391 := z.EncBinary()
						_ = yym3391
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3392 := z.DecBinary()
	_ = yym3392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3393 := r.ContainerType()
		if yyct3393 == codecSelferValueTypeMap1234 {
			yyl3393 := r.ReadMapStart()
			if yyl3393 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3393, d)
			}
		} else if yyct3393 == codecSelferValueTypeArray1234 {
			yyl3393 := r.ReadArrayStart()
			if yyl3393 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3393, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3394Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3394Slc
	var yyhl3394 bool = l >= 0
	for yyj3394 := 0; ; yyj3394++ {
		if yyhl3394 {
			if yyj3394 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3394Slc = r.DecodeBytes(yys3394Slc, true, true)
		yys3394 := string(yys3394Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3394 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3395 := &x.Finalizers
				yym3396 := z.DecBinary()
				_ = yym3396
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3395), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3394)
		} // end switch yys3394
	} // end for yyj3394
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3397 int
	var yyb3397 bool
	var yyhl3397 bool = l >= 0
	yyj3397++
	if yyhl3397 {
		yyb3397 = yyj3397 > l
	} else {
		yyb3397 = r.CheckBreak()
	}
	if yyb3397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3398 := &x.Finalizers
		yym3399 := z.DecBinary()
		_ = yym3399
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3398), d)
		}
	}
	for {
		yyj3397++
		if yyhl3397 {
			yyb3397 = yyj3397 > l
		} else {
			yyb3397 = r.CheckBreak()
		}
		if yyb3397 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3397-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3400 := z.EncBinary()
		_ = yym3400
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3401 := !z.EncBinary()
			yy2arr3401 := z.EncBasicHandle().StructToArray
			var yyq3401 [1]bool
			_, _, _ = yysep3401, yyq3401, yy2arr3401
			const yyr3401 bool = false
			yyq3401[0] = x.Phase != ""
			var yynn3401 int
			if yyr3401 || yy2arr3401 {
				r.EncodeArrayStart(1)
			} else {
				yynn3401 = 0
				for _, b := range yyq3401 {
					if b {
						yynn3401++
					}
				}
				r.EncodeMapStart(yynn3401)
				yynn3401 = 0
			}
			if yyr3401 || yy2arr3401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3401[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3401[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3401 || yy2arr3401 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3403 := z.DecBinary()
	_ = yym3403
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3404 := r.ContainerType()
		if yyct3404 == codecSelferValueTypeMap1234 {
			yyl3404 := r.ReadMapStart()
			if yyl3404 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3404, d)
			}
		} else if yyct3404 == codecSelferValueTypeArray1234 {
			yyl3404 := r.ReadArrayStart()
			if yyl3404 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3404, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3405Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3405Slc
	var yyhl3405 bool = l >= 0
	for yyj3405 := 0; ; yyj3405++ {
		if yyhl3405 {
			if yyj3405 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3405Slc = r.DecodeBytes(yys3405Slc, true, true)
		yys3405 := string(yys3405Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3405 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3405)
		} // end switch yys3405
	} // end for yyj3405
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3407 int
	var yyb3407 bool
	var yyhl3407 bool = l >= 0
	yyj3407++
	if yyhl3407 {
		yyb3407 = yyj3407 > l
	} else {
		yyb3407 = r.CheckBreak()
	}
	if yyb3407 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3407++
		if yyhl3407 {
			yyb3407 = yyj3407 > l
		} else {
			yyb3407 = r.CheckBreak()
		}
		if yyb3407 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3407-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3409 := z.EncBinary()
	_ = yym3409
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3410 := z.DecBinary()
	_ = yym3410
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3411 := z.EncBinary()
		_ = yym3411
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3412 := !z.EncBinary()
			yy2arr3412 := z.EncBasicHandle().StructToArray
			var yyq3412 [5]bool
			_, _, _ = yysep3412, yyq3412, yy2arr3412
			const yyr3412 bool = false
			yyq3412[0] = x.Kind != ""
			yyq3412[1] = x.APIVersion != ""
			yyq3412[2] = true
			yyq3412[3] = true
			yyq3412[4] = true
			var yynn3412 int
			if yyr3412 || yy2arr3412 {
				r.EncodeArrayStart(5)
			} else {
				yynn3412 = 0
				for _, b := range yyq3412 {
					if b {
						yynn3412++
					}
				}
				r.EncodeMapStart(yynn3412)
				yynn3412 = 0
			}
			if yyr3412 || yy2arr3412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3412[0] {
					yym3414 := z.EncBinary()
					_ = yym3414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3412[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3415 := z.EncBinary()
					_ = yym3415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3412 || yy2arr3412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3412[1] {
					yym3417 := z.EncBinary()
					_ = yym3417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3412[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3418 := z.EncBinary()
					_ = yym3418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3412 || yy2arr3412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3412[2] {
					yy3420 := &x.ObjectMeta
					yy3420.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3412[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3421 := &x.ObjectMeta
					yy3421.CodecEncodeSelf(e)
				}
			}
			if yyr3412 || yy2arr3412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3412[3] {
					yy3423 := &x.Spec
					yy3423.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3412[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3424 := &x.Spec
					yy3424.CodecEncodeSelf(e)
				}
			}
			if yyr3412 || yy2arr3412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3412[4] {
					yy3426 := &x.Status
					yy3426.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3412[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3427 := &x.Status
					yy3427.CodecEncodeSelf(e)
				}
			}
			if yyr3412 || yy2arr3412 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3428 := z.DecBinary()
	_ = yym3428
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3429 := r.ContainerType()
		if yyct3429 == codecSelferValueTypeMap1234 {
			yyl3429 := r.ReadMapStart()
			if yyl3429 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3429, d)
			}
		} else if yyct3429 == codecSelferValueTypeArray1234 {
			yyl3429 := r.ReadArrayStart()
			if yyl3429 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3429, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3430Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3430Slc
	var yyhl3430 bool = l >= 0
	for yyj3430 := 0; ; yyj3430++ {
		if yyhl3430 {
			if yyj3430 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3430Slc = r.DecodeBytes(yys3430Slc, true, true)
		yys3430 := string(yys3430Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3430 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3433 := &x.ObjectMeta
				yyv3433.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3434 := &x.Spec
				yyv3434.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3435 := &x.Status
				yyv3435.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3430)
		} // end switch yys3430
	} // end for yyj3430
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3436 int
	var yyb3436 bool
	var yyhl3436 bool = l >= 0
	yyj3436++
	if yyhl3436 {
		yyb3436 = yyj3436 > l
	} else {
		yyb3436 = r.CheckBreak()
	}
	if yyb3436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3436++
	if yyhl3436 {
		yyb3436 = yyj3436 > l
	} else {
		yyb3436 = r.CheckBreak()
	}
	if yyb3436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3436++
	if yyhl3436 {
		yyb3436 = yyj3436 > l
	} else {
		yyb3436 = r.CheckBreak()
	}
	if yyb3436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3439 := &x.ObjectMeta
		yyv3439.CodecDecodeSelf(d)
	}
	yyj3436++
	if yyhl3436 {
		yyb3436 = yyj3436 > l
	} else {
		yyb3436 = r.CheckBreak()
	}
	if yyb3436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3440 := &x.Spec
		yyv3440.CodecDecodeSelf(d)
	}
	yyj3436++
	if yyhl3436 {
		yyb3436 = yyj3436 > l
	} else {
		yyb3436 = r.CheckBreak()
	}
	if yyb3436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3441 := &x.Status
		yyv3441.CodecDecodeSelf(d)
	}
	for {
		yyj3436++
		if yyhl3436 {
			yyb3436 = yyj3436 > l
		} else {
			yyb3436 = r.CheckBreak()
		}
		if yyb3436 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3436-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3442 := z.EncBinary()
		_ = yym3442
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3443 := !z.EncBinary()
			yy2arr3443 := z.EncBasicHandle().StructToArray
			var yyq3443 [4]bool
			_, _, _ = yysep3443, yyq3443, yy2arr3443
			const yyr3443 bool = false
			yyq3443[0] = x.Kind != ""
			yyq3443[1] = x.APIVersion != ""
			yyq3443[2] = true
			var yynn3443 int
			if yyr3443 || yy2arr3443 {
				r.EncodeArrayStart(4)
			} else {
				yynn3443 = 1
				for _, b := range yyq3443 {
					if b {
						yynn3443++
					}
				}
				r.EncodeMapStart(yynn3443)
				yynn3443 = 0
			}
			if yyr3443 || yy2arr3443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3443[0] {
					yym3445 := z.EncBinary()
					_ = yym3445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3443[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3446 := z.EncBinary()
					_ = yym3446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3443 || yy2arr3443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3443[1] {
					yym3448 := z.EncBinary()
					_ = yym3448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3443[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3449 := z.EncBinary()
					_ = yym3449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3443 || yy2arr3443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3443[2] {
					yy3451 := &x.ListMeta
					yym3452 := z.EncBinary()
					_ = yym3452
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3451) {
					} else {
						z.EncFallback(yy3451)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3443[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3453 := &x.ListMeta
					yym3454 := z.EncBinary()
					_ = yym3454
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3453) {
					} else {
						z.EncFallback(yy3453)
					}
				}
			}
			if yyr3443 || yy2arr3443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3456 := z.EncBinary()
					_ = yym3456
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3457 := z.EncBinary()
					_ = yym3457
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3443 || yy2arr3443 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3458 := z.DecBinary()
	_ = yym3458
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3459 := r.ContainerType()
		if yyct3459 == codecSelferValueTypeMap1234 {
			yyl3459 := r.ReadMapStart()
			if yyl3459 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3459, d)
			}
		} else if yyct3459 == codecSelferValueTypeArray1234 {
			yyl3459 := r.ReadArrayStart()
			if yyl3459 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3459, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3460Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3460Slc
	var yyhl3460 bool = l >= 0
	for yyj3460 := 0; ; yyj3460++ {
		if yyhl3460 {
			if yyj3460 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3460Slc = r.DecodeBytes(yys3460Slc, true, true)
		yys3460 := string(yys3460Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3460 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv3463 := &x.ListMeta
				yym3464 := z.DecBinary()
				_ = yym3464
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3463) {
				} else {
					z.DecFallback(yyv3463, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3465 := &x.Items
				yym3466 := z.DecBinary()
				_ = yym3466
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3465), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3460)
		} // end switch yys3460
	} // end for yyj3460
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3467 int
	var yyb3467 bool
	var yyhl3467 bool = l >= 0
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv3470 := &x.ListMeta
		yym3471 := z.DecBinary()
		_ = yym3471
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3470) {
		} else {
			z.DecFallback(yyv3470, false)
		}
	}
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3472 := &x.Items
		yym3473 := z.DecBinary()
		_ = yym3473
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3472), d)
		}
	}
	for {
		yyj3467++
		if yyhl3467 {
			yyb3467 = yyj3467 > l
		} else {
			yyb3467 = r.CheckBreak()
		}
		if yyb3467 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3467-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3474 := z.EncBinary()
		_ = yym3474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3475 := !z.EncBinary()
			yy2arr3475 := z.EncBasicHandle().StructToArray
			var yyq3475 [4]bool
			_, _, _ = yysep3475, yyq3475, yy2arr3475
			const yyr3475 bool = false
			yyq3475[0] = x.Kind != ""
			yyq3475[1] = x.APIVersion != ""
			yyq3475[2] = true
			var yynn3475 int
			if yyr3475 || yy2arr3475 {
				r.EncodeArrayStart(4)
			} else {
				yynn3475 = 1
				for _, b := range yyq3475 {
					if b {
						yynn3475++
					}
				}
				r.EncodeMapStart(yynn3475)
				yynn3475 = 0
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3475[0] {
					yym3477 := z.EncBinary()
					_ = yym3477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3475[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3478 := z.EncBinary()
					_ = yym3478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3475[1] {
					yym3480 := z.EncBinary()
					_ = yym3480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3475[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3481 := z.EncBinary()
					_ = yym3481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3475[2] {
					yy3483 := &x.ObjectMeta
					yy3483.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3475[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3484 := &x.ObjectMeta
					yy3484.CodecEncodeSelf(e)
				}
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3486 := &x.Target
				yy3486.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3487 := &x.Target
				yy3487.CodecEncodeSelf(e)
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3488 := z.DecBinary()
	_ = yym3488
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3489 := r.ContainerType()
		if yyct3489 == codecSelferValueTypeMap1234 {
			yyl3489 := r.ReadMapStart()
			if yyl3489 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3489, d)
			}
		} else if yyct3489 == codecSelferValueTypeArray1234 {
			yyl3489 := r.ReadArrayStart()
			if yyl3489 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3489, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3490Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3490Slc
	var yyhl3490 bool = l >= 0
	for yyj3490 := 0; ; yyj3490++ {
		if yyhl3490 {
			if yyj3490 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3490Slc = r.DecodeBytes(yys3490Slc, true, true)
		yys3490 := string(yys3490Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3490 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3493 := &x.ObjectMeta
				yyv3493.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3494 := &x.Target
				yyv3494.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3490)
		} // end switch yys3490
	} // end for yyj3490
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3495 int
	var yyb3495 bool
	var yyhl3495 bool = l >= 0
	yyj3495++
	if yyhl3495 {
		yyb3495 = yyj3495 > l
	} else {
		yyb3495 = r.CheckBreak()
	}
	if yyb3495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3495++
	if yyhl3495 {
		yyb3495 = yyj3495 > l
	} else {
		yyb3495 = r.CheckBreak()
	}
	if yyb3495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3495++
	if yyhl3495 {
		yyb3495 = yyj3495 > l
	} else {
		yyb3495 = r.CheckBreak()
	}
	if yyb3495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3498 := &x.ObjectMeta
		yyv3498.CodecDecodeSelf(d)
	}
	yyj3495++
	if yyhl3495 {
		yyb3495 = yyj3495 > l
	} else {
		yyb3495 = r.CheckBreak()
	}
	if yyb3495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3499 := &x.Target
		yyv3499.CodecDecodeSelf(d)
	}
	for {
		yyj3495++
		if yyhl3495 {
			yyb3495 = yyj3495 > l
		} else {
			yyb3495 = r.CheckBreak()
		}
		if yyb3495 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3495-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3500 := z.EncBinary()
		_ = yym3500
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3501 := !z.EncBinary()
			yy2arr3501 := z.EncBasicHandle().StructToArray
			var yyq3501 [1]bool
			_, _, _ = yysep3501, yyq3501, yy2arr3501
			const yyr3501 bool = false
			yyq3501[0] = x.UID != nil
			var yynn3501 int
			if yyr3501 || yy2arr3501 {
				r.EncodeArrayStart(1)
			} else {
				yynn3501 = 0
				for _, b := range yyq3501 {
					if b {
						yynn3501++
					}
				}
				r.EncodeMapStart(yynn3501)
				yynn3501 = 0
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3501[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3503 := *x.UID
						yym3504 := z.EncBinary()
						_ = yym3504
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3503) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3503))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3501[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3505 := *x.UID
						yym3506 := z.EncBinary()
						_ = yym3506
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3505) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3505))
						}
					}
				}
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3507 := z.DecBinary()
	_ = yym3507
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3508 := r.ContainerType()
		if yyct3508 == codecSelferValueTypeMap1234 {
			yyl3508 := r.ReadMapStart()
			if yyl3508 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3508, d)
			}
		} else if yyct3508 == codecSelferValueTypeArray1234 {
			yyl3508 := r.ReadArrayStart()
			if yyl3508 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3508, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3509Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3509Slc
	var yyhl3509 bool = l >= 0
	for yyj3509 := 0; ; yyj3509++ {
		if yyhl3509 {
			if yyj3509 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3509Slc = r.DecodeBytes(yys3509Slc, true, true)
		yys3509 := string(yys3509Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3509 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3511 := z.DecBinary()
				_ = yym3511
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3509)
		} // end switch yys3509
	} // end for yyj3509
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3512 int
	var yyb3512 bool
	var yyhl3512 bool = l >= 0
	yyj3512++
	if yyhl3512 {
		yyb3512 = yyj3512 > l
	} else {
		yyb3512 = r.CheckBreak()
	}
	if yyb3512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3514 := z.DecBinary()
		_ = yym3514
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3512++
		if yyhl3512 {
			yyb3512 = yyj3512 > l
		} else {
			yyb3512 = r.CheckBreak()
		}
		if yyb3512 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3512-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3515 := z.EncBinary()
		_ = yym3515
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3516 := !z.EncBinary()
			yy2arr3516 := z.EncBasicHandle().StructToArray
			var yyq3516 [5]bool
			_, _, _ = yysep3516, yyq3516, yy2arr3516
			const yyr3516 bool = false
			yyq3516[0] = x.Kind != ""
			yyq3516[1] = x.APIVersion != ""
			yyq3516[2] = x.GracePeriodSeconds != nil
			yyq3516[3] = x.Preconditions != nil
			yyq3516[4] = x.OrphanDependents != nil
			var yynn3516 int
			if yyr3516 || yy2arr3516 {
				r.EncodeArrayStart(5)
			} else {
				yynn3516 = 0
				for _, b := range yyq3516 {
					if b {
						yynn3516++
					}
				}
				r.EncodeMapStart(yynn3516)
				yynn3516 = 0
			}
			if yyr3516 || yy2arr3516 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3516[0] {
					yym3518 := z.EncBinary()
					_ = yym3518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3516[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3519 := z.EncBinary()
					_ = yym3519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3516 || yy2arr3516 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3516[1] {
					yym3521 := z.EncBinary()
					_ = yym3521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3516[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3522 := z.EncBinary()
					_ = yym3522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3516 || yy2arr3516 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3516[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3524 := *x.GracePeriodSeconds
						yym3525 := z.EncBinary()
						_ = yym3525
						if false {
						} else {
							r.EncodeInt(int64(yy3524))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3516[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3526 := *x.GracePeriodSeconds
						yym3527 := z.EncBinary()
						_ = yym3527
						if false {
						} else {
							r.EncodeInt(int64(yy3526))
						}
					}
				}
			}
			if yyr3516 || yy2arr3516 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3516[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3516[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3516 || yy2arr3516 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3516[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3530 := *x.OrphanDependents
						yym3531 := z.EncBinary()
						_ = yym3531
						if false {
						} else {
							r.EncodeBool(bool(yy3530))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3516[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3532 := *x.OrphanDependents
						yym3533 := z.EncBinary()
						_ = yym3533
						if false {
						} else {
							r.EncodeBool(bool(yy3532))
						}
					}
				}
			}
			if yyr3516 || yy2arr3516 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3534 := z.DecBinary()
	_ = yym3534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3535 := r.ContainerType()
		if yyct3535 == codecSelferValueTypeMap1234 {
			yyl3535 := r.ReadMapStart()
			if yyl3535 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3535, d)
			}
		} else if yyct3535 == codecSelferValueTypeArray1234 {
			yyl3535 := r.ReadArrayStart()
			if yyl3535 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3535, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3536Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3536Slc
	var yyhl3536 bool = l >= 0
	for yyj3536 := 0; ; yyj3536++ {
		if yyhl3536 {
			if yyj3536 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3536Slc = r.DecodeBytes(yys3536Slc, true, true)
		yys3536 := string(yys3536Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3536 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3540 := z.DecBinary()
				_ = yym3540
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3543 := z.DecBinary()
				_ = yym3543
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3536)
		} // end switch yys3536
	} // end for yyj3536
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3544 int
	var yyb3544 bool
	var yyhl3544 bool = l >= 0
	yyj3544++
	if yyhl3544 {
		yyb3544 = yyj3544 > l
	} else {
		yyb3544 = r.CheckBreak()
	}
	if yyb3544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3544++
	if yyhl3544 {
		yyb3544 = yyj3544 > l
	} else {
		yyb3544 = r.CheckBreak()
	}
	if yyb3544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3544++
	if yyhl3544 {
		yyb3544 = yyj3544 > l
	} else {
		yyb3544 = r.CheckBreak()
	}
	if yyb3544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3548 := z.DecBinary()
		_ = yym3548
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3544++
	if yyhl3544 {
		yyb3544 = yyj3544 > l
	} else {
		yyb3544 = r.CheckBreak()
	}
	if yyb3544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3544++
	if yyhl3544 {
		yyb3544 = yyj3544 > l
	} else {
		yyb3544 = r.CheckBreak()
	}
	if yyb3544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3551 := z.DecBinary()
		_ = yym3551
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3544++
		if yyhl3544 {
			yyb3544 = yyj3544 > l
		} else {
			yyb3544 = r.CheckBreak()
		}
		if yyb3544 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3544-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3552 := z.EncBinary()
		_ = yym3552
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3553 := !z.EncBinary()
			yy2arr3553 := z.EncBasicHandle().StructToArray
			var yyq3553 [7]bool
			_, _, _ = yysep3553, yyq3553, yy2arr3553
			const yyr3553 bool = false
			yyq3553[0] = x.Kind != ""
			yyq3553[1] = x.APIVersion != ""
			yyq3553[2] = x.LabelSelector != ""
			yyq3553[3] = x.FieldSelector != ""
			yyq3553[4] = x.Watch != false
			yyq3553[5] = x.ResourceVersion != ""
			yyq3553[6] = x.TimeoutSeconds != nil
			var yynn3553 int
			if yyr3553 || yy2arr3553 {
				r.EncodeArrayStart(7)
			} else {
				yynn3553 = 0
				for _, b := range yyq3553 {
					if b {
						yynn3553++
					}
				}
				r.EncodeMapStart(yynn3553)
				yynn3553 = 0
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[0] {
					yym3555 := z.EncBinary()
					_ = yym3555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3553[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3556 := z.EncBinary()
					_ = yym3556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[1] {
					yym3558 := z.EncBinary()
					_ = yym3558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3553[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3559 := z.EncBinary()
					_ = yym3559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[2] {
					yym3561 := z.EncBinary()
					_ = yym3561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3553[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3562 := z.EncBinary()
					_ = yym3562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[3] {
					yym3564 := z.EncBinary()
					_ = yym3564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3553[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3565 := z.EncBinary()
					_ = yym3565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[4] {
					yym3567 := z.EncBinary()
					_ = yym3567
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3553[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3568 := z.EncBinary()
					_ = yym3568
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[5] {
					yym3570 := z.EncBinary()
					_ = yym3570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3553[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3571 := z.EncBinary()
					_ = yym3571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3573 := *x.TimeoutSeconds
						yym3574 := z.EncBinary()
						_ = yym3574
						if false {
						} else {
							r.EncodeInt(int64(yy3573))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3553[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3575 := *x.TimeoutSeconds
						yym3576 := z.EncBinary()
						_ = yym3576
						if false {
						} else {
							r.EncodeInt(int64(yy3575))
						}
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3577 := z.DecBinary()
	_ = yym3577
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3578 := r.ContainerType()
		if yyct3578 == codecSelferValueTypeMap1234 {
			yyl3578 := r.ReadMapStart()
			if yyl3578 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3578, d)
			}
		} else if yyct3578 == codecSelferValueTypeArray1234 {
			yyl3578 := r.ReadArrayStart()
			if yyl3578 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3578, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3579Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3579Slc
	var yyhl3579 bool = l >= 0
	for yyj3579 := 0; ; yyj3579++ {
		if yyhl3579 {
			if yyj3579 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3579Slc = r.DecodeBytes(yys3579Slc, true, true)
		yys3579 := string(yys3579Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3579 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3587 := z.DecBinary()
				_ = yym3587
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3579)
		} // end switch yys3579
	} // end for yyj3579
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3588 int
	var yyb3588 bool
	var yyhl3588 bool = l >= 0
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3596 := z.DecBinary()
		_ = yym3596
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3588++
		if yyhl3588 {
			yyb3588 = yyj3588 > l
		} else {
			yyb3588 = r.CheckBreak()
		}
		if yyb3588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3597 := z.EncBinary()
		_ = yym3597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3598 := !z.EncBinary()
			yy2arr3598 := z.EncBasicHandle().StructToArray
			var yyq3598 [10]bool
			_, _, _ = yysep3598, yyq3598, yy2arr3598
			const yyr3598 bool = false
			yyq3598[0] = x.Kind != ""
			yyq3598[1] = x.APIVersion != ""
			yyq3598[2] = x.Container != ""
			yyq3598[3] = x.Follow != false
			yyq3598[4] = x.Previous != false
			yyq3598[5] = x.SinceSeconds != nil
			yyq3598[6] = x.SinceTime != nil
			yyq3598[7] = x.Timestamps != false
			yyq3598[8] = x.TailLines != nil
			yyq3598[9] = x.LimitBytes != nil
			var yynn3598 int
			if yyr3598 || yy2arr3598 {
				r.EncodeArrayStart(10)
			} else {
				yynn3598 = 0
				for _, b := range yyq3598 {
					if b {
						yynn3598++
					}
				}
				r.EncodeMapStart(yynn3598)
				yynn3598 = 0
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[0] {
					yym3600 := z.EncBinary()
					_ = yym3600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3598[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3601 := z.EncBinary()
					_ = yym3601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[1] {
					yym3603 := z.EncBinary()
					_ = yym3603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3598[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3604 := z.EncBinary()
					_ = yym3604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[2] {
					yym3606 := z.EncBinary()
					_ = yym3606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3598[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3607 := z.EncBinary()
					_ = yym3607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[3] {
					yym3609 := z.EncBinary()
					_ = yym3609
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3598[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3610 := z.EncBinary()
					_ = yym3610
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[4] {
					yym3612 := z.EncBinary()
					_ = yym3612
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3598[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3613 := z.EncBinary()
					_ = yym3613
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3615 := *x.SinceSeconds
						yym3616 := z.EncBinary()
						_ = yym3616
						if false {
						} else {
							r.EncodeInt(int64(yy3615))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3598[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3617 := *x.SinceSeconds
						yym3618 := z.EncBinary()
						_ = yym3618
						if false {
						} else {
							r.EncodeInt(int64(yy3617))
						}
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3620 := z.EncBinary()
						_ = yym3620
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3620 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3620 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3598[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3621 := z.EncBinary()
						_ = yym3621
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3621 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3621 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[7] {
					yym3623 := z.EncBinary()
					_ = yym3623
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3598[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3624 := z.EncBinary()
					_ = yym3624
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3626 := *x.TailLines
						yym3627 := z.EncBinary()
						_ = yym3627
						if false {
						} else {
							r.EncodeInt(int64(yy3626))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3598[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3628 := *x.TailLines
						yym3629 := z.EncBinary()
						_ = yym3629
						if false {
						} else {
							r.EncodeInt(int64(yy3628))
						}
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3631 := *x.LimitBytes
						yym3632 := z.EncBinary()
						_ = yym3632
						if false {
						} else {
							r.EncodeInt(int64(yy3631))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3598[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3633 := *x.LimitBytes
						yym3634 := z.EncBinary()
						_ = yym3634
						if false {
						} else {
							r.EncodeInt(int64(yy3633))
						}
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3635 := z.DecBinary()
	_ = yym3635
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3636 := r.ContainerType()
		if yyct3636 == codecSelferValueTypeMap1234 {
			yyl3636 := r.ReadMapStart()
			if yyl3636 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3636, d)
			}
		} else if yyct3636 == codecSelferValueTypeArray1234 {
			yyl3636 := r.ReadArrayStart()
			if yyl3636 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3636, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3637Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3637Slc
	var yyhl3637 bool = l >= 0
	for yyj3637 := 0; ; yyj3637++ {
		if yyhl3637 {
			if yyj3637 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3637Slc = r.DecodeBytes(yys3637Slc, true, true)
		yys3637 := string(yys3637Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3637 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3644 := z.DecBinary()
				_ = yym3644
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_v1.Time)
				}
				yym3646 := z.DecBinary()
				_ = yym3646
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3646 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3646 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3649 := z.DecBinary()
				_ = yym3649
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3651 := z.DecBinary()
				_ = yym3651
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3637)
		} // end switch yys3637
	} // end for yyj3637
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3652 int
	var yyb3652 bool
	var yyhl3652 bool = l >= 0
	yyj3652++
	if yyhl3652 {
		yyb3652 = yyj3652 > l
	} else {
		yyb3652 = r.CheckBreak()
	}
	if yyb3652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3652++
	if yyhl3652 {
		yyb3652 = yyj3652 > l
	} else {
		yyb3652 = r.CheckBreak()
	}
	if yyb3652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3652++
	if yyhl3652 {
		yyb3652 = yyj3652 > l
	} else {
		yyb3652 = r.CheckBreak()
	}
	if yyb3652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3652++
	if yyhl3652 {
		yyb3652 = yyj3652 > l
	} else {
		yyb3652 = r.CheckBreak()
	}
	if yyb3652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3652++
	if yyhl3652 {
		yyb3652 = yyj3652 > l
	} else {
		yyb3652 = r.CheckBreak()
	}
	if yyb3652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3652++
	if yyhl3652 {
		yyb3652 = yyj3652 > l
	} else {
		yyb3652 = r.CheckBreak()
	}
	if yyb3652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3659 := z.DecBinary()
		_ = yym3659
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3652++
	if yyhl3652 {
		yyb3652 = yyj3652 > l
	} else {
		yyb3652 = r.CheckBreak()
	}
	if yyb3652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_v1.Time)
		}
		yym3661 := z.DecBinary()
		_ = yym3661
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3661 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3661 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3652++
	if yyhl3652 {
		yyb3652 = yyj3652 > l
	} else {
		yyb3652 = r.CheckBreak()
	}
	if yyb3652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3652++
	if yyhl3652 {
		yyb3652 = yyj3652 > l
	} else {
		yyb3652 = r.CheckBreak()
	}
	if yyb3652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3664 := z.DecBinary()
		_ = yym3664
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3652++
	if yyhl3652 {
		yyb3652 = yyj3652 > l
	} else {
		yyb3652 = r.CheckBreak()
	}
	if yyb3652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3666 := z.DecBinary()
		_ = yym3666
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3652++
		if yyhl3652 {
			yyb3652 = yyj3652 > l
		} else {
			yyb3652 = r.CheckBreak()
		}
		if yyb3652 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3652-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3667 := z.EncBinary()
		_ = yym3667
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3668 := !z.EncBinary()
			yy2arr3668 := z.EncBasicHandle().StructToArray
			var yyq3668 [7]bool
			_, _, _ = yysep3668, yyq3668, yy2arr3668
			const yyr3668 bool = false
			yyq3668[0] = x.Kind != ""
			yyq3668[1] = x.APIVersion != ""
			yyq3668[2] = x.Stdin != false
			yyq3668[3] = x.Stdout != false
			yyq3668[4] = x.Stderr != false
			yyq3668[5] = x.TTY != false
			yyq3668[6] = x.Container != ""
			var yynn3668 int
			if yyr3668 || yy2arr3668 {
				r.EncodeArrayStart(7)
			} else {
				yynn3668 = 0
				for _, b := range yyq3668 {
					if b {
						yynn3668++
					}
				}
				r.EncodeMapStart(yynn3668)
				yynn3668 = 0
			}
			if yyr3668 || yy2arr3668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3668[0] {
					yym3670 := z.EncBinary()
					_ = yym3670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3668[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3671 := z.EncBinary()
					_ = yym3671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3668 || yy2arr3668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3668[1] {
					yym3673 := z.EncBinary()
					_ = yym3673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3668[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3674 := z.EncBinary()
					_ = yym3674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3668 || yy2arr3668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3668[2] {
					yym3676 := z.EncBinary()
					_ = yym3676
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3668[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3677 := z.EncBinary()
					_ = yym3677
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3668 || yy2arr3668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3668[3] {
					yym3679 := z.EncBinary()
					_ = yym3679
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3668[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3680 := z.EncBinary()
					_ = yym3680
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3668 || yy2arr3668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3668[4] {
					yym3682 := z.EncBinary()
					_ = yym3682
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3668[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3683 := z.EncBinary()
					_ = yym3683
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3668 || yy2arr3668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3668[5] {
					yym3685 := z.EncBinary()
					_ = yym3685
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3668[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3686 := z.EncBinary()
					_ = yym3686
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3668 || yy2arr3668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3668[6] {
					yym3688 := z.EncBinary()
					_ = yym3688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3668[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3689 := z.EncBinary()
					_ = yym3689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3668 || yy2arr3668 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3690 := z.DecBinary()
	_ = yym3690
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3691 := r.ContainerType()
		if yyct3691 == codecSelferValueTypeMap1234 {
			yyl3691 := r.ReadMapStart()
			if yyl3691 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3691, d)
			}
		} else if yyct3691 == codecSelferValueTypeArray1234 {
			yyl3691 := r.ReadArrayStart()
			if yyl3691 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3691, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3692Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3692Slc
	var yyhl3692 bool = l >= 0
	for yyj3692 := 0; ; yyj3692++ {
		if yyhl3692 {
			if yyj3692 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3692Slc = r.DecodeBytes(yys3692Slc, true, true)
		yys3692 := string(yys3692Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3692 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3692)
		} // end switch yys3692
	} // end for yyj3692
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3700 int
	var yyb3700 bool
	var yyhl3700 bool = l >= 0
	yyj3700++
	if yyhl3700 {
		yyb3700 = yyj3700 > l
	} else {
		yyb3700 = r.CheckBreak()
	}
	if yyb3700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3700++
	if yyhl3700 {
		yyb3700 = yyj3700 > l
	} else {
		yyb3700 = r.CheckBreak()
	}
	if yyb3700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3700++
	if yyhl3700 {
		yyb3700 = yyj3700 > l
	} else {
		yyb3700 = r.CheckBreak()
	}
	if yyb3700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3700++
	if yyhl3700 {
		yyb3700 = yyj3700 > l
	} else {
		yyb3700 = r.CheckBreak()
	}
	if yyb3700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3700++
	if yyhl3700 {
		yyb3700 = yyj3700 > l
	} else {
		yyb3700 = r.CheckBreak()
	}
	if yyb3700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3700++
	if yyhl3700 {
		yyb3700 = yyj3700 > l
	} else {
		yyb3700 = r.CheckBreak()
	}
	if yyb3700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3700++
	if yyhl3700 {
		yyb3700 = yyj3700 > l
	} else {
		yyb3700 = r.CheckBreak()
	}
	if yyb3700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3700++
		if yyhl3700 {
			yyb3700 = yyj3700 > l
		} else {
			yyb3700 = r.CheckBreak()
		}
		if yyb3700 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3700-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3708 := z.EncBinary()
		_ = yym3708
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3709 := !z.EncBinary()
			yy2arr3709 := z.EncBasicHandle().StructToArray
			var yyq3709 [8]bool
			_, _, _ = yysep3709, yyq3709, yy2arr3709
			const yyr3709 bool = false
			yyq3709[0] = x.Kind != ""
			yyq3709[1] = x.APIVersion != ""
			yyq3709[2] = x.Stdin != false
			yyq3709[3] = x.Stdout != false
			yyq3709[4] = x.Stderr != false
			yyq3709[5] = x.TTY != false
			yyq3709[6] = x.Container != ""
			var yynn3709 int
			if yyr3709 || yy2arr3709 {
				r.EncodeArrayStart(8)
			} else {
				yynn3709 = 1
				for _, b := range yyq3709 {
					if b {
						yynn3709++
					}
				}
				r.EncodeMapStart(yynn3709)
				yynn3709 = 0
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3709[0] {
					yym3711 := z.EncBinary()
					_ = yym3711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3709[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3712 := z.EncBinary()
					_ = yym3712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3709[1] {
					yym3714 := z.EncBinary()
					_ = yym3714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3709[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3715 := z.EncBinary()
					_ = yym3715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3709[2] {
					yym3717 := z.EncBinary()
					_ = yym3717
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3709[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3718 := z.EncBinary()
					_ = yym3718
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3709[3] {
					yym3720 := z.EncBinary()
					_ = yym3720
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3709[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3721 := z.EncBinary()
					_ = yym3721
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3709[4] {
					yym3723 := z.EncBinary()
					_ = yym3723
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3709[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3724 := z.EncBinary()
					_ = yym3724
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3709[5] {
					yym3726 := z.EncBinary()
					_ = yym3726
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3709[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3727 := z.EncBinary()
					_ = yym3727
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3709[6] {
					yym3729 := z.EncBinary()
					_ = yym3729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3709[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3730 := z.EncBinary()
					_ = yym3730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3732 := z.EncBinary()
					_ = yym3732
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3733 := z.EncBinary()
					_ = yym3733
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3734 := z.DecBinary()
	_ = yym3734
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3735 := r.ContainerType()
		if yyct3735 == codecSelferValueTypeMap1234 {
			yyl3735 := r.ReadMapStart()
			if yyl3735 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3735, d)
			}
		} else if yyct3735 == codecSelferValueTypeArray1234 {
			yyl3735 := r.ReadArrayStart()
			if yyl3735 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3735, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3736Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3736Slc
	var yyhl3736 bool = l >= 0
	for yyj3736 := 0; ; yyj3736++ {
		if yyhl3736 {
			if yyj3736 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3736Slc = r.DecodeBytes(yys3736Slc, true, true)
		yys3736 := string(yys3736Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3736 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3744 := &x.Command
				yym3745 := z.DecBinary()
				_ = yym3745
				if false {
				} else {
					z.F.DecSliceStringX(yyv3744, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3736)
		} // end switch yys3736
	} // end for yyj3736
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3746 int
	var yyb3746 bool
	var yyhl3746 bool = l >= 0
	yyj3746++
	if yyhl3746 {
		yyb3746 = yyj3746 > l
	} else {
		yyb3746 = r.CheckBreak()
	}
	if yyb3746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3746++
	if yyhl3746 {
		yyb3746 = yyj3746 > l
	} else {
		yyb3746 = r.CheckBreak()
	}
	if yyb3746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3746++
	if yyhl3746 {
		yyb3746 = yyj3746 > l
	} else {
		yyb3746 = r.CheckBreak()
	}
	if yyb3746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3746++
	if yyhl3746 {
		yyb3746 = yyj3746 > l
	} else {
		yyb3746 = r.CheckBreak()
	}
	if yyb3746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3746++
	if yyhl3746 {
		yyb3746 = yyj3746 > l
	} else {
		yyb3746 = r.CheckBreak()
	}
	if yyb3746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3746++
	if yyhl3746 {
		yyb3746 = yyj3746 > l
	} else {
		yyb3746 = r.CheckBreak()
	}
	if yyb3746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3746++
	if yyhl3746 {
		yyb3746 = yyj3746 > l
	} else {
		yyb3746 = r.CheckBreak()
	}
	if yyb3746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3746++
	if yyhl3746 {
		yyb3746 = yyj3746 > l
	} else {
		yyb3746 = r.CheckBreak()
	}
	if yyb3746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3754 := &x.Command
		yym3755 := z.DecBinary()
		_ = yym3755
		if false {
		} else {
			z.F.DecSliceStringX(yyv3754, false, d)
		}
	}
	for {
		yyj3746++
		if yyhl3746 {
			yyb3746 = yyj3746 > l
		} else {
			yyb3746 = r.CheckBreak()
		}
		if yyb3746 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3746-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3756 := z.EncBinary()
		_ = yym3756
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3757 := !z.EncBinary()
			yy2arr3757 := z.EncBasicHandle().StructToArray
			var yyq3757 [3]bool
			_, _, _ = yysep3757, yyq3757, yy2arr3757
			const yyr3757 bool = false
			yyq3757[0] = x.Kind != ""
			yyq3757[1] = x.APIVersion != ""
			yyq3757[2] = x.Path != ""
			var yynn3757 int
			if yyr3757 || yy2arr3757 {
				r.EncodeArrayStart(3)
			} else {
				yynn3757 = 0
				for _, b := range yyq3757 {
					if b {
						yynn3757++
					}
				}
				r.EncodeMapStart(yynn3757)
				yynn3757 = 0
			}
			if yyr3757 || yy2arr3757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3757[0] {
					yym3759 := z.EncBinary()
					_ = yym3759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3757[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3760 := z.EncBinary()
					_ = yym3760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3757 || yy2arr3757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3757[1] {
					yym3762 := z.EncBinary()
					_ = yym3762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3757[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3763 := z.EncBinary()
					_ = yym3763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3757 || yy2arr3757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3757[2] {
					yym3765 := z.EncBinary()
					_ = yym3765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3757[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3766 := z.EncBinary()
					_ = yym3766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3757 || yy2arr3757 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3767 := z.DecBinary()
	_ = yym3767
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3768 := r.ContainerType()
		if yyct3768 == codecSelferValueTypeMap1234 {
			yyl3768 := r.ReadMapStart()
			if yyl3768 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3768, d)
			}
		} else if yyct3768 == codecSelferValueTypeArray1234 {
			yyl3768 := r.ReadArrayStart()
			if yyl3768 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3768, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3769Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3769Slc
	var yyhl3769 bool = l >= 0
	for yyj3769 := 0; ; yyj3769++ {
		if yyhl3769 {
			if yyj3769 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3769Slc = r.DecodeBytes(yys3769Slc, true, true)
		yys3769 := string(yys3769Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3769 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3769)
		} // end switch yys3769
	} // end for yyj3769
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3773 int
	var yyb3773 bool
	var yyhl3773 bool = l >= 0
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3773++
		if yyhl3773 {
			yyb3773 = yyj3773 > l
		} else {
			yyb3773 = r.CheckBreak()
		}
		if yyb3773 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3773-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3777 := z.EncBinary()
		_ = yym3777
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3778 := !z.EncBinary()
			yy2arr3778 := z.EncBasicHandle().StructToArray
			var yyq3778 [3]bool
			_, _, _ = yysep3778, yyq3778, yy2arr3778
			const yyr3778 bool = false
			yyq3778[0] = x.Kind != ""
			yyq3778[1] = x.APIVersion != ""
			yyq3778[2] = x.Path != ""
			var yynn3778 int
			if yyr3778 || yy2arr3778 {
				r.EncodeArrayStart(3)
			} else {
				yynn3778 = 0
				for _, b := range yyq3778 {
					if b {
						yynn3778++
					}
				}
				r.EncodeMapStart(yynn3778)
				yynn3778 = 0
			}
			if yyr3778 || yy2arr3778 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3778[0] {
					yym3780 := z.EncBinary()
					_ = yym3780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3778[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3781 := z.EncBinary()
					_ = yym3781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3778 || yy2arr3778 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3778[1] {
					yym3783 := z.EncBinary()
					_ = yym3783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3778[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3784 := z.EncBinary()
					_ = yym3784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3778 || yy2arr3778 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3778[2] {
					yym3786 := z.EncBinary()
					_ = yym3786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3778[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3787 := z.EncBinary()
					_ = yym3787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3778 || yy2arr3778 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3788 := z.DecBinary()
	_ = yym3788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3789 := r.ContainerType()
		if yyct3789 == codecSelferValueTypeMap1234 {
			yyl3789 := r.ReadMapStart()
			if yyl3789 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3789, d)
			}
		} else if yyct3789 == codecSelferValueTypeArray1234 {
			yyl3789 := r.ReadArrayStart()
			if yyl3789 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3789, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3790Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3790Slc
	var yyhl3790 bool = l >= 0
	for yyj3790 := 0; ; yyj3790++ {
		if yyhl3790 {
			if yyj3790 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3790Slc = r.DecodeBytes(yys3790Slc, true, true)
		yys3790 := string(yys3790Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3790 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3790)
		} // end switch yys3790
	} // end for yyj3790
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3794 int
	var yyb3794 bool
	var yyhl3794 bool = l >= 0
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3794++
		if yyhl3794 {
			yyb3794 = yyj3794 > l
		} else {
			yyb3794 = r.CheckBreak()
		}
		if yyb3794 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3794-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3798 := z.EncBinary()
		_ = yym3798
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3799 := !z.EncBinary()
			yy2arr3799 := z.EncBasicHandle().StructToArray
			var yyq3799 [3]bool
			_, _, _ = yysep3799, yyq3799, yy2arr3799
			const yyr3799 bool = false
			yyq3799[0] = x.Kind != ""
			yyq3799[1] = x.APIVersion != ""
			yyq3799[2] = x.Path != ""
			var yynn3799 int
			if yyr3799 || yy2arr3799 {
				r.EncodeArrayStart(3)
			} else {
				yynn3799 = 0
				for _, b := range yyq3799 {
					if b {
						yynn3799++
					}
				}
				r.EncodeMapStart(yynn3799)
				yynn3799 = 0
			}
			if yyr3799 || yy2arr3799 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3799[0] {
					yym3801 := z.EncBinary()
					_ = yym3801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3799[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3802 := z.EncBinary()
					_ = yym3802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3799 || yy2arr3799 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3799[1] {
					yym3804 := z.EncBinary()
					_ = yym3804
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3799[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3805 := z.EncBinary()
					_ = yym3805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3799 || yy2arr3799 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3799[2] {
					yym3807 := z.EncBinary()
					_ = yym3807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3799[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3808 := z.EncBinary()
					_ = yym3808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3799 || yy2arr3799 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3809 := z.DecBinary()
	_ = yym3809
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3810 := r.ContainerType()
		if yyct3810 == codecSelferValueTypeMap1234 {
			yyl3810 := r.ReadMapStart()
			if yyl3810 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3810, d)
			}
		} else if yyct3810 == codecSelferValueTypeArray1234 {
			yyl3810 := r.ReadArrayStart()
			if yyl3810 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3810, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3811Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3811Slc
	var yyhl3811 bool = l >= 0
	for yyj3811 := 0; ; yyj3811++ {
		if yyhl3811 {
			if yyj3811 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3811Slc = r.DecodeBytes(yys3811Slc, true, true)
		yys3811 := string(yys3811Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3811 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3811)
		} // end switch yys3811
	} // end for yyj3811
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3815 int
	var yyb3815 bool
	var yyhl3815 bool = l >= 0
	yyj3815++
	if yyhl3815 {
		yyb3815 = yyj3815 > l
	} else {
		yyb3815 = r.CheckBreak()
	}
	if yyb3815 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3815++
	if yyhl3815 {
		yyb3815 = yyj3815 > l
	} else {
		yyb3815 = r.CheckBreak()
	}
	if yyb3815 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3815++
	if yyhl3815 {
		yyb3815 = yyj3815 > l
	} else {
		yyb3815 = r.CheckBreak()
	}
	if yyb3815 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3815++
		if yyhl3815 {
			yyb3815 = yyj3815 > l
		} else {
			yyb3815 = r.CheckBreak()
		}
		if yyb3815 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3815-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3819 := z.EncBinary()
		_ = yym3819
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3820 := !z.EncBinary()
			yy2arr3820 := z.EncBasicHandle().StructToArray
			var yyq3820 [7]bool
			_, _, _ = yysep3820, yyq3820, yy2arr3820
			const yyr3820 bool = false
			yyq3820[0] = x.Kind != ""
			yyq3820[1] = x.Namespace != ""
			yyq3820[2] = x.Name != ""
			yyq3820[3] = x.UID != ""
			yyq3820[4] = x.APIVersion != ""
			yyq3820[5] = x.ResourceVersion != ""
			yyq3820[6] = x.FieldPath != ""
			var yynn3820 int
			if yyr3820 || yy2arr3820 {
				r.EncodeArrayStart(7)
			} else {
				yynn3820 = 0
				for _, b := range yyq3820 {
					if b {
						yynn3820++
					}
				}
				r.EncodeMapStart(yynn3820)
				yynn3820 = 0
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[0] {
					yym3822 := z.EncBinary()
					_ = yym3822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3820[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3823 := z.EncBinary()
					_ = yym3823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[1] {
					yym3825 := z.EncBinary()
					_ = yym3825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3820[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3826 := z.EncBinary()
					_ = yym3826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[2] {
					yym3828 := z.EncBinary()
					_ = yym3828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3820[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3829 := z.EncBinary()
					_ = yym3829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[3] {
					yym3831 := z.EncBinary()
					_ = yym3831
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3820[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3832 := z.EncBinary()
					_ = yym3832
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[4] {
					yym3834 := z.EncBinary()
					_ = yym3834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3820[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3835 := z.EncBinary()
					_ = yym3835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[5] {
					yym3837 := z.EncBinary()
					_ = yym3837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3820[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3838 := z.EncBinary()
					_ = yym3838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[6] {
					yym3840 := z.EncBinary()
					_ = yym3840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3820[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3841 := z.EncBinary()
					_ = yym3841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3842 := z.DecBinary()
	_ = yym3842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3843 := r.ContainerType()
		if yyct3843 == codecSelferValueTypeMap1234 {
			yyl3843 := r.ReadMapStart()
			if yyl3843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3843, d)
			}
		} else if yyct3843 == codecSelferValueTypeArray1234 {
			yyl3843 := r.ReadArrayStart()
			if yyl3843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3844Slc
	var yyhl3844 bool = l >= 0
	for yyj3844 := 0; ; yyj3844++ {
		if yyhl3844 {
			if yyj3844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3844Slc = r.DecodeBytes(yys3844Slc, true, true)
		yys3844 := string(yys3844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3844 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3844)
		} // end switch yys3844
	} // end for yyj3844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3852 int
	var yyb3852 bool
	var yyhl3852 bool = l >= 0
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3852++
		if yyhl3852 {
			yyb3852 = yyj3852 > l
		} else {
			yyb3852 = r.CheckBreak()
		}
		if yyb3852 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3852-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3860 := z.EncBinary()
		_ = yym3860
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3861 := !z.EncBinary()
			yy2arr3861 := z.EncBasicHandle().StructToArray
			var yyq3861 [1]bool
			_, _, _ = yysep3861, yyq3861, yy2arr3861
			const yyr3861 bool = false
			yyq3861[0] = x.Name != ""
			var yynn3861 int
			if yyr3861 || yy2arr3861 {
				r.EncodeArrayStart(1)
			} else {
				yynn3861 = 0
				for _, b := range yyq3861 {
					if b {
						yynn3861++
					}
				}
				r.EncodeMapStart(yynn3861)
				yynn3861 = 0
			}
			if yyr3861 || yy2arr3861 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3861[0] {
					yym3863 := z.EncBinary()
					_ = yym3863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3861[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3864 := z.EncBinary()
					_ = yym3864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3861 || yy2arr3861 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3865 := z.DecBinary()
	_ = yym3865
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3866 := r.ContainerType()
		if yyct3866 == codecSelferValueTypeMap1234 {
			yyl3866 := r.ReadMapStart()
			if yyl3866 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3866, d)
			}
		} else if yyct3866 == codecSelferValueTypeArray1234 {
			yyl3866 := r.ReadArrayStart()
			if yyl3866 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3866, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3867Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3867Slc
	var yyhl3867 bool = l >= 0
	for yyj3867 := 0; ; yyj3867++ {
		if yyhl3867 {
			if yyj3867 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3867Slc = r.DecodeBytes(yys3867Slc, true, true)
		yys3867 := string(yys3867Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3867 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3867)
		} // end switch yys3867
	} // end for yyj3867
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3869 int
	var yyb3869 bool
	var yyhl3869 bool = l >= 0
	yyj3869++
	if yyhl3869 {
		yyb3869 = yyj3869 > l
	} else {
		yyb3869 = r.CheckBreak()
	}
	if yyb3869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3869++
		if yyhl3869 {
			yyb3869 = yyj3869 > l
		} else {
			yyb3869 = r.CheckBreak()
		}
		if yyb3869 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3869-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3871 := z.EncBinary()
		_ = yym3871
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3872 := !z.EncBinary()
			yy2arr3872 := z.EncBasicHandle().StructToArray
			var yyq3872 [3]bool
			_, _, _ = yysep3872, yyq3872, yy2arr3872
			const yyr3872 bool = false
			yyq3872[0] = x.Kind != ""
			yyq3872[1] = x.APIVersion != ""
			yyq3872[2] = true
			var yynn3872 int
			if yyr3872 || yy2arr3872 {
				r.EncodeArrayStart(3)
			} else {
				yynn3872 = 0
				for _, b := range yyq3872 {
					if b {
						yynn3872++
					}
				}
				r.EncodeMapStart(yynn3872)
				yynn3872 = 0
			}
			if yyr3872 || yy2arr3872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3872[0] {
					yym3874 := z.EncBinary()
					_ = yym3874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3872[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3875 := z.EncBinary()
					_ = yym3875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3872 || yy2arr3872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3872[1] {
					yym3877 := z.EncBinary()
					_ = yym3877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3872[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3878 := z.EncBinary()
					_ = yym3878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3872 || yy2arr3872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3872[2] {
					yy3880 := &x.Reference
					yy3880.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3872[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3881 := &x.Reference
					yy3881.CodecEncodeSelf(e)
				}
			}
			if yyr3872 || yy2arr3872 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3882 := z.DecBinary()
	_ = yym3882
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3883 := r.ContainerType()
		if yyct3883 == codecSelferValueTypeMap1234 {
			yyl3883 := r.ReadMapStart()
			if yyl3883 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3883, d)
			}
		} else if yyct3883 == codecSelferValueTypeArray1234 {
			yyl3883 := r.ReadArrayStart()
			if yyl3883 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3883, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3884Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3884Slc
	var yyhl3884 bool = l >= 0
	for yyj3884 := 0; ; yyj3884++ {
		if yyhl3884 {
			if yyj3884 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3884Slc = r.DecodeBytes(yys3884Slc, true, true)
		yys3884 := string(yys3884Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3884 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3887 := &x.Reference
				yyv3887.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3884)
		} // end switch yys3884
	} // end for yyj3884
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3888 int
	var yyb3888 bool
	var yyhl3888 bool = l >= 0
	yyj3888++
	if yyhl3888 {
		yyb3888 = yyj3888 > l
	} else {
		yyb3888 = r.CheckBreak()
	}
	if yyb3888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3888++
	if yyhl3888 {
		yyb3888 = yyj3888 > l
	} else {
		yyb3888 = r.CheckBreak()
	}
	if yyb3888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3888++
	if yyhl3888 {
		yyb3888 = yyj3888 > l
	} else {
		yyb3888 = r.CheckBreak()
	}
	if yyb3888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3891 := &x.Reference
		yyv3891.CodecDecodeSelf(d)
	}
	for {
		yyj3888++
		if yyhl3888 {
			yyb3888 = yyj3888 > l
		} else {
			yyb3888 = r.CheckBreak()
		}
		if yyb3888 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3888-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3892 := z.EncBinary()
		_ = yym3892
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3893 := !z.EncBinary()
			yy2arr3893 := z.EncBasicHandle().StructToArray
			var yyq3893 [2]bool
			_, _, _ = yysep3893, yyq3893, yy2arr3893
			const yyr3893 bool = false
			yyq3893[0] = x.Component != ""
			yyq3893[1] = x.Host != ""
			var yynn3893 int
			if yyr3893 || yy2arr3893 {
				r.EncodeArrayStart(2)
			} else {
				yynn3893 = 0
				for _, b := range yyq3893 {
					if b {
						yynn3893++
					}
				}
				r.EncodeMapStart(yynn3893)
				yynn3893 = 0
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3893[0] {
					yym3895 := z.EncBinary()
					_ = yym3895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3893[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3896 := z.EncBinary()
					_ = yym3896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3893[1] {
					yym3898 := z.EncBinary()
					_ = yym3898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3893[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3899 := z.EncBinary()
					_ = yym3899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3900 := z.DecBinary()
	_ = yym3900
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3901 := r.ContainerType()
		if yyct3901 == codecSelferValueTypeMap1234 {
			yyl3901 := r.ReadMapStart()
			if yyl3901 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3901, d)
			}
		} else if yyct3901 == codecSelferValueTypeArray1234 {
			yyl3901 := r.ReadArrayStart()
			if yyl3901 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3901, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3902Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3902Slc
	var yyhl3902 bool = l >= 0
	for yyj3902 := 0; ; yyj3902++ {
		if yyhl3902 {
			if yyj3902 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3902Slc = r.DecodeBytes(yys3902Slc, true, true)
		yys3902 := string(yys3902Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3902 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3902)
		} // end switch yys3902
	} // end for yyj3902
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3905 int
	var yyb3905 bool
	var yyhl3905 bool = l >= 0
	yyj3905++
	if yyhl3905 {
		yyb3905 = yyj3905 > l
	} else {
		yyb3905 = r.CheckBreak()
	}
	if yyb3905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3905++
	if yyhl3905 {
		yyb3905 = yyj3905 > l
	} else {
		yyb3905 = r.CheckBreak()
	}
	if yyb3905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3905++
		if yyhl3905 {
			yyb3905 = yyj3905 > l
		} else {
			yyb3905 = r.CheckBreak()
		}
		if yyb3905 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3905-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3908 := z.EncBinary()
		_ = yym3908
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3909 := !z.EncBinary()
			yy2arr3909 := z.EncBasicHandle().StructToArray
			var yyq3909 [11]bool
			_, _, _ = yysep3909, yyq3909, yy2arr3909
			const yyr3909 bool = false
			yyq3909[0] = x.Kind != ""
			yyq3909[1] = x.APIVersion != ""
			yyq3909[4] = x.Reason != ""
			yyq3909[5] = x.Message != ""
			yyq3909[6] = true
			yyq3909[7] = true
			yyq3909[8] = true
			yyq3909[9] = x.Count != 0
			yyq3909[10] = x.Type != ""
			var yynn3909 int
			if yyr3909 || yy2arr3909 {
				r.EncodeArrayStart(11)
			} else {
				yynn3909 = 2
				for _, b := range yyq3909 {
					if b {
						yynn3909++
					}
				}
				r.EncodeMapStart(yynn3909)
				yynn3909 = 0
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[0] {
					yym3911 := z.EncBinary()
					_ = yym3911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3909[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3912 := z.EncBinary()
					_ = yym3912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[1] {
					yym3914 := z.EncBinary()
					_ = yym3914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3909[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3915 := z.EncBinary()
					_ = yym3915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3917 := &x.ObjectMeta
				yy3917.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3918 := &x.ObjectMeta
				yy3918.CodecEncodeSelf(e)
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3920 := &x.InvolvedObject
				yy3920.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3921 := &x.InvolvedObject
				yy3921.CodecEncodeSelf(e)
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[4] {
					yym3923 := z.EncBinary()
					_ = yym3923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3909[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3924 := z.EncBinary()
					_ = yym3924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[5] {
					yym3926 := z.EncBinary()
					_ = yym3926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3909[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3927 := z.EncBinary()
					_ = yym3927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[6] {
					yy3929 := &x.Source
					yy3929.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3909[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3930 := &x.Source
					yy3930.CodecEncodeSelf(e)
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[7] {
					yy3932 := &x.FirstTimestamp
					yym3933 := z.EncBinary()
					_ = yym3933
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3932) {
					} else if yym3933 {
						z.EncBinaryMarshal(yy3932)
					} else if !yym3933 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3932)
					} else {
						z.EncFallback(yy3932)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3909[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3934 := &x.FirstTimestamp
					yym3935 := z.EncBinary()
					_ = yym3935
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3934) {
					} else if yym3935 {
						z.EncBinaryMarshal(yy3934)
					} else if !yym3935 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3934)
					} else {
						z.EncFallback(yy3934)
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[8] {
					yy3937 := &x.LastTimestamp
					yym3938 := z.EncBinary()
					_ = yym3938
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3937) {
					} else if yym3938 {
						z.EncBinaryMarshal(yy3937)
					} else if !yym3938 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3937)
					} else {
						z.EncFallback(yy3937)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3909[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3939 := &x.LastTimestamp
					yym3940 := z.EncBinary()
					_ = yym3940
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3939) {
					} else if yym3940 {
						z.EncBinaryMarshal(yy3939)
					} else if !yym3940 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3939)
					} else {
						z.EncFallback(yy3939)
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[9] {
					yym3942 := z.EncBinary()
					_ = yym3942
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3909[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3943 := z.EncBinary()
					_ = yym3943
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[10] {
					yym3945 := z.EncBinary()
					_ = yym3945
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3909[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3946 := z.EncBinary()
					_ = yym3946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3947 := z.DecBinary()
	_ = yym3947
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3948 := r.ContainerType()
		if yyct3948 == codecSelferValueTypeMap1234 {
			yyl3948 := r.ReadMapStart()
			if yyl3948 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3948, d)
			}
		} else if yyct3948 == codecSelferValueTypeArray1234 {
			yyl3948 := r.ReadArrayStart()
			if yyl3948 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3948, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3949Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3949Slc
	var yyhl3949 bool = l >= 0
	for yyj3949 := 0; ; yyj3949++ {
		if yyhl3949 {
			if yyj3949 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3949Slc = r.DecodeBytes(yys3949Slc, true, true)
		yys3949 := string(yys3949Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3949 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3952 := &x.ObjectMeta
				yyv3952.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3953 := &x.InvolvedObject
				yyv3953.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3956 := &x.Source
				yyv3956.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_v1.Time{}
			} else {
				yyv3957 := &x.FirstTimestamp
				yym3958 := z.DecBinary()
				_ = yym3958
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3957) {
				} else if yym3958 {
					z.DecBinaryUnmarshal(yyv3957)
				} else if !yym3958 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3957)
				} else {
					z.DecFallback(yyv3957, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_v1.Time{}
			} else {
				yyv3959 := &x.LastTimestamp
				yym3960 := z.DecBinary()
				_ = yym3960
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3959) {
				} else if yym3960 {
					z.DecBinaryUnmarshal(yyv3959)
				} else if !yym3960 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3959)
				} else {
					z.DecFallback(yyv3959, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3949)
		} // end switch yys3949
	} // end for yyj3949
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3963 int
	var yyb3963 bool
	var yyhl3963 bool = l >= 0
	yyj3963++
	if yyhl3963 {
		yyb3963 = yyj3963 > l
	} else {
		yyb3963 = r.CheckBreak()
	}
	if yyb3963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3963++
	if yyhl3963 {
		yyb3963 = yyj3963 > l
	} else {
		yyb3963 = r.CheckBreak()
	}
	if yyb3963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3963++
	if yyhl3963 {
		yyb3963 = yyj3963 > l
	} else {
		yyb3963 = r.CheckBreak()
	}
	if yyb3963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3966 := &x.ObjectMeta
		yyv3966.CodecDecodeSelf(d)
	}
	yyj3963++
	if yyhl3963 {
		yyb3963 = yyj3963 > l
	} else {
		yyb3963 = r.CheckBreak()
	}
	if yyb3963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3967 := &x.InvolvedObject
		yyv3967.CodecDecodeSelf(d)
	}
	yyj3963++
	if yyhl3963 {
		yyb3963 = yyj3963 > l
	} else {
		yyb3963 = r.CheckBreak()
	}
	if yyb3963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3963++
	if yyhl3963 {
		yyb3963 = yyj3963 > l
	} else {
		yyb3963 = r.CheckBreak()
	}
	if yyb3963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3963++
	if yyhl3963 {
		yyb3963 = yyj3963 > l
	} else {
		yyb3963 = r.CheckBreak()
	}
	if yyb3963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3970 := &x.Source
		yyv3970.CodecDecodeSelf(d)
	}
	yyj3963++
	if yyhl3963 {
		yyb3963 = yyj3963 > l
	} else {
		yyb3963 = r.CheckBreak()
	}
	if yyb3963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_v1.Time{}
	} else {
		yyv3971 := &x.FirstTimestamp
		yym3972 := z.DecBinary()
		_ = yym3972
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3971) {
		} else if yym3972 {
			z.DecBinaryUnmarshal(yyv3971)
		} else if !yym3972 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3971)
		} else {
			z.DecFallback(yyv3971, false)
		}
	}
	yyj3963++
	if yyhl3963 {
		yyb3963 = yyj3963 > l
	} else {
		yyb3963 = r.CheckBreak()
	}
	if yyb3963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_v1.Time{}
	} else {
		yyv3973 := &x.LastTimestamp
		yym3974 := z.DecBinary()
		_ = yym3974
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3973) {
		} else if yym3974 {
			z.DecBinaryUnmarshal(yyv3973)
		} else if !yym3974 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3973)
		} else {
			z.DecFallback(yyv3973, false)
		}
	}
	yyj3963++
	if yyhl3963 {
		yyb3963 = yyj3963 > l
	} else {
		yyb3963 = r.CheckBreak()
	}
	if yyb3963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3963++
	if yyhl3963 {
		yyb3963 = yyj3963 > l
	} else {
		yyb3963 = r.CheckBreak()
	}
	if yyb3963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3963++
		if yyhl3963 {
			yyb3963 = yyj3963 > l
		} else {
			yyb3963 = r.CheckBreak()
		}
		if yyb3963 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3963-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3977 := z.EncBinary()
		_ = yym3977
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3978 := !z.EncBinary()
			yy2arr3978 := z.EncBasicHandle().StructToArray
			var yyq3978 [4]bool
			_, _, _ = yysep3978, yyq3978, yy2arr3978
			const yyr3978 bool = false
			yyq3978[0] = x.Kind != ""
			yyq3978[1] = x.APIVersion != ""
			yyq3978[2] = true
			var yynn3978 int
			if yyr3978 || yy2arr3978 {
				r.EncodeArrayStart(4)
			} else {
				yynn3978 = 1
				for _, b := range yyq3978 {
					if b {
						yynn3978++
					}
				}
				r.EncodeMapStart(yynn3978)
				yynn3978 = 0
			}
			if yyr3978 || yy2arr3978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3978[0] {
					yym3980 := z.EncBinary()
					_ = yym3980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3978[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3981 := z.EncBinary()
					_ = yym3981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3978 || yy2arr3978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3978[1] {
					yym3983 := z.EncBinary()
					_ = yym3983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3978[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3984 := z.EncBinary()
					_ = yym3984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3978 || yy2arr3978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3978[2] {
					yy3986 := &x.ListMeta
					yym3987 := z.EncBinary()
					_ = yym3987
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3986) {
					} else {
						z.EncFallback(yy3986)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3978[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3988 := &x.ListMeta
					yym3989 := z.EncBinary()
					_ = yym3989
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3988) {
					} else {
						z.EncFallback(yy3988)
					}
				}
			}
			if yyr3978 || yy2arr3978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3991 := z.EncBinary()
					_ = yym3991
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3992 := z.EncBinary()
					_ = yym3992
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3978 || yy2arr3978 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3993 := z.DecBinary()
	_ = yym3993
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3994 := r.ContainerType()
		if yyct3994 == codecSelferValueTypeMap1234 {
			yyl3994 := r.ReadMapStart()
			if yyl3994 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3994, d)
			}
		} else if yyct3994 == codecSelferValueTypeArray1234 {
			yyl3994 := r.ReadArrayStart()
			if yyl3994 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3994, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3995Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3995Slc
	var yyhl3995 bool = l >= 0
	for yyj3995 := 0; ; yyj3995++ {
		if yyhl3995 {
			if yyj3995 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3995Slc = r.DecodeBytes(yys3995Slc, true, true)
		yys3995 := string(yys3995Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3995 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv3998 := &x.ListMeta
				yym3999 := z.DecBinary()
				_ = yym3999
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3998) {
				} else {
					z.DecFallback(yyv3998, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4000 := &x.Items
				yym4001 := z.DecBinary()
				_ = yym4001
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv4000), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3995)
		} // end switch yys3995
	} // end for yyj3995
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4002 int
	var yyb4002 bool
	var yyhl4002 bool = l >= 0
	yyj4002++
	if yyhl4002 {
		yyb4002 = yyj4002 > l
	} else {
		yyb4002 = r.CheckBreak()
	}
	if yyb4002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4002++
	if yyhl4002 {
		yyb4002 = yyj4002 > l
	} else {
		yyb4002 = r.CheckBreak()
	}
	if yyb4002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4002++
	if yyhl4002 {
		yyb4002 = yyj4002 > l
	} else {
		yyb4002 = r.CheckBreak()
	}
	if yyb4002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4005 := &x.ListMeta
		yym4006 := z.DecBinary()
		_ = yym4006
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4005) {
		} else {
			z.DecFallback(yyv4005, false)
		}
	}
	yyj4002++
	if yyhl4002 {
		yyb4002 = yyj4002 > l
	} else {
		yyb4002 = r.CheckBreak()
	}
	if yyb4002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4007 := &x.Items
		yym4008 := z.DecBinary()
		_ = yym4008
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv4007), d)
		}
	}
	for {
		yyj4002++
		if yyhl4002 {
			yyb4002 = yyj4002 > l
		} else {
			yyb4002 = r.CheckBreak()
		}
		if yyb4002 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4002-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4009 := z.EncBinary()
		_ = yym4009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4010 := !z.EncBinary()
			yy2arr4010 := z.EncBasicHandle().StructToArray
			var yyq4010 [4]bool
			_, _, _ = yysep4010, yyq4010, yy2arr4010
			const yyr4010 bool = false
			yyq4010[0] = x.Kind != ""
			yyq4010[1] = x.APIVersion != ""
			yyq4010[2] = true
			var yynn4010 int
			if yyr4010 || yy2arr4010 {
				r.EncodeArrayStart(4)
			} else {
				yynn4010 = 1
				for _, b := range yyq4010 {
					if b {
						yynn4010++
					}
				}
				r.EncodeMapStart(yynn4010)
				yynn4010 = 0
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4010[0] {
					yym4012 := z.EncBinary()
					_ = yym4012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4010[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4013 := z.EncBinary()
					_ = yym4013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4010[1] {
					yym4015 := z.EncBinary()
					_ = yym4015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4010[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4016 := z.EncBinary()
					_ = yym4016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4010[2] {
					yy4018 := &x.ListMeta
					yym4019 := z.EncBinary()
					_ = yym4019
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4018) {
					} else {
						z.EncFallback(yy4018)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4010[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4020 := &x.ListMeta
					yym4021 := z.EncBinary()
					_ = yym4021
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4020) {
					} else {
						z.EncFallback(yy4020)
					}
				}
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4023 := z.EncBinary()
					_ = yym4023
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4024 := z.EncBinary()
					_ = yym4024
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4025 := z.DecBinary()
	_ = yym4025
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4026 := r.ContainerType()
		if yyct4026 == codecSelferValueTypeMap1234 {
			yyl4026 := r.ReadMapStart()
			if yyl4026 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4026, d)
			}
		} else if yyct4026 == codecSelferValueTypeArray1234 {
			yyl4026 := r.ReadArrayStart()
			if yyl4026 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4026, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4027Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4027Slc
	var yyhl4027 bool = l >= 0
	for yyj4027 := 0; ; yyj4027++ {
		if yyhl4027 {
			if yyj4027 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4027Slc = r.DecodeBytes(yys4027Slc, true, true)
		yys4027 := string(yys4027Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4027 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4030 := &x.ListMeta
				yym4031 := z.DecBinary()
				_ = yym4031
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4030) {
				} else {
					z.DecFallback(yyv4030, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4032 := &x.Items
				yym4033 := z.DecBinary()
				_ = yym4033
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv4032), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4027)
		} // end switch yys4027
	} // end for yyj4027
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4034 int
	var yyb4034 bool
	var yyhl4034 bool = l >= 0
	yyj4034++
	if yyhl4034 {
		yyb4034 = yyj4034 > l
	} else {
		yyb4034 = r.CheckBreak()
	}
	if yyb4034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4034++
	if yyhl4034 {
		yyb4034 = yyj4034 > l
	} else {
		yyb4034 = r.CheckBreak()
	}
	if yyb4034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4034++
	if yyhl4034 {
		yyb4034 = yyj4034 > l
	} else {
		yyb4034 = r.CheckBreak()
	}
	if yyb4034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4037 := &x.ListMeta
		yym4038 := z.DecBinary()
		_ = yym4038
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4037) {
		} else {
			z.DecFallback(yyv4037, false)
		}
	}
	yyj4034++
	if yyhl4034 {
		yyb4034 = yyj4034 > l
	} else {
		yyb4034 = r.CheckBreak()
	}
	if yyb4034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4039 := &x.Items
		yym4040 := z.DecBinary()
		_ = yym4040
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv4039), d)
		}
	}
	for {
		yyj4034++
		if yyhl4034 {
			yyb4034 = yyj4034 > l
		} else {
			yyb4034 = r.CheckBreak()
		}
		if yyb4034 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4034-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4041 := z.EncBinary()
	_ = yym4041
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4042 := z.DecBinary()
	_ = yym4042
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4043 := z.EncBinary()
		_ = yym4043
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4044 := !z.EncBinary()
			yy2arr4044 := z.EncBasicHandle().StructToArray
			var yyq4044 [6]bool
			_, _, _ = yysep4044, yyq4044, yy2arr4044
			const yyr4044 bool = false
			yyq4044[0] = x.Type != ""
			yyq4044[1] = len(x.Max) != 0
			yyq4044[2] = len(x.Min) != 0
			yyq4044[3] = len(x.Default) != 0
			yyq4044[4] = len(x.DefaultRequest) != 0
			yyq4044[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn4044 int
			if yyr4044 || yy2arr4044 {
				r.EncodeArrayStart(6)
			} else {
				yynn4044 = 0
				for _, b := range yyq4044 {
					if b {
						yynn4044++
					}
				}
				r.EncodeMapStart(yynn4044)
				yynn4044 = 0
			}
			if yyr4044 || yy2arr4044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4044[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4044[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4044 || yy2arr4044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4044[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4044[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4044 || yy2arr4044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4044[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4044[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4044 || yy2arr4044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4044[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4044[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4044 || yy2arr4044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4044[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4044[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4044 || yy2arr4044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4044[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4044[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4044 || yy2arr4044 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4051 := z.DecBinary()
	_ = yym4051
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4052 := r.ContainerType()
		if yyct4052 == codecSelferValueTypeMap1234 {
			yyl4052 := r.ReadMapStart()
			if yyl4052 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4052, d)
			}
		} else if yyct4052 == codecSelferValueTypeArray1234 {
			yyl4052 := r.ReadArrayStart()
			if yyl4052 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4052, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4053Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4053Slc
	var yyhl4053 bool = l >= 0
	for yyj4053 := 0; ; yyj4053++ {
		if yyhl4053 {
			if yyj4053 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4053Slc = r.DecodeBytes(yys4053Slc, true, true)
		yys4053 := string(yys4053Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4053 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4055 := &x.Max
				yyv4055.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4056 := &x.Min
				yyv4056.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4057 := &x.Default
				yyv4057.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4058 := &x.DefaultRequest
				yyv4058.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4059 := &x.MaxLimitRequestRatio
				yyv4059.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4053)
		} // end switch yys4053
	} // end for yyj4053
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4060 int
	var yyb4060 bool
	var yyhl4060 bool = l >= 0
	yyj4060++
	if yyhl4060 {
		yyb4060 = yyj4060 > l
	} else {
		yyb4060 = r.CheckBreak()
	}
	if yyb4060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4060++
	if yyhl4060 {
		yyb4060 = yyj4060 > l
	} else {
		yyb4060 = r.CheckBreak()
	}
	if yyb4060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4062 := &x.Max
		yyv4062.CodecDecodeSelf(d)
	}
	yyj4060++
	if yyhl4060 {
		yyb4060 = yyj4060 > l
	} else {
		yyb4060 = r.CheckBreak()
	}
	if yyb4060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4063 := &x.Min
		yyv4063.CodecDecodeSelf(d)
	}
	yyj4060++
	if yyhl4060 {
		yyb4060 = yyj4060 > l
	} else {
		yyb4060 = r.CheckBreak()
	}
	if yyb4060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4064 := &x.Default
		yyv4064.CodecDecodeSelf(d)
	}
	yyj4060++
	if yyhl4060 {
		yyb4060 = yyj4060 > l
	} else {
		yyb4060 = r.CheckBreak()
	}
	if yyb4060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4065 := &x.DefaultRequest
		yyv4065.CodecDecodeSelf(d)
	}
	yyj4060++
	if yyhl4060 {
		yyb4060 = yyj4060 > l
	} else {
		yyb4060 = r.CheckBreak()
	}
	if yyb4060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4066 := &x.MaxLimitRequestRatio
		yyv4066.CodecDecodeSelf(d)
	}
	for {
		yyj4060++
		if yyhl4060 {
			yyb4060 = yyj4060 > l
		} else {
			yyb4060 = r.CheckBreak()
		}
		if yyb4060 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4060-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4067 := z.EncBinary()
		_ = yym4067
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4068 := !z.EncBinary()
			yy2arr4068 := z.EncBasicHandle().StructToArray
			var yyq4068 [1]bool
			_, _, _ = yysep4068, yyq4068, yy2arr4068
			const yyr4068 bool = false
			var yynn4068 int
			if yyr4068 || yy2arr4068 {
				r.EncodeArrayStart(1)
			} else {
				yynn4068 = 1
				for _, b := range yyq4068 {
					if b {
						yynn4068++
					}
				}
				r.EncodeMapStart(yynn4068)
				yynn4068 = 0
			}
			if yyr4068 || yy2arr4068 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4070 := z.EncBinary()
					_ = yym4070
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4071 := z.EncBinary()
					_ = yym4071
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4068 || yy2arr4068 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4072 := z.DecBinary()
	_ = yym4072
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4073 := r.ContainerType()
		if yyct4073 == codecSelferValueTypeMap1234 {
			yyl4073 := r.ReadMapStart()
			if yyl4073 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4073, d)
			}
		} else if yyct4073 == codecSelferValueTypeArray1234 {
			yyl4073 := r.ReadArrayStart()
			if yyl4073 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4073, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4074Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4074Slc
	var yyhl4074 bool = l >= 0
	for yyj4074 := 0; ; yyj4074++ {
		if yyhl4074 {
			if yyj4074 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4074Slc = r.DecodeBytes(yys4074Slc, true, true)
		yys4074 := string(yys4074Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4074 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4075 := &x.Limits
				yym4076 := z.DecBinary()
				_ = yym4076
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4075), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4074)
		} // end switch yys4074
	} // end for yyj4074
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4077 int
	var yyb4077 bool
	var yyhl4077 bool = l >= 0
	yyj4077++
	if yyhl4077 {
		yyb4077 = yyj4077 > l
	} else {
		yyb4077 = r.CheckBreak()
	}
	if yyb4077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4078 := &x.Limits
		yym4079 := z.DecBinary()
		_ = yym4079
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4078), d)
		}
	}
	for {
		yyj4077++
		if yyhl4077 {
			yyb4077 = yyj4077 > l
		} else {
			yyb4077 = r.CheckBreak()
		}
		if yyb4077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4080 := z.EncBinary()
		_ = yym4080
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4081 := !z.EncBinary()
			yy2arr4081 := z.EncBasicHandle().StructToArray
			var yyq4081 [4]bool
			_, _, _ = yysep4081, yyq4081, yy2arr4081
			const yyr4081 bool = false
			yyq4081[0] = x.Kind != ""
			yyq4081[1] = x.APIVersion != ""
			yyq4081[2] = true
			yyq4081[3] = true
			var yynn4081 int
			if yyr4081 || yy2arr4081 {
				r.EncodeArrayStart(4)
			} else {
				yynn4081 = 0
				for _, b := range yyq4081 {
					if b {
						yynn4081++
					}
				}
				r.EncodeMapStart(yynn4081)
				yynn4081 = 0
			}
			if yyr4081 || yy2arr4081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4081[0] {
					yym4083 := z.EncBinary()
					_ = yym4083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4081[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4084 := z.EncBinary()
					_ = yym4084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4081 || yy2arr4081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4081[1] {
					yym4086 := z.EncBinary()
					_ = yym4086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4081[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4087 := z.EncBinary()
					_ = yym4087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4081 || yy2arr4081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4081[2] {
					yy4089 := &x.ObjectMeta
					yy4089.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4081[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4090 := &x.ObjectMeta
					yy4090.CodecEncodeSelf(e)
				}
			}
			if yyr4081 || yy2arr4081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4081[3] {
					yy4092 := &x.Spec
					yy4092.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4081[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4093 := &x.Spec
					yy4093.CodecEncodeSelf(e)
				}
			}
			if yyr4081 || yy2arr4081 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4094 := z.DecBinary()
	_ = yym4094
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4095 := r.ContainerType()
		if yyct4095 == codecSelferValueTypeMap1234 {
			yyl4095 := r.ReadMapStart()
			if yyl4095 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4095, d)
			}
		} else if yyct4095 == codecSelferValueTypeArray1234 {
			yyl4095 := r.ReadArrayStart()
			if yyl4095 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4095, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4096Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4096Slc
	var yyhl4096 bool = l >= 0
	for yyj4096 := 0; ; yyj4096++ {
		if yyhl4096 {
			if yyj4096 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4096Slc = r.DecodeBytes(yys4096Slc, true, true)
		yys4096 := string(yys4096Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4096 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4099 := &x.ObjectMeta
				yyv4099.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4100 := &x.Spec
				yyv4100.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4096)
		} // end switch yys4096
	} // end for yyj4096
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4101 int
	var yyb4101 bool
	var yyhl4101 bool = l >= 0
	yyj4101++
	if yyhl4101 {
		yyb4101 = yyj4101 > l
	} else {
		yyb4101 = r.CheckBreak()
	}
	if yyb4101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4101++
	if yyhl4101 {
		yyb4101 = yyj4101 > l
	} else {
		yyb4101 = r.CheckBreak()
	}
	if yyb4101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4101++
	if yyhl4101 {
		yyb4101 = yyj4101 > l
	} else {
		yyb4101 = r.CheckBreak()
	}
	if yyb4101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4104 := &x.ObjectMeta
		yyv4104.CodecDecodeSelf(d)
	}
	yyj4101++
	if yyhl4101 {
		yyb4101 = yyj4101 > l
	} else {
		yyb4101 = r.CheckBreak()
	}
	if yyb4101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4105 := &x.Spec
		yyv4105.CodecDecodeSelf(d)
	}
	for {
		yyj4101++
		if yyhl4101 {
			yyb4101 = yyj4101 > l
		} else {
			yyb4101 = r.CheckBreak()
		}
		if yyb4101 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4101-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4106 := z.EncBinary()
		_ = yym4106
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4107 := !z.EncBinary()
			yy2arr4107 := z.EncBasicHandle().StructToArray
			var yyq4107 [4]bool
			_, _, _ = yysep4107, yyq4107, yy2arr4107
			const yyr4107 bool = false
			yyq4107[0] = x.Kind != ""
			yyq4107[1] = x.APIVersion != ""
			yyq4107[2] = true
			var yynn4107 int
			if yyr4107 || yy2arr4107 {
				r.EncodeArrayStart(4)
			} else {
				yynn4107 = 1
				for _, b := range yyq4107 {
					if b {
						yynn4107++
					}
				}
				r.EncodeMapStart(yynn4107)
				yynn4107 = 0
			}
			if yyr4107 || yy2arr4107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4107[0] {
					yym4109 := z.EncBinary()
					_ = yym4109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4107[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4110 := z.EncBinary()
					_ = yym4110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4107 || yy2arr4107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4107[1] {
					yym4112 := z.EncBinary()
					_ = yym4112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4107[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4113 := z.EncBinary()
					_ = yym4113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4107 || yy2arr4107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4107[2] {
					yy4115 := &x.ListMeta
					yym4116 := z.EncBinary()
					_ = yym4116
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4115) {
					} else {
						z.EncFallback(yy4115)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4107[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4117 := &x.ListMeta
					yym4118 := z.EncBinary()
					_ = yym4118
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4117) {
					} else {
						z.EncFallback(yy4117)
					}
				}
			}
			if yyr4107 || yy2arr4107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4120 := z.EncBinary()
					_ = yym4120
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4121 := z.EncBinary()
					_ = yym4121
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4107 || yy2arr4107 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4122 := z.DecBinary()
	_ = yym4122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4123 := r.ContainerType()
		if yyct4123 == codecSelferValueTypeMap1234 {
			yyl4123 := r.ReadMapStart()
			if yyl4123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4123, d)
			}
		} else if yyct4123 == codecSelferValueTypeArray1234 {
			yyl4123 := r.ReadArrayStart()
			if yyl4123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4124Slc
	var yyhl4124 bool = l >= 0
	for yyj4124 := 0; ; yyj4124++ {
		if yyhl4124 {
			if yyj4124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4124Slc = r.DecodeBytes(yys4124Slc, true, true)
		yys4124 := string(yys4124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4124 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4127 := &x.ListMeta
				yym4128 := z.DecBinary()
				_ = yym4128
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4127) {
				} else {
					z.DecFallback(yyv4127, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4129 := &x.Items
				yym4130 := z.DecBinary()
				_ = yym4130
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4129), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4124)
		} // end switch yys4124
	} // end for yyj4124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4131 int
	var yyb4131 bool
	var yyhl4131 bool = l >= 0
	yyj4131++
	if yyhl4131 {
		yyb4131 = yyj4131 > l
	} else {
		yyb4131 = r.CheckBreak()
	}
	if yyb4131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4131++
	if yyhl4131 {
		yyb4131 = yyj4131 > l
	} else {
		yyb4131 = r.CheckBreak()
	}
	if yyb4131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4131++
	if yyhl4131 {
		yyb4131 = yyj4131 > l
	} else {
		yyb4131 = r.CheckBreak()
	}
	if yyb4131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4134 := &x.ListMeta
		yym4135 := z.DecBinary()
		_ = yym4135
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4134) {
		} else {
			z.DecFallback(yyv4134, false)
		}
	}
	yyj4131++
	if yyhl4131 {
		yyb4131 = yyj4131 > l
	} else {
		yyb4131 = r.CheckBreak()
	}
	if yyb4131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4136 := &x.Items
		yym4137 := z.DecBinary()
		_ = yym4137
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4136), d)
		}
	}
	for {
		yyj4131++
		if yyhl4131 {
			yyb4131 = yyj4131 > l
		} else {
			yyb4131 = r.CheckBreak()
		}
		if yyb4131 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4131-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4138 := z.EncBinary()
	_ = yym4138
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4139 := z.DecBinary()
	_ = yym4139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4140 := z.EncBinary()
		_ = yym4140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4141 := !z.EncBinary()
			yy2arr4141 := z.EncBasicHandle().StructToArray
			var yyq4141 [2]bool
			_, _, _ = yysep4141, yyq4141, yy2arr4141
			const yyr4141 bool = false
			yyq4141[0] = len(x.Hard) != 0
			yyq4141[1] = len(x.Scopes) != 0
			var yynn4141 int
			if yyr4141 || yy2arr4141 {
				r.EncodeArrayStart(2)
			} else {
				yynn4141 = 0
				for _, b := range yyq4141 {
					if b {
						yynn4141++
					}
				}
				r.EncodeMapStart(yynn4141)
				yynn4141 = 0
			}
			if yyr4141 || yy2arr4141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4141[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4141[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4141 || yy2arr4141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4141[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4144 := z.EncBinary()
						_ = yym4144
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4141[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4145 := z.EncBinary()
						_ = yym4145
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4141 || yy2arr4141 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4146 := z.DecBinary()
	_ = yym4146
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4147 := r.ContainerType()
		if yyct4147 == codecSelferValueTypeMap1234 {
			yyl4147 := r.ReadMapStart()
			if yyl4147 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4147, d)
			}
		} else if yyct4147 == codecSelferValueTypeArray1234 {
			yyl4147 := r.ReadArrayStart()
			if yyl4147 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4147, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4148Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4148Slc
	var yyhl4148 bool = l >= 0
	for yyj4148 := 0; ; yyj4148++ {
		if yyhl4148 {
			if yyj4148 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4148Slc = r.DecodeBytes(yys4148Slc, true, true)
		yys4148 := string(yys4148Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4148 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4149 := &x.Hard
				yyv4149.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4150 := &x.Scopes
				yym4151 := z.DecBinary()
				_ = yym4151
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4150), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4148)
		} // end switch yys4148
	} // end for yyj4148
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4152 int
	var yyb4152 bool
	var yyhl4152 bool = l >= 0
	yyj4152++
	if yyhl4152 {
		yyb4152 = yyj4152 > l
	} else {
		yyb4152 = r.CheckBreak()
	}
	if yyb4152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4153 := &x.Hard
		yyv4153.CodecDecodeSelf(d)
	}
	yyj4152++
	if yyhl4152 {
		yyb4152 = yyj4152 > l
	} else {
		yyb4152 = r.CheckBreak()
	}
	if yyb4152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4154 := &x.Scopes
		yym4155 := z.DecBinary()
		_ = yym4155
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4154), d)
		}
	}
	for {
		yyj4152++
		if yyhl4152 {
			yyb4152 = yyj4152 > l
		} else {
			yyb4152 = r.CheckBreak()
		}
		if yyb4152 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4152-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4156 := z.EncBinary()
		_ = yym4156
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4157 := !z.EncBinary()
			yy2arr4157 := z.EncBasicHandle().StructToArray
			var yyq4157 [2]bool
			_, _, _ = yysep4157, yyq4157, yy2arr4157
			const yyr4157 bool = false
			yyq4157[0] = len(x.Hard) != 0
			yyq4157[1] = len(x.Used) != 0
			var yynn4157 int
			if yyr4157 || yy2arr4157 {
				r.EncodeArrayStart(2)
			} else {
				yynn4157 = 0
				for _, b := range yyq4157 {
					if b {
						yynn4157++
					}
				}
				r.EncodeMapStart(yynn4157)
				yynn4157 = 0
			}
			if yyr4157 || yy2arr4157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4157[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4157[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4157 || yy2arr4157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4157[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4157[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4157 || yy2arr4157 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4160 := z.DecBinary()
	_ = yym4160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4161 := r.ContainerType()
		if yyct4161 == codecSelferValueTypeMap1234 {
			yyl4161 := r.ReadMapStart()
			if yyl4161 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4161, d)
			}
		} else if yyct4161 == codecSelferValueTypeArray1234 {
			yyl4161 := r.ReadArrayStart()
			if yyl4161 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4162Slc
	var yyhl4162 bool = l >= 0
	for yyj4162 := 0; ; yyj4162++ {
		if yyhl4162 {
			if yyj4162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4162Slc = r.DecodeBytes(yys4162Slc, true, true)
		yys4162 := string(yys4162Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4162 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4163 := &x.Hard
				yyv4163.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4164 := &x.Used
				yyv4164.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4162)
		} // end switch yys4162
	} // end for yyj4162
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4165 int
	var yyb4165 bool
	var yyhl4165 bool = l >= 0
	yyj4165++
	if yyhl4165 {
		yyb4165 = yyj4165 > l
	} else {
		yyb4165 = r.CheckBreak()
	}
	if yyb4165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4166 := &x.Hard
		yyv4166.CodecDecodeSelf(d)
	}
	yyj4165++
	if yyhl4165 {
		yyb4165 = yyj4165 > l
	} else {
		yyb4165 = r.CheckBreak()
	}
	if yyb4165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4167 := &x.Used
		yyv4167.CodecDecodeSelf(d)
	}
	for {
		yyj4165++
		if yyhl4165 {
			yyb4165 = yyj4165 > l
		} else {
			yyb4165 = r.CheckBreak()
		}
		if yyb4165 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4165-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4168 := z.EncBinary()
		_ = yym4168
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4169 := !z.EncBinary()
			yy2arr4169 := z.EncBasicHandle().StructToArray
			var yyq4169 [5]bool
			_, _, _ = yysep4169, yyq4169, yy2arr4169
			const yyr4169 bool = false
			yyq4169[0] = x.Kind != ""
			yyq4169[1] = x.APIVersion != ""
			yyq4169[2] = true
			yyq4169[3] = true
			yyq4169[4] = true
			var yynn4169 int
			if yyr4169 || yy2arr4169 {
				r.EncodeArrayStart(5)
			} else {
				yynn4169 = 0
				for _, b := range yyq4169 {
					if b {
						yynn4169++
					}
				}
				r.EncodeMapStart(yynn4169)
				yynn4169 = 0
			}
			if yyr4169 || yy2arr4169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4169[0] {
					yym4171 := z.EncBinary()
					_ = yym4171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4169[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4172 := z.EncBinary()
					_ = yym4172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4169 || yy2arr4169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4169[1] {
					yym4174 := z.EncBinary()
					_ = yym4174
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4169[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4175 := z.EncBinary()
					_ = yym4175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4169 || yy2arr4169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4169[2] {
					yy4177 := &x.ObjectMeta
					yy4177.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4169[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4178 := &x.ObjectMeta
					yy4178.CodecEncodeSelf(e)
				}
			}
			if yyr4169 || yy2arr4169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4169[3] {
					yy4180 := &x.Spec
					yy4180.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4169[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4181 := &x.Spec
					yy4181.CodecEncodeSelf(e)
				}
			}
			if yyr4169 || yy2arr4169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4169[4] {
					yy4183 := &x.Status
					yy4183.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4169[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4184 := &x.Status
					yy4184.CodecEncodeSelf(e)
				}
			}
			if yyr4169 || yy2arr4169 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4185 := z.DecBinary()
	_ = yym4185
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4186 := r.ContainerType()
		if yyct4186 == codecSelferValueTypeMap1234 {
			yyl4186 := r.ReadMapStart()
			if yyl4186 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4186, d)
			}
		} else if yyct4186 == codecSelferValueTypeArray1234 {
			yyl4186 := r.ReadArrayStart()
			if yyl4186 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4186, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4187Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4187Slc
	var yyhl4187 bool = l >= 0
	for yyj4187 := 0; ; yyj4187++ {
		if yyhl4187 {
			if yyj4187 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4187Slc = r.DecodeBytes(yys4187Slc, true, true)
		yys4187 := string(yys4187Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4187 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4190 := &x.ObjectMeta
				yyv4190.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4191 := &x.Spec
				yyv4191.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4192 := &x.Status
				yyv4192.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4187)
		} // end switch yys4187
	} // end for yyj4187
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4193 int
	var yyb4193 bool
	var yyhl4193 bool = l >= 0
	yyj4193++
	if yyhl4193 {
		yyb4193 = yyj4193 > l
	} else {
		yyb4193 = r.CheckBreak()
	}
	if yyb4193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4193++
	if yyhl4193 {
		yyb4193 = yyj4193 > l
	} else {
		yyb4193 = r.CheckBreak()
	}
	if yyb4193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4193++
	if yyhl4193 {
		yyb4193 = yyj4193 > l
	} else {
		yyb4193 = r.CheckBreak()
	}
	if yyb4193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4196 := &x.ObjectMeta
		yyv4196.CodecDecodeSelf(d)
	}
	yyj4193++
	if yyhl4193 {
		yyb4193 = yyj4193 > l
	} else {
		yyb4193 = r.CheckBreak()
	}
	if yyb4193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4197 := &x.Spec
		yyv4197.CodecDecodeSelf(d)
	}
	yyj4193++
	if yyhl4193 {
		yyb4193 = yyj4193 > l
	} else {
		yyb4193 = r.CheckBreak()
	}
	if yyb4193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4198 := &x.Status
		yyv4198.CodecDecodeSelf(d)
	}
	for {
		yyj4193++
		if yyhl4193 {
			yyb4193 = yyj4193 > l
		} else {
			yyb4193 = r.CheckBreak()
		}
		if yyb4193 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4193-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4199 := z.EncBinary()
		_ = yym4199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4200 := !z.EncBinary()
			yy2arr4200 := z.EncBasicHandle().StructToArray
			var yyq4200 [4]bool
			_, _, _ = yysep4200, yyq4200, yy2arr4200
			const yyr4200 bool = false
			yyq4200[0] = x.Kind != ""
			yyq4200[1] = x.APIVersion != ""
			yyq4200[2] = true
			var yynn4200 int
			if yyr4200 || yy2arr4200 {
				r.EncodeArrayStart(4)
			} else {
				yynn4200 = 1
				for _, b := range yyq4200 {
					if b {
						yynn4200++
					}
				}
				r.EncodeMapStart(yynn4200)
				yynn4200 = 0
			}
			if yyr4200 || yy2arr4200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4200[0] {
					yym4202 := z.EncBinary()
					_ = yym4202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4200[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4203 := z.EncBinary()
					_ = yym4203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4200 || yy2arr4200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4200[1] {
					yym4205 := z.EncBinary()
					_ = yym4205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4200[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4206 := z.EncBinary()
					_ = yym4206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4200 || yy2arr4200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4200[2] {
					yy4208 := &x.ListMeta
					yym4209 := z.EncBinary()
					_ = yym4209
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4208) {
					} else {
						z.EncFallback(yy4208)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4200[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4210 := &x.ListMeta
					yym4211 := z.EncBinary()
					_ = yym4211
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4210) {
					} else {
						z.EncFallback(yy4210)
					}
				}
			}
			if yyr4200 || yy2arr4200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4213 := z.EncBinary()
					_ = yym4213
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4214 := z.EncBinary()
					_ = yym4214
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4200 || yy2arr4200 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4215 := z.DecBinary()
	_ = yym4215
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4216 := r.ContainerType()
		if yyct4216 == codecSelferValueTypeMap1234 {
			yyl4216 := r.ReadMapStart()
			if yyl4216 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4216, d)
			}
		} else if yyct4216 == codecSelferValueTypeArray1234 {
			yyl4216 := r.ReadArrayStart()
			if yyl4216 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4216, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4217Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4217Slc
	var yyhl4217 bool = l >= 0
	for yyj4217 := 0; ; yyj4217++ {
		if yyhl4217 {
			if yyj4217 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4217Slc = r.DecodeBytes(yys4217Slc, true, true)
		yys4217 := string(yys4217Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4217 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4220 := &x.ListMeta
				yym4221 := z.DecBinary()
				_ = yym4221
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4220) {
				} else {
					z.DecFallback(yyv4220, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4222 := &x.Items
				yym4223 := z.DecBinary()
				_ = yym4223
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4222), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4217)
		} // end switch yys4217
	} // end for yyj4217
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4224 int
	var yyb4224 bool
	var yyhl4224 bool = l >= 0
	yyj4224++
	if yyhl4224 {
		yyb4224 = yyj4224 > l
	} else {
		yyb4224 = r.CheckBreak()
	}
	if yyb4224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4224++
	if yyhl4224 {
		yyb4224 = yyj4224 > l
	} else {
		yyb4224 = r.CheckBreak()
	}
	if yyb4224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4224++
	if yyhl4224 {
		yyb4224 = yyj4224 > l
	} else {
		yyb4224 = r.CheckBreak()
	}
	if yyb4224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4227 := &x.ListMeta
		yym4228 := z.DecBinary()
		_ = yym4228
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4227) {
		} else {
			z.DecFallback(yyv4227, false)
		}
	}
	yyj4224++
	if yyhl4224 {
		yyb4224 = yyj4224 > l
	} else {
		yyb4224 = r.CheckBreak()
	}
	if yyb4224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4229 := &x.Items
		yym4230 := z.DecBinary()
		_ = yym4230
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4229), d)
		}
	}
	for {
		yyj4224++
		if yyhl4224 {
			yyb4224 = yyj4224 > l
		} else {
			yyb4224 = r.CheckBreak()
		}
		if yyb4224 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4224-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4231 := z.EncBinary()
		_ = yym4231
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4232 := !z.EncBinary()
			yy2arr4232 := z.EncBasicHandle().StructToArray
			var yyq4232 [6]bool
			_, _, _ = yysep4232, yyq4232, yy2arr4232
			const yyr4232 bool = false
			yyq4232[0] = x.Kind != ""
			yyq4232[1] = x.APIVersion != ""
			yyq4232[2] = true
			yyq4232[3] = len(x.Data) != 0
			yyq4232[4] = len(x.StringData) != 0
			yyq4232[5] = x.Type != ""
			var yynn4232 int
			if yyr4232 || yy2arr4232 {
				r.EncodeArrayStart(6)
			} else {
				yynn4232 = 0
				for _, b := range yyq4232 {
					if b {
						yynn4232++
					}
				}
				r.EncodeMapStart(yynn4232)
				yynn4232 = 0
			}
			if yyr4232 || yy2arr4232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4232[0] {
					yym4234 := z.EncBinary()
					_ = yym4234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4232[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4235 := z.EncBinary()
					_ = yym4235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4232 || yy2arr4232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4232[1] {
					yym4237 := z.EncBinary()
					_ = yym4237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4232[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4238 := z.EncBinary()
					_ = yym4238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4232 || yy2arr4232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4232[2] {
					yy4240 := &x.ObjectMeta
					yy4240.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4232[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4241 := &x.ObjectMeta
					yy4241.CodecEncodeSelf(e)
				}
			}
			if yyr4232 || yy2arr4232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4232[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4243 := z.EncBinary()
						_ = yym4243
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4232[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4244 := z.EncBinary()
						_ = yym4244
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4232 || yy2arr4232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4232[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4246 := z.EncBinary()
						_ = yym4246
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4232[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4247 := z.EncBinary()
						_ = yym4247
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4232 || yy2arr4232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4232[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4232[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4232 || yy2arr4232 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4249 := z.DecBinary()
	_ = yym4249
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4250 := r.ContainerType()
		if yyct4250 == codecSelferValueTypeMap1234 {
			yyl4250 := r.ReadMapStart()
			if yyl4250 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4250, d)
			}
		} else if yyct4250 == codecSelferValueTypeArray1234 {
			yyl4250 := r.ReadArrayStart()
			if yyl4250 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4250, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4251Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4251Slc
	var yyhl4251 bool = l >= 0
	for yyj4251 := 0; ; yyj4251++ {
		if yyhl4251 {
			if yyj4251 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4251Slc = r.DecodeBytes(yys4251Slc, true, true)
		yys4251 := string(yys4251Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4251 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4254 := &x.ObjectMeta
				yyv4254.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4255 := &x.Data
				yym4256 := z.DecBinary()
				_ = yym4256
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4255), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4257 := &x.StringData
				yym4258 := z.DecBinary()
				_ = yym4258
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4257, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4251)
		} // end switch yys4251
	} // end for yyj4251
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4260 int
	var yyb4260 bool
	var yyhl4260 bool = l >= 0
	yyj4260++
	if yyhl4260 {
		yyb4260 = yyj4260 > l
	} else {
		yyb4260 = r.CheckBreak()
	}
	if yyb4260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4260++
	if yyhl4260 {
		yyb4260 = yyj4260 > l
	} else {
		yyb4260 = r.CheckBreak()
	}
	if yyb4260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4260++
	if yyhl4260 {
		yyb4260 = yyj4260 > l
	} else {
		yyb4260 = r.CheckBreak()
	}
	if yyb4260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4263 := &x.ObjectMeta
		yyv4263.CodecDecodeSelf(d)
	}
	yyj4260++
	if yyhl4260 {
		yyb4260 = yyj4260 > l
	} else {
		yyb4260 = r.CheckBreak()
	}
	if yyb4260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4264 := &x.Data
		yym4265 := z.DecBinary()
		_ = yym4265
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4264), d)
		}
	}
	yyj4260++
	if yyhl4260 {
		yyb4260 = yyj4260 > l
	} else {
		yyb4260 = r.CheckBreak()
	}
	if yyb4260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4266 := &x.StringData
		yym4267 := z.DecBinary()
		_ = yym4267
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4266, false, d)
		}
	}
	yyj4260++
	if yyhl4260 {
		yyb4260 = yyj4260 > l
	} else {
		yyb4260 = r.CheckBreak()
	}
	if yyb4260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4260++
		if yyhl4260 {
			yyb4260 = yyj4260 > l
		} else {
			yyb4260 = r.CheckBreak()
		}
		if yyb4260 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4260-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4269 := z.EncBinary()
	_ = yym4269
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4270 := z.DecBinary()
	_ = yym4270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4271 := z.EncBinary()
		_ = yym4271
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4272 := !z.EncBinary()
			yy2arr4272 := z.EncBasicHandle().StructToArray
			var yyq4272 [4]bool
			_, _, _ = yysep4272, yyq4272, yy2arr4272
			const yyr4272 bool = false
			yyq4272[0] = x.Kind != ""
			yyq4272[1] = x.APIVersion != ""
			yyq4272[2] = true
			var yynn4272 int
			if yyr4272 || yy2arr4272 {
				r.EncodeArrayStart(4)
			} else {
				yynn4272 = 1
				for _, b := range yyq4272 {
					if b {
						yynn4272++
					}
				}
				r.EncodeMapStart(yynn4272)
				yynn4272 = 0
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4272[0] {
					yym4274 := z.EncBinary()
					_ = yym4274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4272[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4275 := z.EncBinary()
					_ = yym4275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4272[1] {
					yym4277 := z.EncBinary()
					_ = yym4277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4272[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4278 := z.EncBinary()
					_ = yym4278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4272[2] {
					yy4280 := &x.ListMeta
					yym4281 := z.EncBinary()
					_ = yym4281
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4280) {
					} else {
						z.EncFallback(yy4280)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4272[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4282 := &x.ListMeta
					yym4283 := z.EncBinary()
					_ = yym4283
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4282) {
					} else {
						z.EncFallback(yy4282)
					}
				}
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4285 := z.EncBinary()
					_ = yym4285
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4286 := z.EncBinary()
					_ = yym4286
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4287 := z.DecBinary()
	_ = yym4287
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4288 := r.ContainerType()
		if yyct4288 == codecSelferValueTypeMap1234 {
			yyl4288 := r.ReadMapStart()
			if yyl4288 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4288, d)
			}
		} else if yyct4288 == codecSelferValueTypeArray1234 {
			yyl4288 := r.ReadArrayStart()
			if yyl4288 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4288, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4289Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4289Slc
	var yyhl4289 bool = l >= 0
	for yyj4289 := 0; ; yyj4289++ {
		if yyhl4289 {
			if yyj4289 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4289Slc = r.DecodeBytes(yys4289Slc, true, true)
		yys4289 := string(yys4289Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4289 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4292 := &x.ListMeta
				yym4293 := z.DecBinary()
				_ = yym4293
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4292) {
				} else {
					z.DecFallback(yyv4292, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4294 := &x.Items
				yym4295 := z.DecBinary()
				_ = yym4295
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4294), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4289)
		} // end switch yys4289
	} // end for yyj4289
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4296 int
	var yyb4296 bool
	var yyhl4296 bool = l >= 0
	yyj4296++
	if yyhl4296 {
		yyb4296 = yyj4296 > l
	} else {
		yyb4296 = r.CheckBreak()
	}
	if yyb4296 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4296++
	if yyhl4296 {
		yyb4296 = yyj4296 > l
	} else {
		yyb4296 = r.CheckBreak()
	}
	if yyb4296 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4296++
	if yyhl4296 {
		yyb4296 = yyj4296 > l
	} else {
		yyb4296 = r.CheckBreak()
	}
	if yyb4296 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4299 := &x.ListMeta
		yym4300 := z.DecBinary()
		_ = yym4300
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4299) {
		} else {
			z.DecFallback(yyv4299, false)
		}
	}
	yyj4296++
	if yyhl4296 {
		yyb4296 = yyj4296 > l
	} else {
		yyb4296 = r.CheckBreak()
	}
	if yyb4296 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4301 := &x.Items
		yym4302 := z.DecBinary()
		_ = yym4302
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4301), d)
		}
	}
	for {
		yyj4296++
		if yyhl4296 {
			yyb4296 = yyj4296 > l
		} else {
			yyb4296 = r.CheckBreak()
		}
		if yyb4296 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4296-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4303 := z.EncBinary()
		_ = yym4303
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4304 := !z.EncBinary()
			yy2arr4304 := z.EncBasicHandle().StructToArray
			var yyq4304 [4]bool
			_, _, _ = yysep4304, yyq4304, yy2arr4304
			const yyr4304 bool = false
			yyq4304[0] = x.Kind != ""
			yyq4304[1] = x.APIVersion != ""
			yyq4304[2] = true
			yyq4304[3] = len(x.Data) != 0
			var yynn4304 int
			if yyr4304 || yy2arr4304 {
				r.EncodeArrayStart(4)
			} else {
				yynn4304 = 0
				for _, b := range yyq4304 {
					if b {
						yynn4304++
					}
				}
				r.EncodeMapStart(yynn4304)
				yynn4304 = 0
			}
			if yyr4304 || yy2arr4304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4304[0] {
					yym4306 := z.EncBinary()
					_ = yym4306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4304[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4307 := z.EncBinary()
					_ = yym4307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4304 || yy2arr4304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4304[1] {
					yym4309 := z.EncBinary()
					_ = yym4309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4304[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4310 := z.EncBinary()
					_ = yym4310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4304 || yy2arr4304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4304[2] {
					yy4312 := &x.ObjectMeta
					yy4312.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4304[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4313 := &x.ObjectMeta
					yy4313.CodecEncodeSelf(e)
				}
			}
			if yyr4304 || yy2arr4304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4304[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4315 := z.EncBinary()
						_ = yym4315
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4304[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4316 := z.EncBinary()
						_ = yym4316
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4304 || yy2arr4304 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4317 := z.DecBinary()
	_ = yym4317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4318 := r.ContainerType()
		if yyct4318 == codecSelferValueTypeMap1234 {
			yyl4318 := r.ReadMapStart()
			if yyl4318 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4318, d)
			}
		} else if yyct4318 == codecSelferValueTypeArray1234 {
			yyl4318 := r.ReadArrayStart()
			if yyl4318 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4318, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4319Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4319Slc
	var yyhl4319 bool = l >= 0
	for yyj4319 := 0; ; yyj4319++ {
		if yyhl4319 {
			if yyj4319 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4319Slc = r.DecodeBytes(yys4319Slc, true, true)
		yys4319 := string(yys4319Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4319 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4322 := &x.ObjectMeta
				yyv4322.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4323 := &x.Data
				yym4324 := z.DecBinary()
				_ = yym4324
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4323, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4319)
		} // end switch yys4319
	} // end for yyj4319
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4325 int
	var yyb4325 bool
	var yyhl4325 bool = l >= 0
	yyj4325++
	if yyhl4325 {
		yyb4325 = yyj4325 > l
	} else {
		yyb4325 = r.CheckBreak()
	}
	if yyb4325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4325++
	if yyhl4325 {
		yyb4325 = yyj4325 > l
	} else {
		yyb4325 = r.CheckBreak()
	}
	if yyb4325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4325++
	if yyhl4325 {
		yyb4325 = yyj4325 > l
	} else {
		yyb4325 = r.CheckBreak()
	}
	if yyb4325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4328 := &x.ObjectMeta
		yyv4328.CodecDecodeSelf(d)
	}
	yyj4325++
	if yyhl4325 {
		yyb4325 = yyj4325 > l
	} else {
		yyb4325 = r.CheckBreak()
	}
	if yyb4325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4329 := &x.Data
		yym4330 := z.DecBinary()
		_ = yym4330
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4329, false, d)
		}
	}
	for {
		yyj4325++
		if yyhl4325 {
			yyb4325 = yyj4325 > l
		} else {
			yyb4325 = r.CheckBreak()
		}
		if yyb4325 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4325-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4331 := z.EncBinary()
		_ = yym4331
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4332 := !z.EncBinary()
			yy2arr4332 := z.EncBasicHandle().StructToArray
			var yyq4332 [4]bool
			_, _, _ = yysep4332, yyq4332, yy2arr4332
			const yyr4332 bool = false
			yyq4332[0] = x.Kind != ""
			yyq4332[1] = x.APIVersion != ""
			yyq4332[2] = true
			var yynn4332 int
			if yyr4332 || yy2arr4332 {
				r.EncodeArrayStart(4)
			} else {
				yynn4332 = 1
				for _, b := range yyq4332 {
					if b {
						yynn4332++
					}
				}
				r.EncodeMapStart(yynn4332)
				yynn4332 = 0
			}
			if yyr4332 || yy2arr4332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4332[0] {
					yym4334 := z.EncBinary()
					_ = yym4334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4332[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4335 := z.EncBinary()
					_ = yym4335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4332 || yy2arr4332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4332[1] {
					yym4337 := z.EncBinary()
					_ = yym4337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4332[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4338 := z.EncBinary()
					_ = yym4338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4332 || yy2arr4332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4332[2] {
					yy4340 := &x.ListMeta
					yym4341 := z.EncBinary()
					_ = yym4341
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4340) {
					} else {
						z.EncFallback(yy4340)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4332[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4342 := &x.ListMeta
					yym4343 := z.EncBinary()
					_ = yym4343
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4342) {
					} else {
						z.EncFallback(yy4342)
					}
				}
			}
			if yyr4332 || yy2arr4332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4345 := z.EncBinary()
					_ = yym4345
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4346 := z.EncBinary()
					_ = yym4346
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4332 || yy2arr4332 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4347 := z.DecBinary()
	_ = yym4347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4348 := r.ContainerType()
		if yyct4348 == codecSelferValueTypeMap1234 {
			yyl4348 := r.ReadMapStart()
			if yyl4348 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4348, d)
			}
		} else if yyct4348 == codecSelferValueTypeArray1234 {
			yyl4348 := r.ReadArrayStart()
			if yyl4348 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4348, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4349Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4349Slc
	var yyhl4349 bool = l >= 0
	for yyj4349 := 0; ; yyj4349++ {
		if yyhl4349 {
			if yyj4349 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4349Slc = r.DecodeBytes(yys4349Slc, true, true)
		yys4349 := string(yys4349Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4349 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4352 := &x.ListMeta
				yym4353 := z.DecBinary()
				_ = yym4353
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4352) {
				} else {
					z.DecFallback(yyv4352, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4354 := &x.Items
				yym4355 := z.DecBinary()
				_ = yym4355
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4354), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4349)
		} // end switch yys4349
	} // end for yyj4349
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4356 int
	var yyb4356 bool
	var yyhl4356 bool = l >= 0
	yyj4356++
	if yyhl4356 {
		yyb4356 = yyj4356 > l
	} else {
		yyb4356 = r.CheckBreak()
	}
	if yyb4356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4356++
	if yyhl4356 {
		yyb4356 = yyj4356 > l
	} else {
		yyb4356 = r.CheckBreak()
	}
	if yyb4356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4356++
	if yyhl4356 {
		yyb4356 = yyj4356 > l
	} else {
		yyb4356 = r.CheckBreak()
	}
	if yyb4356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4359 := &x.ListMeta
		yym4360 := z.DecBinary()
		_ = yym4360
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4359) {
		} else {
			z.DecFallback(yyv4359, false)
		}
	}
	yyj4356++
	if yyhl4356 {
		yyb4356 = yyj4356 > l
	} else {
		yyb4356 = r.CheckBreak()
	}
	if yyb4356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4361 := &x.Items
		yym4362 := z.DecBinary()
		_ = yym4362
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4361), d)
		}
	}
	for {
		yyj4356++
		if yyhl4356 {
			yyb4356 = yyj4356 > l
		} else {
			yyb4356 = r.CheckBreak()
		}
		if yyb4356 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4356-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4363 := z.EncBinary()
	_ = yym4363
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4364 := z.DecBinary()
	_ = yym4364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4365 := z.EncBinary()
		_ = yym4365
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4366 := !z.EncBinary()
			yy2arr4366 := z.EncBasicHandle().StructToArray
			var yyq4366 [4]bool
			_, _, _ = yysep4366, yyq4366, yy2arr4366
			const yyr4366 bool = false
			yyq4366[2] = x.Message != ""
			yyq4366[3] = x.Error != ""
			var yynn4366 int
			if yyr4366 || yy2arr4366 {
				r.EncodeArrayStart(4)
			} else {
				yynn4366 = 2
				for _, b := range yyq4366 {
					if b {
						yynn4366++
					}
				}
				r.EncodeMapStart(yynn4366)
				yynn4366 = 0
			}
			if yyr4366 || yy2arr4366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4366 || yy2arr4366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4366 || yy2arr4366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4366[2] {
					yym4370 := z.EncBinary()
					_ = yym4370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4366[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4371 := z.EncBinary()
					_ = yym4371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4366 || yy2arr4366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4366[3] {
					yym4373 := z.EncBinary()
					_ = yym4373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4366[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4374 := z.EncBinary()
					_ = yym4374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4366 || yy2arr4366 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4375 := z.DecBinary()
	_ = yym4375
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4376 := r.ContainerType()
		if yyct4376 == codecSelferValueTypeMap1234 {
			yyl4376 := r.ReadMapStart()
			if yyl4376 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4376, d)
			}
		} else if yyct4376 == codecSelferValueTypeArray1234 {
			yyl4376 := r.ReadArrayStart()
			if yyl4376 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4376, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4377Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4377Slc
	var yyhl4377 bool = l >= 0
	for yyj4377 := 0; ; yyj4377++ {
		if yyhl4377 {
			if yyj4377 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4377Slc = r.DecodeBytes(yys4377Slc, true, true)
		yys4377 := string(yys4377Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4377 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4377)
		} // end switch yys4377
	} // end for yyj4377
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4382 int
	var yyb4382 bool
	var yyhl4382 bool = l >= 0
	yyj4382++
	if yyhl4382 {
		yyb4382 = yyj4382 > l
	} else {
		yyb4382 = r.CheckBreak()
	}
	if yyb4382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4382++
	if yyhl4382 {
		yyb4382 = yyj4382 > l
	} else {
		yyb4382 = r.CheckBreak()
	}
	if yyb4382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4382++
	if yyhl4382 {
		yyb4382 = yyj4382 > l
	} else {
		yyb4382 = r.CheckBreak()
	}
	if yyb4382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4382++
	if yyhl4382 {
		yyb4382 = yyj4382 > l
	} else {
		yyb4382 = r.CheckBreak()
	}
	if yyb4382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4382++
		if yyhl4382 {
			yyb4382 = yyj4382 > l
		} else {
			yyb4382 = r.CheckBreak()
		}
		if yyb4382 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4382-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4387 := z.EncBinary()
		_ = yym4387
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4388 := !z.EncBinary()
			yy2arr4388 := z.EncBasicHandle().StructToArray
			var yyq4388 [4]bool
			_, _, _ = yysep4388, yyq4388, yy2arr4388
			const yyr4388 bool = false
			yyq4388[0] = x.Kind != ""
			yyq4388[1] = x.APIVersion != ""
			yyq4388[2] = true
			yyq4388[3] = len(x.Conditions) != 0
			var yynn4388 int
			if yyr4388 || yy2arr4388 {
				r.EncodeArrayStart(4)
			} else {
				yynn4388 = 0
				for _, b := range yyq4388 {
					if b {
						yynn4388++
					}
				}
				r.EncodeMapStart(yynn4388)
				yynn4388 = 0
			}
			if yyr4388 || yy2arr4388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4388[0] {
					yym4390 := z.EncBinary()
					_ = yym4390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4388[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4391 := z.EncBinary()
					_ = yym4391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4388 || yy2arr4388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4388[1] {
					yym4393 := z.EncBinary()
					_ = yym4393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4388[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4394 := z.EncBinary()
					_ = yym4394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4388 || yy2arr4388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4388[2] {
					yy4396 := &x.ObjectMeta
					yy4396.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4388[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4397 := &x.ObjectMeta
					yy4397.CodecEncodeSelf(e)
				}
			}
			if yyr4388 || yy2arr4388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4388[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4399 := z.EncBinary()
						_ = yym4399
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4388[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4400 := z.EncBinary()
						_ = yym4400
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4388 || yy2arr4388 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4401 := z.DecBinary()
	_ = yym4401
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4402 := r.ContainerType()
		if yyct4402 == codecSelferValueTypeMap1234 {
			yyl4402 := r.ReadMapStart()
			if yyl4402 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4402, d)
			}
		} else if yyct4402 == codecSelferValueTypeArray1234 {
			yyl4402 := r.ReadArrayStart()
			if yyl4402 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4402, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4403Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4403Slc
	var yyhl4403 bool = l >= 0
	for yyj4403 := 0; ; yyj4403++ {
		if yyhl4403 {
			if yyj4403 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4403Slc = r.DecodeBytes(yys4403Slc, true, true)
		yys4403 := string(yys4403Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4403 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4406 := &x.ObjectMeta
				yyv4406.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4407 := &x.Conditions
				yym4408 := z.DecBinary()
				_ = yym4408
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4407), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4403)
		} // end switch yys4403
	} // end for yyj4403
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4409 int
	var yyb4409 bool
	var yyhl4409 bool = l >= 0
	yyj4409++
	if yyhl4409 {
		yyb4409 = yyj4409 > l
	} else {
		yyb4409 = r.CheckBreak()
	}
	if yyb4409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4409++
	if yyhl4409 {
		yyb4409 = yyj4409 > l
	} else {
		yyb4409 = r.CheckBreak()
	}
	if yyb4409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4409++
	if yyhl4409 {
		yyb4409 = yyj4409 > l
	} else {
		yyb4409 = r.CheckBreak()
	}
	if yyb4409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4412 := &x.ObjectMeta
		yyv4412.CodecDecodeSelf(d)
	}
	yyj4409++
	if yyhl4409 {
		yyb4409 = yyj4409 > l
	} else {
		yyb4409 = r.CheckBreak()
	}
	if yyb4409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4413 := &x.Conditions
		yym4414 := z.DecBinary()
		_ = yym4414
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4413), d)
		}
	}
	for {
		yyj4409++
		if yyhl4409 {
			yyb4409 = yyj4409 > l
		} else {
			yyb4409 = r.CheckBreak()
		}
		if yyb4409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4415 := z.EncBinary()
		_ = yym4415
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4416 := !z.EncBinary()
			yy2arr4416 := z.EncBasicHandle().StructToArray
			var yyq4416 [4]bool
			_, _, _ = yysep4416, yyq4416, yy2arr4416
			const yyr4416 bool = false
			yyq4416[0] = x.Kind != ""
			yyq4416[1] = x.APIVersion != ""
			yyq4416[2] = true
			var yynn4416 int
			if yyr4416 || yy2arr4416 {
				r.EncodeArrayStart(4)
			} else {
				yynn4416 = 1
				for _, b := range yyq4416 {
					if b {
						yynn4416++
					}
				}
				r.EncodeMapStart(yynn4416)
				yynn4416 = 0
			}
			if yyr4416 || yy2arr4416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4416[0] {
					yym4418 := z.EncBinary()
					_ = yym4418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4416[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4419 := z.EncBinary()
					_ = yym4419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4416 || yy2arr4416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4416[1] {
					yym4421 := z.EncBinary()
					_ = yym4421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4416[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4422 := z.EncBinary()
					_ = yym4422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4416 || yy2arr4416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4416[2] {
					yy4424 := &x.ListMeta
					yym4425 := z.EncBinary()
					_ = yym4425
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4424) {
					} else {
						z.EncFallback(yy4424)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4416[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4426 := &x.ListMeta
					yym4427 := z.EncBinary()
					_ = yym4427
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4426) {
					} else {
						z.EncFallback(yy4426)
					}
				}
			}
			if yyr4416 || yy2arr4416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4429 := z.EncBinary()
					_ = yym4429
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4430 := z.EncBinary()
					_ = yym4430
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4416 || yy2arr4416 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4431 := z.DecBinary()
	_ = yym4431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4432 := r.ContainerType()
		if yyct4432 == codecSelferValueTypeMap1234 {
			yyl4432 := r.ReadMapStart()
			if yyl4432 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4432, d)
			}
		} else if yyct4432 == codecSelferValueTypeArray1234 {
			yyl4432 := r.ReadArrayStart()
			if yyl4432 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4433Slc
	var yyhl4433 bool = l >= 0
	for yyj4433 := 0; ; yyj4433++ {
		if yyhl4433 {
			if yyj4433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4433Slc = r.DecodeBytes(yys4433Slc, true, true)
		yys4433 := string(yys4433Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4433 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4436 := &x.ListMeta
				yym4437 := z.DecBinary()
				_ = yym4437
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4436) {
				} else {
					z.DecFallback(yyv4436, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4438 := &x.Items
				yym4439 := z.DecBinary()
				_ = yym4439
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4438), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4433)
		} // end switch yys4433
	} // end for yyj4433
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4440 int
	var yyb4440 bool
	var yyhl4440 bool = l >= 0
	yyj4440++
	if yyhl4440 {
		yyb4440 = yyj4440 > l
	} else {
		yyb4440 = r.CheckBreak()
	}
	if yyb4440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4440++
	if yyhl4440 {
		yyb4440 = yyj4440 > l
	} else {
		yyb4440 = r.CheckBreak()
	}
	if yyb4440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4440++
	if yyhl4440 {
		yyb4440 = yyj4440 > l
	} else {
		yyb4440 = r.CheckBreak()
	}
	if yyb4440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4443 := &x.ListMeta
		yym4444 := z.DecBinary()
		_ = yym4444
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4443) {
		} else {
			z.DecFallback(yyv4443, false)
		}
	}
	yyj4440++
	if yyhl4440 {
		yyb4440 = yyj4440 > l
	} else {
		yyb4440 = r.CheckBreak()
	}
	if yyb4440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4445 := &x.Items
		yym4446 := z.DecBinary()
		_ = yym4446
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4445), d)
		}
	}
	for {
		yyj4440++
		if yyhl4440 {
			yyb4440 = yyj4440 > l
		} else {
			yyb4440 = r.CheckBreak()
		}
		if yyb4440 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4440-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4447 := z.EncBinary()
		_ = yym4447
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4448 := !z.EncBinary()
			yy2arr4448 := z.EncBasicHandle().StructToArray
			var yyq4448 [2]bool
			_, _, _ = yysep4448, yyq4448, yy2arr4448
			const yyr4448 bool = false
			yyq4448[0] = len(x.Items) != 0
			yyq4448[1] = x.DefaultMode != nil
			var yynn4448 int
			if yyr4448 || yy2arr4448 {
				r.EncodeArrayStart(2)
			} else {
				yynn4448 = 0
				for _, b := range yyq4448 {
					if b {
						yynn4448++
					}
				}
				r.EncodeMapStart(yynn4448)
				yynn4448 = 0
			}
			if yyr4448 || yy2arr4448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4448[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4450 := z.EncBinary()
						_ = yym4450
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4448[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4451 := z.EncBinary()
						_ = yym4451
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4448 || yy2arr4448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4448[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4453 := *x.DefaultMode
						yym4454 := z.EncBinary()
						_ = yym4454
						if false {
						} else {
							r.EncodeInt(int64(yy4453))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4448[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4455 := *x.DefaultMode
						yym4456 := z.EncBinary()
						_ = yym4456
						if false {
						} else {
							r.EncodeInt(int64(yy4455))
						}
					}
				}
			}
			if yyr4448 || yy2arr4448 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4457 := z.DecBinary()
	_ = yym4457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4458 := r.ContainerType()
		if yyct4458 == codecSelferValueTypeMap1234 {
			yyl4458 := r.ReadMapStart()
			if yyl4458 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4458, d)
			}
		} else if yyct4458 == codecSelferValueTypeArray1234 {
			yyl4458 := r.ReadArrayStart()
			if yyl4458 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4458, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4459Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4459Slc
	var yyhl4459 bool = l >= 0
	for yyj4459 := 0; ; yyj4459++ {
		if yyhl4459 {
			if yyj4459 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4459Slc = r.DecodeBytes(yys4459Slc, true, true)
		yys4459 := string(yys4459Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4459 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4460 := &x.Items
				yym4461 := z.DecBinary()
				_ = yym4461
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4460), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym4463 := z.DecBinary()
				_ = yym4463
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4459)
		} // end switch yys4459
	} // end for yyj4459
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4464 int
	var yyb4464 bool
	var yyhl4464 bool = l >= 0
	yyj4464++
	if yyhl4464 {
		yyb4464 = yyj4464 > l
	} else {
		yyb4464 = r.CheckBreak()
	}
	if yyb4464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4465 := &x.Items
		yym4466 := z.DecBinary()
		_ = yym4466
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4465), d)
		}
	}
	yyj4464++
	if yyhl4464 {
		yyb4464 = yyj4464 > l
	} else {
		yyb4464 = r.CheckBreak()
	}
	if yyb4464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym4468 := z.DecBinary()
		_ = yym4468
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4464++
		if yyhl4464 {
			yyb4464 = yyj4464 > l
		} else {
			yyb4464 = r.CheckBreak()
		}
		if yyb4464 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4464-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4469 := z.EncBinary()
		_ = yym4469
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4470 := !z.EncBinary()
			yy2arr4470 := z.EncBasicHandle().StructToArray
			var yyq4470 [4]bool
			_, _, _ = yysep4470, yyq4470, yy2arr4470
			const yyr4470 bool = false
			yyq4470[1] = x.FieldRef != nil
			yyq4470[2] = x.ResourceFieldRef != nil
			yyq4470[3] = x.Mode != nil
			var yynn4470 int
			if yyr4470 || yy2arr4470 {
				r.EncodeArrayStart(4)
			} else {
				yynn4470 = 1
				for _, b := range yyq4470 {
					if b {
						yynn4470++
					}
				}
				r.EncodeMapStart(yynn4470)
				yynn4470 = 0
			}
			if yyr4470 || yy2arr4470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4472 := z.EncBinary()
				_ = yym4472
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4473 := z.EncBinary()
				_ = yym4473
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4470 || yy2arr4470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4470[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4470[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4470 || yy2arr4470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4470[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4470[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4470 || yy2arr4470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4470[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4477 := *x.Mode
						yym4478 := z.EncBinary()
						_ = yym4478
						if false {
						} else {
							r.EncodeInt(int64(yy4477))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4470[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4479 := *x.Mode
						yym4480 := z.EncBinary()
						_ = yym4480
						if false {
						} else {
							r.EncodeInt(int64(yy4479))
						}
					}
				}
			}
			if yyr4470 || yy2arr4470 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4481 := z.DecBinary()
	_ = yym4481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4482 := r.ContainerType()
		if yyct4482 == codecSelferValueTypeMap1234 {
			yyl4482 := r.ReadMapStart()
			if yyl4482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4482, d)
			}
		} else if yyct4482 == codecSelferValueTypeArray1234 {
			yyl4482 := r.ReadArrayStart()
			if yyl4482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4483Slc
	var yyhl4483 bool = l >= 0
	for yyj4483 := 0; ; yyj4483++ {
		if yyhl4483 {
			if yyj4483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4483Slc = r.DecodeBytes(yys4483Slc, true, true)
		yys4483 := string(yys4483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4483 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym4488 := z.DecBinary()
				_ = yym4488
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4483)
		} // end switch yys4483
	} // end for yyj4483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4489 int
	var yyb4489 bool
	var yyhl4489 bool = l >= 0
	yyj4489++
	if yyhl4489 {
		yyb4489 = yyj4489 > l
	} else {
		yyb4489 = r.CheckBreak()
	}
	if yyb4489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4489++
	if yyhl4489 {
		yyb4489 = yyj4489 > l
	} else {
		yyb4489 = r.CheckBreak()
	}
	if yyb4489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4489++
	if yyhl4489 {
		yyb4489 = yyj4489 > l
	} else {
		yyb4489 = r.CheckBreak()
	}
	if yyb4489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj4489++
	if yyhl4489 {
		yyb4489 = yyj4489 > l
	} else {
		yyb4489 = r.CheckBreak()
	}
	if yyb4489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym4494 := z.DecBinary()
		_ = yym4494
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4489++
		if yyhl4489 {
			yyb4489 = yyj4489 > l
		} else {
			yyb4489 = r.CheckBreak()
		}
		if yyb4489 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4489-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4495 := z.EncBinary()
		_ = yym4495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4496 := !z.EncBinary()
			yy2arr4496 := z.EncBasicHandle().StructToArray
			var yyq4496 [6]bool
			_, _, _ = yysep4496, yyq4496, yy2arr4496
			const yyr4496 bool = false
			yyq4496[0] = x.Capabilities != nil
			yyq4496[1] = x.Privileged != nil
			yyq4496[2] = x.SELinuxOptions != nil
			yyq4496[3] = x.RunAsUser != nil
			yyq4496[4] = x.RunAsNonRoot != nil
			yyq4496[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4496 int
			if yyr4496 || yy2arr4496 {
				r.EncodeArrayStart(6)
			} else {
				yynn4496 = 0
				for _, b := range yyq4496 {
					if b {
						yynn4496++
					}
				}
				r.EncodeMapStart(yynn4496)
				yynn4496 = 0
			}
			if yyr4496 || yy2arr4496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4496[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4496[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4496 || yy2arr4496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4496[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4499 := *x.Privileged
						yym4500 := z.EncBinary()
						_ = yym4500
						if false {
						} else {
							r.EncodeBool(bool(yy4499))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4496[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4501 := *x.Privileged
						yym4502 := z.EncBinary()
						_ = yym4502
						if false {
						} else {
							r.EncodeBool(bool(yy4501))
						}
					}
				}
			}
			if yyr4496 || yy2arr4496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4496[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4496[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4496 || yy2arr4496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4496[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4505 := *x.RunAsUser
						yym4506 := z.EncBinary()
						_ = yym4506
						if false {
						} else {
							r.EncodeInt(int64(yy4505))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4496[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4507 := *x.RunAsUser
						yym4508 := z.EncBinary()
						_ = yym4508
						if false {
						} else {
							r.EncodeInt(int64(yy4507))
						}
					}
				}
			}
			if yyr4496 || yy2arr4496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4496[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4510 := *x.RunAsNonRoot
						yym4511 := z.EncBinary()
						_ = yym4511
						if false {
						} else {
							r.EncodeBool(bool(yy4510))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4496[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4512 := *x.RunAsNonRoot
						yym4513 := z.EncBinary()
						_ = yym4513
						if false {
						} else {
							r.EncodeBool(bool(yy4512))
						}
					}
				}
			}
			if yyr4496 || yy2arr4496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4496[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4515 := *x.ReadOnlyRootFilesystem
						yym4516 := z.EncBinary()
						_ = yym4516
						if false {
						} else {
							r.EncodeBool(bool(yy4515))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4496[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4517 := *x.ReadOnlyRootFilesystem
						yym4518 := z.EncBinary()
						_ = yym4518
						if false {
						} else {
							r.EncodeBool(bool(yy4517))
						}
					}
				}
			}
			if yyr4496 || yy2arr4496 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4519 := z.DecBinary()
	_ = yym4519
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4520 := r.ContainerType()
		if yyct4520 == codecSelferValueTypeMap1234 {
			yyl4520 := r.ReadMapStart()
			if yyl4520 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4520, d)
			}
		} else if yyct4520 == codecSelferValueTypeArray1234 {
			yyl4520 := r.ReadArrayStart()
			if yyl4520 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4520, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4521Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4521Slc
	var yyhl4521 bool = l >= 0
	for yyj4521 := 0; ; yyj4521++ {
		if yyhl4521 {
			if yyj4521 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4521Slc = r.DecodeBytes(yys4521Slc, true, true)
		yys4521 := string(yys4521Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4521 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4524 := z.DecBinary()
				_ = yym4524
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4527 := z.DecBinary()
				_ = yym4527
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4529 := z.DecBinary()
				_ = yym4529
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4531 := z.DecBinary()
				_ = yym4531
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4521)
		} // end switch yys4521
	} // end for yyj4521
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4532 int
	var yyb4532 bool
	var yyhl4532 bool = l >= 0
	yyj4532++
	if yyhl4532 {
		yyb4532 = yyj4532 > l
	} else {
		yyb4532 = r.CheckBreak()
	}
	if yyb4532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4532++
	if yyhl4532 {
		yyb4532 = yyj4532 > l
	} else {
		yyb4532 = r.CheckBreak()
	}
	if yyb4532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4535 := z.DecBinary()
		_ = yym4535
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4532++
	if yyhl4532 {
		yyb4532 = yyj4532 > l
	} else {
		yyb4532 = r.CheckBreak()
	}
	if yyb4532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4532++
	if yyhl4532 {
		yyb4532 = yyj4532 > l
	} else {
		yyb4532 = r.CheckBreak()
	}
	if yyb4532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4538 := z.DecBinary()
		_ = yym4538
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4532++
	if yyhl4532 {
		yyb4532 = yyj4532 > l
	} else {
		yyb4532 = r.CheckBreak()
	}
	if yyb4532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4540 := z.DecBinary()
		_ = yym4540
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4532++
	if yyhl4532 {
		yyb4532 = yyj4532 > l
	} else {
		yyb4532 = r.CheckBreak()
	}
	if yyb4532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4542 := z.DecBinary()
		_ = yym4542
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4532++
		if yyhl4532 {
			yyb4532 = yyj4532 > l
		} else {
			yyb4532 = r.CheckBreak()
		}
		if yyb4532 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4532-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4543 := z.EncBinary()
		_ = yym4543
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4544 := !z.EncBinary()
			yy2arr4544 := z.EncBasicHandle().StructToArray
			var yyq4544 [4]bool
			_, _, _ = yysep4544, yyq4544, yy2arr4544
			const yyr4544 bool = false
			yyq4544[0] = x.User != ""
			yyq4544[1] = x.Role != ""
			yyq4544[2] = x.Type != ""
			yyq4544[3] = x.Level != ""
			var yynn4544 int
			if yyr4544 || yy2arr4544 {
				r.EncodeArrayStart(4)
			} else {
				yynn4544 = 0
				for _, b := range yyq4544 {
					if b {
						yynn4544++
					}
				}
				r.EncodeMapStart(yynn4544)
				yynn4544 = 0
			}
			if yyr4544 || yy2arr4544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4544[0] {
					yym4546 := z.EncBinary()
					_ = yym4546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4544[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4547 := z.EncBinary()
					_ = yym4547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4544 || yy2arr4544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4544[1] {
					yym4549 := z.EncBinary()
					_ = yym4549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4544[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4550 := z.EncBinary()
					_ = yym4550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4544 || yy2arr4544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4544[2] {
					yym4552 := z.EncBinary()
					_ = yym4552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4544[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4553 := z.EncBinary()
					_ = yym4553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4544 || yy2arr4544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4544[3] {
					yym4555 := z.EncBinary()
					_ = yym4555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4544[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4556 := z.EncBinary()
					_ = yym4556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4544 || yy2arr4544 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4557 := z.DecBinary()
	_ = yym4557
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4558 := r.ContainerType()
		if yyct4558 == codecSelferValueTypeMap1234 {
			yyl4558 := r.ReadMapStart()
			if yyl4558 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4558, d)
			}
		} else if yyct4558 == codecSelferValueTypeArray1234 {
			yyl4558 := r.ReadArrayStart()
			if yyl4558 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4558, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4559Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4559Slc
	var yyhl4559 bool = l >= 0
	for yyj4559 := 0; ; yyj4559++ {
		if yyhl4559 {
			if yyj4559 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4559Slc = r.DecodeBytes(yys4559Slc, true, true)
		yys4559 := string(yys4559Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4559 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4559)
		} // end switch yys4559
	} // end for yyj4559
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4564 int
	var yyb4564 bool
	var yyhl4564 bool = l >= 0
	yyj4564++
	if yyhl4564 {
		yyb4564 = yyj4564 > l
	} else {
		yyb4564 = r.CheckBreak()
	}
	if yyb4564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4564++
	if yyhl4564 {
		yyb4564 = yyj4564 > l
	} else {
		yyb4564 = r.CheckBreak()
	}
	if yyb4564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4564++
	if yyhl4564 {
		yyb4564 = yyj4564 > l
	} else {
		yyb4564 = r.CheckBreak()
	}
	if yyb4564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4564++
	if yyhl4564 {
		yyb4564 = yyj4564 > l
	} else {
		yyb4564 = r.CheckBreak()
	}
	if yyb4564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4564++
		if yyhl4564 {
			yyb4564 = yyj4564 > l
		} else {
			yyb4564 = r.CheckBreak()
		}
		if yyb4564 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4564-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4569 := z.EncBinary()
		_ = yym4569
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4570 := !z.EncBinary()
			yy2arr4570 := z.EncBasicHandle().StructToArray
			var yyq4570 [5]bool
			_, _, _ = yysep4570, yyq4570, yy2arr4570
			const yyr4570 bool = false
			yyq4570[0] = x.Kind != ""
			yyq4570[1] = x.APIVersion != ""
			yyq4570[2] = true
			var yynn4570 int
			if yyr4570 || yy2arr4570 {
				r.EncodeArrayStart(5)
			} else {
				yynn4570 = 2
				for _, b := range yyq4570 {
					if b {
						yynn4570++
					}
				}
				r.EncodeMapStart(yynn4570)
				yynn4570 = 0
			}
			if yyr4570 || yy2arr4570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4570[0] {
					yym4572 := z.EncBinary()
					_ = yym4572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4570[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4573 := z.EncBinary()
					_ = yym4573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4570 || yy2arr4570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4570[1] {
					yym4575 := z.EncBinary()
					_ = yym4575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4570[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4576 := z.EncBinary()
					_ = yym4576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4570 || yy2arr4570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4570[2] {
					yy4578 := &x.ObjectMeta
					yy4578.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4570[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4579 := &x.ObjectMeta
					yy4579.CodecEncodeSelf(e)
				}
			}
			if yyr4570 || yy2arr4570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4581 := z.EncBinary()
				_ = yym4581
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4582 := z.EncBinary()
				_ = yym4582
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4570 || yy2arr4570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4584 := z.EncBinary()
					_ = yym4584
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4585 := z.EncBinary()
					_ = yym4585
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4570 || yy2arr4570 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4586 := z.DecBinary()
	_ = yym4586
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4587 := r.ContainerType()
		if yyct4587 == codecSelferValueTypeMap1234 {
			yyl4587 := r.ReadMapStart()
			if yyl4587 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4587, d)
			}
		} else if yyct4587 == codecSelferValueTypeArray1234 {
			yyl4587 := r.ReadArrayStart()
			if yyl4587 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4587, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4588Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4588Slc
	var yyhl4588 bool = l >= 0
	for yyj4588 := 0; ; yyj4588++ {
		if yyhl4588 {
			if yyj4588 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4588Slc = r.DecodeBytes(yys4588Slc, true, true)
		yys4588 := string(yys4588Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4588 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4591 := &x.ObjectMeta
				yyv4591.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4593 := &x.Data
				yym4594 := z.DecBinary()
				_ = yym4594
				if false {
				} else {
					*yyv4593 = r.DecodeBytes(*(*[]byte)(yyv4593), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4588)
		} // end switch yys4588
	} // end for yyj4588
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4595 int
	var yyb4595 bool
	var yyhl4595 bool = l >= 0
	yyj4595++
	if yyhl4595 {
		yyb4595 = yyj4595 > l
	} else {
		yyb4595 = r.CheckBreak()
	}
	if yyb4595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4595++
	if yyhl4595 {
		yyb4595 = yyj4595 > l
	} else {
		yyb4595 = r.CheckBreak()
	}
	if yyb4595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4595++
	if yyhl4595 {
		yyb4595 = yyj4595 > l
	} else {
		yyb4595 = r.CheckBreak()
	}
	if yyb4595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4598 := &x.ObjectMeta
		yyv4598.CodecDecodeSelf(d)
	}
	yyj4595++
	if yyhl4595 {
		yyb4595 = yyj4595 > l
	} else {
		yyb4595 = r.CheckBreak()
	}
	if yyb4595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4595++
	if yyhl4595 {
		yyb4595 = yyj4595 > l
	} else {
		yyb4595 = r.CheckBreak()
	}
	if yyb4595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4600 := &x.Data
		yym4601 := z.DecBinary()
		_ = yym4601
		if false {
		} else {
			*yyv4600 = r.DecodeBytes(*(*[]byte)(yyv4600), false, false)
		}
	}
	for {
		yyj4595++
		if yyhl4595 {
			yyb4595 = yyj4595 > l
		} else {
			yyb4595 = r.CheckBreak()
		}
		if yyb4595 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4595-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicev1_OwnerReference(v []pkg2_v1.OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4602 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4603 := &yyv4602
		yym4604 := z.EncBinary()
		_ = yym4604
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4603) {
		} else {
			z.EncFallback(yy4603)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicev1_OwnerReference(v *[]pkg2_v1.OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4605 := *v
	yyh4605, yyl4605 := z.DecSliceHelperStart()
	var yyc4605 bool
	if yyl4605 == 0 {
		if yyv4605 == nil {
			yyv4605 = []pkg2_v1.OwnerReference{}
			yyc4605 = true
		} else if len(yyv4605) != 0 {
			yyv4605 = yyv4605[:0]
			yyc4605 = true
		}
	} else if yyl4605 > 0 {
		var yyrr4605, yyrl4605 int
		var yyrt4605 bool
		if yyl4605 > cap(yyv4605) {

			yyrg4605 := len(yyv4605) > 0
			yyv24605 := yyv4605
			yyrl4605, yyrt4605 = z.DecInferLen(yyl4605, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4605 {
				if yyrl4605 <= cap(yyv4605) {
					yyv4605 = yyv4605[:yyrl4605]
				} else {
					yyv4605 = make([]pkg2_v1.OwnerReference, yyrl4605)
				}
			} else {
				yyv4605 = make([]pkg2_v1.OwnerReference, yyrl4605)
			}
			yyc4605 = true
			yyrr4605 = len(yyv4605)
			if yyrg4605 {
				copy(yyv4605, yyv24605)
			}
		} else if yyl4605 != len(yyv4605) {
			yyv4605 = yyv4605[:yyl4605]
			yyc4605 = true
		}
		yyj4605 := 0
		for ; yyj4605 < yyrr4605; yyj4605++ {
			yyh4605.ElemContainerState(yyj4605)
			if r.TryDecodeAsNil() {
				yyv4605[yyj4605] = pkg2_v1.OwnerReference{}
			} else {
				yyv4606 := &yyv4605[yyj4605]
				yym4607 := z.DecBinary()
				_ = yym4607
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4606) {
				} else {
					z.DecFallback(yyv4606, false)
				}
			}

		}
		if yyrt4605 {
			for ; yyj4605 < yyl4605; yyj4605++ {
				yyv4605 = append(yyv4605, pkg2_v1.OwnerReference{})
				yyh4605.ElemContainerState(yyj4605)
				if r.TryDecodeAsNil() {
					yyv4605[yyj4605] = pkg2_v1.OwnerReference{}
				} else {
					yyv4608 := &yyv4605[yyj4605]
					yym4609 := z.DecBinary()
					_ = yym4609
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4608) {
					} else {
						z.DecFallback(yyv4608, false)
					}
				}

			}
		}

	} else {
		yyj4605 := 0
		for ; !r.CheckBreak(); yyj4605++ {

			if yyj4605 >= len(yyv4605) {
				yyv4605 = append(yyv4605, pkg2_v1.OwnerReference{}) // var yyz4605 pkg2_v1.OwnerReference
				yyc4605 = true
			}
			yyh4605.ElemContainerState(yyj4605)
			if yyj4605 < len(yyv4605) {
				if r.TryDecodeAsNil() {
					yyv4605[yyj4605] = pkg2_v1.OwnerReference{}
				} else {
					yyv4610 := &yyv4605[yyj4605]
					yym4611 := z.DecBinary()
					_ = yym4611
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4610) {
					} else {
						z.DecFallback(yyv4610, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4605 < len(yyv4605) {
			yyv4605 = yyv4605[:yyj4605]
			yyc4605 = true
		} else if yyj4605 == 0 && yyv4605 == nil {
			yyv4605 = []pkg2_v1.OwnerReference{}
			yyc4605 = true
		}
	}
	yyh4605.End()
	if yyc4605 {
		*v = yyv4605
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4612 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4612.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4613 := *v
	yyh4613, yyl4613 := z.DecSliceHelperStart()
	var yyc4613 bool
	if yyl4613 == 0 {
		if yyv4613 == nil {
			yyv4613 = []PersistentVolumeAccessMode{}
			yyc4613 = true
		} else if len(yyv4613) != 0 {
			yyv4613 = yyv4613[:0]
			yyc4613 = true
		}
	} else if yyl4613 > 0 {
		var yyrr4613, yyrl4613 int
		var yyrt4613 bool
		if yyl4613 > cap(yyv4613) {

			yyrl4613, yyrt4613 = z.DecInferLen(yyl4613, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4613 {
				if yyrl4613 <= cap(yyv4613) {
					yyv4613 = yyv4613[:yyrl4613]
				} else {
					yyv4613 = make([]PersistentVolumeAccessMode, yyrl4613)
				}
			} else {
				yyv4613 = make([]PersistentVolumeAccessMode, yyrl4613)
			}
			yyc4613 = true
			yyrr4613 = len(yyv4613)
		} else if yyl4613 != len(yyv4613) {
			yyv4613 = yyv4613[:yyl4613]
			yyc4613 = true
		}
		yyj4613 := 0
		for ; yyj4613 < yyrr4613; yyj4613++ {
			yyh4613.ElemContainerState(yyj4613)
			if r.TryDecodeAsNil() {
				yyv4613[yyj4613] = ""
			} else {
				yyv4613[yyj4613] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4613 {
			for ; yyj4613 < yyl4613; yyj4613++ {
				yyv4613 = append(yyv4613, "")
				yyh4613.ElemContainerState(yyj4613)
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = ""
				} else {
					yyv4613[yyj4613] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4613 := 0
		for ; !r.CheckBreak(); yyj4613++ {

			if yyj4613 >= len(yyv4613) {
				yyv4613 = append(yyv4613, "") // var yyz4613 PersistentVolumeAccessMode
				yyc4613 = true
			}
			yyh4613.ElemContainerState(yyj4613)
			if yyj4613 < len(yyv4613) {
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = ""
				} else {
					yyv4613[yyj4613] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4613 < len(yyv4613) {
			yyv4613 = yyv4613[:yyj4613]
			yyc4613 = true
		} else if yyj4613 == 0 && yyv4613 == nil {
			yyv4613 = []PersistentVolumeAccessMode{}
			yyc4613 = true
		}
	}
	yyh4613.End()
	if yyc4613 {
		*v = yyv4613
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4617 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4618 := &yyv4617
		yy4618.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4619 := *v
	yyh4619, yyl4619 := z.DecSliceHelperStart()
	var yyc4619 bool
	if yyl4619 == 0 {
		if yyv4619 == nil {
			yyv4619 = []PersistentVolume{}
			yyc4619 = true
		} else if len(yyv4619) != 0 {
			yyv4619 = yyv4619[:0]
			yyc4619 = true
		}
	} else if yyl4619 > 0 {
		var yyrr4619, yyrl4619 int
		var yyrt4619 bool
		if yyl4619 > cap(yyv4619) {

			yyrg4619 := len(yyv4619) > 0
			yyv24619 := yyv4619
			yyrl4619, yyrt4619 = z.DecInferLen(yyl4619, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt4619 {
				if yyrl4619 <= cap(yyv4619) {
					yyv4619 = yyv4619[:yyrl4619]
				} else {
					yyv4619 = make([]PersistentVolume, yyrl4619)
				}
			} else {
				yyv4619 = make([]PersistentVolume, yyrl4619)
			}
			yyc4619 = true
			yyrr4619 = len(yyv4619)
			if yyrg4619 {
				copy(yyv4619, yyv24619)
			}
		} else if yyl4619 != len(yyv4619) {
			yyv4619 = yyv4619[:yyl4619]
			yyc4619 = true
		}
		yyj4619 := 0
		for ; yyj4619 < yyrr4619; yyj4619++ {
			yyh4619.ElemContainerState(yyj4619)
			if r.TryDecodeAsNil() {
				yyv4619[yyj4619] = PersistentVolume{}
			} else {
				yyv4620 := &yyv4619[yyj4619]
				yyv4620.CodecDecodeSelf(d)
			}

		}
		if yyrt4619 {
			for ; yyj4619 < yyl4619; yyj4619++ {
				yyv4619 = append(yyv4619, PersistentVolume{})
				yyh4619.ElemContainerState(yyj4619)
				if r.TryDecodeAsNil() {
					yyv4619[yyj4619] = PersistentVolume{}
				} else {
					yyv4621 := &yyv4619[yyj4619]
					yyv4621.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4619 := 0
		for ; !r.CheckBreak(); yyj4619++ {

			if yyj4619 >= len(yyv4619) {
				yyv4619 = append(yyv4619, PersistentVolume{}) // var yyz4619 PersistentVolume
				yyc4619 = true
			}
			yyh4619.ElemContainerState(yyj4619)
			if yyj4619 < len(yyv4619) {
				if r.TryDecodeAsNil() {
					yyv4619[yyj4619] = PersistentVolume{}
				} else {
					yyv4622 := &yyv4619[yyj4619]
					yyv4622.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4619 < len(yyv4619) {
			yyv4619 = yyv4619[:yyj4619]
			yyc4619 = true
		} else if yyj4619 == 0 && yyv4619 == nil {
			yyv4619 = []PersistentVolume{}
			yyc4619 = true
		}
	}
	yyh4619.End()
	if yyc4619 {
		*v = yyv4619
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4623 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4624 := &yyv4623
		yy4624.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4625 := *v
	yyh4625, yyl4625 := z.DecSliceHelperStart()
	var yyc4625 bool
	if yyl4625 == 0 {
		if yyv4625 == nil {
			yyv4625 = []PersistentVolumeClaim{}
			yyc4625 = true
		} else if len(yyv4625) != 0 {
			yyv4625 = yyv4625[:0]
			yyc4625 = true
		}
	} else if yyl4625 > 0 {
		var yyrr4625, yyrl4625 int
		var yyrt4625 bool
		if yyl4625 > cap(yyv4625) {

			yyrg4625 := len(yyv4625) > 0
			yyv24625 := yyv4625
			yyrl4625, yyrt4625 = z.DecInferLen(yyl4625, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4625 {
				if yyrl4625 <= cap(yyv4625) {
					yyv4625 = yyv4625[:yyrl4625]
				} else {
					yyv4625 = make([]PersistentVolumeClaim, yyrl4625)
				}
			} else {
				yyv4625 = make([]PersistentVolumeClaim, yyrl4625)
			}
			yyc4625 = true
			yyrr4625 = len(yyv4625)
			if yyrg4625 {
				copy(yyv4625, yyv24625)
			}
		} else if yyl4625 != len(yyv4625) {
			yyv4625 = yyv4625[:yyl4625]
			yyc4625 = true
		}
		yyj4625 := 0
		for ; yyj4625 < yyrr4625; yyj4625++ {
			yyh4625.ElemContainerState(yyj4625)
			if r.TryDecodeAsNil() {
				yyv4625[yyj4625] = PersistentVolumeClaim{}
			} else {
				yyv4626 := &yyv4625[yyj4625]
				yyv4626.CodecDecodeSelf(d)
			}

		}
		if yyrt4625 {
			for ; yyj4625 < yyl4625; yyj4625++ {
				yyv4625 = append(yyv4625, PersistentVolumeClaim{})
				yyh4625.ElemContainerState(yyj4625)
				if r.TryDecodeAsNil() {
					yyv4625[yyj4625] = PersistentVolumeClaim{}
				} else {
					yyv4627 := &yyv4625[yyj4625]
					yyv4627.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4625 := 0
		for ; !r.CheckBreak(); yyj4625++ {

			if yyj4625 >= len(yyv4625) {
				yyv4625 = append(yyv4625, PersistentVolumeClaim{}) // var yyz4625 PersistentVolumeClaim
				yyc4625 = true
			}
			yyh4625.ElemContainerState(yyj4625)
			if yyj4625 < len(yyv4625) {
				if r.TryDecodeAsNil() {
					yyv4625[yyj4625] = PersistentVolumeClaim{}
				} else {
					yyv4628 := &yyv4625[yyj4625]
					yyv4628.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4625 < len(yyv4625) {
			yyv4625 = yyv4625[:yyj4625]
			yyc4625 = true
		} else if yyj4625 == 0 && yyv4625 == nil {
			yyv4625 = []PersistentVolumeClaim{}
			yyc4625 = true
		}
	}
	yyh4625.End()
	if yyc4625 {
		*v = yyv4625
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4629 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4630 := &yyv4629
		yy4630.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4631 := *v
	yyh4631, yyl4631 := z.DecSliceHelperStart()
	var yyc4631 bool
	if yyl4631 == 0 {
		if yyv4631 == nil {
			yyv4631 = []KeyToPath{}
			yyc4631 = true
		} else if len(yyv4631) != 0 {
			yyv4631 = yyv4631[:0]
			yyc4631 = true
		}
	} else if yyl4631 > 0 {
		var yyrr4631, yyrl4631 int
		var yyrt4631 bool
		if yyl4631 > cap(yyv4631) {

			yyrg4631 := len(yyv4631) > 0
			yyv24631 := yyv4631
			yyrl4631, yyrt4631 = z.DecInferLen(yyl4631, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4631 {
				if yyrl4631 <= cap(yyv4631) {
					yyv4631 = yyv4631[:yyrl4631]
				} else {
					yyv4631 = make([]KeyToPath, yyrl4631)
				}
			} else {
				yyv4631 = make([]KeyToPath, yyrl4631)
			}
			yyc4631 = true
			yyrr4631 = len(yyv4631)
			if yyrg4631 {
				copy(yyv4631, yyv24631)
			}
		} else if yyl4631 != len(yyv4631) {
			yyv4631 = yyv4631[:yyl4631]
			yyc4631 = true
		}
		yyj4631 := 0
		for ; yyj4631 < yyrr4631; yyj4631++ {
			yyh4631.ElemContainerState(yyj4631)
			if r.TryDecodeAsNil() {
				yyv4631[yyj4631] = KeyToPath{}
			} else {
				yyv4632 := &yyv4631[yyj4631]
				yyv4632.CodecDecodeSelf(d)
			}

		}
		if yyrt4631 {
			for ; yyj4631 < yyl4631; yyj4631++ {
				yyv4631 = append(yyv4631, KeyToPath{})
				yyh4631.ElemContainerState(yyj4631)
				if r.TryDecodeAsNil() {
					yyv4631[yyj4631] = KeyToPath{}
				} else {
					yyv4633 := &yyv4631[yyj4631]
					yyv4633.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4631 := 0
		for ; !r.CheckBreak(); yyj4631++ {

			if yyj4631 >= len(yyv4631) {
				yyv4631 = append(yyv4631, KeyToPath{}) // var yyz4631 KeyToPath
				yyc4631 = true
			}
			yyh4631.ElemContainerState(yyj4631)
			if yyj4631 < len(yyv4631) {
				if r.TryDecodeAsNil() {
					yyv4631[yyj4631] = KeyToPath{}
				} else {
					yyv4634 := &yyv4631[yyj4631]
					yyv4634.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4631 < len(yyv4631) {
			yyv4631 = yyv4631[:yyj4631]
			yyc4631 = true
		} else if yyj4631 == 0 && yyv4631 == nil {
			yyv4631 = []KeyToPath{}
			yyc4631 = true
		}
	}
	yyh4631.End()
	if yyc4631 {
		*v = yyv4631
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4635 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4636 := &yyv4635
		yy4636.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4637 := *v
	yyh4637, yyl4637 := z.DecSliceHelperStart()
	var yyc4637 bool
	if yyl4637 == 0 {
		if yyv4637 == nil {
			yyv4637 = []HTTPHeader{}
			yyc4637 = true
		} else if len(yyv4637) != 0 {
			yyv4637 = yyv4637[:0]
			yyc4637 = true
		}
	} else if yyl4637 > 0 {
		var yyrr4637, yyrl4637 int
		var yyrt4637 bool
		if yyl4637 > cap(yyv4637) {

			yyrg4637 := len(yyv4637) > 0
			yyv24637 := yyv4637
			yyrl4637, yyrt4637 = z.DecInferLen(yyl4637, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4637 {
				if yyrl4637 <= cap(yyv4637) {
					yyv4637 = yyv4637[:yyrl4637]
				} else {
					yyv4637 = make([]HTTPHeader, yyrl4637)
				}
			} else {
				yyv4637 = make([]HTTPHeader, yyrl4637)
			}
			yyc4637 = true
			yyrr4637 = len(yyv4637)
			if yyrg4637 {
				copy(yyv4637, yyv24637)
			}
		} else if yyl4637 != len(yyv4637) {
			yyv4637 = yyv4637[:yyl4637]
			yyc4637 = true
		}
		yyj4637 := 0
		for ; yyj4637 < yyrr4637; yyj4637++ {
			yyh4637.ElemContainerState(yyj4637)
			if r.TryDecodeAsNil() {
				yyv4637[yyj4637] = HTTPHeader{}
			} else {
				yyv4638 := &yyv4637[yyj4637]
				yyv4638.CodecDecodeSelf(d)
			}

		}
		if yyrt4637 {
			for ; yyj4637 < yyl4637; yyj4637++ {
				yyv4637 = append(yyv4637, HTTPHeader{})
				yyh4637.ElemContainerState(yyj4637)
				if r.TryDecodeAsNil() {
					yyv4637[yyj4637] = HTTPHeader{}
				} else {
					yyv4639 := &yyv4637[yyj4637]
					yyv4639.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4637 := 0
		for ; !r.CheckBreak(); yyj4637++ {

			if yyj4637 >= len(yyv4637) {
				yyv4637 = append(yyv4637, HTTPHeader{}) // var yyz4637 HTTPHeader
				yyc4637 = true
			}
			yyh4637.ElemContainerState(yyj4637)
			if yyj4637 < len(yyv4637) {
				if r.TryDecodeAsNil() {
					yyv4637[yyj4637] = HTTPHeader{}
				} else {
					yyv4640 := &yyv4637[yyj4637]
					yyv4640.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4637 < len(yyv4637) {
			yyv4637 = yyv4637[:yyj4637]
			yyc4637 = true
		} else if yyj4637 == 0 && yyv4637 == nil {
			yyv4637 = []HTTPHeader{}
			yyc4637 = true
		}
	}
	yyh4637.End()
	if yyc4637 {
		*v = yyv4637
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4641 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4641.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4642 := *v
	yyh4642, yyl4642 := z.DecSliceHelperStart()
	var yyc4642 bool
	if yyl4642 == 0 {
		if yyv4642 == nil {
			yyv4642 = []Capability{}
			yyc4642 = true
		} else if len(yyv4642) != 0 {
			yyv4642 = yyv4642[:0]
			yyc4642 = true
		}
	} else if yyl4642 > 0 {
		var yyrr4642, yyrl4642 int
		var yyrt4642 bool
		if yyl4642 > cap(yyv4642) {

			yyrl4642, yyrt4642 = z.DecInferLen(yyl4642, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4642 {
				if yyrl4642 <= cap(yyv4642) {
					yyv4642 = yyv4642[:yyrl4642]
				} else {
					yyv4642 = make([]Capability, yyrl4642)
				}
			} else {
				yyv4642 = make([]Capability, yyrl4642)
			}
			yyc4642 = true
			yyrr4642 = len(yyv4642)
		} else if yyl4642 != len(yyv4642) {
			yyv4642 = yyv4642[:yyl4642]
			yyc4642 = true
		}
		yyj4642 := 0
		for ; yyj4642 < yyrr4642; yyj4642++ {
			yyh4642.ElemContainerState(yyj4642)
			if r.TryDecodeAsNil() {
				yyv4642[yyj4642] = ""
			} else {
				yyv4642[yyj4642] = Capability(r.DecodeString())
			}

		}
		if yyrt4642 {
			for ; yyj4642 < yyl4642; yyj4642++ {
				yyv4642 = append(yyv4642, "")
				yyh4642.ElemContainerState(yyj4642)
				if r.TryDecodeAsNil() {
					yyv4642[yyj4642] = ""
				} else {
					yyv4642[yyj4642] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4642 := 0
		for ; !r.CheckBreak(); yyj4642++ {

			if yyj4642 >= len(yyv4642) {
				yyv4642 = append(yyv4642, "") // var yyz4642 Capability
				yyc4642 = true
			}
			yyh4642.ElemContainerState(yyj4642)
			if yyj4642 < len(yyv4642) {
				if r.TryDecodeAsNil() {
					yyv4642[yyj4642] = ""
				} else {
					yyv4642[yyj4642] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4642 < len(yyv4642) {
			yyv4642 = yyv4642[:yyj4642]
			yyc4642 = true
		} else if yyj4642 == 0 && yyv4642 == nil {
			yyv4642 = []Capability{}
			yyc4642 = true
		}
	}
	yyh4642.End()
	if yyc4642 {
		*v = yyv4642
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4646 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4647 := &yyv4646
		yy4647.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4648 := *v
	yyh4648, yyl4648 := z.DecSliceHelperStart()
	var yyc4648 bool
	if yyl4648 == 0 {
		if yyv4648 == nil {
			yyv4648 = []ContainerPort{}
			yyc4648 = true
		} else if len(yyv4648) != 0 {
			yyv4648 = yyv4648[:0]
			yyc4648 = true
		}
	} else if yyl4648 > 0 {
		var yyrr4648, yyrl4648 int
		var yyrt4648 bool
		if yyl4648 > cap(yyv4648) {

			yyrg4648 := len(yyv4648) > 0
			yyv24648 := yyv4648
			yyrl4648, yyrt4648 = z.DecInferLen(yyl4648, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4648 {
				if yyrl4648 <= cap(yyv4648) {
					yyv4648 = yyv4648[:yyrl4648]
				} else {
					yyv4648 = make([]ContainerPort, yyrl4648)
				}
			} else {
				yyv4648 = make([]ContainerPort, yyrl4648)
			}
			yyc4648 = true
			yyrr4648 = len(yyv4648)
			if yyrg4648 {
				copy(yyv4648, yyv24648)
			}
		} else if yyl4648 != len(yyv4648) {
			yyv4648 = yyv4648[:yyl4648]
			yyc4648 = true
		}
		yyj4648 := 0
		for ; yyj4648 < yyrr4648; yyj4648++ {
			yyh4648.ElemContainerState(yyj4648)
			if r.TryDecodeAsNil() {
				yyv4648[yyj4648] = ContainerPort{}
			} else {
				yyv4649 := &yyv4648[yyj4648]
				yyv4649.CodecDecodeSelf(d)
			}

		}
		if yyrt4648 {
			for ; yyj4648 < yyl4648; yyj4648++ {
				yyv4648 = append(yyv4648, ContainerPort{})
				yyh4648.ElemContainerState(yyj4648)
				if r.TryDecodeAsNil() {
					yyv4648[yyj4648] = ContainerPort{}
				} else {
					yyv4650 := &yyv4648[yyj4648]
					yyv4650.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4648 := 0
		for ; !r.CheckBreak(); yyj4648++ {

			if yyj4648 >= len(yyv4648) {
				yyv4648 = append(yyv4648, ContainerPort{}) // var yyz4648 ContainerPort
				yyc4648 = true
			}
			yyh4648.ElemContainerState(yyj4648)
			if yyj4648 < len(yyv4648) {
				if r.TryDecodeAsNil() {
					yyv4648[yyj4648] = ContainerPort{}
				} else {
					yyv4651 := &yyv4648[yyj4648]
					yyv4651.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4648 < len(yyv4648) {
			yyv4648 = yyv4648[:yyj4648]
			yyc4648 = true
		} else if yyj4648 == 0 && yyv4648 == nil {
			yyv4648 = []ContainerPort{}
			yyc4648 = true
		}
	}
	yyh4648.End()
	if yyc4648 {
		*v = yyv4648
	}
}

func (x codecSelfer1234) encSliceEnvFromSource(v []EnvFromSource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4652 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4653 := &yyv4652
		yy4653.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvFromSource(v *[]EnvFromSource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4654 := *v
	yyh4654, yyl4654 := z.DecSliceHelperStart()
	var yyc4654 bool
	if yyl4654 == 0 {
		if yyv4654 == nil {
			yyv4654 = []EnvFromSource{}
			yyc4654 = true
		} else if len(yyv4654) != 0 {
			yyv4654 = yyv4654[:0]
			yyc4654 = true
		}
	} else if yyl4654 > 0 {
		var yyrr4654, yyrl4654 int
		var yyrt4654 bool
		if yyl4654 > cap(yyv4654) {

			yyrg4654 := len(yyv4654) > 0
			yyv24654 := yyv4654
			yyrl4654, yyrt4654 = z.DecInferLen(yyl4654, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4654 {
				if yyrl4654 <= cap(yyv4654) {
					yyv4654 = yyv4654[:yyrl4654]
				} else {
					yyv4654 = make([]EnvFromSource, yyrl4654)
				}
			} else {
				yyv4654 = make([]EnvFromSource, yyrl4654)
			}
			yyc4654 = true
			yyrr4654 = len(yyv4654)
			if yyrg4654 {
				copy(yyv4654, yyv24654)
			}
		} else if yyl4654 != len(yyv4654) {
			yyv4654 = yyv4654[:yyl4654]
			yyc4654 = true
		}
		yyj4654 := 0
		for ; yyj4654 < yyrr4654; yyj4654++ {
			yyh4654.ElemContainerState(yyj4654)
			if r.TryDecodeAsNil() {
				yyv4654[yyj4654] = EnvFromSource{}
			} else {
				yyv4655 := &yyv4654[yyj4654]
				yyv4655.CodecDecodeSelf(d)
			}

		}
		if yyrt4654 {
			for ; yyj4654 < yyl4654; yyj4654++ {
				yyv4654 = append(yyv4654, EnvFromSource{})
				yyh4654.ElemContainerState(yyj4654)
				if r.TryDecodeAsNil() {
					yyv4654[yyj4654] = EnvFromSource{}
				} else {
					yyv4656 := &yyv4654[yyj4654]
					yyv4656.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4654 := 0
		for ; !r.CheckBreak(); yyj4654++ {

			if yyj4654 >= len(yyv4654) {
				yyv4654 = append(yyv4654, EnvFromSource{}) // var yyz4654 EnvFromSource
				yyc4654 = true
			}
			yyh4654.ElemContainerState(yyj4654)
			if yyj4654 < len(yyv4654) {
				if r.TryDecodeAsNil() {
					yyv4654[yyj4654] = EnvFromSource{}
				} else {
					yyv4657 := &yyv4654[yyj4654]
					yyv4657.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4654 < len(yyv4654) {
			yyv4654 = yyv4654[:yyj4654]
			yyc4654 = true
		} else if yyj4654 == 0 && yyv4654 == nil {
			yyv4654 = []EnvFromSource{}
			yyc4654 = true
		}
	}
	yyh4654.End()
	if yyc4654 {
		*v = yyv4654
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4658 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4659 := &yyv4658
		yy4659.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4660 := *v
	yyh4660, yyl4660 := z.DecSliceHelperStart()
	var yyc4660 bool
	if yyl4660 == 0 {
		if yyv4660 == nil {
			yyv4660 = []EnvVar{}
			yyc4660 = true
		} else if len(yyv4660) != 0 {
			yyv4660 = yyv4660[:0]
			yyc4660 = true
		}
	} else if yyl4660 > 0 {
		var yyrr4660, yyrl4660 int
		var yyrt4660 bool
		if yyl4660 > cap(yyv4660) {

			yyrg4660 := len(yyv4660) > 0
			yyv24660 := yyv4660
			yyrl4660, yyrt4660 = z.DecInferLen(yyl4660, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4660 {
				if yyrl4660 <= cap(yyv4660) {
					yyv4660 = yyv4660[:yyrl4660]
				} else {
					yyv4660 = make([]EnvVar, yyrl4660)
				}
			} else {
				yyv4660 = make([]EnvVar, yyrl4660)
			}
			yyc4660 = true
			yyrr4660 = len(yyv4660)
			if yyrg4660 {
				copy(yyv4660, yyv24660)
			}
		} else if yyl4660 != len(yyv4660) {
			yyv4660 = yyv4660[:yyl4660]
			yyc4660 = true
		}
		yyj4660 := 0
		for ; yyj4660 < yyrr4660; yyj4660++ {
			yyh4660.ElemContainerState(yyj4660)
			if r.TryDecodeAsNil() {
				yyv4660[yyj4660] = EnvVar{}
			} else {
				yyv4661 := &yyv4660[yyj4660]
				yyv4661.CodecDecodeSelf(d)
			}

		}
		if yyrt4660 {
			for ; yyj4660 < yyl4660; yyj4660++ {
				yyv4660 = append(yyv4660, EnvVar{})
				yyh4660.ElemContainerState(yyj4660)
				if r.TryDecodeAsNil() {
					yyv4660[yyj4660] = EnvVar{}
				} else {
					yyv4662 := &yyv4660[yyj4660]
					yyv4662.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4660 := 0
		for ; !r.CheckBreak(); yyj4660++ {

			if yyj4660 >= len(yyv4660) {
				yyv4660 = append(yyv4660, EnvVar{}) // var yyz4660 EnvVar
				yyc4660 = true
			}
			yyh4660.ElemContainerState(yyj4660)
			if yyj4660 < len(yyv4660) {
				if r.TryDecodeAsNil() {
					yyv4660[yyj4660] = EnvVar{}
				} else {
					yyv4663 := &yyv4660[yyj4660]
					yyv4663.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4660 < len(yyv4660) {
			yyv4660 = yyv4660[:yyj4660]
			yyc4660 = true
		} else if yyj4660 == 0 && yyv4660 == nil {
			yyv4660 = []EnvVar{}
			yyc4660 = true
		}
	}
	yyh4660.End()
	if yyc4660 {
		*v = yyv4660
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4664 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4665 := &yyv4664
		yy4665.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4666 := *v
	yyh4666, yyl4666 := z.DecSliceHelperStart()
	var yyc4666 bool
	if yyl4666 == 0 {
		if yyv4666 == nil {
			yyv4666 = []VolumeMount{}
			yyc4666 = true
		} else if len(yyv4666) != 0 {
			yyv4666 = yyv4666[:0]
			yyc4666 = true
		}
	} else if yyl4666 > 0 {
		var yyrr4666, yyrl4666 int
		var yyrt4666 bool
		if yyl4666 > cap(yyv4666) {

			yyrg4666 := len(yyv4666) > 0
			yyv24666 := yyv4666
			yyrl4666, yyrt4666 = z.DecInferLen(yyl4666, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4666 {
				if yyrl4666 <= cap(yyv4666) {
					yyv4666 = yyv4666[:yyrl4666]
				} else {
					yyv4666 = make([]VolumeMount, yyrl4666)
				}
			} else {
				yyv4666 = make([]VolumeMount, yyrl4666)
			}
			yyc4666 = true
			yyrr4666 = len(yyv4666)
			if yyrg4666 {
				copy(yyv4666, yyv24666)
			}
		} else if yyl4666 != len(yyv4666) {
			yyv4666 = yyv4666[:yyl4666]
			yyc4666 = true
		}
		yyj4666 := 0
		for ; yyj4666 < yyrr4666; yyj4666++ {
			yyh4666.ElemContainerState(yyj4666)
			if r.TryDecodeAsNil() {
				yyv4666[yyj4666] = VolumeMount{}
			} else {
				yyv4667 := &yyv4666[yyj4666]
				yyv4667.CodecDecodeSelf(d)
			}

		}
		if yyrt4666 {
			for ; yyj4666 < yyl4666; yyj4666++ {
				yyv4666 = append(yyv4666, VolumeMount{})
				yyh4666.ElemContainerState(yyj4666)
				if r.TryDecodeAsNil() {
					yyv4666[yyj4666] = VolumeMount{}
				} else {
					yyv4668 := &yyv4666[yyj4666]
					yyv4668.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4666 := 0
		for ; !r.CheckBreak(); yyj4666++ {

			if yyj4666 >= len(yyv4666) {
				yyv4666 = append(yyv4666, VolumeMount{}) // var yyz4666 VolumeMount
				yyc4666 = true
			}
			yyh4666.ElemContainerState(yyj4666)
			if yyj4666 < len(yyv4666) {
				if r.TryDecodeAsNil() {
					yyv4666[yyj4666] = VolumeMount{}
				} else {
					yyv4669 := &yyv4666[yyj4666]
					yyv4669.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4666 < len(yyv4666) {
			yyv4666 = yyv4666[:yyj4666]
			yyc4666 = true
		} else if yyj4666 == 0 && yyv4666 == nil {
			yyv4666 = []VolumeMount{}
			yyc4666 = true
		}
	}
	yyh4666.End()
	if yyc4666 {
		*v = yyv4666
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4670 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4671 := &yyv4670
		yy4671.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4672 := *v
	yyh4672, yyl4672 := z.DecSliceHelperStart()
	var yyc4672 bool
	if yyl4672 == 0 {
		if yyv4672 == nil {
			yyv4672 = []NodeSelectorTerm{}
			yyc4672 = true
		} else if len(yyv4672) != 0 {
			yyv4672 = yyv4672[:0]
			yyc4672 = true
		}
	} else if yyl4672 > 0 {
		var yyrr4672, yyrl4672 int
		var yyrt4672 bool
		if yyl4672 > cap(yyv4672) {

			yyrg4672 := len(yyv4672) > 0
			yyv24672 := yyv4672
			yyrl4672, yyrt4672 = z.DecInferLen(yyl4672, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4672 {
				if yyrl4672 <= cap(yyv4672) {
					yyv4672 = yyv4672[:yyrl4672]
				} else {
					yyv4672 = make([]NodeSelectorTerm, yyrl4672)
				}
			} else {
				yyv4672 = make([]NodeSelectorTerm, yyrl4672)
			}
			yyc4672 = true
			yyrr4672 = len(yyv4672)
			if yyrg4672 {
				copy(yyv4672, yyv24672)
			}
		} else if yyl4672 != len(yyv4672) {
			yyv4672 = yyv4672[:yyl4672]
			yyc4672 = true
		}
		yyj4672 := 0
		for ; yyj4672 < yyrr4672; yyj4672++ {
			yyh4672.ElemContainerState(yyj4672)
			if r.TryDecodeAsNil() {
				yyv4672[yyj4672] = NodeSelectorTerm{}
			} else {
				yyv4673 := &yyv4672[yyj4672]
				yyv4673.CodecDecodeSelf(d)
			}

		}
		if yyrt4672 {
			for ; yyj4672 < yyl4672; yyj4672++ {
				yyv4672 = append(yyv4672, NodeSelectorTerm{})
				yyh4672.ElemContainerState(yyj4672)
				if r.TryDecodeAsNil() {
					yyv4672[yyj4672] = NodeSelectorTerm{}
				} else {
					yyv4674 := &yyv4672[yyj4672]
					yyv4674.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4672 := 0
		for ; !r.CheckBreak(); yyj4672++ {

			if yyj4672 >= len(yyv4672) {
				yyv4672 = append(yyv4672, NodeSelectorTerm{}) // var yyz4672 NodeSelectorTerm
				yyc4672 = true
			}
			yyh4672.ElemContainerState(yyj4672)
			if yyj4672 < len(yyv4672) {
				if r.TryDecodeAsNil() {
					yyv4672[yyj4672] = NodeSelectorTerm{}
				} else {
					yyv4675 := &yyv4672[yyj4672]
					yyv4675.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4672 < len(yyv4672) {
			yyv4672 = yyv4672[:yyj4672]
			yyc4672 = true
		} else if yyj4672 == 0 && yyv4672 == nil {
			yyv4672 = []NodeSelectorTerm{}
			yyc4672 = true
		}
	}
	yyh4672.End()
	if yyc4672 {
		*v = yyv4672
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4676 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4677 := &yyv4676
		yy4677.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4678 := *v
	yyh4678, yyl4678 := z.DecSliceHelperStart()
	var yyc4678 bool
	if yyl4678 == 0 {
		if yyv4678 == nil {
			yyv4678 = []NodeSelectorRequirement{}
			yyc4678 = true
		} else if len(yyv4678) != 0 {
			yyv4678 = yyv4678[:0]
			yyc4678 = true
		}
	} else if yyl4678 > 0 {
		var yyrr4678, yyrl4678 int
		var yyrt4678 bool
		if yyl4678 > cap(yyv4678) {

			yyrg4678 := len(yyv4678) > 0
			yyv24678 := yyv4678
			yyrl4678, yyrt4678 = z.DecInferLen(yyl4678, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4678 {
				if yyrl4678 <= cap(yyv4678) {
					yyv4678 = yyv4678[:yyrl4678]
				} else {
					yyv4678 = make([]NodeSelectorRequirement, yyrl4678)
				}
			} else {
				yyv4678 = make([]NodeSelectorRequirement, yyrl4678)
			}
			yyc4678 = true
			yyrr4678 = len(yyv4678)
			if yyrg4678 {
				copy(yyv4678, yyv24678)
			}
		} else if yyl4678 != len(yyv4678) {
			yyv4678 = yyv4678[:yyl4678]
			yyc4678 = true
		}
		yyj4678 := 0
		for ; yyj4678 < yyrr4678; yyj4678++ {
			yyh4678.ElemContainerState(yyj4678)
			if r.TryDecodeAsNil() {
				yyv4678[yyj4678] = NodeSelectorRequirement{}
			} else {
				yyv4679 := &yyv4678[yyj4678]
				yyv4679.CodecDecodeSelf(d)
			}

		}
		if yyrt4678 {
			for ; yyj4678 < yyl4678; yyj4678++ {
				yyv4678 = append(yyv4678, NodeSelectorRequirement{})
				yyh4678.ElemContainerState(yyj4678)
				if r.TryDecodeAsNil() {
					yyv4678[yyj4678] = NodeSelectorRequirement{}
				} else {
					yyv4680 := &yyv4678[yyj4678]
					yyv4680.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4678 := 0
		for ; !r.CheckBreak(); yyj4678++ {

			if yyj4678 >= len(yyv4678) {
				yyv4678 = append(yyv4678, NodeSelectorRequirement{}) // var yyz4678 NodeSelectorRequirement
				yyc4678 = true
			}
			yyh4678.ElemContainerState(yyj4678)
			if yyj4678 < len(yyv4678) {
				if r.TryDecodeAsNil() {
					yyv4678[yyj4678] = NodeSelectorRequirement{}
				} else {
					yyv4681 := &yyv4678[yyj4678]
					yyv4681.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4678 < len(yyv4678) {
			yyv4678 = yyv4678[:yyj4678]
			yyc4678 = true
		} else if yyj4678 == 0 && yyv4678 == nil {
			yyv4678 = []NodeSelectorRequirement{}
			yyc4678 = true
		}
	}
	yyh4678.End()
	if yyc4678 {
		*v = yyv4678
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4682 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4683 := &yyv4682
		yy4683.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4684 := *v
	yyh4684, yyl4684 := z.DecSliceHelperStart()
	var yyc4684 bool
	if yyl4684 == 0 {
		if yyv4684 == nil {
			yyv4684 = []PodAffinityTerm{}
			yyc4684 = true
		} else if len(yyv4684) != 0 {
			yyv4684 = yyv4684[:0]
			yyc4684 = true
		}
	} else if yyl4684 > 0 {
		var yyrr4684, yyrl4684 int
		var yyrt4684 bool
		if yyl4684 > cap(yyv4684) {

			yyrg4684 := len(yyv4684) > 0
			yyv24684 := yyv4684
			yyrl4684, yyrt4684 = z.DecInferLen(yyl4684, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4684 {
				if yyrl4684 <= cap(yyv4684) {
					yyv4684 = yyv4684[:yyrl4684]
				} else {
					yyv4684 = make([]PodAffinityTerm, yyrl4684)
				}
			} else {
				yyv4684 = make([]PodAffinityTerm, yyrl4684)
			}
			yyc4684 = true
			yyrr4684 = len(yyv4684)
			if yyrg4684 {
				copy(yyv4684, yyv24684)
			}
		} else if yyl4684 != len(yyv4684) {
			yyv4684 = yyv4684[:yyl4684]
			yyc4684 = true
		}
		yyj4684 := 0
		for ; yyj4684 < yyrr4684; yyj4684++ {
			yyh4684.ElemContainerState(yyj4684)
			if r.TryDecodeAsNil() {
				yyv4684[yyj4684] = PodAffinityTerm{}
			} else {
				yyv4685 := &yyv4684[yyj4684]
				yyv4685.CodecDecodeSelf(d)
			}

		}
		if yyrt4684 {
			for ; yyj4684 < yyl4684; yyj4684++ {
				yyv4684 = append(yyv4684, PodAffinityTerm{})
				yyh4684.ElemContainerState(yyj4684)
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = PodAffinityTerm{}
				} else {
					yyv4686 := &yyv4684[yyj4684]
					yyv4686.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4684 := 0
		for ; !r.CheckBreak(); yyj4684++ {

			if yyj4684 >= len(yyv4684) {
				yyv4684 = append(yyv4684, PodAffinityTerm{}) // var yyz4684 PodAffinityTerm
				yyc4684 = true
			}
			yyh4684.ElemContainerState(yyj4684)
			if yyj4684 < len(yyv4684) {
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = PodAffinityTerm{}
				} else {
					yyv4687 := &yyv4684[yyj4684]
					yyv4687.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4684 < len(yyv4684) {
			yyv4684 = yyv4684[:yyj4684]
			yyc4684 = true
		} else if yyj4684 == 0 && yyv4684 == nil {
			yyv4684 = []PodAffinityTerm{}
			yyc4684 = true
		}
	}
	yyh4684.End()
	if yyc4684 {
		*v = yyv4684
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4688 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4689 := &yyv4688
		yy4689.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4690 := *v
	yyh4690, yyl4690 := z.DecSliceHelperStart()
	var yyc4690 bool
	if yyl4690 == 0 {
		if yyv4690 == nil {
			yyv4690 = []WeightedPodAffinityTerm{}
			yyc4690 = true
		} else if len(yyv4690) != 0 {
			yyv4690 = yyv4690[:0]
			yyc4690 = true
		}
	} else if yyl4690 > 0 {
		var yyrr4690, yyrl4690 int
		var yyrt4690 bool
		if yyl4690 > cap(yyv4690) {

			yyrg4690 := len(yyv4690) > 0
			yyv24690 := yyv4690
			yyrl4690, yyrt4690 = z.DecInferLen(yyl4690, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4690 {
				if yyrl4690 <= cap(yyv4690) {
					yyv4690 = yyv4690[:yyrl4690]
				} else {
					yyv4690 = make([]WeightedPodAffinityTerm, yyrl4690)
				}
			} else {
				yyv4690 = make([]WeightedPodAffinityTerm, yyrl4690)
			}
			yyc4690 = true
			yyrr4690 = len(yyv4690)
			if yyrg4690 {
				copy(yyv4690, yyv24690)
			}
		} else if yyl4690 != len(yyv4690) {
			yyv4690 = yyv4690[:yyl4690]
			yyc4690 = true
		}
		yyj4690 := 0
		for ; yyj4690 < yyrr4690; yyj4690++ {
			yyh4690.ElemContainerState(yyj4690)
			if r.TryDecodeAsNil() {
				yyv4690[yyj4690] = WeightedPodAffinityTerm{}
			} else {
				yyv4691 := &yyv4690[yyj4690]
				yyv4691.CodecDecodeSelf(d)
			}

		}
		if yyrt4690 {
			for ; yyj4690 < yyl4690; yyj4690++ {
				yyv4690 = append(yyv4690, WeightedPodAffinityTerm{})
				yyh4690.ElemContainerState(yyj4690)
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = WeightedPodAffinityTerm{}
				} else {
					yyv4692 := &yyv4690[yyj4690]
					yyv4692.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4690 := 0
		for ; !r.CheckBreak(); yyj4690++ {

			if yyj4690 >= len(yyv4690) {
				yyv4690 = append(yyv4690, WeightedPodAffinityTerm{}) // var yyz4690 WeightedPodAffinityTerm
				yyc4690 = true
			}
			yyh4690.ElemContainerState(yyj4690)
			if yyj4690 < len(yyv4690) {
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = WeightedPodAffinityTerm{}
				} else {
					yyv4693 := &yyv4690[yyj4690]
					yyv4693.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4690 < len(yyv4690) {
			yyv4690 = yyv4690[:yyj4690]
			yyc4690 = true
		} else if yyj4690 == 0 && yyv4690 == nil {
			yyv4690 = []WeightedPodAffinityTerm{}
			yyc4690 = true
		}
	}
	yyh4690.End()
	if yyc4690 {
		*v = yyv4690
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4694 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4695 := &yyv4694
		yy4695.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4696 := *v
	yyh4696, yyl4696 := z.DecSliceHelperStart()
	var yyc4696 bool
	if yyl4696 == 0 {
		if yyv4696 == nil {
			yyv4696 = []PreferredSchedulingTerm{}
			yyc4696 = true
		} else if len(yyv4696) != 0 {
			yyv4696 = yyv4696[:0]
			yyc4696 = true
		}
	} else if yyl4696 > 0 {
		var yyrr4696, yyrl4696 int
		var yyrt4696 bool
		if yyl4696 > cap(yyv4696) {

			yyrg4696 := len(yyv4696) > 0
			yyv24696 := yyv4696
			yyrl4696, yyrt4696 = z.DecInferLen(yyl4696, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4696 {
				if yyrl4696 <= cap(yyv4696) {
					yyv4696 = yyv4696[:yyrl4696]
				} else {
					yyv4696 = make([]PreferredSchedulingTerm, yyrl4696)
				}
			} else {
				yyv4696 = make([]PreferredSchedulingTerm, yyrl4696)
			}
			yyc4696 = true
			yyrr4696 = len(yyv4696)
			if yyrg4696 {
				copy(yyv4696, yyv24696)
			}
		} else if yyl4696 != len(yyv4696) {
			yyv4696 = yyv4696[:yyl4696]
			yyc4696 = true
		}
		yyj4696 := 0
		for ; yyj4696 < yyrr4696; yyj4696++ {
			yyh4696.ElemContainerState(yyj4696)
			if r.TryDecodeAsNil() {
				yyv4696[yyj4696] = PreferredSchedulingTerm{}
			} else {
				yyv4697 := &yyv4696[yyj4696]
				yyv4697.CodecDecodeSelf(d)
			}

		}
		if yyrt4696 {
			for ; yyj4696 < yyl4696; yyj4696++ {
				yyv4696 = append(yyv4696, PreferredSchedulingTerm{})
				yyh4696.ElemContainerState(yyj4696)
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = PreferredSchedulingTerm{}
				} else {
					yyv4698 := &yyv4696[yyj4696]
					yyv4698.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4696 := 0
		for ; !r.CheckBreak(); yyj4696++ {

			if yyj4696 >= len(yyv4696) {
				yyv4696 = append(yyv4696, PreferredSchedulingTerm{}) // var yyz4696 PreferredSchedulingTerm
				yyc4696 = true
			}
			yyh4696.ElemContainerState(yyj4696)
			if yyj4696 < len(yyv4696) {
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = PreferredSchedulingTerm{}
				} else {
					yyv4699 := &yyv4696[yyj4696]
					yyv4699.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4696 < len(yyv4696) {
			yyv4696 = yyv4696[:yyj4696]
			yyc4696 = true
		} else if yyj4696 == 0 && yyv4696 == nil {
			yyv4696 = []PreferredSchedulingTerm{}
			yyc4696 = true
		}
	}
	yyh4696.End()
	if yyc4696 {
		*v = yyv4696
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4700 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4701 := &yyv4700
		yy4701.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4702 := *v
	yyh4702, yyl4702 := z.DecSliceHelperStart()
	var yyc4702 bool
	if yyl4702 == 0 {
		if yyv4702 == nil {
			yyv4702 = []Volume{}
			yyc4702 = true
		} else if len(yyv4702) != 0 {
			yyv4702 = yyv4702[:0]
			yyc4702 = true
		}
	} else if yyl4702 > 0 {
		var yyrr4702, yyrl4702 int
		var yyrt4702 bool
		if yyl4702 > cap(yyv4702) {

			yyrg4702 := len(yyv4702) > 0
			yyv24702 := yyv4702
			yyrl4702, yyrt4702 = z.DecInferLen(yyl4702, z.DecBasicHandle().MaxInitLen, 200)
			if yyrt4702 {
				if yyrl4702 <= cap(yyv4702) {
					yyv4702 = yyv4702[:yyrl4702]
				} else {
					yyv4702 = make([]Volume, yyrl4702)
				}
			} else {
				yyv4702 = make([]Volume, yyrl4702)
			}
			yyc4702 = true
			yyrr4702 = len(yyv4702)
			if yyrg4702 {
				copy(yyv4702, yyv24702)
			}
		} else if yyl4702 != len(yyv4702) {
			yyv4702 = yyv4702[:yyl4702]
			yyc4702 = true
		}
		yyj4702 := 0
		for ; yyj4702 < yyrr4702; yyj4702++ {
			yyh4702.ElemContainerState(yyj4702)
			if r.TryDecodeAsNil() {
				yyv4702[yyj4702] = Volume{}
			} else {
				yyv4703 := &yyv4702[yyj4702]
				yyv4703.CodecDecodeSelf(d)
			}

		}
		if yyrt4702 {
			for ; yyj4702 < yyl4702; yyj4702++ {
				yyv4702 = append(yyv4702, Volume{})
				yyh4702.ElemContainerState(yyj4702)
				if r.TryDecodeAsNil() {
					yyv4702[yyj4702] = Volume{}
				} else {
					yyv4704 := &yyv4702[yyj4702]
					yyv4704.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4702 := 0
		for ; !r.CheckBreak(); yyj4702++ {

			if yyj4702 >= len(yyv4702) {
				yyv4702 = append(yyv4702, Volume{}) // var yyz4702 Volume
				yyc4702 = true
			}
			yyh4702.ElemContainerState(yyj4702)
			if yyj4702 < len(yyv4702) {
				if r.TryDecodeAsNil() {
					yyv4702[yyj4702] = Volume{}
				} else {
					yyv4705 := &yyv4702[yyj4702]
					yyv4705.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4702 < len(yyv4702) {
			yyv4702 = yyv4702[:yyj4702]
			yyc4702 = true
		} else if yyj4702 == 0 && yyv4702 == nil {
			yyv4702 = []Volume{}
			yyc4702 = true
		}
	}
	yyh4702.End()
	if yyc4702 {
		*v = yyv4702
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4706 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4707 := &yyv4706
		yy4707.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4708 := *v
	yyh4708, yyl4708 := z.DecSliceHelperStart()
	var yyc4708 bool
	if yyl4708 == 0 {
		if yyv4708 == nil {
			yyv4708 = []Container{}
			yyc4708 = true
		} else if len(yyv4708) != 0 {
			yyv4708 = yyv4708[:0]
			yyc4708 = true
		}
	} else if yyl4708 > 0 {
		var yyrr4708, yyrl4708 int
		var yyrt4708 bool
		if yyl4708 > cap(yyv4708) {

			yyrg4708 := len(yyv4708) > 0
			yyv24708 := yyv4708
			yyrl4708, yyrt4708 = z.DecInferLen(yyl4708, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4708 {
				if yyrl4708 <= cap(yyv4708) {
					yyv4708 = yyv4708[:yyrl4708]
				} else {
					yyv4708 = make([]Container, yyrl4708)
				}
			} else {
				yyv4708 = make([]Container, yyrl4708)
			}
			yyc4708 = true
			yyrr4708 = len(yyv4708)
			if yyrg4708 {
				copy(yyv4708, yyv24708)
			}
		} else if yyl4708 != len(yyv4708) {
			yyv4708 = yyv4708[:yyl4708]
			yyc4708 = true
		}
		yyj4708 := 0
		for ; yyj4708 < yyrr4708; yyj4708++ {
			yyh4708.ElemContainerState(yyj4708)
			if r.TryDecodeAsNil() {
				yyv4708[yyj4708] = Container{}
			} else {
				yyv4709 := &yyv4708[yyj4708]
				yyv4709.CodecDecodeSelf(d)
			}

		}
		if yyrt4708 {
			for ; yyj4708 < yyl4708; yyj4708++ {
				yyv4708 = append(yyv4708, Container{})
				yyh4708.ElemContainerState(yyj4708)
				if r.TryDecodeAsNil() {
					yyv4708[yyj4708] = Container{}
				} else {
					yyv4710 := &yyv4708[yyj4708]
					yyv4710.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4708 := 0
		for ; !r.CheckBreak(); yyj4708++ {

			if yyj4708 >= len(yyv4708) {
				yyv4708 = append(yyv4708, Container{}) // var yyz4708 Container
				yyc4708 = true
			}
			yyh4708.ElemContainerState(yyj4708)
			if yyj4708 < len(yyv4708) {
				if r.TryDecodeAsNil() {
					yyv4708[yyj4708] = Container{}
				} else {
					yyv4711 := &yyv4708[yyj4708]
					yyv4711.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4708 < len(yyv4708) {
			yyv4708 = yyv4708[:yyj4708]
			yyc4708 = true
		} else if yyj4708 == 0 && yyv4708 == nil {
			yyv4708 = []Container{}
			yyc4708 = true
		}
	}
	yyh4708.End()
	if yyc4708 {
		*v = yyv4708
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4712 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4713 := &yyv4712
		yy4713.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4714 := *v
	yyh4714, yyl4714 := z.DecSliceHelperStart()
	var yyc4714 bool
	if yyl4714 == 0 {
		if yyv4714 == nil {
			yyv4714 = []LocalObjectReference{}
			yyc4714 = true
		} else if len(yyv4714) != 0 {
			yyv4714 = yyv4714[:0]
			yyc4714 = true
		}
	} else if yyl4714 > 0 {
		var yyrr4714, yyrl4714 int
		var yyrt4714 bool
		if yyl4714 > cap(yyv4714) {

			yyrg4714 := len(yyv4714) > 0
			yyv24714 := yyv4714
			yyrl4714, yyrt4714 = z.DecInferLen(yyl4714, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4714 {
				if yyrl4714 <= cap(yyv4714) {
					yyv4714 = yyv4714[:yyrl4714]
				} else {
					yyv4714 = make([]LocalObjectReference, yyrl4714)
				}
			} else {
				yyv4714 = make([]LocalObjectReference, yyrl4714)
			}
			yyc4714 = true
			yyrr4714 = len(yyv4714)
			if yyrg4714 {
				copy(yyv4714, yyv24714)
			}
		} else if yyl4714 != len(yyv4714) {
			yyv4714 = yyv4714[:yyl4714]
			yyc4714 = true
		}
		yyj4714 := 0
		for ; yyj4714 < yyrr4714; yyj4714++ {
			yyh4714.ElemContainerState(yyj4714)
			if r.TryDecodeAsNil() {
				yyv4714[yyj4714] = LocalObjectReference{}
			} else {
				yyv4715 := &yyv4714[yyj4714]
				yyv4715.CodecDecodeSelf(d)
			}

		}
		if yyrt4714 {
			for ; yyj4714 < yyl4714; yyj4714++ {
				yyv4714 = append(yyv4714, LocalObjectReference{})
				yyh4714.ElemContainerState(yyj4714)
				if r.TryDecodeAsNil() {
					yyv4714[yyj4714] = LocalObjectReference{}
				} else {
					yyv4716 := &yyv4714[yyj4714]
					yyv4716.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4714 := 0
		for ; !r.CheckBreak(); yyj4714++ {

			if yyj4714 >= len(yyv4714) {
				yyv4714 = append(yyv4714, LocalObjectReference{}) // var yyz4714 LocalObjectReference
				yyc4714 = true
			}
			yyh4714.ElemContainerState(yyj4714)
			if yyj4714 < len(yyv4714) {
				if r.TryDecodeAsNil() {
					yyv4714[yyj4714] = LocalObjectReference{}
				} else {
					yyv4717 := &yyv4714[yyj4714]
					yyv4717.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4714 < len(yyv4714) {
			yyv4714 = yyv4714[:yyj4714]
			yyc4714 = true
		} else if yyj4714 == 0 && yyv4714 == nil {
			yyv4714 = []LocalObjectReference{}
			yyc4714 = true
		}
	}
	yyh4714.End()
	if yyc4714 {
		*v = yyv4714
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4718 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4719 := &yyv4718
		yy4719.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4720 := *v
	yyh4720, yyl4720 := z.DecSliceHelperStart()
	var yyc4720 bool
	if yyl4720 == 0 {
		if yyv4720 == nil {
			yyv4720 = []PodCondition{}
			yyc4720 = true
		} else if len(yyv4720) != 0 {
			yyv4720 = yyv4720[:0]
			yyc4720 = true
		}
	} else if yyl4720 > 0 {
		var yyrr4720, yyrl4720 int
		var yyrt4720 bool
		if yyl4720 > cap(yyv4720) {

			yyrg4720 := len(yyv4720) > 0
			yyv24720 := yyv4720
			yyrl4720, yyrt4720 = z.DecInferLen(yyl4720, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4720 {
				if yyrl4720 <= cap(yyv4720) {
					yyv4720 = yyv4720[:yyrl4720]
				} else {
					yyv4720 = make([]PodCondition, yyrl4720)
				}
			} else {
				yyv4720 = make([]PodCondition, yyrl4720)
			}
			yyc4720 = true
			yyrr4720 = len(yyv4720)
			if yyrg4720 {
				copy(yyv4720, yyv24720)
			}
		} else if yyl4720 != len(yyv4720) {
			yyv4720 = yyv4720[:yyl4720]
			yyc4720 = true
		}
		yyj4720 := 0
		for ; yyj4720 < yyrr4720; yyj4720++ {
			yyh4720.ElemContainerState(yyj4720)
			if r.TryDecodeAsNil() {
				yyv4720[yyj4720] = PodCondition{}
			} else {
				yyv4721 := &yyv4720[yyj4720]
				yyv4721.CodecDecodeSelf(d)
			}

		}
		if yyrt4720 {
			for ; yyj4720 < yyl4720; yyj4720++ {
				yyv4720 = append(yyv4720, PodCondition{})
				yyh4720.ElemContainerState(yyj4720)
				if r.TryDecodeAsNil() {
					yyv4720[yyj4720] = PodCondition{}
				} else {
					yyv4722 := &yyv4720[yyj4720]
					yyv4722.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4720 := 0
		for ; !r.CheckBreak(); yyj4720++ {

			if yyj4720 >= len(yyv4720) {
				yyv4720 = append(yyv4720, PodCondition{}) // var yyz4720 PodCondition
				yyc4720 = true
			}
			yyh4720.ElemContainerState(yyj4720)
			if yyj4720 < len(yyv4720) {
				if r.TryDecodeAsNil() {
					yyv4720[yyj4720] = PodCondition{}
				} else {
					yyv4723 := &yyv4720[yyj4720]
					yyv4723.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4720 < len(yyv4720) {
			yyv4720 = yyv4720[:yyj4720]
			yyc4720 = true
		} else if yyj4720 == 0 && yyv4720 == nil {
			yyv4720 = []PodCondition{}
			yyc4720 = true
		}
	}
	yyh4720.End()
	if yyc4720 {
		*v = yyv4720
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4724 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4725 := &yyv4724
		yy4725.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4726 := *v
	yyh4726, yyl4726 := z.DecSliceHelperStart()
	var yyc4726 bool
	if yyl4726 == 0 {
		if yyv4726 == nil {
			yyv4726 = []ContainerStatus{}
			yyc4726 = true
		} else if len(yyv4726) != 0 {
			yyv4726 = yyv4726[:0]
			yyc4726 = true
		}
	} else if yyl4726 > 0 {
		var yyrr4726, yyrl4726 int
		var yyrt4726 bool
		if yyl4726 > cap(yyv4726) {

			yyrg4726 := len(yyv4726) > 0
			yyv24726 := yyv4726
			yyrl4726, yyrt4726 = z.DecInferLen(yyl4726, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4726 {
				if yyrl4726 <= cap(yyv4726) {
					yyv4726 = yyv4726[:yyrl4726]
				} else {
					yyv4726 = make([]ContainerStatus, yyrl4726)
				}
			} else {
				yyv4726 = make([]ContainerStatus, yyrl4726)
			}
			yyc4726 = true
			yyrr4726 = len(yyv4726)
			if yyrg4726 {
				copy(yyv4726, yyv24726)
			}
		} else if yyl4726 != len(yyv4726) {
			yyv4726 = yyv4726[:yyl4726]
			yyc4726 = true
		}
		yyj4726 := 0
		for ; yyj4726 < yyrr4726; yyj4726++ {
			yyh4726.ElemContainerState(yyj4726)
			if r.TryDecodeAsNil() {
				yyv4726[yyj4726] = ContainerStatus{}
			} else {
				yyv4727 := &yyv4726[yyj4726]
				yyv4727.CodecDecodeSelf(d)
			}

		}
		if yyrt4726 {
			for ; yyj4726 < yyl4726; yyj4726++ {
				yyv4726 = append(yyv4726, ContainerStatus{})
				yyh4726.ElemContainerState(yyj4726)
				if r.TryDecodeAsNil() {
					yyv4726[yyj4726] = ContainerStatus{}
				} else {
					yyv4728 := &yyv4726[yyj4726]
					yyv4728.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4726 := 0
		for ; !r.CheckBreak(); yyj4726++ {

			if yyj4726 >= len(yyv4726) {
				yyv4726 = append(yyv4726, ContainerStatus{}) // var yyz4726 ContainerStatus
				yyc4726 = true
			}
			yyh4726.ElemContainerState(yyj4726)
			if yyj4726 < len(yyv4726) {
				if r.TryDecodeAsNil() {
					yyv4726[yyj4726] = ContainerStatus{}
				} else {
					yyv4729 := &yyv4726[yyj4726]
					yyv4729.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4726 < len(yyv4726) {
			yyv4726 = yyv4726[:yyj4726]
			yyc4726 = true
		} else if yyj4726 == 0 && yyv4726 == nil {
			yyv4726 = []ContainerStatus{}
			yyc4726 = true
		}
	}
	yyh4726.End()
	if yyc4726 {
		*v = yyv4726
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4730 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4731 := &yyv4730
		yy4731.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4732 := *v
	yyh4732, yyl4732 := z.DecSliceHelperStart()
	var yyc4732 bool
	if yyl4732 == 0 {
		if yyv4732 == nil {
			yyv4732 = []Pod{}
			yyc4732 = true
		} else if len(yyv4732) != 0 {
			yyv4732 = yyv4732[:0]
			yyc4732 = true
		}
	} else if yyl4732 > 0 {
		var yyrr4732, yyrl4732 int
		var yyrt4732 bool
		if yyl4732 > cap(yyv4732) {

			yyrg4732 := len(yyv4732) > 0
			yyv24732 := yyv4732
			yyrl4732, yyrt4732 = z.DecInferLen(yyl4732, z.DecBasicHandle().MaxInitLen, 688)
			if yyrt4732 {
				if yyrl4732 <= cap(yyv4732) {
					yyv4732 = yyv4732[:yyrl4732]
				} else {
					yyv4732 = make([]Pod, yyrl4732)
				}
			} else {
				yyv4732 = make([]Pod, yyrl4732)
			}
			yyc4732 = true
			yyrr4732 = len(yyv4732)
			if yyrg4732 {
				copy(yyv4732, yyv24732)
			}
		} else if yyl4732 != len(yyv4732) {
			yyv4732 = yyv4732[:yyl4732]
			yyc4732 = true
		}
		yyj4732 := 0
		for ; yyj4732 < yyrr4732; yyj4732++ {
			yyh4732.ElemContainerState(yyj4732)
			if r.TryDecodeAsNil() {
				yyv4732[yyj4732] = Pod{}
			} else {
				yyv4733 := &yyv4732[yyj4732]
				yyv4733.CodecDecodeSelf(d)
			}

		}
		if yyrt4732 {
			for ; yyj4732 < yyl4732; yyj4732++ {
				yyv4732 = append(yyv4732, Pod{})
				yyh4732.ElemContainerState(yyj4732)
				if r.TryDecodeAsNil() {
					yyv4732[yyj4732] = Pod{}
				} else {
					yyv4734 := &yyv4732[yyj4732]
					yyv4734.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4732 := 0
		for ; !r.CheckBreak(); yyj4732++ {

			if yyj4732 >= len(yyv4732) {
				yyv4732 = append(yyv4732, Pod{}) // var yyz4732 Pod
				yyc4732 = true
			}
			yyh4732.ElemContainerState(yyj4732)
			if yyj4732 < len(yyv4732) {
				if r.TryDecodeAsNil() {
					yyv4732[yyj4732] = Pod{}
				} else {
					yyv4735 := &yyv4732[yyj4732]
					yyv4735.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4732 < len(yyv4732) {
			yyv4732 = yyv4732[:yyj4732]
			yyc4732 = true
		} else if yyj4732 == 0 && yyv4732 == nil {
			yyv4732 = []Pod{}
			yyc4732 = true
		}
	}
	yyh4732.End()
	if yyc4732 {
		*v = yyv4732
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4736 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4737 := &yyv4736
		yy4737.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4738 := *v
	yyh4738, yyl4738 := z.DecSliceHelperStart()
	var yyc4738 bool
	if yyl4738 == 0 {
		if yyv4738 == nil {
			yyv4738 = []PodTemplate{}
			yyc4738 = true
		} else if len(yyv4738) != 0 {
			yyv4738 = yyv4738[:0]
			yyc4738 = true
		}
	} else if yyl4738 > 0 {
		var yyrr4738, yyrl4738 int
		var yyrt4738 bool
		if yyl4738 > cap(yyv4738) {

			yyrg4738 := len(yyv4738) > 0
			yyv24738 := yyv4738
			yyrl4738, yyrt4738 = z.DecInferLen(yyl4738, z.DecBasicHandle().MaxInitLen, 736)
			if yyrt4738 {
				if yyrl4738 <= cap(yyv4738) {
					yyv4738 = yyv4738[:yyrl4738]
				} else {
					yyv4738 = make([]PodTemplate, yyrl4738)
				}
			} else {
				yyv4738 = make([]PodTemplate, yyrl4738)
			}
			yyc4738 = true
			yyrr4738 = len(yyv4738)
			if yyrg4738 {
				copy(yyv4738, yyv24738)
			}
		} else if yyl4738 != len(yyv4738) {
			yyv4738 = yyv4738[:yyl4738]
			yyc4738 = true
		}
		yyj4738 := 0
		for ; yyj4738 < yyrr4738; yyj4738++ {
			yyh4738.ElemContainerState(yyj4738)
			if r.TryDecodeAsNil() {
				yyv4738[yyj4738] = PodTemplate{}
			} else {
				yyv4739 := &yyv4738[yyj4738]
				yyv4739.CodecDecodeSelf(d)
			}

		}
		if yyrt4738 {
			for ; yyj4738 < yyl4738; yyj4738++ {
				yyv4738 = append(yyv4738, PodTemplate{})
				yyh4738.ElemContainerState(yyj4738)
				if r.TryDecodeAsNil() {
					yyv4738[yyj4738] = PodTemplate{}
				} else {
					yyv4740 := &yyv4738[yyj4738]
					yyv4740.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4738 := 0
		for ; !r.CheckBreak(); yyj4738++ {

			if yyj4738 >= len(yyv4738) {
				yyv4738 = append(yyv4738, PodTemplate{}) // var yyz4738 PodTemplate
				yyc4738 = true
			}
			yyh4738.ElemContainerState(yyj4738)
			if yyj4738 < len(yyv4738) {
				if r.TryDecodeAsNil() {
					yyv4738[yyj4738] = PodTemplate{}
				} else {
					yyv4741 := &yyv4738[yyj4738]
					yyv4741.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4738 < len(yyv4738) {
			yyv4738 = yyv4738[:yyj4738]
			yyc4738 = true
		} else if yyj4738 == 0 && yyv4738 == nil {
			yyv4738 = []PodTemplate{}
			yyc4738 = true
		}
	}
	yyh4738.End()
	if yyc4738 {
		*v = yyv4738
	}
}

func (x codecSelfer1234) encSliceReplicationControllerCondition(v []ReplicationControllerCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4742 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4743 := &yyv4742
		yy4743.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationControllerCondition(v *[]ReplicationControllerCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4744 := *v
	yyh4744, yyl4744 := z.DecSliceHelperStart()
	var yyc4744 bool
	if yyl4744 == 0 {
		if yyv4744 == nil {
			yyv4744 = []ReplicationControllerCondition{}
			yyc4744 = true
		} else if len(yyv4744) != 0 {
			yyv4744 = yyv4744[:0]
			yyc4744 = true
		}
	} else if yyl4744 > 0 {
		var yyrr4744, yyrl4744 int
		var yyrt4744 bool
		if yyl4744 > cap(yyv4744) {

			yyrg4744 := len(yyv4744) > 0
			yyv24744 := yyv4744
			yyrl4744, yyrt4744 = z.DecInferLen(yyl4744, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt4744 {
				if yyrl4744 <= cap(yyv4744) {
					yyv4744 = yyv4744[:yyrl4744]
				} else {
					yyv4744 = make([]ReplicationControllerCondition, yyrl4744)
				}
			} else {
				yyv4744 = make([]ReplicationControllerCondition, yyrl4744)
			}
			yyc4744 = true
			yyrr4744 = len(yyv4744)
			if yyrg4744 {
				copy(yyv4744, yyv24744)
			}
		} else if yyl4744 != len(yyv4744) {
			yyv4744 = yyv4744[:yyl4744]
			yyc4744 = true
		}
		yyj4744 := 0
		for ; yyj4744 < yyrr4744; yyj4744++ {
			yyh4744.ElemContainerState(yyj4744)
			if r.TryDecodeAsNil() {
				yyv4744[yyj4744] = ReplicationControllerCondition{}
			} else {
				yyv4745 := &yyv4744[yyj4744]
				yyv4745.CodecDecodeSelf(d)
			}

		}
		if yyrt4744 {
			for ; yyj4744 < yyl4744; yyj4744++ {
				yyv4744 = append(yyv4744, ReplicationControllerCondition{})
				yyh4744.ElemContainerState(yyj4744)
				if r.TryDecodeAsNil() {
					yyv4744[yyj4744] = ReplicationControllerCondition{}
				} else {
					yyv4746 := &yyv4744[yyj4744]
					yyv4746.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4744 := 0
		for ; !r.CheckBreak(); yyj4744++ {

			if yyj4744 >= len(yyv4744) {
				yyv4744 = append(yyv4744, ReplicationControllerCondition{}) // var yyz4744 ReplicationControllerCondition
				yyc4744 = true
			}
			yyh4744.ElemContainerState(yyj4744)
			if yyj4744 < len(yyv4744) {
				if r.TryDecodeAsNil() {
					yyv4744[yyj4744] = ReplicationControllerCondition{}
				} else {
					yyv4747 := &yyv4744[yyj4744]
					yyv4747.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4744 < len(yyv4744) {
			yyv4744 = yyv4744[:yyj4744]
			yyc4744 = true
		} else if yyj4744 == 0 && yyv4744 == nil {
			yyv4744 = []ReplicationControllerCondition{}
			yyc4744 = true
		}
	}
	yyh4744.End()
	if yyc4744 {
		*v = yyv4744
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4748 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4749 := &yyv4748
		yy4749.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4750 := *v
	yyh4750, yyl4750 := z.DecSliceHelperStart()
	var yyc4750 bool
	if yyl4750 == 0 {
		if yyv4750 == nil {
			yyv4750 = []ReplicationController{}
			yyc4750 = true
		} else if len(yyv4750) != 0 {
			yyv4750 = yyv4750[:0]
			yyc4750 = true
		}
	} else if yyl4750 > 0 {
		var yyrr4750, yyrl4750 int
		var yyrt4750 bool
		if yyl4750 > cap(yyv4750) {

			yyrg4750 := len(yyv4750) > 0
			yyv24750 := yyv4750
			yyrl4750, yyrt4750 = z.DecInferLen(yyl4750, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt4750 {
				if yyrl4750 <= cap(yyv4750) {
					yyv4750 = yyv4750[:yyrl4750]
				} else {
					yyv4750 = make([]ReplicationController, yyrl4750)
				}
			} else {
				yyv4750 = make([]ReplicationController, yyrl4750)
			}
			yyc4750 = true
			yyrr4750 = len(yyv4750)
			if yyrg4750 {
				copy(yyv4750, yyv24750)
			}
		} else if yyl4750 != len(yyv4750) {
			yyv4750 = yyv4750[:yyl4750]
			yyc4750 = true
		}
		yyj4750 := 0
		for ; yyj4750 < yyrr4750; yyj4750++ {
			yyh4750.ElemContainerState(yyj4750)
			if r.TryDecodeAsNil() {
				yyv4750[yyj4750] = ReplicationController{}
			} else {
				yyv4751 := &yyv4750[yyj4750]
				yyv4751.CodecDecodeSelf(d)
			}

		}
		if yyrt4750 {
			for ; yyj4750 < yyl4750; yyj4750++ {
				yyv4750 = append(yyv4750, ReplicationController{})
				yyh4750.ElemContainerState(yyj4750)
				if r.TryDecodeAsNil() {
					yyv4750[yyj4750] = ReplicationController{}
				} else {
					yyv4752 := &yyv4750[yyj4750]
					yyv4752.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4750 := 0
		for ; !r.CheckBreak(); yyj4750++ {

			if yyj4750 >= len(yyv4750) {
				yyv4750 = append(yyv4750, ReplicationController{}) // var yyz4750 ReplicationController
				yyc4750 = true
			}
			yyh4750.ElemContainerState(yyj4750)
			if yyj4750 < len(yyv4750) {
				if r.TryDecodeAsNil() {
					yyv4750[yyj4750] = ReplicationController{}
				} else {
					yyv4753 := &yyv4750[yyj4750]
					yyv4753.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4750 < len(yyv4750) {
			yyv4750 = yyv4750[:yyj4750]
			yyc4750 = true
		} else if yyj4750 == 0 && yyv4750 == nil {
			yyv4750 = []ReplicationController{}
			yyc4750 = true
		}
	}
	yyh4750.End()
	if yyc4750 {
		*v = yyv4750
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4754 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4755 := &yyv4754
		yy4755.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4756 := *v
	yyh4756, yyl4756 := z.DecSliceHelperStart()
	var yyc4756 bool
	if yyl4756 == 0 {
		if yyv4756 == nil {
			yyv4756 = []LoadBalancerIngress{}
			yyc4756 = true
		} else if len(yyv4756) != 0 {
			yyv4756 = yyv4756[:0]
			yyc4756 = true
		}
	} else if yyl4756 > 0 {
		var yyrr4756, yyrl4756 int
		var yyrt4756 bool
		if yyl4756 > cap(yyv4756) {

			yyrg4756 := len(yyv4756) > 0
			yyv24756 := yyv4756
			yyrl4756, yyrt4756 = z.DecInferLen(yyl4756, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4756 {
				if yyrl4756 <= cap(yyv4756) {
					yyv4756 = yyv4756[:yyrl4756]
				} else {
					yyv4756 = make([]LoadBalancerIngress, yyrl4756)
				}
			} else {
				yyv4756 = make([]LoadBalancerIngress, yyrl4756)
			}
			yyc4756 = true
			yyrr4756 = len(yyv4756)
			if yyrg4756 {
				copy(yyv4756, yyv24756)
			}
		} else if yyl4756 != len(yyv4756) {
			yyv4756 = yyv4756[:yyl4756]
			yyc4756 = true
		}
		yyj4756 := 0
		for ; yyj4756 < yyrr4756; yyj4756++ {
			yyh4756.ElemContainerState(yyj4756)
			if r.TryDecodeAsNil() {
				yyv4756[yyj4756] = LoadBalancerIngress{}
			} else {
				yyv4757 := &yyv4756[yyj4756]
				yyv4757.CodecDecodeSelf(d)
			}

		}
		if yyrt4756 {
			for ; yyj4756 < yyl4756; yyj4756++ {
				yyv4756 = append(yyv4756, LoadBalancerIngress{})
				yyh4756.ElemContainerState(yyj4756)
				if r.TryDecodeAsNil() {
					yyv4756[yyj4756] = LoadBalancerIngress{}
				} else {
					yyv4758 := &yyv4756[yyj4756]
					yyv4758.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4756 := 0
		for ; !r.CheckBreak(); yyj4756++ {

			if yyj4756 >= len(yyv4756) {
				yyv4756 = append(yyv4756, LoadBalancerIngress{}) // var yyz4756 LoadBalancerIngress
				yyc4756 = true
			}
			yyh4756.ElemContainerState(yyj4756)
			if yyj4756 < len(yyv4756) {
				if r.TryDecodeAsNil() {
					yyv4756[yyj4756] = LoadBalancerIngress{}
				} else {
					yyv4759 := &yyv4756[yyj4756]
					yyv4759.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4756 < len(yyv4756) {
			yyv4756 = yyv4756[:yyj4756]
			yyc4756 = true
		} else if yyj4756 == 0 && yyv4756 == nil {
			yyv4756 = []LoadBalancerIngress{}
			yyc4756 = true
		}
	}
	yyh4756.End()
	if yyc4756 {
		*v = yyv4756
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4760 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4761 := &yyv4760
		yy4761.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4762 := *v
	yyh4762, yyl4762 := z.DecSliceHelperStart()
	var yyc4762 bool
	if yyl4762 == 0 {
		if yyv4762 == nil {
			yyv4762 = []ServicePort{}
			yyc4762 = true
		} else if len(yyv4762) != 0 {
			yyv4762 = yyv4762[:0]
			yyc4762 = true
		}
	} else if yyl4762 > 0 {
		var yyrr4762, yyrl4762 int
		var yyrt4762 bool
		if yyl4762 > cap(yyv4762) {

			yyrg4762 := len(yyv4762) > 0
			yyv24762 := yyv4762
			yyrl4762, yyrt4762 = z.DecInferLen(yyl4762, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4762 {
				if yyrl4762 <= cap(yyv4762) {
					yyv4762 = yyv4762[:yyrl4762]
				} else {
					yyv4762 = make([]ServicePort, yyrl4762)
				}
			} else {
				yyv4762 = make([]ServicePort, yyrl4762)
			}
			yyc4762 = true
			yyrr4762 = len(yyv4762)
			if yyrg4762 {
				copy(yyv4762, yyv24762)
			}
		} else if yyl4762 != len(yyv4762) {
			yyv4762 = yyv4762[:yyl4762]
			yyc4762 = true
		}
		yyj4762 := 0
		for ; yyj4762 < yyrr4762; yyj4762++ {
			yyh4762.ElemContainerState(yyj4762)
			if r.TryDecodeAsNil() {
				yyv4762[yyj4762] = ServicePort{}
			} else {
				yyv4763 := &yyv4762[yyj4762]
				yyv4763.CodecDecodeSelf(d)
			}

		}
		if yyrt4762 {
			for ; yyj4762 < yyl4762; yyj4762++ {
				yyv4762 = append(yyv4762, ServicePort{})
				yyh4762.ElemContainerState(yyj4762)
				if r.TryDecodeAsNil() {
					yyv4762[yyj4762] = ServicePort{}
				} else {
					yyv4764 := &yyv4762[yyj4762]
					yyv4764.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4762 := 0
		for ; !r.CheckBreak(); yyj4762++ {

			if yyj4762 >= len(yyv4762) {
				yyv4762 = append(yyv4762, ServicePort{}) // var yyz4762 ServicePort
				yyc4762 = true
			}
			yyh4762.ElemContainerState(yyj4762)
			if yyj4762 < len(yyv4762) {
				if r.TryDecodeAsNil() {
					yyv4762[yyj4762] = ServicePort{}
				} else {
					yyv4765 := &yyv4762[yyj4762]
					yyv4765.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4762 < len(yyv4762) {
			yyv4762 = yyv4762[:yyj4762]
			yyc4762 = true
		} else if yyj4762 == 0 && yyv4762 == nil {
			yyv4762 = []ServicePort{}
			yyc4762 = true
		}
	}
	yyh4762.End()
	if yyc4762 {
		*v = yyv4762
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4766 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4767 := &yyv4766
		yy4767.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4768 := *v
	yyh4768, yyl4768 := z.DecSliceHelperStart()
	var yyc4768 bool
	if yyl4768 == 0 {
		if yyv4768 == nil {
			yyv4768 = []Service{}
			yyc4768 = true
		} else if len(yyv4768) != 0 {
			yyv4768 = yyv4768[:0]
			yyc4768 = true
		}
	} else if yyl4768 > 0 {
		var yyrr4768, yyrl4768 int
		var yyrt4768 bool
		if yyl4768 > cap(yyv4768) {

			yyrg4768 := len(yyv4768) > 0
			yyv24768 := yyv4768
			yyrl4768, yyrt4768 = z.DecInferLen(yyl4768, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt4768 {
				if yyrl4768 <= cap(yyv4768) {
					yyv4768 = yyv4768[:yyrl4768]
				} else {
					yyv4768 = make([]Service, yyrl4768)
				}
			} else {
				yyv4768 = make([]Service, yyrl4768)
			}
			yyc4768 = true
			yyrr4768 = len(yyv4768)
			if yyrg4768 {
				copy(yyv4768, yyv24768)
			}
		} else if yyl4768 != len(yyv4768) {
			yyv4768 = yyv4768[:yyl4768]
			yyc4768 = true
		}
		yyj4768 := 0
		for ; yyj4768 < yyrr4768; yyj4768++ {
			yyh4768.ElemContainerState(yyj4768)
			if r.TryDecodeAsNil() {
				yyv4768[yyj4768] = Service{}
			} else {
				yyv4769 := &yyv4768[yyj4768]
				yyv4769.CodecDecodeSelf(d)
			}

		}
		if yyrt4768 {
			for ; yyj4768 < yyl4768; yyj4768++ {
				yyv4768 = append(yyv4768, Service{})
				yyh4768.ElemContainerState(yyj4768)
				if r.TryDecodeAsNil() {
					yyv4768[yyj4768] = Service{}
				} else {
					yyv4770 := &yyv4768[yyj4768]
					yyv4770.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4768 := 0
		for ; !r.CheckBreak(); yyj4768++ {

			if yyj4768 >= len(yyv4768) {
				yyv4768 = append(yyv4768, Service{}) // var yyz4768 Service
				yyc4768 = true
			}
			yyh4768.ElemContainerState(yyj4768)
			if yyj4768 < len(yyv4768) {
				if r.TryDecodeAsNil() {
					yyv4768[yyj4768] = Service{}
				} else {
					yyv4771 := &yyv4768[yyj4768]
					yyv4771.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4768 < len(yyv4768) {
			yyv4768 = yyv4768[:yyj4768]
			yyc4768 = true
		} else if yyj4768 == 0 && yyv4768 == nil {
			yyv4768 = []Service{}
			yyc4768 = true
		}
	}
	yyh4768.End()
	if yyc4768 {
		*v = yyv4768
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4772 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4773 := &yyv4772
		yy4773.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4774 := *v
	yyh4774, yyl4774 := z.DecSliceHelperStart()
	var yyc4774 bool
	if yyl4774 == 0 {
		if yyv4774 == nil {
			yyv4774 = []ObjectReference{}
			yyc4774 = true
		} else if len(yyv4774) != 0 {
			yyv4774 = yyv4774[:0]
			yyc4774 = true
		}
	} else if yyl4774 > 0 {
		var yyrr4774, yyrl4774 int
		var yyrt4774 bool
		if yyl4774 > cap(yyv4774) {

			yyrg4774 := len(yyv4774) > 0
			yyv24774 := yyv4774
			yyrl4774, yyrt4774 = z.DecInferLen(yyl4774, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4774 {
				if yyrl4774 <= cap(yyv4774) {
					yyv4774 = yyv4774[:yyrl4774]
				} else {
					yyv4774 = make([]ObjectReference, yyrl4774)
				}
			} else {
				yyv4774 = make([]ObjectReference, yyrl4774)
			}
			yyc4774 = true
			yyrr4774 = len(yyv4774)
			if yyrg4774 {
				copy(yyv4774, yyv24774)
			}
		} else if yyl4774 != len(yyv4774) {
			yyv4774 = yyv4774[:yyl4774]
			yyc4774 = true
		}
		yyj4774 := 0
		for ; yyj4774 < yyrr4774; yyj4774++ {
			yyh4774.ElemContainerState(yyj4774)
			if r.TryDecodeAsNil() {
				yyv4774[yyj4774] = ObjectReference{}
			} else {
				yyv4775 := &yyv4774[yyj4774]
				yyv4775.CodecDecodeSelf(d)
			}

		}
		if yyrt4774 {
			for ; yyj4774 < yyl4774; yyj4774++ {
				yyv4774 = append(yyv4774, ObjectReference{})
				yyh4774.ElemContainerState(yyj4774)
				if r.TryDecodeAsNil() {
					yyv4774[yyj4774] = ObjectReference{}
				} else {
					yyv4776 := &yyv4774[yyj4774]
					yyv4776.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4774 := 0
		for ; !r.CheckBreak(); yyj4774++ {

			if yyj4774 >= len(yyv4774) {
				yyv4774 = append(yyv4774, ObjectReference{}) // var yyz4774 ObjectReference
				yyc4774 = true
			}
			yyh4774.ElemContainerState(yyj4774)
			if yyj4774 < len(yyv4774) {
				if r.TryDecodeAsNil() {
					yyv4774[yyj4774] = ObjectReference{}
				} else {
					yyv4777 := &yyv4774[yyj4774]
					yyv4777.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4774 < len(yyv4774) {
			yyv4774 = yyv4774[:yyj4774]
			yyc4774 = true
		} else if yyj4774 == 0 && yyv4774 == nil {
			yyv4774 = []ObjectReference{}
			yyc4774 = true
		}
	}
	yyh4774.End()
	if yyc4774 {
		*v = yyv4774
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4778 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4779 := &yyv4778
		yy4779.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4780 := *v
	yyh4780, yyl4780 := z.DecSliceHelperStart()
	var yyc4780 bool
	if yyl4780 == 0 {
		if yyv4780 == nil {
			yyv4780 = []ServiceAccount{}
			yyc4780 = true
		} else if len(yyv4780) != 0 {
			yyv4780 = yyv4780[:0]
			yyc4780 = true
		}
	} else if yyl4780 > 0 {
		var yyrr4780, yyrl4780 int
		var yyrt4780 bool
		if yyl4780 > cap(yyv4780) {

			yyrg4780 := len(yyv4780) > 0
			yyv24780 := yyv4780
			yyrl4780, yyrt4780 = z.DecInferLen(yyl4780, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4780 {
				if yyrl4780 <= cap(yyv4780) {
					yyv4780 = yyv4780[:yyrl4780]
				} else {
					yyv4780 = make([]ServiceAccount, yyrl4780)
				}
			} else {
				yyv4780 = make([]ServiceAccount, yyrl4780)
			}
			yyc4780 = true
			yyrr4780 = len(yyv4780)
			if yyrg4780 {
				copy(yyv4780, yyv24780)
			}
		} else if yyl4780 != len(yyv4780) {
			yyv4780 = yyv4780[:yyl4780]
			yyc4780 = true
		}
		yyj4780 := 0
		for ; yyj4780 < yyrr4780; yyj4780++ {
			yyh4780.ElemContainerState(yyj4780)
			if r.TryDecodeAsNil() {
				yyv4780[yyj4780] = ServiceAccount{}
			} else {
				yyv4781 := &yyv4780[yyj4780]
				yyv4781.CodecDecodeSelf(d)
			}

		}
		if yyrt4780 {
			for ; yyj4780 < yyl4780; yyj4780++ {
				yyv4780 = append(yyv4780, ServiceAccount{})
				yyh4780.ElemContainerState(yyj4780)
				if r.TryDecodeAsNil() {
					yyv4780[yyj4780] = ServiceAccount{}
				} else {
					yyv4782 := &yyv4780[yyj4780]
					yyv4782.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4780 := 0
		for ; !r.CheckBreak(); yyj4780++ {

			if yyj4780 >= len(yyv4780) {
				yyv4780 = append(yyv4780, ServiceAccount{}) // var yyz4780 ServiceAccount
				yyc4780 = true
			}
			yyh4780.ElemContainerState(yyj4780)
			if yyj4780 < len(yyv4780) {
				if r.TryDecodeAsNil() {
					yyv4780[yyj4780] = ServiceAccount{}
				} else {
					yyv4783 := &yyv4780[yyj4780]
					yyv4783.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4780 < len(yyv4780) {
			yyv4780 = yyv4780[:yyj4780]
			yyc4780 = true
		} else if yyj4780 == 0 && yyv4780 == nil {
			yyv4780 = []ServiceAccount{}
			yyc4780 = true
		}
	}
	yyh4780.End()
	if yyc4780 {
		*v = yyv4780
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4784 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4785 := &yyv4784
		yy4785.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4786 := *v
	yyh4786, yyl4786 := z.DecSliceHelperStart()
	var yyc4786 bool
	if yyl4786 == 0 {
		if yyv4786 == nil {
			yyv4786 = []EndpointSubset{}
			yyc4786 = true
		} else if len(yyv4786) != 0 {
			yyv4786 = yyv4786[:0]
			yyc4786 = true
		}
	} else if yyl4786 > 0 {
		var yyrr4786, yyrl4786 int
		var yyrt4786 bool
		if yyl4786 > cap(yyv4786) {

			yyrg4786 := len(yyv4786) > 0
			yyv24786 := yyv4786
			yyrl4786, yyrt4786 = z.DecInferLen(yyl4786, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4786 {
				if yyrl4786 <= cap(yyv4786) {
					yyv4786 = yyv4786[:yyrl4786]
				} else {
					yyv4786 = make([]EndpointSubset, yyrl4786)
				}
			} else {
				yyv4786 = make([]EndpointSubset, yyrl4786)
			}
			yyc4786 = true
			yyrr4786 = len(yyv4786)
			if yyrg4786 {
				copy(yyv4786, yyv24786)
			}
		} else if yyl4786 != len(yyv4786) {
			yyv4786 = yyv4786[:yyl4786]
			yyc4786 = true
		}
		yyj4786 := 0
		for ; yyj4786 < yyrr4786; yyj4786++ {
			yyh4786.ElemContainerState(yyj4786)
			if r.TryDecodeAsNil() {
				yyv4786[yyj4786] = EndpointSubset{}
			} else {
				yyv4787 := &yyv4786[yyj4786]
				yyv4787.CodecDecodeSelf(d)
			}

		}
		if yyrt4786 {
			for ; yyj4786 < yyl4786; yyj4786++ {
				yyv4786 = append(yyv4786, EndpointSubset{})
				yyh4786.ElemContainerState(yyj4786)
				if r.TryDecodeAsNil() {
					yyv4786[yyj4786] = EndpointSubset{}
				} else {
					yyv4788 := &yyv4786[yyj4786]
					yyv4788.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4786 := 0
		for ; !r.CheckBreak(); yyj4786++ {

			if yyj4786 >= len(yyv4786) {
				yyv4786 = append(yyv4786, EndpointSubset{}) // var yyz4786 EndpointSubset
				yyc4786 = true
			}
			yyh4786.ElemContainerState(yyj4786)
			if yyj4786 < len(yyv4786) {
				if r.TryDecodeAsNil() {
					yyv4786[yyj4786] = EndpointSubset{}
				} else {
					yyv4789 := &yyv4786[yyj4786]
					yyv4789.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4786 < len(yyv4786) {
			yyv4786 = yyv4786[:yyj4786]
			yyc4786 = true
		} else if yyj4786 == 0 && yyv4786 == nil {
			yyv4786 = []EndpointSubset{}
			yyc4786 = true
		}
	}
	yyh4786.End()
	if yyc4786 {
		*v = yyv4786
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4790 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4791 := &yyv4790
		yy4791.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4792 := *v
	yyh4792, yyl4792 := z.DecSliceHelperStart()
	var yyc4792 bool
	if yyl4792 == 0 {
		if yyv4792 == nil {
			yyv4792 = []EndpointAddress{}
			yyc4792 = true
		} else if len(yyv4792) != 0 {
			yyv4792 = yyv4792[:0]
			yyc4792 = true
		}
	} else if yyl4792 > 0 {
		var yyrr4792, yyrl4792 int
		var yyrt4792 bool
		if yyl4792 > cap(yyv4792) {

			yyrg4792 := len(yyv4792) > 0
			yyv24792 := yyv4792
			yyrl4792, yyrt4792 = z.DecInferLen(yyl4792, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4792 {
				if yyrl4792 <= cap(yyv4792) {
					yyv4792 = yyv4792[:yyrl4792]
				} else {
					yyv4792 = make([]EndpointAddress, yyrl4792)
				}
			} else {
				yyv4792 = make([]EndpointAddress, yyrl4792)
			}
			yyc4792 = true
			yyrr4792 = len(yyv4792)
			if yyrg4792 {
				copy(yyv4792, yyv24792)
			}
		} else if yyl4792 != len(yyv4792) {
			yyv4792 = yyv4792[:yyl4792]
			yyc4792 = true
		}
		yyj4792 := 0
		for ; yyj4792 < yyrr4792; yyj4792++ {
			yyh4792.ElemContainerState(yyj4792)
			if r.TryDecodeAsNil() {
				yyv4792[yyj4792] = EndpointAddress{}
			} else {
				yyv4793 := &yyv4792[yyj4792]
				yyv4793.CodecDecodeSelf(d)
			}

		}
		if yyrt4792 {
			for ; yyj4792 < yyl4792; yyj4792++ {
				yyv4792 = append(yyv4792, EndpointAddress{})
				yyh4792.ElemContainerState(yyj4792)
				if r.TryDecodeAsNil() {
					yyv4792[yyj4792] = EndpointAddress{}
				} else {
					yyv4794 := &yyv4792[yyj4792]
					yyv4794.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4792 := 0
		for ; !r.CheckBreak(); yyj4792++ {

			if yyj4792 >= len(yyv4792) {
				yyv4792 = append(yyv4792, EndpointAddress{}) // var yyz4792 EndpointAddress
				yyc4792 = true
			}
			yyh4792.ElemContainerState(yyj4792)
			if yyj4792 < len(yyv4792) {
				if r.TryDecodeAsNil() {
					yyv4792[yyj4792] = EndpointAddress{}
				} else {
					yyv4795 := &yyv4792[yyj4792]
					yyv4795.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4792 < len(yyv4792) {
			yyv4792 = yyv4792[:yyj4792]
			yyc4792 = true
		} else if yyj4792 == 0 && yyv4792 == nil {
			yyv4792 = []EndpointAddress{}
			yyc4792 = true
		}
	}
	yyh4792.End()
	if yyc4792 {
		*v = yyv4792
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4796 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4797 := &yyv4796
		yy4797.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4798 := *v
	yyh4798, yyl4798 := z.DecSliceHelperStart()
	var yyc4798 bool
	if yyl4798 == 0 {
		if yyv4798 == nil {
			yyv4798 = []EndpointPort{}
			yyc4798 = true
		} else if len(yyv4798) != 0 {
			yyv4798 = yyv4798[:0]
			yyc4798 = true
		}
	} else if yyl4798 > 0 {
		var yyrr4798, yyrl4798 int
		var yyrt4798 bool
		if yyl4798 > cap(yyv4798) {

			yyrg4798 := len(yyv4798) > 0
			yyv24798 := yyv4798
			yyrl4798, yyrt4798 = z.DecInferLen(yyl4798, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4798 {
				if yyrl4798 <= cap(yyv4798) {
					yyv4798 = yyv4798[:yyrl4798]
				} else {
					yyv4798 = make([]EndpointPort, yyrl4798)
				}
			} else {
				yyv4798 = make([]EndpointPort, yyrl4798)
			}
			yyc4798 = true
			yyrr4798 = len(yyv4798)
			if yyrg4798 {
				copy(yyv4798, yyv24798)
			}
		} else if yyl4798 != len(yyv4798) {
			yyv4798 = yyv4798[:yyl4798]
			yyc4798 = true
		}
		yyj4798 := 0
		for ; yyj4798 < yyrr4798; yyj4798++ {
			yyh4798.ElemContainerState(yyj4798)
			if r.TryDecodeAsNil() {
				yyv4798[yyj4798] = EndpointPort{}
			} else {
				yyv4799 := &yyv4798[yyj4798]
				yyv4799.CodecDecodeSelf(d)
			}

		}
		if yyrt4798 {
			for ; yyj4798 < yyl4798; yyj4798++ {
				yyv4798 = append(yyv4798, EndpointPort{})
				yyh4798.ElemContainerState(yyj4798)
				if r.TryDecodeAsNil() {
					yyv4798[yyj4798] = EndpointPort{}
				} else {
					yyv4800 := &yyv4798[yyj4798]
					yyv4800.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4798 := 0
		for ; !r.CheckBreak(); yyj4798++ {

			if yyj4798 >= len(yyv4798) {
				yyv4798 = append(yyv4798, EndpointPort{}) // var yyz4798 EndpointPort
				yyc4798 = true
			}
			yyh4798.ElemContainerState(yyj4798)
			if yyj4798 < len(yyv4798) {
				if r.TryDecodeAsNil() {
					yyv4798[yyj4798] = EndpointPort{}
				} else {
					yyv4801 := &yyv4798[yyj4798]
					yyv4801.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4798 < len(yyv4798) {
			yyv4798 = yyv4798[:yyj4798]
			yyc4798 = true
		} else if yyj4798 == 0 && yyv4798 == nil {
			yyv4798 = []EndpointPort{}
			yyc4798 = true
		}
	}
	yyh4798.End()
	if yyc4798 {
		*v = yyv4798
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4802 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4803 := &yyv4802
		yy4803.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4804 := *v
	yyh4804, yyl4804 := z.DecSliceHelperStart()
	var yyc4804 bool
	if yyl4804 == 0 {
		if yyv4804 == nil {
			yyv4804 = []Endpoints{}
			yyc4804 = true
		} else if len(yyv4804) != 0 {
			yyv4804 = yyv4804[:0]
			yyc4804 = true
		}
	} else if yyl4804 > 0 {
		var yyrr4804, yyrl4804 int
		var yyrt4804 bool
		if yyl4804 > cap(yyv4804) {

			yyrg4804 := len(yyv4804) > 0
			yyv24804 := yyv4804
			yyrl4804, yyrt4804 = z.DecInferLen(yyl4804, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4804 {
				if yyrl4804 <= cap(yyv4804) {
					yyv4804 = yyv4804[:yyrl4804]
				} else {
					yyv4804 = make([]Endpoints, yyrl4804)
				}
			} else {
				yyv4804 = make([]Endpoints, yyrl4804)
			}
			yyc4804 = true
			yyrr4804 = len(yyv4804)
			if yyrg4804 {
				copy(yyv4804, yyv24804)
			}
		} else if yyl4804 != len(yyv4804) {
			yyv4804 = yyv4804[:yyl4804]
			yyc4804 = true
		}
		yyj4804 := 0
		for ; yyj4804 < yyrr4804; yyj4804++ {
			yyh4804.ElemContainerState(yyj4804)
			if r.TryDecodeAsNil() {
				yyv4804[yyj4804] = Endpoints{}
			} else {
				yyv4805 := &yyv4804[yyj4804]
				yyv4805.CodecDecodeSelf(d)
			}

		}
		if yyrt4804 {
			for ; yyj4804 < yyl4804; yyj4804++ {
				yyv4804 = append(yyv4804, Endpoints{})
				yyh4804.ElemContainerState(yyj4804)
				if r.TryDecodeAsNil() {
					yyv4804[yyj4804] = Endpoints{}
				} else {
					yyv4806 := &yyv4804[yyj4804]
					yyv4806.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4804 := 0
		for ; !r.CheckBreak(); yyj4804++ {

			if yyj4804 >= len(yyv4804) {
				yyv4804 = append(yyv4804, Endpoints{}) // var yyz4804 Endpoints
				yyc4804 = true
			}
			yyh4804.ElemContainerState(yyj4804)
			if yyj4804 < len(yyv4804) {
				if r.TryDecodeAsNil() {
					yyv4804[yyj4804] = Endpoints{}
				} else {
					yyv4807 := &yyv4804[yyj4804]
					yyv4807.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4804 < len(yyv4804) {
			yyv4804 = yyv4804[:yyj4804]
			yyc4804 = true
		} else if yyj4804 == 0 && yyv4804 == nil {
			yyv4804 = []Endpoints{}
			yyc4804 = true
		}
	}
	yyh4804.End()
	if yyc4804 {
		*v = yyv4804
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4808 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4809 := &yyv4808
		yy4809.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4810 := *v
	yyh4810, yyl4810 := z.DecSliceHelperStart()
	var yyc4810 bool
	if yyl4810 == 0 {
		if yyv4810 == nil {
			yyv4810 = []NodeCondition{}
			yyc4810 = true
		} else if len(yyv4810) != 0 {
			yyv4810 = yyv4810[:0]
			yyc4810 = true
		}
	} else if yyl4810 > 0 {
		var yyrr4810, yyrl4810 int
		var yyrt4810 bool
		if yyl4810 > cap(yyv4810) {

			yyrg4810 := len(yyv4810) > 0
			yyv24810 := yyv4810
			yyrl4810, yyrt4810 = z.DecInferLen(yyl4810, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4810 {
				if yyrl4810 <= cap(yyv4810) {
					yyv4810 = yyv4810[:yyrl4810]
				} else {
					yyv4810 = make([]NodeCondition, yyrl4810)
				}
			} else {
				yyv4810 = make([]NodeCondition, yyrl4810)
			}
			yyc4810 = true
			yyrr4810 = len(yyv4810)
			if yyrg4810 {
				copy(yyv4810, yyv24810)
			}
		} else if yyl4810 != len(yyv4810) {
			yyv4810 = yyv4810[:yyl4810]
			yyc4810 = true
		}
		yyj4810 := 0
		for ; yyj4810 < yyrr4810; yyj4810++ {
			yyh4810.ElemContainerState(yyj4810)
			if r.TryDecodeAsNil() {
				yyv4810[yyj4810] = NodeCondition{}
			} else {
				yyv4811 := &yyv4810[yyj4810]
				yyv4811.CodecDecodeSelf(d)
			}

		}
		if yyrt4810 {
			for ; yyj4810 < yyl4810; yyj4810++ {
				yyv4810 = append(yyv4810, NodeCondition{})
				yyh4810.ElemContainerState(yyj4810)
				if r.TryDecodeAsNil() {
					yyv4810[yyj4810] = NodeCondition{}
				} else {
					yyv4812 := &yyv4810[yyj4810]
					yyv4812.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4810 := 0
		for ; !r.CheckBreak(); yyj4810++ {

			if yyj4810 >= len(yyv4810) {
				yyv4810 = append(yyv4810, NodeCondition{}) // var yyz4810 NodeCondition
				yyc4810 = true
			}
			yyh4810.ElemContainerState(yyj4810)
			if yyj4810 < len(yyv4810) {
				if r.TryDecodeAsNil() {
					yyv4810[yyj4810] = NodeCondition{}
				} else {
					yyv4813 := &yyv4810[yyj4810]
					yyv4813.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4810 < len(yyv4810) {
			yyv4810 = yyv4810[:yyj4810]
			yyc4810 = true
		} else if yyj4810 == 0 && yyv4810 == nil {
			yyv4810 = []NodeCondition{}
			yyc4810 = true
		}
	}
	yyh4810.End()
	if yyc4810 {
		*v = yyv4810
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4814 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4815 := &yyv4814
		yy4815.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4816 := *v
	yyh4816, yyl4816 := z.DecSliceHelperStart()
	var yyc4816 bool
	if yyl4816 == 0 {
		if yyv4816 == nil {
			yyv4816 = []NodeAddress{}
			yyc4816 = true
		} else if len(yyv4816) != 0 {
			yyv4816 = yyv4816[:0]
			yyc4816 = true
		}
	} else if yyl4816 > 0 {
		var yyrr4816, yyrl4816 int
		var yyrt4816 bool
		if yyl4816 > cap(yyv4816) {

			yyrg4816 := len(yyv4816) > 0
			yyv24816 := yyv4816
			yyrl4816, yyrt4816 = z.DecInferLen(yyl4816, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4816 {
				if yyrl4816 <= cap(yyv4816) {
					yyv4816 = yyv4816[:yyrl4816]
				} else {
					yyv4816 = make([]NodeAddress, yyrl4816)
				}
			} else {
				yyv4816 = make([]NodeAddress, yyrl4816)
			}
			yyc4816 = true
			yyrr4816 = len(yyv4816)
			if yyrg4816 {
				copy(yyv4816, yyv24816)
			}
		} else if yyl4816 != len(yyv4816) {
			yyv4816 = yyv4816[:yyl4816]
			yyc4816 = true
		}
		yyj4816 := 0
		for ; yyj4816 < yyrr4816; yyj4816++ {
			yyh4816.ElemContainerState(yyj4816)
			if r.TryDecodeAsNil() {
				yyv4816[yyj4816] = NodeAddress{}
			} else {
				yyv4817 := &yyv4816[yyj4816]
				yyv4817.CodecDecodeSelf(d)
			}

		}
		if yyrt4816 {
			for ; yyj4816 < yyl4816; yyj4816++ {
				yyv4816 = append(yyv4816, NodeAddress{})
				yyh4816.ElemContainerState(yyj4816)
				if r.TryDecodeAsNil() {
					yyv4816[yyj4816] = NodeAddress{}
				} else {
					yyv4818 := &yyv4816[yyj4816]
					yyv4818.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4816 := 0
		for ; !r.CheckBreak(); yyj4816++ {

			if yyj4816 >= len(yyv4816) {
				yyv4816 = append(yyv4816, NodeAddress{}) // var yyz4816 NodeAddress
				yyc4816 = true
			}
			yyh4816.ElemContainerState(yyj4816)
			if yyj4816 < len(yyv4816) {
				if r.TryDecodeAsNil() {
					yyv4816[yyj4816] = NodeAddress{}
				} else {
					yyv4819 := &yyv4816[yyj4816]
					yyv4819.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4816 < len(yyv4816) {
			yyv4816 = yyv4816[:yyj4816]
			yyc4816 = true
		} else if yyj4816 == 0 && yyv4816 == nil {
			yyv4816 = []NodeAddress{}
			yyc4816 = true
		}
	}
	yyh4816.End()
	if yyc4816 {
		*v = yyv4816
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4820 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4821 := &yyv4820
		yy4821.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4822 := *v
	yyh4822, yyl4822 := z.DecSliceHelperStart()
	var yyc4822 bool
	if yyl4822 == 0 {
		if yyv4822 == nil {
			yyv4822 = []ContainerImage{}
			yyc4822 = true
		} else if len(yyv4822) != 0 {
			yyv4822 = yyv4822[:0]
			yyc4822 = true
		}
	} else if yyl4822 > 0 {
		var yyrr4822, yyrl4822 int
		var yyrt4822 bool
		if yyl4822 > cap(yyv4822) {

			yyrg4822 := len(yyv4822) > 0
			yyv24822 := yyv4822
			yyrl4822, yyrt4822 = z.DecInferLen(yyl4822, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4822 {
				if yyrl4822 <= cap(yyv4822) {
					yyv4822 = yyv4822[:yyrl4822]
				} else {
					yyv4822 = make([]ContainerImage, yyrl4822)
				}
			} else {
				yyv4822 = make([]ContainerImage, yyrl4822)
			}
			yyc4822 = true
			yyrr4822 = len(yyv4822)
			if yyrg4822 {
				copy(yyv4822, yyv24822)
			}
		} else if yyl4822 != len(yyv4822) {
			yyv4822 = yyv4822[:yyl4822]
			yyc4822 = true
		}
		yyj4822 := 0
		for ; yyj4822 < yyrr4822; yyj4822++ {
			yyh4822.ElemContainerState(yyj4822)
			if r.TryDecodeAsNil() {
				yyv4822[yyj4822] = ContainerImage{}
			} else {
				yyv4823 := &yyv4822[yyj4822]
				yyv4823.CodecDecodeSelf(d)
			}

		}
		if yyrt4822 {
			for ; yyj4822 < yyl4822; yyj4822++ {
				yyv4822 = append(yyv4822, ContainerImage{})
				yyh4822.ElemContainerState(yyj4822)
				if r.TryDecodeAsNil() {
					yyv4822[yyj4822] = ContainerImage{}
				} else {
					yyv4824 := &yyv4822[yyj4822]
					yyv4824.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4822 := 0
		for ; !r.CheckBreak(); yyj4822++ {

			if yyj4822 >= len(yyv4822) {
				yyv4822 = append(yyv4822, ContainerImage{}) // var yyz4822 ContainerImage
				yyc4822 = true
			}
			yyh4822.ElemContainerState(yyj4822)
			if yyj4822 < len(yyv4822) {
				if r.TryDecodeAsNil() {
					yyv4822[yyj4822] = ContainerImage{}
				} else {
					yyv4825 := &yyv4822[yyj4822]
					yyv4825.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4822 < len(yyv4822) {
			yyv4822 = yyv4822[:yyj4822]
			yyc4822 = true
		} else if yyj4822 == 0 && yyv4822 == nil {
			yyv4822 = []ContainerImage{}
			yyc4822 = true
		}
	}
	yyh4822.End()
	if yyc4822 {
		*v = yyv4822
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4826 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4826.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4827 := *v
	yyh4827, yyl4827 := z.DecSliceHelperStart()
	var yyc4827 bool
	if yyl4827 == 0 {
		if yyv4827 == nil {
			yyv4827 = []UniqueVolumeName{}
			yyc4827 = true
		} else if len(yyv4827) != 0 {
			yyv4827 = yyv4827[:0]
			yyc4827 = true
		}
	} else if yyl4827 > 0 {
		var yyrr4827, yyrl4827 int
		var yyrt4827 bool
		if yyl4827 > cap(yyv4827) {

			yyrl4827, yyrt4827 = z.DecInferLen(yyl4827, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4827 {
				if yyrl4827 <= cap(yyv4827) {
					yyv4827 = yyv4827[:yyrl4827]
				} else {
					yyv4827 = make([]UniqueVolumeName, yyrl4827)
				}
			} else {
				yyv4827 = make([]UniqueVolumeName, yyrl4827)
			}
			yyc4827 = true
			yyrr4827 = len(yyv4827)
		} else if yyl4827 != len(yyv4827) {
			yyv4827 = yyv4827[:yyl4827]
			yyc4827 = true
		}
		yyj4827 := 0
		for ; yyj4827 < yyrr4827; yyj4827++ {
			yyh4827.ElemContainerState(yyj4827)
			if r.TryDecodeAsNil() {
				yyv4827[yyj4827] = ""
			} else {
				yyv4827[yyj4827] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4827 {
			for ; yyj4827 < yyl4827; yyj4827++ {
				yyv4827 = append(yyv4827, "")
				yyh4827.ElemContainerState(yyj4827)
				if r.TryDecodeAsNil() {
					yyv4827[yyj4827] = ""
				} else {
					yyv4827[yyj4827] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4827 := 0
		for ; !r.CheckBreak(); yyj4827++ {

			if yyj4827 >= len(yyv4827) {
				yyv4827 = append(yyv4827, "") // var yyz4827 UniqueVolumeName
				yyc4827 = true
			}
			yyh4827.ElemContainerState(yyj4827)
			if yyj4827 < len(yyv4827) {
				if r.TryDecodeAsNil() {
					yyv4827[yyj4827] = ""
				} else {
					yyv4827[yyj4827] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4827 < len(yyv4827) {
			yyv4827 = yyv4827[:yyj4827]
			yyc4827 = true
		} else if yyj4827 == 0 && yyv4827 == nil {
			yyv4827 = []UniqueVolumeName{}
			yyc4827 = true
		}
	}
	yyh4827.End()
	if yyc4827 {
		*v = yyv4827
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4831 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4832 := &yyv4831
		yy4832.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4833 := *v
	yyh4833, yyl4833 := z.DecSliceHelperStart()
	var yyc4833 bool
	if yyl4833 == 0 {
		if yyv4833 == nil {
			yyv4833 = []AttachedVolume{}
			yyc4833 = true
		} else if len(yyv4833) != 0 {
			yyv4833 = yyv4833[:0]
			yyc4833 = true
		}
	} else if yyl4833 > 0 {
		var yyrr4833, yyrl4833 int
		var yyrt4833 bool
		if yyl4833 > cap(yyv4833) {

			yyrg4833 := len(yyv4833) > 0
			yyv24833 := yyv4833
			yyrl4833, yyrt4833 = z.DecInferLen(yyl4833, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4833 {
				if yyrl4833 <= cap(yyv4833) {
					yyv4833 = yyv4833[:yyrl4833]
				} else {
					yyv4833 = make([]AttachedVolume, yyrl4833)
				}
			} else {
				yyv4833 = make([]AttachedVolume, yyrl4833)
			}
			yyc4833 = true
			yyrr4833 = len(yyv4833)
			if yyrg4833 {
				copy(yyv4833, yyv24833)
			}
		} else if yyl4833 != len(yyv4833) {
			yyv4833 = yyv4833[:yyl4833]
			yyc4833 = true
		}
		yyj4833 := 0
		for ; yyj4833 < yyrr4833; yyj4833++ {
			yyh4833.ElemContainerState(yyj4833)
			if r.TryDecodeAsNil() {
				yyv4833[yyj4833] = AttachedVolume{}
			} else {
				yyv4834 := &yyv4833[yyj4833]
				yyv4834.CodecDecodeSelf(d)
			}

		}
		if yyrt4833 {
			for ; yyj4833 < yyl4833; yyj4833++ {
				yyv4833 = append(yyv4833, AttachedVolume{})
				yyh4833.ElemContainerState(yyj4833)
				if r.TryDecodeAsNil() {
					yyv4833[yyj4833] = AttachedVolume{}
				} else {
					yyv4835 := &yyv4833[yyj4833]
					yyv4835.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4833 := 0
		for ; !r.CheckBreak(); yyj4833++ {

			if yyj4833 >= len(yyv4833) {
				yyv4833 = append(yyv4833, AttachedVolume{}) // var yyz4833 AttachedVolume
				yyc4833 = true
			}
			yyh4833.ElemContainerState(yyj4833)
			if yyj4833 < len(yyv4833) {
				if r.TryDecodeAsNil() {
					yyv4833[yyj4833] = AttachedVolume{}
				} else {
					yyv4836 := &yyv4833[yyj4833]
					yyv4836.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4833 < len(yyv4833) {
			yyv4833 = yyv4833[:yyj4833]
			yyc4833 = true
		} else if yyj4833 == 0 && yyv4833 == nil {
			yyv4833 = []AttachedVolume{}
			yyc4833 = true
		}
	}
	yyh4833.End()
	if yyc4833 {
		*v = yyv4833
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4837 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4838 := &yyv4837
		yy4838.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4839 := *v
	yyh4839, yyl4839 := z.DecSliceHelperStart()
	var yyc4839 bool
	if yyl4839 == 0 {
		if yyv4839 == nil {
			yyv4839 = []PreferAvoidPodsEntry{}
			yyc4839 = true
		} else if len(yyv4839) != 0 {
			yyv4839 = yyv4839[:0]
			yyc4839 = true
		}
	} else if yyl4839 > 0 {
		var yyrr4839, yyrl4839 int
		var yyrt4839 bool
		if yyl4839 > cap(yyv4839) {

			yyrg4839 := len(yyv4839) > 0
			yyv24839 := yyv4839
			yyrl4839, yyrt4839 = z.DecInferLen(yyl4839, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4839 {
				if yyrl4839 <= cap(yyv4839) {
					yyv4839 = yyv4839[:yyrl4839]
				} else {
					yyv4839 = make([]PreferAvoidPodsEntry, yyrl4839)
				}
			} else {
				yyv4839 = make([]PreferAvoidPodsEntry, yyrl4839)
			}
			yyc4839 = true
			yyrr4839 = len(yyv4839)
			if yyrg4839 {
				copy(yyv4839, yyv24839)
			}
		} else if yyl4839 != len(yyv4839) {
			yyv4839 = yyv4839[:yyl4839]
			yyc4839 = true
		}
		yyj4839 := 0
		for ; yyj4839 < yyrr4839; yyj4839++ {
			yyh4839.ElemContainerState(yyj4839)
			if r.TryDecodeAsNil() {
				yyv4839[yyj4839] = PreferAvoidPodsEntry{}
			} else {
				yyv4840 := &yyv4839[yyj4839]
				yyv4840.CodecDecodeSelf(d)
			}

		}
		if yyrt4839 {
			for ; yyj4839 < yyl4839; yyj4839++ {
				yyv4839 = append(yyv4839, PreferAvoidPodsEntry{})
				yyh4839.ElemContainerState(yyj4839)
				if r.TryDecodeAsNil() {
					yyv4839[yyj4839] = PreferAvoidPodsEntry{}
				} else {
					yyv4841 := &yyv4839[yyj4839]
					yyv4841.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4839 := 0
		for ; !r.CheckBreak(); yyj4839++ {

			if yyj4839 >= len(yyv4839) {
				yyv4839 = append(yyv4839, PreferAvoidPodsEntry{}) // var yyz4839 PreferAvoidPodsEntry
				yyc4839 = true
			}
			yyh4839.ElemContainerState(yyj4839)
			if yyj4839 < len(yyv4839) {
				if r.TryDecodeAsNil() {
					yyv4839[yyj4839] = PreferAvoidPodsEntry{}
				} else {
					yyv4842 := &yyv4839[yyj4839]
					yyv4842.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4839 < len(yyv4839) {
			yyv4839 = yyv4839[:yyj4839]
			yyc4839 = true
		} else if yyj4839 == 0 && yyv4839 == nil {
			yyv4839 = []PreferAvoidPodsEntry{}
			yyc4839 = true
		}
	}
	yyh4839.End()
	if yyc4839 {
		*v = yyv4839
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4843, yyv4843 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4843.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4844 := &yyv4843
		yym4845 := z.EncBinary()
		_ = yym4845
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4844) {
		} else if !yym4845 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4844)
		} else {
			z.EncFallback(yy4844)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4846 := *v
	yyl4846 := r.ReadMapStart()
	yybh4846 := z.DecBasicHandle()
	if yyv4846 == nil {
		yyrl4846, _ := z.DecInferLen(yyl4846, yybh4846.MaxInitLen, 72)
		yyv4846 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4846)
		*v = yyv4846
	}
	var yymk4846 ResourceName
	var yymv4846 pkg3_resource.Quantity
	var yymg4846 bool
	if yybh4846.MapValueReset {
		yymg4846 = true
	}
	if yyl4846 > 0 {
		for yyj4846 := 0; yyj4846 < yyl4846; yyj4846++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4846 = ""
			} else {
				yymk4846 = ResourceName(r.DecodeString())
			}

			if yymg4846 {
				yymv4846 = yyv4846[yymk4846]
			} else {
				yymv4846 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4846 = pkg3_resource.Quantity{}
			} else {
				yyv4848 := &yymv4846
				yym4849 := z.DecBinary()
				_ = yym4849
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4848) {
				} else if !yym4849 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4848)
				} else {
					z.DecFallback(yyv4848, false)
				}
			}

			if yyv4846 != nil {
				yyv4846[yymk4846] = yymv4846
			}
		}
	} else if yyl4846 < 0 {
		for yyj4846 := 0; !r.CheckBreak(); yyj4846++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4846 = ""
			} else {
				yymk4846 = ResourceName(r.DecodeString())
			}

			if yymg4846 {
				yymv4846 = yyv4846[yymk4846]
			} else {
				yymv4846 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4846 = pkg3_resource.Quantity{}
			} else {
				yyv4851 := &yymv4846
				yym4852 := z.DecBinary()
				_ = yym4852
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4851) {
				} else if !yym4852 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4851)
				} else {
					z.DecFallback(yyv4851, false)
				}
			}

			if yyv4846 != nil {
				yyv4846[yymk4846] = yymv4846
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4853 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4854 := &yyv4853
		yy4854.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4855 := *v
	yyh4855, yyl4855 := z.DecSliceHelperStart()
	var yyc4855 bool
	if yyl4855 == 0 {
		if yyv4855 == nil {
			yyv4855 = []Node{}
			yyc4855 = true
		} else if len(yyv4855) != 0 {
			yyv4855 = yyv4855[:0]
			yyc4855 = true
		}
	} else if yyl4855 > 0 {
		var yyrr4855, yyrl4855 int
		var yyrt4855 bool
		if yyl4855 > cap(yyv4855) {

			yyrg4855 := len(yyv4855) > 0
			yyv24855 := yyv4855
			yyrl4855, yyrt4855 = z.DecInferLen(yyl4855, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4855 {
				if yyrl4855 <= cap(yyv4855) {
					yyv4855 = yyv4855[:yyrl4855]
				} else {
					yyv4855 = make([]Node, yyrl4855)
				}
			} else {
				yyv4855 = make([]Node, yyrl4855)
			}
			yyc4855 = true
			yyrr4855 = len(yyv4855)
			if yyrg4855 {
				copy(yyv4855, yyv24855)
			}
		} else if yyl4855 != len(yyv4855) {
			yyv4855 = yyv4855[:yyl4855]
			yyc4855 = true
		}
		yyj4855 := 0
		for ; yyj4855 < yyrr4855; yyj4855++ {
			yyh4855.ElemContainerState(yyj4855)
			if r.TryDecodeAsNil() {
				yyv4855[yyj4855] = Node{}
			} else {
				yyv4856 := &yyv4855[yyj4855]
				yyv4856.CodecDecodeSelf(d)
			}

		}
		if yyrt4855 {
			for ; yyj4855 < yyl4855; yyj4855++ {
				yyv4855 = append(yyv4855, Node{})
				yyh4855.ElemContainerState(yyj4855)
				if r.TryDecodeAsNil() {
					yyv4855[yyj4855] = Node{}
				} else {
					yyv4857 := &yyv4855[yyj4855]
					yyv4857.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4855 := 0
		for ; !r.CheckBreak(); yyj4855++ {

			if yyj4855 >= len(yyv4855) {
				yyv4855 = append(yyv4855, Node{}) // var yyz4855 Node
				yyc4855 = true
			}
			yyh4855.ElemContainerState(yyj4855)
			if yyj4855 < len(yyv4855) {
				if r.TryDecodeAsNil() {
					yyv4855[yyj4855] = Node{}
				} else {
					yyv4858 := &yyv4855[yyj4855]
					yyv4858.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4855 < len(yyv4855) {
			yyv4855 = yyv4855[:yyj4855]
			yyc4855 = true
		} else if yyj4855 == 0 && yyv4855 == nil {
			yyv4855 = []Node{}
			yyc4855 = true
		}
	}
	yyh4855.End()
	if yyc4855 {
		*v = yyv4855
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4859 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4859.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4860 := *v
	yyh4860, yyl4860 := z.DecSliceHelperStart()
	var yyc4860 bool
	if yyl4860 == 0 {
		if yyv4860 == nil {
			yyv4860 = []FinalizerName{}
			yyc4860 = true
		} else if len(yyv4860) != 0 {
			yyv4860 = yyv4860[:0]
			yyc4860 = true
		}
	} else if yyl4860 > 0 {
		var yyrr4860, yyrl4860 int
		var yyrt4860 bool
		if yyl4860 > cap(yyv4860) {

			yyrl4860, yyrt4860 = z.DecInferLen(yyl4860, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4860 {
				if yyrl4860 <= cap(yyv4860) {
					yyv4860 = yyv4860[:yyrl4860]
				} else {
					yyv4860 = make([]FinalizerName, yyrl4860)
				}
			} else {
				yyv4860 = make([]FinalizerName, yyrl4860)
			}
			yyc4860 = true
			yyrr4860 = len(yyv4860)
		} else if yyl4860 != len(yyv4860) {
			yyv4860 = yyv4860[:yyl4860]
			yyc4860 = true
		}
		yyj4860 := 0
		for ; yyj4860 < yyrr4860; yyj4860++ {
			yyh4860.ElemContainerState(yyj4860)
			if r.TryDecodeAsNil() {
				yyv4860[yyj4860] = ""
			} else {
				yyv4860[yyj4860] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4860 {
			for ; yyj4860 < yyl4860; yyj4860++ {
				yyv4860 = append(yyv4860, "")
				yyh4860.ElemContainerState(yyj4860)
				if r.TryDecodeAsNil() {
					yyv4860[yyj4860] = ""
				} else {
					yyv4860[yyj4860] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4860 := 0
		for ; !r.CheckBreak(); yyj4860++ {

			if yyj4860 >= len(yyv4860) {
				yyv4860 = append(yyv4860, "") // var yyz4860 FinalizerName
				yyc4860 = true
			}
			yyh4860.ElemContainerState(yyj4860)
			if yyj4860 < len(yyv4860) {
				if r.TryDecodeAsNil() {
					yyv4860[yyj4860] = ""
				} else {
					yyv4860[yyj4860] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4860 < len(yyv4860) {
			yyv4860 = yyv4860[:yyj4860]
			yyc4860 = true
		} else if yyj4860 == 0 && yyv4860 == nil {
			yyv4860 = []FinalizerName{}
			yyc4860 = true
		}
	}
	yyh4860.End()
	if yyc4860 {
		*v = yyv4860
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4864 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4865 := &yyv4864
		yy4865.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4866 := *v
	yyh4866, yyl4866 := z.DecSliceHelperStart()
	var yyc4866 bool
	if yyl4866 == 0 {
		if yyv4866 == nil {
			yyv4866 = []Namespace{}
			yyc4866 = true
		} else if len(yyv4866) != 0 {
			yyv4866 = yyv4866[:0]
			yyc4866 = true
		}
	} else if yyl4866 > 0 {
		var yyrr4866, yyrl4866 int
		var yyrt4866 bool
		if yyl4866 > cap(yyv4866) {

			yyrg4866 := len(yyv4866) > 0
			yyv24866 := yyv4866
			yyrl4866, yyrt4866 = z.DecInferLen(yyl4866, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4866 {
				if yyrl4866 <= cap(yyv4866) {
					yyv4866 = yyv4866[:yyrl4866]
				} else {
					yyv4866 = make([]Namespace, yyrl4866)
				}
			} else {
				yyv4866 = make([]Namespace, yyrl4866)
			}
			yyc4866 = true
			yyrr4866 = len(yyv4866)
			if yyrg4866 {
				copy(yyv4866, yyv24866)
			}
		} else if yyl4866 != len(yyv4866) {
			yyv4866 = yyv4866[:yyl4866]
			yyc4866 = true
		}
		yyj4866 := 0
		for ; yyj4866 < yyrr4866; yyj4866++ {
			yyh4866.ElemContainerState(yyj4866)
			if r.TryDecodeAsNil() {
				yyv4866[yyj4866] = Namespace{}
			} else {
				yyv4867 := &yyv4866[yyj4866]
				yyv4867.CodecDecodeSelf(d)
			}

		}
		if yyrt4866 {
			for ; yyj4866 < yyl4866; yyj4866++ {
				yyv4866 = append(yyv4866, Namespace{})
				yyh4866.ElemContainerState(yyj4866)
				if r.TryDecodeAsNil() {
					yyv4866[yyj4866] = Namespace{}
				} else {
					yyv4868 := &yyv4866[yyj4866]
					yyv4868.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4866 := 0
		for ; !r.CheckBreak(); yyj4866++ {

			if yyj4866 >= len(yyv4866) {
				yyv4866 = append(yyv4866, Namespace{}) // var yyz4866 Namespace
				yyc4866 = true
			}
			yyh4866.ElemContainerState(yyj4866)
			if yyj4866 < len(yyv4866) {
				if r.TryDecodeAsNil() {
					yyv4866[yyj4866] = Namespace{}
				} else {
					yyv4869 := &yyv4866[yyj4866]
					yyv4869.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4866 < len(yyv4866) {
			yyv4866 = yyv4866[:yyj4866]
			yyc4866 = true
		} else if yyj4866 == 0 && yyv4866 == nil {
			yyv4866 = []Namespace{}
			yyc4866 = true
		}
	}
	yyh4866.End()
	if yyc4866 {
		*v = yyv4866
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4870 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4871 := &yyv4870
		yy4871.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4872 := *v
	yyh4872, yyl4872 := z.DecSliceHelperStart()
	var yyc4872 bool
	if yyl4872 == 0 {
		if yyv4872 == nil {
			yyv4872 = []Event{}
			yyc4872 = true
		} else if len(yyv4872) != 0 {
			yyv4872 = yyv4872[:0]
			yyc4872 = true
		}
	} else if yyl4872 > 0 {
		var yyrr4872, yyrl4872 int
		var yyrt4872 bool
		if yyl4872 > cap(yyv4872) {

			yyrg4872 := len(yyv4872) > 0
			yyv24872 := yyv4872
			yyrl4872, yyrt4872 = z.DecInferLen(yyl4872, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4872 {
				if yyrl4872 <= cap(yyv4872) {
					yyv4872 = yyv4872[:yyrl4872]
				} else {
					yyv4872 = make([]Event, yyrl4872)
				}
			} else {
				yyv4872 = make([]Event, yyrl4872)
			}
			yyc4872 = true
			yyrr4872 = len(yyv4872)
			if yyrg4872 {
				copy(yyv4872, yyv24872)
			}
		} else if yyl4872 != len(yyv4872) {
			yyv4872 = yyv4872[:yyl4872]
			yyc4872 = true
		}
		yyj4872 := 0
		for ; yyj4872 < yyrr4872; yyj4872++ {
			yyh4872.ElemContainerState(yyj4872)
			if r.TryDecodeAsNil() {
				yyv4872[yyj4872] = Event{}
			} else {
				yyv4873 := &yyv4872[yyj4872]
				yyv4873.CodecDecodeSelf(d)
			}

		}
		if yyrt4872 {
			for ; yyj4872 < yyl4872; yyj4872++ {
				yyv4872 = append(yyv4872, Event{})
				yyh4872.ElemContainerState(yyj4872)
				if r.TryDecodeAsNil() {
					yyv4872[yyj4872] = Event{}
				} else {
					yyv4874 := &yyv4872[yyj4872]
					yyv4874.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4872 := 0
		for ; !r.CheckBreak(); yyj4872++ {

			if yyj4872 >= len(yyv4872) {
				yyv4872 = append(yyv4872, Event{}) // var yyz4872 Event
				yyc4872 = true
			}
			yyh4872.ElemContainerState(yyj4872)
			if yyj4872 < len(yyv4872) {
				if r.TryDecodeAsNil() {
					yyv4872[yyj4872] = Event{}
				} else {
					yyv4875 := &yyv4872[yyj4872]
					yyv4875.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4872 < len(yyv4872) {
			yyv4872 = yyv4872[:yyj4872]
			yyc4872 = true
		} else if yyj4872 == 0 && yyv4872 == nil {
			yyv4872 = []Event{}
			yyc4872 = true
		}
	}
	yyh4872.End()
	if yyc4872 {
		*v = yyv4872
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4876 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4877 := &yyv4876
		yym4878 := z.EncBinary()
		_ = yym4878
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4877) {
		} else if !yym4878 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4877)
		} else {
			z.EncFallback(yy4877)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4879 := *v
	yyh4879, yyl4879 := z.DecSliceHelperStart()
	var yyc4879 bool
	if yyl4879 == 0 {
		if yyv4879 == nil {
			yyv4879 = []pkg5_runtime.RawExtension{}
			yyc4879 = true
		} else if len(yyv4879) != 0 {
			yyv4879 = yyv4879[:0]
			yyc4879 = true
		}
	} else if yyl4879 > 0 {
		var yyrr4879, yyrl4879 int
		var yyrt4879 bool
		if yyl4879 > cap(yyv4879) {

			yyrg4879 := len(yyv4879) > 0
			yyv24879 := yyv4879
			yyrl4879, yyrt4879 = z.DecInferLen(yyl4879, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4879 {
				if yyrl4879 <= cap(yyv4879) {
					yyv4879 = yyv4879[:yyrl4879]
				} else {
					yyv4879 = make([]pkg5_runtime.RawExtension, yyrl4879)
				}
			} else {
				yyv4879 = make([]pkg5_runtime.RawExtension, yyrl4879)
			}
			yyc4879 = true
			yyrr4879 = len(yyv4879)
			if yyrg4879 {
				copy(yyv4879, yyv24879)
			}
		} else if yyl4879 != len(yyv4879) {
			yyv4879 = yyv4879[:yyl4879]
			yyc4879 = true
		}
		yyj4879 := 0
		for ; yyj4879 < yyrr4879; yyj4879++ {
			yyh4879.ElemContainerState(yyj4879)
			if r.TryDecodeAsNil() {
				yyv4879[yyj4879] = pkg5_runtime.RawExtension{}
			} else {
				yyv4880 := &yyv4879[yyj4879]
				yym4881 := z.DecBinary()
				_ = yym4881
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4880) {
				} else if !yym4881 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4880)
				} else {
					z.DecFallback(yyv4880, false)
				}
			}

		}
		if yyrt4879 {
			for ; yyj4879 < yyl4879; yyj4879++ {
				yyv4879 = append(yyv4879, pkg5_runtime.RawExtension{})
				yyh4879.ElemContainerState(yyj4879)
				if r.TryDecodeAsNil() {
					yyv4879[yyj4879] = pkg5_runtime.RawExtension{}
				} else {
					yyv4882 := &yyv4879[yyj4879]
					yym4883 := z.DecBinary()
					_ = yym4883
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4882) {
					} else if !yym4883 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4882)
					} else {
						z.DecFallback(yyv4882, false)
					}
				}

			}
		}

	} else {
		yyj4879 := 0
		for ; !r.CheckBreak(); yyj4879++ {

			if yyj4879 >= len(yyv4879) {
				yyv4879 = append(yyv4879, pkg5_runtime.RawExtension{}) // var yyz4879 pkg5_runtime.RawExtension
				yyc4879 = true
			}
			yyh4879.ElemContainerState(yyj4879)
			if yyj4879 < len(yyv4879) {
				if r.TryDecodeAsNil() {
					yyv4879[yyj4879] = pkg5_runtime.RawExtension{}
				} else {
					yyv4884 := &yyv4879[yyj4879]
					yym4885 := z.DecBinary()
					_ = yym4885
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4884) {
					} else if !yym4885 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4884)
					} else {
						z.DecFallback(yyv4884, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4879 < len(yyv4879) {
			yyv4879 = yyv4879[:yyj4879]
			yyc4879 = true
		} else if yyj4879 == 0 && yyv4879 == nil {
			yyv4879 = []pkg5_runtime.RawExtension{}
			yyc4879 = true
		}
	}
	yyh4879.End()
	if yyc4879 {
		*v = yyv4879
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4886 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4887 := &yyv4886
		yy4887.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4888 := *v
	yyh4888, yyl4888 := z.DecSliceHelperStart()
	var yyc4888 bool
	if yyl4888 == 0 {
		if yyv4888 == nil {
			yyv4888 = []LimitRangeItem{}
			yyc4888 = true
		} else if len(yyv4888) != 0 {
			yyv4888 = yyv4888[:0]
			yyc4888 = true
		}
	} else if yyl4888 > 0 {
		var yyrr4888, yyrl4888 int
		var yyrt4888 bool
		if yyl4888 > cap(yyv4888) {

			yyrg4888 := len(yyv4888) > 0
			yyv24888 := yyv4888
			yyrl4888, yyrt4888 = z.DecInferLen(yyl4888, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4888 {
				if yyrl4888 <= cap(yyv4888) {
					yyv4888 = yyv4888[:yyrl4888]
				} else {
					yyv4888 = make([]LimitRangeItem, yyrl4888)
				}
			} else {
				yyv4888 = make([]LimitRangeItem, yyrl4888)
			}
			yyc4888 = true
			yyrr4888 = len(yyv4888)
			if yyrg4888 {
				copy(yyv4888, yyv24888)
			}
		} else if yyl4888 != len(yyv4888) {
			yyv4888 = yyv4888[:yyl4888]
			yyc4888 = true
		}
		yyj4888 := 0
		for ; yyj4888 < yyrr4888; yyj4888++ {
			yyh4888.ElemContainerState(yyj4888)
			if r.TryDecodeAsNil() {
				yyv4888[yyj4888] = LimitRangeItem{}
			} else {
				yyv4889 := &yyv4888[yyj4888]
				yyv4889.CodecDecodeSelf(d)
			}

		}
		if yyrt4888 {
			for ; yyj4888 < yyl4888; yyj4888++ {
				yyv4888 = append(yyv4888, LimitRangeItem{})
				yyh4888.ElemContainerState(yyj4888)
				if r.TryDecodeAsNil() {
					yyv4888[yyj4888] = LimitRangeItem{}
				} else {
					yyv4890 := &yyv4888[yyj4888]
					yyv4890.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4888 := 0
		for ; !r.CheckBreak(); yyj4888++ {

			if yyj4888 >= len(yyv4888) {
				yyv4888 = append(yyv4888, LimitRangeItem{}) // var yyz4888 LimitRangeItem
				yyc4888 = true
			}
			yyh4888.ElemContainerState(yyj4888)
			if yyj4888 < len(yyv4888) {
				if r.TryDecodeAsNil() {
					yyv4888[yyj4888] = LimitRangeItem{}
				} else {
					yyv4891 := &yyv4888[yyj4888]
					yyv4891.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4888 < len(yyv4888) {
			yyv4888 = yyv4888[:yyj4888]
			yyc4888 = true
		} else if yyj4888 == 0 && yyv4888 == nil {
			yyv4888 = []LimitRangeItem{}
			yyc4888 = true
		}
	}
	yyh4888.End()
	if yyc4888 {
		*v = yyv4888
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4892 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4893 := &yyv4892
		yy4893.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4894 := *v
	yyh4894, yyl4894 := z.DecSliceHelperStart()
	var yyc4894 bool
	if yyl4894 == 0 {
		if yyv4894 == nil {
			yyv4894 = []LimitRange{}
			yyc4894 = true
		} else if len(yyv4894) != 0 {
			yyv4894 = yyv4894[:0]
			yyc4894 = true
		}
	} else if yyl4894 > 0 {
		var yyrr4894, yyrl4894 int
		var yyrt4894 bool
		if yyl4894 > cap(yyv4894) {

			yyrg4894 := len(yyv4894) > 0
			yyv24894 := yyv4894
			yyrl4894, yyrt4894 = z.DecInferLen(yyl4894, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4894 {
				if yyrl4894 <= cap(yyv4894) {
					yyv4894 = yyv4894[:yyrl4894]
				} else {
					yyv4894 = make([]LimitRange, yyrl4894)
				}
			} else {
				yyv4894 = make([]LimitRange, yyrl4894)
			}
			yyc4894 = true
			yyrr4894 = len(yyv4894)
			if yyrg4894 {
				copy(yyv4894, yyv24894)
			}
		} else if yyl4894 != len(yyv4894) {
			yyv4894 = yyv4894[:yyl4894]
			yyc4894 = true
		}
		yyj4894 := 0
		for ; yyj4894 < yyrr4894; yyj4894++ {
			yyh4894.ElemContainerState(yyj4894)
			if r.TryDecodeAsNil() {
				yyv4894[yyj4894] = LimitRange{}
			} else {
				yyv4895 := &yyv4894[yyj4894]
				yyv4895.CodecDecodeSelf(d)
			}

		}
		if yyrt4894 {
			for ; yyj4894 < yyl4894; yyj4894++ {
				yyv4894 = append(yyv4894, LimitRange{})
				yyh4894.ElemContainerState(yyj4894)
				if r.TryDecodeAsNil() {
					yyv4894[yyj4894] = LimitRange{}
				} else {
					yyv4896 := &yyv4894[yyj4894]
					yyv4896.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4894 := 0
		for ; !r.CheckBreak(); yyj4894++ {

			if yyj4894 >= len(yyv4894) {
				yyv4894 = append(yyv4894, LimitRange{}) // var yyz4894 LimitRange
				yyc4894 = true
			}
			yyh4894.ElemContainerState(yyj4894)
			if yyj4894 < len(yyv4894) {
				if r.TryDecodeAsNil() {
					yyv4894[yyj4894] = LimitRange{}
				} else {
					yyv4897 := &yyv4894[yyj4894]
					yyv4897.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4894 < len(yyv4894) {
			yyv4894 = yyv4894[:yyj4894]
			yyc4894 = true
		} else if yyj4894 == 0 && yyv4894 == nil {
			yyv4894 = []LimitRange{}
			yyc4894 = true
		}
	}
	yyh4894.End()
	if yyc4894 {
		*v = yyv4894
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4898 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4898.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4899 := *v
	yyh4899, yyl4899 := z.DecSliceHelperStart()
	var yyc4899 bool
	if yyl4899 == 0 {
		if yyv4899 == nil {
			yyv4899 = []ResourceQuotaScope{}
			yyc4899 = true
		} else if len(yyv4899) != 0 {
			yyv4899 = yyv4899[:0]
			yyc4899 = true
		}
	} else if yyl4899 > 0 {
		var yyrr4899, yyrl4899 int
		var yyrt4899 bool
		if yyl4899 > cap(yyv4899) {

			yyrl4899, yyrt4899 = z.DecInferLen(yyl4899, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4899 {
				if yyrl4899 <= cap(yyv4899) {
					yyv4899 = yyv4899[:yyrl4899]
				} else {
					yyv4899 = make([]ResourceQuotaScope, yyrl4899)
				}
			} else {
				yyv4899 = make([]ResourceQuotaScope, yyrl4899)
			}
			yyc4899 = true
			yyrr4899 = len(yyv4899)
		} else if yyl4899 != len(yyv4899) {
			yyv4899 = yyv4899[:yyl4899]
			yyc4899 = true
		}
		yyj4899 := 0
		for ; yyj4899 < yyrr4899; yyj4899++ {
			yyh4899.ElemContainerState(yyj4899)
			if r.TryDecodeAsNil() {
				yyv4899[yyj4899] = ""
			} else {
				yyv4899[yyj4899] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4899 {
			for ; yyj4899 < yyl4899; yyj4899++ {
				yyv4899 = append(yyv4899, "")
				yyh4899.ElemContainerState(yyj4899)
				if r.TryDecodeAsNil() {
					yyv4899[yyj4899] = ""
				} else {
					yyv4899[yyj4899] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4899 := 0
		for ; !r.CheckBreak(); yyj4899++ {

			if yyj4899 >= len(yyv4899) {
				yyv4899 = append(yyv4899, "") // var yyz4899 ResourceQuotaScope
				yyc4899 = true
			}
			yyh4899.ElemContainerState(yyj4899)
			if yyj4899 < len(yyv4899) {
				if r.TryDecodeAsNil() {
					yyv4899[yyj4899] = ""
				} else {
					yyv4899[yyj4899] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4899 < len(yyv4899) {
			yyv4899 = yyv4899[:yyj4899]
			yyc4899 = true
		} else if yyj4899 == 0 && yyv4899 == nil {
			yyv4899 = []ResourceQuotaScope{}
			yyc4899 = true
		}
	}
	yyh4899.End()
	if yyc4899 {
		*v = yyv4899
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4903 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4904 := &yyv4903
		yy4904.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4905 := *v
	yyh4905, yyl4905 := z.DecSliceHelperStart()
	var yyc4905 bool
	if yyl4905 == 0 {
		if yyv4905 == nil {
			yyv4905 = []ResourceQuota{}
			yyc4905 = true
		} else if len(yyv4905) != 0 {
			yyv4905 = yyv4905[:0]
			yyc4905 = true
		}
	} else if yyl4905 > 0 {
		var yyrr4905, yyrl4905 int
		var yyrt4905 bool
		if yyl4905 > cap(yyv4905) {

			yyrg4905 := len(yyv4905) > 0
			yyv24905 := yyv4905
			yyrl4905, yyrt4905 = z.DecInferLen(yyl4905, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4905 {
				if yyrl4905 <= cap(yyv4905) {
					yyv4905 = yyv4905[:yyrl4905]
				} else {
					yyv4905 = make([]ResourceQuota, yyrl4905)
				}
			} else {
				yyv4905 = make([]ResourceQuota, yyrl4905)
			}
			yyc4905 = true
			yyrr4905 = len(yyv4905)
			if yyrg4905 {
				copy(yyv4905, yyv24905)
			}
		} else if yyl4905 != len(yyv4905) {
			yyv4905 = yyv4905[:yyl4905]
			yyc4905 = true
		}
		yyj4905 := 0
		for ; yyj4905 < yyrr4905; yyj4905++ {
			yyh4905.ElemContainerState(yyj4905)
			if r.TryDecodeAsNil() {
				yyv4905[yyj4905] = ResourceQuota{}
			} else {
				yyv4906 := &yyv4905[yyj4905]
				yyv4906.CodecDecodeSelf(d)
			}

		}
		if yyrt4905 {
			for ; yyj4905 < yyl4905; yyj4905++ {
				yyv4905 = append(yyv4905, ResourceQuota{})
				yyh4905.ElemContainerState(yyj4905)
				if r.TryDecodeAsNil() {
					yyv4905[yyj4905] = ResourceQuota{}
				} else {
					yyv4907 := &yyv4905[yyj4905]
					yyv4907.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4905 := 0
		for ; !r.CheckBreak(); yyj4905++ {

			if yyj4905 >= len(yyv4905) {
				yyv4905 = append(yyv4905, ResourceQuota{}) // var yyz4905 ResourceQuota
				yyc4905 = true
			}
			yyh4905.ElemContainerState(yyj4905)
			if yyj4905 < len(yyv4905) {
				if r.TryDecodeAsNil() {
					yyv4905[yyj4905] = ResourceQuota{}
				} else {
					yyv4908 := &yyv4905[yyj4905]
					yyv4908.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4905 < len(yyv4905) {
			yyv4905 = yyv4905[:yyj4905]
			yyc4905 = true
		} else if yyj4905 == 0 && yyv4905 == nil {
			yyv4905 = []ResourceQuota{}
			yyc4905 = true
		}
	}
	yyh4905.End()
	if yyc4905 {
		*v = yyv4905
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4909, yyv4909 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4910 := z.EncBinary()
		_ = yym4910
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4909))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4909 == nil {
			r.EncodeNil()
		} else {
			yym4911 := z.EncBinary()
			_ = yym4911
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4909))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4912 := *v
	yyl4912 := r.ReadMapStart()
	yybh4912 := z.DecBasicHandle()
	if yyv4912 == nil {
		yyrl4912, _ := z.DecInferLen(yyl4912, yybh4912.MaxInitLen, 40)
		yyv4912 = make(map[string][]uint8, yyrl4912)
		*v = yyv4912
	}
	var yymk4912 string
	var yymv4912 []uint8
	var yymg4912 bool
	if yybh4912.MapValueReset {
		yymg4912 = true
	}
	if yyl4912 > 0 {
		for yyj4912 := 0; yyj4912 < yyl4912; yyj4912++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4912 = ""
			} else {
				yymk4912 = string(r.DecodeString())
			}

			if yymg4912 {
				yymv4912 = yyv4912[yymk4912]
			} else {
				yymv4912 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4912 = nil
			} else {
				yyv4914 := &yymv4912
				yym4915 := z.DecBinary()
				_ = yym4915
				if false {
				} else {
					*yyv4914 = r.DecodeBytes(*(*[]byte)(yyv4914), false, false)
				}
			}

			if yyv4912 != nil {
				yyv4912[yymk4912] = yymv4912
			}
		}
	} else if yyl4912 < 0 {
		for yyj4912 := 0; !r.CheckBreak(); yyj4912++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4912 = ""
			} else {
				yymk4912 = string(r.DecodeString())
			}

			if yymg4912 {
				yymv4912 = yyv4912[yymk4912]
			} else {
				yymv4912 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4912 = nil
			} else {
				yyv4917 := &yymv4912
				yym4918 := z.DecBinary()
				_ = yym4918
				if false {
				} else {
					*yyv4917 = r.DecodeBytes(*(*[]byte)(yyv4917), false, false)
				}
			}

			if yyv4912 != nil {
				yyv4912[yymk4912] = yymv4912
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4919 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4920 := &yyv4919
		yy4920.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4921 := *v
	yyh4921, yyl4921 := z.DecSliceHelperStart()
	var yyc4921 bool
	if yyl4921 == 0 {
		if yyv4921 == nil {
			yyv4921 = []Secret{}
			yyc4921 = true
		} else if len(yyv4921) != 0 {
			yyv4921 = yyv4921[:0]
			yyc4921 = true
		}
	} else if yyl4921 > 0 {
		var yyrr4921, yyrl4921 int
		var yyrt4921 bool
		if yyl4921 > cap(yyv4921) {

			yyrg4921 := len(yyv4921) > 0
			yyv24921 := yyv4921
			yyrl4921, yyrt4921 = z.DecInferLen(yyl4921, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4921 {
				if yyrl4921 <= cap(yyv4921) {
					yyv4921 = yyv4921[:yyrl4921]
				} else {
					yyv4921 = make([]Secret, yyrl4921)
				}
			} else {
				yyv4921 = make([]Secret, yyrl4921)
			}
			yyc4921 = true
			yyrr4921 = len(yyv4921)
			if yyrg4921 {
				copy(yyv4921, yyv24921)
			}
		} else if yyl4921 != len(yyv4921) {
			yyv4921 = yyv4921[:yyl4921]
			yyc4921 = true
		}
		yyj4921 := 0
		for ; yyj4921 < yyrr4921; yyj4921++ {
			yyh4921.ElemContainerState(yyj4921)
			if r.TryDecodeAsNil() {
				yyv4921[yyj4921] = Secret{}
			} else {
				yyv4922 := &yyv4921[yyj4921]
				yyv4922.CodecDecodeSelf(d)
			}

		}
		if yyrt4921 {
			for ; yyj4921 < yyl4921; yyj4921++ {
				yyv4921 = append(yyv4921, Secret{})
				yyh4921.ElemContainerState(yyj4921)
				if r.TryDecodeAsNil() {
					yyv4921[yyj4921] = Secret{}
				} else {
					yyv4923 := &yyv4921[yyj4921]
					yyv4923.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4921 := 0
		for ; !r.CheckBreak(); yyj4921++ {

			if yyj4921 >= len(yyv4921) {
				yyv4921 = append(yyv4921, Secret{}) // var yyz4921 Secret
				yyc4921 = true
			}
			yyh4921.ElemContainerState(yyj4921)
			if yyj4921 < len(yyv4921) {
				if r.TryDecodeAsNil() {
					yyv4921[yyj4921] = Secret{}
				} else {
					yyv4924 := &yyv4921[yyj4921]
					yyv4924.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4921 < len(yyv4921) {
			yyv4921 = yyv4921[:yyj4921]
			yyc4921 = true
		} else if yyj4921 == 0 && yyv4921 == nil {
			yyv4921 = []Secret{}
			yyc4921 = true
		}
	}
	yyh4921.End()
	if yyc4921 {
		*v = yyv4921
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4925 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4926 := &yyv4925
		yy4926.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4927 := *v
	yyh4927, yyl4927 := z.DecSliceHelperStart()
	var yyc4927 bool
	if yyl4927 == 0 {
		if yyv4927 == nil {
			yyv4927 = []ConfigMap{}
			yyc4927 = true
		} else if len(yyv4927) != 0 {
			yyv4927 = yyv4927[:0]
			yyc4927 = true
		}
	} else if yyl4927 > 0 {
		var yyrr4927, yyrl4927 int
		var yyrt4927 bool
		if yyl4927 > cap(yyv4927) {

			yyrg4927 := len(yyv4927) > 0
			yyv24927 := yyv4927
			yyrl4927, yyrt4927 = z.DecInferLen(yyl4927, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4927 {
				if yyrl4927 <= cap(yyv4927) {
					yyv4927 = yyv4927[:yyrl4927]
				} else {
					yyv4927 = make([]ConfigMap, yyrl4927)
				}
			} else {
				yyv4927 = make([]ConfigMap, yyrl4927)
			}
			yyc4927 = true
			yyrr4927 = len(yyv4927)
			if yyrg4927 {
				copy(yyv4927, yyv24927)
			}
		} else if yyl4927 != len(yyv4927) {
			yyv4927 = yyv4927[:yyl4927]
			yyc4927 = true
		}
		yyj4927 := 0
		for ; yyj4927 < yyrr4927; yyj4927++ {
			yyh4927.ElemContainerState(yyj4927)
			if r.TryDecodeAsNil() {
				yyv4927[yyj4927] = ConfigMap{}
			} else {
				yyv4928 := &yyv4927[yyj4927]
				yyv4928.CodecDecodeSelf(d)
			}

		}
		if yyrt4927 {
			for ; yyj4927 < yyl4927; yyj4927++ {
				yyv4927 = append(yyv4927, ConfigMap{})
				yyh4927.ElemContainerState(yyj4927)
				if r.TryDecodeAsNil() {
					yyv4927[yyj4927] = ConfigMap{}
				} else {
					yyv4929 := &yyv4927[yyj4927]
					yyv4929.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4927 := 0
		for ; !r.CheckBreak(); yyj4927++ {

			if yyj4927 >= len(yyv4927) {
				yyv4927 = append(yyv4927, ConfigMap{}) // var yyz4927 ConfigMap
				yyc4927 = true
			}
			yyh4927.ElemContainerState(yyj4927)
			if yyj4927 < len(yyv4927) {
				if r.TryDecodeAsNil() {
					yyv4927[yyj4927] = ConfigMap{}
				} else {
					yyv4930 := &yyv4927[yyj4927]
					yyv4930.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4927 < len(yyv4927) {
			yyv4927 = yyv4927[:yyj4927]
			yyc4927 = true
		} else if yyj4927 == 0 && yyv4927 == nil {
			yyv4927 = []ConfigMap{}
			yyc4927 = true
		}
	}
	yyh4927.End()
	if yyc4927 {
		*v = yyv4927
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4931 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4932 := &yyv4931
		yy4932.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4933 := *v
	yyh4933, yyl4933 := z.DecSliceHelperStart()
	var yyc4933 bool
	if yyl4933 == 0 {
		if yyv4933 == nil {
			yyv4933 = []ComponentCondition{}
			yyc4933 = true
		} else if len(yyv4933) != 0 {
			yyv4933 = yyv4933[:0]
			yyc4933 = true
		}
	} else if yyl4933 > 0 {
		var yyrr4933, yyrl4933 int
		var yyrt4933 bool
		if yyl4933 > cap(yyv4933) {

			yyrg4933 := len(yyv4933) > 0
			yyv24933 := yyv4933
			yyrl4933, yyrt4933 = z.DecInferLen(yyl4933, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4933 {
				if yyrl4933 <= cap(yyv4933) {
					yyv4933 = yyv4933[:yyrl4933]
				} else {
					yyv4933 = make([]ComponentCondition, yyrl4933)
				}
			} else {
				yyv4933 = make([]ComponentCondition, yyrl4933)
			}
			yyc4933 = true
			yyrr4933 = len(yyv4933)
			if yyrg4933 {
				copy(yyv4933, yyv24933)
			}
		} else if yyl4933 != len(yyv4933) {
			yyv4933 = yyv4933[:yyl4933]
			yyc4933 = true
		}
		yyj4933 := 0
		for ; yyj4933 < yyrr4933; yyj4933++ {
			yyh4933.ElemContainerState(yyj4933)
			if r.TryDecodeAsNil() {
				yyv4933[yyj4933] = ComponentCondition{}
			} else {
				yyv4934 := &yyv4933[yyj4933]
				yyv4934.CodecDecodeSelf(d)
			}

		}
		if yyrt4933 {
			for ; yyj4933 < yyl4933; yyj4933++ {
				yyv4933 = append(yyv4933, ComponentCondition{})
				yyh4933.ElemContainerState(yyj4933)
				if r.TryDecodeAsNil() {
					yyv4933[yyj4933] = ComponentCondition{}
				} else {
					yyv4935 := &yyv4933[yyj4933]
					yyv4935.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4933 := 0
		for ; !r.CheckBreak(); yyj4933++ {

			if yyj4933 >= len(yyv4933) {
				yyv4933 = append(yyv4933, ComponentCondition{}) // var yyz4933 ComponentCondition
				yyc4933 = true
			}
			yyh4933.ElemContainerState(yyj4933)
			if yyj4933 < len(yyv4933) {
				if r.TryDecodeAsNil() {
					yyv4933[yyj4933] = ComponentCondition{}
				} else {
					yyv4936 := &yyv4933[yyj4933]
					yyv4936.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4933 < len(yyv4933) {
			yyv4933 = yyv4933[:yyj4933]
			yyc4933 = true
		} else if yyj4933 == 0 && yyv4933 == nil {
			yyv4933 = []ComponentCondition{}
			yyc4933 = true
		}
	}
	yyh4933.End()
	if yyc4933 {
		*v = yyv4933
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4937 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4938 := &yyv4937
		yy4938.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4939 := *v
	yyh4939, yyl4939 := z.DecSliceHelperStart()
	var yyc4939 bool
	if yyl4939 == 0 {
		if yyv4939 == nil {
			yyv4939 = []ComponentStatus{}
			yyc4939 = true
		} else if len(yyv4939) != 0 {
			yyv4939 = yyv4939[:0]
			yyc4939 = true
		}
	} else if yyl4939 > 0 {
		var yyrr4939, yyrl4939 int
		var yyrt4939 bool
		if yyl4939 > cap(yyv4939) {

			yyrg4939 := len(yyv4939) > 0
			yyv24939 := yyv4939
			yyrl4939, yyrt4939 = z.DecInferLen(yyl4939, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4939 {
				if yyrl4939 <= cap(yyv4939) {
					yyv4939 = yyv4939[:yyrl4939]
				} else {
					yyv4939 = make([]ComponentStatus, yyrl4939)
				}
			} else {
				yyv4939 = make([]ComponentStatus, yyrl4939)
			}
			yyc4939 = true
			yyrr4939 = len(yyv4939)
			if yyrg4939 {
				copy(yyv4939, yyv24939)
			}
		} else if yyl4939 != len(yyv4939) {
			yyv4939 = yyv4939[:yyl4939]
			yyc4939 = true
		}
		yyj4939 := 0
		for ; yyj4939 < yyrr4939; yyj4939++ {
			yyh4939.ElemContainerState(yyj4939)
			if r.TryDecodeAsNil() {
				yyv4939[yyj4939] = ComponentStatus{}
			} else {
				yyv4940 := &yyv4939[yyj4939]
				yyv4940.CodecDecodeSelf(d)
			}

		}
		if yyrt4939 {
			for ; yyj4939 < yyl4939; yyj4939++ {
				yyv4939 = append(yyv4939, ComponentStatus{})
				yyh4939.ElemContainerState(yyj4939)
				if r.TryDecodeAsNil() {
					yyv4939[yyj4939] = ComponentStatus{}
				} else {
					yyv4941 := &yyv4939[yyj4939]
					yyv4941.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4939 := 0
		for ; !r.CheckBreak(); yyj4939++ {

			if yyj4939 >= len(yyv4939) {
				yyv4939 = append(yyv4939, ComponentStatus{}) // var yyz4939 ComponentStatus
				yyc4939 = true
			}
			yyh4939.ElemContainerState(yyj4939)
			if yyj4939 < len(yyv4939) {
				if r.TryDecodeAsNil() {
					yyv4939[yyj4939] = ComponentStatus{}
				} else {
					yyv4942 := &yyv4939[yyj4939]
					yyv4942.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4939 < len(yyv4939) {
			yyv4939 = yyv4939[:yyj4939]
			yyc4939 = true
		} else if yyj4939 == 0 && yyv4939 == nil {
			yyv4939 = []ComponentStatus{}
			yyc4939 = true
		}
	}
	yyh4939.End()
	if yyc4939 {
		*v = yyv4939
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4943 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4944 := &yyv4943
		yy4944.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4945 := *v
	yyh4945, yyl4945 := z.DecSliceHelperStart()
	var yyc4945 bool
	if yyl4945 == 0 {
		if yyv4945 == nil {
			yyv4945 = []DownwardAPIVolumeFile{}
			yyc4945 = true
		} else if len(yyv4945) != 0 {
			yyv4945 = yyv4945[:0]
			yyc4945 = true
		}
	} else if yyl4945 > 0 {
		var yyrr4945, yyrl4945 int
		var yyrt4945 bool
		if yyl4945 > cap(yyv4945) {

			yyrg4945 := len(yyv4945) > 0
			yyv24945 := yyv4945
			yyrl4945, yyrt4945 = z.DecInferLen(yyl4945, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4945 {
				if yyrl4945 <= cap(yyv4945) {
					yyv4945 = yyv4945[:yyrl4945]
				} else {
					yyv4945 = make([]DownwardAPIVolumeFile, yyrl4945)
				}
			} else {
				yyv4945 = make([]DownwardAPIVolumeFile, yyrl4945)
			}
			yyc4945 = true
			yyrr4945 = len(yyv4945)
			if yyrg4945 {
				copy(yyv4945, yyv24945)
			}
		} else if yyl4945 != len(yyv4945) {
			yyv4945 = yyv4945[:yyl4945]
			yyc4945 = true
		}
		yyj4945 := 0
		for ; yyj4945 < yyrr4945; yyj4945++ {
			yyh4945.ElemContainerState(yyj4945)
			if r.TryDecodeAsNil() {
				yyv4945[yyj4945] = DownwardAPIVolumeFile{}
			} else {
				yyv4946 := &yyv4945[yyj4945]
				yyv4946.CodecDecodeSelf(d)
			}

		}
		if yyrt4945 {
			for ; yyj4945 < yyl4945; yyj4945++ {
				yyv4945 = append(yyv4945, DownwardAPIVolumeFile{})
				yyh4945.ElemContainerState(yyj4945)
				if r.TryDecodeAsNil() {
					yyv4945[yyj4945] = DownwardAPIVolumeFile{}
				} else {
					yyv4947 := &yyv4945[yyj4945]
					yyv4947.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4945 := 0
		for ; !r.CheckBreak(); yyj4945++ {

			if yyj4945 >= len(yyv4945) {
				yyv4945 = append(yyv4945, DownwardAPIVolumeFile{}) // var yyz4945 DownwardAPIVolumeFile
				yyc4945 = true
			}
			yyh4945.ElemContainerState(yyj4945)
			if yyj4945 < len(yyv4945) {
				if r.TryDecodeAsNil() {
					yyv4945[yyj4945] = DownwardAPIVolumeFile{}
				} else {
					yyv4948 := &yyv4945[yyj4945]
					yyv4948.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4945 < len(yyv4945) {
			yyv4945 = yyv4945[:yyj4945]
			yyc4945 = true
		} else if yyj4945 == 0 && yyv4945 == nil {
			yyv4945 = []DownwardAPIVolumeFile{}
			yyc4945 = true
		}
	}
	yyh4945.End()
	if yyc4945 {
		*v = yyv4945
	}
}
