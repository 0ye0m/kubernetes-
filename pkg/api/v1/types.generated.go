/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.Cluster != nil
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					if x.Cluster == nil {
						r.EncodeNil()
					} else {
						x.Cluster.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cluster"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cluster == nil {
						r.EncodeNil()
					} else {
						x.Cluster.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym50 := z.DecBinary()
	_ = yym50
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct51 := r.ContainerType()
		if yyct51 == codecSelferValueTypeMap1234 {
			yyl51 := r.ReadMapStart()
			if yyl51 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl51, d)
			}
		} else if yyct51 == codecSelferValueTypeArray1234 {
			yyl51 := r.ReadArrayStart()
			if yyl51 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl51, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys52Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys52Slc
	var yyhl52 bool = l >= 0
	for yyj52 := 0; ; yyj52++ {
		if yyhl52 {
			if yyj52 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys52Slc = r.DecodeBytes(yys52Slc, true, true)
		yys52 := string(yys52Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys52 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv60 := &x.CreationTimestamp
				yym61 := z.DecBinary()
				_ = yym61
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv60) {
				} else if yym61 {
					z.DecBinaryUnmarshal(yyv60)
				} else if !yym61 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv60)
				} else {
					z.DecFallback(yyv60, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym63 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv66 := &x.Labels
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					z.F.DecMapStringStringX(yyv66, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv68 := &x.Annotations
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv70 := &x.OwnerReferences
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv70), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv72 := &x.Finalizers
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					z.F.DecSliceStringX(yyv72, false, d)
				}
			}
		case "cluster":
			if r.TryDecodeAsNil() {
				if x.Cluster != nil {
					x.Cluster = nil
				}
			} else {
				if x.Cluster == nil {
					x.Cluster = new(ClusterReference)
				}
				x.Cluster.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys52)
		} // end switch yys52
	} // end for yyj52
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj75 int
	var yyb75 bool
	var yyhl75 bool = l >= 0
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv83 := &x.CreationTimestamp
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv83) {
		} else if yym84 {
			z.DecBinaryUnmarshal(yyv83)
		} else if !yym84 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv83)
		} else {
			z.DecFallback(yyv83, false)
		}
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym86 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv89 := &x.Labels
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			z.F.DecMapStringStringX(yyv89, false, d)
		}
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv91 := &x.Annotations
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv93 := &x.OwnerReferences
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv93), d)
		}
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv95 := &x.Finalizers
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			z.F.DecSliceStringX(yyv95, false, d)
		}
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cluster != nil {
			x.Cluster = nil
		}
	} else {
		if x.Cluster == nil {
			x.Cluster = new(ClusterReference)
		}
		x.Cluster.CodecDecodeSelf(d)
	}
	for {
		yyj75++
		if yyhl75 {
			yyb75 = yyj75 > l
		} else {
			yyb75 = r.CheckBreak()
		}
		if yyb75 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj75-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym98 := z.EncBinary()
		_ = yym98
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep99 := !z.EncBinary()
			yy2arr99 := z.EncBasicHandle().StructToArray
			var yyq99 [1]bool
			_, _, _ = yysep99, yyq99, yy2arr99
			const yyr99 bool = false
			yyq99[0] = x.ClusterName != ""
			var yynn99 int
			if yyr99 || yy2arr99 {
				r.EncodeArrayStart(1)
			} else {
				yynn99 = 0
				for _, b := range yyq99 {
					if b {
						yynn99++
					}
				}
				r.EncodeMapStart(yynn99)
				yynn99 = 0
			}
			if yyr99 || yy2arr99 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq99[0] {
					yym101 := z.EncBinary()
					_ = yym101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq99[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym102 := z.EncBinary()
					_ = yym102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr99 || yy2arr99 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym103 := z.DecBinary()
	_ = yym103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct104 := r.ContainerType()
		if yyct104 == codecSelferValueTypeMap1234 {
			yyl104 := r.ReadMapStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl104, d)
			}
		} else if yyct104 == codecSelferValueTypeArray1234 {
			yyl104 := r.ReadArrayStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys105Slc
	var yyhl105 bool = l >= 0
	for yyj105 := 0; ; yyj105++ {
		if yyhl105 {
			if yyj105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys105Slc = r.DecodeBytes(yys105Slc, true, true)
		yys105 := string(yys105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys105 {
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys105)
		} // end switch yys105
	} // end for yyj105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj107 int
	var yyb107 bool
	var yyhl107 bool = l >= 0
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj107++
		if yyhl107 {
			yyb107 = yyj107 > l
		} else {
			yyb107 = r.CheckBreak()
		}
		if yyb107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym109 := z.EncBinary()
		_ = yym109
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep110 := !z.EncBinary()
			yy2arr110 := z.EncBasicHandle().StructToArray
			var yyq110 [21]bool
			_, _, _ = yysep110, yyq110, yy2arr110
			const yyr110 bool = false
			yyq110[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq110[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq110[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq110[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq110[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq110[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq110[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq110[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq110[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq110[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq110[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq110[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq110[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq110[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq110[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq110[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq110[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq110[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq110[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq110[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			var yynn110 int
			if yyr110 || yy2arr110 {
				r.EncodeArrayStart(21)
			} else {
				yynn110 = 1
				for _, b := range yyq110 {
					if b {
						yynn110++
					}
				}
				r.EncodeMapStart(yynn110)
				yynn110 = 0
			}
			if yyr110 || yy2arr110 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym112 := z.EncBinary()
				_ = yym112
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym113 := z.EncBinary()
				_ = yym113
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn114 bool
			if x.VolumeSource.HostPath == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr110 || yy2arr110 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr110 || yy2arr110 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr110 || yy2arr110 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr110 || yy2arr110 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.GitRepo == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr110 || yy2arr110 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.Secret == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr110 || yy2arr110 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.NFS == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr110 || yy2arr110 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.ISCSI == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr110 || yy2arr110 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr110 || yy2arr110 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr110 || yy2arr110 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.RBD == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr110 || yy2arr110 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr110 || yy2arr110 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.Cinder == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr110 || yy2arr110 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.CephFS == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr110 || yy2arr110 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn128 bool
			if x.VolumeSource.Flocker == nil {
				yyn128 = true
				goto LABEL128
			}
		LABEL128:
			if yyr110 || yy2arr110 {
				if yyn128 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn128 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn129 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn129 = true
				goto LABEL129
			}
		LABEL129:
			if yyr110 || yy2arr110 {
				if yyn129 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn129 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn130 bool
			if x.VolumeSource.FC == nil {
				yyn130 = true
				goto LABEL130
			}
		LABEL130:
			if yyr110 || yy2arr110 {
				if yyn130 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn130 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn131 bool
			if x.VolumeSource.AzureFile == nil {
				yyn131 = true
				goto LABEL131
			}
		LABEL131:
			if yyr110 || yy2arr110 {
				if yyn131 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn131 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn132 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn132 = true
				goto LABEL132
			}
		LABEL132:
			if yyr110 || yy2arr110 {
				if yyn132 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn132 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn133 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn133 = true
				goto LABEL133
			}
		LABEL133:
			if yyr110 || yy2arr110 {
				if yyn133 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn133 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr110 || yy2arr110 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym134 := z.DecBinary()
	_ = yym134
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct135 := r.ContainerType()
		if yyct135 == codecSelferValueTypeMap1234 {
			yyl135 := r.ReadMapStart()
			if yyl135 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl135, d)
			}
		} else if yyct135 == codecSelferValueTypeArray1234 {
			yyl135 := r.ReadArrayStart()
			if yyl135 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl135, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys136Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys136Slc
	var yyhl136 bool = l >= 0
	for yyj136 := 0; ; yyj136++ {
		if yyhl136 {
			if yyj136 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys136Slc = r.DecodeBytes(yys136Slc, true, true)
		yys136 := string(yys136Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys136 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys136)
		} // end switch yys136
	} // end for yyj136
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj158 int
	var yyb158 bool
	var yyhl158 bool = l >= 0
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj158++
		if yyhl158 {
			yyb158 = yyj158 > l
		} else {
			yyb158 = r.CheckBreak()
		}
		if yyb158 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj158-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym180 := z.EncBinary()
		_ = yym180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep181 := !z.EncBinary()
			yy2arr181 := z.EncBasicHandle().StructToArray
			var yyq181 [20]bool
			_, _, _ = yysep181, yyq181, yy2arr181
			const yyr181 bool = false
			yyq181[0] = x.HostPath != nil
			yyq181[1] = x.EmptyDir != nil
			yyq181[2] = x.GCEPersistentDisk != nil
			yyq181[3] = x.AWSElasticBlockStore != nil
			yyq181[4] = x.GitRepo != nil
			yyq181[5] = x.Secret != nil
			yyq181[6] = x.NFS != nil
			yyq181[7] = x.ISCSI != nil
			yyq181[8] = x.Glusterfs != nil
			yyq181[9] = x.PersistentVolumeClaim != nil
			yyq181[10] = x.RBD != nil
			yyq181[11] = x.FlexVolume != nil
			yyq181[12] = x.Cinder != nil
			yyq181[13] = x.CephFS != nil
			yyq181[14] = x.Flocker != nil
			yyq181[15] = x.DownwardAPI != nil
			yyq181[16] = x.FC != nil
			yyq181[17] = x.AzureFile != nil
			yyq181[18] = x.ConfigMap != nil
			yyq181[19] = x.VsphereVolume != nil
			var yynn181 int
			if yyr181 || yy2arr181 {
				r.EncodeArrayStart(20)
			} else {
				yynn181 = 0
				for _, b := range yyq181 {
					if b {
						yynn181++
					}
				}
				r.EncodeMapStart(yynn181)
				yynn181 = 0
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym202 := z.DecBinary()
	_ = yym202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct203 := r.ContainerType()
		if yyct203 == codecSelferValueTypeMap1234 {
			yyl203 := r.ReadMapStart()
			if yyl203 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl203, d)
			}
		} else if yyct203 == codecSelferValueTypeArray1234 {
			yyl203 := r.ReadArrayStart()
			if yyl203 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys204Slc
	var yyhl204 bool = l >= 0
	for yyj204 := 0; ; yyj204++ {
		if yyhl204 {
			if yyj204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys204Slc = r.DecodeBytes(yys204Slc, true, true)
		yys204 := string(yys204Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys204 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys204)
		} // end switch yys204
	} // end for yyj204
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj225 int
	var yyb225 bool
	var yyhl225 bool = l >= 0
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj225++
		if yyhl225 {
			yyb225 = yyj225 > l
		} else {
			yyb225 = r.CheckBreak()
		}
		if yyb225 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj225-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym246 := z.EncBinary()
		_ = yym246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep247 := !z.EncBinary()
			yy2arr247 := z.EncBasicHandle().StructToArray
			var yyq247 [2]bool
			_, _, _ = yysep247, yyq247, yy2arr247
			const yyr247 bool = false
			yyq247[1] = x.ReadOnly != false
			var yynn247 int
			if yyr247 || yy2arr247 {
				r.EncodeArrayStart(2)
			} else {
				yynn247 = 1
				for _, b := range yyq247 {
					if b {
						yynn247++
					}
				}
				r.EncodeMapStart(yynn247)
				yynn247 = 0
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym249 := z.EncBinary()
				_ = yym249
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym250 := z.EncBinary()
				_ = yym250
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[1] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq247[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym254 := z.DecBinary()
	_ = yym254
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct255 := r.ContainerType()
		if yyct255 == codecSelferValueTypeMap1234 {
			yyl255 := r.ReadMapStart()
			if yyl255 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl255, d)
			}
		} else if yyct255 == codecSelferValueTypeArray1234 {
			yyl255 := r.ReadArrayStart()
			if yyl255 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl255, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys256Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys256Slc
	var yyhl256 bool = l >= 0
	for yyj256 := 0; ; yyj256++ {
		if yyhl256 {
			if yyj256 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys256Slc = r.DecodeBytes(yys256Slc, true, true)
		yys256 := string(yys256Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys256 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys256)
		} // end switch yys256
	} // end for yyj256
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj259 int
	var yyb259 bool
	var yyhl259 bool = l >= 0
	yyj259++
	if yyhl259 {
		yyb259 = yyj259 > l
	} else {
		yyb259 = r.CheckBreak()
	}
	if yyb259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj259++
	if yyhl259 {
		yyb259 = yyj259 > l
	} else {
		yyb259 = r.CheckBreak()
	}
	if yyb259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj259++
		if yyhl259 {
			yyb259 = yyj259 > l
		} else {
			yyb259 = r.CheckBreak()
		}
		if yyb259 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj259-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym262 := z.EncBinary()
		_ = yym262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep263 := !z.EncBinary()
			yy2arr263 := z.EncBasicHandle().StructToArray
			var yyq263 [14]bool
			_, _, _ = yysep263, yyq263, yy2arr263
			const yyr263 bool = false
			yyq263[0] = x.GCEPersistentDisk != nil
			yyq263[1] = x.AWSElasticBlockStore != nil
			yyq263[2] = x.HostPath != nil
			yyq263[3] = x.Glusterfs != nil
			yyq263[4] = x.NFS != nil
			yyq263[5] = x.RBD != nil
			yyq263[6] = x.ISCSI != nil
			yyq263[7] = x.Cinder != nil
			yyq263[8] = x.CephFS != nil
			yyq263[9] = x.FC != nil
			yyq263[10] = x.Flocker != nil
			yyq263[11] = x.FlexVolume != nil
			yyq263[12] = x.AzureFile != nil
			yyq263[13] = x.VsphereVolume != nil
			var yynn263 int
			if yyr263 || yy2arr263 {
				r.EncodeArrayStart(14)
			} else {
				yynn263 = 0
				for _, b := range yyq263 {
					if b {
						yynn263++
					}
				}
				r.EncodeMapStart(yynn263)
				yynn263 = 0
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym278 := z.DecBinary()
	_ = yym278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct279 := r.ContainerType()
		if yyct279 == codecSelferValueTypeMap1234 {
			yyl279 := r.ReadMapStart()
			if yyl279 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl279, d)
			}
		} else if yyct279 == codecSelferValueTypeArray1234 {
			yyl279 := r.ReadArrayStart()
			if yyl279 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl279, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys280Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys280Slc
	var yyhl280 bool = l >= 0
	for yyj280 := 0; ; yyj280++ {
		if yyhl280 {
			if yyj280 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys280Slc = r.DecodeBytes(yys280Slc, true, true)
		yys280 := string(yys280Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys280 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys280)
		} // end switch yys280
	} // end for yyj280
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj295 int
	var yyb295 bool
	var yyhl295 bool = l >= 0
	yyj295++
	if yyhl295 {
		yyb295 = yyj295 > l
	} else {
		yyb295 = r.CheckBreak()
	}
	if yyb295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj295++
	if yyhl295 {
		yyb295 = yyj295 > l
	} else {
		yyb295 = r.CheckBreak()
	}
	if yyb295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj295++
	if yyhl295 {
		yyb295 = yyj295 > l
	} else {
		yyb295 = r.CheckBreak()
	}
	if yyb295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj295++
	if yyhl295 {
		yyb295 = yyj295 > l
	} else {
		yyb295 = r.CheckBreak()
	}
	if yyb295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj295++
	if yyhl295 {
		yyb295 = yyj295 > l
	} else {
		yyb295 = r.CheckBreak()
	}
	if yyb295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj295++
	if yyhl295 {
		yyb295 = yyj295 > l
	} else {
		yyb295 = r.CheckBreak()
	}
	if yyb295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj295++
	if yyhl295 {
		yyb295 = yyj295 > l
	} else {
		yyb295 = r.CheckBreak()
	}
	if yyb295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj295++
	if yyhl295 {
		yyb295 = yyj295 > l
	} else {
		yyb295 = r.CheckBreak()
	}
	if yyb295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj295++
	if yyhl295 {
		yyb295 = yyj295 > l
	} else {
		yyb295 = r.CheckBreak()
	}
	if yyb295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj295++
	if yyhl295 {
		yyb295 = yyj295 > l
	} else {
		yyb295 = r.CheckBreak()
	}
	if yyb295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj295++
	if yyhl295 {
		yyb295 = yyj295 > l
	} else {
		yyb295 = r.CheckBreak()
	}
	if yyb295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj295++
	if yyhl295 {
		yyb295 = yyj295 > l
	} else {
		yyb295 = r.CheckBreak()
	}
	if yyb295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj295++
	if yyhl295 {
		yyb295 = yyj295 > l
	} else {
		yyb295 = r.CheckBreak()
	}
	if yyb295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj295++
	if yyhl295 {
		yyb295 = yyj295 > l
	} else {
		yyb295 = r.CheckBreak()
	}
	if yyb295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj295++
		if yyhl295 {
			yyb295 = yyj295 > l
		} else {
			yyb295 = r.CheckBreak()
		}
		if yyb295 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj295-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym310 := z.EncBinary()
		_ = yym310
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep311 := !z.EncBinary()
			yy2arr311 := z.EncBasicHandle().StructToArray
			var yyq311 [5]bool
			_, _, _ = yysep311, yyq311, yy2arr311
			const yyr311 bool = false
			yyq311[0] = x.Kind != ""
			yyq311[1] = x.APIVersion != ""
			yyq311[2] = true
			yyq311[3] = true
			yyq311[4] = true
			var yynn311 int
			if yyr311 || yy2arr311 {
				r.EncodeArrayStart(5)
			} else {
				yynn311 = 0
				for _, b := range yyq311 {
					if b {
						yynn311++
					}
				}
				r.EncodeMapStart(yynn311)
				yynn311 = 0
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[0] {
					yym313 := z.EncBinary()
					_ = yym313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq311[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym314 := z.EncBinary()
					_ = yym314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[1] {
					yym316 := z.EncBinary()
					_ = yym316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq311[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym317 := z.EncBinary()
					_ = yym317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[2] {
					yy319 := &x.ObjectMeta
					yy319.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy320 := &x.ObjectMeta
					yy320.CodecEncodeSelf(e)
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[3] {
					yy322 := &x.Spec
					yy322.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy323 := &x.Spec
					yy323.CodecEncodeSelf(e)
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[4] {
					yy325 := &x.Status
					yy325.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy326 := &x.Status
					yy326.CodecEncodeSelf(e)
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym327 := z.DecBinary()
	_ = yym327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct328 := r.ContainerType()
		if yyct328 == codecSelferValueTypeMap1234 {
			yyl328 := r.ReadMapStart()
			if yyl328 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl328, d)
			}
		} else if yyct328 == codecSelferValueTypeArray1234 {
			yyl328 := r.ReadArrayStart()
			if yyl328 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys329Slc
	var yyhl329 bool = l >= 0
	for yyj329 := 0; ; yyj329++ {
		if yyhl329 {
			if yyj329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys329Slc = r.DecodeBytes(yys329Slc, true, true)
		yys329 := string(yys329Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys329 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv332 := &x.ObjectMeta
				yyv332.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv333 := &x.Spec
				yyv333.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv334 := &x.Status
				yyv334.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys329)
		} // end switch yys329
	} // end for yyj329
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj335 int
	var yyb335 bool
	var yyhl335 bool = l >= 0
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv338 := &x.ObjectMeta
		yyv338.CodecDecodeSelf(d)
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv339 := &x.Spec
		yyv339.CodecDecodeSelf(d)
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv340 := &x.Status
		yyv340.CodecDecodeSelf(d)
	}
	for {
		yyj335++
		if yyhl335 {
			yyb335 = yyj335 > l
		} else {
			yyb335 = r.CheckBreak()
		}
		if yyb335 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj335-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym341 := z.EncBinary()
		_ = yym341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep342 := !z.EncBinary()
			yy2arr342 := z.EncBasicHandle().StructToArray
			var yyq342 [18]bool
			_, _, _ = yysep342, yyq342, yy2arr342
			const yyr342 bool = false
			yyq342[0] = len(x.Capacity) != 0
			yyq342[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq342[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq342[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq342[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq342[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq342[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq342[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq342[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq342[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq342[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq342[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq342[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq342[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq342[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq342[15] = len(x.AccessModes) != 0
			yyq342[16] = x.ClaimRef != nil
			yyq342[17] = x.PersistentVolumeReclaimPolicy != ""
			var yynn342 int
			if yyr342 || yy2arr342 {
				r.EncodeArrayStart(18)
			} else {
				yynn342 = 0
				for _, b := range yyq342 {
					if b {
						yynn342++
					}
				}
				r.EncodeMapStart(yynn342)
				yynn342 = 0
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq342[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn344 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn344 = true
				goto LABEL344
			}
		LABEL344:
			if yyr342 || yy2arr342 {
				if yyn344 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn344 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn345 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn345 = true
				goto LABEL345
			}
		LABEL345:
			if yyr342 || yy2arr342 {
				if yyn345 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn345 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn346 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn346 = true
				goto LABEL346
			}
		LABEL346:
			if yyr342 || yy2arr342 {
				if yyn346 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn346 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn347 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn347 = true
				goto LABEL347
			}
		LABEL347:
			if yyr342 || yy2arr342 {
				if yyn347 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn347 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn348 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn348 = true
				goto LABEL348
			}
		LABEL348:
			if yyr342 || yy2arr342 {
				if yyn348 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn348 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn349 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn349 = true
				goto LABEL349
			}
		LABEL349:
			if yyr342 || yy2arr342 {
				if yyn349 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn349 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn350 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn350 = true
				goto LABEL350
			}
		LABEL350:
			if yyr342 || yy2arr342 {
				if yyn350 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn350 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn351 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn351 = true
				goto LABEL351
			}
		LABEL351:
			if yyr342 || yy2arr342 {
				if yyn351 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn351 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn352 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn352 = true
				goto LABEL352
			}
		LABEL352:
			if yyr342 || yy2arr342 {
				if yyn352 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn352 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn353 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn353 = true
				goto LABEL353
			}
		LABEL353:
			if yyr342 || yy2arr342 {
				if yyn353 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn353 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn354 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn354 = true
				goto LABEL354
			}
		LABEL354:
			if yyr342 || yy2arr342 {
				if yyn354 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn354 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn355 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn355 = true
				goto LABEL355
			}
		LABEL355:
			if yyr342 || yy2arr342 {
				if yyn355 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn355 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn356 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn356 = true
				goto LABEL356
			}
		LABEL356:
			if yyr342 || yy2arr342 {
				if yyn356 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn356 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn357 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn357 = true
				goto LABEL357
			}
		LABEL357:
			if yyr342 || yy2arr342 {
				if yyn357 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn357 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[15] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym359 := z.EncBinary()
						_ = yym359
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq342[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym360 := z.EncBinary()
						_ = yym360
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[16] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq342[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[17] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq342[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym363 := z.DecBinary()
	_ = yym363
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct364 := r.ContainerType()
		if yyct364 == codecSelferValueTypeMap1234 {
			yyl364 := r.ReadMapStart()
			if yyl364 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl364, d)
			}
		} else if yyct364 == codecSelferValueTypeArray1234 {
			yyl364 := r.ReadArrayStart()
			if yyl364 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl364, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys365Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys365Slc
	var yyhl365 bool = l >= 0
	for yyj365 := 0; ; yyj365++ {
		if yyhl365 {
			if yyj365 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys365Slc = r.DecodeBytes(yys365Slc, true, true)
		yys365 := string(yys365Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys365 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv366 := &x.Capacity
				yyv366.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv381 := &x.AccessModes
				yym382 := z.DecBinary()
				_ = yym382
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv381), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys365)
		} // end switch yys365
	} // end for yyj365
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj385 int
	var yyb385 bool
	var yyhl385 bool = l >= 0
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv386 := &x.Capacity
		yyv386.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv401 := &x.AccessModes
		yym402 := z.DecBinary()
		_ = yym402
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv401), d)
		}
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj385++
		if yyhl385 {
			yyb385 = yyj385 > l
		} else {
			yyb385 = r.CheckBreak()
		}
		if yyb385 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj385-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym405 := z.EncBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym406 := z.DecBinary()
	_ = yym406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym407 := z.EncBinary()
		_ = yym407
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep408 := !z.EncBinary()
			yy2arr408 := z.EncBasicHandle().StructToArray
			var yyq408 [3]bool
			_, _, _ = yysep408, yyq408, yy2arr408
			const yyr408 bool = false
			yyq408[0] = x.Phase != ""
			yyq408[1] = x.Message != ""
			yyq408[2] = x.Reason != ""
			var yynn408 int
			if yyr408 || yy2arr408 {
				r.EncodeArrayStart(3)
			} else {
				yynn408 = 0
				for _, b := range yyq408 {
					if b {
						yynn408++
					}
				}
				r.EncodeMapStart(yynn408)
				yynn408 = 0
			}
			if yyr408 || yy2arr408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq408[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq408[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr408 || yy2arr408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq408[1] {
					yym411 := z.EncBinary()
					_ = yym411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq408[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym412 := z.EncBinary()
					_ = yym412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr408 || yy2arr408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq408[2] {
					yym414 := z.EncBinary()
					_ = yym414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq408[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr408 || yy2arr408 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym416 := z.DecBinary()
	_ = yym416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct417 := r.ContainerType()
		if yyct417 == codecSelferValueTypeMap1234 {
			yyl417 := r.ReadMapStart()
			if yyl417 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl417, d)
			}
		} else if yyct417 == codecSelferValueTypeArray1234 {
			yyl417 := r.ReadArrayStart()
			if yyl417 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl417, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys418Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys418Slc
	var yyhl418 bool = l >= 0
	for yyj418 := 0; ; yyj418++ {
		if yyhl418 {
			if yyj418 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys418Slc = r.DecodeBytes(yys418Slc, true, true)
		yys418 := string(yys418Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys418 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys418)
		} // end switch yys418
	} // end for yyj418
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj422 int
	var yyb422 bool
	var yyhl422 bool = l >= 0
	yyj422++
	if yyhl422 {
		yyb422 = yyj422 > l
	} else {
		yyb422 = r.CheckBreak()
	}
	if yyb422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj422++
	if yyhl422 {
		yyb422 = yyj422 > l
	} else {
		yyb422 = r.CheckBreak()
	}
	if yyb422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj422++
	if yyhl422 {
		yyb422 = yyj422 > l
	} else {
		yyb422 = r.CheckBreak()
	}
	if yyb422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj422++
		if yyhl422 {
			yyb422 = yyj422 > l
		} else {
			yyb422 = r.CheckBreak()
		}
		if yyb422 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj422-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym426 := z.EncBinary()
		_ = yym426
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep427 := !z.EncBinary()
			yy2arr427 := z.EncBasicHandle().StructToArray
			var yyq427 [4]bool
			_, _, _ = yysep427, yyq427, yy2arr427
			const yyr427 bool = false
			yyq427[0] = x.Kind != ""
			yyq427[1] = x.APIVersion != ""
			yyq427[2] = true
			var yynn427 int
			if yyr427 || yy2arr427 {
				r.EncodeArrayStart(4)
			} else {
				yynn427 = 1
				for _, b := range yyq427 {
					if b {
						yynn427++
					}
				}
				r.EncodeMapStart(yynn427)
				yynn427 = 0
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq427[0] {
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq427[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq427[1] {
					yym432 := z.EncBinary()
					_ = yym432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq427[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq427[2] {
					yy435 := &x.ListMeta
					yym436 := z.EncBinary()
					_ = yym436
					if false {
					} else if z.HasExtensions() && z.EncExt(yy435) {
					} else {
						z.EncFallback(yy435)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq427[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy437 := &x.ListMeta
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else if z.HasExtensions() && z.EncExt(yy437) {
					} else {
						z.EncFallback(yy437)
					}
				}
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym440 := z.EncBinary()
					_ = yym440
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym442 := z.DecBinary()
	_ = yym442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct443 := r.ContainerType()
		if yyct443 == codecSelferValueTypeMap1234 {
			yyl443 := r.ReadMapStart()
			if yyl443 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl443, d)
			}
		} else if yyct443 == codecSelferValueTypeArray1234 {
			yyl443 := r.ReadArrayStart()
			if yyl443 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl443, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys444Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys444Slc
	var yyhl444 bool = l >= 0
	for yyj444 := 0; ; yyj444++ {
		if yyhl444 {
			if yyj444 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys444Slc = r.DecodeBytes(yys444Slc, true, true)
		yys444 := string(yys444Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys444 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv447 := &x.ListMeta
				yym448 := z.DecBinary()
				_ = yym448
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv447) {
				} else {
					z.DecFallback(yyv447, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv449 := &x.Items
				yym450 := z.DecBinary()
				_ = yym450
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv449), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys444)
		} // end switch yys444
	} // end for yyj444
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj451 int
	var yyb451 bool
	var yyhl451 bool = l >= 0
	yyj451++
	if yyhl451 {
		yyb451 = yyj451 > l
	} else {
		yyb451 = r.CheckBreak()
	}
	if yyb451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj451++
	if yyhl451 {
		yyb451 = yyj451 > l
	} else {
		yyb451 = r.CheckBreak()
	}
	if yyb451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj451++
	if yyhl451 {
		yyb451 = yyj451 > l
	} else {
		yyb451 = r.CheckBreak()
	}
	if yyb451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv454 := &x.ListMeta
		yym455 := z.DecBinary()
		_ = yym455
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv454) {
		} else {
			z.DecFallback(yyv454, false)
		}
	}
	yyj451++
	if yyhl451 {
		yyb451 = yyj451 > l
	} else {
		yyb451 = r.CheckBreak()
	}
	if yyb451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv456 := &x.Items
		yym457 := z.DecBinary()
		_ = yym457
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv456), d)
		}
	}
	for {
		yyj451++
		if yyhl451 {
			yyb451 = yyj451 > l
		} else {
			yyb451 = r.CheckBreak()
		}
		if yyb451 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj451-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym458 := z.EncBinary()
		_ = yym458
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep459 := !z.EncBinary()
			yy2arr459 := z.EncBasicHandle().StructToArray
			var yyq459 [5]bool
			_, _, _ = yysep459, yyq459, yy2arr459
			const yyr459 bool = false
			yyq459[0] = x.Kind != ""
			yyq459[1] = x.APIVersion != ""
			yyq459[2] = true
			yyq459[3] = true
			yyq459[4] = true
			var yynn459 int
			if yyr459 || yy2arr459 {
				r.EncodeArrayStart(5)
			} else {
				yynn459 = 0
				for _, b := range yyq459 {
					if b {
						yynn459++
					}
				}
				r.EncodeMapStart(yynn459)
				yynn459 = 0
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq459[0] {
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq459[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym462 := z.EncBinary()
					_ = yym462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq459[1] {
					yym464 := z.EncBinary()
					_ = yym464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq459[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq459[2] {
					yy467 := &x.ObjectMeta
					yy467.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq459[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy468 := &x.ObjectMeta
					yy468.CodecEncodeSelf(e)
				}
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq459[3] {
					yy470 := &x.Spec
					yy470.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq459[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy471 := &x.Spec
					yy471.CodecEncodeSelf(e)
				}
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq459[4] {
					yy473 := &x.Status
					yy473.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq459[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy474 := &x.Status
					yy474.CodecEncodeSelf(e)
				}
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym475 := z.DecBinary()
	_ = yym475
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct476 := r.ContainerType()
		if yyct476 == codecSelferValueTypeMap1234 {
			yyl476 := r.ReadMapStart()
			if yyl476 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl476, d)
			}
		} else if yyct476 == codecSelferValueTypeArray1234 {
			yyl476 := r.ReadArrayStart()
			if yyl476 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl476, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys477Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys477Slc
	var yyhl477 bool = l >= 0
	for yyj477 := 0; ; yyj477++ {
		if yyhl477 {
			if yyj477 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys477Slc = r.DecodeBytes(yys477Slc, true, true)
		yys477 := string(yys477Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys477 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv480 := &x.ObjectMeta
				yyv480.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv481 := &x.Spec
				yyv481.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv482 := &x.Status
				yyv482.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys477)
		} // end switch yys477
	} // end for yyj477
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj483 int
	var yyb483 bool
	var yyhl483 bool = l >= 0
	yyj483++
	if yyhl483 {
		yyb483 = yyj483 > l
	} else {
		yyb483 = r.CheckBreak()
	}
	if yyb483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj483++
	if yyhl483 {
		yyb483 = yyj483 > l
	} else {
		yyb483 = r.CheckBreak()
	}
	if yyb483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj483++
	if yyhl483 {
		yyb483 = yyj483 > l
	} else {
		yyb483 = r.CheckBreak()
	}
	if yyb483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv486 := &x.ObjectMeta
		yyv486.CodecDecodeSelf(d)
	}
	yyj483++
	if yyhl483 {
		yyb483 = yyj483 > l
	} else {
		yyb483 = r.CheckBreak()
	}
	if yyb483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv487 := &x.Spec
		yyv487.CodecDecodeSelf(d)
	}
	yyj483++
	if yyhl483 {
		yyb483 = yyj483 > l
	} else {
		yyb483 = r.CheckBreak()
	}
	if yyb483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv488 := &x.Status
		yyv488.CodecDecodeSelf(d)
	}
	for {
		yyj483++
		if yyhl483 {
			yyb483 = yyj483 > l
		} else {
			yyb483 = r.CheckBreak()
		}
		if yyb483 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj483-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym489 := z.EncBinary()
		_ = yym489
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep490 := !z.EncBinary()
			yy2arr490 := z.EncBasicHandle().StructToArray
			var yyq490 [4]bool
			_, _, _ = yysep490, yyq490, yy2arr490
			const yyr490 bool = false
			yyq490[0] = x.Kind != ""
			yyq490[1] = x.APIVersion != ""
			yyq490[2] = true
			var yynn490 int
			if yyr490 || yy2arr490 {
				r.EncodeArrayStart(4)
			} else {
				yynn490 = 1
				for _, b := range yyq490 {
					if b {
						yynn490++
					}
				}
				r.EncodeMapStart(yynn490)
				yynn490 = 0
			}
			if yyr490 || yy2arr490 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq490[0] {
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq490[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym493 := z.EncBinary()
					_ = yym493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr490 || yy2arr490 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq490[1] {
					yym495 := z.EncBinary()
					_ = yym495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq490[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym496 := z.EncBinary()
					_ = yym496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr490 || yy2arr490 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq490[2] {
					yy498 := &x.ListMeta
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else if z.HasExtensions() && z.EncExt(yy498) {
					} else {
						z.EncFallback(yy498)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq490[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy500 := &x.ListMeta
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else if z.HasExtensions() && z.EncExt(yy500) {
					} else {
						z.EncFallback(yy500)
					}
				}
			}
			if yyr490 || yy2arr490 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym503 := z.EncBinary()
					_ = yym503
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym504 := z.EncBinary()
					_ = yym504
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr490 || yy2arr490 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym505 := z.DecBinary()
	_ = yym505
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct506 := r.ContainerType()
		if yyct506 == codecSelferValueTypeMap1234 {
			yyl506 := r.ReadMapStart()
			if yyl506 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl506, d)
			}
		} else if yyct506 == codecSelferValueTypeArray1234 {
			yyl506 := r.ReadArrayStart()
			if yyl506 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl506, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys507Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys507Slc
	var yyhl507 bool = l >= 0
	for yyj507 := 0; ; yyj507++ {
		if yyhl507 {
			if yyj507 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys507Slc = r.DecodeBytes(yys507Slc, true, true)
		yys507 := string(yys507Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys507 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv510 := &x.ListMeta
				yym511 := z.DecBinary()
				_ = yym511
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv510) {
				} else {
					z.DecFallback(yyv510, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv512 := &x.Items
				yym513 := z.DecBinary()
				_ = yym513
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv512), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys507)
		} // end switch yys507
	} // end for yyj507
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj514 int
	var yyb514 bool
	var yyhl514 bool = l >= 0
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv517 := &x.ListMeta
		yym518 := z.DecBinary()
		_ = yym518
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv517) {
		} else {
			z.DecFallback(yyv517, false)
		}
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv519 := &x.Items
		yym520 := z.DecBinary()
		_ = yym520
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv519), d)
		}
	}
	for {
		yyj514++
		if yyhl514 {
			yyb514 = yyj514 > l
		} else {
			yyb514 = r.CheckBreak()
		}
		if yyb514 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj514-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym521 := z.EncBinary()
		_ = yym521
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep522 := !z.EncBinary()
			yy2arr522 := z.EncBasicHandle().StructToArray
			var yyq522 [4]bool
			_, _, _ = yysep522, yyq522, yy2arr522
			const yyr522 bool = false
			yyq522[0] = len(x.AccessModes) != 0
			yyq522[1] = x.Selector != nil
			yyq522[2] = true
			yyq522[3] = x.VolumeName != ""
			var yynn522 int
			if yyr522 || yy2arr522 {
				r.EncodeArrayStart(4)
			} else {
				yynn522 = 0
				for _, b := range yyq522 {
					if b {
						yynn522++
					}
				}
				r.EncodeMapStart(yynn522)
				yynn522 = 0
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq522[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym524 := z.EncBinary()
						_ = yym524
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq522[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym525 := z.EncBinary()
						_ = yym525
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq522[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym527 := z.EncBinary()
						_ = yym527
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq522[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym528 := z.EncBinary()
						_ = yym528
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq522[2] {
					yy530 := &x.Resources
					yy530.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq522[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy531 := &x.Resources
					yy531.CodecEncodeSelf(e)
				}
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq522[3] {
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq522[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym534 := z.EncBinary()
					_ = yym534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym535 := z.DecBinary()
	_ = yym535
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct536 := r.ContainerType()
		if yyct536 == codecSelferValueTypeMap1234 {
			yyl536 := r.ReadMapStart()
			if yyl536 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl536, d)
			}
		} else if yyct536 == codecSelferValueTypeArray1234 {
			yyl536 := r.ReadArrayStart()
			if yyl536 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl536, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys537Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys537Slc
	var yyhl537 bool = l >= 0
	for yyj537 := 0; ; yyj537++ {
		if yyhl537 {
			if yyj537 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys537Slc = r.DecodeBytes(yys537Slc, true, true)
		yys537 := string(yys537Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys537 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv538 := &x.AccessModes
				yym539 := z.DecBinary()
				_ = yym539
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv538), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym541 := z.DecBinary()
				_ = yym541
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv542 := &x.Resources
				yyv542.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys537)
		} // end switch yys537
	} // end for yyj537
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj544 int
	var yyb544 bool
	var yyhl544 bool = l >= 0
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv545 := &x.AccessModes
		yym546 := z.DecBinary()
		_ = yym546
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv545), d)
		}
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym548 := z.DecBinary()
		_ = yym548
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv549 := &x.Resources
		yyv549.CodecDecodeSelf(d)
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj544++
		if yyhl544 {
			yyb544 = yyj544 > l
		} else {
			yyb544 = r.CheckBreak()
		}
		if yyb544 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj544-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym551 := z.EncBinary()
		_ = yym551
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep552 := !z.EncBinary()
			yy2arr552 := z.EncBasicHandle().StructToArray
			var yyq552 [3]bool
			_, _, _ = yysep552, yyq552, yy2arr552
			const yyr552 bool = false
			yyq552[0] = x.Phase != ""
			yyq552[1] = len(x.AccessModes) != 0
			yyq552[2] = len(x.Capacity) != 0
			var yynn552 int
			if yyr552 || yy2arr552 {
				r.EncodeArrayStart(3)
			} else {
				yynn552 = 0
				for _, b := range yyq552 {
					if b {
						yynn552++
					}
				}
				r.EncodeMapStart(yynn552)
				yynn552 = 0
			}
			if yyr552 || yy2arr552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq552[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq552[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr552 || yy2arr552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq552[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym555 := z.EncBinary()
						_ = yym555
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq552[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym556 := z.EncBinary()
						_ = yym556
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr552 || yy2arr552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq552[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq552[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr552 || yy2arr552 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym558 := z.DecBinary()
	_ = yym558
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct559 := r.ContainerType()
		if yyct559 == codecSelferValueTypeMap1234 {
			yyl559 := r.ReadMapStart()
			if yyl559 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl559, d)
			}
		} else if yyct559 == codecSelferValueTypeArray1234 {
			yyl559 := r.ReadArrayStart()
			if yyl559 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl559, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys560Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys560Slc
	var yyhl560 bool = l >= 0
	for yyj560 := 0; ; yyj560++ {
		if yyhl560 {
			if yyj560 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys560Slc = r.DecodeBytes(yys560Slc, true, true)
		yys560 := string(yys560Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys560 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv562 := &x.AccessModes
				yym563 := z.DecBinary()
				_ = yym563
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv562), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv564 := &x.Capacity
				yyv564.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys560)
		} // end switch yys560
	} // end for yyj560
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj565 int
	var yyb565 bool
	var yyhl565 bool = l >= 0
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv567 := &x.AccessModes
		yym568 := z.DecBinary()
		_ = yym568
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv567), d)
		}
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv569 := &x.Capacity
		yyv569.CodecDecodeSelf(d)
	}
	for {
		yyj565++
		if yyhl565 {
			yyb565 = yyj565 > l
		} else {
			yyb565 = r.CheckBreak()
		}
		if yyb565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym570 := z.EncBinary()
	_ = yym570
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym571 := z.DecBinary()
	_ = yym571
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym572 := z.EncBinary()
	_ = yym572
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym573 := z.DecBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym574 := z.EncBinary()
	_ = yym574
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym575 := z.DecBinary()
	_ = yym575
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym576 := z.EncBinary()
		_ = yym576
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep577 := !z.EncBinary()
			yy2arr577 := z.EncBasicHandle().StructToArray
			var yyq577 [1]bool
			_, _, _ = yysep577, yyq577, yy2arr577
			const yyr577 bool = false
			var yynn577 int
			if yyr577 || yy2arr577 {
				r.EncodeArrayStart(1)
			} else {
				yynn577 = 1
				for _, b := range yyq577 {
					if b {
						yynn577++
					}
				}
				r.EncodeMapStart(yynn577)
				yynn577 = 0
			}
			if yyr577 || yy2arr577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym579 := z.EncBinary()
				_ = yym579
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym580 := z.EncBinary()
				_ = yym580
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr577 || yy2arr577 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym581 := z.DecBinary()
	_ = yym581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct582 := r.ContainerType()
		if yyct582 == codecSelferValueTypeMap1234 {
			yyl582 := r.ReadMapStart()
			if yyl582 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl582, d)
			}
		} else if yyct582 == codecSelferValueTypeArray1234 {
			yyl582 := r.ReadArrayStart()
			if yyl582 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl582, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys583Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys583Slc
	var yyhl583 bool = l >= 0
	for yyj583 := 0; ; yyj583++ {
		if yyhl583 {
			if yyj583 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys583Slc = r.DecodeBytes(yys583Slc, true, true)
		yys583 := string(yys583Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys583 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys583)
		} // end switch yys583
	} // end for yyj583
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj585 int
	var yyb585 bool
	var yyhl585 bool = l >= 0
	yyj585++
	if yyhl585 {
		yyb585 = yyj585 > l
	} else {
		yyb585 = r.CheckBreak()
	}
	if yyb585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj585++
		if yyhl585 {
			yyb585 = yyj585 > l
		} else {
			yyb585 = r.CheckBreak()
		}
		if yyb585 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj585-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym587 := z.EncBinary()
		_ = yym587
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep588 := !z.EncBinary()
			yy2arr588 := z.EncBasicHandle().StructToArray
			var yyq588 [1]bool
			_, _, _ = yysep588, yyq588, yy2arr588
			const yyr588 bool = false
			yyq588[0] = x.Medium != ""
			var yynn588 int
			if yyr588 || yy2arr588 {
				r.EncodeArrayStart(1)
			} else {
				yynn588 = 0
				for _, b := range yyq588 {
					if b {
						yynn588++
					}
				}
				r.EncodeMapStart(yynn588)
				yynn588 = 0
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq588[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq588[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym590 := z.DecBinary()
	_ = yym590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct591 := r.ContainerType()
		if yyct591 == codecSelferValueTypeMap1234 {
			yyl591 := r.ReadMapStart()
			if yyl591 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl591, d)
			}
		} else if yyct591 == codecSelferValueTypeArray1234 {
			yyl591 := r.ReadArrayStart()
			if yyl591 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl591, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys592Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys592Slc
	var yyhl592 bool = l >= 0
	for yyj592 := 0; ; yyj592++ {
		if yyhl592 {
			if yyj592 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys592Slc = r.DecodeBytes(yys592Slc, true, true)
		yys592 := string(yys592Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys592 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys592)
		} // end switch yys592
	} // end for yyj592
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj594 int
	var yyb594 bool
	var yyhl594 bool = l >= 0
	yyj594++
	if yyhl594 {
		yyb594 = yyj594 > l
	} else {
		yyb594 = r.CheckBreak()
	}
	if yyb594 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj594++
		if yyhl594 {
			yyb594 = yyj594 > l
		} else {
			yyb594 = r.CheckBreak()
		}
		if yyb594 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj594-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym596 := z.EncBinary()
		_ = yym596
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep597 := !z.EncBinary()
			yy2arr597 := z.EncBasicHandle().StructToArray
			var yyq597 [3]bool
			_, _, _ = yysep597, yyq597, yy2arr597
			const yyr597 bool = false
			yyq597[2] = x.ReadOnly != false
			var yynn597 int
			if yyr597 || yy2arr597 {
				r.EncodeArrayStart(3)
			} else {
				yynn597 = 2
				for _, b := range yyq597 {
					if b {
						yynn597++
					}
				}
				r.EncodeMapStart(yynn597)
				yynn597 = 0
			}
			if yyr597 || yy2arr597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym599 := z.EncBinary()
				_ = yym599
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym600 := z.EncBinary()
				_ = yym600
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr597 || yy2arr597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym602 := z.EncBinary()
				_ = yym602
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym603 := z.EncBinary()
				_ = yym603
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr597 || yy2arr597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq597[2] {
					yym605 := z.EncBinary()
					_ = yym605
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq597[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym606 := z.EncBinary()
					_ = yym606
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr597 || yy2arr597 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym607 := z.DecBinary()
	_ = yym607
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct608 := r.ContainerType()
		if yyct608 == codecSelferValueTypeMap1234 {
			yyl608 := r.ReadMapStart()
			if yyl608 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl608, d)
			}
		} else if yyct608 == codecSelferValueTypeArray1234 {
			yyl608 := r.ReadArrayStart()
			if yyl608 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl608, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys609Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys609Slc
	var yyhl609 bool = l >= 0
	for yyj609 := 0; ; yyj609++ {
		if yyhl609 {
			if yyj609 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys609Slc = r.DecodeBytes(yys609Slc, true, true)
		yys609 := string(yys609Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys609 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys609)
		} // end switch yys609
	} // end for yyj609
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj613 int
	var yyb613 bool
	var yyhl613 bool = l >= 0
	yyj613++
	if yyhl613 {
		yyb613 = yyj613 > l
	} else {
		yyb613 = r.CheckBreak()
	}
	if yyb613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj613++
	if yyhl613 {
		yyb613 = yyj613 > l
	} else {
		yyb613 = r.CheckBreak()
	}
	if yyb613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj613++
	if yyhl613 {
		yyb613 = yyj613 > l
	} else {
		yyb613 = r.CheckBreak()
	}
	if yyb613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj613++
		if yyhl613 {
			yyb613 = yyj613 > l
		} else {
			yyb613 = r.CheckBreak()
		}
		if yyb613 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj613-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym617 := z.EncBinary()
		_ = yym617
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep618 := !z.EncBinary()
			yy2arr618 := z.EncBasicHandle().StructToArray
			var yyq618 [8]bool
			_, _, _ = yysep618, yyq618, yy2arr618
			const yyr618 bool = false
			yyq618[2] = x.FSType != ""
			yyq618[3] = x.RBDPool != ""
			yyq618[4] = x.RadosUser != ""
			yyq618[5] = x.Keyring != ""
			yyq618[6] = x.SecretRef != nil
			yyq618[7] = x.ReadOnly != false
			var yynn618 int
			if yyr618 || yy2arr618 {
				r.EncodeArrayStart(8)
			} else {
				yynn618 = 2
				for _, b := range yyq618 {
					if b {
						yynn618++
					}
				}
				r.EncodeMapStart(yynn618)
				yynn618 = 0
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym623 := z.EncBinary()
				_ = yym623
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym624 := z.EncBinary()
				_ = yym624
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[2] {
					yym626 := z.EncBinary()
					_ = yym626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq618[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[3] {
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq618[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[4] {
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq618[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[5] {
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq618[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq618[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[7] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq618[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym641 := z.DecBinary()
	_ = yym641
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct642 := r.ContainerType()
		if yyct642 == codecSelferValueTypeMap1234 {
			yyl642 := r.ReadMapStart()
			if yyl642 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl642, d)
			}
		} else if yyct642 == codecSelferValueTypeArray1234 {
			yyl642 := r.ReadArrayStart()
			if yyl642 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl642, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys643Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys643Slc
	var yyhl643 bool = l >= 0
	for yyj643 := 0; ; yyj643++ {
		if yyhl643 {
			if yyj643 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys643Slc = r.DecodeBytes(yys643Slc, true, true)
		yys643 := string(yys643Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys643 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv644 := &x.CephMonitors
				yym645 := z.DecBinary()
				_ = yym645
				if false {
				} else {
					z.F.DecSliceStringX(yyv644, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys643)
		} // end switch yys643
	} // end for yyj643
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj653 int
	var yyb653 bool
	var yyhl653 bool = l >= 0
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv654 := &x.CephMonitors
		yym655 := z.DecBinary()
		_ = yym655
		if false {
		} else {
			z.F.DecSliceStringX(yyv654, false, d)
		}
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj653++
		if yyhl653 {
			yyb653 = yyj653 > l
		} else {
			yyb653 = r.CheckBreak()
		}
		if yyb653 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj653-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym663 := z.EncBinary()
		_ = yym663
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep664 := !z.EncBinary()
			yy2arr664 := z.EncBasicHandle().StructToArray
			var yyq664 [3]bool
			_, _, _ = yysep664, yyq664, yy2arr664
			const yyr664 bool = false
			yyq664[1] = x.FSType != ""
			yyq664[2] = x.ReadOnly != false
			var yynn664 int
			if yyr664 || yy2arr664 {
				r.EncodeArrayStart(3)
			} else {
				yynn664 = 1
				for _, b := range yyq664 {
					if b {
						yynn664++
					}
				}
				r.EncodeMapStart(yynn664)
				yynn664 = 0
			}
			if yyr664 || yy2arr664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym666 := z.EncBinary()
				_ = yym666
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym667 := z.EncBinary()
				_ = yym667
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr664 || yy2arr664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq664[1] {
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq664[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym670 := z.EncBinary()
					_ = yym670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr664 || yy2arr664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq664[2] {
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq664[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr664 || yy2arr664 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym674 := z.DecBinary()
	_ = yym674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct675 := r.ContainerType()
		if yyct675 == codecSelferValueTypeMap1234 {
			yyl675 := r.ReadMapStart()
			if yyl675 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl675, d)
			}
		} else if yyct675 == codecSelferValueTypeArray1234 {
			yyl675 := r.ReadArrayStart()
			if yyl675 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys676Slc
	var yyhl676 bool = l >= 0
	for yyj676 := 0; ; yyj676++ {
		if yyhl676 {
			if yyj676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys676Slc = r.DecodeBytes(yys676Slc, true, true)
		yys676 := string(yys676Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys676 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys676)
		} // end switch yys676
	} // end for yyj676
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj680 int
	var yyb680 bool
	var yyhl680 bool = l >= 0
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj680++
		if yyhl680 {
			yyb680 = yyj680 > l
		} else {
			yyb680 = r.CheckBreak()
		}
		if yyb680 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj680-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym684 := z.EncBinary()
		_ = yym684
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep685 := !z.EncBinary()
			yy2arr685 := z.EncBasicHandle().StructToArray
			var yyq685 [6]bool
			_, _, _ = yysep685, yyq685, yy2arr685
			const yyr685 bool = false
			yyq685[1] = x.Path != ""
			yyq685[2] = x.User != ""
			yyq685[3] = x.SecretFile != ""
			yyq685[4] = x.SecretRef != nil
			yyq685[5] = x.ReadOnly != false
			var yynn685 int
			if yyr685 || yy2arr685 {
				r.EncodeArrayStart(6)
			} else {
				yynn685 = 1
				for _, b := range yyq685 {
					if b {
						yynn685++
					}
				}
				r.EncodeMapStart(yynn685)
				yynn685 = 0
			}
			if yyr685 || yy2arr685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr685 || yy2arr685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq685[1] {
					yym690 := z.EncBinary()
					_ = yym690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq685[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr685 || yy2arr685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq685[2] {
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq685[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym694 := z.EncBinary()
					_ = yym694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr685 || yy2arr685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq685[3] {
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq685[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym697 := z.EncBinary()
					_ = yym697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr685 || yy2arr685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq685[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq685[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr685 || yy2arr685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq685[5] {
					yym700 := z.EncBinary()
					_ = yym700
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq685[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym701 := z.EncBinary()
					_ = yym701
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr685 || yy2arr685 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym702 := z.DecBinary()
	_ = yym702
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct703 := r.ContainerType()
		if yyct703 == codecSelferValueTypeMap1234 {
			yyl703 := r.ReadMapStart()
			if yyl703 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl703, d)
			}
		} else if yyct703 == codecSelferValueTypeArray1234 {
			yyl703 := r.ReadArrayStart()
			if yyl703 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl703, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys704Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys704Slc
	var yyhl704 bool = l >= 0
	for yyj704 := 0; ; yyj704++ {
		if yyhl704 {
			if yyj704 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys704Slc = r.DecodeBytes(yys704Slc, true, true)
		yys704 := string(yys704Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys704 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv705 := &x.Monitors
				yym706 := z.DecBinary()
				_ = yym706
				if false {
				} else {
					z.F.DecSliceStringX(yyv705, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys704)
		} // end switch yys704
	} // end for yyj704
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj712 int
	var yyb712 bool
	var yyhl712 bool = l >= 0
	yyj712++
	if yyhl712 {
		yyb712 = yyj712 > l
	} else {
		yyb712 = r.CheckBreak()
	}
	if yyb712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv713 := &x.Monitors
		yym714 := z.DecBinary()
		_ = yym714
		if false {
		} else {
			z.F.DecSliceStringX(yyv713, false, d)
		}
	}
	yyj712++
	if yyhl712 {
		yyb712 = yyj712 > l
	} else {
		yyb712 = r.CheckBreak()
	}
	if yyb712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj712++
	if yyhl712 {
		yyb712 = yyj712 > l
	} else {
		yyb712 = r.CheckBreak()
	}
	if yyb712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj712++
	if yyhl712 {
		yyb712 = yyj712 > l
	} else {
		yyb712 = r.CheckBreak()
	}
	if yyb712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj712++
	if yyhl712 {
		yyb712 = yyj712 > l
	} else {
		yyb712 = r.CheckBreak()
	}
	if yyb712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj712++
	if yyhl712 {
		yyb712 = yyj712 > l
	} else {
		yyb712 = r.CheckBreak()
	}
	if yyb712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj712++
		if yyhl712 {
			yyb712 = yyj712 > l
		} else {
			yyb712 = r.CheckBreak()
		}
		if yyb712 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj712-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym720 := z.EncBinary()
		_ = yym720
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep721 := !z.EncBinary()
			yy2arr721 := z.EncBasicHandle().StructToArray
			var yyq721 [1]bool
			_, _, _ = yysep721, yyq721, yy2arr721
			const yyr721 bool = false
			var yynn721 int
			if yyr721 || yy2arr721 {
				r.EncodeArrayStart(1)
			} else {
				yynn721 = 1
				for _, b := range yyq721 {
					if b {
						yynn721++
					}
				}
				r.EncodeMapStart(yynn721)
				yynn721 = 0
			}
			if yyr721 || yy2arr721 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym723 := z.EncBinary()
				_ = yym723
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr721 || yy2arr721 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym725 := z.DecBinary()
	_ = yym725
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct726 := r.ContainerType()
		if yyct726 == codecSelferValueTypeMap1234 {
			yyl726 := r.ReadMapStart()
			if yyl726 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl726, d)
			}
		} else if yyct726 == codecSelferValueTypeArray1234 {
			yyl726 := r.ReadArrayStart()
			if yyl726 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl726, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys727Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys727Slc
	var yyhl727 bool = l >= 0
	for yyj727 := 0; ; yyj727++ {
		if yyhl727 {
			if yyj727 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys727Slc = r.DecodeBytes(yys727Slc, true, true)
		yys727 := string(yys727Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys727 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys727)
		} // end switch yys727
	} // end for yyj727
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj729 int
	var yyb729 bool
	var yyhl729 bool = l >= 0
	yyj729++
	if yyhl729 {
		yyb729 = yyj729 > l
	} else {
		yyb729 = r.CheckBreak()
	}
	if yyb729 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj729++
		if yyhl729 {
			yyb729 = yyj729 > l
		} else {
			yyb729 = r.CheckBreak()
		}
		if yyb729 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj729-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym731 := z.EncBinary()
	_ = yym731
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym732 := z.DecBinary()
	_ = yym732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym733 := z.EncBinary()
	_ = yym733
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym734 := z.DecBinary()
	_ = yym734
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym735 := z.EncBinary()
		_ = yym735
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep736 := !z.EncBinary()
			yy2arr736 := z.EncBasicHandle().StructToArray
			var yyq736 [4]bool
			_, _, _ = yysep736, yyq736, yy2arr736
			const yyr736 bool = false
			yyq736[1] = x.FSType != ""
			yyq736[2] = x.Partition != 0
			yyq736[3] = x.ReadOnly != false
			var yynn736 int
			if yyr736 || yy2arr736 {
				r.EncodeArrayStart(4)
			} else {
				yynn736 = 1
				for _, b := range yyq736 {
					if b {
						yynn736++
					}
				}
				r.EncodeMapStart(yynn736)
				yynn736 = 0
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym738 := z.EncBinary()
				_ = yym738
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym739 := z.EncBinary()
				_ = yym739
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[1] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq736[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[2] {
					yym744 := z.EncBinary()
					_ = yym744
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq736[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym745 := z.EncBinary()
					_ = yym745
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[3] {
					yym747 := z.EncBinary()
					_ = yym747
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq736[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym748 := z.EncBinary()
					_ = yym748
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym749 := z.DecBinary()
	_ = yym749
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct750 := r.ContainerType()
		if yyct750 == codecSelferValueTypeMap1234 {
			yyl750 := r.ReadMapStart()
			if yyl750 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl750, d)
			}
		} else if yyct750 == codecSelferValueTypeArray1234 {
			yyl750 := r.ReadArrayStart()
			if yyl750 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl750, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys751Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys751Slc
	var yyhl751 bool = l >= 0
	for yyj751 := 0; ; yyj751++ {
		if yyhl751 {
			if yyj751 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys751Slc = r.DecodeBytes(yys751Slc, true, true)
		yys751 := string(yys751Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys751 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys751)
		} // end switch yys751
	} // end for yyj751
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj756 int
	var yyb756 bool
	var yyhl756 bool = l >= 0
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj756++
		if yyhl756 {
			yyb756 = yyj756 > l
		} else {
			yyb756 = r.CheckBreak()
		}
		if yyb756 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj756-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym761 := z.EncBinary()
		_ = yym761
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep762 := !z.EncBinary()
			yy2arr762 := z.EncBasicHandle().StructToArray
			var yyq762 [5]bool
			_, _, _ = yysep762, yyq762, yy2arr762
			const yyr762 bool = false
			yyq762[1] = x.FSType != ""
			yyq762[2] = x.SecretRef != nil
			yyq762[3] = x.ReadOnly != false
			yyq762[4] = len(x.Options) != 0
			var yynn762 int
			if yyr762 || yy2arr762 {
				r.EncodeArrayStart(5)
			} else {
				yynn762 = 1
				for _, b := range yyq762 {
					if b {
						yynn762++
					}
				}
				r.EncodeMapStart(yynn762)
				yynn762 = 0
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym764 := z.EncBinary()
				_ = yym764
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym765 := z.EncBinary()
				_ = yym765
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq762[1] {
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq762[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq762[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq762[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq762[3] {
					yym771 := z.EncBinary()
					_ = yym771
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq762[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym772 := z.EncBinary()
					_ = yym772
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq762[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym774 := z.EncBinary()
						_ = yym774
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq762[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym775 := z.EncBinary()
						_ = yym775
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym776 := z.DecBinary()
	_ = yym776
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct777 := r.ContainerType()
		if yyct777 == codecSelferValueTypeMap1234 {
			yyl777 := r.ReadMapStart()
			if yyl777 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl777, d)
			}
		} else if yyct777 == codecSelferValueTypeArray1234 {
			yyl777 := r.ReadArrayStart()
			if yyl777 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl777, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys778Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys778Slc
	var yyhl778 bool = l >= 0
	for yyj778 := 0; ; yyj778++ {
		if yyhl778 {
			if yyj778 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys778Slc = r.DecodeBytes(yys778Slc, true, true)
		yys778 := string(yys778Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys778 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv783 := &x.Options
				yym784 := z.DecBinary()
				_ = yym784
				if false {
				} else {
					z.F.DecMapStringStringX(yyv783, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys778)
		} // end switch yys778
	} // end for yyj778
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj785 int
	var yyb785 bool
	var yyhl785 bool = l >= 0
	yyj785++
	if yyhl785 {
		yyb785 = yyj785 > l
	} else {
		yyb785 = r.CheckBreak()
	}
	if yyb785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj785++
	if yyhl785 {
		yyb785 = yyj785 > l
	} else {
		yyb785 = r.CheckBreak()
	}
	if yyb785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj785++
	if yyhl785 {
		yyb785 = yyj785 > l
	} else {
		yyb785 = r.CheckBreak()
	}
	if yyb785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj785++
	if yyhl785 {
		yyb785 = yyj785 > l
	} else {
		yyb785 = r.CheckBreak()
	}
	if yyb785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj785++
	if yyhl785 {
		yyb785 = yyj785 > l
	} else {
		yyb785 = r.CheckBreak()
	}
	if yyb785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv790 := &x.Options
		yym791 := z.DecBinary()
		_ = yym791
		if false {
		} else {
			z.F.DecMapStringStringX(yyv790, false, d)
		}
	}
	for {
		yyj785++
		if yyhl785 {
			yyb785 = yyj785 > l
		} else {
			yyb785 = r.CheckBreak()
		}
		if yyb785 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj785-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym792 := z.EncBinary()
		_ = yym792
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep793 := !z.EncBinary()
			yy2arr793 := z.EncBasicHandle().StructToArray
			var yyq793 [4]bool
			_, _, _ = yysep793, yyq793, yy2arr793
			const yyr793 bool = false
			yyq793[1] = x.FSType != ""
			yyq793[2] = x.Partition != 0
			yyq793[3] = x.ReadOnly != false
			var yynn793 int
			if yyr793 || yy2arr793 {
				r.EncodeArrayStart(4)
			} else {
				yynn793 = 1
				for _, b := range yyq793 {
					if b {
						yynn793++
					}
				}
				r.EncodeMapStart(yynn793)
				yynn793 = 0
			}
			if yyr793 || yy2arr793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym795 := z.EncBinary()
				_ = yym795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym796 := z.EncBinary()
				_ = yym796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr793 || yy2arr793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq793[1] {
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq793[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr793 || yy2arr793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq793[2] {
					yym801 := z.EncBinary()
					_ = yym801
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq793[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym802 := z.EncBinary()
					_ = yym802
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr793 || yy2arr793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq793[3] {
					yym804 := z.EncBinary()
					_ = yym804
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq793[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym805 := z.EncBinary()
					_ = yym805
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr793 || yy2arr793 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym806 := z.DecBinary()
	_ = yym806
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct807 := r.ContainerType()
		if yyct807 == codecSelferValueTypeMap1234 {
			yyl807 := r.ReadMapStart()
			if yyl807 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl807, d)
			}
		} else if yyct807 == codecSelferValueTypeArray1234 {
			yyl807 := r.ReadArrayStart()
			if yyl807 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl807, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys808Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys808Slc
	var yyhl808 bool = l >= 0
	for yyj808 := 0; ; yyj808++ {
		if yyhl808 {
			if yyj808 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys808Slc = r.DecodeBytes(yys808Slc, true, true)
		yys808 := string(yys808Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys808 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys808)
		} // end switch yys808
	} // end for yyj808
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj813 int
	var yyb813 bool
	var yyhl813 bool = l >= 0
	yyj813++
	if yyhl813 {
		yyb813 = yyj813 > l
	} else {
		yyb813 = r.CheckBreak()
	}
	if yyb813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj813++
	if yyhl813 {
		yyb813 = yyj813 > l
	} else {
		yyb813 = r.CheckBreak()
	}
	if yyb813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj813++
	if yyhl813 {
		yyb813 = yyj813 > l
	} else {
		yyb813 = r.CheckBreak()
	}
	if yyb813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj813++
	if yyhl813 {
		yyb813 = yyj813 > l
	} else {
		yyb813 = r.CheckBreak()
	}
	if yyb813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj813++
		if yyhl813 {
			yyb813 = yyj813 > l
		} else {
			yyb813 = r.CheckBreak()
		}
		if yyb813 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj813-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym818 := z.EncBinary()
		_ = yym818
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep819 := !z.EncBinary()
			yy2arr819 := z.EncBasicHandle().StructToArray
			var yyq819 [3]bool
			_, _, _ = yysep819, yyq819, yy2arr819
			const yyr819 bool = false
			yyq819[1] = x.Revision != ""
			yyq819[2] = x.Directory != ""
			var yynn819 int
			if yyr819 || yy2arr819 {
				r.EncodeArrayStart(3)
			} else {
				yynn819 = 1
				for _, b := range yyq819 {
					if b {
						yynn819++
					}
				}
				r.EncodeMapStart(yynn819)
				yynn819 = 0
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym821 := z.EncBinary()
				_ = yym821
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym822 := z.EncBinary()
				_ = yym822
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[1] {
					yym824 := z.EncBinary()
					_ = yym824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym825 := z.EncBinary()
					_ = yym825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[2] {
					yym827 := z.EncBinary()
					_ = yym827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym828 := z.EncBinary()
					_ = yym828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym829 := z.DecBinary()
	_ = yym829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct830 := r.ContainerType()
		if yyct830 == codecSelferValueTypeMap1234 {
			yyl830 := r.ReadMapStart()
			if yyl830 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl830, d)
			}
		} else if yyct830 == codecSelferValueTypeArray1234 {
			yyl830 := r.ReadArrayStart()
			if yyl830 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl830, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys831Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys831Slc
	var yyhl831 bool = l >= 0
	for yyj831 := 0; ; yyj831++ {
		if yyhl831 {
			if yyj831 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys831Slc = r.DecodeBytes(yys831Slc, true, true)
		yys831 := string(yys831Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys831 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys831)
		} // end switch yys831
	} // end for yyj831
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj835 int
	var yyb835 bool
	var yyhl835 bool = l >= 0
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj835++
		if yyhl835 {
			yyb835 = yyj835 > l
		} else {
			yyb835 = r.CheckBreak()
		}
		if yyb835 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj835-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym839 := z.EncBinary()
		_ = yym839
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep840 := !z.EncBinary()
			yy2arr840 := z.EncBasicHandle().StructToArray
			var yyq840 [2]bool
			_, _, _ = yysep840, yyq840, yy2arr840
			const yyr840 bool = false
			yyq840[0] = x.SecretName != ""
			yyq840[1] = len(x.Items) != 0
			var yynn840 int
			if yyr840 || yy2arr840 {
				r.EncodeArrayStart(2)
			} else {
				yynn840 = 0
				for _, b := range yyq840 {
					if b {
						yynn840++
					}
				}
				r.EncodeMapStart(yynn840)
				yynn840 = 0
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq840[0] {
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq840[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym843 := z.EncBinary()
					_ = yym843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq840[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym845 := z.EncBinary()
						_ = yym845
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq840[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym846 := z.EncBinary()
						_ = yym846
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym847 := z.DecBinary()
	_ = yym847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct848 := r.ContainerType()
		if yyct848 == codecSelferValueTypeMap1234 {
			yyl848 := r.ReadMapStart()
			if yyl848 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl848, d)
			}
		} else if yyct848 == codecSelferValueTypeArray1234 {
			yyl848 := r.ReadArrayStart()
			if yyl848 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl848, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys849Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys849Slc
	var yyhl849 bool = l >= 0
	for yyj849 := 0; ; yyj849++ {
		if yyhl849 {
			if yyj849 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys849Slc = r.DecodeBytes(yys849Slc, true, true)
		yys849 := string(yys849Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys849 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv851 := &x.Items
				yym852 := z.DecBinary()
				_ = yym852
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv851), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys849)
		} // end switch yys849
	} // end for yyj849
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj853 int
	var yyb853 bool
	var yyhl853 bool = l >= 0
	yyj853++
	if yyhl853 {
		yyb853 = yyj853 > l
	} else {
		yyb853 = r.CheckBreak()
	}
	if yyb853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj853++
	if yyhl853 {
		yyb853 = yyj853 > l
	} else {
		yyb853 = r.CheckBreak()
	}
	if yyb853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv855 := &x.Items
		yym856 := z.DecBinary()
		_ = yym856
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv855), d)
		}
	}
	for {
		yyj853++
		if yyhl853 {
			yyb853 = yyj853 > l
		} else {
			yyb853 = r.CheckBreak()
		}
		if yyb853 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj853-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym857 := z.EncBinary()
		_ = yym857
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep858 := !z.EncBinary()
			yy2arr858 := z.EncBasicHandle().StructToArray
			var yyq858 [3]bool
			_, _, _ = yysep858, yyq858, yy2arr858
			const yyr858 bool = false
			yyq858[2] = x.ReadOnly != false
			var yynn858 int
			if yyr858 || yy2arr858 {
				r.EncodeArrayStart(3)
			} else {
				yynn858 = 2
				for _, b := range yyq858 {
					if b {
						yynn858++
					}
				}
				r.EncodeMapStart(yynn858)
				yynn858 = 0
			}
			if yyr858 || yy2arr858 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym860 := z.EncBinary()
				_ = yym860
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym861 := z.EncBinary()
				_ = yym861
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr858 || yy2arr858 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym863 := z.EncBinary()
				_ = yym863
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym864 := z.EncBinary()
				_ = yym864
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr858 || yy2arr858 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq858[2] {
					yym866 := z.EncBinary()
					_ = yym866
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq858[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym867 := z.EncBinary()
					_ = yym867
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr858 || yy2arr858 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym868 := z.DecBinary()
	_ = yym868
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct869 := r.ContainerType()
		if yyct869 == codecSelferValueTypeMap1234 {
			yyl869 := r.ReadMapStart()
			if yyl869 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl869, d)
			}
		} else if yyct869 == codecSelferValueTypeArray1234 {
			yyl869 := r.ReadArrayStart()
			if yyl869 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl869, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys870Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys870Slc
	var yyhl870 bool = l >= 0
	for yyj870 := 0; ; yyj870++ {
		if yyhl870 {
			if yyj870 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys870Slc = r.DecodeBytes(yys870Slc, true, true)
		yys870 := string(yys870Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys870 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys870)
		} // end switch yys870
	} // end for yyj870
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj874 int
	var yyb874 bool
	var yyhl874 bool = l >= 0
	yyj874++
	if yyhl874 {
		yyb874 = yyj874 > l
	} else {
		yyb874 = r.CheckBreak()
	}
	if yyb874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj874++
	if yyhl874 {
		yyb874 = yyj874 > l
	} else {
		yyb874 = r.CheckBreak()
	}
	if yyb874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj874++
	if yyhl874 {
		yyb874 = yyj874 > l
	} else {
		yyb874 = r.CheckBreak()
	}
	if yyb874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj874++
		if yyhl874 {
			yyb874 = yyj874 > l
		} else {
			yyb874 = r.CheckBreak()
		}
		if yyb874 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj874-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym878 := z.EncBinary()
		_ = yym878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep879 := !z.EncBinary()
			yy2arr879 := z.EncBasicHandle().StructToArray
			var yyq879 [6]bool
			_, _, _ = yysep879, yyq879, yy2arr879
			const yyr879 bool = false
			yyq879[3] = x.ISCSIInterface != ""
			yyq879[4] = x.FSType != ""
			yyq879[5] = x.ReadOnly != false
			var yynn879 int
			if yyr879 || yy2arr879 {
				r.EncodeArrayStart(6)
			} else {
				yynn879 = 3
				for _, b := range yyq879 {
					if b {
						yynn879++
					}
				}
				r.EncodeMapStart(yynn879)
				yynn879 = 0
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym881 := z.EncBinary()
				_ = yym881
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym882 := z.EncBinary()
				_ = yym882
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym884 := z.EncBinary()
				_ = yym884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym885 := z.EncBinary()
				_ = yym885
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym887 := z.EncBinary()
				_ = yym887
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym888 := z.EncBinary()
				_ = yym888
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq879[3] {
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq879[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq879[4] {
					yym893 := z.EncBinary()
					_ = yym893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq879[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq879[5] {
					yym896 := z.EncBinary()
					_ = yym896
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq879[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym898 := z.DecBinary()
	_ = yym898
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct899 := r.ContainerType()
		if yyct899 == codecSelferValueTypeMap1234 {
			yyl899 := r.ReadMapStart()
			if yyl899 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl899, d)
			}
		} else if yyct899 == codecSelferValueTypeArray1234 {
			yyl899 := r.ReadArrayStart()
			if yyl899 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl899, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys900Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys900Slc
	var yyhl900 bool = l >= 0
	for yyj900 := 0; ; yyj900++ {
		if yyhl900 {
			if yyj900 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys900Slc = r.DecodeBytes(yys900Slc, true, true)
		yys900 := string(yys900Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys900 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys900)
		} // end switch yys900
	} // end for yyj900
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj907 int
	var yyb907 bool
	var yyhl907 bool = l >= 0
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj907++
		if yyhl907 {
			yyb907 = yyj907 > l
		} else {
			yyb907 = r.CheckBreak()
		}
		if yyb907 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj907-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym914 := z.EncBinary()
		_ = yym914
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep915 := !z.EncBinary()
			yy2arr915 := z.EncBasicHandle().StructToArray
			var yyq915 [4]bool
			_, _, _ = yysep915, yyq915, yy2arr915
			const yyr915 bool = false
			yyq915[2] = x.FSType != ""
			yyq915[3] = x.ReadOnly != false
			var yynn915 int
			if yyr915 || yy2arr915 {
				r.EncodeArrayStart(4)
			} else {
				yynn915 = 2
				for _, b := range yyq915 {
					if b {
						yynn915++
					}
				}
				r.EncodeMapStart(yynn915)
				yynn915 = 0
			}
			if yyr915 || yy2arr915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym918 := z.EncBinary()
					_ = yym918
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr915 || yy2arr915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy920 := *x.Lun
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeInt(int64(yy920))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy922 := *x.Lun
					yym923 := z.EncBinary()
					_ = yym923
					if false {
					} else {
						r.EncodeInt(int64(yy922))
					}
				}
			}
			if yyr915 || yy2arr915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq915[2] {
					yym925 := z.EncBinary()
					_ = yym925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq915[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym926 := z.EncBinary()
					_ = yym926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr915 || yy2arr915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq915[3] {
					yym928 := z.EncBinary()
					_ = yym928
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq915[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym929 := z.EncBinary()
					_ = yym929
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr915 || yy2arr915 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym930 := z.DecBinary()
	_ = yym930
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct931 := r.ContainerType()
		if yyct931 == codecSelferValueTypeMap1234 {
			yyl931 := r.ReadMapStart()
			if yyl931 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl931, d)
			}
		} else if yyct931 == codecSelferValueTypeArray1234 {
			yyl931 := r.ReadArrayStart()
			if yyl931 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl931, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys932Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys932Slc
	var yyhl932 bool = l >= 0
	for yyj932 := 0; ; yyj932++ {
		if yyhl932 {
			if yyj932 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys932Slc = r.DecodeBytes(yys932Slc, true, true)
		yys932 := string(yys932Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys932 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv933 := &x.TargetWWNs
				yym934 := z.DecBinary()
				_ = yym934
				if false {
				} else {
					z.F.DecSliceStringX(yyv933, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym936 := z.DecBinary()
				_ = yym936
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys932)
		} // end switch yys932
	} // end for yyj932
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj939 int
	var yyb939 bool
	var yyhl939 bool = l >= 0
	yyj939++
	if yyhl939 {
		yyb939 = yyj939 > l
	} else {
		yyb939 = r.CheckBreak()
	}
	if yyb939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv940 := &x.TargetWWNs
		yym941 := z.DecBinary()
		_ = yym941
		if false {
		} else {
			z.F.DecSliceStringX(yyv940, false, d)
		}
	}
	yyj939++
	if yyhl939 {
		yyb939 = yyj939 > l
	} else {
		yyb939 = r.CheckBreak()
	}
	if yyb939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym943 := z.DecBinary()
		_ = yym943
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj939++
	if yyhl939 {
		yyb939 = yyj939 > l
	} else {
		yyb939 = r.CheckBreak()
	}
	if yyb939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj939++
	if yyhl939 {
		yyb939 = yyj939 > l
	} else {
		yyb939 = r.CheckBreak()
	}
	if yyb939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj939++
		if yyhl939 {
			yyb939 = yyj939 > l
		} else {
			yyb939 = r.CheckBreak()
		}
		if yyb939 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj939-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym946 := z.EncBinary()
		_ = yym946
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep947 := !z.EncBinary()
			yy2arr947 := z.EncBasicHandle().StructToArray
			var yyq947 [3]bool
			_, _, _ = yysep947, yyq947, yy2arr947
			const yyr947 bool = false
			yyq947[2] = x.ReadOnly != false
			var yynn947 int
			if yyr947 || yy2arr947 {
				r.EncodeArrayStart(3)
			} else {
				yynn947 = 2
				for _, b := range yyq947 {
					if b {
						yynn947++
					}
				}
				r.EncodeMapStart(yynn947)
				yynn947 = 0
			}
			if yyr947 || yy2arr947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym949 := z.EncBinary()
				_ = yym949
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym950 := z.EncBinary()
				_ = yym950
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr947 || yy2arr947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym952 := z.EncBinary()
				_ = yym952
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym953 := z.EncBinary()
				_ = yym953
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr947 || yy2arr947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq947[2] {
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq947[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym956 := z.EncBinary()
					_ = yym956
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr947 || yy2arr947 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym957 := z.DecBinary()
	_ = yym957
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct958 := r.ContainerType()
		if yyct958 == codecSelferValueTypeMap1234 {
			yyl958 := r.ReadMapStart()
			if yyl958 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl958, d)
			}
		} else if yyct958 == codecSelferValueTypeArray1234 {
			yyl958 := r.ReadArrayStart()
			if yyl958 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl958, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys959Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys959Slc
	var yyhl959 bool = l >= 0
	for yyj959 := 0; ; yyj959++ {
		if yyhl959 {
			if yyj959 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys959Slc = r.DecodeBytes(yys959Slc, true, true)
		yys959 := string(yys959Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys959 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys959)
		} // end switch yys959
	} // end for yyj959
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj963 int
	var yyb963 bool
	var yyhl963 bool = l >= 0
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj963++
		if yyhl963 {
			yyb963 = yyj963 > l
		} else {
			yyb963 = r.CheckBreak()
		}
		if yyb963 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj963-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym967 := z.EncBinary()
		_ = yym967
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep968 := !z.EncBinary()
			yy2arr968 := z.EncBasicHandle().StructToArray
			var yyq968 [2]bool
			_, _, _ = yysep968, yyq968, yy2arr968
			const yyr968 bool = false
			yyq968[1] = x.FSType != ""
			var yynn968 int
			if yyr968 || yy2arr968 {
				r.EncodeArrayStart(2)
			} else {
				yynn968 = 1
				for _, b := range yyq968 {
					if b {
						yynn968++
					}
				}
				r.EncodeMapStart(yynn968)
				yynn968 = 0
			}
			if yyr968 || yy2arr968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym970 := z.EncBinary()
				_ = yym970
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym971 := z.EncBinary()
				_ = yym971
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr968 || yy2arr968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq968[1] {
					yym973 := z.EncBinary()
					_ = yym973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq968[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym974 := z.EncBinary()
					_ = yym974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr968 || yy2arr968 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym975 := z.DecBinary()
	_ = yym975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct976 := r.ContainerType()
		if yyct976 == codecSelferValueTypeMap1234 {
			yyl976 := r.ReadMapStart()
			if yyl976 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl976, d)
			}
		} else if yyct976 == codecSelferValueTypeArray1234 {
			yyl976 := r.ReadArrayStart()
			if yyl976 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys977Slc
	var yyhl977 bool = l >= 0
	for yyj977 := 0; ; yyj977++ {
		if yyhl977 {
			if yyj977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys977Slc = r.DecodeBytes(yys977Slc, true, true)
		yys977 := string(yys977Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys977 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys977)
		} // end switch yys977
	} // end for yyj977
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj980 int
	var yyb980 bool
	var yyhl980 bool = l >= 0
	yyj980++
	if yyhl980 {
		yyb980 = yyj980 > l
	} else {
		yyb980 = r.CheckBreak()
	}
	if yyb980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj980++
	if yyhl980 {
		yyb980 = yyj980 > l
	} else {
		yyb980 = r.CheckBreak()
	}
	if yyb980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj980++
		if yyhl980 {
			yyb980 = yyj980 > l
		} else {
			yyb980 = r.CheckBreak()
		}
		if yyb980 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj980-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym983 := z.EncBinary()
		_ = yym983
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep984 := !z.EncBinary()
			yy2arr984 := z.EncBasicHandle().StructToArray
			var yyq984 [2]bool
			_, _, _ = yysep984, yyq984, yy2arr984
			const yyr984 bool = false
			yyq984[0] = x.Name != ""
			yyq984[1] = len(x.Items) != 0
			var yynn984 int
			if yyr984 || yy2arr984 {
				r.EncodeArrayStart(2)
			} else {
				yynn984 = 0
				for _, b := range yyq984 {
					if b {
						yynn984++
					}
				}
				r.EncodeMapStart(yynn984)
				yynn984 = 0
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[0] {
					yym986 := z.EncBinary()
					_ = yym986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq984[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym989 := z.EncBinary()
						_ = yym989
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq984[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym990 := z.EncBinary()
						_ = yym990
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym991 := z.DecBinary()
	_ = yym991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct992 := r.ContainerType()
		if yyct992 == codecSelferValueTypeMap1234 {
			yyl992 := r.ReadMapStart()
			if yyl992 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl992, d)
			}
		} else if yyct992 == codecSelferValueTypeArray1234 {
			yyl992 := r.ReadArrayStart()
			if yyl992 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl992, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys993Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys993Slc
	var yyhl993 bool = l >= 0
	for yyj993 := 0; ; yyj993++ {
		if yyhl993 {
			if yyj993 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys993Slc = r.DecodeBytes(yys993Slc, true, true)
		yys993 := string(yys993Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys993 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv995 := &x.Items
				yym996 := z.DecBinary()
				_ = yym996
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv995), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys993)
		} // end switch yys993
	} // end for yyj993
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj997 int
	var yyb997 bool
	var yyhl997 bool = l >= 0
	yyj997++
	if yyhl997 {
		yyb997 = yyj997 > l
	} else {
		yyb997 = r.CheckBreak()
	}
	if yyb997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj997++
	if yyhl997 {
		yyb997 = yyj997 > l
	} else {
		yyb997 = r.CheckBreak()
	}
	if yyb997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv999 := &x.Items
		yym1000 := z.DecBinary()
		_ = yym1000
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv999), d)
		}
	}
	for {
		yyj997++
		if yyhl997 {
			yyb997 = yyj997 > l
		} else {
			yyb997 = r.CheckBreak()
		}
		if yyb997 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj997-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1001 := z.EncBinary()
		_ = yym1001
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1002 := !z.EncBinary()
			yy2arr1002 := z.EncBasicHandle().StructToArray
			var yyq1002 [2]bool
			_, _, _ = yysep1002, yyq1002, yy2arr1002
			const yyr1002 bool = false
			var yynn1002 int
			if yyr1002 || yy2arr1002 {
				r.EncodeArrayStart(2)
			} else {
				yynn1002 = 2
				for _, b := range yyq1002 {
					if b {
						yynn1002++
					}
				}
				r.EncodeMapStart(yynn1002)
				yynn1002 = 0
			}
			if yyr1002 || yy2arr1002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1004 := z.EncBinary()
				_ = yym1004
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1005 := z.EncBinary()
				_ = yym1005
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1002 || yy2arr1002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1007 := z.EncBinary()
				_ = yym1007
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1008 := z.EncBinary()
				_ = yym1008
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1002 || yy2arr1002 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1009 := z.DecBinary()
	_ = yym1009
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1010 := r.ContainerType()
		if yyct1010 == codecSelferValueTypeMap1234 {
			yyl1010 := r.ReadMapStart()
			if yyl1010 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1010, d)
			}
		} else if yyct1010 == codecSelferValueTypeArray1234 {
			yyl1010 := r.ReadArrayStart()
			if yyl1010 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1010, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1011Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1011Slc
	var yyhl1011 bool = l >= 0
	for yyj1011 := 0; ; yyj1011++ {
		if yyhl1011 {
			if yyj1011 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1011Slc = r.DecodeBytes(yys1011Slc, true, true)
		yys1011 := string(yys1011Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1011 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1011)
		} // end switch yys1011
	} // end for yyj1011
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1014 int
	var yyb1014 bool
	var yyhl1014 bool = l >= 0
	yyj1014++
	if yyhl1014 {
		yyb1014 = yyj1014 > l
	} else {
		yyb1014 = r.CheckBreak()
	}
	if yyb1014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1014++
	if yyhl1014 {
		yyb1014 = yyj1014 > l
	} else {
		yyb1014 = r.CheckBreak()
	}
	if yyb1014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj1014++
		if yyhl1014 {
			yyb1014 = yyj1014 > l
		} else {
			yyb1014 = r.CheckBreak()
		}
		if yyb1014 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1014-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1017 := z.EncBinary()
		_ = yym1017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1018 := !z.EncBinary()
			yy2arr1018 := z.EncBasicHandle().StructToArray
			var yyq1018 [5]bool
			_, _, _ = yysep1018, yyq1018, yy2arr1018
			const yyr1018 bool = false
			yyq1018[0] = x.Name != ""
			yyq1018[1] = x.HostPort != 0
			yyq1018[3] = x.Protocol != ""
			yyq1018[4] = x.HostIP != ""
			var yynn1018 int
			if yyr1018 || yy2arr1018 {
				r.EncodeArrayStart(5)
			} else {
				yynn1018 = 1
				for _, b := range yyq1018 {
					if b {
						yynn1018++
					}
				}
				r.EncodeMapStart(yynn1018)
				yynn1018 = 0
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1018[0] {
					yym1020 := z.EncBinary()
					_ = yym1020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1018[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1021 := z.EncBinary()
					_ = yym1021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1018[1] {
					yym1023 := z.EncBinary()
					_ = yym1023
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1018[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1024 := z.EncBinary()
					_ = yym1024
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1026 := z.EncBinary()
				_ = yym1026
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1027 := z.EncBinary()
				_ = yym1027
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1018[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1018[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1018[4] {
					yym1030 := z.EncBinary()
					_ = yym1030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1018[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1031 := z.EncBinary()
					_ = yym1031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1032 := z.DecBinary()
	_ = yym1032
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1033 := r.ContainerType()
		if yyct1033 == codecSelferValueTypeMap1234 {
			yyl1033 := r.ReadMapStart()
			if yyl1033 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1033, d)
			}
		} else if yyct1033 == codecSelferValueTypeArray1234 {
			yyl1033 := r.ReadArrayStart()
			if yyl1033 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1033, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1034Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1034Slc
	var yyhl1034 bool = l >= 0
	for yyj1034 := 0; ; yyj1034++ {
		if yyhl1034 {
			if yyj1034 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1034Slc = r.DecodeBytes(yys1034Slc, true, true)
		yys1034 := string(yys1034Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1034 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1034)
		} // end switch yys1034
	} // end for yyj1034
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1040 int
	var yyb1040 bool
	var yyhl1040 bool = l >= 0
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1040++
		if yyhl1040 {
			yyb1040 = yyj1040 > l
		} else {
			yyb1040 = r.CheckBreak()
		}
		if yyb1040 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1040-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1046 := z.EncBinary()
		_ = yym1046
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1047 := !z.EncBinary()
			yy2arr1047 := z.EncBasicHandle().StructToArray
			var yyq1047 [4]bool
			_, _, _ = yysep1047, yyq1047, yy2arr1047
			const yyr1047 bool = false
			yyq1047[1] = x.ReadOnly != false
			yyq1047[3] = x.SubPath != ""
			var yynn1047 int
			if yyr1047 || yy2arr1047 {
				r.EncodeArrayStart(4)
			} else {
				yynn1047 = 2
				for _, b := range yyq1047 {
					if b {
						yynn1047++
					}
				}
				r.EncodeMapStart(yynn1047)
				yynn1047 = 0
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1049 := z.EncBinary()
				_ = yym1049
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1050 := z.EncBinary()
				_ = yym1050
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[1] {
					yym1052 := z.EncBinary()
					_ = yym1052
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1047[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1053 := z.EncBinary()
					_ = yym1053
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1055 := z.EncBinary()
				_ = yym1055
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1056 := z.EncBinary()
				_ = yym1056
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[3] {
					yym1058 := z.EncBinary()
					_ = yym1058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1047[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1059 := z.EncBinary()
					_ = yym1059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1060 := z.DecBinary()
	_ = yym1060
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1061 := r.ContainerType()
		if yyct1061 == codecSelferValueTypeMap1234 {
			yyl1061 := r.ReadMapStart()
			if yyl1061 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1061, d)
			}
		} else if yyct1061 == codecSelferValueTypeArray1234 {
			yyl1061 := r.ReadArrayStart()
			if yyl1061 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1061, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1062Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1062Slc
	var yyhl1062 bool = l >= 0
	for yyj1062 := 0; ; yyj1062++ {
		if yyhl1062 {
			if yyj1062 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1062Slc = r.DecodeBytes(yys1062Slc, true, true)
		yys1062 := string(yys1062Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1062 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1062)
		} // end switch yys1062
	} // end for yyj1062
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1067 int
	var yyb1067 bool
	var yyhl1067 bool = l >= 0
	yyj1067++
	if yyhl1067 {
		yyb1067 = yyj1067 > l
	} else {
		yyb1067 = r.CheckBreak()
	}
	if yyb1067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1067++
	if yyhl1067 {
		yyb1067 = yyj1067 > l
	} else {
		yyb1067 = r.CheckBreak()
	}
	if yyb1067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1067++
	if yyhl1067 {
		yyb1067 = yyj1067 > l
	} else {
		yyb1067 = r.CheckBreak()
	}
	if yyb1067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1067++
	if yyhl1067 {
		yyb1067 = yyj1067 > l
	} else {
		yyb1067 = r.CheckBreak()
	}
	if yyb1067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1067++
		if yyhl1067 {
			yyb1067 = yyj1067 > l
		} else {
			yyb1067 = r.CheckBreak()
		}
		if yyb1067 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1067-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1072 := z.EncBinary()
		_ = yym1072
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1073 := !z.EncBinary()
			yy2arr1073 := z.EncBasicHandle().StructToArray
			var yyq1073 [3]bool
			_, _, _ = yysep1073, yyq1073, yy2arr1073
			const yyr1073 bool = false
			yyq1073[1] = x.Value != ""
			yyq1073[2] = x.ValueFrom != nil
			var yynn1073 int
			if yyr1073 || yy2arr1073 {
				r.EncodeArrayStart(3)
			} else {
				yynn1073 = 1
				for _, b := range yyq1073 {
					if b {
						yynn1073++
					}
				}
				r.EncodeMapStart(yynn1073)
				yynn1073 = 0
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1075 := z.EncBinary()
				_ = yym1075
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1076 := z.EncBinary()
				_ = yym1076
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1073[1] {
					yym1078 := z.EncBinary()
					_ = yym1078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1073[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1079 := z.EncBinary()
					_ = yym1079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1073[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1073[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1081 := z.DecBinary()
	_ = yym1081
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1082 := r.ContainerType()
		if yyct1082 == codecSelferValueTypeMap1234 {
			yyl1082 := r.ReadMapStart()
			if yyl1082 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1082, d)
			}
		} else if yyct1082 == codecSelferValueTypeArray1234 {
			yyl1082 := r.ReadArrayStart()
			if yyl1082 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1082, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1083Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1083Slc
	var yyhl1083 bool = l >= 0
	for yyj1083 := 0; ; yyj1083++ {
		if yyhl1083 {
			if yyj1083 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1083Slc = r.DecodeBytes(yys1083Slc, true, true)
		yys1083 := string(yys1083Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1083 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1083)
		} // end switch yys1083
	} // end for yyj1083
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1087 int
	var yyb1087 bool
	var yyhl1087 bool = l >= 0
	yyj1087++
	if yyhl1087 {
		yyb1087 = yyj1087 > l
	} else {
		yyb1087 = r.CheckBreak()
	}
	if yyb1087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1087++
	if yyhl1087 {
		yyb1087 = yyj1087 > l
	} else {
		yyb1087 = r.CheckBreak()
	}
	if yyb1087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1087++
	if yyhl1087 {
		yyb1087 = yyj1087 > l
	} else {
		yyb1087 = r.CheckBreak()
	}
	if yyb1087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1087++
		if yyhl1087 {
			yyb1087 = yyj1087 > l
		} else {
			yyb1087 = r.CheckBreak()
		}
		if yyb1087 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1087-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1091 := z.EncBinary()
		_ = yym1091
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1092 := !z.EncBinary()
			yy2arr1092 := z.EncBasicHandle().StructToArray
			var yyq1092 [4]bool
			_, _, _ = yysep1092, yyq1092, yy2arr1092
			const yyr1092 bool = false
			yyq1092[0] = x.FieldRef != nil
			yyq1092[1] = x.ResourceFieldRef != nil
			yyq1092[2] = x.ConfigMapKeyRef != nil
			yyq1092[3] = x.SecretKeyRef != nil
			var yynn1092 int
			if yyr1092 || yy2arr1092 {
				r.EncodeArrayStart(4)
			} else {
				yynn1092 = 0
				for _, b := range yyq1092 {
					if b {
						yynn1092++
					}
				}
				r.EncodeMapStart(yynn1092)
				yynn1092 = 0
			}
			if yyr1092 || yy2arr1092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1092[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1092[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1092 || yy2arr1092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1092[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1092[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1092 || yy2arr1092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1092[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1092[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1092 || yy2arr1092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1092[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1092[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1092 || yy2arr1092 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1097 := z.DecBinary()
	_ = yym1097
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1098 := r.ContainerType()
		if yyct1098 == codecSelferValueTypeMap1234 {
			yyl1098 := r.ReadMapStart()
			if yyl1098 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1098, d)
			}
		} else if yyct1098 == codecSelferValueTypeArray1234 {
			yyl1098 := r.ReadArrayStart()
			if yyl1098 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1098, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1099Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1099Slc
	var yyhl1099 bool = l >= 0
	for yyj1099 := 0; ; yyj1099++ {
		if yyhl1099 {
			if yyj1099 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1099Slc = r.DecodeBytes(yys1099Slc, true, true)
		yys1099 := string(yys1099Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1099 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1099)
		} // end switch yys1099
	} // end for yyj1099
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1104 int
	var yyb1104 bool
	var yyhl1104 bool = l >= 0
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1104++
		if yyhl1104 {
			yyb1104 = yyj1104 > l
		} else {
			yyb1104 = r.CheckBreak()
		}
		if yyb1104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1109 := z.EncBinary()
		_ = yym1109
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1110 := !z.EncBinary()
			yy2arr1110 := z.EncBasicHandle().StructToArray
			var yyq1110 [2]bool
			_, _, _ = yysep1110, yyq1110, yy2arr1110
			const yyr1110 bool = false
			yyq1110[0] = x.APIVersion != ""
			var yynn1110 int
			if yyr1110 || yy2arr1110 {
				r.EncodeArrayStart(2)
			} else {
				yynn1110 = 1
				for _, b := range yyq1110 {
					if b {
						yynn1110++
					}
				}
				r.EncodeMapStart(yynn1110)
				yynn1110 = 0
			}
			if yyr1110 || yy2arr1110 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1110[0] {
					yym1112 := z.EncBinary()
					_ = yym1112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1110[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1113 := z.EncBinary()
					_ = yym1113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1110 || yy2arr1110 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1115 := z.EncBinary()
				_ = yym1115
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1116 := z.EncBinary()
				_ = yym1116
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1110 || yy2arr1110 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1117 := z.DecBinary()
	_ = yym1117
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1118 := r.ContainerType()
		if yyct1118 == codecSelferValueTypeMap1234 {
			yyl1118 := r.ReadMapStart()
			if yyl1118 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1118, d)
			}
		} else if yyct1118 == codecSelferValueTypeArray1234 {
			yyl1118 := r.ReadArrayStart()
			if yyl1118 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1118, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1119Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1119Slc
	var yyhl1119 bool = l >= 0
	for yyj1119 := 0; ; yyj1119++ {
		if yyhl1119 {
			if yyj1119 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1119Slc = r.DecodeBytes(yys1119Slc, true, true)
		yys1119 := string(yys1119Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1119 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1119)
		} // end switch yys1119
	} // end for yyj1119
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1122 int
	var yyb1122 bool
	var yyhl1122 bool = l >= 0
	yyj1122++
	if yyhl1122 {
		yyb1122 = yyj1122 > l
	} else {
		yyb1122 = r.CheckBreak()
	}
	if yyb1122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1122++
	if yyhl1122 {
		yyb1122 = yyj1122 > l
	} else {
		yyb1122 = r.CheckBreak()
	}
	if yyb1122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1122++
		if yyhl1122 {
			yyb1122 = yyj1122 > l
		} else {
			yyb1122 = r.CheckBreak()
		}
		if yyb1122 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1122-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1125 := z.EncBinary()
		_ = yym1125
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1126 := !z.EncBinary()
			yy2arr1126 := z.EncBasicHandle().StructToArray
			var yyq1126 [3]bool
			_, _, _ = yysep1126, yyq1126, yy2arr1126
			const yyr1126 bool = false
			yyq1126[0] = x.ContainerName != ""
			yyq1126[2] = true
			var yynn1126 int
			if yyr1126 || yy2arr1126 {
				r.EncodeArrayStart(3)
			} else {
				yynn1126 = 1
				for _, b := range yyq1126 {
					if b {
						yynn1126++
					}
				}
				r.EncodeMapStart(yynn1126)
				yynn1126 = 0
			}
			if yyr1126 || yy2arr1126 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1126[0] {
					yym1128 := z.EncBinary()
					_ = yym1128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1126[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1129 := z.EncBinary()
					_ = yym1129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1126 || yy2arr1126 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1131 := z.EncBinary()
				_ = yym1131
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1132 := z.EncBinary()
				_ = yym1132
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1126 || yy2arr1126 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1126[2] {
					yy1134 := &x.Divisor
					yym1135 := z.EncBinary()
					_ = yym1135
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1134) {
					} else if !yym1135 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1134)
					} else {
						z.EncFallback(yy1134)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1126[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1136 := &x.Divisor
					yym1137 := z.EncBinary()
					_ = yym1137
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1136) {
					} else if !yym1137 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1136)
					} else {
						z.EncFallback(yy1136)
					}
				}
			}
			if yyr1126 || yy2arr1126 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1138 := z.DecBinary()
	_ = yym1138
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1139 := r.ContainerType()
		if yyct1139 == codecSelferValueTypeMap1234 {
			yyl1139 := r.ReadMapStart()
			if yyl1139 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1139, d)
			}
		} else if yyct1139 == codecSelferValueTypeArray1234 {
			yyl1139 := r.ReadArrayStart()
			if yyl1139 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1139, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1140Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1140Slc
	var yyhl1140 bool = l >= 0
	for yyj1140 := 0; ; yyj1140++ {
		if yyhl1140 {
			if yyj1140 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1140Slc = r.DecodeBytes(yys1140Slc, true, true)
		yys1140 := string(yys1140Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1140 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1143 := &x.Divisor
				yym1144 := z.DecBinary()
				_ = yym1144
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1143) {
				} else if !yym1144 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1143)
				} else {
					z.DecFallback(yyv1143, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1140)
		} // end switch yys1140
	} // end for yyj1140
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1145 int
	var yyb1145 bool
	var yyhl1145 bool = l >= 0
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1148 := &x.Divisor
		yym1149 := z.DecBinary()
		_ = yym1149
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1148) {
		} else if !yym1149 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1148)
		} else {
			z.DecFallback(yyv1148, false)
		}
	}
	for {
		yyj1145++
		if yyhl1145 {
			yyb1145 = yyj1145 > l
		} else {
			yyb1145 = r.CheckBreak()
		}
		if yyb1145 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1145-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1150 := z.EncBinary()
		_ = yym1150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1151 := !z.EncBinary()
			yy2arr1151 := z.EncBasicHandle().StructToArray
			var yyq1151 [2]bool
			_, _, _ = yysep1151, yyq1151, yy2arr1151
			const yyr1151 bool = false
			yyq1151[0] = x.Name != ""
			var yynn1151 int
			if yyr1151 || yy2arr1151 {
				r.EncodeArrayStart(2)
			} else {
				yynn1151 = 1
				for _, b := range yyq1151 {
					if b {
						yynn1151++
					}
				}
				r.EncodeMapStart(yynn1151)
				yynn1151 = 0
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1151[0] {
					yym1153 := z.EncBinary()
					_ = yym1153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1151[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1154 := z.EncBinary()
					_ = yym1154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1156 := z.EncBinary()
				_ = yym1156
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1157 := z.EncBinary()
				_ = yym1157
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1158 := z.DecBinary()
	_ = yym1158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1159 := r.ContainerType()
		if yyct1159 == codecSelferValueTypeMap1234 {
			yyl1159 := r.ReadMapStart()
			if yyl1159 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1159, d)
			}
		} else if yyct1159 == codecSelferValueTypeArray1234 {
			yyl1159 := r.ReadArrayStart()
			if yyl1159 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1160Slc
	var yyhl1160 bool = l >= 0
	for yyj1160 := 0; ; yyj1160++ {
		if yyhl1160 {
			if yyj1160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1160Slc = r.DecodeBytes(yys1160Slc, true, true)
		yys1160 := string(yys1160Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1160 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1160)
		} // end switch yys1160
	} // end for yyj1160
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1163 int
	var yyb1163 bool
	var yyhl1163 bool = l >= 0
	yyj1163++
	if yyhl1163 {
		yyb1163 = yyj1163 > l
	} else {
		yyb1163 = r.CheckBreak()
	}
	if yyb1163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1163++
	if yyhl1163 {
		yyb1163 = yyj1163 > l
	} else {
		yyb1163 = r.CheckBreak()
	}
	if yyb1163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1163++
		if yyhl1163 {
			yyb1163 = yyj1163 > l
		} else {
			yyb1163 = r.CheckBreak()
		}
		if yyb1163 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1163-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1166 := z.EncBinary()
		_ = yym1166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1167 := !z.EncBinary()
			yy2arr1167 := z.EncBasicHandle().StructToArray
			var yyq1167 [2]bool
			_, _, _ = yysep1167, yyq1167, yy2arr1167
			const yyr1167 bool = false
			yyq1167[0] = x.Name != ""
			var yynn1167 int
			if yyr1167 || yy2arr1167 {
				r.EncodeArrayStart(2)
			} else {
				yynn1167 = 1
				for _, b := range yyq1167 {
					if b {
						yynn1167++
					}
				}
				r.EncodeMapStart(yynn1167)
				yynn1167 = 0
			}
			if yyr1167 || yy2arr1167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1167[0] {
					yym1169 := z.EncBinary()
					_ = yym1169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1167[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1170 := z.EncBinary()
					_ = yym1170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1167 || yy2arr1167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1172 := z.EncBinary()
				_ = yym1172
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1173 := z.EncBinary()
				_ = yym1173
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1167 || yy2arr1167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1174 := z.DecBinary()
	_ = yym1174
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1175 := r.ContainerType()
		if yyct1175 == codecSelferValueTypeMap1234 {
			yyl1175 := r.ReadMapStart()
			if yyl1175 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1175, d)
			}
		} else if yyct1175 == codecSelferValueTypeArray1234 {
			yyl1175 := r.ReadArrayStart()
			if yyl1175 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1175, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1176Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1176Slc
	var yyhl1176 bool = l >= 0
	for yyj1176 := 0; ; yyj1176++ {
		if yyhl1176 {
			if yyj1176 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1176Slc = r.DecodeBytes(yys1176Slc, true, true)
		yys1176 := string(yys1176Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1176 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1176)
		} // end switch yys1176
	} // end for yyj1176
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1179 int
	var yyb1179 bool
	var yyhl1179 bool = l >= 0
	yyj1179++
	if yyhl1179 {
		yyb1179 = yyj1179 > l
	} else {
		yyb1179 = r.CheckBreak()
	}
	if yyb1179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1179++
	if yyhl1179 {
		yyb1179 = yyj1179 > l
	} else {
		yyb1179 = r.CheckBreak()
	}
	if yyb1179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1179++
		if yyhl1179 {
			yyb1179 = yyj1179 > l
		} else {
			yyb1179 = r.CheckBreak()
		}
		if yyb1179 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1179-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1182 := z.EncBinary()
		_ = yym1182
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1183 := !z.EncBinary()
			yy2arr1183 := z.EncBasicHandle().StructToArray
			var yyq1183 [2]bool
			_, _, _ = yysep1183, yyq1183, yy2arr1183
			const yyr1183 bool = false
			var yynn1183 int
			if yyr1183 || yy2arr1183 {
				r.EncodeArrayStart(2)
			} else {
				yynn1183 = 2
				for _, b := range yyq1183 {
					if b {
						yynn1183++
					}
				}
				r.EncodeMapStart(yynn1183)
				yynn1183 = 0
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1185 := z.EncBinary()
				_ = yym1185
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1186 := z.EncBinary()
				_ = yym1186
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1188 := z.EncBinary()
				_ = yym1188
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1189 := z.EncBinary()
				_ = yym1189
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1190 := z.DecBinary()
	_ = yym1190
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1191 := r.ContainerType()
		if yyct1191 == codecSelferValueTypeMap1234 {
			yyl1191 := r.ReadMapStart()
			if yyl1191 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1191, d)
			}
		} else if yyct1191 == codecSelferValueTypeArray1234 {
			yyl1191 := r.ReadArrayStart()
			if yyl1191 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1191, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1192Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1192Slc
	var yyhl1192 bool = l >= 0
	for yyj1192 := 0; ; yyj1192++ {
		if yyhl1192 {
			if yyj1192 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1192Slc = r.DecodeBytes(yys1192Slc, true, true)
		yys1192 := string(yys1192Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1192 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1192)
		} // end switch yys1192
	} // end for yyj1192
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1195 int
	var yyb1195 bool
	var yyhl1195 bool = l >= 0
	yyj1195++
	if yyhl1195 {
		yyb1195 = yyj1195 > l
	} else {
		yyb1195 = r.CheckBreak()
	}
	if yyb1195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1195++
	if yyhl1195 {
		yyb1195 = yyj1195 > l
	} else {
		yyb1195 = r.CheckBreak()
	}
	if yyb1195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1195++
		if yyhl1195 {
			yyb1195 = yyj1195 > l
		} else {
			yyb1195 = r.CheckBreak()
		}
		if yyb1195 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1195-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1198 := z.EncBinary()
		_ = yym1198
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1199 := !z.EncBinary()
			yy2arr1199 := z.EncBasicHandle().StructToArray
			var yyq1199 [5]bool
			_, _, _ = yysep1199, yyq1199, yy2arr1199
			const yyr1199 bool = false
			yyq1199[0] = x.Path != ""
			yyq1199[2] = x.Host != ""
			yyq1199[3] = x.Scheme != ""
			yyq1199[4] = len(x.HTTPHeaders) != 0
			var yynn1199 int
			if yyr1199 || yy2arr1199 {
				r.EncodeArrayStart(5)
			} else {
				yynn1199 = 1
				for _, b := range yyq1199 {
					if b {
						yynn1199++
					}
				}
				r.EncodeMapStart(yynn1199)
				yynn1199 = 0
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1199[0] {
					yym1201 := z.EncBinary()
					_ = yym1201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1199[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1202 := z.EncBinary()
					_ = yym1202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1204 := &x.Port
				yym1205 := z.EncBinary()
				_ = yym1205
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1204) {
				} else if !yym1205 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1204)
				} else {
					z.EncFallback(yy1204)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1206 := &x.Port
				yym1207 := z.EncBinary()
				_ = yym1207
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1206) {
				} else if !yym1207 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1206)
				} else {
					z.EncFallback(yy1206)
				}
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1199[2] {
					yym1209 := z.EncBinary()
					_ = yym1209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1199[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1210 := z.EncBinary()
					_ = yym1210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1199[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1199[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1199[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1213 := z.EncBinary()
						_ = yym1213
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1199[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1214 := z.EncBinary()
						_ = yym1214
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1215 := z.DecBinary()
	_ = yym1215
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1216 := r.ContainerType()
		if yyct1216 == codecSelferValueTypeMap1234 {
			yyl1216 := r.ReadMapStart()
			if yyl1216 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1216, d)
			}
		} else if yyct1216 == codecSelferValueTypeArray1234 {
			yyl1216 := r.ReadArrayStart()
			if yyl1216 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1216, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1217Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1217Slc
	var yyhl1217 bool = l >= 0
	for yyj1217 := 0; ; yyj1217++ {
		if yyhl1217 {
			if yyj1217 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1217Slc = r.DecodeBytes(yys1217Slc, true, true)
		yys1217 := string(yys1217Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1217 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1219 := &x.Port
				yym1220 := z.DecBinary()
				_ = yym1220
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1219) {
				} else if !yym1220 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1219)
				} else {
					z.DecFallback(yyv1219, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1223 := &x.HTTPHeaders
				yym1224 := z.DecBinary()
				_ = yym1224
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1223), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1217)
		} // end switch yys1217
	} // end for yyj1217
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1225 int
	var yyb1225 bool
	var yyhl1225 bool = l >= 0
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1227 := &x.Port
		yym1228 := z.DecBinary()
		_ = yym1228
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1227) {
		} else if !yym1228 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1227)
		} else {
			z.DecFallback(yyv1227, false)
		}
	}
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1231 := &x.HTTPHeaders
		yym1232 := z.DecBinary()
		_ = yym1232
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1231), d)
		}
	}
	for {
		yyj1225++
		if yyhl1225 {
			yyb1225 = yyj1225 > l
		} else {
			yyb1225 = r.CheckBreak()
		}
		if yyb1225 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1225-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1233 := z.EncBinary()
	_ = yym1233
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1234 := z.DecBinary()
	_ = yym1234
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1235 := z.EncBinary()
		_ = yym1235
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1236 := !z.EncBinary()
			yy2arr1236 := z.EncBasicHandle().StructToArray
			var yyq1236 [1]bool
			_, _, _ = yysep1236, yyq1236, yy2arr1236
			const yyr1236 bool = false
			var yynn1236 int
			if yyr1236 || yy2arr1236 {
				r.EncodeArrayStart(1)
			} else {
				yynn1236 = 1
				for _, b := range yyq1236 {
					if b {
						yynn1236++
					}
				}
				r.EncodeMapStart(yynn1236)
				yynn1236 = 0
			}
			if yyr1236 || yy2arr1236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1238 := &x.Port
				yym1239 := z.EncBinary()
				_ = yym1239
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1238) {
				} else if !yym1239 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1238)
				} else {
					z.EncFallback(yy1238)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1240 := &x.Port
				yym1241 := z.EncBinary()
				_ = yym1241
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1240) {
				} else if !yym1241 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1240)
				} else {
					z.EncFallback(yy1240)
				}
			}
			if yyr1236 || yy2arr1236 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1242 := z.DecBinary()
	_ = yym1242
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1243 := r.ContainerType()
		if yyct1243 == codecSelferValueTypeMap1234 {
			yyl1243 := r.ReadMapStart()
			if yyl1243 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1243, d)
			}
		} else if yyct1243 == codecSelferValueTypeArray1234 {
			yyl1243 := r.ReadArrayStart()
			if yyl1243 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1243, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1244Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1244Slc
	var yyhl1244 bool = l >= 0
	for yyj1244 := 0; ; yyj1244++ {
		if yyhl1244 {
			if yyj1244 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1244Slc = r.DecodeBytes(yys1244Slc, true, true)
		yys1244 := string(yys1244Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1244 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1245 := &x.Port
				yym1246 := z.DecBinary()
				_ = yym1246
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1245) {
				} else if !yym1246 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1245)
				} else {
					z.DecFallback(yyv1245, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1244)
		} // end switch yys1244
	} // end for yyj1244
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1247 int
	var yyb1247 bool
	var yyhl1247 bool = l >= 0
	yyj1247++
	if yyhl1247 {
		yyb1247 = yyj1247 > l
	} else {
		yyb1247 = r.CheckBreak()
	}
	if yyb1247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1248 := &x.Port
		yym1249 := z.DecBinary()
		_ = yym1249
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1248) {
		} else if !yym1249 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1248)
		} else {
			z.DecFallback(yyv1248, false)
		}
	}
	for {
		yyj1247++
		if yyhl1247 {
			yyb1247 = yyj1247 > l
		} else {
			yyb1247 = r.CheckBreak()
		}
		if yyb1247 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1247-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1250 := z.EncBinary()
		_ = yym1250
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1251 := !z.EncBinary()
			yy2arr1251 := z.EncBasicHandle().StructToArray
			var yyq1251 [1]bool
			_, _, _ = yysep1251, yyq1251, yy2arr1251
			const yyr1251 bool = false
			yyq1251[0] = len(x.Command) != 0
			var yynn1251 int
			if yyr1251 || yy2arr1251 {
				r.EncodeArrayStart(1)
			} else {
				yynn1251 = 0
				for _, b := range yyq1251 {
					if b {
						yynn1251++
					}
				}
				r.EncodeMapStart(yynn1251)
				yynn1251 = 0
			}
			if yyr1251 || yy2arr1251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1251[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1253 := z.EncBinary()
						_ = yym1253
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1251[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1254 := z.EncBinary()
						_ = yym1254
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1251 || yy2arr1251 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1255 := z.DecBinary()
	_ = yym1255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1256 := r.ContainerType()
		if yyct1256 == codecSelferValueTypeMap1234 {
			yyl1256 := r.ReadMapStart()
			if yyl1256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1256, d)
			}
		} else if yyct1256 == codecSelferValueTypeArray1234 {
			yyl1256 := r.ReadArrayStart()
			if yyl1256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1257Slc
	var yyhl1257 bool = l >= 0
	for yyj1257 := 0; ; yyj1257++ {
		if yyhl1257 {
			if yyj1257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1257Slc = r.DecodeBytes(yys1257Slc, true, true)
		yys1257 := string(yys1257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1257 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1258 := &x.Command
				yym1259 := z.DecBinary()
				_ = yym1259
				if false {
				} else {
					z.F.DecSliceStringX(yyv1258, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1257)
		} // end switch yys1257
	} // end for yyj1257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1260 int
	var yyb1260 bool
	var yyhl1260 bool = l >= 0
	yyj1260++
	if yyhl1260 {
		yyb1260 = yyj1260 > l
	} else {
		yyb1260 = r.CheckBreak()
	}
	if yyb1260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1261 := &x.Command
		yym1262 := z.DecBinary()
		_ = yym1262
		if false {
		} else {
			z.F.DecSliceStringX(yyv1261, false, d)
		}
	}
	for {
		yyj1260++
		if yyhl1260 {
			yyb1260 = yyj1260 > l
		} else {
			yyb1260 = r.CheckBreak()
		}
		if yyb1260 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1260-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1263 := z.EncBinary()
		_ = yym1263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1264 := !z.EncBinary()
			yy2arr1264 := z.EncBasicHandle().StructToArray
			var yyq1264 [8]bool
			_, _, _ = yysep1264, yyq1264, yy2arr1264
			const yyr1264 bool = false
			yyq1264[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1264[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1264[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1264[3] = x.InitialDelaySeconds != 0
			yyq1264[4] = x.TimeoutSeconds != 0
			yyq1264[5] = x.PeriodSeconds != 0
			yyq1264[6] = x.SuccessThreshold != 0
			yyq1264[7] = x.FailureThreshold != 0
			var yynn1264 int
			if yyr1264 || yy2arr1264 {
				r.EncodeArrayStart(8)
			} else {
				yynn1264 = 0
				for _, b := range yyq1264 {
					if b {
						yynn1264++
					}
				}
				r.EncodeMapStart(yynn1264)
				yynn1264 = 0
			}
			var yyn1265 bool
			if x.Handler.Exec == nil {
				yyn1265 = true
				goto LABEL1265
			}
		LABEL1265:
			if yyr1264 || yy2arr1264 {
				if yyn1265 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1264[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1264[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1265 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1266 bool
			if x.Handler.HTTPGet == nil {
				yyn1266 = true
				goto LABEL1266
			}
		LABEL1266:
			if yyr1264 || yy2arr1264 {
				if yyn1266 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1264[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1264[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1266 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1267 bool
			if x.Handler.TCPSocket == nil {
				yyn1267 = true
				goto LABEL1267
			}
		LABEL1267:
			if yyr1264 || yy2arr1264 {
				if yyn1267 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1264[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1264[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1267 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1264 || yy2arr1264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1264[3] {
					yym1269 := z.EncBinary()
					_ = yym1269
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1264[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1270 := z.EncBinary()
					_ = yym1270
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1264 || yy2arr1264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1264[4] {
					yym1272 := z.EncBinary()
					_ = yym1272
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1264[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1273 := z.EncBinary()
					_ = yym1273
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1264 || yy2arr1264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1264[5] {
					yym1275 := z.EncBinary()
					_ = yym1275
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1264[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1264 || yy2arr1264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1264[6] {
					yym1278 := z.EncBinary()
					_ = yym1278
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1264[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1279 := z.EncBinary()
					_ = yym1279
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1264 || yy2arr1264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1264[7] {
					yym1281 := z.EncBinary()
					_ = yym1281
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1264[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1282 := z.EncBinary()
					_ = yym1282
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1264 || yy2arr1264 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1283 := z.DecBinary()
	_ = yym1283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1284 := r.ContainerType()
		if yyct1284 == codecSelferValueTypeMap1234 {
			yyl1284 := r.ReadMapStart()
			if yyl1284 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1284, d)
			}
		} else if yyct1284 == codecSelferValueTypeArray1234 {
			yyl1284 := r.ReadArrayStart()
			if yyl1284 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1285Slc
	var yyhl1285 bool = l >= 0
	for yyj1285 := 0; ; yyj1285++ {
		if yyhl1285 {
			if yyj1285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1285Slc = r.DecodeBytes(yys1285Slc, true, true)
		yys1285 := string(yys1285Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1285 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1285)
		} // end switch yys1285
	} // end for yyj1285
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1294 int
	var yyb1294 bool
	var yyhl1294 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1294++
		if yyhl1294 {
			yyb1294 = yyj1294 > l
		} else {
			yyb1294 = r.CheckBreak()
		}
		if yyb1294 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1294-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1303 := z.EncBinary()
	_ = yym1303
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1304 := z.DecBinary()
	_ = yym1304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1305 := z.EncBinary()
	_ = yym1305
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1306 := z.DecBinary()
	_ = yym1306
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1307 := z.EncBinary()
		_ = yym1307
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1308 := !z.EncBinary()
			yy2arr1308 := z.EncBasicHandle().StructToArray
			var yyq1308 [2]bool
			_, _, _ = yysep1308, yyq1308, yy2arr1308
			const yyr1308 bool = false
			yyq1308[0] = len(x.Add) != 0
			yyq1308[1] = len(x.Drop) != 0
			var yynn1308 int
			if yyr1308 || yy2arr1308 {
				r.EncodeArrayStart(2)
			} else {
				yynn1308 = 0
				for _, b := range yyq1308 {
					if b {
						yynn1308++
					}
				}
				r.EncodeMapStart(yynn1308)
				yynn1308 = 0
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1310 := z.EncBinary()
						_ = yym1310
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1308[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1311 := z.EncBinary()
						_ = yym1311
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1313 := z.EncBinary()
						_ = yym1313
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1308[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1314 := z.EncBinary()
						_ = yym1314
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1315 := z.DecBinary()
	_ = yym1315
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1316 := r.ContainerType()
		if yyct1316 == codecSelferValueTypeMap1234 {
			yyl1316 := r.ReadMapStart()
			if yyl1316 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1316, d)
			}
		} else if yyct1316 == codecSelferValueTypeArray1234 {
			yyl1316 := r.ReadArrayStart()
			if yyl1316 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1316, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1317Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1317Slc
	var yyhl1317 bool = l >= 0
	for yyj1317 := 0; ; yyj1317++ {
		if yyhl1317 {
			if yyj1317 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1317Slc = r.DecodeBytes(yys1317Slc, true, true)
		yys1317 := string(yys1317Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1317 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1318 := &x.Add
				yym1319 := z.DecBinary()
				_ = yym1319
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1318), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1320 := &x.Drop
				yym1321 := z.DecBinary()
				_ = yym1321
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1320), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1317)
		} // end switch yys1317
	} // end for yyj1317
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1322 int
	var yyb1322 bool
	var yyhl1322 bool = l >= 0
	yyj1322++
	if yyhl1322 {
		yyb1322 = yyj1322 > l
	} else {
		yyb1322 = r.CheckBreak()
	}
	if yyb1322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1323 := &x.Add
		yym1324 := z.DecBinary()
		_ = yym1324
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1323), d)
		}
	}
	yyj1322++
	if yyhl1322 {
		yyb1322 = yyj1322 > l
	} else {
		yyb1322 = r.CheckBreak()
	}
	if yyb1322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1325 := &x.Drop
		yym1326 := z.DecBinary()
		_ = yym1326
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1325), d)
		}
	}
	for {
		yyj1322++
		if yyhl1322 {
			yyb1322 = yyj1322 > l
		} else {
			yyb1322 = r.CheckBreak()
		}
		if yyb1322 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1322-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1327 := z.EncBinary()
		_ = yym1327
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1328 := !z.EncBinary()
			yy2arr1328 := z.EncBasicHandle().StructToArray
			var yyq1328 [2]bool
			_, _, _ = yysep1328, yyq1328, yy2arr1328
			const yyr1328 bool = false
			yyq1328[0] = len(x.Limits) != 0
			yyq1328[1] = len(x.Requests) != 0
			var yynn1328 int
			if yyr1328 || yy2arr1328 {
				r.EncodeArrayStart(2)
			} else {
				yynn1328 = 0
				for _, b := range yyq1328 {
					if b {
						yynn1328++
					}
				}
				r.EncodeMapStart(yynn1328)
				yynn1328 = 0
			}
			if yyr1328 || yy2arr1328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1328[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1328[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1328 || yy2arr1328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1328[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1328[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1328 || yy2arr1328 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1331 := z.DecBinary()
	_ = yym1331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1332 := r.ContainerType()
		if yyct1332 == codecSelferValueTypeMap1234 {
			yyl1332 := r.ReadMapStart()
			if yyl1332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1332, d)
			}
		} else if yyct1332 == codecSelferValueTypeArray1234 {
			yyl1332 := r.ReadArrayStart()
			if yyl1332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1333Slc
	var yyhl1333 bool = l >= 0
	for yyj1333 := 0; ; yyj1333++ {
		if yyhl1333 {
			if yyj1333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1333Slc = r.DecodeBytes(yys1333Slc, true, true)
		yys1333 := string(yys1333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1333 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1334 := &x.Limits
				yyv1334.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1335 := &x.Requests
				yyv1335.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1333)
		} // end switch yys1333
	} // end for yyj1333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1336 int
	var yyb1336 bool
	var yyhl1336 bool = l >= 0
	yyj1336++
	if yyhl1336 {
		yyb1336 = yyj1336 > l
	} else {
		yyb1336 = r.CheckBreak()
	}
	if yyb1336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1337 := &x.Limits
		yyv1337.CodecDecodeSelf(d)
	}
	yyj1336++
	if yyhl1336 {
		yyb1336 = yyj1336 > l
	} else {
		yyb1336 = r.CheckBreak()
	}
	if yyb1336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1338 := &x.Requests
		yyv1338.CodecDecodeSelf(d)
	}
	for {
		yyj1336++
		if yyhl1336 {
			yyb1336 = yyj1336 > l
		} else {
			yyb1336 = r.CheckBreak()
		}
		if yyb1336 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1336-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1339 := z.EncBinary()
		_ = yym1339
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1340 := !z.EncBinary()
			yy2arr1340 := z.EncBasicHandle().StructToArray
			var yyq1340 [18]bool
			_, _, _ = yysep1340, yyq1340, yy2arr1340
			const yyr1340 bool = false
			yyq1340[1] = x.Image != ""
			yyq1340[2] = len(x.Command) != 0
			yyq1340[3] = len(x.Args) != 0
			yyq1340[4] = x.WorkingDir != ""
			yyq1340[5] = len(x.Ports) != 0
			yyq1340[6] = len(x.Env) != 0
			yyq1340[7] = true
			yyq1340[8] = len(x.VolumeMounts) != 0
			yyq1340[9] = x.LivenessProbe != nil
			yyq1340[10] = x.ReadinessProbe != nil
			yyq1340[11] = x.Lifecycle != nil
			yyq1340[12] = x.TerminationMessagePath != ""
			yyq1340[13] = x.ImagePullPolicy != ""
			yyq1340[14] = x.SecurityContext != nil
			yyq1340[15] = x.Stdin != false
			yyq1340[16] = x.StdinOnce != false
			yyq1340[17] = x.TTY != false
			var yynn1340 int
			if yyr1340 || yy2arr1340 {
				r.EncodeArrayStart(18)
			} else {
				yynn1340 = 1
				for _, b := range yyq1340 {
					if b {
						yynn1340++
					}
				}
				r.EncodeMapStart(yynn1340)
				yynn1340 = 0
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1342 := z.EncBinary()
				_ = yym1342
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1343 := z.EncBinary()
				_ = yym1343
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[1] {
					yym1345 := z.EncBinary()
					_ = yym1345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1340[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1346 := z.EncBinary()
					_ = yym1346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1348 := z.EncBinary()
						_ = yym1348
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1340[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1349 := z.EncBinary()
						_ = yym1349
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1351 := z.EncBinary()
						_ = yym1351
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1340[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1352 := z.EncBinary()
						_ = yym1352
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[4] {
					yym1354 := z.EncBinary()
					_ = yym1354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1340[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1355 := z.EncBinary()
					_ = yym1355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1357 := z.EncBinary()
						_ = yym1357
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1340[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1358 := z.EncBinary()
						_ = yym1358
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1360 := z.EncBinary()
						_ = yym1360
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1340[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1361 := z.EncBinary()
						_ = yym1361
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[7] {
					yy1363 := &x.Resources
					yy1363.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1340[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1364 := &x.Resources
					yy1364.CodecEncodeSelf(e)
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1366 := z.EncBinary()
						_ = yym1366
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1340[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1367 := z.EncBinary()
						_ = yym1367
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1340[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1340[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1340[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[12] {
					yym1372 := z.EncBinary()
					_ = yym1372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1340[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1373 := z.EncBinary()
					_ = yym1373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1340[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1340[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[15] {
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1340[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1378 := z.EncBinary()
					_ = yym1378
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[16] {
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1340[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1381 := z.EncBinary()
					_ = yym1381
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[17] {
					yym1383 := z.EncBinary()
					_ = yym1383
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1340[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1384 := z.EncBinary()
					_ = yym1384
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1385 := z.DecBinary()
	_ = yym1385
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1386 := r.ContainerType()
		if yyct1386 == codecSelferValueTypeMap1234 {
			yyl1386 := r.ReadMapStart()
			if yyl1386 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1386, d)
			}
		} else if yyct1386 == codecSelferValueTypeArray1234 {
			yyl1386 := r.ReadArrayStart()
			if yyl1386 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1386, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1387Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1387Slc
	var yyhl1387 bool = l >= 0
	for yyj1387 := 0; ; yyj1387++ {
		if yyhl1387 {
			if yyj1387 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1387Slc = r.DecodeBytes(yys1387Slc, true, true)
		yys1387 := string(yys1387Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1387 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1390 := &x.Command
				yym1391 := z.DecBinary()
				_ = yym1391
				if false {
				} else {
					z.F.DecSliceStringX(yyv1390, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1392 := &x.Args
				yym1393 := z.DecBinary()
				_ = yym1393
				if false {
				} else {
					z.F.DecSliceStringX(yyv1392, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1395 := &x.Ports
				yym1396 := z.DecBinary()
				_ = yym1396
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1395), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1397 := &x.Env
				yym1398 := z.DecBinary()
				_ = yym1398
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1397), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1399 := &x.Resources
				yyv1399.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1400 := &x.VolumeMounts
				yym1401 := z.DecBinary()
				_ = yym1401
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1400), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1387)
		} // end switch yys1387
	} // end for yyj1387
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1411 int
	var yyb1411 bool
	var yyhl1411 bool = l >= 0
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1414 := &x.Command
		yym1415 := z.DecBinary()
		_ = yym1415
		if false {
		} else {
			z.F.DecSliceStringX(yyv1414, false, d)
		}
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1416 := &x.Args
		yym1417 := z.DecBinary()
		_ = yym1417
		if false {
		} else {
			z.F.DecSliceStringX(yyv1416, false, d)
		}
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1419 := &x.Ports
		yym1420 := z.DecBinary()
		_ = yym1420
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1419), d)
		}
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1421 := &x.Env
		yym1422 := z.DecBinary()
		_ = yym1422
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1421), d)
		}
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1423 := &x.Resources
		yyv1423.CodecDecodeSelf(d)
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1424 := &x.VolumeMounts
		yym1425 := z.DecBinary()
		_ = yym1425
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1424), d)
		}
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1411++
		if yyhl1411 {
			yyb1411 = yyj1411 > l
		} else {
			yyb1411 = r.CheckBreak()
		}
		if yyb1411 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1411-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1435 := z.EncBinary()
		_ = yym1435
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1436 := !z.EncBinary()
			yy2arr1436 := z.EncBasicHandle().StructToArray
			var yyq1436 [3]bool
			_, _, _ = yysep1436, yyq1436, yy2arr1436
			const yyr1436 bool = false
			yyq1436[0] = x.Exec != nil
			yyq1436[1] = x.HTTPGet != nil
			yyq1436[2] = x.TCPSocket != nil
			var yynn1436 int
			if yyr1436 || yy2arr1436 {
				r.EncodeArrayStart(3)
			} else {
				yynn1436 = 0
				for _, b := range yyq1436 {
					if b {
						yynn1436++
					}
				}
				r.EncodeMapStart(yynn1436)
				yynn1436 = 0
			}
			if yyr1436 || yy2arr1436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1436[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1436[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1436[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1436[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1436[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1436[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1440 := z.DecBinary()
	_ = yym1440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1441 := r.ContainerType()
		if yyct1441 == codecSelferValueTypeMap1234 {
			yyl1441 := r.ReadMapStart()
			if yyl1441 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1441, d)
			}
		} else if yyct1441 == codecSelferValueTypeArray1234 {
			yyl1441 := r.ReadArrayStart()
			if yyl1441 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1441, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1442Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1442Slc
	var yyhl1442 bool = l >= 0
	for yyj1442 := 0; ; yyj1442++ {
		if yyhl1442 {
			if yyj1442 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1442Slc = r.DecodeBytes(yys1442Slc, true, true)
		yys1442 := string(yys1442Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1442 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1442)
		} // end switch yys1442
	} // end for yyj1442
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1446 int
	var yyb1446 bool
	var yyhl1446 bool = l >= 0
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1446++
		if yyhl1446 {
			yyb1446 = yyj1446 > l
		} else {
			yyb1446 = r.CheckBreak()
		}
		if yyb1446 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1446-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1450 := z.EncBinary()
		_ = yym1450
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1451 := !z.EncBinary()
			yy2arr1451 := z.EncBasicHandle().StructToArray
			var yyq1451 [2]bool
			_, _, _ = yysep1451, yyq1451, yy2arr1451
			const yyr1451 bool = false
			yyq1451[0] = x.PostStart != nil
			yyq1451[1] = x.PreStop != nil
			var yynn1451 int
			if yyr1451 || yy2arr1451 {
				r.EncodeArrayStart(2)
			} else {
				yynn1451 = 0
				for _, b := range yyq1451 {
					if b {
						yynn1451++
					}
				}
				r.EncodeMapStart(yynn1451)
				yynn1451 = 0
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1451[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1451[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1451[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1451[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1454 := z.DecBinary()
	_ = yym1454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1455 := r.ContainerType()
		if yyct1455 == codecSelferValueTypeMap1234 {
			yyl1455 := r.ReadMapStart()
			if yyl1455 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1455, d)
			}
		} else if yyct1455 == codecSelferValueTypeArray1234 {
			yyl1455 := r.ReadArrayStart()
			if yyl1455 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1455, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1456Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1456Slc
	var yyhl1456 bool = l >= 0
	for yyj1456 := 0; ; yyj1456++ {
		if yyhl1456 {
			if yyj1456 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1456Slc = r.DecodeBytes(yys1456Slc, true, true)
		yys1456 := string(yys1456Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1456 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1456)
		} // end switch yys1456
	} // end for yyj1456
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1459 int
	var yyb1459 bool
	var yyhl1459 bool = l >= 0
	yyj1459++
	if yyhl1459 {
		yyb1459 = yyj1459 > l
	} else {
		yyb1459 = r.CheckBreak()
	}
	if yyb1459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1459++
	if yyhl1459 {
		yyb1459 = yyj1459 > l
	} else {
		yyb1459 = r.CheckBreak()
	}
	if yyb1459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1459++
		if yyhl1459 {
			yyb1459 = yyj1459 > l
		} else {
			yyb1459 = r.CheckBreak()
		}
		if yyb1459 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1459-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1462 := z.EncBinary()
	_ = yym1462
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1463 := z.DecBinary()
	_ = yym1463
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1464 := z.EncBinary()
		_ = yym1464
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1465 := !z.EncBinary()
			yy2arr1465 := z.EncBasicHandle().StructToArray
			var yyq1465 [2]bool
			_, _, _ = yysep1465, yyq1465, yy2arr1465
			const yyr1465 bool = false
			yyq1465[0] = x.Reason != ""
			yyq1465[1] = x.Message != ""
			var yynn1465 int
			if yyr1465 || yy2arr1465 {
				r.EncodeArrayStart(2)
			} else {
				yynn1465 = 0
				for _, b := range yyq1465 {
					if b {
						yynn1465++
					}
				}
				r.EncodeMapStart(yynn1465)
				yynn1465 = 0
			}
			if yyr1465 || yy2arr1465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1465[0] {
					yym1467 := z.EncBinary()
					_ = yym1467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1465[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1468 := z.EncBinary()
					_ = yym1468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1465 || yy2arr1465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1465[1] {
					yym1470 := z.EncBinary()
					_ = yym1470
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1465[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1471 := z.EncBinary()
					_ = yym1471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1465 || yy2arr1465 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1472 := z.DecBinary()
	_ = yym1472
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1473 := r.ContainerType()
		if yyct1473 == codecSelferValueTypeMap1234 {
			yyl1473 := r.ReadMapStart()
			if yyl1473 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1473, d)
			}
		} else if yyct1473 == codecSelferValueTypeArray1234 {
			yyl1473 := r.ReadArrayStart()
			if yyl1473 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1473, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1474Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1474Slc
	var yyhl1474 bool = l >= 0
	for yyj1474 := 0; ; yyj1474++ {
		if yyhl1474 {
			if yyj1474 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1474Slc = r.DecodeBytes(yys1474Slc, true, true)
		yys1474 := string(yys1474Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1474 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1474)
		} // end switch yys1474
	} // end for yyj1474
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1477 int
	var yyb1477 bool
	var yyhl1477 bool = l >= 0
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1477++
		if yyhl1477 {
			yyb1477 = yyj1477 > l
		} else {
			yyb1477 = r.CheckBreak()
		}
		if yyb1477 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1477-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1480 := z.EncBinary()
		_ = yym1480
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1481 := !z.EncBinary()
			yy2arr1481 := z.EncBasicHandle().StructToArray
			var yyq1481 [1]bool
			_, _, _ = yysep1481, yyq1481, yy2arr1481
			const yyr1481 bool = false
			yyq1481[0] = true
			var yynn1481 int
			if yyr1481 || yy2arr1481 {
				r.EncodeArrayStart(1)
			} else {
				yynn1481 = 0
				for _, b := range yyq1481 {
					if b {
						yynn1481++
					}
				}
				r.EncodeMapStart(yynn1481)
				yynn1481 = 0
			}
			if yyr1481 || yy2arr1481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1481[0] {
					yy1483 := &x.StartedAt
					yym1484 := z.EncBinary()
					_ = yym1484
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1483) {
					} else if yym1484 {
						z.EncBinaryMarshal(yy1483)
					} else if !yym1484 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1483)
					} else {
						z.EncFallback(yy1483)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1481[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1485 := &x.StartedAt
					yym1486 := z.EncBinary()
					_ = yym1486
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1485) {
					} else if yym1486 {
						z.EncBinaryMarshal(yy1485)
					} else if !yym1486 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1485)
					} else {
						z.EncFallback(yy1485)
					}
				}
			}
			if yyr1481 || yy2arr1481 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1487 := z.DecBinary()
	_ = yym1487
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1488 := r.ContainerType()
		if yyct1488 == codecSelferValueTypeMap1234 {
			yyl1488 := r.ReadMapStart()
			if yyl1488 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1488, d)
			}
		} else if yyct1488 == codecSelferValueTypeArray1234 {
			yyl1488 := r.ReadArrayStart()
			if yyl1488 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1488, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1489Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1489Slc
	var yyhl1489 bool = l >= 0
	for yyj1489 := 0; ; yyj1489++ {
		if yyhl1489 {
			if yyj1489 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1489Slc = r.DecodeBytes(yys1489Slc, true, true)
		yys1489 := string(yys1489Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1489 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1490 := &x.StartedAt
				yym1491 := z.DecBinary()
				_ = yym1491
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1490) {
				} else if yym1491 {
					z.DecBinaryUnmarshal(yyv1490)
				} else if !yym1491 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1490)
				} else {
					z.DecFallback(yyv1490, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1489)
		} // end switch yys1489
	} // end for yyj1489
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1492 int
	var yyb1492 bool
	var yyhl1492 bool = l >= 0
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1493 := &x.StartedAt
		yym1494 := z.DecBinary()
		_ = yym1494
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1493) {
		} else if yym1494 {
			z.DecBinaryUnmarshal(yyv1493)
		} else if !yym1494 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1493)
		} else {
			z.DecFallback(yyv1493, false)
		}
	}
	for {
		yyj1492++
		if yyhl1492 {
			yyb1492 = yyj1492 > l
		} else {
			yyb1492 = r.CheckBreak()
		}
		if yyb1492 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1492-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1495 := z.EncBinary()
		_ = yym1495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1496 := !z.EncBinary()
			yy2arr1496 := z.EncBasicHandle().StructToArray
			var yyq1496 [7]bool
			_, _, _ = yysep1496, yyq1496, yy2arr1496
			const yyr1496 bool = false
			yyq1496[1] = x.Signal != 0
			yyq1496[2] = x.Reason != ""
			yyq1496[3] = x.Message != ""
			yyq1496[4] = true
			yyq1496[5] = true
			yyq1496[6] = x.ContainerID != ""
			var yynn1496 int
			if yyr1496 || yy2arr1496 {
				r.EncodeArrayStart(7)
			} else {
				yynn1496 = 1
				for _, b := range yyq1496 {
					if b {
						yynn1496++
					}
				}
				r.EncodeMapStart(yynn1496)
				yynn1496 = 0
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1498 := z.EncBinary()
				_ = yym1498
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1499 := z.EncBinary()
				_ = yym1499
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[1] {
					yym1501 := z.EncBinary()
					_ = yym1501
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1496[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1502 := z.EncBinary()
					_ = yym1502
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[2] {
					yym1504 := z.EncBinary()
					_ = yym1504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1496[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1505 := z.EncBinary()
					_ = yym1505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[3] {
					yym1507 := z.EncBinary()
					_ = yym1507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1496[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1508 := z.EncBinary()
					_ = yym1508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[4] {
					yy1510 := &x.StartedAt
					yym1511 := z.EncBinary()
					_ = yym1511
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1510) {
					} else if yym1511 {
						z.EncBinaryMarshal(yy1510)
					} else if !yym1511 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1510)
					} else {
						z.EncFallback(yy1510)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1512 := &x.StartedAt
					yym1513 := z.EncBinary()
					_ = yym1513
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1512) {
					} else if yym1513 {
						z.EncBinaryMarshal(yy1512)
					} else if !yym1513 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1512)
					} else {
						z.EncFallback(yy1512)
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[5] {
					yy1515 := &x.FinishedAt
					yym1516 := z.EncBinary()
					_ = yym1516
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1515) {
					} else if yym1516 {
						z.EncBinaryMarshal(yy1515)
					} else if !yym1516 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1515)
					} else {
						z.EncFallback(yy1515)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1517 := &x.FinishedAt
					yym1518 := z.EncBinary()
					_ = yym1518
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1517) {
					} else if yym1518 {
						z.EncBinaryMarshal(yy1517)
					} else if !yym1518 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1517)
					} else {
						z.EncFallback(yy1517)
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[6] {
					yym1520 := z.EncBinary()
					_ = yym1520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1496[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1521 := z.EncBinary()
					_ = yym1521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1522 := z.DecBinary()
	_ = yym1522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1523 := r.ContainerType()
		if yyct1523 == codecSelferValueTypeMap1234 {
			yyl1523 := r.ReadMapStart()
			if yyl1523 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1523, d)
			}
		} else if yyct1523 == codecSelferValueTypeArray1234 {
			yyl1523 := r.ReadArrayStart()
			if yyl1523 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1523, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1524Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1524Slc
	var yyhl1524 bool = l >= 0
	for yyj1524 := 0; ; yyj1524++ {
		if yyhl1524 {
			if yyj1524 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1524Slc = r.DecodeBytes(yys1524Slc, true, true)
		yys1524 := string(yys1524Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1524 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1529 := &x.StartedAt
				yym1530 := z.DecBinary()
				_ = yym1530
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1529) {
				} else if yym1530 {
					z.DecBinaryUnmarshal(yyv1529)
				} else if !yym1530 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1529)
				} else {
					z.DecFallback(yyv1529, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1531 := &x.FinishedAt
				yym1532 := z.DecBinary()
				_ = yym1532
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1531) {
				} else if yym1532 {
					z.DecBinaryUnmarshal(yyv1531)
				} else if !yym1532 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1531)
				} else {
					z.DecFallback(yyv1531, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1524)
		} // end switch yys1524
	} // end for yyj1524
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1534 int
	var yyb1534 bool
	var yyhl1534 bool = l >= 0
	yyj1534++
	if yyhl1534 {
		yyb1534 = yyj1534 > l
	} else {
		yyb1534 = r.CheckBreak()
	}
	if yyb1534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1534++
	if yyhl1534 {
		yyb1534 = yyj1534 > l
	} else {
		yyb1534 = r.CheckBreak()
	}
	if yyb1534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1534++
	if yyhl1534 {
		yyb1534 = yyj1534 > l
	} else {
		yyb1534 = r.CheckBreak()
	}
	if yyb1534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1534++
	if yyhl1534 {
		yyb1534 = yyj1534 > l
	} else {
		yyb1534 = r.CheckBreak()
	}
	if yyb1534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1534++
	if yyhl1534 {
		yyb1534 = yyj1534 > l
	} else {
		yyb1534 = r.CheckBreak()
	}
	if yyb1534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1539 := &x.StartedAt
		yym1540 := z.DecBinary()
		_ = yym1540
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1539) {
		} else if yym1540 {
			z.DecBinaryUnmarshal(yyv1539)
		} else if !yym1540 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1539)
		} else {
			z.DecFallback(yyv1539, false)
		}
	}
	yyj1534++
	if yyhl1534 {
		yyb1534 = yyj1534 > l
	} else {
		yyb1534 = r.CheckBreak()
	}
	if yyb1534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1541 := &x.FinishedAt
		yym1542 := z.DecBinary()
		_ = yym1542
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1541) {
		} else if yym1542 {
			z.DecBinaryUnmarshal(yyv1541)
		} else if !yym1542 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1541)
		} else {
			z.DecFallback(yyv1541, false)
		}
	}
	yyj1534++
	if yyhl1534 {
		yyb1534 = yyj1534 > l
	} else {
		yyb1534 = r.CheckBreak()
	}
	if yyb1534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1534++
		if yyhl1534 {
			yyb1534 = yyj1534 > l
		} else {
			yyb1534 = r.CheckBreak()
		}
		if yyb1534 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1534-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1544 := z.EncBinary()
		_ = yym1544
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1545 := !z.EncBinary()
			yy2arr1545 := z.EncBasicHandle().StructToArray
			var yyq1545 [3]bool
			_, _, _ = yysep1545, yyq1545, yy2arr1545
			const yyr1545 bool = false
			yyq1545[0] = x.Waiting != nil
			yyq1545[1] = x.Running != nil
			yyq1545[2] = x.Terminated != nil
			var yynn1545 int
			if yyr1545 || yy2arr1545 {
				r.EncodeArrayStart(3)
			} else {
				yynn1545 = 0
				for _, b := range yyq1545 {
					if b {
						yynn1545++
					}
				}
				r.EncodeMapStart(yynn1545)
				yynn1545 = 0
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1545[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1545[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1545[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1549 := z.DecBinary()
	_ = yym1549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1550 := r.ContainerType()
		if yyct1550 == codecSelferValueTypeMap1234 {
			yyl1550 := r.ReadMapStart()
			if yyl1550 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1550, d)
			}
		} else if yyct1550 == codecSelferValueTypeArray1234 {
			yyl1550 := r.ReadArrayStart()
			if yyl1550 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1551Slc
	var yyhl1551 bool = l >= 0
	for yyj1551 := 0; ; yyj1551++ {
		if yyhl1551 {
			if yyj1551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1551Slc = r.DecodeBytes(yys1551Slc, true, true)
		yys1551 := string(yys1551Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1551 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1551)
		} // end switch yys1551
	} // end for yyj1551
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1555 int
	var yyb1555 bool
	var yyhl1555 bool = l >= 0
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1555++
		if yyhl1555 {
			yyb1555 = yyj1555 > l
		} else {
			yyb1555 = r.CheckBreak()
		}
		if yyb1555 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1555-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1559 := z.EncBinary()
		_ = yym1559
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1560 := !z.EncBinary()
			yy2arr1560 := z.EncBasicHandle().StructToArray
			var yyq1560 [8]bool
			_, _, _ = yysep1560, yyq1560, yy2arr1560
			const yyr1560 bool = false
			yyq1560[1] = true
			yyq1560[2] = true
			yyq1560[7] = x.ContainerID != ""
			var yynn1560 int
			if yyr1560 || yy2arr1560 {
				r.EncodeArrayStart(8)
			} else {
				yynn1560 = 5
				for _, b := range yyq1560 {
					if b {
						yynn1560++
					}
				}
				r.EncodeMapStart(yynn1560)
				yynn1560 = 0
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1562 := z.EncBinary()
				_ = yym1562
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1563 := z.EncBinary()
				_ = yym1563
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1560[1] {
					yy1565 := &x.State
					yy1565.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1560[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1566 := &x.State
					yy1566.CodecEncodeSelf(e)
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1560[2] {
					yy1568 := &x.LastTerminationState
					yy1568.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1560[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1569 := &x.LastTerminationState
					yy1569.CodecEncodeSelf(e)
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1571 := z.EncBinary()
				_ = yym1571
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1572 := z.EncBinary()
				_ = yym1572
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1574 := z.EncBinary()
				_ = yym1574
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1575 := z.EncBinary()
				_ = yym1575
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1577 := z.EncBinary()
				_ = yym1577
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1578 := z.EncBinary()
				_ = yym1578
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1580 := z.EncBinary()
				_ = yym1580
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1581 := z.EncBinary()
				_ = yym1581
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1560[7] {
					yym1583 := z.EncBinary()
					_ = yym1583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1560[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1584 := z.EncBinary()
					_ = yym1584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1585 := z.DecBinary()
	_ = yym1585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1586 := r.ContainerType()
		if yyct1586 == codecSelferValueTypeMap1234 {
			yyl1586 := r.ReadMapStart()
			if yyl1586 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1586, d)
			}
		} else if yyct1586 == codecSelferValueTypeArray1234 {
			yyl1586 := r.ReadArrayStart()
			if yyl1586 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1586, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1587Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1587Slc
	var yyhl1587 bool = l >= 0
	for yyj1587 := 0; ; yyj1587++ {
		if yyhl1587 {
			if yyj1587 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1587Slc = r.DecodeBytes(yys1587Slc, true, true)
		yys1587 := string(yys1587Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1587 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1589 := &x.State
				yyv1589.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1590 := &x.LastTerminationState
				yyv1590.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1587)
		} // end switch yys1587
	} // end for yyj1587
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1596 int
	var yyb1596 bool
	var yyhl1596 bool = l >= 0
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1598 := &x.State
		yyv1598.CodecDecodeSelf(d)
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1599 := &x.LastTerminationState
		yyv1599.CodecDecodeSelf(d)
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1596++
		if yyhl1596 {
			yyb1596 = yyj1596 > l
		} else {
			yyb1596 = r.CheckBreak()
		}
		if yyb1596 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1596-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1605 := z.EncBinary()
	_ = yym1605
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1606 := z.DecBinary()
	_ = yym1606
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1607 := z.EncBinary()
	_ = yym1607
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1608 := z.DecBinary()
	_ = yym1608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1609 := z.EncBinary()
		_ = yym1609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1610 := !z.EncBinary()
			yy2arr1610 := z.EncBasicHandle().StructToArray
			var yyq1610 [6]bool
			_, _, _ = yysep1610, yyq1610, yy2arr1610
			const yyr1610 bool = false
			yyq1610[2] = true
			yyq1610[3] = true
			yyq1610[4] = x.Reason != ""
			yyq1610[5] = x.Message != ""
			var yynn1610 int
			if yyr1610 || yy2arr1610 {
				r.EncodeArrayStart(6)
			} else {
				yynn1610 = 2
				for _, b := range yyq1610 {
					if b {
						yynn1610++
					}
				}
				r.EncodeMapStart(yynn1610)
				yynn1610 = 0
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1610[2] {
					yy1614 := &x.LastProbeTime
					yym1615 := z.EncBinary()
					_ = yym1615
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1614) {
					} else if yym1615 {
						z.EncBinaryMarshal(yy1614)
					} else if !yym1615 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1614)
					} else {
						z.EncFallback(yy1614)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1610[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1616 := &x.LastProbeTime
					yym1617 := z.EncBinary()
					_ = yym1617
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1616) {
					} else if yym1617 {
						z.EncBinaryMarshal(yy1616)
					} else if !yym1617 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1616)
					} else {
						z.EncFallback(yy1616)
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1610[3] {
					yy1619 := &x.LastTransitionTime
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1619) {
					} else if yym1620 {
						z.EncBinaryMarshal(yy1619)
					} else if !yym1620 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1619)
					} else {
						z.EncFallback(yy1619)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1610[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1621 := &x.LastTransitionTime
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1621) {
					} else if yym1622 {
						z.EncBinaryMarshal(yy1621)
					} else if !yym1622 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1621)
					} else {
						z.EncFallback(yy1621)
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1610[4] {
					yym1624 := z.EncBinary()
					_ = yym1624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1610[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1625 := z.EncBinary()
					_ = yym1625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1610[5] {
					yym1627 := z.EncBinary()
					_ = yym1627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1610[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1628 := z.EncBinary()
					_ = yym1628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1629 := z.DecBinary()
	_ = yym1629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1630 := r.ContainerType()
		if yyct1630 == codecSelferValueTypeMap1234 {
			yyl1630 := r.ReadMapStart()
			if yyl1630 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1630, d)
			}
		} else if yyct1630 == codecSelferValueTypeArray1234 {
			yyl1630 := r.ReadArrayStart()
			if yyl1630 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1631Slc
	var yyhl1631 bool = l >= 0
	for yyj1631 := 0; ; yyj1631++ {
		if yyhl1631 {
			if yyj1631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1631Slc = r.DecodeBytes(yys1631Slc, true, true)
		yys1631 := string(yys1631Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1631 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1634 := &x.LastProbeTime
				yym1635 := z.DecBinary()
				_ = yym1635
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1634) {
				} else if yym1635 {
					z.DecBinaryUnmarshal(yyv1634)
				} else if !yym1635 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1634)
				} else {
					z.DecFallback(yyv1634, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1636 := &x.LastTransitionTime
				yym1637 := z.DecBinary()
				_ = yym1637
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1636) {
				} else if yym1637 {
					z.DecBinaryUnmarshal(yyv1636)
				} else if !yym1637 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1636)
				} else {
					z.DecFallback(yyv1636, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1631)
		} // end switch yys1631
	} // end for yyj1631
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1640 int
	var yyb1640 bool
	var yyhl1640 bool = l >= 0
	yyj1640++
	if yyhl1640 {
		yyb1640 = yyj1640 > l
	} else {
		yyb1640 = r.CheckBreak()
	}
	if yyb1640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1640++
	if yyhl1640 {
		yyb1640 = yyj1640 > l
	} else {
		yyb1640 = r.CheckBreak()
	}
	if yyb1640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1640++
	if yyhl1640 {
		yyb1640 = yyj1640 > l
	} else {
		yyb1640 = r.CheckBreak()
	}
	if yyb1640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1643 := &x.LastProbeTime
		yym1644 := z.DecBinary()
		_ = yym1644
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1643) {
		} else if yym1644 {
			z.DecBinaryUnmarshal(yyv1643)
		} else if !yym1644 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1643)
		} else {
			z.DecFallback(yyv1643, false)
		}
	}
	yyj1640++
	if yyhl1640 {
		yyb1640 = yyj1640 > l
	} else {
		yyb1640 = r.CheckBreak()
	}
	if yyb1640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1645 := &x.LastTransitionTime
		yym1646 := z.DecBinary()
		_ = yym1646
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1645) {
		} else if yym1646 {
			z.DecBinaryUnmarshal(yyv1645)
		} else if !yym1646 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1645)
		} else {
			z.DecFallback(yyv1645, false)
		}
	}
	yyj1640++
	if yyhl1640 {
		yyb1640 = yyj1640 > l
	} else {
		yyb1640 = r.CheckBreak()
	}
	if yyb1640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1640++
	if yyhl1640 {
		yyb1640 = yyj1640 > l
	} else {
		yyb1640 = r.CheckBreak()
	}
	if yyb1640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1640++
		if yyhl1640 {
			yyb1640 = yyj1640 > l
		} else {
			yyb1640 = r.CheckBreak()
		}
		if yyb1640 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1640-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1649 := z.EncBinary()
	_ = yym1649
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1650 := z.DecBinary()
	_ = yym1650
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1651 := z.EncBinary()
	_ = yym1651
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1652 := z.DecBinary()
	_ = yym1652
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1653 := z.EncBinary()
		_ = yym1653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1654 := !z.EncBinary()
			yy2arr1654 := z.EncBasicHandle().StructToArray
			var yyq1654 [1]bool
			_, _, _ = yysep1654, yyq1654, yy2arr1654
			const yyr1654 bool = false
			var yynn1654 int
			if yyr1654 || yy2arr1654 {
				r.EncodeArrayStart(1)
			} else {
				yynn1654 = 1
				for _, b := range yyq1654 {
					if b {
						yynn1654++
					}
				}
				r.EncodeMapStart(yynn1654)
				yynn1654 = 0
			}
			if yyr1654 || yy2arr1654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1656 := z.EncBinary()
					_ = yym1656
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1657 := z.EncBinary()
					_ = yym1657
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1654 || yy2arr1654 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1658 := z.DecBinary()
	_ = yym1658
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1659 := r.ContainerType()
		if yyct1659 == codecSelferValueTypeMap1234 {
			yyl1659 := r.ReadMapStart()
			if yyl1659 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1659, d)
			}
		} else if yyct1659 == codecSelferValueTypeArray1234 {
			yyl1659 := r.ReadArrayStart()
			if yyl1659 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1659, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1660Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1660Slc
	var yyhl1660 bool = l >= 0
	for yyj1660 := 0; ; yyj1660++ {
		if yyhl1660 {
			if yyj1660 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1660Slc = r.DecodeBytes(yys1660Slc, true, true)
		yys1660 := string(yys1660Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1660 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1661 := &x.NodeSelectorTerms
				yym1662 := z.DecBinary()
				_ = yym1662
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1661), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1660)
		} // end switch yys1660
	} // end for yyj1660
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1663 int
	var yyb1663 bool
	var yyhl1663 bool = l >= 0
	yyj1663++
	if yyhl1663 {
		yyb1663 = yyj1663 > l
	} else {
		yyb1663 = r.CheckBreak()
	}
	if yyb1663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1664 := &x.NodeSelectorTerms
		yym1665 := z.DecBinary()
		_ = yym1665
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1664), d)
		}
	}
	for {
		yyj1663++
		if yyhl1663 {
			yyb1663 = yyj1663 > l
		} else {
			yyb1663 = r.CheckBreak()
		}
		if yyb1663 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1663-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1666 := z.EncBinary()
		_ = yym1666
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1667 := !z.EncBinary()
			yy2arr1667 := z.EncBasicHandle().StructToArray
			var yyq1667 [1]bool
			_, _, _ = yysep1667, yyq1667, yy2arr1667
			const yyr1667 bool = false
			var yynn1667 int
			if yyr1667 || yy2arr1667 {
				r.EncodeArrayStart(1)
			} else {
				yynn1667 = 1
				for _, b := range yyq1667 {
					if b {
						yynn1667++
					}
				}
				r.EncodeMapStart(yynn1667)
				yynn1667 = 0
			}
			if yyr1667 || yy2arr1667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1669 := z.EncBinary()
					_ = yym1669
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1670 := z.EncBinary()
					_ = yym1670
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1667 || yy2arr1667 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1671 := z.DecBinary()
	_ = yym1671
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1672 := r.ContainerType()
		if yyct1672 == codecSelferValueTypeMap1234 {
			yyl1672 := r.ReadMapStart()
			if yyl1672 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1672, d)
			}
		} else if yyct1672 == codecSelferValueTypeArray1234 {
			yyl1672 := r.ReadArrayStart()
			if yyl1672 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1672, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1673Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1673Slc
	var yyhl1673 bool = l >= 0
	for yyj1673 := 0; ; yyj1673++ {
		if yyhl1673 {
			if yyj1673 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1673Slc = r.DecodeBytes(yys1673Slc, true, true)
		yys1673 := string(yys1673Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1673 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1674 := &x.MatchExpressions
				yym1675 := z.DecBinary()
				_ = yym1675
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1674), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1673)
		} // end switch yys1673
	} // end for yyj1673
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1676 int
	var yyb1676 bool
	var yyhl1676 bool = l >= 0
	yyj1676++
	if yyhl1676 {
		yyb1676 = yyj1676 > l
	} else {
		yyb1676 = r.CheckBreak()
	}
	if yyb1676 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1677 := &x.MatchExpressions
		yym1678 := z.DecBinary()
		_ = yym1678
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1677), d)
		}
	}
	for {
		yyj1676++
		if yyhl1676 {
			yyb1676 = yyj1676 > l
		} else {
			yyb1676 = r.CheckBreak()
		}
		if yyb1676 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1676-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1679 := z.EncBinary()
		_ = yym1679
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1680 := !z.EncBinary()
			yy2arr1680 := z.EncBasicHandle().StructToArray
			var yyq1680 [3]bool
			_, _, _ = yysep1680, yyq1680, yy2arr1680
			const yyr1680 bool = false
			yyq1680[2] = len(x.Values) != 0
			var yynn1680 int
			if yyr1680 || yy2arr1680 {
				r.EncodeArrayStart(3)
			} else {
				yynn1680 = 2
				for _, b := range yyq1680 {
					if b {
						yynn1680++
					}
				}
				r.EncodeMapStart(yynn1680)
				yynn1680 = 0
			}
			if yyr1680 || yy2arr1680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1682 := z.EncBinary()
				_ = yym1682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1683 := z.EncBinary()
				_ = yym1683
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1680 || yy2arr1680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1680 || yy2arr1680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1680[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1686 := z.EncBinary()
						_ = yym1686
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1680[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1687 := z.EncBinary()
						_ = yym1687
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1680 || yy2arr1680 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1688 := z.DecBinary()
	_ = yym1688
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1689 := r.ContainerType()
		if yyct1689 == codecSelferValueTypeMap1234 {
			yyl1689 := r.ReadMapStart()
			if yyl1689 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1689, d)
			}
		} else if yyct1689 == codecSelferValueTypeArray1234 {
			yyl1689 := r.ReadArrayStart()
			if yyl1689 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1689, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1690Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1690Slc
	var yyhl1690 bool = l >= 0
	for yyj1690 := 0; ; yyj1690++ {
		if yyhl1690 {
			if yyj1690 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1690Slc = r.DecodeBytes(yys1690Slc, true, true)
		yys1690 := string(yys1690Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1690 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1693 := &x.Values
				yym1694 := z.DecBinary()
				_ = yym1694
				if false {
				} else {
					z.F.DecSliceStringX(yyv1693, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1690)
		} // end switch yys1690
	} // end for yyj1690
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1695 int
	var yyb1695 bool
	var yyhl1695 bool = l >= 0
	yyj1695++
	if yyhl1695 {
		yyb1695 = yyj1695 > l
	} else {
		yyb1695 = r.CheckBreak()
	}
	if yyb1695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1695++
	if yyhl1695 {
		yyb1695 = yyj1695 > l
	} else {
		yyb1695 = r.CheckBreak()
	}
	if yyb1695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1695++
	if yyhl1695 {
		yyb1695 = yyj1695 > l
	} else {
		yyb1695 = r.CheckBreak()
	}
	if yyb1695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1698 := &x.Values
		yym1699 := z.DecBinary()
		_ = yym1699
		if false {
		} else {
			z.F.DecSliceStringX(yyv1698, false, d)
		}
	}
	for {
		yyj1695++
		if yyhl1695 {
			yyb1695 = yyj1695 > l
		} else {
			yyb1695 = r.CheckBreak()
		}
		if yyb1695 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1695-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1700 := z.EncBinary()
	_ = yym1700
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1701 := z.DecBinary()
	_ = yym1701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1702 := z.EncBinary()
		_ = yym1702
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1703 := !z.EncBinary()
			yy2arr1703 := z.EncBasicHandle().StructToArray
			var yyq1703 [3]bool
			_, _, _ = yysep1703, yyq1703, yy2arr1703
			const yyr1703 bool = false
			yyq1703[0] = x.NodeAffinity != nil
			yyq1703[1] = x.PodAffinity != nil
			yyq1703[2] = x.PodAntiAffinity != nil
			var yynn1703 int
			if yyr1703 || yy2arr1703 {
				r.EncodeArrayStart(3)
			} else {
				yynn1703 = 0
				for _, b := range yyq1703 {
					if b {
						yynn1703++
					}
				}
				r.EncodeMapStart(yynn1703)
				yynn1703 = 0
			}
			if yyr1703 || yy2arr1703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1703[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1703[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1703 || yy2arr1703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1703[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1703[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1703 || yy2arr1703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1703[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1703[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1703 || yy2arr1703 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1707 := z.DecBinary()
	_ = yym1707
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1708 := r.ContainerType()
		if yyct1708 == codecSelferValueTypeMap1234 {
			yyl1708 := r.ReadMapStart()
			if yyl1708 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1708, d)
			}
		} else if yyct1708 == codecSelferValueTypeArray1234 {
			yyl1708 := r.ReadArrayStart()
			if yyl1708 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1708, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1709Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1709Slc
	var yyhl1709 bool = l >= 0
	for yyj1709 := 0; ; yyj1709++ {
		if yyhl1709 {
			if yyj1709 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1709Slc = r.DecodeBytes(yys1709Slc, true, true)
		yys1709 := string(yys1709Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1709 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1709)
		} // end switch yys1709
	} // end for yyj1709
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1713 int
	var yyb1713 bool
	var yyhl1713 bool = l >= 0
	yyj1713++
	if yyhl1713 {
		yyb1713 = yyj1713 > l
	} else {
		yyb1713 = r.CheckBreak()
	}
	if yyb1713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1713++
	if yyhl1713 {
		yyb1713 = yyj1713 > l
	} else {
		yyb1713 = r.CheckBreak()
	}
	if yyb1713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1713++
	if yyhl1713 {
		yyb1713 = yyj1713 > l
	} else {
		yyb1713 = r.CheckBreak()
	}
	if yyb1713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1713++
		if yyhl1713 {
			yyb1713 = yyj1713 > l
		} else {
			yyb1713 = r.CheckBreak()
		}
		if yyb1713 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1713-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1717 := z.EncBinary()
		_ = yym1717
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1718 := !z.EncBinary()
			yy2arr1718 := z.EncBasicHandle().StructToArray
			var yyq1718 [2]bool
			_, _, _ = yysep1718, yyq1718, yy2arr1718
			const yyr1718 bool = false
			yyq1718[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1718[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1718 int
			if yyr1718 || yy2arr1718 {
				r.EncodeArrayStart(2)
			} else {
				yynn1718 = 0
				for _, b := range yyq1718 {
					if b {
						yynn1718++
					}
				}
				r.EncodeMapStart(yynn1718)
				yynn1718 = 0
			}
			if yyr1718 || yy2arr1718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1718[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1720 := z.EncBinary()
						_ = yym1720
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1718[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1721 := z.EncBinary()
						_ = yym1721
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1718 || yy2arr1718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1718[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1723 := z.EncBinary()
						_ = yym1723
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1718[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1724 := z.EncBinary()
						_ = yym1724
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1718 || yy2arr1718 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1725 := z.DecBinary()
	_ = yym1725
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1726 := r.ContainerType()
		if yyct1726 == codecSelferValueTypeMap1234 {
			yyl1726 := r.ReadMapStart()
			if yyl1726 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1726, d)
			}
		} else if yyct1726 == codecSelferValueTypeArray1234 {
			yyl1726 := r.ReadArrayStart()
			if yyl1726 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1726, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1727Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1727Slc
	var yyhl1727 bool = l >= 0
	for yyj1727 := 0; ; yyj1727++ {
		if yyhl1727 {
			if yyj1727 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1727Slc = r.DecodeBytes(yys1727Slc, true, true)
		yys1727 := string(yys1727Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1727 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1728 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1729 := z.DecBinary()
				_ = yym1729
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1728), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1730 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1731 := z.DecBinary()
				_ = yym1731
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1730), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1727)
		} // end switch yys1727
	} // end for yyj1727
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1732 int
	var yyb1732 bool
	var yyhl1732 bool = l >= 0
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1733 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1734 := z.DecBinary()
		_ = yym1734
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1733), d)
		}
	}
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1735 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1736 := z.DecBinary()
		_ = yym1736
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1735), d)
		}
	}
	for {
		yyj1732++
		if yyhl1732 {
			yyb1732 = yyj1732 > l
		} else {
			yyb1732 = r.CheckBreak()
		}
		if yyb1732 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1732-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1737 := z.EncBinary()
		_ = yym1737
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1738 := !z.EncBinary()
			yy2arr1738 := z.EncBasicHandle().StructToArray
			var yyq1738 [2]bool
			_, _, _ = yysep1738, yyq1738, yy2arr1738
			const yyr1738 bool = false
			yyq1738[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1738[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1738 int
			if yyr1738 || yy2arr1738 {
				r.EncodeArrayStart(2)
			} else {
				yynn1738 = 0
				for _, b := range yyq1738 {
					if b {
						yynn1738++
					}
				}
				r.EncodeMapStart(yynn1738)
				yynn1738 = 0
			}
			if yyr1738 || yy2arr1738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1738[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1740 := z.EncBinary()
						_ = yym1740
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1738[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1741 := z.EncBinary()
						_ = yym1741
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1738 || yy2arr1738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1738[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1743 := z.EncBinary()
						_ = yym1743
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1738[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1744 := z.EncBinary()
						_ = yym1744
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1738 || yy2arr1738 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1745 := z.DecBinary()
	_ = yym1745
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1746 := r.ContainerType()
		if yyct1746 == codecSelferValueTypeMap1234 {
			yyl1746 := r.ReadMapStart()
			if yyl1746 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1746, d)
			}
		} else if yyct1746 == codecSelferValueTypeArray1234 {
			yyl1746 := r.ReadArrayStart()
			if yyl1746 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1746, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1747Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1747Slc
	var yyhl1747 bool = l >= 0
	for yyj1747 := 0; ; yyj1747++ {
		if yyhl1747 {
			if yyj1747 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1747Slc = r.DecodeBytes(yys1747Slc, true, true)
		yys1747 := string(yys1747Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1747 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1748 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1749 := z.DecBinary()
				_ = yym1749
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1748), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1750 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1751 := z.DecBinary()
				_ = yym1751
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1750), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1747)
		} // end switch yys1747
	} // end for yyj1747
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1752 int
	var yyb1752 bool
	var yyhl1752 bool = l >= 0
	yyj1752++
	if yyhl1752 {
		yyb1752 = yyj1752 > l
	} else {
		yyb1752 = r.CheckBreak()
	}
	if yyb1752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1753 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1754 := z.DecBinary()
		_ = yym1754
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1753), d)
		}
	}
	yyj1752++
	if yyhl1752 {
		yyb1752 = yyj1752 > l
	} else {
		yyb1752 = r.CheckBreak()
	}
	if yyb1752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1755 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1756 := z.DecBinary()
		_ = yym1756
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1755), d)
		}
	}
	for {
		yyj1752++
		if yyhl1752 {
			yyb1752 = yyj1752 > l
		} else {
			yyb1752 = r.CheckBreak()
		}
		if yyb1752 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1752-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1757 := z.EncBinary()
		_ = yym1757
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1758 := !z.EncBinary()
			yy2arr1758 := z.EncBasicHandle().StructToArray
			var yyq1758 [2]bool
			_, _, _ = yysep1758, yyq1758, yy2arr1758
			const yyr1758 bool = false
			var yynn1758 int
			if yyr1758 || yy2arr1758 {
				r.EncodeArrayStart(2)
			} else {
				yynn1758 = 2
				for _, b := range yyq1758 {
					if b {
						yynn1758++
					}
				}
				r.EncodeMapStart(yynn1758)
				yynn1758 = 0
			}
			if yyr1758 || yy2arr1758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1760 := z.EncBinary()
				_ = yym1760
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1761 := z.EncBinary()
				_ = yym1761
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1758 || yy2arr1758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1763 := &x.PodAffinityTerm
				yy1763.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1764 := &x.PodAffinityTerm
				yy1764.CodecEncodeSelf(e)
			}
			if yyr1758 || yy2arr1758 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1765 := z.DecBinary()
	_ = yym1765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1766 := r.ContainerType()
		if yyct1766 == codecSelferValueTypeMap1234 {
			yyl1766 := r.ReadMapStart()
			if yyl1766 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1766, d)
			}
		} else if yyct1766 == codecSelferValueTypeArray1234 {
			yyl1766 := r.ReadArrayStart()
			if yyl1766 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1766, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1767Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1767Slc
	var yyhl1767 bool = l >= 0
	for yyj1767 := 0; ; yyj1767++ {
		if yyhl1767 {
			if yyj1767 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1767Slc = r.DecodeBytes(yys1767Slc, true, true)
		yys1767 := string(yys1767Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1767 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1769 := &x.PodAffinityTerm
				yyv1769.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1767)
		} // end switch yys1767
	} // end for yyj1767
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1770 int
	var yyb1770 bool
	var yyhl1770 bool = l >= 0
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1772 := &x.PodAffinityTerm
		yyv1772.CodecDecodeSelf(d)
	}
	for {
		yyj1770++
		if yyhl1770 {
			yyb1770 = yyj1770 > l
		} else {
			yyb1770 = r.CheckBreak()
		}
		if yyb1770 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1770-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1773 := z.EncBinary()
		_ = yym1773
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1774 := !z.EncBinary()
			yy2arr1774 := z.EncBasicHandle().StructToArray
			var yyq1774 [3]bool
			_, _, _ = yysep1774, yyq1774, yy2arr1774
			const yyr1774 bool = false
			yyq1774[0] = x.LabelSelector != nil
			yyq1774[2] = x.TopologyKey != ""
			var yynn1774 int
			if yyr1774 || yy2arr1774 {
				r.EncodeArrayStart(3)
			} else {
				yynn1774 = 1
				for _, b := range yyq1774 {
					if b {
						yynn1774++
					}
				}
				r.EncodeMapStart(yynn1774)
				yynn1774 = 0
			}
			if yyr1774 || yy2arr1774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1774[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1776 := z.EncBinary()
						_ = yym1776
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1774[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1777 := z.EncBinary()
						_ = yym1777
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1774 || yy2arr1774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1779 := z.EncBinary()
					_ = yym1779
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1780 := z.EncBinary()
					_ = yym1780
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1774 || yy2arr1774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1774[2] {
					yym1782 := z.EncBinary()
					_ = yym1782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1774[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1783 := z.EncBinary()
					_ = yym1783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1774 || yy2arr1774 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1784 := z.DecBinary()
	_ = yym1784
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1785 := r.ContainerType()
		if yyct1785 == codecSelferValueTypeMap1234 {
			yyl1785 := r.ReadMapStart()
			if yyl1785 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1785, d)
			}
		} else if yyct1785 == codecSelferValueTypeArray1234 {
			yyl1785 := r.ReadArrayStart()
			if yyl1785 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1785, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1786Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1786Slc
	var yyhl1786 bool = l >= 0
	for yyj1786 := 0; ; yyj1786++ {
		if yyhl1786 {
			if yyj1786 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1786Slc = r.DecodeBytes(yys1786Slc, true, true)
		yys1786 := string(yys1786Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1786 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1788 := z.DecBinary()
				_ = yym1788
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1789 := &x.Namespaces
				yym1790 := z.DecBinary()
				_ = yym1790
				if false {
				} else {
					z.F.DecSliceStringX(yyv1789, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1786)
		} // end switch yys1786
	} // end for yyj1786
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1792 int
	var yyb1792 bool
	var yyhl1792 bool = l >= 0
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1794 := z.DecBinary()
		_ = yym1794
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1795 := &x.Namespaces
		yym1796 := z.DecBinary()
		_ = yym1796
		if false {
		} else {
			z.F.DecSliceStringX(yyv1795, false, d)
		}
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1792++
		if yyhl1792 {
			yyb1792 = yyj1792 > l
		} else {
			yyb1792 = r.CheckBreak()
		}
		if yyb1792 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1792-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1798 := z.EncBinary()
		_ = yym1798
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1799 := !z.EncBinary()
			yy2arr1799 := z.EncBasicHandle().StructToArray
			var yyq1799 [2]bool
			_, _, _ = yysep1799, yyq1799, yy2arr1799
			const yyr1799 bool = false
			yyq1799[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1799[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1799 int
			if yyr1799 || yy2arr1799 {
				r.EncodeArrayStart(2)
			} else {
				yynn1799 = 0
				for _, b := range yyq1799 {
					if b {
						yynn1799++
					}
				}
				r.EncodeMapStart(yynn1799)
				yynn1799 = 0
			}
			if yyr1799 || yy2arr1799 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1799[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1799[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1799 || yy2arr1799 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1799[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1802 := z.EncBinary()
						_ = yym1802
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1799[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1803 := z.EncBinary()
						_ = yym1803
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1799 || yy2arr1799 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1804 := z.DecBinary()
	_ = yym1804
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1805 := r.ContainerType()
		if yyct1805 == codecSelferValueTypeMap1234 {
			yyl1805 := r.ReadMapStart()
			if yyl1805 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1805, d)
			}
		} else if yyct1805 == codecSelferValueTypeArray1234 {
			yyl1805 := r.ReadArrayStart()
			if yyl1805 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1805, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1806Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1806Slc
	var yyhl1806 bool = l >= 0
	for yyj1806 := 0; ; yyj1806++ {
		if yyhl1806 {
			if yyj1806 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1806Slc = r.DecodeBytes(yys1806Slc, true, true)
		yys1806 := string(yys1806Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1806 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1808 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1809 := z.DecBinary()
				_ = yym1809
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1808), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1806)
		} // end switch yys1806
	} // end for yyj1806
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1810 int
	var yyb1810 bool
	var yyhl1810 bool = l >= 0
	yyj1810++
	if yyhl1810 {
		yyb1810 = yyj1810 > l
	} else {
		yyb1810 = r.CheckBreak()
	}
	if yyb1810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1810++
	if yyhl1810 {
		yyb1810 = yyj1810 > l
	} else {
		yyb1810 = r.CheckBreak()
	}
	if yyb1810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1812 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1813 := z.DecBinary()
		_ = yym1813
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1812), d)
		}
	}
	for {
		yyj1810++
		if yyhl1810 {
			yyb1810 = yyj1810 > l
		} else {
			yyb1810 = r.CheckBreak()
		}
		if yyb1810 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1810-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1814 := z.EncBinary()
		_ = yym1814
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1815 := !z.EncBinary()
			yy2arr1815 := z.EncBasicHandle().StructToArray
			var yyq1815 [2]bool
			_, _, _ = yysep1815, yyq1815, yy2arr1815
			const yyr1815 bool = false
			var yynn1815 int
			if yyr1815 || yy2arr1815 {
				r.EncodeArrayStart(2)
			} else {
				yynn1815 = 2
				for _, b := range yyq1815 {
					if b {
						yynn1815++
					}
				}
				r.EncodeMapStart(yynn1815)
				yynn1815 = 0
			}
			if yyr1815 || yy2arr1815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1817 := z.EncBinary()
				_ = yym1817
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1818 := z.EncBinary()
				_ = yym1818
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1815 || yy2arr1815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1820 := &x.Preference
				yy1820.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1821 := &x.Preference
				yy1821.CodecEncodeSelf(e)
			}
			if yyr1815 || yy2arr1815 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1822 := z.DecBinary()
	_ = yym1822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1823 := r.ContainerType()
		if yyct1823 == codecSelferValueTypeMap1234 {
			yyl1823 := r.ReadMapStart()
			if yyl1823 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1823, d)
			}
		} else if yyct1823 == codecSelferValueTypeArray1234 {
			yyl1823 := r.ReadArrayStart()
			if yyl1823 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1823, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1824Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1824Slc
	var yyhl1824 bool = l >= 0
	for yyj1824 := 0; ; yyj1824++ {
		if yyhl1824 {
			if yyj1824 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1824Slc = r.DecodeBytes(yys1824Slc, true, true)
		yys1824 := string(yys1824Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1824 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1826 := &x.Preference
				yyv1826.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1824)
		} // end switch yys1824
	} // end for yyj1824
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1827 int
	var yyb1827 bool
	var yyhl1827 bool = l >= 0
	yyj1827++
	if yyhl1827 {
		yyb1827 = yyj1827 > l
	} else {
		yyb1827 = r.CheckBreak()
	}
	if yyb1827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1827++
	if yyhl1827 {
		yyb1827 = yyj1827 > l
	} else {
		yyb1827 = r.CheckBreak()
	}
	if yyb1827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1829 := &x.Preference
		yyv1829.CodecDecodeSelf(d)
	}
	for {
		yyj1827++
		if yyhl1827 {
			yyb1827 = yyj1827 > l
		} else {
			yyb1827 = r.CheckBreak()
		}
		if yyb1827 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1827-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1830 := z.EncBinary()
		_ = yym1830
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1831 := !z.EncBinary()
			yy2arr1831 := z.EncBasicHandle().StructToArray
			var yyq1831 [3]bool
			_, _, _ = yysep1831, yyq1831, yy2arr1831
			const yyr1831 bool = false
			yyq1831[1] = x.Value != ""
			var yynn1831 int
			if yyr1831 || yy2arr1831 {
				r.EncodeArrayStart(3)
			} else {
				yynn1831 = 2
				for _, b := range yyq1831 {
					if b {
						yynn1831++
					}
				}
				r.EncodeMapStart(yynn1831)
				yynn1831 = 0
			}
			if yyr1831 || yy2arr1831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1833 := z.EncBinary()
				_ = yym1833
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1834 := z.EncBinary()
				_ = yym1834
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1831 || yy2arr1831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1831[1] {
					yym1836 := z.EncBinary()
					_ = yym1836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1831[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1837 := z.EncBinary()
					_ = yym1837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1831 || yy2arr1831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1831 || yy2arr1831 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1839 := z.DecBinary()
	_ = yym1839
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1840 := r.ContainerType()
		if yyct1840 == codecSelferValueTypeMap1234 {
			yyl1840 := r.ReadMapStart()
			if yyl1840 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1840, d)
			}
		} else if yyct1840 == codecSelferValueTypeArray1234 {
			yyl1840 := r.ReadArrayStart()
			if yyl1840 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1840, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1841Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1841Slc
	var yyhl1841 bool = l >= 0
	for yyj1841 := 0; ; yyj1841++ {
		if yyhl1841 {
			if yyj1841 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1841Slc = r.DecodeBytes(yys1841Slc, true, true)
		yys1841 := string(yys1841Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1841 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1841)
		} // end switch yys1841
	} // end for yyj1841
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1845 int
	var yyb1845 bool
	var yyhl1845 bool = l >= 0
	yyj1845++
	if yyhl1845 {
		yyb1845 = yyj1845 > l
	} else {
		yyb1845 = r.CheckBreak()
	}
	if yyb1845 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1845++
	if yyhl1845 {
		yyb1845 = yyj1845 > l
	} else {
		yyb1845 = r.CheckBreak()
	}
	if yyb1845 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1845++
	if yyhl1845 {
		yyb1845 = yyj1845 > l
	} else {
		yyb1845 = r.CheckBreak()
	}
	if yyb1845 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1845++
		if yyhl1845 {
			yyb1845 = yyj1845 > l
		} else {
			yyb1845 = r.CheckBreak()
		}
		if yyb1845 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1845-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1849 := z.EncBinary()
	_ = yym1849
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1850 := z.DecBinary()
	_ = yym1850
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1851 := z.EncBinary()
		_ = yym1851
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1852 := !z.EncBinary()
			yy2arr1852 := z.EncBasicHandle().StructToArray
			var yyq1852 [4]bool
			_, _, _ = yysep1852, yyq1852, yy2arr1852
			const yyr1852 bool = false
			yyq1852[0] = x.Key != ""
			yyq1852[1] = x.Operator != ""
			yyq1852[2] = x.Value != ""
			yyq1852[3] = x.Effect != ""
			var yynn1852 int
			if yyr1852 || yy2arr1852 {
				r.EncodeArrayStart(4)
			} else {
				yynn1852 = 0
				for _, b := range yyq1852 {
					if b {
						yynn1852++
					}
				}
				r.EncodeMapStart(yynn1852)
				yynn1852 = 0
			}
			if yyr1852 || yy2arr1852 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1852[0] {
					yym1854 := z.EncBinary()
					_ = yym1854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1852[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1855 := z.EncBinary()
					_ = yym1855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1852 || yy2arr1852 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1852[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1852[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1852 || yy2arr1852 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1852[2] {
					yym1858 := z.EncBinary()
					_ = yym1858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1852[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1859 := z.EncBinary()
					_ = yym1859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1852 || yy2arr1852 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1852[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1852[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1852 || yy2arr1852 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1861 := z.DecBinary()
	_ = yym1861
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1862 := r.ContainerType()
		if yyct1862 == codecSelferValueTypeMap1234 {
			yyl1862 := r.ReadMapStart()
			if yyl1862 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1862, d)
			}
		} else if yyct1862 == codecSelferValueTypeArray1234 {
			yyl1862 := r.ReadArrayStart()
			if yyl1862 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1862, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1863Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1863Slc
	var yyhl1863 bool = l >= 0
	for yyj1863 := 0; ; yyj1863++ {
		if yyhl1863 {
			if yyj1863 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1863Slc = r.DecodeBytes(yys1863Slc, true, true)
		yys1863 := string(yys1863Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1863 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1863)
		} // end switch yys1863
	} // end for yyj1863
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1868 int
	var yyb1868 bool
	var yyhl1868 bool = l >= 0
	yyj1868++
	if yyhl1868 {
		yyb1868 = yyj1868 > l
	} else {
		yyb1868 = r.CheckBreak()
	}
	if yyb1868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1868++
	if yyhl1868 {
		yyb1868 = yyj1868 > l
	} else {
		yyb1868 = r.CheckBreak()
	}
	if yyb1868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj1868++
	if yyhl1868 {
		yyb1868 = yyj1868 > l
	} else {
		yyb1868 = r.CheckBreak()
	}
	if yyb1868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1868++
	if yyhl1868 {
		yyb1868 = yyj1868 > l
	} else {
		yyb1868 = r.CheckBreak()
	}
	if yyb1868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1868++
		if yyhl1868 {
			yyb1868 = yyj1868 > l
		} else {
			yyb1868 = r.CheckBreak()
		}
		if yyb1868 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1868-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1873 := z.EncBinary()
	_ = yym1873
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1874 := z.DecBinary()
	_ = yym1874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1875 := z.EncBinary()
		_ = yym1875
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1876 := !z.EncBinary()
			yy2arr1876 := z.EncBasicHandle().StructToArray
			var yyq1876 [17]bool
			_, _, _ = yysep1876, yyq1876, yy2arr1876
			const yyr1876 bool = false
			yyq1876[0] = len(x.Volumes) != 0
			yyq1876[2] = x.RestartPolicy != ""
			yyq1876[3] = x.TerminationGracePeriodSeconds != nil
			yyq1876[4] = x.ActiveDeadlineSeconds != nil
			yyq1876[5] = x.DNSPolicy != ""
			yyq1876[6] = len(x.NodeSelector) != 0
			yyq1876[7] = x.ServiceAccountName != ""
			yyq1876[8] = x.DeprecatedServiceAccount != ""
			yyq1876[9] = x.NodeName != ""
			yyq1876[10] = x.HostNetwork != false
			yyq1876[11] = x.HostPID != false
			yyq1876[12] = x.HostIPC != false
			yyq1876[13] = x.SecurityContext != nil
			yyq1876[14] = len(x.ImagePullSecrets) != 0
			yyq1876[15] = x.Hostname != ""
			yyq1876[16] = x.Subdomain != ""
			var yynn1876 int
			if yyr1876 || yy2arr1876 {
				r.EncodeArrayStart(17)
			} else {
				yynn1876 = 1
				for _, b := range yyq1876 {
					if b {
						yynn1876++
					}
				}
				r.EncodeMapStart(yynn1876)
				yynn1876 = 0
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1878 := z.EncBinary()
						_ = yym1878
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1876[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1879 := z.EncBinary()
						_ = yym1879
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1881 := z.EncBinary()
					_ = yym1881
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1882 := z.EncBinary()
					_ = yym1882
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1876[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1885 := *x.TerminationGracePeriodSeconds
						yym1886 := z.EncBinary()
						_ = yym1886
						if false {
						} else {
							r.EncodeInt(int64(yy1885))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1876[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1887 := *x.TerminationGracePeriodSeconds
						yym1888 := z.EncBinary()
						_ = yym1888
						if false {
						} else {
							r.EncodeInt(int64(yy1887))
						}
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1890 := *x.ActiveDeadlineSeconds
						yym1891 := z.EncBinary()
						_ = yym1891
						if false {
						} else {
							r.EncodeInt(int64(yy1890))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1876[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1892 := *x.ActiveDeadlineSeconds
						yym1893 := z.EncBinary()
						_ = yym1893
						if false {
						} else {
							r.EncodeInt(int64(yy1892))
						}
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1876[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1896 := z.EncBinary()
						_ = yym1896
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1876[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1897 := z.EncBinary()
						_ = yym1897
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[7] {
					yym1899 := z.EncBinary()
					_ = yym1899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1876[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1900 := z.EncBinary()
					_ = yym1900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[8] {
					yym1902 := z.EncBinary()
					_ = yym1902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1876[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1903 := z.EncBinary()
					_ = yym1903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[9] {
					yym1905 := z.EncBinary()
					_ = yym1905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1876[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1906 := z.EncBinary()
					_ = yym1906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[10] {
					yym1908 := z.EncBinary()
					_ = yym1908
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1876[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1909 := z.EncBinary()
					_ = yym1909
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[11] {
					yym1911 := z.EncBinary()
					_ = yym1911
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1876[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1912 := z.EncBinary()
					_ = yym1912
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[12] {
					yym1914 := z.EncBinary()
					_ = yym1914
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1876[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1915 := z.EncBinary()
					_ = yym1915
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1876[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1918 := z.EncBinary()
						_ = yym1918
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1876[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1919 := z.EncBinary()
						_ = yym1919
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[15] {
					yym1921 := z.EncBinary()
					_ = yym1921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1876[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1922 := z.EncBinary()
					_ = yym1922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[16] {
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1876[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1925 := z.EncBinary()
					_ = yym1925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1926 := z.DecBinary()
	_ = yym1926
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1927 := r.ContainerType()
		if yyct1927 == codecSelferValueTypeMap1234 {
			yyl1927 := r.ReadMapStart()
			if yyl1927 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1927, d)
			}
		} else if yyct1927 == codecSelferValueTypeArray1234 {
			yyl1927 := r.ReadArrayStart()
			if yyl1927 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1927, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1928Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1928Slc
	var yyhl1928 bool = l >= 0
	for yyj1928 := 0; ; yyj1928++ {
		if yyhl1928 {
			if yyj1928 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1928Slc = r.DecodeBytes(yys1928Slc, true, true)
		yys1928 := string(yys1928Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1928 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1929 := &x.Volumes
				yym1930 := z.DecBinary()
				_ = yym1930
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1929), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1931 := &x.Containers
				yym1932 := z.DecBinary()
				_ = yym1932
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1931), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1935 := z.DecBinary()
				_ = yym1935
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1937 := z.DecBinary()
				_ = yym1937
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1939 := &x.NodeSelector
				yym1940 := z.DecBinary()
				_ = yym1940
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1939, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1948 := &x.ImagePullSecrets
				yym1949 := z.DecBinary()
				_ = yym1949
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1948), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1928)
		} // end switch yys1928
	} // end for yyj1928
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1952 int
	var yyb1952 bool
	var yyhl1952 bool = l >= 0
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1953 := &x.Volumes
		yym1954 := z.DecBinary()
		_ = yym1954
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1953), d)
		}
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1955 := &x.Containers
		yym1956 := z.DecBinary()
		_ = yym1956
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1955), d)
		}
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1959 := z.DecBinary()
		_ = yym1959
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1961 := z.DecBinary()
		_ = yym1961
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1963 := &x.NodeSelector
		yym1964 := z.DecBinary()
		_ = yym1964
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1963, false, d)
		}
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1972 := &x.ImagePullSecrets
		yym1973 := z.DecBinary()
		_ = yym1973
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1972), d)
		}
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj1952++
		if yyhl1952 {
			yyb1952 = yyj1952 > l
		} else {
			yyb1952 = r.CheckBreak()
		}
		if yyb1952 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1952-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1976 := z.EncBinary()
		_ = yym1976
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1977 := !z.EncBinary()
			yy2arr1977 := z.EncBasicHandle().StructToArray
			var yyq1977 [5]bool
			_, _, _ = yysep1977, yyq1977, yy2arr1977
			const yyr1977 bool = false
			yyq1977[0] = x.SELinuxOptions != nil
			yyq1977[1] = x.RunAsUser != nil
			yyq1977[2] = x.RunAsNonRoot != nil
			yyq1977[3] = len(x.SupplementalGroups) != 0
			yyq1977[4] = x.FSGroup != nil
			var yynn1977 int
			if yyr1977 || yy2arr1977 {
				r.EncodeArrayStart(5)
			} else {
				yynn1977 = 0
				for _, b := range yyq1977 {
					if b {
						yynn1977++
					}
				}
				r.EncodeMapStart(yynn1977)
				yynn1977 = 0
			}
			if yyr1977 || yy2arr1977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1977[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1977[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1977 || yy2arr1977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1977[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1980 := *x.RunAsUser
						yym1981 := z.EncBinary()
						_ = yym1981
						if false {
						} else {
							r.EncodeInt(int64(yy1980))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1977[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1982 := *x.RunAsUser
						yym1983 := z.EncBinary()
						_ = yym1983
						if false {
						} else {
							r.EncodeInt(int64(yy1982))
						}
					}
				}
			}
			if yyr1977 || yy2arr1977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1977[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1985 := *x.RunAsNonRoot
						yym1986 := z.EncBinary()
						_ = yym1986
						if false {
						} else {
							r.EncodeBool(bool(yy1985))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1977[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1987 := *x.RunAsNonRoot
						yym1988 := z.EncBinary()
						_ = yym1988
						if false {
						} else {
							r.EncodeBool(bool(yy1987))
						}
					}
				}
			}
			if yyr1977 || yy2arr1977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1977[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1990 := z.EncBinary()
						_ = yym1990
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1977[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1991 := z.EncBinary()
						_ = yym1991
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1977 || yy2arr1977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1977[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1993 := *x.FSGroup
						yym1994 := z.EncBinary()
						_ = yym1994
						if false {
						} else {
							r.EncodeInt(int64(yy1993))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1977[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1995 := *x.FSGroup
						yym1996 := z.EncBinary()
						_ = yym1996
						if false {
						} else {
							r.EncodeInt(int64(yy1995))
						}
					}
				}
			}
			if yyr1977 || yy2arr1977 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1997 := z.DecBinary()
	_ = yym1997
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1998 := r.ContainerType()
		if yyct1998 == codecSelferValueTypeMap1234 {
			yyl1998 := r.ReadMapStart()
			if yyl1998 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1998, d)
			}
		} else if yyct1998 == codecSelferValueTypeArray1234 {
			yyl1998 := r.ReadArrayStart()
			if yyl1998 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1998, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1999Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1999Slc
	var yyhl1999 bool = l >= 0
	for yyj1999 := 0; ; yyj1999++ {
		if yyhl1999 {
			if yyj1999 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1999Slc = r.DecodeBytes(yys1999Slc, true, true)
		yys1999 := string(yys1999Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1999 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2002 := z.DecBinary()
				_ = yym2002
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2004 := z.DecBinary()
				_ = yym2004
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2005 := &x.SupplementalGroups
				yym2006 := z.DecBinary()
				_ = yym2006
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2005, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2008 := z.DecBinary()
				_ = yym2008
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1999)
		} // end switch yys1999
	} // end for yyj1999
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2009 int
	var yyb2009 bool
	var yyhl2009 bool = l >= 0
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2012 := z.DecBinary()
		_ = yym2012
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2014 := z.DecBinary()
		_ = yym2014
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2015 := &x.SupplementalGroups
		yym2016 := z.DecBinary()
		_ = yym2016
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2015, false, d)
		}
	}
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2018 := z.DecBinary()
		_ = yym2018
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2009++
		if yyhl2009 {
			yyb2009 = yyj2009 > l
		} else {
			yyb2009 = r.CheckBreak()
		}
		if yyb2009 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2009-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2019 := z.EncBinary()
		_ = yym2019
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2020 := !z.EncBinary()
			yy2arr2020 := z.EncBasicHandle().StructToArray
			var yyq2020 [8]bool
			_, _, _ = yysep2020, yyq2020, yy2arr2020
			const yyr2020 bool = false
			yyq2020[0] = x.Phase != ""
			yyq2020[1] = len(x.Conditions) != 0
			yyq2020[2] = x.Message != ""
			yyq2020[3] = x.Reason != ""
			yyq2020[4] = x.HostIP != ""
			yyq2020[5] = x.PodIP != ""
			yyq2020[6] = x.StartTime != nil
			yyq2020[7] = len(x.ContainerStatuses) != 0
			var yynn2020 int
			if yyr2020 || yy2arr2020 {
				r.EncodeArrayStart(8)
			} else {
				yynn2020 = 0
				for _, b := range yyq2020 {
					if b {
						yynn2020++
					}
				}
				r.EncodeMapStart(yynn2020)
				yynn2020 = 0
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2020[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2020[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2020[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2023 := z.EncBinary()
						_ = yym2023
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2020[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2024 := z.EncBinary()
						_ = yym2024
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2020[2] {
					yym2026 := z.EncBinary()
					_ = yym2026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2020[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2027 := z.EncBinary()
					_ = yym2027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2020[3] {
					yym2029 := z.EncBinary()
					_ = yym2029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2020[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2030 := z.EncBinary()
					_ = yym2030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2020[4] {
					yym2032 := z.EncBinary()
					_ = yym2032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2020[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2033 := z.EncBinary()
					_ = yym2033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2020[5] {
					yym2035 := z.EncBinary()
					_ = yym2035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2020[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2036 := z.EncBinary()
					_ = yym2036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2020[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2038 := z.EncBinary()
						_ = yym2038
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2038 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2038 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2020[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2039 := z.EncBinary()
						_ = yym2039
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2039 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2039 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2020[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2041 := z.EncBinary()
						_ = yym2041
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2020[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2042 := z.EncBinary()
						_ = yym2042
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2043 := z.DecBinary()
	_ = yym2043
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2044 := r.ContainerType()
		if yyct2044 == codecSelferValueTypeMap1234 {
			yyl2044 := r.ReadMapStart()
			if yyl2044 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2044, d)
			}
		} else if yyct2044 == codecSelferValueTypeArray1234 {
			yyl2044 := r.ReadArrayStart()
			if yyl2044 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2044, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2045Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2045Slc
	var yyhl2045 bool = l >= 0
	for yyj2045 := 0; ; yyj2045++ {
		if yyhl2045 {
			if yyj2045 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2045Slc = r.DecodeBytes(yys2045Slc, true, true)
		yys2045 := string(yys2045Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2045 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2047 := &x.Conditions
				yym2048 := z.DecBinary()
				_ = yym2048
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2047), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2054 := z.DecBinary()
				_ = yym2054
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2054 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2054 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2055 := &x.ContainerStatuses
				yym2056 := z.DecBinary()
				_ = yym2056
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2055), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2045)
		} // end switch yys2045
	} // end for yyj2045
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2057 int
	var yyb2057 bool
	var yyhl2057 bool = l >= 0
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2059 := &x.Conditions
		yym2060 := z.DecBinary()
		_ = yym2060
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2059), d)
		}
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2066 := z.DecBinary()
		_ = yym2066
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2066 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2066 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2067 := &x.ContainerStatuses
		yym2068 := z.DecBinary()
		_ = yym2068
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2067), d)
		}
	}
	for {
		yyj2057++
		if yyhl2057 {
			yyb2057 = yyj2057 > l
		} else {
			yyb2057 = r.CheckBreak()
		}
		if yyb2057 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2057-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2069 := z.EncBinary()
		_ = yym2069
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2070 := !z.EncBinary()
			yy2arr2070 := z.EncBasicHandle().StructToArray
			var yyq2070 [4]bool
			_, _, _ = yysep2070, yyq2070, yy2arr2070
			const yyr2070 bool = false
			yyq2070[0] = x.Kind != ""
			yyq2070[1] = x.APIVersion != ""
			yyq2070[2] = true
			yyq2070[3] = true
			var yynn2070 int
			if yyr2070 || yy2arr2070 {
				r.EncodeArrayStart(4)
			} else {
				yynn2070 = 0
				for _, b := range yyq2070 {
					if b {
						yynn2070++
					}
				}
				r.EncodeMapStart(yynn2070)
				yynn2070 = 0
			}
			if yyr2070 || yy2arr2070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2070[0] {
					yym2072 := z.EncBinary()
					_ = yym2072
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2070[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2073 := z.EncBinary()
					_ = yym2073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2070 || yy2arr2070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2070[1] {
					yym2075 := z.EncBinary()
					_ = yym2075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2070[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2076 := z.EncBinary()
					_ = yym2076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2070 || yy2arr2070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2070[2] {
					yy2078 := &x.ObjectMeta
					yy2078.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2070[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2079 := &x.ObjectMeta
					yy2079.CodecEncodeSelf(e)
				}
			}
			if yyr2070 || yy2arr2070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2070[3] {
					yy2081 := &x.Status
					yy2081.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2070[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2082 := &x.Status
					yy2082.CodecEncodeSelf(e)
				}
			}
			if yyr2070 || yy2arr2070 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2083 := z.DecBinary()
	_ = yym2083
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2084 := r.ContainerType()
		if yyct2084 == codecSelferValueTypeMap1234 {
			yyl2084 := r.ReadMapStart()
			if yyl2084 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2084, d)
			}
		} else if yyct2084 == codecSelferValueTypeArray1234 {
			yyl2084 := r.ReadArrayStart()
			if yyl2084 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2084, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2085Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2085Slc
	var yyhl2085 bool = l >= 0
	for yyj2085 := 0; ; yyj2085++ {
		if yyhl2085 {
			if yyj2085 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2085Slc = r.DecodeBytes(yys2085Slc, true, true)
		yys2085 := string(yys2085Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2085 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2088 := &x.ObjectMeta
				yyv2088.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2089 := &x.Status
				yyv2089.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2085)
		} // end switch yys2085
	} // end for yyj2085
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2090 int
	var yyb2090 bool
	var yyhl2090 bool = l >= 0
	yyj2090++
	if yyhl2090 {
		yyb2090 = yyj2090 > l
	} else {
		yyb2090 = r.CheckBreak()
	}
	if yyb2090 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2090++
	if yyhl2090 {
		yyb2090 = yyj2090 > l
	} else {
		yyb2090 = r.CheckBreak()
	}
	if yyb2090 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2090++
	if yyhl2090 {
		yyb2090 = yyj2090 > l
	} else {
		yyb2090 = r.CheckBreak()
	}
	if yyb2090 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2093 := &x.ObjectMeta
		yyv2093.CodecDecodeSelf(d)
	}
	yyj2090++
	if yyhl2090 {
		yyb2090 = yyj2090 > l
	} else {
		yyb2090 = r.CheckBreak()
	}
	if yyb2090 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2094 := &x.Status
		yyv2094.CodecDecodeSelf(d)
	}
	for {
		yyj2090++
		if yyhl2090 {
			yyb2090 = yyj2090 > l
		} else {
			yyb2090 = r.CheckBreak()
		}
		if yyb2090 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2090-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2095 := z.EncBinary()
		_ = yym2095
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2096 := !z.EncBinary()
			yy2arr2096 := z.EncBasicHandle().StructToArray
			var yyq2096 [5]bool
			_, _, _ = yysep2096, yyq2096, yy2arr2096
			const yyr2096 bool = false
			yyq2096[0] = x.Kind != ""
			yyq2096[1] = x.APIVersion != ""
			yyq2096[2] = true
			yyq2096[3] = true
			yyq2096[4] = true
			var yynn2096 int
			if yyr2096 || yy2arr2096 {
				r.EncodeArrayStart(5)
			} else {
				yynn2096 = 0
				for _, b := range yyq2096 {
					if b {
						yynn2096++
					}
				}
				r.EncodeMapStart(yynn2096)
				yynn2096 = 0
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2096[0] {
					yym2098 := z.EncBinary()
					_ = yym2098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2096[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2099 := z.EncBinary()
					_ = yym2099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2096[1] {
					yym2101 := z.EncBinary()
					_ = yym2101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2096[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2096[2] {
					yy2104 := &x.ObjectMeta
					yy2104.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2096[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2105 := &x.ObjectMeta
					yy2105.CodecEncodeSelf(e)
				}
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2096[3] {
					yy2107 := &x.Spec
					yy2107.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2096[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2108 := &x.Spec
					yy2108.CodecEncodeSelf(e)
				}
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2096[4] {
					yy2110 := &x.Status
					yy2110.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2096[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2111 := &x.Status
					yy2111.CodecEncodeSelf(e)
				}
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2112 := z.DecBinary()
	_ = yym2112
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2113 := r.ContainerType()
		if yyct2113 == codecSelferValueTypeMap1234 {
			yyl2113 := r.ReadMapStart()
			if yyl2113 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2113, d)
			}
		} else if yyct2113 == codecSelferValueTypeArray1234 {
			yyl2113 := r.ReadArrayStart()
			if yyl2113 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2113, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2114Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2114Slc
	var yyhl2114 bool = l >= 0
	for yyj2114 := 0; ; yyj2114++ {
		if yyhl2114 {
			if yyj2114 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2114Slc = r.DecodeBytes(yys2114Slc, true, true)
		yys2114 := string(yys2114Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2114 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2117 := &x.ObjectMeta
				yyv2117.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2118 := &x.Spec
				yyv2118.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2119 := &x.Status
				yyv2119.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2114)
		} // end switch yys2114
	} // end for yyj2114
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2120 int
	var yyb2120 bool
	var yyhl2120 bool = l >= 0
	yyj2120++
	if yyhl2120 {
		yyb2120 = yyj2120 > l
	} else {
		yyb2120 = r.CheckBreak()
	}
	if yyb2120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2120++
	if yyhl2120 {
		yyb2120 = yyj2120 > l
	} else {
		yyb2120 = r.CheckBreak()
	}
	if yyb2120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2120++
	if yyhl2120 {
		yyb2120 = yyj2120 > l
	} else {
		yyb2120 = r.CheckBreak()
	}
	if yyb2120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2123 := &x.ObjectMeta
		yyv2123.CodecDecodeSelf(d)
	}
	yyj2120++
	if yyhl2120 {
		yyb2120 = yyj2120 > l
	} else {
		yyb2120 = r.CheckBreak()
	}
	if yyb2120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2124 := &x.Spec
		yyv2124.CodecDecodeSelf(d)
	}
	yyj2120++
	if yyhl2120 {
		yyb2120 = yyj2120 > l
	} else {
		yyb2120 = r.CheckBreak()
	}
	if yyb2120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2125 := &x.Status
		yyv2125.CodecDecodeSelf(d)
	}
	for {
		yyj2120++
		if yyhl2120 {
			yyb2120 = yyj2120 > l
		} else {
			yyb2120 = r.CheckBreak()
		}
		if yyb2120 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2120-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2126 := z.EncBinary()
		_ = yym2126
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2127 := !z.EncBinary()
			yy2arr2127 := z.EncBasicHandle().StructToArray
			var yyq2127 [4]bool
			_, _, _ = yysep2127, yyq2127, yy2arr2127
			const yyr2127 bool = false
			yyq2127[0] = x.Kind != ""
			yyq2127[1] = x.APIVersion != ""
			yyq2127[2] = true
			var yynn2127 int
			if yyr2127 || yy2arr2127 {
				r.EncodeArrayStart(4)
			} else {
				yynn2127 = 1
				for _, b := range yyq2127 {
					if b {
						yynn2127++
					}
				}
				r.EncodeMapStart(yynn2127)
				yynn2127 = 0
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[0] {
					yym2129 := z.EncBinary()
					_ = yym2129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2127[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2130 := z.EncBinary()
					_ = yym2130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[1] {
					yym2132 := z.EncBinary()
					_ = yym2132
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2127[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2133 := z.EncBinary()
					_ = yym2133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[2] {
					yy2135 := &x.ListMeta
					yym2136 := z.EncBinary()
					_ = yym2136
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2135) {
					} else {
						z.EncFallback(yy2135)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2127[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2137 := &x.ListMeta
					yym2138 := z.EncBinary()
					_ = yym2138
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2137) {
					} else {
						z.EncFallback(yy2137)
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2140 := z.EncBinary()
					_ = yym2140
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2141 := z.EncBinary()
					_ = yym2141
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2142 := z.DecBinary()
	_ = yym2142
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2143 := r.ContainerType()
		if yyct2143 == codecSelferValueTypeMap1234 {
			yyl2143 := r.ReadMapStart()
			if yyl2143 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2143, d)
			}
		} else if yyct2143 == codecSelferValueTypeArray1234 {
			yyl2143 := r.ReadArrayStart()
			if yyl2143 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2143, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2144Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2144Slc
	var yyhl2144 bool = l >= 0
	for yyj2144 := 0; ; yyj2144++ {
		if yyhl2144 {
			if yyj2144 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2144Slc = r.DecodeBytes(yys2144Slc, true, true)
		yys2144 := string(yys2144Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2144 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2147 := &x.ListMeta
				yym2148 := z.DecBinary()
				_ = yym2148
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2147) {
				} else {
					z.DecFallback(yyv2147, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2149 := &x.Items
				yym2150 := z.DecBinary()
				_ = yym2150
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2149), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2144)
		} // end switch yys2144
	} // end for yyj2144
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2151 int
	var yyb2151 bool
	var yyhl2151 bool = l >= 0
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2154 := &x.ListMeta
		yym2155 := z.DecBinary()
		_ = yym2155
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2154) {
		} else {
			z.DecFallback(yyv2154, false)
		}
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2156 := &x.Items
		yym2157 := z.DecBinary()
		_ = yym2157
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2156), d)
		}
	}
	for {
		yyj2151++
		if yyhl2151 {
			yyb2151 = yyj2151 > l
		} else {
			yyb2151 = r.CheckBreak()
		}
		if yyb2151 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2151-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2158 := z.EncBinary()
		_ = yym2158
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2159 := !z.EncBinary()
			yy2arr2159 := z.EncBasicHandle().StructToArray
			var yyq2159 [2]bool
			_, _, _ = yysep2159, yyq2159, yy2arr2159
			const yyr2159 bool = false
			yyq2159[0] = true
			yyq2159[1] = true
			var yynn2159 int
			if yyr2159 || yy2arr2159 {
				r.EncodeArrayStart(2)
			} else {
				yynn2159 = 0
				for _, b := range yyq2159 {
					if b {
						yynn2159++
					}
				}
				r.EncodeMapStart(yynn2159)
				yynn2159 = 0
			}
			if yyr2159 || yy2arr2159 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2159[0] {
					yy2161 := &x.ObjectMeta
					yy2161.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2159[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2162 := &x.ObjectMeta
					yy2162.CodecEncodeSelf(e)
				}
			}
			if yyr2159 || yy2arr2159 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2159[1] {
					yy2164 := &x.Spec
					yy2164.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2159[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2165 := &x.Spec
					yy2165.CodecEncodeSelf(e)
				}
			}
			if yyr2159 || yy2arr2159 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2166 := z.DecBinary()
	_ = yym2166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2167 := r.ContainerType()
		if yyct2167 == codecSelferValueTypeMap1234 {
			yyl2167 := r.ReadMapStart()
			if yyl2167 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2167, d)
			}
		} else if yyct2167 == codecSelferValueTypeArray1234 {
			yyl2167 := r.ReadArrayStart()
			if yyl2167 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2167, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2168Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2168Slc
	var yyhl2168 bool = l >= 0
	for yyj2168 := 0; ; yyj2168++ {
		if yyhl2168 {
			if yyj2168 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2168Slc = r.DecodeBytes(yys2168Slc, true, true)
		yys2168 := string(yys2168Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2168 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2169 := &x.ObjectMeta
				yyv2169.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2170 := &x.Spec
				yyv2170.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2168)
		} // end switch yys2168
	} // end for yyj2168
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2171 int
	var yyb2171 bool
	var yyhl2171 bool = l >= 0
	yyj2171++
	if yyhl2171 {
		yyb2171 = yyj2171 > l
	} else {
		yyb2171 = r.CheckBreak()
	}
	if yyb2171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2172 := &x.ObjectMeta
		yyv2172.CodecDecodeSelf(d)
	}
	yyj2171++
	if yyhl2171 {
		yyb2171 = yyj2171 > l
	} else {
		yyb2171 = r.CheckBreak()
	}
	if yyb2171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2173 := &x.Spec
		yyv2173.CodecDecodeSelf(d)
	}
	for {
		yyj2171++
		if yyhl2171 {
			yyb2171 = yyj2171 > l
		} else {
			yyb2171 = r.CheckBreak()
		}
		if yyb2171 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2171-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2174 := z.EncBinary()
		_ = yym2174
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2175 := !z.EncBinary()
			yy2arr2175 := z.EncBasicHandle().StructToArray
			var yyq2175 [4]bool
			_, _, _ = yysep2175, yyq2175, yy2arr2175
			const yyr2175 bool = false
			yyq2175[0] = x.Kind != ""
			yyq2175[1] = x.APIVersion != ""
			yyq2175[2] = true
			yyq2175[3] = true
			var yynn2175 int
			if yyr2175 || yy2arr2175 {
				r.EncodeArrayStart(4)
			} else {
				yynn2175 = 0
				for _, b := range yyq2175 {
					if b {
						yynn2175++
					}
				}
				r.EncodeMapStart(yynn2175)
				yynn2175 = 0
			}
			if yyr2175 || yy2arr2175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2175[0] {
					yym2177 := z.EncBinary()
					_ = yym2177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2175[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2178 := z.EncBinary()
					_ = yym2178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2175 || yy2arr2175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2175[1] {
					yym2180 := z.EncBinary()
					_ = yym2180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2175[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2181 := z.EncBinary()
					_ = yym2181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2175 || yy2arr2175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2175[2] {
					yy2183 := &x.ObjectMeta
					yy2183.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2175[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2184 := &x.ObjectMeta
					yy2184.CodecEncodeSelf(e)
				}
			}
			if yyr2175 || yy2arr2175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2175[3] {
					yy2186 := &x.Template
					yy2186.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2175[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2187 := &x.Template
					yy2187.CodecEncodeSelf(e)
				}
			}
			if yyr2175 || yy2arr2175 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2188 := z.DecBinary()
	_ = yym2188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2189 := r.ContainerType()
		if yyct2189 == codecSelferValueTypeMap1234 {
			yyl2189 := r.ReadMapStart()
			if yyl2189 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2189, d)
			}
		} else if yyct2189 == codecSelferValueTypeArray1234 {
			yyl2189 := r.ReadArrayStart()
			if yyl2189 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2190Slc
	var yyhl2190 bool = l >= 0
	for yyj2190 := 0; ; yyj2190++ {
		if yyhl2190 {
			if yyj2190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2190Slc = r.DecodeBytes(yys2190Slc, true, true)
		yys2190 := string(yys2190Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2190 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2193 := &x.ObjectMeta
				yyv2193.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2194 := &x.Template
				yyv2194.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2190)
		} // end switch yys2190
	} // end for yyj2190
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2195 int
	var yyb2195 bool
	var yyhl2195 bool = l >= 0
	yyj2195++
	if yyhl2195 {
		yyb2195 = yyj2195 > l
	} else {
		yyb2195 = r.CheckBreak()
	}
	if yyb2195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2195++
	if yyhl2195 {
		yyb2195 = yyj2195 > l
	} else {
		yyb2195 = r.CheckBreak()
	}
	if yyb2195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2195++
	if yyhl2195 {
		yyb2195 = yyj2195 > l
	} else {
		yyb2195 = r.CheckBreak()
	}
	if yyb2195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2198 := &x.ObjectMeta
		yyv2198.CodecDecodeSelf(d)
	}
	yyj2195++
	if yyhl2195 {
		yyb2195 = yyj2195 > l
	} else {
		yyb2195 = r.CheckBreak()
	}
	if yyb2195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2199 := &x.Template
		yyv2199.CodecDecodeSelf(d)
	}
	for {
		yyj2195++
		if yyhl2195 {
			yyb2195 = yyj2195 > l
		} else {
			yyb2195 = r.CheckBreak()
		}
		if yyb2195 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2195-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2200 := z.EncBinary()
		_ = yym2200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2201 := !z.EncBinary()
			yy2arr2201 := z.EncBasicHandle().StructToArray
			var yyq2201 [4]bool
			_, _, _ = yysep2201, yyq2201, yy2arr2201
			const yyr2201 bool = false
			yyq2201[0] = x.Kind != ""
			yyq2201[1] = x.APIVersion != ""
			yyq2201[2] = true
			var yynn2201 int
			if yyr2201 || yy2arr2201 {
				r.EncodeArrayStart(4)
			} else {
				yynn2201 = 1
				for _, b := range yyq2201 {
					if b {
						yynn2201++
					}
				}
				r.EncodeMapStart(yynn2201)
				yynn2201 = 0
			}
			if yyr2201 || yy2arr2201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2201[0] {
					yym2203 := z.EncBinary()
					_ = yym2203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2201[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2204 := z.EncBinary()
					_ = yym2204
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2201 || yy2arr2201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2201[1] {
					yym2206 := z.EncBinary()
					_ = yym2206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2201[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2207 := z.EncBinary()
					_ = yym2207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2201 || yy2arr2201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2201[2] {
					yy2209 := &x.ListMeta
					yym2210 := z.EncBinary()
					_ = yym2210
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2209) {
					} else {
						z.EncFallback(yy2209)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2201[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2211 := &x.ListMeta
					yym2212 := z.EncBinary()
					_ = yym2212
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2211) {
					} else {
						z.EncFallback(yy2211)
					}
				}
			}
			if yyr2201 || yy2arr2201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2214 := z.EncBinary()
					_ = yym2214
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2215 := z.EncBinary()
					_ = yym2215
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2201 || yy2arr2201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2216 := z.DecBinary()
	_ = yym2216
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2217 := r.ContainerType()
		if yyct2217 == codecSelferValueTypeMap1234 {
			yyl2217 := r.ReadMapStart()
			if yyl2217 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2217, d)
			}
		} else if yyct2217 == codecSelferValueTypeArray1234 {
			yyl2217 := r.ReadArrayStart()
			if yyl2217 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2217, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2218Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2218Slc
	var yyhl2218 bool = l >= 0
	for yyj2218 := 0; ; yyj2218++ {
		if yyhl2218 {
			if yyj2218 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2218Slc = r.DecodeBytes(yys2218Slc, true, true)
		yys2218 := string(yys2218Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2218 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2221 := &x.ListMeta
				yym2222 := z.DecBinary()
				_ = yym2222
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2221) {
				} else {
					z.DecFallback(yyv2221, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2223 := &x.Items
				yym2224 := z.DecBinary()
				_ = yym2224
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2223), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2218)
		} // end switch yys2218
	} // end for yyj2218
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2225 int
	var yyb2225 bool
	var yyhl2225 bool = l >= 0
	yyj2225++
	if yyhl2225 {
		yyb2225 = yyj2225 > l
	} else {
		yyb2225 = r.CheckBreak()
	}
	if yyb2225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2225++
	if yyhl2225 {
		yyb2225 = yyj2225 > l
	} else {
		yyb2225 = r.CheckBreak()
	}
	if yyb2225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2225++
	if yyhl2225 {
		yyb2225 = yyj2225 > l
	} else {
		yyb2225 = r.CheckBreak()
	}
	if yyb2225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2228 := &x.ListMeta
		yym2229 := z.DecBinary()
		_ = yym2229
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2228) {
		} else {
			z.DecFallback(yyv2228, false)
		}
	}
	yyj2225++
	if yyhl2225 {
		yyb2225 = yyj2225 > l
	} else {
		yyb2225 = r.CheckBreak()
	}
	if yyb2225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2230 := &x.Items
		yym2231 := z.DecBinary()
		_ = yym2231
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2230), d)
		}
	}
	for {
		yyj2225++
		if yyhl2225 {
			yyb2225 = yyj2225 > l
		} else {
			yyb2225 = r.CheckBreak()
		}
		if yyb2225 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2225-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2232 := z.EncBinary()
		_ = yym2232
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2233 := !z.EncBinary()
			yy2arr2233 := z.EncBasicHandle().StructToArray
			var yyq2233 [3]bool
			_, _, _ = yysep2233, yyq2233, yy2arr2233
			const yyr2233 bool = false
			yyq2233[0] = x.Replicas != nil
			yyq2233[1] = len(x.Selector) != 0
			yyq2233[2] = x.Template != nil
			var yynn2233 int
			if yyr2233 || yy2arr2233 {
				r.EncodeArrayStart(3)
			} else {
				yynn2233 = 0
				for _, b := range yyq2233 {
					if b {
						yynn2233++
					}
				}
				r.EncodeMapStart(yynn2233)
				yynn2233 = 0
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2233[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2235 := *x.Replicas
						yym2236 := z.EncBinary()
						_ = yym2236
						if false {
						} else {
							r.EncodeInt(int64(yy2235))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2233[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2237 := *x.Replicas
						yym2238 := z.EncBinary()
						_ = yym2238
						if false {
						} else {
							r.EncodeInt(int64(yy2237))
						}
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2233[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2240 := z.EncBinary()
						_ = yym2240
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2233[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2241 := z.EncBinary()
						_ = yym2241
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2233[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2233[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2243 := z.DecBinary()
	_ = yym2243
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2244 := r.ContainerType()
		if yyct2244 == codecSelferValueTypeMap1234 {
			yyl2244 := r.ReadMapStart()
			if yyl2244 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2244, d)
			}
		} else if yyct2244 == codecSelferValueTypeArray1234 {
			yyl2244 := r.ReadArrayStart()
			if yyl2244 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2244, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2245Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2245Slc
	var yyhl2245 bool = l >= 0
	for yyj2245 := 0; ; yyj2245++ {
		if yyhl2245 {
			if yyj2245 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2245Slc = r.DecodeBytes(yys2245Slc, true, true)
		yys2245 := string(yys2245Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2245 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2247 := z.DecBinary()
				_ = yym2247
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2248 := &x.Selector
				yym2249 := z.DecBinary()
				_ = yym2249
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2248, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2245)
		} // end switch yys2245
	} // end for yyj2245
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2251 int
	var yyb2251 bool
	var yyhl2251 bool = l >= 0
	yyj2251++
	if yyhl2251 {
		yyb2251 = yyj2251 > l
	} else {
		yyb2251 = r.CheckBreak()
	}
	if yyb2251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2253 := z.DecBinary()
		_ = yym2253
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2251++
	if yyhl2251 {
		yyb2251 = yyj2251 > l
	} else {
		yyb2251 = r.CheckBreak()
	}
	if yyb2251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2254 := &x.Selector
		yym2255 := z.DecBinary()
		_ = yym2255
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2254, false, d)
		}
	}
	yyj2251++
	if yyhl2251 {
		yyb2251 = yyj2251 > l
	} else {
		yyb2251 = r.CheckBreak()
	}
	if yyb2251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2251++
		if yyhl2251 {
			yyb2251 = yyj2251 > l
		} else {
			yyb2251 = r.CheckBreak()
		}
		if yyb2251 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2251-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2257 := z.EncBinary()
		_ = yym2257
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2258 := !z.EncBinary()
			yy2arr2258 := z.EncBasicHandle().StructToArray
			var yyq2258 [3]bool
			_, _, _ = yysep2258, yyq2258, yy2arr2258
			const yyr2258 bool = false
			yyq2258[1] = x.FullyLabeledReplicas != 0
			yyq2258[2] = x.ObservedGeneration != 0
			var yynn2258 int
			if yyr2258 || yy2arr2258 {
				r.EncodeArrayStart(3)
			} else {
				yynn2258 = 1
				for _, b := range yyq2258 {
					if b {
						yynn2258++
					}
				}
				r.EncodeMapStart(yynn2258)
				yynn2258 = 0
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2260 := z.EncBinary()
				_ = yym2260
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2261 := z.EncBinary()
				_ = yym2261
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2258[1] {
					yym2263 := z.EncBinary()
					_ = yym2263
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2258[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2264 := z.EncBinary()
					_ = yym2264
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2258[2] {
					yym2266 := z.EncBinary()
					_ = yym2266
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2258[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2267 := z.EncBinary()
					_ = yym2267
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2268 := z.DecBinary()
	_ = yym2268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2269 := r.ContainerType()
		if yyct2269 == codecSelferValueTypeMap1234 {
			yyl2269 := r.ReadMapStart()
			if yyl2269 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2269, d)
			}
		} else if yyct2269 == codecSelferValueTypeArray1234 {
			yyl2269 := r.ReadArrayStart()
			if yyl2269 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2270Slc
	var yyhl2270 bool = l >= 0
	for yyj2270 := 0; ; yyj2270++ {
		if yyhl2270 {
			if yyj2270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2270Slc = r.DecodeBytes(yys2270Slc, true, true)
		yys2270 := string(yys2270Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2270 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2270)
		} // end switch yys2270
	} // end for yyj2270
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2274 int
	var yyb2274 bool
	var yyhl2274 bool = l >= 0
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2274++
		if yyhl2274 {
			yyb2274 = yyj2274 > l
		} else {
			yyb2274 = r.CheckBreak()
		}
		if yyb2274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2278 := z.EncBinary()
		_ = yym2278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2279 := !z.EncBinary()
			yy2arr2279 := z.EncBasicHandle().StructToArray
			var yyq2279 [5]bool
			_, _, _ = yysep2279, yyq2279, yy2arr2279
			const yyr2279 bool = false
			yyq2279[0] = x.Kind != ""
			yyq2279[1] = x.APIVersion != ""
			yyq2279[2] = true
			yyq2279[3] = true
			yyq2279[4] = true
			var yynn2279 int
			if yyr2279 || yy2arr2279 {
				r.EncodeArrayStart(5)
			} else {
				yynn2279 = 0
				for _, b := range yyq2279 {
					if b {
						yynn2279++
					}
				}
				r.EncodeMapStart(yynn2279)
				yynn2279 = 0
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[0] {
					yym2281 := z.EncBinary()
					_ = yym2281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2279[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2282 := z.EncBinary()
					_ = yym2282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[1] {
					yym2284 := z.EncBinary()
					_ = yym2284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2279[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2285 := z.EncBinary()
					_ = yym2285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[2] {
					yy2287 := &x.ObjectMeta
					yy2287.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2279[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2288 := &x.ObjectMeta
					yy2288.CodecEncodeSelf(e)
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[3] {
					yy2290 := &x.Spec
					yy2290.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2279[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2291 := &x.Spec
					yy2291.CodecEncodeSelf(e)
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[4] {
					yy2293 := &x.Status
					yy2293.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2279[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2294 := &x.Status
					yy2294.CodecEncodeSelf(e)
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2295 := z.DecBinary()
	_ = yym2295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2296 := r.ContainerType()
		if yyct2296 == codecSelferValueTypeMap1234 {
			yyl2296 := r.ReadMapStart()
			if yyl2296 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2296, d)
			}
		} else if yyct2296 == codecSelferValueTypeArray1234 {
			yyl2296 := r.ReadArrayStart()
			if yyl2296 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2296, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2297Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2297Slc
	var yyhl2297 bool = l >= 0
	for yyj2297 := 0; ; yyj2297++ {
		if yyhl2297 {
			if yyj2297 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2297Slc = r.DecodeBytes(yys2297Slc, true, true)
		yys2297 := string(yys2297Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2297 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2300 := &x.ObjectMeta
				yyv2300.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2301 := &x.Spec
				yyv2301.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2302 := &x.Status
				yyv2302.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2297)
		} // end switch yys2297
	} // end for yyj2297
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2303 int
	var yyb2303 bool
	var yyhl2303 bool = l >= 0
	yyj2303++
	if yyhl2303 {
		yyb2303 = yyj2303 > l
	} else {
		yyb2303 = r.CheckBreak()
	}
	if yyb2303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2303++
	if yyhl2303 {
		yyb2303 = yyj2303 > l
	} else {
		yyb2303 = r.CheckBreak()
	}
	if yyb2303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2303++
	if yyhl2303 {
		yyb2303 = yyj2303 > l
	} else {
		yyb2303 = r.CheckBreak()
	}
	if yyb2303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2306 := &x.ObjectMeta
		yyv2306.CodecDecodeSelf(d)
	}
	yyj2303++
	if yyhl2303 {
		yyb2303 = yyj2303 > l
	} else {
		yyb2303 = r.CheckBreak()
	}
	if yyb2303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2307 := &x.Spec
		yyv2307.CodecDecodeSelf(d)
	}
	yyj2303++
	if yyhl2303 {
		yyb2303 = yyj2303 > l
	} else {
		yyb2303 = r.CheckBreak()
	}
	if yyb2303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2308 := &x.Status
		yyv2308.CodecDecodeSelf(d)
	}
	for {
		yyj2303++
		if yyhl2303 {
			yyb2303 = yyj2303 > l
		} else {
			yyb2303 = r.CheckBreak()
		}
		if yyb2303 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2303-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2309 := z.EncBinary()
		_ = yym2309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2310 := !z.EncBinary()
			yy2arr2310 := z.EncBasicHandle().StructToArray
			var yyq2310 [4]bool
			_, _, _ = yysep2310, yyq2310, yy2arr2310
			const yyr2310 bool = false
			yyq2310[0] = x.Kind != ""
			yyq2310[1] = x.APIVersion != ""
			yyq2310[2] = true
			var yynn2310 int
			if yyr2310 || yy2arr2310 {
				r.EncodeArrayStart(4)
			} else {
				yynn2310 = 1
				for _, b := range yyq2310 {
					if b {
						yynn2310++
					}
				}
				r.EncodeMapStart(yynn2310)
				yynn2310 = 0
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[0] {
					yym2312 := z.EncBinary()
					_ = yym2312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2310[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2313 := z.EncBinary()
					_ = yym2313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[1] {
					yym2315 := z.EncBinary()
					_ = yym2315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2310[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2316 := z.EncBinary()
					_ = yym2316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[2] {
					yy2318 := &x.ListMeta
					yym2319 := z.EncBinary()
					_ = yym2319
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2318) {
					} else {
						z.EncFallback(yy2318)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2310[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2320 := &x.ListMeta
					yym2321 := z.EncBinary()
					_ = yym2321
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2320) {
					} else {
						z.EncFallback(yy2320)
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2323 := z.EncBinary()
					_ = yym2323
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2324 := z.EncBinary()
					_ = yym2324
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2325 := z.DecBinary()
	_ = yym2325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2326 := r.ContainerType()
		if yyct2326 == codecSelferValueTypeMap1234 {
			yyl2326 := r.ReadMapStart()
			if yyl2326 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2326, d)
			}
		} else if yyct2326 == codecSelferValueTypeArray1234 {
			yyl2326 := r.ReadArrayStart()
			if yyl2326 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2326, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2327Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2327Slc
	var yyhl2327 bool = l >= 0
	for yyj2327 := 0; ; yyj2327++ {
		if yyhl2327 {
			if yyj2327 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2327Slc = r.DecodeBytes(yys2327Slc, true, true)
		yys2327 := string(yys2327Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2327 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2330 := &x.ListMeta
				yym2331 := z.DecBinary()
				_ = yym2331
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2330) {
				} else {
					z.DecFallback(yyv2330, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2332 := &x.Items
				yym2333 := z.DecBinary()
				_ = yym2333
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2332), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2327)
		} // end switch yys2327
	} // end for yyj2327
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2334 int
	var yyb2334 bool
	var yyhl2334 bool = l >= 0
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2337 := &x.ListMeta
		yym2338 := z.DecBinary()
		_ = yym2338
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2337) {
		} else {
			z.DecFallback(yyv2337, false)
		}
	}
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2339 := &x.Items
		yym2340 := z.DecBinary()
		_ = yym2340
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2339), d)
		}
	}
	for {
		yyj2334++
		if yyhl2334 {
			yyb2334 = yyj2334 > l
		} else {
			yyb2334 = r.CheckBreak()
		}
		if yyb2334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2341 := z.EncBinary()
	_ = yym2341
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2342 := z.DecBinary()
	_ = yym2342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2343 := z.EncBinary()
	_ = yym2343
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2344 := z.DecBinary()
	_ = yym2344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2345 := z.EncBinary()
		_ = yym2345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2346 := !z.EncBinary()
			yy2arr2346 := z.EncBasicHandle().StructToArray
			var yyq2346 [1]bool
			_, _, _ = yysep2346, yyq2346, yy2arr2346
			const yyr2346 bool = false
			yyq2346[0] = true
			var yynn2346 int
			if yyr2346 || yy2arr2346 {
				r.EncodeArrayStart(1)
			} else {
				yynn2346 = 0
				for _, b := range yyq2346 {
					if b {
						yynn2346++
					}
				}
				r.EncodeMapStart(yynn2346)
				yynn2346 = 0
			}
			if yyr2346 || yy2arr2346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2346[0] {
					yy2348 := &x.LoadBalancer
					yy2348.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2346[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2349 := &x.LoadBalancer
					yy2349.CodecEncodeSelf(e)
				}
			}
			if yyr2346 || yy2arr2346 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2350 := z.DecBinary()
	_ = yym2350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2351 := r.ContainerType()
		if yyct2351 == codecSelferValueTypeMap1234 {
			yyl2351 := r.ReadMapStart()
			if yyl2351 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2351, d)
			}
		} else if yyct2351 == codecSelferValueTypeArray1234 {
			yyl2351 := r.ReadArrayStart()
			if yyl2351 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2351, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2352Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2352Slc
	var yyhl2352 bool = l >= 0
	for yyj2352 := 0; ; yyj2352++ {
		if yyhl2352 {
			if yyj2352 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2352Slc = r.DecodeBytes(yys2352Slc, true, true)
		yys2352 := string(yys2352Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2352 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2353 := &x.LoadBalancer
				yyv2353.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2352)
		} // end switch yys2352
	} // end for yyj2352
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2354 int
	var yyb2354 bool
	var yyhl2354 bool = l >= 0
	yyj2354++
	if yyhl2354 {
		yyb2354 = yyj2354 > l
	} else {
		yyb2354 = r.CheckBreak()
	}
	if yyb2354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2355 := &x.LoadBalancer
		yyv2355.CodecDecodeSelf(d)
	}
	for {
		yyj2354++
		if yyhl2354 {
			yyb2354 = yyj2354 > l
		} else {
			yyb2354 = r.CheckBreak()
		}
		if yyb2354 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2354-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2356 := z.EncBinary()
		_ = yym2356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2357 := !z.EncBinary()
			yy2arr2357 := z.EncBasicHandle().StructToArray
			var yyq2357 [1]bool
			_, _, _ = yysep2357, yyq2357, yy2arr2357
			const yyr2357 bool = false
			yyq2357[0] = len(x.Ingress) != 0
			var yynn2357 int
			if yyr2357 || yy2arr2357 {
				r.EncodeArrayStart(1)
			} else {
				yynn2357 = 0
				for _, b := range yyq2357 {
					if b {
						yynn2357++
					}
				}
				r.EncodeMapStart(yynn2357)
				yynn2357 = 0
			}
			if yyr2357 || yy2arr2357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2357[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2359 := z.EncBinary()
						_ = yym2359
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2357[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2360 := z.EncBinary()
						_ = yym2360
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2357 || yy2arr2357 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2361 := z.DecBinary()
	_ = yym2361
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2362 := r.ContainerType()
		if yyct2362 == codecSelferValueTypeMap1234 {
			yyl2362 := r.ReadMapStart()
			if yyl2362 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2362, d)
			}
		} else if yyct2362 == codecSelferValueTypeArray1234 {
			yyl2362 := r.ReadArrayStart()
			if yyl2362 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2362, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2363Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2363Slc
	var yyhl2363 bool = l >= 0
	for yyj2363 := 0; ; yyj2363++ {
		if yyhl2363 {
			if yyj2363 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2363Slc = r.DecodeBytes(yys2363Slc, true, true)
		yys2363 := string(yys2363Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2363 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2364 := &x.Ingress
				yym2365 := z.DecBinary()
				_ = yym2365
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2364), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2363)
		} // end switch yys2363
	} // end for yyj2363
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2366 int
	var yyb2366 bool
	var yyhl2366 bool = l >= 0
	yyj2366++
	if yyhl2366 {
		yyb2366 = yyj2366 > l
	} else {
		yyb2366 = r.CheckBreak()
	}
	if yyb2366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2367 := &x.Ingress
		yym2368 := z.DecBinary()
		_ = yym2368
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2367), d)
		}
	}
	for {
		yyj2366++
		if yyhl2366 {
			yyb2366 = yyj2366 > l
		} else {
			yyb2366 = r.CheckBreak()
		}
		if yyb2366 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2366-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2369 := z.EncBinary()
		_ = yym2369
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2370 := !z.EncBinary()
			yy2arr2370 := z.EncBasicHandle().StructToArray
			var yyq2370 [2]bool
			_, _, _ = yysep2370, yyq2370, yy2arr2370
			const yyr2370 bool = false
			yyq2370[0] = x.IP != ""
			yyq2370[1] = x.Hostname != ""
			var yynn2370 int
			if yyr2370 || yy2arr2370 {
				r.EncodeArrayStart(2)
			} else {
				yynn2370 = 0
				for _, b := range yyq2370 {
					if b {
						yynn2370++
					}
				}
				r.EncodeMapStart(yynn2370)
				yynn2370 = 0
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2370[0] {
					yym2372 := z.EncBinary()
					_ = yym2372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2370[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2373 := z.EncBinary()
					_ = yym2373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2370[1] {
					yym2375 := z.EncBinary()
					_ = yym2375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2370[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2376 := z.EncBinary()
					_ = yym2376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2377 := z.DecBinary()
	_ = yym2377
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2378 := r.ContainerType()
		if yyct2378 == codecSelferValueTypeMap1234 {
			yyl2378 := r.ReadMapStart()
			if yyl2378 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2378, d)
			}
		} else if yyct2378 == codecSelferValueTypeArray1234 {
			yyl2378 := r.ReadArrayStart()
			if yyl2378 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2378, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2379Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2379Slc
	var yyhl2379 bool = l >= 0
	for yyj2379 := 0; ; yyj2379++ {
		if yyhl2379 {
			if yyj2379 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2379Slc = r.DecodeBytes(yys2379Slc, true, true)
		yys2379 := string(yys2379Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2379 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2379)
		} // end switch yys2379
	} // end for yyj2379
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2382 int
	var yyb2382 bool
	var yyhl2382 bool = l >= 0
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2382++
		if yyhl2382 {
			yyb2382 = yyj2382 > l
		} else {
			yyb2382 = r.CheckBreak()
		}
		if yyb2382 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2382-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2385 := z.EncBinary()
		_ = yym2385
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2386 := !z.EncBinary()
			yy2arr2386 := z.EncBasicHandle().StructToArray
			var yyq2386 [9]bool
			_, _, _ = yysep2386, yyq2386, yy2arr2386
			const yyr2386 bool = false
			yyq2386[1] = len(x.Selector) != 0
			yyq2386[2] = x.ClusterIP != ""
			yyq2386[3] = x.Type != ""
			yyq2386[4] = len(x.ExternalIPs) != 0
			yyq2386[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2386[6] = x.SessionAffinity != ""
			yyq2386[7] = x.LoadBalancerIP != ""
			yyq2386[8] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2386 int
			if yyr2386 || yy2arr2386 {
				r.EncodeArrayStart(9)
			} else {
				yynn2386 = 1
				for _, b := range yyq2386 {
					if b {
						yynn2386++
					}
				}
				r.EncodeMapStart(yynn2386)
				yynn2386 = 0
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2388 := z.EncBinary()
					_ = yym2388
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2389 := z.EncBinary()
					_ = yym2389
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2391 := z.EncBinary()
						_ = yym2391
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2386[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2392 := z.EncBinary()
						_ = yym2392
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[2] {
					yym2394 := z.EncBinary()
					_ = yym2394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2386[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2395 := z.EncBinary()
					_ = yym2395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2386[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2398 := z.EncBinary()
						_ = yym2398
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2386[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2399 := z.EncBinary()
						_ = yym2399
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2401 := z.EncBinary()
						_ = yym2401
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2386[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2402 := z.EncBinary()
						_ = yym2402
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2386[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[7] {
					yym2405 := z.EncBinary()
					_ = yym2405
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2386[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2406 := z.EncBinary()
					_ = yym2406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2408 := z.EncBinary()
						_ = yym2408
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2386[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2409 := z.EncBinary()
						_ = yym2409
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2410 := z.DecBinary()
	_ = yym2410
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2411 := r.ContainerType()
		if yyct2411 == codecSelferValueTypeMap1234 {
			yyl2411 := r.ReadMapStart()
			if yyl2411 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2411, d)
			}
		} else if yyct2411 == codecSelferValueTypeArray1234 {
			yyl2411 := r.ReadArrayStart()
			if yyl2411 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2411, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2412Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2412Slc
	var yyhl2412 bool = l >= 0
	for yyj2412 := 0; ; yyj2412++ {
		if yyhl2412 {
			if yyj2412 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2412Slc = r.DecodeBytes(yys2412Slc, true, true)
		yys2412 := string(yys2412Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2412 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2413 := &x.Ports
				yym2414 := z.DecBinary()
				_ = yym2414
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2413), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2415 := &x.Selector
				yym2416 := z.DecBinary()
				_ = yym2416
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2415, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2419 := &x.ExternalIPs
				yym2420 := z.DecBinary()
				_ = yym2420
				if false {
				} else {
					z.F.DecSliceStringX(yyv2419, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2421 := &x.DeprecatedPublicIPs
				yym2422 := z.DecBinary()
				_ = yym2422
				if false {
				} else {
					z.F.DecSliceStringX(yyv2421, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2425 := &x.LoadBalancerSourceRanges
				yym2426 := z.DecBinary()
				_ = yym2426
				if false {
				} else {
					z.F.DecSliceStringX(yyv2425, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2412)
		} // end switch yys2412
	} // end for yyj2412
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2427 int
	var yyb2427 bool
	var yyhl2427 bool = l >= 0
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2428 := &x.Ports
		yym2429 := z.DecBinary()
		_ = yym2429
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2428), d)
		}
	}
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2430 := &x.Selector
		yym2431 := z.DecBinary()
		_ = yym2431
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2430, false, d)
		}
	}
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2434 := &x.ExternalIPs
		yym2435 := z.DecBinary()
		_ = yym2435
		if false {
		} else {
			z.F.DecSliceStringX(yyv2434, false, d)
		}
	}
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2436 := &x.DeprecatedPublicIPs
		yym2437 := z.DecBinary()
		_ = yym2437
		if false {
		} else {
			z.F.DecSliceStringX(yyv2436, false, d)
		}
	}
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2440 := &x.LoadBalancerSourceRanges
		yym2441 := z.DecBinary()
		_ = yym2441
		if false {
		} else {
			z.F.DecSliceStringX(yyv2440, false, d)
		}
	}
	for {
		yyj2427++
		if yyhl2427 {
			yyb2427 = yyj2427 > l
		} else {
			yyb2427 = r.CheckBreak()
		}
		if yyb2427 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2427-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2442 := z.EncBinary()
		_ = yym2442
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2443 := !z.EncBinary()
			yy2arr2443 := z.EncBasicHandle().StructToArray
			var yyq2443 [5]bool
			_, _, _ = yysep2443, yyq2443, yy2arr2443
			const yyr2443 bool = false
			yyq2443[0] = x.Name != ""
			yyq2443[1] = x.Protocol != ""
			yyq2443[3] = true
			yyq2443[4] = x.NodePort != 0
			var yynn2443 int
			if yyr2443 || yy2arr2443 {
				r.EncodeArrayStart(5)
			} else {
				yynn2443 = 1
				for _, b := range yyq2443 {
					if b {
						yynn2443++
					}
				}
				r.EncodeMapStart(yynn2443)
				yynn2443 = 0
			}
			if yyr2443 || yy2arr2443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2443[0] {
					yym2445 := z.EncBinary()
					_ = yym2445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2443[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2446 := z.EncBinary()
					_ = yym2446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2443 || yy2arr2443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2443[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2443[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2443 || yy2arr2443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2449 := z.EncBinary()
				_ = yym2449
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2450 := z.EncBinary()
				_ = yym2450
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2443 || yy2arr2443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2443[3] {
					yy2452 := &x.TargetPort
					yym2453 := z.EncBinary()
					_ = yym2453
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2452) {
					} else if !yym2453 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2452)
					} else {
						z.EncFallback(yy2452)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2443[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2454 := &x.TargetPort
					yym2455 := z.EncBinary()
					_ = yym2455
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2454) {
					} else if !yym2455 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2454)
					} else {
						z.EncFallback(yy2454)
					}
				}
			}
			if yyr2443 || yy2arr2443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2443[4] {
					yym2457 := z.EncBinary()
					_ = yym2457
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2443[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2443 || yy2arr2443 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2459 := z.DecBinary()
	_ = yym2459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2460 := r.ContainerType()
		if yyct2460 == codecSelferValueTypeMap1234 {
			yyl2460 := r.ReadMapStart()
			if yyl2460 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2460, d)
			}
		} else if yyct2460 == codecSelferValueTypeArray1234 {
			yyl2460 := r.ReadArrayStart()
			if yyl2460 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2460, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2461Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2461Slc
	var yyhl2461 bool = l >= 0
	for yyj2461 := 0; ; yyj2461++ {
		if yyhl2461 {
			if yyj2461 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2461Slc = r.DecodeBytes(yys2461Slc, true, true)
		yys2461 := string(yys2461Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2461 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2465 := &x.TargetPort
				yym2466 := z.DecBinary()
				_ = yym2466
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2465) {
				} else if !yym2466 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2465)
				} else {
					z.DecFallback(yyv2465, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2461)
		} // end switch yys2461
	} // end for yyj2461
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2468 int
	var yyb2468 bool
	var yyhl2468 bool = l >= 0
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2472 := &x.TargetPort
		yym2473 := z.DecBinary()
		_ = yym2473
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2472) {
		} else if !yym2473 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2472)
		} else {
			z.DecFallback(yyv2472, false)
		}
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2468++
		if yyhl2468 {
			yyb2468 = yyj2468 > l
		} else {
			yyb2468 = r.CheckBreak()
		}
		if yyb2468 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2468-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2475 := z.EncBinary()
		_ = yym2475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2476 := !z.EncBinary()
			yy2arr2476 := z.EncBasicHandle().StructToArray
			var yyq2476 [5]bool
			_, _, _ = yysep2476, yyq2476, yy2arr2476
			const yyr2476 bool = false
			yyq2476[0] = x.Kind != ""
			yyq2476[1] = x.APIVersion != ""
			yyq2476[2] = true
			yyq2476[3] = true
			yyq2476[4] = true
			var yynn2476 int
			if yyr2476 || yy2arr2476 {
				r.EncodeArrayStart(5)
			} else {
				yynn2476 = 0
				for _, b := range yyq2476 {
					if b {
						yynn2476++
					}
				}
				r.EncodeMapStart(yynn2476)
				yynn2476 = 0
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2476[0] {
					yym2478 := z.EncBinary()
					_ = yym2478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2479 := z.EncBinary()
					_ = yym2479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2476[1] {
					yym2481 := z.EncBinary()
					_ = yym2481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2482 := z.EncBinary()
					_ = yym2482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2476[2] {
					yy2484 := &x.ObjectMeta
					yy2484.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2485 := &x.ObjectMeta
					yy2485.CodecEncodeSelf(e)
				}
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2476[3] {
					yy2487 := &x.Spec
					yy2487.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2476[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2488 := &x.Spec
					yy2488.CodecEncodeSelf(e)
				}
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2476[4] {
					yy2490 := &x.Status
					yy2490.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2476[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2491 := &x.Status
					yy2491.CodecEncodeSelf(e)
				}
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2492 := z.DecBinary()
	_ = yym2492
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2493 := r.ContainerType()
		if yyct2493 == codecSelferValueTypeMap1234 {
			yyl2493 := r.ReadMapStart()
			if yyl2493 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2493, d)
			}
		} else if yyct2493 == codecSelferValueTypeArray1234 {
			yyl2493 := r.ReadArrayStart()
			if yyl2493 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2493, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2494Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2494Slc
	var yyhl2494 bool = l >= 0
	for yyj2494 := 0; ; yyj2494++ {
		if yyhl2494 {
			if yyj2494 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2494Slc = r.DecodeBytes(yys2494Slc, true, true)
		yys2494 := string(yys2494Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2494 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2497 := &x.ObjectMeta
				yyv2497.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2498 := &x.Spec
				yyv2498.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2499 := &x.Status
				yyv2499.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2494)
		} // end switch yys2494
	} // end for yyj2494
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2500 int
	var yyb2500 bool
	var yyhl2500 bool = l >= 0
	yyj2500++
	if yyhl2500 {
		yyb2500 = yyj2500 > l
	} else {
		yyb2500 = r.CheckBreak()
	}
	if yyb2500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2500++
	if yyhl2500 {
		yyb2500 = yyj2500 > l
	} else {
		yyb2500 = r.CheckBreak()
	}
	if yyb2500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2500++
	if yyhl2500 {
		yyb2500 = yyj2500 > l
	} else {
		yyb2500 = r.CheckBreak()
	}
	if yyb2500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2503 := &x.ObjectMeta
		yyv2503.CodecDecodeSelf(d)
	}
	yyj2500++
	if yyhl2500 {
		yyb2500 = yyj2500 > l
	} else {
		yyb2500 = r.CheckBreak()
	}
	if yyb2500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2504 := &x.Spec
		yyv2504.CodecDecodeSelf(d)
	}
	yyj2500++
	if yyhl2500 {
		yyb2500 = yyj2500 > l
	} else {
		yyb2500 = r.CheckBreak()
	}
	if yyb2500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2505 := &x.Status
		yyv2505.CodecDecodeSelf(d)
	}
	for {
		yyj2500++
		if yyhl2500 {
			yyb2500 = yyj2500 > l
		} else {
			yyb2500 = r.CheckBreak()
		}
		if yyb2500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2506 := z.EncBinary()
		_ = yym2506
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2507 := !z.EncBinary()
			yy2arr2507 := z.EncBasicHandle().StructToArray
			var yyq2507 [4]bool
			_, _, _ = yysep2507, yyq2507, yy2arr2507
			const yyr2507 bool = false
			yyq2507[0] = x.Kind != ""
			yyq2507[1] = x.APIVersion != ""
			yyq2507[2] = true
			var yynn2507 int
			if yyr2507 || yy2arr2507 {
				r.EncodeArrayStart(4)
			} else {
				yynn2507 = 1
				for _, b := range yyq2507 {
					if b {
						yynn2507++
					}
				}
				r.EncodeMapStart(yynn2507)
				yynn2507 = 0
			}
			if yyr2507 || yy2arr2507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2507[0] {
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2507[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2510 := z.EncBinary()
					_ = yym2510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2507 || yy2arr2507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2507[1] {
					yym2512 := z.EncBinary()
					_ = yym2512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2507[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2513 := z.EncBinary()
					_ = yym2513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2507 || yy2arr2507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2507[2] {
					yy2515 := &x.ListMeta
					yym2516 := z.EncBinary()
					_ = yym2516
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2515) {
					} else {
						z.EncFallback(yy2515)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2507[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2517 := &x.ListMeta
					yym2518 := z.EncBinary()
					_ = yym2518
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2517) {
					} else {
						z.EncFallback(yy2517)
					}
				}
			}
			if yyr2507 || yy2arr2507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2521 := z.EncBinary()
					_ = yym2521
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2507 || yy2arr2507 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2522 := z.DecBinary()
	_ = yym2522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2523 := r.ContainerType()
		if yyct2523 == codecSelferValueTypeMap1234 {
			yyl2523 := r.ReadMapStart()
			if yyl2523 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2523, d)
			}
		} else if yyct2523 == codecSelferValueTypeArray1234 {
			yyl2523 := r.ReadArrayStart()
			if yyl2523 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2523, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2524Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2524Slc
	var yyhl2524 bool = l >= 0
	for yyj2524 := 0; ; yyj2524++ {
		if yyhl2524 {
			if yyj2524 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2524Slc = r.DecodeBytes(yys2524Slc, true, true)
		yys2524 := string(yys2524Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2524 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2527 := &x.ListMeta
				yym2528 := z.DecBinary()
				_ = yym2528
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2527) {
				} else {
					z.DecFallback(yyv2527, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2529 := &x.Items
				yym2530 := z.DecBinary()
				_ = yym2530
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2529), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2524)
		} // end switch yys2524
	} // end for yyj2524
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2531 int
	var yyb2531 bool
	var yyhl2531 bool = l >= 0
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2534 := &x.ListMeta
		yym2535 := z.DecBinary()
		_ = yym2535
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2534) {
		} else {
			z.DecFallback(yyv2534, false)
		}
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2536 := &x.Items
		yym2537 := z.DecBinary()
		_ = yym2537
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2536), d)
		}
	}
	for {
		yyj2531++
		if yyhl2531 {
			yyb2531 = yyj2531 > l
		} else {
			yyb2531 = r.CheckBreak()
		}
		if yyb2531 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2531-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2538 := z.EncBinary()
		_ = yym2538
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2539 := !z.EncBinary()
			yy2arr2539 := z.EncBasicHandle().StructToArray
			var yyq2539 [5]bool
			_, _, _ = yysep2539, yyq2539, yy2arr2539
			const yyr2539 bool = false
			yyq2539[0] = x.Kind != ""
			yyq2539[1] = x.APIVersion != ""
			yyq2539[2] = true
			yyq2539[3] = len(x.Secrets) != 0
			yyq2539[4] = len(x.ImagePullSecrets) != 0
			var yynn2539 int
			if yyr2539 || yy2arr2539 {
				r.EncodeArrayStart(5)
			} else {
				yynn2539 = 0
				for _, b := range yyq2539 {
					if b {
						yynn2539++
					}
				}
				r.EncodeMapStart(yynn2539)
				yynn2539 = 0
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[0] {
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2539[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2542 := z.EncBinary()
					_ = yym2542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[1] {
					yym2544 := z.EncBinary()
					_ = yym2544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2539[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2545 := z.EncBinary()
					_ = yym2545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[2] {
					yy2547 := &x.ObjectMeta
					yy2547.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2539[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2548 := &x.ObjectMeta
					yy2548.CodecEncodeSelf(e)
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2550 := z.EncBinary()
						_ = yym2550
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2539[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2551 := z.EncBinary()
						_ = yym2551
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2553 := z.EncBinary()
						_ = yym2553
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2539[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2554 := z.EncBinary()
						_ = yym2554
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2555 := z.DecBinary()
	_ = yym2555
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2556 := r.ContainerType()
		if yyct2556 == codecSelferValueTypeMap1234 {
			yyl2556 := r.ReadMapStart()
			if yyl2556 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2556, d)
			}
		} else if yyct2556 == codecSelferValueTypeArray1234 {
			yyl2556 := r.ReadArrayStart()
			if yyl2556 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2556, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2557Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2557Slc
	var yyhl2557 bool = l >= 0
	for yyj2557 := 0; ; yyj2557++ {
		if yyhl2557 {
			if yyj2557 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2557Slc = r.DecodeBytes(yys2557Slc, true, true)
		yys2557 := string(yys2557Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2557 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2560 := &x.ObjectMeta
				yyv2560.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2561 := &x.Secrets
				yym2562 := z.DecBinary()
				_ = yym2562
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2561), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2563 := &x.ImagePullSecrets
				yym2564 := z.DecBinary()
				_ = yym2564
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2563), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2557)
		} // end switch yys2557
	} // end for yyj2557
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2565 int
	var yyb2565 bool
	var yyhl2565 bool = l >= 0
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2568 := &x.ObjectMeta
		yyv2568.CodecDecodeSelf(d)
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2569 := &x.Secrets
		yym2570 := z.DecBinary()
		_ = yym2570
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2569), d)
		}
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2571 := &x.ImagePullSecrets
		yym2572 := z.DecBinary()
		_ = yym2572
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2571), d)
		}
	}
	for {
		yyj2565++
		if yyhl2565 {
			yyb2565 = yyj2565 > l
		} else {
			yyb2565 = r.CheckBreak()
		}
		if yyb2565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2573 := z.EncBinary()
		_ = yym2573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2574 := !z.EncBinary()
			yy2arr2574 := z.EncBasicHandle().StructToArray
			var yyq2574 [4]bool
			_, _, _ = yysep2574, yyq2574, yy2arr2574
			const yyr2574 bool = false
			yyq2574[0] = x.Kind != ""
			yyq2574[1] = x.APIVersion != ""
			yyq2574[2] = true
			var yynn2574 int
			if yyr2574 || yy2arr2574 {
				r.EncodeArrayStart(4)
			} else {
				yynn2574 = 1
				for _, b := range yyq2574 {
					if b {
						yynn2574++
					}
				}
				r.EncodeMapStart(yynn2574)
				yynn2574 = 0
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2574[0] {
					yym2576 := z.EncBinary()
					_ = yym2576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2574[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2577 := z.EncBinary()
					_ = yym2577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2574[1] {
					yym2579 := z.EncBinary()
					_ = yym2579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2574[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2580 := z.EncBinary()
					_ = yym2580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2574[2] {
					yy2582 := &x.ListMeta
					yym2583 := z.EncBinary()
					_ = yym2583
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2582) {
					} else {
						z.EncFallback(yy2582)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2574[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2584 := &x.ListMeta
					yym2585 := z.EncBinary()
					_ = yym2585
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2584) {
					} else {
						z.EncFallback(yy2584)
					}
				}
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2587 := z.EncBinary()
					_ = yym2587
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2588 := z.EncBinary()
					_ = yym2588
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2589 := z.DecBinary()
	_ = yym2589
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2590 := r.ContainerType()
		if yyct2590 == codecSelferValueTypeMap1234 {
			yyl2590 := r.ReadMapStart()
			if yyl2590 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2590, d)
			}
		} else if yyct2590 == codecSelferValueTypeArray1234 {
			yyl2590 := r.ReadArrayStart()
			if yyl2590 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2590, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2591Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2591Slc
	var yyhl2591 bool = l >= 0
	for yyj2591 := 0; ; yyj2591++ {
		if yyhl2591 {
			if yyj2591 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2591Slc = r.DecodeBytes(yys2591Slc, true, true)
		yys2591 := string(yys2591Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2591 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2594 := &x.ListMeta
				yym2595 := z.DecBinary()
				_ = yym2595
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2594) {
				} else {
					z.DecFallback(yyv2594, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2596 := &x.Items
				yym2597 := z.DecBinary()
				_ = yym2597
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2596), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2591)
		} // end switch yys2591
	} // end for yyj2591
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2598 int
	var yyb2598 bool
	var yyhl2598 bool = l >= 0
	yyj2598++
	if yyhl2598 {
		yyb2598 = yyj2598 > l
	} else {
		yyb2598 = r.CheckBreak()
	}
	if yyb2598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2598++
	if yyhl2598 {
		yyb2598 = yyj2598 > l
	} else {
		yyb2598 = r.CheckBreak()
	}
	if yyb2598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2598++
	if yyhl2598 {
		yyb2598 = yyj2598 > l
	} else {
		yyb2598 = r.CheckBreak()
	}
	if yyb2598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2601 := &x.ListMeta
		yym2602 := z.DecBinary()
		_ = yym2602
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2601) {
		} else {
			z.DecFallback(yyv2601, false)
		}
	}
	yyj2598++
	if yyhl2598 {
		yyb2598 = yyj2598 > l
	} else {
		yyb2598 = r.CheckBreak()
	}
	if yyb2598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2603 := &x.Items
		yym2604 := z.DecBinary()
		_ = yym2604
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2603), d)
		}
	}
	for {
		yyj2598++
		if yyhl2598 {
			yyb2598 = yyj2598 > l
		} else {
			yyb2598 = r.CheckBreak()
		}
		if yyb2598 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2598-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2605 := z.EncBinary()
		_ = yym2605
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2606 := !z.EncBinary()
			yy2arr2606 := z.EncBasicHandle().StructToArray
			var yyq2606 [4]bool
			_, _, _ = yysep2606, yyq2606, yy2arr2606
			const yyr2606 bool = false
			yyq2606[0] = x.Kind != ""
			yyq2606[1] = x.APIVersion != ""
			yyq2606[2] = true
			var yynn2606 int
			if yyr2606 || yy2arr2606 {
				r.EncodeArrayStart(4)
			} else {
				yynn2606 = 1
				for _, b := range yyq2606 {
					if b {
						yynn2606++
					}
				}
				r.EncodeMapStart(yynn2606)
				yynn2606 = 0
			}
			if yyr2606 || yy2arr2606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2606[0] {
					yym2608 := z.EncBinary()
					_ = yym2608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2606[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2609 := z.EncBinary()
					_ = yym2609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2606 || yy2arr2606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2606[1] {
					yym2611 := z.EncBinary()
					_ = yym2611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2606[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2612 := z.EncBinary()
					_ = yym2612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2606 || yy2arr2606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2606[2] {
					yy2614 := &x.ObjectMeta
					yy2614.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2606[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2615 := &x.ObjectMeta
					yy2615.CodecEncodeSelf(e)
				}
			}
			if yyr2606 || yy2arr2606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2618 := z.EncBinary()
					_ = yym2618
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2606 || yy2arr2606 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2619 := z.DecBinary()
	_ = yym2619
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2620 := r.ContainerType()
		if yyct2620 == codecSelferValueTypeMap1234 {
			yyl2620 := r.ReadMapStart()
			if yyl2620 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2620, d)
			}
		} else if yyct2620 == codecSelferValueTypeArray1234 {
			yyl2620 := r.ReadArrayStart()
			if yyl2620 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2620, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2621Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2621Slc
	var yyhl2621 bool = l >= 0
	for yyj2621 := 0; ; yyj2621++ {
		if yyhl2621 {
			if yyj2621 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2621Slc = r.DecodeBytes(yys2621Slc, true, true)
		yys2621 := string(yys2621Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2621 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2624 := &x.ObjectMeta
				yyv2624.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2625 := &x.Subsets
				yym2626 := z.DecBinary()
				_ = yym2626
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2625), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2621)
		} // end switch yys2621
	} // end for yyj2621
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2627 int
	var yyb2627 bool
	var yyhl2627 bool = l >= 0
	yyj2627++
	if yyhl2627 {
		yyb2627 = yyj2627 > l
	} else {
		yyb2627 = r.CheckBreak()
	}
	if yyb2627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2627++
	if yyhl2627 {
		yyb2627 = yyj2627 > l
	} else {
		yyb2627 = r.CheckBreak()
	}
	if yyb2627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2627++
	if yyhl2627 {
		yyb2627 = yyj2627 > l
	} else {
		yyb2627 = r.CheckBreak()
	}
	if yyb2627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2630 := &x.ObjectMeta
		yyv2630.CodecDecodeSelf(d)
	}
	yyj2627++
	if yyhl2627 {
		yyb2627 = yyj2627 > l
	} else {
		yyb2627 = r.CheckBreak()
	}
	if yyb2627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2631 := &x.Subsets
		yym2632 := z.DecBinary()
		_ = yym2632
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2631), d)
		}
	}
	for {
		yyj2627++
		if yyhl2627 {
			yyb2627 = yyj2627 > l
		} else {
			yyb2627 = r.CheckBreak()
		}
		if yyb2627 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2627-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2633 := z.EncBinary()
		_ = yym2633
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2634 := !z.EncBinary()
			yy2arr2634 := z.EncBasicHandle().StructToArray
			var yyq2634 [3]bool
			_, _, _ = yysep2634, yyq2634, yy2arr2634
			const yyr2634 bool = false
			yyq2634[0] = len(x.Addresses) != 0
			yyq2634[1] = len(x.NotReadyAddresses) != 0
			yyq2634[2] = len(x.Ports) != 0
			var yynn2634 int
			if yyr2634 || yy2arr2634 {
				r.EncodeArrayStart(3)
			} else {
				yynn2634 = 0
				for _, b := range yyq2634 {
					if b {
						yynn2634++
					}
				}
				r.EncodeMapStart(yynn2634)
				yynn2634 = 0
			}
			if yyr2634 || yy2arr2634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2634[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2636 := z.EncBinary()
						_ = yym2636
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2634[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2637 := z.EncBinary()
						_ = yym2637
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2634[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2639 := z.EncBinary()
						_ = yym2639
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2634[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2640 := z.EncBinary()
						_ = yym2640
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2634[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2642 := z.EncBinary()
						_ = yym2642
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2634[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2643 := z.EncBinary()
						_ = yym2643
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2644 := z.DecBinary()
	_ = yym2644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2645 := r.ContainerType()
		if yyct2645 == codecSelferValueTypeMap1234 {
			yyl2645 := r.ReadMapStart()
			if yyl2645 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2645, d)
			}
		} else if yyct2645 == codecSelferValueTypeArray1234 {
			yyl2645 := r.ReadArrayStart()
			if yyl2645 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2646Slc
	var yyhl2646 bool = l >= 0
	for yyj2646 := 0; ; yyj2646++ {
		if yyhl2646 {
			if yyj2646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2646Slc = r.DecodeBytes(yys2646Slc, true, true)
		yys2646 := string(yys2646Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2646 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2647 := &x.Addresses
				yym2648 := z.DecBinary()
				_ = yym2648
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2647), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2649 := &x.NotReadyAddresses
				yym2650 := z.DecBinary()
				_ = yym2650
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2649), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2651 := &x.Ports
				yym2652 := z.DecBinary()
				_ = yym2652
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2651), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2646)
		} // end switch yys2646
	} // end for yyj2646
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2653 int
	var yyb2653 bool
	var yyhl2653 bool = l >= 0
	yyj2653++
	if yyhl2653 {
		yyb2653 = yyj2653 > l
	} else {
		yyb2653 = r.CheckBreak()
	}
	if yyb2653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2654 := &x.Addresses
		yym2655 := z.DecBinary()
		_ = yym2655
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2654), d)
		}
	}
	yyj2653++
	if yyhl2653 {
		yyb2653 = yyj2653 > l
	} else {
		yyb2653 = r.CheckBreak()
	}
	if yyb2653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2656 := &x.NotReadyAddresses
		yym2657 := z.DecBinary()
		_ = yym2657
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2656), d)
		}
	}
	yyj2653++
	if yyhl2653 {
		yyb2653 = yyj2653 > l
	} else {
		yyb2653 = r.CheckBreak()
	}
	if yyb2653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2658 := &x.Ports
		yym2659 := z.DecBinary()
		_ = yym2659
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2658), d)
		}
	}
	for {
		yyj2653++
		if yyhl2653 {
			yyb2653 = yyj2653 > l
		} else {
			yyb2653 = r.CheckBreak()
		}
		if yyb2653 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2653-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2660 := z.EncBinary()
		_ = yym2660
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2661 := !z.EncBinary()
			yy2arr2661 := z.EncBasicHandle().StructToArray
			var yyq2661 [4]bool
			_, _, _ = yysep2661, yyq2661, yy2arr2661
			const yyr2661 bool = false
			yyq2661[1] = x.Hostname != ""
			yyq2661[2] = x.NodeName != nil
			yyq2661[3] = x.TargetRef != nil
			var yynn2661 int
			if yyr2661 || yy2arr2661 {
				r.EncodeArrayStart(4)
			} else {
				yynn2661 = 1
				for _, b := range yyq2661 {
					if b {
						yynn2661++
					}
				}
				r.EncodeMapStart(yynn2661)
				yynn2661 = 0
			}
			if yyr2661 || yy2arr2661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2663 := z.EncBinary()
				_ = yym2663
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2664 := z.EncBinary()
				_ = yym2664
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2661 || yy2arr2661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2661[1] {
					yym2666 := z.EncBinary()
					_ = yym2666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2661[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2667 := z.EncBinary()
					_ = yym2667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2661 || yy2arr2661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2661[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2669 := *x.NodeName
						yym2670 := z.EncBinary()
						_ = yym2670
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2669))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2661[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2671 := *x.NodeName
						yym2672 := z.EncBinary()
						_ = yym2672
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2671))
						}
					}
				}
			}
			if yyr2661 || yy2arr2661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2661[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2661[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2661 || yy2arr2661 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2674 := z.DecBinary()
	_ = yym2674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2675 := r.ContainerType()
		if yyct2675 == codecSelferValueTypeMap1234 {
			yyl2675 := r.ReadMapStart()
			if yyl2675 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2675, d)
			}
		} else if yyct2675 == codecSelferValueTypeArray1234 {
			yyl2675 := r.ReadArrayStart()
			if yyl2675 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2676Slc
	var yyhl2676 bool = l >= 0
	for yyj2676 := 0; ; yyj2676++ {
		if yyhl2676 {
			if yyj2676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2676Slc = r.DecodeBytes(yys2676Slc, true, true)
		yys2676 := string(yys2676Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2676 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2680 := z.DecBinary()
				_ = yym2680
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2676)
		} // end switch yys2676
	} // end for yyj2676
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2682 int
	var yyb2682 bool
	var yyhl2682 bool = l >= 0
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2686 := z.DecBinary()
		_ = yym2686
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2682++
		if yyhl2682 {
			yyb2682 = yyj2682 > l
		} else {
			yyb2682 = r.CheckBreak()
		}
		if yyb2682 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2682-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2688 := z.EncBinary()
		_ = yym2688
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2689 := !z.EncBinary()
			yy2arr2689 := z.EncBasicHandle().StructToArray
			var yyq2689 [3]bool
			_, _, _ = yysep2689, yyq2689, yy2arr2689
			const yyr2689 bool = false
			yyq2689[0] = x.Name != ""
			yyq2689[2] = x.Protocol != ""
			var yynn2689 int
			if yyr2689 || yy2arr2689 {
				r.EncodeArrayStart(3)
			} else {
				yynn2689 = 1
				for _, b := range yyq2689 {
					if b {
						yynn2689++
					}
				}
				r.EncodeMapStart(yynn2689)
				yynn2689 = 0
			}
			if yyr2689 || yy2arr2689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2689[0] {
					yym2691 := z.EncBinary()
					_ = yym2691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2689[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2692 := z.EncBinary()
					_ = yym2692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2689 || yy2arr2689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2694 := z.EncBinary()
				_ = yym2694
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2695 := z.EncBinary()
				_ = yym2695
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2689 || yy2arr2689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2689[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2689[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2689 || yy2arr2689 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2697 := z.DecBinary()
	_ = yym2697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2698 := r.ContainerType()
		if yyct2698 == codecSelferValueTypeMap1234 {
			yyl2698 := r.ReadMapStart()
			if yyl2698 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2698, d)
			}
		} else if yyct2698 == codecSelferValueTypeArray1234 {
			yyl2698 := r.ReadArrayStart()
			if yyl2698 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2699Slc
	var yyhl2699 bool = l >= 0
	for yyj2699 := 0; ; yyj2699++ {
		if yyhl2699 {
			if yyj2699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2699Slc = r.DecodeBytes(yys2699Slc, true, true)
		yys2699 := string(yys2699Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2699 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2699)
		} // end switch yys2699
	} // end for yyj2699
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2703 int
	var yyb2703 bool
	var yyhl2703 bool = l >= 0
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2703++
		if yyhl2703 {
			yyb2703 = yyj2703 > l
		} else {
			yyb2703 = r.CheckBreak()
		}
		if yyb2703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2707 := z.EncBinary()
		_ = yym2707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2708 := !z.EncBinary()
			yy2arr2708 := z.EncBasicHandle().StructToArray
			var yyq2708 [4]bool
			_, _, _ = yysep2708, yyq2708, yy2arr2708
			const yyr2708 bool = false
			yyq2708[0] = x.Kind != ""
			yyq2708[1] = x.APIVersion != ""
			yyq2708[2] = true
			var yynn2708 int
			if yyr2708 || yy2arr2708 {
				r.EncodeArrayStart(4)
			} else {
				yynn2708 = 1
				for _, b := range yyq2708 {
					if b {
						yynn2708++
					}
				}
				r.EncodeMapStart(yynn2708)
				yynn2708 = 0
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[0] {
					yym2710 := z.EncBinary()
					_ = yym2710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2708[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2711 := z.EncBinary()
					_ = yym2711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[1] {
					yym2713 := z.EncBinary()
					_ = yym2713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2708[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2714 := z.EncBinary()
					_ = yym2714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[2] {
					yy2716 := &x.ListMeta
					yym2717 := z.EncBinary()
					_ = yym2717
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2716) {
					} else {
						z.EncFallback(yy2716)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2708[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2718 := &x.ListMeta
					yym2719 := z.EncBinary()
					_ = yym2719
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2718) {
					} else {
						z.EncFallback(yy2718)
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2722 := z.EncBinary()
					_ = yym2722
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2723 := z.DecBinary()
	_ = yym2723
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2724 := r.ContainerType()
		if yyct2724 == codecSelferValueTypeMap1234 {
			yyl2724 := r.ReadMapStart()
			if yyl2724 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2724, d)
			}
		} else if yyct2724 == codecSelferValueTypeArray1234 {
			yyl2724 := r.ReadArrayStart()
			if yyl2724 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2724, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2725Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2725Slc
	var yyhl2725 bool = l >= 0
	for yyj2725 := 0; ; yyj2725++ {
		if yyhl2725 {
			if yyj2725 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2725Slc = r.DecodeBytes(yys2725Slc, true, true)
		yys2725 := string(yys2725Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2725 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2728 := &x.ListMeta
				yym2729 := z.DecBinary()
				_ = yym2729
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2728) {
				} else {
					z.DecFallback(yyv2728, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2730 := &x.Items
				yym2731 := z.DecBinary()
				_ = yym2731
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2730), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2725)
		} // end switch yys2725
	} // end for yyj2725
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2732 int
	var yyb2732 bool
	var yyhl2732 bool = l >= 0
	yyj2732++
	if yyhl2732 {
		yyb2732 = yyj2732 > l
	} else {
		yyb2732 = r.CheckBreak()
	}
	if yyb2732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2732++
	if yyhl2732 {
		yyb2732 = yyj2732 > l
	} else {
		yyb2732 = r.CheckBreak()
	}
	if yyb2732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2732++
	if yyhl2732 {
		yyb2732 = yyj2732 > l
	} else {
		yyb2732 = r.CheckBreak()
	}
	if yyb2732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2735 := &x.ListMeta
		yym2736 := z.DecBinary()
		_ = yym2736
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2735) {
		} else {
			z.DecFallback(yyv2735, false)
		}
	}
	yyj2732++
	if yyhl2732 {
		yyb2732 = yyj2732 > l
	} else {
		yyb2732 = r.CheckBreak()
	}
	if yyb2732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2737 := &x.Items
		yym2738 := z.DecBinary()
		_ = yym2738
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2737), d)
		}
	}
	for {
		yyj2732++
		if yyhl2732 {
			yyb2732 = yyj2732 > l
		} else {
			yyb2732 = r.CheckBreak()
		}
		if yyb2732 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2732-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2739 := z.EncBinary()
		_ = yym2739
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2740 := !z.EncBinary()
			yy2arr2740 := z.EncBasicHandle().StructToArray
			var yyq2740 [4]bool
			_, _, _ = yysep2740, yyq2740, yy2arr2740
			const yyr2740 bool = false
			yyq2740[0] = x.PodCIDR != ""
			yyq2740[1] = x.ExternalID != ""
			yyq2740[2] = x.ProviderID != ""
			yyq2740[3] = x.Unschedulable != false
			var yynn2740 int
			if yyr2740 || yy2arr2740 {
				r.EncodeArrayStart(4)
			} else {
				yynn2740 = 0
				for _, b := range yyq2740 {
					if b {
						yynn2740++
					}
				}
				r.EncodeMapStart(yynn2740)
				yynn2740 = 0
			}
			if yyr2740 || yy2arr2740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2740[0] {
					yym2742 := z.EncBinary()
					_ = yym2742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2740[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2743 := z.EncBinary()
					_ = yym2743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2740 || yy2arr2740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2740[1] {
					yym2745 := z.EncBinary()
					_ = yym2745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2740[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2740 || yy2arr2740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2740[2] {
					yym2748 := z.EncBinary()
					_ = yym2748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2740[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2740 || yy2arr2740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2740[3] {
					yym2751 := z.EncBinary()
					_ = yym2751
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2740[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2740 || yy2arr2740 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2753 := z.DecBinary()
	_ = yym2753
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2754 := r.ContainerType()
		if yyct2754 == codecSelferValueTypeMap1234 {
			yyl2754 := r.ReadMapStart()
			if yyl2754 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2754, d)
			}
		} else if yyct2754 == codecSelferValueTypeArray1234 {
			yyl2754 := r.ReadArrayStart()
			if yyl2754 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2754, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2755Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2755Slc
	var yyhl2755 bool = l >= 0
	for yyj2755 := 0; ; yyj2755++ {
		if yyhl2755 {
			if yyj2755 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2755Slc = r.DecodeBytes(yys2755Slc, true, true)
		yys2755 := string(yys2755Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2755 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2755)
		} // end switch yys2755
	} // end for yyj2755
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2760 int
	var yyb2760 bool
	var yyhl2760 bool = l >= 0
	yyj2760++
	if yyhl2760 {
		yyb2760 = yyj2760 > l
	} else {
		yyb2760 = r.CheckBreak()
	}
	if yyb2760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2760++
	if yyhl2760 {
		yyb2760 = yyj2760 > l
	} else {
		yyb2760 = r.CheckBreak()
	}
	if yyb2760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2760++
	if yyhl2760 {
		yyb2760 = yyj2760 > l
	} else {
		yyb2760 = r.CheckBreak()
	}
	if yyb2760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2760++
	if yyhl2760 {
		yyb2760 = yyj2760 > l
	} else {
		yyb2760 = r.CheckBreak()
	}
	if yyb2760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2760++
		if yyhl2760 {
			yyb2760 = yyj2760 > l
		} else {
			yyb2760 = r.CheckBreak()
		}
		if yyb2760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2765 := z.EncBinary()
		_ = yym2765
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2766 := !z.EncBinary()
			yy2arr2766 := z.EncBasicHandle().StructToArray
			var yyq2766 [1]bool
			_, _, _ = yysep2766, yyq2766, yy2arr2766
			const yyr2766 bool = false
			var yynn2766 int
			if yyr2766 || yy2arr2766 {
				r.EncodeArrayStart(1)
			} else {
				yynn2766 = 1
				for _, b := range yyq2766 {
					if b {
						yynn2766++
					}
				}
				r.EncodeMapStart(yynn2766)
				yynn2766 = 0
			}
			if yyr2766 || yy2arr2766 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2768 := z.EncBinary()
				_ = yym2768
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2769 := z.EncBinary()
				_ = yym2769
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2766 || yy2arr2766 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2770 := z.DecBinary()
	_ = yym2770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2771 := r.ContainerType()
		if yyct2771 == codecSelferValueTypeMap1234 {
			yyl2771 := r.ReadMapStart()
			if yyl2771 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2771, d)
			}
		} else if yyct2771 == codecSelferValueTypeArray1234 {
			yyl2771 := r.ReadArrayStart()
			if yyl2771 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2772Slc
	var yyhl2772 bool = l >= 0
	for yyj2772 := 0; ; yyj2772++ {
		if yyhl2772 {
			if yyj2772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2772Slc = r.DecodeBytes(yys2772Slc, true, true)
		yys2772 := string(yys2772Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2772 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2772)
		} // end switch yys2772
	} // end for yyj2772
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2774 int
	var yyb2774 bool
	var yyhl2774 bool = l >= 0
	yyj2774++
	if yyhl2774 {
		yyb2774 = yyj2774 > l
	} else {
		yyb2774 = r.CheckBreak()
	}
	if yyb2774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2774++
		if yyhl2774 {
			yyb2774 = yyj2774 > l
		} else {
			yyb2774 = r.CheckBreak()
		}
		if yyb2774 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2774-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2776 := z.EncBinary()
		_ = yym2776
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2777 := !z.EncBinary()
			yy2arr2777 := z.EncBasicHandle().StructToArray
			var yyq2777 [1]bool
			_, _, _ = yysep2777, yyq2777, yy2arr2777
			const yyr2777 bool = false
			yyq2777[0] = true
			var yynn2777 int
			if yyr2777 || yy2arr2777 {
				r.EncodeArrayStart(1)
			} else {
				yynn2777 = 0
				for _, b := range yyq2777 {
					if b {
						yynn2777++
					}
				}
				r.EncodeMapStart(yynn2777)
				yynn2777 = 0
			}
			if yyr2777 || yy2arr2777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2777[0] {
					yy2779 := &x.KubeletEndpoint
					yy2779.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2777[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2780 := &x.KubeletEndpoint
					yy2780.CodecEncodeSelf(e)
				}
			}
			if yyr2777 || yy2arr2777 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2781 := z.DecBinary()
	_ = yym2781
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2782 := r.ContainerType()
		if yyct2782 == codecSelferValueTypeMap1234 {
			yyl2782 := r.ReadMapStart()
			if yyl2782 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2782, d)
			}
		} else if yyct2782 == codecSelferValueTypeArray1234 {
			yyl2782 := r.ReadArrayStart()
			if yyl2782 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2782, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2783Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2783Slc
	var yyhl2783 bool = l >= 0
	for yyj2783 := 0; ; yyj2783++ {
		if yyhl2783 {
			if yyj2783 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2783Slc = r.DecodeBytes(yys2783Slc, true, true)
		yys2783 := string(yys2783Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2783 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2784 := &x.KubeletEndpoint
				yyv2784.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2783)
		} // end switch yys2783
	} // end for yyj2783
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2785 int
	var yyb2785 bool
	var yyhl2785 bool = l >= 0
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2786 := &x.KubeletEndpoint
		yyv2786.CodecDecodeSelf(d)
	}
	for {
		yyj2785++
		if yyhl2785 {
			yyb2785 = yyj2785 > l
		} else {
			yyb2785 = r.CheckBreak()
		}
		if yyb2785 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2785-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2787 := z.EncBinary()
		_ = yym2787
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2788 := !z.EncBinary()
			yy2arr2788 := z.EncBasicHandle().StructToArray
			var yyq2788 [10]bool
			_, _, _ = yysep2788, yyq2788, yy2arr2788
			const yyr2788 bool = false
			var yynn2788 int
			if yyr2788 || yy2arr2788 {
				r.EncodeArrayStart(10)
			} else {
				yynn2788 = 10
				for _, b := range yyq2788 {
					if b {
						yynn2788++
					}
				}
				r.EncodeMapStart(yynn2788)
				yynn2788 = 0
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2790 := z.EncBinary()
				_ = yym2790
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2791 := z.EncBinary()
				_ = yym2791
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2793 := z.EncBinary()
				_ = yym2793
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2794 := z.EncBinary()
				_ = yym2794
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2796 := z.EncBinary()
				_ = yym2796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2797 := z.EncBinary()
				_ = yym2797
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2799 := z.EncBinary()
				_ = yym2799
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2800 := z.EncBinary()
				_ = yym2800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2802 := z.EncBinary()
				_ = yym2802
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2803 := z.EncBinary()
				_ = yym2803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2805 := z.EncBinary()
				_ = yym2805
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2806 := z.EncBinary()
				_ = yym2806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2808 := z.EncBinary()
				_ = yym2808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2809 := z.EncBinary()
				_ = yym2809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2811 := z.EncBinary()
				_ = yym2811
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2812 := z.EncBinary()
				_ = yym2812
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2814 := z.EncBinary()
				_ = yym2814
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2815 := z.EncBinary()
				_ = yym2815
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2817 := z.EncBinary()
				_ = yym2817
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2818 := z.EncBinary()
				_ = yym2818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2819 := z.DecBinary()
	_ = yym2819
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2820 := r.ContainerType()
		if yyct2820 == codecSelferValueTypeMap1234 {
			yyl2820 := r.ReadMapStart()
			if yyl2820 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2820, d)
			}
		} else if yyct2820 == codecSelferValueTypeArray1234 {
			yyl2820 := r.ReadArrayStart()
			if yyl2820 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2820, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2821Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2821Slc
	var yyhl2821 bool = l >= 0
	for yyj2821 := 0; ; yyj2821++ {
		if yyhl2821 {
			if yyj2821 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2821Slc = r.DecodeBytes(yys2821Slc, true, true)
		yys2821 := string(yys2821Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2821 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2821)
		} // end switch yys2821
	} // end for yyj2821
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2832 int
	var yyb2832 bool
	var yyhl2832 bool = l >= 0
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2832++
		if yyhl2832 {
			yyb2832 = yyj2832 > l
		} else {
			yyb2832 = r.CheckBreak()
		}
		if yyb2832 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2832-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2843 := z.EncBinary()
		_ = yym2843
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2844 := !z.EncBinary()
			yy2arr2844 := z.EncBasicHandle().StructToArray
			var yyq2844 [10]bool
			_, _, _ = yysep2844, yyq2844, yy2arr2844
			const yyr2844 bool = false
			yyq2844[0] = len(x.Capacity) != 0
			yyq2844[1] = len(x.Allocatable) != 0
			yyq2844[2] = x.Phase != ""
			yyq2844[3] = len(x.Conditions) != 0
			yyq2844[4] = len(x.Addresses) != 0
			yyq2844[5] = true
			yyq2844[6] = true
			yyq2844[7] = len(x.Images) != 0
			yyq2844[8] = len(x.VolumesInUse) != 0
			yyq2844[9] = len(x.VolumesAttached) != 0
			var yynn2844 int
			if yyr2844 || yy2arr2844 {
				r.EncodeArrayStart(10)
			} else {
				yynn2844 = 0
				for _, b := range yyq2844 {
					if b {
						yynn2844++
					}
				}
				r.EncodeMapStart(yynn2844)
				yynn2844 = 0
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2844[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2849 := z.EncBinary()
						_ = yym2849
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2850 := z.EncBinary()
						_ = yym2850
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2852 := z.EncBinary()
						_ = yym2852
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2853 := z.EncBinary()
						_ = yym2853
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[5] {
					yy2855 := &x.DaemonEndpoints
					yy2855.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2856 := &x.DaemonEndpoints
					yy2856.CodecEncodeSelf(e)
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[6] {
					yy2858 := &x.NodeInfo
					yy2858.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2859 := &x.NodeInfo
					yy2859.CodecEncodeSelf(e)
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2861 := z.EncBinary()
						_ = yym2861
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2862 := z.EncBinary()
						_ = yym2862
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2864 := z.EncBinary()
						_ = yym2864
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2865 := z.EncBinary()
						_ = yym2865
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2867 := z.EncBinary()
						_ = yym2867
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2868 := z.EncBinary()
						_ = yym2868
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2869 := z.DecBinary()
	_ = yym2869
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2870 := r.ContainerType()
		if yyct2870 == codecSelferValueTypeMap1234 {
			yyl2870 := r.ReadMapStart()
			if yyl2870 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2870, d)
			}
		} else if yyct2870 == codecSelferValueTypeArray1234 {
			yyl2870 := r.ReadArrayStart()
			if yyl2870 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2870, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2871Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2871Slc
	var yyhl2871 bool = l >= 0
	for yyj2871 := 0; ; yyj2871++ {
		if yyhl2871 {
			if yyj2871 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2871Slc = r.DecodeBytes(yys2871Slc, true, true)
		yys2871 := string(yys2871Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2871 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2872 := &x.Capacity
				yyv2872.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2873 := &x.Allocatable
				yyv2873.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2875 := &x.Conditions
				yym2876 := z.DecBinary()
				_ = yym2876
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2875), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2877 := &x.Addresses
				yym2878 := z.DecBinary()
				_ = yym2878
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2877), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2879 := &x.DaemonEndpoints
				yyv2879.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2880 := &x.NodeInfo
				yyv2880.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2881 := &x.Images
				yym2882 := z.DecBinary()
				_ = yym2882
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2881), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv2883 := &x.VolumesInUse
				yym2884 := z.DecBinary()
				_ = yym2884
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2883), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv2885 := &x.VolumesAttached
				yym2886 := z.DecBinary()
				_ = yym2886
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2885), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2871)
		} // end switch yys2871
	} // end for yyj2871
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2887 int
	var yyb2887 bool
	var yyhl2887 bool = l >= 0
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2888 := &x.Capacity
		yyv2888.CodecDecodeSelf(d)
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2889 := &x.Allocatable
		yyv2889.CodecDecodeSelf(d)
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2891 := &x.Conditions
		yym2892 := z.DecBinary()
		_ = yym2892
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2891), d)
		}
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2893 := &x.Addresses
		yym2894 := z.DecBinary()
		_ = yym2894
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2893), d)
		}
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2895 := &x.DaemonEndpoints
		yyv2895.CodecDecodeSelf(d)
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2896 := &x.NodeInfo
		yyv2896.CodecDecodeSelf(d)
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2897 := &x.Images
		yym2898 := z.DecBinary()
		_ = yym2898
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2897), d)
		}
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv2899 := &x.VolumesInUse
		yym2900 := z.DecBinary()
		_ = yym2900
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2899), d)
		}
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv2901 := &x.VolumesAttached
		yym2902 := z.DecBinary()
		_ = yym2902
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2901), d)
		}
	}
	for {
		yyj2887++
		if yyhl2887 {
			yyb2887 = yyj2887 > l
		} else {
			yyb2887 = r.CheckBreak()
		}
		if yyb2887 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2887-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2903 := z.EncBinary()
	_ = yym2903
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2904 := z.DecBinary()
	_ = yym2904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2905 := z.EncBinary()
		_ = yym2905
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2906 := !z.EncBinary()
			yy2arr2906 := z.EncBasicHandle().StructToArray
			var yyq2906 [2]bool
			_, _, _ = yysep2906, yyq2906, yy2arr2906
			const yyr2906 bool = false
			var yynn2906 int
			if yyr2906 || yy2arr2906 {
				r.EncodeArrayStart(2)
			} else {
				yynn2906 = 2
				for _, b := range yyq2906 {
					if b {
						yynn2906++
					}
				}
				r.EncodeMapStart(yynn2906)
				yynn2906 = 0
			}
			if yyr2906 || yy2arr2906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr2906 || yy2arr2906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2909 := z.EncBinary()
				_ = yym2909
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2910 := z.EncBinary()
				_ = yym2910
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr2906 || yy2arr2906 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2911 := z.DecBinary()
	_ = yym2911
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2912 := r.ContainerType()
		if yyct2912 == codecSelferValueTypeMap1234 {
			yyl2912 := r.ReadMapStart()
			if yyl2912 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2912, d)
			}
		} else if yyct2912 == codecSelferValueTypeArray1234 {
			yyl2912 := r.ReadArrayStart()
			if yyl2912 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2912, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2913Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2913Slc
	var yyhl2913 bool = l >= 0
	for yyj2913 := 0; ; yyj2913++ {
		if yyhl2913 {
			if yyj2913 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2913Slc = r.DecodeBytes(yys2913Slc, true, true)
		yys2913 := string(yys2913Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2913 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2913)
		} // end switch yys2913
	} // end for yyj2913
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2916 int
	var yyb2916 bool
	var yyhl2916 bool = l >= 0
	yyj2916++
	if yyhl2916 {
		yyb2916 = yyj2916 > l
	} else {
		yyb2916 = r.CheckBreak()
	}
	if yyb2916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj2916++
	if yyhl2916 {
		yyb2916 = yyj2916 > l
	} else {
		yyb2916 = r.CheckBreak()
	}
	if yyb2916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj2916++
		if yyhl2916 {
			yyb2916 = yyj2916 > l
		} else {
			yyb2916 = r.CheckBreak()
		}
		if yyb2916 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2916-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2919 := z.EncBinary()
		_ = yym2919
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2920 := !z.EncBinary()
			yy2arr2920 := z.EncBasicHandle().StructToArray
			var yyq2920 [1]bool
			_, _, _ = yysep2920, yyq2920, yy2arr2920
			const yyr2920 bool = false
			yyq2920[0] = len(x.PreferAvoidPods) != 0
			var yynn2920 int
			if yyr2920 || yy2arr2920 {
				r.EncodeArrayStart(1)
			} else {
				yynn2920 = 0
				for _, b := range yyq2920 {
					if b {
						yynn2920++
					}
				}
				r.EncodeMapStart(yynn2920)
				yynn2920 = 0
			}
			if yyr2920 || yy2arr2920 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2920[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2922 := z.EncBinary()
						_ = yym2922
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2920[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2923 := z.EncBinary()
						_ = yym2923
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr2920 || yy2arr2920 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2924 := z.DecBinary()
	_ = yym2924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2925 := r.ContainerType()
		if yyct2925 == codecSelferValueTypeMap1234 {
			yyl2925 := r.ReadMapStart()
			if yyl2925 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2925, d)
			}
		} else if yyct2925 == codecSelferValueTypeArray1234 {
			yyl2925 := r.ReadArrayStart()
			if yyl2925 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2926Slc
	var yyhl2926 bool = l >= 0
	for yyj2926 := 0; ; yyj2926++ {
		if yyhl2926 {
			if yyj2926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2926Slc = r.DecodeBytes(yys2926Slc, true, true)
		yys2926 := string(yys2926Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2926 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv2927 := &x.PreferAvoidPods
				yym2928 := z.DecBinary()
				_ = yym2928
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2927), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2926)
		} // end switch yys2926
	} // end for yyj2926
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2929 int
	var yyb2929 bool
	var yyhl2929 bool = l >= 0
	yyj2929++
	if yyhl2929 {
		yyb2929 = yyj2929 > l
	} else {
		yyb2929 = r.CheckBreak()
	}
	if yyb2929 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv2930 := &x.PreferAvoidPods
		yym2931 := z.DecBinary()
		_ = yym2931
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2930), d)
		}
	}
	for {
		yyj2929++
		if yyhl2929 {
			yyb2929 = yyj2929 > l
		} else {
			yyb2929 = r.CheckBreak()
		}
		if yyb2929 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2929-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2932 := z.EncBinary()
		_ = yym2932
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2933 := !z.EncBinary()
			yy2arr2933 := z.EncBasicHandle().StructToArray
			var yyq2933 [4]bool
			_, _, _ = yysep2933, yyq2933, yy2arr2933
			const yyr2933 bool = false
			yyq2933[1] = true
			yyq2933[2] = x.Reason != ""
			yyq2933[3] = x.Message != ""
			var yynn2933 int
			if yyr2933 || yy2arr2933 {
				r.EncodeArrayStart(4)
			} else {
				yynn2933 = 1
				for _, b := range yyq2933 {
					if b {
						yynn2933++
					}
				}
				r.EncodeMapStart(yynn2933)
				yynn2933 = 0
			}
			if yyr2933 || yy2arr2933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2935 := &x.PodSignature
				yy2935.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2936 := &x.PodSignature
				yy2936.CodecEncodeSelf(e)
			}
			if yyr2933 || yy2arr2933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2933[1] {
					yy2938 := &x.EvictionTime
					yym2939 := z.EncBinary()
					_ = yym2939
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2938) {
					} else if yym2939 {
						z.EncBinaryMarshal(yy2938)
					} else if !yym2939 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2938)
					} else {
						z.EncFallback(yy2938)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2933[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2940 := &x.EvictionTime
					yym2941 := z.EncBinary()
					_ = yym2941
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2940) {
					} else if yym2941 {
						z.EncBinaryMarshal(yy2940)
					} else if !yym2941 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2940)
					} else {
						z.EncFallback(yy2940)
					}
				}
			}
			if yyr2933 || yy2arr2933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2933[2] {
					yym2943 := z.EncBinary()
					_ = yym2943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2933[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2944 := z.EncBinary()
					_ = yym2944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2933 || yy2arr2933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2933[3] {
					yym2946 := z.EncBinary()
					_ = yym2946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2933[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2947 := z.EncBinary()
					_ = yym2947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2933 || yy2arr2933 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2948 := z.DecBinary()
	_ = yym2948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2949 := r.ContainerType()
		if yyct2949 == codecSelferValueTypeMap1234 {
			yyl2949 := r.ReadMapStart()
			if yyl2949 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2949, d)
			}
		} else if yyct2949 == codecSelferValueTypeArray1234 {
			yyl2949 := r.ReadArrayStart()
			if yyl2949 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2950Slc
	var yyhl2950 bool = l >= 0
	for yyj2950 := 0; ; yyj2950++ {
		if yyhl2950 {
			if yyj2950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2950Slc = r.DecodeBytes(yys2950Slc, true, true)
		yys2950 := string(yys2950Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2950 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv2951 := &x.PodSignature
				yyv2951.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv2952 := &x.EvictionTime
				yym2953 := z.DecBinary()
				_ = yym2953
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2952) {
				} else if yym2953 {
					z.DecBinaryUnmarshal(yyv2952)
				} else if !yym2953 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2952)
				} else {
					z.DecFallback(yyv2952, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2950)
		} // end switch yys2950
	} // end for yyj2950
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2956 int
	var yyb2956 bool
	var yyhl2956 bool = l >= 0
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv2957 := &x.PodSignature
		yyv2957.CodecDecodeSelf(d)
	}
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv2958 := &x.EvictionTime
		yym2959 := z.DecBinary()
		_ = yym2959
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2958) {
		} else if yym2959 {
			z.DecBinaryUnmarshal(yyv2958)
		} else if !yym2959 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2958)
		} else {
			z.DecFallback(yyv2958, false)
		}
	}
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2956++
		if yyhl2956 {
			yyb2956 = yyj2956 > l
		} else {
			yyb2956 = r.CheckBreak()
		}
		if yyb2956 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2956-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2962 := z.EncBinary()
		_ = yym2962
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2963 := !z.EncBinary()
			yy2arr2963 := z.EncBasicHandle().StructToArray
			var yyq2963 [1]bool
			_, _, _ = yysep2963, yyq2963, yy2arr2963
			const yyr2963 bool = false
			yyq2963[0] = x.PodController != nil
			var yynn2963 int
			if yyr2963 || yy2arr2963 {
				r.EncodeArrayStart(1)
			} else {
				yynn2963 = 0
				for _, b := range yyq2963 {
					if b {
						yynn2963++
					}
				}
				r.EncodeMapStart(yynn2963)
				yynn2963 = 0
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2965 := z.DecBinary()
	_ = yym2965
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2966 := r.ContainerType()
		if yyct2966 == codecSelferValueTypeMap1234 {
			yyl2966 := r.ReadMapStart()
			if yyl2966 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2966, d)
			}
		} else if yyct2966 == codecSelferValueTypeArray1234 {
			yyl2966 := r.ReadArrayStart()
			if yyl2966 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2966, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2967Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2967Slc
	var yyhl2967 bool = l >= 0
	for yyj2967 := 0; ; yyj2967++ {
		if yyhl2967 {
			if yyj2967 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2967Slc = r.DecodeBytes(yys2967Slc, true, true)
		yys2967 := string(yys2967Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2967 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2967)
		} // end switch yys2967
	} // end for yyj2967
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2969 int
	var yyb2969 bool
	var yyhl2969 bool = l >= 0
	yyj2969++
	if yyhl2969 {
		yyb2969 = yyj2969 > l
	} else {
		yyb2969 = r.CheckBreak()
	}
	if yyb2969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj2969++
		if yyhl2969 {
			yyb2969 = yyj2969 > l
		} else {
			yyb2969 = r.CheckBreak()
		}
		if yyb2969 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2969-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2971 := z.EncBinary()
		_ = yym2971
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2972 := !z.EncBinary()
			yy2arr2972 := z.EncBasicHandle().StructToArray
			var yyq2972 [2]bool
			_, _, _ = yysep2972, yyq2972, yy2arr2972
			const yyr2972 bool = false
			yyq2972[1] = x.SizeBytes != 0
			var yynn2972 int
			if yyr2972 || yy2arr2972 {
				r.EncodeArrayStart(2)
			} else {
				yynn2972 = 1
				for _, b := range yyq2972 {
					if b {
						yynn2972++
					}
				}
				r.EncodeMapStart(yynn2972)
				yynn2972 = 0
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2974 := z.EncBinary()
					_ = yym2974
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2975 := z.EncBinary()
					_ = yym2975
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2972[1] {
					yym2977 := z.EncBinary()
					_ = yym2977
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2972[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2978 := z.EncBinary()
					_ = yym2978
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2979 := z.DecBinary()
	_ = yym2979
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2980 := r.ContainerType()
		if yyct2980 == codecSelferValueTypeMap1234 {
			yyl2980 := r.ReadMapStart()
			if yyl2980 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2980, d)
			}
		} else if yyct2980 == codecSelferValueTypeArray1234 {
			yyl2980 := r.ReadArrayStart()
			if yyl2980 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2980, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2981Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2981Slc
	var yyhl2981 bool = l >= 0
	for yyj2981 := 0; ; yyj2981++ {
		if yyhl2981 {
			if yyj2981 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2981Slc = r.DecodeBytes(yys2981Slc, true, true)
		yys2981 := string(yys2981Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2981 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv2982 := &x.Names
				yym2983 := z.DecBinary()
				_ = yym2983
				if false {
				} else {
					z.F.DecSliceStringX(yyv2982, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2981)
		} // end switch yys2981
	} // end for yyj2981
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2985 int
	var yyb2985 bool
	var yyhl2985 bool = l >= 0
	yyj2985++
	if yyhl2985 {
		yyb2985 = yyj2985 > l
	} else {
		yyb2985 = r.CheckBreak()
	}
	if yyb2985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv2986 := &x.Names
		yym2987 := z.DecBinary()
		_ = yym2987
		if false {
		} else {
			z.F.DecSliceStringX(yyv2986, false, d)
		}
	}
	yyj2985++
	if yyhl2985 {
		yyb2985 = yyj2985 > l
	} else {
		yyb2985 = r.CheckBreak()
	}
	if yyb2985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj2985++
		if yyhl2985 {
			yyb2985 = yyj2985 > l
		} else {
			yyb2985 = r.CheckBreak()
		}
		if yyb2985 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2985-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2989 := z.EncBinary()
	_ = yym2989
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2990 := z.DecBinary()
	_ = yym2990
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2991 := z.EncBinary()
	_ = yym2991
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2992 := z.DecBinary()
	_ = yym2992
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2993 := z.EncBinary()
		_ = yym2993
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2994 := !z.EncBinary()
			yy2arr2994 := z.EncBasicHandle().StructToArray
			var yyq2994 [6]bool
			_, _, _ = yysep2994, yyq2994, yy2arr2994
			const yyr2994 bool = false
			yyq2994[2] = true
			yyq2994[3] = true
			yyq2994[4] = x.Reason != ""
			yyq2994[5] = x.Message != ""
			var yynn2994 int
			if yyr2994 || yy2arr2994 {
				r.EncodeArrayStart(6)
			} else {
				yynn2994 = 2
				for _, b := range yyq2994 {
					if b {
						yynn2994++
					}
				}
				r.EncodeMapStart(yynn2994)
				yynn2994 = 0
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2994[2] {
					yy2998 := &x.LastHeartbeatTime
					yym2999 := z.EncBinary()
					_ = yym2999
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2998) {
					} else if yym2999 {
						z.EncBinaryMarshal(yy2998)
					} else if !yym2999 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2998)
					} else {
						z.EncFallback(yy2998)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2994[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3000 := &x.LastHeartbeatTime
					yym3001 := z.EncBinary()
					_ = yym3001
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3000) {
					} else if yym3001 {
						z.EncBinaryMarshal(yy3000)
					} else if !yym3001 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3000)
					} else {
						z.EncFallback(yy3000)
					}
				}
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2994[3] {
					yy3003 := &x.LastTransitionTime
					yym3004 := z.EncBinary()
					_ = yym3004
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3003) {
					} else if yym3004 {
						z.EncBinaryMarshal(yy3003)
					} else if !yym3004 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3003)
					} else {
						z.EncFallback(yy3003)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2994[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3005 := &x.LastTransitionTime
					yym3006 := z.EncBinary()
					_ = yym3006
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3005) {
					} else if yym3006 {
						z.EncBinaryMarshal(yy3005)
					} else if !yym3006 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3005)
					} else {
						z.EncFallback(yy3005)
					}
				}
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2994[4] {
					yym3008 := z.EncBinary()
					_ = yym3008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2994[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3009 := z.EncBinary()
					_ = yym3009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2994[5] {
					yym3011 := z.EncBinary()
					_ = yym3011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2994[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3012 := z.EncBinary()
					_ = yym3012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3013 := z.DecBinary()
	_ = yym3013
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3014 := r.ContainerType()
		if yyct3014 == codecSelferValueTypeMap1234 {
			yyl3014 := r.ReadMapStart()
			if yyl3014 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3014, d)
			}
		} else if yyct3014 == codecSelferValueTypeArray1234 {
			yyl3014 := r.ReadArrayStart()
			if yyl3014 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3014, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3015Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3015Slc
	var yyhl3015 bool = l >= 0
	for yyj3015 := 0; ; yyj3015++ {
		if yyhl3015 {
			if yyj3015 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3015Slc = r.DecodeBytes(yys3015Slc, true, true)
		yys3015 := string(yys3015Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3015 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3018 := &x.LastHeartbeatTime
				yym3019 := z.DecBinary()
				_ = yym3019
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3018) {
				} else if yym3019 {
					z.DecBinaryUnmarshal(yyv3018)
				} else if !yym3019 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3018)
				} else {
					z.DecFallback(yyv3018, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3020 := &x.LastTransitionTime
				yym3021 := z.DecBinary()
				_ = yym3021
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3020) {
				} else if yym3021 {
					z.DecBinaryUnmarshal(yyv3020)
				} else if !yym3021 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3020)
				} else {
					z.DecFallback(yyv3020, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3015)
		} // end switch yys3015
	} // end for yyj3015
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3024 int
	var yyb3024 bool
	var yyhl3024 bool = l >= 0
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3027 := &x.LastHeartbeatTime
		yym3028 := z.DecBinary()
		_ = yym3028
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3027) {
		} else if yym3028 {
			z.DecBinaryUnmarshal(yyv3027)
		} else if !yym3028 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3027)
		} else {
			z.DecFallback(yyv3027, false)
		}
	}
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3029 := &x.LastTransitionTime
		yym3030 := z.DecBinary()
		_ = yym3030
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3029) {
		} else if yym3030 {
			z.DecBinaryUnmarshal(yyv3029)
		} else if !yym3030 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3029)
		} else {
			z.DecFallback(yyv3029, false)
		}
	}
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3024++
		if yyhl3024 {
			yyb3024 = yyj3024 > l
		} else {
			yyb3024 = r.CheckBreak()
		}
		if yyb3024 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3024-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3033 := z.EncBinary()
	_ = yym3033
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3034 := z.DecBinary()
	_ = yym3034
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3035 := z.EncBinary()
		_ = yym3035
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3036 := !z.EncBinary()
			yy2arr3036 := z.EncBasicHandle().StructToArray
			var yyq3036 [2]bool
			_, _, _ = yysep3036, yyq3036, yy2arr3036
			const yyr3036 bool = false
			var yynn3036 int
			if yyr3036 || yy2arr3036 {
				r.EncodeArrayStart(2)
			} else {
				yynn3036 = 2
				for _, b := range yyq3036 {
					if b {
						yynn3036++
					}
				}
				r.EncodeMapStart(yynn3036)
				yynn3036 = 0
			}
			if yyr3036 || yy2arr3036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3036 || yy2arr3036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3039 := z.EncBinary()
				_ = yym3039
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3040 := z.EncBinary()
				_ = yym3040
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3036 || yy2arr3036 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3041 := z.DecBinary()
	_ = yym3041
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3042 := r.ContainerType()
		if yyct3042 == codecSelferValueTypeMap1234 {
			yyl3042 := r.ReadMapStart()
			if yyl3042 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3042, d)
			}
		} else if yyct3042 == codecSelferValueTypeArray1234 {
			yyl3042 := r.ReadArrayStart()
			if yyl3042 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3042, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3043Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3043Slc
	var yyhl3043 bool = l >= 0
	for yyj3043 := 0; ; yyj3043++ {
		if yyhl3043 {
			if yyj3043 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3043Slc = r.DecodeBytes(yys3043Slc, true, true)
		yys3043 := string(yys3043Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3043 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3043)
		} // end switch yys3043
	} // end for yyj3043
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3046 int
	var yyb3046 bool
	var yyhl3046 bool = l >= 0
	yyj3046++
	if yyhl3046 {
		yyb3046 = yyj3046 > l
	} else {
		yyb3046 = r.CheckBreak()
	}
	if yyb3046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3046++
	if yyhl3046 {
		yyb3046 = yyj3046 > l
	} else {
		yyb3046 = r.CheckBreak()
	}
	if yyb3046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3046++
		if yyhl3046 {
			yyb3046 = yyj3046 > l
		} else {
			yyb3046 = r.CheckBreak()
		}
		if yyb3046 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3046-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3049 := z.EncBinary()
	_ = yym3049
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3050 := z.DecBinary()
	_ = yym3050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3051 := z.EncBinary()
		_ = yym3051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3052 := z.DecBinary()
	_ = yym3052
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3053 := z.EncBinary()
		_ = yym3053
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3054 := !z.EncBinary()
			yy2arr3054 := z.EncBasicHandle().StructToArray
			var yyq3054 [5]bool
			_, _, _ = yysep3054, yyq3054, yy2arr3054
			const yyr3054 bool = false
			yyq3054[0] = x.Kind != ""
			yyq3054[1] = x.APIVersion != ""
			yyq3054[2] = true
			yyq3054[3] = true
			yyq3054[4] = true
			var yynn3054 int
			if yyr3054 || yy2arr3054 {
				r.EncodeArrayStart(5)
			} else {
				yynn3054 = 0
				for _, b := range yyq3054 {
					if b {
						yynn3054++
					}
				}
				r.EncodeMapStart(yynn3054)
				yynn3054 = 0
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[0] {
					yym3056 := z.EncBinary()
					_ = yym3056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3054[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3057 := z.EncBinary()
					_ = yym3057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[1] {
					yym3059 := z.EncBinary()
					_ = yym3059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3054[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3060 := z.EncBinary()
					_ = yym3060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[2] {
					yy3062 := &x.ObjectMeta
					yy3062.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3063 := &x.ObjectMeta
					yy3063.CodecEncodeSelf(e)
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[3] {
					yy3065 := &x.Spec
					yy3065.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3066 := &x.Spec
					yy3066.CodecEncodeSelf(e)
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[4] {
					yy3068 := &x.Status
					yy3068.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3069 := &x.Status
					yy3069.CodecEncodeSelf(e)
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3070 := z.DecBinary()
	_ = yym3070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3071 := r.ContainerType()
		if yyct3071 == codecSelferValueTypeMap1234 {
			yyl3071 := r.ReadMapStart()
			if yyl3071 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3071, d)
			}
		} else if yyct3071 == codecSelferValueTypeArray1234 {
			yyl3071 := r.ReadArrayStart()
			if yyl3071 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3071, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3072Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3072Slc
	var yyhl3072 bool = l >= 0
	for yyj3072 := 0; ; yyj3072++ {
		if yyhl3072 {
			if yyj3072 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3072Slc = r.DecodeBytes(yys3072Slc, true, true)
		yys3072 := string(yys3072Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3072 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3075 := &x.ObjectMeta
				yyv3075.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3076 := &x.Spec
				yyv3076.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3077 := &x.Status
				yyv3077.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3072)
		} // end switch yys3072
	} // end for yyj3072
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3078 int
	var yyb3078 bool
	var yyhl3078 bool = l >= 0
	yyj3078++
	if yyhl3078 {
		yyb3078 = yyj3078 > l
	} else {
		yyb3078 = r.CheckBreak()
	}
	if yyb3078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3078++
	if yyhl3078 {
		yyb3078 = yyj3078 > l
	} else {
		yyb3078 = r.CheckBreak()
	}
	if yyb3078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3078++
	if yyhl3078 {
		yyb3078 = yyj3078 > l
	} else {
		yyb3078 = r.CheckBreak()
	}
	if yyb3078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3081 := &x.ObjectMeta
		yyv3081.CodecDecodeSelf(d)
	}
	yyj3078++
	if yyhl3078 {
		yyb3078 = yyj3078 > l
	} else {
		yyb3078 = r.CheckBreak()
	}
	if yyb3078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3082 := &x.Spec
		yyv3082.CodecDecodeSelf(d)
	}
	yyj3078++
	if yyhl3078 {
		yyb3078 = yyj3078 > l
	} else {
		yyb3078 = r.CheckBreak()
	}
	if yyb3078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3083 := &x.Status
		yyv3083.CodecDecodeSelf(d)
	}
	for {
		yyj3078++
		if yyhl3078 {
			yyb3078 = yyj3078 > l
		} else {
			yyb3078 = r.CheckBreak()
		}
		if yyb3078 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3078-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3084 := z.EncBinary()
		_ = yym3084
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3085 := !z.EncBinary()
			yy2arr3085 := z.EncBasicHandle().StructToArray
			var yyq3085 [4]bool
			_, _, _ = yysep3085, yyq3085, yy2arr3085
			const yyr3085 bool = false
			yyq3085[0] = x.Kind != ""
			yyq3085[1] = x.APIVersion != ""
			yyq3085[2] = true
			var yynn3085 int
			if yyr3085 || yy2arr3085 {
				r.EncodeArrayStart(4)
			} else {
				yynn3085 = 1
				for _, b := range yyq3085 {
					if b {
						yynn3085++
					}
				}
				r.EncodeMapStart(yynn3085)
				yynn3085 = 0
			}
			if yyr3085 || yy2arr3085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3085[0] {
					yym3087 := z.EncBinary()
					_ = yym3087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3085[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3088 := z.EncBinary()
					_ = yym3088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3085 || yy2arr3085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3085[1] {
					yym3090 := z.EncBinary()
					_ = yym3090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3085[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3091 := z.EncBinary()
					_ = yym3091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3085 || yy2arr3085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3085[2] {
					yy3093 := &x.ListMeta
					yym3094 := z.EncBinary()
					_ = yym3094
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3093) {
					} else {
						z.EncFallback(yy3093)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3085[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3095 := &x.ListMeta
					yym3096 := z.EncBinary()
					_ = yym3096
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3095) {
					} else {
						z.EncFallback(yy3095)
					}
				}
			}
			if yyr3085 || yy2arr3085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3098 := z.EncBinary()
					_ = yym3098
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3099 := z.EncBinary()
					_ = yym3099
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3085 || yy2arr3085 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3100 := z.DecBinary()
	_ = yym3100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3101 := r.ContainerType()
		if yyct3101 == codecSelferValueTypeMap1234 {
			yyl3101 := r.ReadMapStart()
			if yyl3101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3101, d)
			}
		} else if yyct3101 == codecSelferValueTypeArray1234 {
			yyl3101 := r.ReadArrayStart()
			if yyl3101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3102Slc
	var yyhl3102 bool = l >= 0
	for yyj3102 := 0; ; yyj3102++ {
		if yyhl3102 {
			if yyj3102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3102Slc = r.DecodeBytes(yys3102Slc, true, true)
		yys3102 := string(yys3102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3102 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3105 := &x.ListMeta
				yym3106 := z.DecBinary()
				_ = yym3106
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3105) {
				} else {
					z.DecFallback(yyv3105, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3107 := &x.Items
				yym3108 := z.DecBinary()
				_ = yym3108
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3107), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3102)
		} // end switch yys3102
	} // end for yyj3102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3109 int
	var yyb3109 bool
	var yyhl3109 bool = l >= 0
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3112 := &x.ListMeta
		yym3113 := z.DecBinary()
		_ = yym3113
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3112) {
		} else {
			z.DecFallback(yyv3112, false)
		}
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3114 := &x.Items
		yym3115 := z.DecBinary()
		_ = yym3115
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3114), d)
		}
	}
	for {
		yyj3109++
		if yyhl3109 {
			yyb3109 = yyj3109 > l
		} else {
			yyb3109 = r.CheckBreak()
		}
		if yyb3109 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3109-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3116 := z.EncBinary()
	_ = yym3116
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3117 := z.DecBinary()
	_ = yym3117
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3118 := z.EncBinary()
		_ = yym3118
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3119 := !z.EncBinary()
			yy2arr3119 := z.EncBasicHandle().StructToArray
			var yyq3119 [1]bool
			_, _, _ = yysep3119, yyq3119, yy2arr3119
			const yyr3119 bool = false
			yyq3119[0] = len(x.Finalizers) != 0
			var yynn3119 int
			if yyr3119 || yy2arr3119 {
				r.EncodeArrayStart(1)
			} else {
				yynn3119 = 0
				for _, b := range yyq3119 {
					if b {
						yynn3119++
					}
				}
				r.EncodeMapStart(yynn3119)
				yynn3119 = 0
			}
			if yyr3119 || yy2arr3119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3119[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3121 := z.EncBinary()
						_ = yym3121
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3119[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3122 := z.EncBinary()
						_ = yym3122
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3119 || yy2arr3119 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3123 := z.DecBinary()
	_ = yym3123
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3124 := r.ContainerType()
		if yyct3124 == codecSelferValueTypeMap1234 {
			yyl3124 := r.ReadMapStart()
			if yyl3124 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3124, d)
			}
		} else if yyct3124 == codecSelferValueTypeArray1234 {
			yyl3124 := r.ReadArrayStart()
			if yyl3124 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3124, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3125Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3125Slc
	var yyhl3125 bool = l >= 0
	for yyj3125 := 0; ; yyj3125++ {
		if yyhl3125 {
			if yyj3125 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3125Slc = r.DecodeBytes(yys3125Slc, true, true)
		yys3125 := string(yys3125Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3125 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3126 := &x.Finalizers
				yym3127 := z.DecBinary()
				_ = yym3127
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3126), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3125)
		} // end switch yys3125
	} // end for yyj3125
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3128 int
	var yyb3128 bool
	var yyhl3128 bool = l >= 0
	yyj3128++
	if yyhl3128 {
		yyb3128 = yyj3128 > l
	} else {
		yyb3128 = r.CheckBreak()
	}
	if yyb3128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3129 := &x.Finalizers
		yym3130 := z.DecBinary()
		_ = yym3130
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3129), d)
		}
	}
	for {
		yyj3128++
		if yyhl3128 {
			yyb3128 = yyj3128 > l
		} else {
			yyb3128 = r.CheckBreak()
		}
		if yyb3128 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3128-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3131 := z.EncBinary()
		_ = yym3131
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3132 := !z.EncBinary()
			yy2arr3132 := z.EncBasicHandle().StructToArray
			var yyq3132 [1]bool
			_, _, _ = yysep3132, yyq3132, yy2arr3132
			const yyr3132 bool = false
			yyq3132[0] = x.Phase != ""
			var yynn3132 int
			if yyr3132 || yy2arr3132 {
				r.EncodeArrayStart(1)
			} else {
				yynn3132 = 0
				for _, b := range yyq3132 {
					if b {
						yynn3132++
					}
				}
				r.EncodeMapStart(yynn3132)
				yynn3132 = 0
			}
			if yyr3132 || yy2arr3132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3132[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3132[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3132 || yy2arr3132 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3134 := z.DecBinary()
	_ = yym3134
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3135 := r.ContainerType()
		if yyct3135 == codecSelferValueTypeMap1234 {
			yyl3135 := r.ReadMapStart()
			if yyl3135 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3135, d)
			}
		} else if yyct3135 == codecSelferValueTypeArray1234 {
			yyl3135 := r.ReadArrayStart()
			if yyl3135 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3135, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3136Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3136Slc
	var yyhl3136 bool = l >= 0
	for yyj3136 := 0; ; yyj3136++ {
		if yyhl3136 {
			if yyj3136 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3136Slc = r.DecodeBytes(yys3136Slc, true, true)
		yys3136 := string(yys3136Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3136 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3136)
		} // end switch yys3136
	} // end for yyj3136
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3138 int
	var yyb3138 bool
	var yyhl3138 bool = l >= 0
	yyj3138++
	if yyhl3138 {
		yyb3138 = yyj3138 > l
	} else {
		yyb3138 = r.CheckBreak()
	}
	if yyb3138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3138++
		if yyhl3138 {
			yyb3138 = yyj3138 > l
		} else {
			yyb3138 = r.CheckBreak()
		}
		if yyb3138 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3138-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3140 := z.EncBinary()
	_ = yym3140
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3141 := z.DecBinary()
	_ = yym3141
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3142 := z.EncBinary()
		_ = yym3142
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3143 := !z.EncBinary()
			yy2arr3143 := z.EncBasicHandle().StructToArray
			var yyq3143 [5]bool
			_, _, _ = yysep3143, yyq3143, yy2arr3143
			const yyr3143 bool = false
			yyq3143[0] = x.Kind != ""
			yyq3143[1] = x.APIVersion != ""
			yyq3143[2] = true
			yyq3143[3] = true
			yyq3143[4] = true
			var yynn3143 int
			if yyr3143 || yy2arr3143 {
				r.EncodeArrayStart(5)
			} else {
				yynn3143 = 0
				for _, b := range yyq3143 {
					if b {
						yynn3143++
					}
				}
				r.EncodeMapStart(yynn3143)
				yynn3143 = 0
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3143[0] {
					yym3145 := z.EncBinary()
					_ = yym3145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3143[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3146 := z.EncBinary()
					_ = yym3146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3143[1] {
					yym3148 := z.EncBinary()
					_ = yym3148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3143[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3149 := z.EncBinary()
					_ = yym3149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3143[2] {
					yy3151 := &x.ObjectMeta
					yy3151.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3143[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3152 := &x.ObjectMeta
					yy3152.CodecEncodeSelf(e)
				}
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3143[3] {
					yy3154 := &x.Spec
					yy3154.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3143[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3155 := &x.Spec
					yy3155.CodecEncodeSelf(e)
				}
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3143[4] {
					yy3157 := &x.Status
					yy3157.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3143[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3158 := &x.Status
					yy3158.CodecEncodeSelf(e)
				}
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3159 := z.DecBinary()
	_ = yym3159
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3160 := r.ContainerType()
		if yyct3160 == codecSelferValueTypeMap1234 {
			yyl3160 := r.ReadMapStart()
			if yyl3160 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3160, d)
			}
		} else if yyct3160 == codecSelferValueTypeArray1234 {
			yyl3160 := r.ReadArrayStart()
			if yyl3160 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3160, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3161Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3161Slc
	var yyhl3161 bool = l >= 0
	for yyj3161 := 0; ; yyj3161++ {
		if yyhl3161 {
			if yyj3161 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3161Slc = r.DecodeBytes(yys3161Slc, true, true)
		yys3161 := string(yys3161Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3161 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3164 := &x.ObjectMeta
				yyv3164.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3165 := &x.Spec
				yyv3165.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3166 := &x.Status
				yyv3166.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3161)
		} // end switch yys3161
	} // end for yyj3161
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3167 int
	var yyb3167 bool
	var yyhl3167 bool = l >= 0
	yyj3167++
	if yyhl3167 {
		yyb3167 = yyj3167 > l
	} else {
		yyb3167 = r.CheckBreak()
	}
	if yyb3167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3167++
	if yyhl3167 {
		yyb3167 = yyj3167 > l
	} else {
		yyb3167 = r.CheckBreak()
	}
	if yyb3167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3167++
	if yyhl3167 {
		yyb3167 = yyj3167 > l
	} else {
		yyb3167 = r.CheckBreak()
	}
	if yyb3167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3170 := &x.ObjectMeta
		yyv3170.CodecDecodeSelf(d)
	}
	yyj3167++
	if yyhl3167 {
		yyb3167 = yyj3167 > l
	} else {
		yyb3167 = r.CheckBreak()
	}
	if yyb3167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3171 := &x.Spec
		yyv3171.CodecDecodeSelf(d)
	}
	yyj3167++
	if yyhl3167 {
		yyb3167 = yyj3167 > l
	} else {
		yyb3167 = r.CheckBreak()
	}
	if yyb3167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3172 := &x.Status
		yyv3172.CodecDecodeSelf(d)
	}
	for {
		yyj3167++
		if yyhl3167 {
			yyb3167 = yyj3167 > l
		} else {
			yyb3167 = r.CheckBreak()
		}
		if yyb3167 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3167-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3173 := z.EncBinary()
		_ = yym3173
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3174 := !z.EncBinary()
			yy2arr3174 := z.EncBasicHandle().StructToArray
			var yyq3174 [4]bool
			_, _, _ = yysep3174, yyq3174, yy2arr3174
			const yyr3174 bool = false
			yyq3174[0] = x.Kind != ""
			yyq3174[1] = x.APIVersion != ""
			yyq3174[2] = true
			var yynn3174 int
			if yyr3174 || yy2arr3174 {
				r.EncodeArrayStart(4)
			} else {
				yynn3174 = 1
				for _, b := range yyq3174 {
					if b {
						yynn3174++
					}
				}
				r.EncodeMapStart(yynn3174)
				yynn3174 = 0
			}
			if yyr3174 || yy2arr3174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3174[0] {
					yym3176 := z.EncBinary()
					_ = yym3176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3174[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3177 := z.EncBinary()
					_ = yym3177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3174 || yy2arr3174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3174[1] {
					yym3179 := z.EncBinary()
					_ = yym3179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3174[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3180 := z.EncBinary()
					_ = yym3180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3174 || yy2arr3174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3174[2] {
					yy3182 := &x.ListMeta
					yym3183 := z.EncBinary()
					_ = yym3183
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3182) {
					} else {
						z.EncFallback(yy3182)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3174[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3184 := &x.ListMeta
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3184) {
					} else {
						z.EncFallback(yy3184)
					}
				}
			}
			if yyr3174 || yy2arr3174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3174 || yy2arr3174 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3189 := z.DecBinary()
	_ = yym3189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3190 := r.ContainerType()
		if yyct3190 == codecSelferValueTypeMap1234 {
			yyl3190 := r.ReadMapStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3190, d)
			}
		} else if yyct3190 == codecSelferValueTypeArray1234 {
			yyl3190 := r.ReadArrayStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3191Slc
	var yyhl3191 bool = l >= 0
	for yyj3191 := 0; ; yyj3191++ {
		if yyhl3191 {
			if yyj3191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3191Slc = r.DecodeBytes(yys3191Slc, true, true)
		yys3191 := string(yys3191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3191 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3194 := &x.ListMeta
				yym3195 := z.DecBinary()
				_ = yym3195
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3194) {
				} else {
					z.DecFallback(yyv3194, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3196 := &x.Items
				yym3197 := z.DecBinary()
				_ = yym3197
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3196), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3191)
		} // end switch yys3191
	} // end for yyj3191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3198 int
	var yyb3198 bool
	var yyhl3198 bool = l >= 0
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3201 := &x.ListMeta
		yym3202 := z.DecBinary()
		_ = yym3202
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3201) {
		} else {
			z.DecFallback(yyv3201, false)
		}
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3203 := &x.Items
		yym3204 := z.DecBinary()
		_ = yym3204
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3203), d)
		}
	}
	for {
		yyj3198++
		if yyhl3198 {
			yyb3198 = yyj3198 > l
		} else {
			yyb3198 = r.CheckBreak()
		}
		if yyb3198 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3198-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3205 := z.EncBinary()
		_ = yym3205
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3206 := !z.EncBinary()
			yy2arr3206 := z.EncBasicHandle().StructToArray
			var yyq3206 [4]bool
			_, _, _ = yysep3206, yyq3206, yy2arr3206
			const yyr3206 bool = false
			yyq3206[0] = x.Kind != ""
			yyq3206[1] = x.APIVersion != ""
			yyq3206[2] = true
			var yynn3206 int
			if yyr3206 || yy2arr3206 {
				r.EncodeArrayStart(4)
			} else {
				yynn3206 = 1
				for _, b := range yyq3206 {
					if b {
						yynn3206++
					}
				}
				r.EncodeMapStart(yynn3206)
				yynn3206 = 0
			}
			if yyr3206 || yy2arr3206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3206[0] {
					yym3208 := z.EncBinary()
					_ = yym3208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3206[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3209 := z.EncBinary()
					_ = yym3209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3206 || yy2arr3206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3206[1] {
					yym3211 := z.EncBinary()
					_ = yym3211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3206[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3212 := z.EncBinary()
					_ = yym3212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3206 || yy2arr3206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3206[2] {
					yy3214 := &x.ObjectMeta
					yy3214.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3206[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3215 := &x.ObjectMeta
					yy3215.CodecEncodeSelf(e)
				}
			}
			if yyr3206 || yy2arr3206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3217 := &x.Target
				yy3217.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3218 := &x.Target
				yy3218.CodecEncodeSelf(e)
			}
			if yyr3206 || yy2arr3206 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3219 := z.DecBinary()
	_ = yym3219
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3220 := r.ContainerType()
		if yyct3220 == codecSelferValueTypeMap1234 {
			yyl3220 := r.ReadMapStart()
			if yyl3220 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3220, d)
			}
		} else if yyct3220 == codecSelferValueTypeArray1234 {
			yyl3220 := r.ReadArrayStart()
			if yyl3220 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3220, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3221Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3221Slc
	var yyhl3221 bool = l >= 0
	for yyj3221 := 0; ; yyj3221++ {
		if yyhl3221 {
			if yyj3221 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3221Slc = r.DecodeBytes(yys3221Slc, true, true)
		yys3221 := string(yys3221Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3221 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3224 := &x.ObjectMeta
				yyv3224.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3225 := &x.Target
				yyv3225.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3221)
		} // end switch yys3221
	} // end for yyj3221
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3226 int
	var yyb3226 bool
	var yyhl3226 bool = l >= 0
	yyj3226++
	if yyhl3226 {
		yyb3226 = yyj3226 > l
	} else {
		yyb3226 = r.CheckBreak()
	}
	if yyb3226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3226++
	if yyhl3226 {
		yyb3226 = yyj3226 > l
	} else {
		yyb3226 = r.CheckBreak()
	}
	if yyb3226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3226++
	if yyhl3226 {
		yyb3226 = yyj3226 > l
	} else {
		yyb3226 = r.CheckBreak()
	}
	if yyb3226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3229 := &x.ObjectMeta
		yyv3229.CodecDecodeSelf(d)
	}
	yyj3226++
	if yyhl3226 {
		yyb3226 = yyj3226 > l
	} else {
		yyb3226 = r.CheckBreak()
	}
	if yyb3226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3230 := &x.Target
		yyv3230.CodecDecodeSelf(d)
	}
	for {
		yyj3226++
		if yyhl3226 {
			yyb3226 = yyj3226 > l
		} else {
			yyb3226 = r.CheckBreak()
		}
		if yyb3226 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3226-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3231 := z.EncBinary()
		_ = yym3231
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3232 := !z.EncBinary()
			yy2arr3232 := z.EncBasicHandle().StructToArray
			var yyq3232 [1]bool
			_, _, _ = yysep3232, yyq3232, yy2arr3232
			const yyr3232 bool = false
			yyq3232[0] = x.UID != nil
			var yynn3232 int
			if yyr3232 || yy2arr3232 {
				r.EncodeArrayStart(1)
			} else {
				yynn3232 = 0
				for _, b := range yyq3232 {
					if b {
						yynn3232++
					}
				}
				r.EncodeMapStart(yynn3232)
				yynn3232 = 0
			}
			if yyr3232 || yy2arr3232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3232[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3234 := *x.UID
						yym3235 := z.EncBinary()
						_ = yym3235
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3234) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3234))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3232[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3236 := *x.UID
						yym3237 := z.EncBinary()
						_ = yym3237
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3236) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3236))
						}
					}
				}
			}
			if yyr3232 || yy2arr3232 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3238 := z.DecBinary()
	_ = yym3238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3239 := r.ContainerType()
		if yyct3239 == codecSelferValueTypeMap1234 {
			yyl3239 := r.ReadMapStart()
			if yyl3239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3239, d)
			}
		} else if yyct3239 == codecSelferValueTypeArray1234 {
			yyl3239 := r.ReadArrayStart()
			if yyl3239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3240Slc
	var yyhl3240 bool = l >= 0
	for yyj3240 := 0; ; yyj3240++ {
		if yyhl3240 {
			if yyj3240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3240Slc = r.DecodeBytes(yys3240Slc, true, true)
		yys3240 := string(yys3240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3240 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3242 := z.DecBinary()
				_ = yym3242
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3240)
		} // end switch yys3240
	} // end for yyj3240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3243 int
	var yyb3243 bool
	var yyhl3243 bool = l >= 0
	yyj3243++
	if yyhl3243 {
		yyb3243 = yyj3243 > l
	} else {
		yyb3243 = r.CheckBreak()
	}
	if yyb3243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3245 := z.DecBinary()
		_ = yym3245
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3243++
		if yyhl3243 {
			yyb3243 = yyj3243 > l
		} else {
			yyb3243 = r.CheckBreak()
		}
		if yyb3243 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3243-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3246 := z.EncBinary()
		_ = yym3246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3247 := !z.EncBinary()
			yy2arr3247 := z.EncBasicHandle().StructToArray
			var yyq3247 [5]bool
			_, _, _ = yysep3247, yyq3247, yy2arr3247
			const yyr3247 bool = false
			yyq3247[0] = x.Kind != ""
			yyq3247[1] = x.APIVersion != ""
			yyq3247[2] = x.GracePeriodSeconds != nil
			yyq3247[3] = x.Preconditions != nil
			yyq3247[4] = x.OrphanDependents != nil
			var yynn3247 int
			if yyr3247 || yy2arr3247 {
				r.EncodeArrayStart(5)
			} else {
				yynn3247 = 0
				for _, b := range yyq3247 {
					if b {
						yynn3247++
					}
				}
				r.EncodeMapStart(yynn3247)
				yynn3247 = 0
			}
			if yyr3247 || yy2arr3247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3247[0] {
					yym3249 := z.EncBinary()
					_ = yym3249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3247[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3250 := z.EncBinary()
					_ = yym3250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3247 || yy2arr3247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3247[1] {
					yym3252 := z.EncBinary()
					_ = yym3252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3247[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3253 := z.EncBinary()
					_ = yym3253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3247 || yy2arr3247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3247[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3255 := *x.GracePeriodSeconds
						yym3256 := z.EncBinary()
						_ = yym3256
						if false {
						} else {
							r.EncodeInt(int64(yy3255))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3247[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3257 := *x.GracePeriodSeconds
						yym3258 := z.EncBinary()
						_ = yym3258
						if false {
						} else {
							r.EncodeInt(int64(yy3257))
						}
					}
				}
			}
			if yyr3247 || yy2arr3247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3247[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3247[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3247 || yy2arr3247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3247[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3261 := *x.OrphanDependents
						yym3262 := z.EncBinary()
						_ = yym3262
						if false {
						} else {
							r.EncodeBool(bool(yy3261))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3247[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3263 := *x.OrphanDependents
						yym3264 := z.EncBinary()
						_ = yym3264
						if false {
						} else {
							r.EncodeBool(bool(yy3263))
						}
					}
				}
			}
			if yyr3247 || yy2arr3247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3265 := z.DecBinary()
	_ = yym3265
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3266 := r.ContainerType()
		if yyct3266 == codecSelferValueTypeMap1234 {
			yyl3266 := r.ReadMapStart()
			if yyl3266 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3266, d)
			}
		} else if yyct3266 == codecSelferValueTypeArray1234 {
			yyl3266 := r.ReadArrayStart()
			if yyl3266 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3266, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3267Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3267Slc
	var yyhl3267 bool = l >= 0
	for yyj3267 := 0; ; yyj3267++ {
		if yyhl3267 {
			if yyj3267 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3267Slc = r.DecodeBytes(yys3267Slc, true, true)
		yys3267 := string(yys3267Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3267 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3271 := z.DecBinary()
				_ = yym3271
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3274 := z.DecBinary()
				_ = yym3274
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3267)
		} // end switch yys3267
	} // end for yyj3267
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3275 int
	var yyb3275 bool
	var yyhl3275 bool = l >= 0
	yyj3275++
	if yyhl3275 {
		yyb3275 = yyj3275 > l
	} else {
		yyb3275 = r.CheckBreak()
	}
	if yyb3275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3275++
	if yyhl3275 {
		yyb3275 = yyj3275 > l
	} else {
		yyb3275 = r.CheckBreak()
	}
	if yyb3275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3275++
	if yyhl3275 {
		yyb3275 = yyj3275 > l
	} else {
		yyb3275 = r.CheckBreak()
	}
	if yyb3275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3279 := z.DecBinary()
		_ = yym3279
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3275++
	if yyhl3275 {
		yyb3275 = yyj3275 > l
	} else {
		yyb3275 = r.CheckBreak()
	}
	if yyb3275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3275++
	if yyhl3275 {
		yyb3275 = yyj3275 > l
	} else {
		yyb3275 = r.CheckBreak()
	}
	if yyb3275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3282 := z.DecBinary()
		_ = yym3282
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3275++
		if yyhl3275 {
			yyb3275 = yyj3275 > l
		} else {
			yyb3275 = r.CheckBreak()
		}
		if yyb3275 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3275-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3283 := z.EncBinary()
		_ = yym3283
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3284 := !z.EncBinary()
			yy2arr3284 := z.EncBasicHandle().StructToArray
			var yyq3284 [4]bool
			_, _, _ = yysep3284, yyq3284, yy2arr3284
			const yyr3284 bool = false
			yyq3284[0] = x.Kind != ""
			yyq3284[1] = x.APIVersion != ""
			var yynn3284 int
			if yyr3284 || yy2arr3284 {
				r.EncodeArrayStart(4)
			} else {
				yynn3284 = 2
				for _, b := range yyq3284 {
					if b {
						yynn3284++
					}
				}
				r.EncodeMapStart(yynn3284)
				yynn3284 = 0
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3284[0] {
					yym3286 := z.EncBinary()
					_ = yym3286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3284[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3287 := z.EncBinary()
					_ = yym3287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3284[1] {
					yym3289 := z.EncBinary()
					_ = yym3289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3284[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3290 := z.EncBinary()
					_ = yym3290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3292 := z.EncBinary()
				_ = yym3292
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3293 := z.EncBinary()
				_ = yym3293
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3295 := z.EncBinary()
				_ = yym3295
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3296 := z.EncBinary()
				_ = yym3296
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3284 || yy2arr3284 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3297 := z.DecBinary()
	_ = yym3297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3298 := r.ContainerType()
		if yyct3298 == codecSelferValueTypeMap1234 {
			yyl3298 := r.ReadMapStart()
			if yyl3298 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3298, d)
			}
		} else if yyct3298 == codecSelferValueTypeArray1234 {
			yyl3298 := r.ReadArrayStart()
			if yyl3298 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3299Slc
	var yyhl3299 bool = l >= 0
	for yyj3299 := 0; ; yyj3299++ {
		if yyhl3299 {
			if yyj3299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3299Slc = r.DecodeBytes(yys3299Slc, true, true)
		yys3299 := string(yys3299Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3299 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3299)
		} // end switch yys3299
	} // end for yyj3299
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3304 int
	var yyb3304 bool
	var yyhl3304 bool = l >= 0
	yyj3304++
	if yyhl3304 {
		yyb3304 = yyj3304 > l
	} else {
		yyb3304 = r.CheckBreak()
	}
	if yyb3304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3304++
	if yyhl3304 {
		yyb3304 = yyj3304 > l
	} else {
		yyb3304 = r.CheckBreak()
	}
	if yyb3304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3304++
	if yyhl3304 {
		yyb3304 = yyj3304 > l
	} else {
		yyb3304 = r.CheckBreak()
	}
	if yyb3304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3304++
	if yyhl3304 {
		yyb3304 = yyj3304 > l
	} else {
		yyb3304 = r.CheckBreak()
	}
	if yyb3304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3304++
		if yyhl3304 {
			yyb3304 = yyj3304 > l
		} else {
			yyb3304 = r.CheckBreak()
		}
		if yyb3304 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3304-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3309 := z.EncBinary()
		_ = yym3309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3310 := !z.EncBinary()
			yy2arr3310 := z.EncBasicHandle().StructToArray
			var yyq3310 [7]bool
			_, _, _ = yysep3310, yyq3310, yy2arr3310
			const yyr3310 bool = false
			yyq3310[0] = x.Kind != ""
			yyq3310[1] = x.APIVersion != ""
			yyq3310[2] = x.LabelSelector != ""
			yyq3310[3] = x.FieldSelector != ""
			yyq3310[4] = x.Watch != false
			yyq3310[5] = x.ResourceVersion != ""
			yyq3310[6] = x.TimeoutSeconds != nil
			var yynn3310 int
			if yyr3310 || yy2arr3310 {
				r.EncodeArrayStart(7)
			} else {
				yynn3310 = 0
				for _, b := range yyq3310 {
					if b {
						yynn3310++
					}
				}
				r.EncodeMapStart(yynn3310)
				yynn3310 = 0
			}
			if yyr3310 || yy2arr3310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3310[0] {
					yym3312 := z.EncBinary()
					_ = yym3312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3310[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3313 := z.EncBinary()
					_ = yym3313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3310 || yy2arr3310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3310[1] {
					yym3315 := z.EncBinary()
					_ = yym3315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3310[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3316 := z.EncBinary()
					_ = yym3316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3310 || yy2arr3310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3310[2] {
					yym3318 := z.EncBinary()
					_ = yym3318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3310[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3310 || yy2arr3310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3310[3] {
					yym3321 := z.EncBinary()
					_ = yym3321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3310[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3322 := z.EncBinary()
					_ = yym3322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3310 || yy2arr3310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3310[4] {
					yym3324 := z.EncBinary()
					_ = yym3324
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3310[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3325 := z.EncBinary()
					_ = yym3325
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3310 || yy2arr3310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3310[5] {
					yym3327 := z.EncBinary()
					_ = yym3327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3310[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3328 := z.EncBinary()
					_ = yym3328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3310 || yy2arr3310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3310[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3330 := *x.TimeoutSeconds
						yym3331 := z.EncBinary()
						_ = yym3331
						if false {
						} else {
							r.EncodeInt(int64(yy3330))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3310[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3332 := *x.TimeoutSeconds
						yym3333 := z.EncBinary()
						_ = yym3333
						if false {
						} else {
							r.EncodeInt(int64(yy3332))
						}
					}
				}
			}
			if yyr3310 || yy2arr3310 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3334 := z.DecBinary()
	_ = yym3334
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3335 := r.ContainerType()
		if yyct3335 == codecSelferValueTypeMap1234 {
			yyl3335 := r.ReadMapStart()
			if yyl3335 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3335, d)
			}
		} else if yyct3335 == codecSelferValueTypeArray1234 {
			yyl3335 := r.ReadArrayStart()
			if yyl3335 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3335, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3336Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3336Slc
	var yyhl3336 bool = l >= 0
	for yyj3336 := 0; ; yyj3336++ {
		if yyhl3336 {
			if yyj3336 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3336Slc = r.DecodeBytes(yys3336Slc, true, true)
		yys3336 := string(yys3336Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3336 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3344 := z.DecBinary()
				_ = yym3344
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3336)
		} // end switch yys3336
	} // end for yyj3336
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3345 int
	var yyb3345 bool
	var yyhl3345 bool = l >= 0
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3353 := z.DecBinary()
		_ = yym3353
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3345++
		if yyhl3345 {
			yyb3345 = yyj3345 > l
		} else {
			yyb3345 = r.CheckBreak()
		}
		if yyb3345 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3345-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3354 := z.EncBinary()
		_ = yym3354
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3355 := !z.EncBinary()
			yy2arr3355 := z.EncBasicHandle().StructToArray
			var yyq3355 [10]bool
			_, _, _ = yysep3355, yyq3355, yy2arr3355
			const yyr3355 bool = false
			yyq3355[0] = x.Kind != ""
			yyq3355[1] = x.APIVersion != ""
			yyq3355[2] = x.Container != ""
			yyq3355[3] = x.Follow != false
			yyq3355[4] = x.Previous != false
			yyq3355[5] = x.SinceSeconds != nil
			yyq3355[6] = x.SinceTime != nil
			yyq3355[7] = x.Timestamps != false
			yyq3355[8] = x.TailLines != nil
			yyq3355[9] = x.LimitBytes != nil
			var yynn3355 int
			if yyr3355 || yy2arr3355 {
				r.EncodeArrayStart(10)
			} else {
				yynn3355 = 0
				for _, b := range yyq3355 {
					if b {
						yynn3355++
					}
				}
				r.EncodeMapStart(yynn3355)
				yynn3355 = 0
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[0] {
					yym3357 := z.EncBinary()
					_ = yym3357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3355[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3358 := z.EncBinary()
					_ = yym3358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[1] {
					yym3360 := z.EncBinary()
					_ = yym3360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3355[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3361 := z.EncBinary()
					_ = yym3361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[2] {
					yym3363 := z.EncBinary()
					_ = yym3363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3355[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3364 := z.EncBinary()
					_ = yym3364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[3] {
					yym3366 := z.EncBinary()
					_ = yym3366
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3355[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3367 := z.EncBinary()
					_ = yym3367
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[4] {
					yym3369 := z.EncBinary()
					_ = yym3369
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3355[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3370 := z.EncBinary()
					_ = yym3370
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3372 := *x.SinceSeconds
						yym3373 := z.EncBinary()
						_ = yym3373
						if false {
						} else {
							r.EncodeInt(int64(yy3372))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3355[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3374 := *x.SinceSeconds
						yym3375 := z.EncBinary()
						_ = yym3375
						if false {
						} else {
							r.EncodeInt(int64(yy3374))
						}
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3377 := z.EncBinary()
						_ = yym3377
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3377 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3377 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3355[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3378 := z.EncBinary()
						_ = yym3378
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3378 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3378 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[7] {
					yym3380 := z.EncBinary()
					_ = yym3380
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3355[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3381 := z.EncBinary()
					_ = yym3381
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3383 := *x.TailLines
						yym3384 := z.EncBinary()
						_ = yym3384
						if false {
						} else {
							r.EncodeInt(int64(yy3383))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3355[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3385 := *x.TailLines
						yym3386 := z.EncBinary()
						_ = yym3386
						if false {
						} else {
							r.EncodeInt(int64(yy3385))
						}
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3388 := *x.LimitBytes
						yym3389 := z.EncBinary()
						_ = yym3389
						if false {
						} else {
							r.EncodeInt(int64(yy3388))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3355[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3390 := *x.LimitBytes
						yym3391 := z.EncBinary()
						_ = yym3391
						if false {
						} else {
							r.EncodeInt(int64(yy3390))
						}
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3392 := z.DecBinary()
	_ = yym3392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3393 := r.ContainerType()
		if yyct3393 == codecSelferValueTypeMap1234 {
			yyl3393 := r.ReadMapStart()
			if yyl3393 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3393, d)
			}
		} else if yyct3393 == codecSelferValueTypeArray1234 {
			yyl3393 := r.ReadArrayStart()
			if yyl3393 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3393, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3394Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3394Slc
	var yyhl3394 bool = l >= 0
	for yyj3394 := 0; ; yyj3394++ {
		if yyhl3394 {
			if yyj3394 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3394Slc = r.DecodeBytes(yys3394Slc, true, true)
		yys3394 := string(yys3394Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3394 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3401 := z.DecBinary()
				_ = yym3401
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3403 := z.DecBinary()
				_ = yym3403
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3403 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3403 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3406 := z.DecBinary()
				_ = yym3406
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3408 := z.DecBinary()
				_ = yym3408
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3394)
		} // end switch yys3394
	} // end for yyj3394
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3409 int
	var yyb3409 bool
	var yyhl3409 bool = l >= 0
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3416 := z.DecBinary()
		_ = yym3416
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3418 := z.DecBinary()
		_ = yym3418
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3418 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3418 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3421 := z.DecBinary()
		_ = yym3421
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3423 := z.DecBinary()
		_ = yym3423
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3409++
		if yyhl3409 {
			yyb3409 = yyj3409 > l
		} else {
			yyb3409 = r.CheckBreak()
		}
		if yyb3409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3424 := z.EncBinary()
		_ = yym3424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3425 := !z.EncBinary()
			yy2arr3425 := z.EncBasicHandle().StructToArray
			var yyq3425 [7]bool
			_, _, _ = yysep3425, yyq3425, yy2arr3425
			const yyr3425 bool = false
			yyq3425[0] = x.Kind != ""
			yyq3425[1] = x.APIVersion != ""
			yyq3425[2] = x.Stdin != false
			yyq3425[3] = x.Stdout != false
			yyq3425[4] = x.Stderr != false
			yyq3425[5] = x.TTY != false
			yyq3425[6] = x.Container != ""
			var yynn3425 int
			if yyr3425 || yy2arr3425 {
				r.EncodeArrayStart(7)
			} else {
				yynn3425 = 0
				for _, b := range yyq3425 {
					if b {
						yynn3425++
					}
				}
				r.EncodeMapStart(yynn3425)
				yynn3425 = 0
			}
			if yyr3425 || yy2arr3425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3425[0] {
					yym3427 := z.EncBinary()
					_ = yym3427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3425[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3428 := z.EncBinary()
					_ = yym3428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3425 || yy2arr3425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3425[1] {
					yym3430 := z.EncBinary()
					_ = yym3430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3425[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3431 := z.EncBinary()
					_ = yym3431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3425 || yy2arr3425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3425[2] {
					yym3433 := z.EncBinary()
					_ = yym3433
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3425[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3434 := z.EncBinary()
					_ = yym3434
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3425 || yy2arr3425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3425[3] {
					yym3436 := z.EncBinary()
					_ = yym3436
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3425[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3437 := z.EncBinary()
					_ = yym3437
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3425 || yy2arr3425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3425[4] {
					yym3439 := z.EncBinary()
					_ = yym3439
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3425[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3440 := z.EncBinary()
					_ = yym3440
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3425 || yy2arr3425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3425[5] {
					yym3442 := z.EncBinary()
					_ = yym3442
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3425[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3443 := z.EncBinary()
					_ = yym3443
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3425 || yy2arr3425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3425[6] {
					yym3445 := z.EncBinary()
					_ = yym3445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3425[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3446 := z.EncBinary()
					_ = yym3446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3425 || yy2arr3425 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3447 := z.DecBinary()
	_ = yym3447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3448 := r.ContainerType()
		if yyct3448 == codecSelferValueTypeMap1234 {
			yyl3448 := r.ReadMapStart()
			if yyl3448 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3448, d)
			}
		} else if yyct3448 == codecSelferValueTypeArray1234 {
			yyl3448 := r.ReadArrayStart()
			if yyl3448 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3448, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3449Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3449Slc
	var yyhl3449 bool = l >= 0
	for yyj3449 := 0; ; yyj3449++ {
		if yyhl3449 {
			if yyj3449 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3449Slc = r.DecodeBytes(yys3449Slc, true, true)
		yys3449 := string(yys3449Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3449 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3449)
		} // end switch yys3449
	} // end for yyj3449
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3457 int
	var yyb3457 bool
	var yyhl3457 bool = l >= 0
	yyj3457++
	if yyhl3457 {
		yyb3457 = yyj3457 > l
	} else {
		yyb3457 = r.CheckBreak()
	}
	if yyb3457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3457++
	if yyhl3457 {
		yyb3457 = yyj3457 > l
	} else {
		yyb3457 = r.CheckBreak()
	}
	if yyb3457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3457++
	if yyhl3457 {
		yyb3457 = yyj3457 > l
	} else {
		yyb3457 = r.CheckBreak()
	}
	if yyb3457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3457++
	if yyhl3457 {
		yyb3457 = yyj3457 > l
	} else {
		yyb3457 = r.CheckBreak()
	}
	if yyb3457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3457++
	if yyhl3457 {
		yyb3457 = yyj3457 > l
	} else {
		yyb3457 = r.CheckBreak()
	}
	if yyb3457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3457++
	if yyhl3457 {
		yyb3457 = yyj3457 > l
	} else {
		yyb3457 = r.CheckBreak()
	}
	if yyb3457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3457++
	if yyhl3457 {
		yyb3457 = yyj3457 > l
	} else {
		yyb3457 = r.CheckBreak()
	}
	if yyb3457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3457++
		if yyhl3457 {
			yyb3457 = yyj3457 > l
		} else {
			yyb3457 = r.CheckBreak()
		}
		if yyb3457 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3457-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3465 := z.EncBinary()
		_ = yym3465
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3466 := !z.EncBinary()
			yy2arr3466 := z.EncBasicHandle().StructToArray
			var yyq3466 [8]bool
			_, _, _ = yysep3466, yyq3466, yy2arr3466
			const yyr3466 bool = false
			yyq3466[0] = x.Kind != ""
			yyq3466[1] = x.APIVersion != ""
			yyq3466[2] = x.Stdin != false
			yyq3466[3] = x.Stdout != false
			yyq3466[4] = x.Stderr != false
			yyq3466[5] = x.TTY != false
			yyq3466[6] = x.Container != ""
			var yynn3466 int
			if yyr3466 || yy2arr3466 {
				r.EncodeArrayStart(8)
			} else {
				yynn3466 = 1
				for _, b := range yyq3466 {
					if b {
						yynn3466++
					}
				}
				r.EncodeMapStart(yynn3466)
				yynn3466 = 0
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3466[0] {
					yym3468 := z.EncBinary()
					_ = yym3468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3466[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3469 := z.EncBinary()
					_ = yym3469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3466[1] {
					yym3471 := z.EncBinary()
					_ = yym3471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3466[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3472 := z.EncBinary()
					_ = yym3472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3466[2] {
					yym3474 := z.EncBinary()
					_ = yym3474
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3466[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3475 := z.EncBinary()
					_ = yym3475
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3466[3] {
					yym3477 := z.EncBinary()
					_ = yym3477
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3466[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3478 := z.EncBinary()
					_ = yym3478
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3466[4] {
					yym3480 := z.EncBinary()
					_ = yym3480
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3466[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3481 := z.EncBinary()
					_ = yym3481
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3466[5] {
					yym3483 := z.EncBinary()
					_ = yym3483
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3466[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3484 := z.EncBinary()
					_ = yym3484
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3466[6] {
					yym3486 := z.EncBinary()
					_ = yym3486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3466[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3487 := z.EncBinary()
					_ = yym3487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3489 := z.EncBinary()
					_ = yym3489
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3490 := z.EncBinary()
					_ = yym3490
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3491 := z.DecBinary()
	_ = yym3491
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3492 := r.ContainerType()
		if yyct3492 == codecSelferValueTypeMap1234 {
			yyl3492 := r.ReadMapStart()
			if yyl3492 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3492, d)
			}
		} else if yyct3492 == codecSelferValueTypeArray1234 {
			yyl3492 := r.ReadArrayStart()
			if yyl3492 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3492, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3493Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3493Slc
	var yyhl3493 bool = l >= 0
	for yyj3493 := 0; ; yyj3493++ {
		if yyhl3493 {
			if yyj3493 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3493Slc = r.DecodeBytes(yys3493Slc, true, true)
		yys3493 := string(yys3493Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3493 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3501 := &x.Command
				yym3502 := z.DecBinary()
				_ = yym3502
				if false {
				} else {
					z.F.DecSliceStringX(yyv3501, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3493)
		} // end switch yys3493
	} // end for yyj3493
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3503 int
	var yyb3503 bool
	var yyhl3503 bool = l >= 0
	yyj3503++
	if yyhl3503 {
		yyb3503 = yyj3503 > l
	} else {
		yyb3503 = r.CheckBreak()
	}
	if yyb3503 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3503++
	if yyhl3503 {
		yyb3503 = yyj3503 > l
	} else {
		yyb3503 = r.CheckBreak()
	}
	if yyb3503 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3503++
	if yyhl3503 {
		yyb3503 = yyj3503 > l
	} else {
		yyb3503 = r.CheckBreak()
	}
	if yyb3503 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3503++
	if yyhl3503 {
		yyb3503 = yyj3503 > l
	} else {
		yyb3503 = r.CheckBreak()
	}
	if yyb3503 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3503++
	if yyhl3503 {
		yyb3503 = yyj3503 > l
	} else {
		yyb3503 = r.CheckBreak()
	}
	if yyb3503 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3503++
	if yyhl3503 {
		yyb3503 = yyj3503 > l
	} else {
		yyb3503 = r.CheckBreak()
	}
	if yyb3503 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3503++
	if yyhl3503 {
		yyb3503 = yyj3503 > l
	} else {
		yyb3503 = r.CheckBreak()
	}
	if yyb3503 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3503++
	if yyhl3503 {
		yyb3503 = yyj3503 > l
	} else {
		yyb3503 = r.CheckBreak()
	}
	if yyb3503 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3511 := &x.Command
		yym3512 := z.DecBinary()
		_ = yym3512
		if false {
		} else {
			z.F.DecSliceStringX(yyv3511, false, d)
		}
	}
	for {
		yyj3503++
		if yyhl3503 {
			yyb3503 = yyj3503 > l
		} else {
			yyb3503 = r.CheckBreak()
		}
		if yyb3503 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3503-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3513 := z.EncBinary()
		_ = yym3513
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3514 := !z.EncBinary()
			yy2arr3514 := z.EncBasicHandle().StructToArray
			var yyq3514 [3]bool
			_, _, _ = yysep3514, yyq3514, yy2arr3514
			const yyr3514 bool = false
			yyq3514[0] = x.Kind != ""
			yyq3514[1] = x.APIVersion != ""
			yyq3514[2] = x.Path != ""
			var yynn3514 int
			if yyr3514 || yy2arr3514 {
				r.EncodeArrayStart(3)
			} else {
				yynn3514 = 0
				for _, b := range yyq3514 {
					if b {
						yynn3514++
					}
				}
				r.EncodeMapStart(yynn3514)
				yynn3514 = 0
			}
			if yyr3514 || yy2arr3514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3514[0] {
					yym3516 := z.EncBinary()
					_ = yym3516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3514[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3517 := z.EncBinary()
					_ = yym3517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3514 || yy2arr3514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3514[1] {
					yym3519 := z.EncBinary()
					_ = yym3519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3514[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3520 := z.EncBinary()
					_ = yym3520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3514 || yy2arr3514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3514[2] {
					yym3522 := z.EncBinary()
					_ = yym3522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3514[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3523 := z.EncBinary()
					_ = yym3523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3514 || yy2arr3514 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3524 := z.DecBinary()
	_ = yym3524
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3525 := r.ContainerType()
		if yyct3525 == codecSelferValueTypeMap1234 {
			yyl3525 := r.ReadMapStart()
			if yyl3525 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3525, d)
			}
		} else if yyct3525 == codecSelferValueTypeArray1234 {
			yyl3525 := r.ReadArrayStart()
			if yyl3525 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3525, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3526Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3526Slc
	var yyhl3526 bool = l >= 0
	for yyj3526 := 0; ; yyj3526++ {
		if yyhl3526 {
			if yyj3526 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3526Slc = r.DecodeBytes(yys3526Slc, true, true)
		yys3526 := string(yys3526Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3526 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3526)
		} // end switch yys3526
	} // end for yyj3526
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3530 int
	var yyb3530 bool
	var yyhl3530 bool = l >= 0
	yyj3530++
	if yyhl3530 {
		yyb3530 = yyj3530 > l
	} else {
		yyb3530 = r.CheckBreak()
	}
	if yyb3530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3530++
	if yyhl3530 {
		yyb3530 = yyj3530 > l
	} else {
		yyb3530 = r.CheckBreak()
	}
	if yyb3530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3530++
	if yyhl3530 {
		yyb3530 = yyj3530 > l
	} else {
		yyb3530 = r.CheckBreak()
	}
	if yyb3530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3530++
		if yyhl3530 {
			yyb3530 = yyj3530 > l
		} else {
			yyb3530 = r.CheckBreak()
		}
		if yyb3530 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3530-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3534 := z.EncBinary()
		_ = yym3534
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3535 := !z.EncBinary()
			yy2arr3535 := z.EncBasicHandle().StructToArray
			var yyq3535 [3]bool
			_, _, _ = yysep3535, yyq3535, yy2arr3535
			const yyr3535 bool = false
			yyq3535[0] = x.Kind != ""
			yyq3535[1] = x.APIVersion != ""
			yyq3535[2] = x.Path != ""
			var yynn3535 int
			if yyr3535 || yy2arr3535 {
				r.EncodeArrayStart(3)
			} else {
				yynn3535 = 0
				for _, b := range yyq3535 {
					if b {
						yynn3535++
					}
				}
				r.EncodeMapStart(yynn3535)
				yynn3535 = 0
			}
			if yyr3535 || yy2arr3535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3535[0] {
					yym3537 := z.EncBinary()
					_ = yym3537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3535[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3538 := z.EncBinary()
					_ = yym3538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3535 || yy2arr3535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3535[1] {
					yym3540 := z.EncBinary()
					_ = yym3540
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3535[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3541 := z.EncBinary()
					_ = yym3541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3535 || yy2arr3535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3535[2] {
					yym3543 := z.EncBinary()
					_ = yym3543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3535[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3544 := z.EncBinary()
					_ = yym3544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3535 || yy2arr3535 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3545 := z.DecBinary()
	_ = yym3545
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3546 := r.ContainerType()
		if yyct3546 == codecSelferValueTypeMap1234 {
			yyl3546 := r.ReadMapStart()
			if yyl3546 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3546, d)
			}
		} else if yyct3546 == codecSelferValueTypeArray1234 {
			yyl3546 := r.ReadArrayStart()
			if yyl3546 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3546, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3547Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3547Slc
	var yyhl3547 bool = l >= 0
	for yyj3547 := 0; ; yyj3547++ {
		if yyhl3547 {
			if yyj3547 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3547Slc = r.DecodeBytes(yys3547Slc, true, true)
		yys3547 := string(yys3547Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3547 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3547)
		} // end switch yys3547
	} // end for yyj3547
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3551 int
	var yyb3551 bool
	var yyhl3551 bool = l >= 0
	yyj3551++
	if yyhl3551 {
		yyb3551 = yyj3551 > l
	} else {
		yyb3551 = r.CheckBreak()
	}
	if yyb3551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3551++
	if yyhl3551 {
		yyb3551 = yyj3551 > l
	} else {
		yyb3551 = r.CheckBreak()
	}
	if yyb3551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3551++
	if yyhl3551 {
		yyb3551 = yyj3551 > l
	} else {
		yyb3551 = r.CheckBreak()
	}
	if yyb3551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3551++
		if yyhl3551 {
			yyb3551 = yyj3551 > l
		} else {
			yyb3551 = r.CheckBreak()
		}
		if yyb3551 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3551-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3555 := z.EncBinary()
		_ = yym3555
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3556 := !z.EncBinary()
			yy2arr3556 := z.EncBasicHandle().StructToArray
			var yyq3556 [3]bool
			_, _, _ = yysep3556, yyq3556, yy2arr3556
			const yyr3556 bool = false
			yyq3556[0] = x.Kind != ""
			yyq3556[1] = x.APIVersion != ""
			yyq3556[2] = x.Path != ""
			var yynn3556 int
			if yyr3556 || yy2arr3556 {
				r.EncodeArrayStart(3)
			} else {
				yynn3556 = 0
				for _, b := range yyq3556 {
					if b {
						yynn3556++
					}
				}
				r.EncodeMapStart(yynn3556)
				yynn3556 = 0
			}
			if yyr3556 || yy2arr3556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3556[0] {
					yym3558 := z.EncBinary()
					_ = yym3558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3556[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3559 := z.EncBinary()
					_ = yym3559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3556 || yy2arr3556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3556[1] {
					yym3561 := z.EncBinary()
					_ = yym3561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3556[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3562 := z.EncBinary()
					_ = yym3562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3556 || yy2arr3556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3556[2] {
					yym3564 := z.EncBinary()
					_ = yym3564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3556[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3565 := z.EncBinary()
					_ = yym3565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3556 || yy2arr3556 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3566 := z.DecBinary()
	_ = yym3566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3567 := r.ContainerType()
		if yyct3567 == codecSelferValueTypeMap1234 {
			yyl3567 := r.ReadMapStart()
			if yyl3567 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3567, d)
			}
		} else if yyct3567 == codecSelferValueTypeArray1234 {
			yyl3567 := r.ReadArrayStart()
			if yyl3567 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3568Slc
	var yyhl3568 bool = l >= 0
	for yyj3568 := 0; ; yyj3568++ {
		if yyhl3568 {
			if yyj3568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3568Slc = r.DecodeBytes(yys3568Slc, true, true)
		yys3568 := string(yys3568Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3568 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3568)
		} // end switch yys3568
	} // end for yyj3568
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3572 int
	var yyb3572 bool
	var yyhl3572 bool = l >= 0
	yyj3572++
	if yyhl3572 {
		yyb3572 = yyj3572 > l
	} else {
		yyb3572 = r.CheckBreak()
	}
	if yyb3572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3572++
	if yyhl3572 {
		yyb3572 = yyj3572 > l
	} else {
		yyb3572 = r.CheckBreak()
	}
	if yyb3572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3572++
	if yyhl3572 {
		yyb3572 = yyj3572 > l
	} else {
		yyb3572 = r.CheckBreak()
	}
	if yyb3572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3572++
		if yyhl3572 {
			yyb3572 = yyj3572 > l
		} else {
			yyb3572 = r.CheckBreak()
		}
		if yyb3572 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3572-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3576 := z.EncBinary()
		_ = yym3576
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3577 := !z.EncBinary()
			yy2arr3577 := z.EncBasicHandle().StructToArray
			var yyq3577 [5]bool
			_, _, _ = yysep3577, yyq3577, yy2arr3577
			const yyr3577 bool = false
			yyq3577[4] = x.Controller != nil
			var yynn3577 int
			if yyr3577 || yy2arr3577 {
				r.EncodeArrayStart(5)
			} else {
				yynn3577 = 4
				for _, b := range yyq3577 {
					if b {
						yynn3577++
					}
				}
				r.EncodeMapStart(yynn3577)
				yynn3577 = 0
			}
			if yyr3577 || yy2arr3577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3579 := z.EncBinary()
				_ = yym3579
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3580 := z.EncBinary()
				_ = yym3580
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3577 || yy2arr3577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3582 := z.EncBinary()
				_ = yym3582
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3583 := z.EncBinary()
				_ = yym3583
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3577 || yy2arr3577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3585 := z.EncBinary()
				_ = yym3585
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3586 := z.EncBinary()
				_ = yym3586
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3577 || yy2arr3577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3588 := z.EncBinary()
				_ = yym3588
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3589 := z.EncBinary()
				_ = yym3589
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3577 || yy2arr3577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3577[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3591 := *x.Controller
						yym3592 := z.EncBinary()
						_ = yym3592
						if false {
						} else {
							r.EncodeBool(bool(yy3591))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3577[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3593 := *x.Controller
						yym3594 := z.EncBinary()
						_ = yym3594
						if false {
						} else {
							r.EncodeBool(bool(yy3593))
						}
					}
				}
			}
			if yyr3577 || yy2arr3577 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3595 := z.DecBinary()
	_ = yym3595
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3596 := r.ContainerType()
		if yyct3596 == codecSelferValueTypeMap1234 {
			yyl3596 := r.ReadMapStart()
			if yyl3596 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3596, d)
			}
		} else if yyct3596 == codecSelferValueTypeArray1234 {
			yyl3596 := r.ReadArrayStart()
			if yyl3596 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3596, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3597Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3597Slc
	var yyhl3597 bool = l >= 0
	for yyj3597 := 0; ; yyj3597++ {
		if yyhl3597 {
			if yyj3597 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3597Slc = r.DecodeBytes(yys3597Slc, true, true)
		yys3597 := string(yys3597Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3597 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3603 := z.DecBinary()
				_ = yym3603
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3597)
		} // end switch yys3597
	} // end for yyj3597
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3604 int
	var yyb3604 bool
	var yyhl3604 bool = l >= 0
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3610 := z.DecBinary()
		_ = yym3610
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3604++
		if yyhl3604 {
			yyb3604 = yyj3604 > l
		} else {
			yyb3604 = r.CheckBreak()
		}
		if yyb3604 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3604-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3611 := z.EncBinary()
		_ = yym3611
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3612 := !z.EncBinary()
			yy2arr3612 := z.EncBasicHandle().StructToArray
			var yyq3612 [7]bool
			_, _, _ = yysep3612, yyq3612, yy2arr3612
			const yyr3612 bool = false
			yyq3612[0] = x.Kind != ""
			yyq3612[1] = x.Namespace != ""
			yyq3612[2] = x.Name != ""
			yyq3612[3] = x.UID != ""
			yyq3612[4] = x.APIVersion != ""
			yyq3612[5] = x.ResourceVersion != ""
			yyq3612[6] = x.FieldPath != ""
			var yynn3612 int
			if yyr3612 || yy2arr3612 {
				r.EncodeArrayStart(7)
			} else {
				yynn3612 = 0
				for _, b := range yyq3612 {
					if b {
						yynn3612++
					}
				}
				r.EncodeMapStart(yynn3612)
				yynn3612 = 0
			}
			if yyr3612 || yy2arr3612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3612[0] {
					yym3614 := z.EncBinary()
					_ = yym3614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3612[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3615 := z.EncBinary()
					_ = yym3615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3612 || yy2arr3612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3612[1] {
					yym3617 := z.EncBinary()
					_ = yym3617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3612[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3618 := z.EncBinary()
					_ = yym3618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3612 || yy2arr3612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3612[2] {
					yym3620 := z.EncBinary()
					_ = yym3620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3612[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3621 := z.EncBinary()
					_ = yym3621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3612 || yy2arr3612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3612[3] {
					yym3623 := z.EncBinary()
					_ = yym3623
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3612[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3624 := z.EncBinary()
					_ = yym3624
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3612 || yy2arr3612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3612[4] {
					yym3626 := z.EncBinary()
					_ = yym3626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3612[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3627 := z.EncBinary()
					_ = yym3627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3612 || yy2arr3612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3612[5] {
					yym3629 := z.EncBinary()
					_ = yym3629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3612[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3630 := z.EncBinary()
					_ = yym3630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3612 || yy2arr3612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3612[6] {
					yym3632 := z.EncBinary()
					_ = yym3632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3612[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3633 := z.EncBinary()
					_ = yym3633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3612 || yy2arr3612 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3634 := z.DecBinary()
	_ = yym3634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3635 := r.ContainerType()
		if yyct3635 == codecSelferValueTypeMap1234 {
			yyl3635 := r.ReadMapStart()
			if yyl3635 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3635, d)
			}
		} else if yyct3635 == codecSelferValueTypeArray1234 {
			yyl3635 := r.ReadArrayStart()
			if yyl3635 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3636Slc
	var yyhl3636 bool = l >= 0
	for yyj3636 := 0; ; yyj3636++ {
		if yyhl3636 {
			if yyj3636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3636Slc = r.DecodeBytes(yys3636Slc, true, true)
		yys3636 := string(yys3636Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3636 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3636)
		} // end switch yys3636
	} // end for yyj3636
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3644 int
	var yyb3644 bool
	var yyhl3644 bool = l >= 0
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3644++
		if yyhl3644 {
			yyb3644 = yyj3644 > l
		} else {
			yyb3644 = r.CheckBreak()
		}
		if yyb3644 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3644-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3652 := z.EncBinary()
		_ = yym3652
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3653 := !z.EncBinary()
			yy2arr3653 := z.EncBasicHandle().StructToArray
			var yyq3653 [1]bool
			_, _, _ = yysep3653, yyq3653, yy2arr3653
			const yyr3653 bool = false
			yyq3653[0] = x.Name != ""
			var yynn3653 int
			if yyr3653 || yy2arr3653 {
				r.EncodeArrayStart(1)
			} else {
				yynn3653 = 0
				for _, b := range yyq3653 {
					if b {
						yynn3653++
					}
				}
				r.EncodeMapStart(yynn3653)
				yynn3653 = 0
			}
			if yyr3653 || yy2arr3653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3653[0] {
					yym3655 := z.EncBinary()
					_ = yym3655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3653[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3656 := z.EncBinary()
					_ = yym3656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3653 || yy2arr3653 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3657 := z.DecBinary()
	_ = yym3657
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3658 := r.ContainerType()
		if yyct3658 == codecSelferValueTypeMap1234 {
			yyl3658 := r.ReadMapStart()
			if yyl3658 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3658, d)
			}
		} else if yyct3658 == codecSelferValueTypeArray1234 {
			yyl3658 := r.ReadArrayStart()
			if yyl3658 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3658, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3659Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3659Slc
	var yyhl3659 bool = l >= 0
	for yyj3659 := 0; ; yyj3659++ {
		if yyhl3659 {
			if yyj3659 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3659Slc = r.DecodeBytes(yys3659Slc, true, true)
		yys3659 := string(yys3659Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3659 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3659)
		} // end switch yys3659
	} // end for yyj3659
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3661 int
	var yyb3661 bool
	var yyhl3661 bool = l >= 0
	yyj3661++
	if yyhl3661 {
		yyb3661 = yyj3661 > l
	} else {
		yyb3661 = r.CheckBreak()
	}
	if yyb3661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3661++
		if yyhl3661 {
			yyb3661 = yyj3661 > l
		} else {
			yyb3661 = r.CheckBreak()
		}
		if yyb3661 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3661-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3663 := z.EncBinary()
		_ = yym3663
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3664 := !z.EncBinary()
			yy2arr3664 := z.EncBasicHandle().StructToArray
			var yyq3664 [3]bool
			_, _, _ = yysep3664, yyq3664, yy2arr3664
			const yyr3664 bool = false
			yyq3664[0] = x.Kind != ""
			yyq3664[1] = x.APIVersion != ""
			yyq3664[2] = true
			var yynn3664 int
			if yyr3664 || yy2arr3664 {
				r.EncodeArrayStart(3)
			} else {
				yynn3664 = 0
				for _, b := range yyq3664 {
					if b {
						yynn3664++
					}
				}
				r.EncodeMapStart(yynn3664)
				yynn3664 = 0
			}
			if yyr3664 || yy2arr3664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3664[0] {
					yym3666 := z.EncBinary()
					_ = yym3666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3664[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3667 := z.EncBinary()
					_ = yym3667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3664 || yy2arr3664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3664[1] {
					yym3669 := z.EncBinary()
					_ = yym3669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3664[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3670 := z.EncBinary()
					_ = yym3670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3664 || yy2arr3664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3664[2] {
					yy3672 := &x.Reference
					yy3672.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3664[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3673 := &x.Reference
					yy3673.CodecEncodeSelf(e)
				}
			}
			if yyr3664 || yy2arr3664 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3674 := z.DecBinary()
	_ = yym3674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3675 := r.ContainerType()
		if yyct3675 == codecSelferValueTypeMap1234 {
			yyl3675 := r.ReadMapStart()
			if yyl3675 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3675, d)
			}
		} else if yyct3675 == codecSelferValueTypeArray1234 {
			yyl3675 := r.ReadArrayStart()
			if yyl3675 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3676Slc
	var yyhl3676 bool = l >= 0
	for yyj3676 := 0; ; yyj3676++ {
		if yyhl3676 {
			if yyj3676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3676Slc = r.DecodeBytes(yys3676Slc, true, true)
		yys3676 := string(yys3676Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3676 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3679 := &x.Reference
				yyv3679.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3676)
		} // end switch yys3676
	} // end for yyj3676
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3680 int
	var yyb3680 bool
	var yyhl3680 bool = l >= 0
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3683 := &x.Reference
		yyv3683.CodecDecodeSelf(d)
	}
	for {
		yyj3680++
		if yyhl3680 {
			yyb3680 = yyj3680 > l
		} else {
			yyb3680 = r.CheckBreak()
		}
		if yyb3680 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3680-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3684 := z.EncBinary()
		_ = yym3684
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3685 := !z.EncBinary()
			yy2arr3685 := z.EncBasicHandle().StructToArray
			var yyq3685 [2]bool
			_, _, _ = yysep3685, yyq3685, yy2arr3685
			const yyr3685 bool = false
			yyq3685[0] = x.Component != ""
			yyq3685[1] = x.Host != ""
			var yynn3685 int
			if yyr3685 || yy2arr3685 {
				r.EncodeArrayStart(2)
			} else {
				yynn3685 = 0
				for _, b := range yyq3685 {
					if b {
						yynn3685++
					}
				}
				r.EncodeMapStart(yynn3685)
				yynn3685 = 0
			}
			if yyr3685 || yy2arr3685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3685[0] {
					yym3687 := z.EncBinary()
					_ = yym3687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3685[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3688 := z.EncBinary()
					_ = yym3688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3685 || yy2arr3685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3685[1] {
					yym3690 := z.EncBinary()
					_ = yym3690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3685[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3691 := z.EncBinary()
					_ = yym3691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3685 || yy2arr3685 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3692 := z.DecBinary()
	_ = yym3692
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3693 := r.ContainerType()
		if yyct3693 == codecSelferValueTypeMap1234 {
			yyl3693 := r.ReadMapStart()
			if yyl3693 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3693, d)
			}
		} else if yyct3693 == codecSelferValueTypeArray1234 {
			yyl3693 := r.ReadArrayStart()
			if yyl3693 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3693, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3694Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3694Slc
	var yyhl3694 bool = l >= 0
	for yyj3694 := 0; ; yyj3694++ {
		if yyhl3694 {
			if yyj3694 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3694Slc = r.DecodeBytes(yys3694Slc, true, true)
		yys3694 := string(yys3694Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3694 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3694)
		} // end switch yys3694
	} // end for yyj3694
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3697 int
	var yyb3697 bool
	var yyhl3697 bool = l >= 0
	yyj3697++
	if yyhl3697 {
		yyb3697 = yyj3697 > l
	} else {
		yyb3697 = r.CheckBreak()
	}
	if yyb3697 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3697++
	if yyhl3697 {
		yyb3697 = yyj3697 > l
	} else {
		yyb3697 = r.CheckBreak()
	}
	if yyb3697 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3697++
		if yyhl3697 {
			yyb3697 = yyj3697 > l
		} else {
			yyb3697 = r.CheckBreak()
		}
		if yyb3697 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3697-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3700 := z.EncBinary()
		_ = yym3700
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3701 := !z.EncBinary()
			yy2arr3701 := z.EncBasicHandle().StructToArray
			var yyq3701 [11]bool
			_, _, _ = yysep3701, yyq3701, yy2arr3701
			const yyr3701 bool = false
			yyq3701[0] = x.Kind != ""
			yyq3701[1] = x.APIVersion != ""
			yyq3701[4] = x.Reason != ""
			yyq3701[5] = x.Message != ""
			yyq3701[6] = true
			yyq3701[7] = true
			yyq3701[8] = true
			yyq3701[9] = x.Count != 0
			yyq3701[10] = x.Type != ""
			var yynn3701 int
			if yyr3701 || yy2arr3701 {
				r.EncodeArrayStart(11)
			} else {
				yynn3701 = 2
				for _, b := range yyq3701 {
					if b {
						yynn3701++
					}
				}
				r.EncodeMapStart(yynn3701)
				yynn3701 = 0
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3701[0] {
					yym3703 := z.EncBinary()
					_ = yym3703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3701[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3704 := z.EncBinary()
					_ = yym3704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3701[1] {
					yym3706 := z.EncBinary()
					_ = yym3706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3701[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3707 := z.EncBinary()
					_ = yym3707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3709 := &x.ObjectMeta
				yy3709.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3710 := &x.ObjectMeta
				yy3710.CodecEncodeSelf(e)
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3712 := &x.InvolvedObject
				yy3712.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3713 := &x.InvolvedObject
				yy3713.CodecEncodeSelf(e)
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3701[4] {
					yym3715 := z.EncBinary()
					_ = yym3715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3701[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3716 := z.EncBinary()
					_ = yym3716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3701[5] {
					yym3718 := z.EncBinary()
					_ = yym3718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3701[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3719 := z.EncBinary()
					_ = yym3719
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3701[6] {
					yy3721 := &x.Source
					yy3721.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3701[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3722 := &x.Source
					yy3722.CodecEncodeSelf(e)
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3701[7] {
					yy3724 := &x.FirstTimestamp
					yym3725 := z.EncBinary()
					_ = yym3725
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3724) {
					} else if yym3725 {
						z.EncBinaryMarshal(yy3724)
					} else if !yym3725 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3724)
					} else {
						z.EncFallback(yy3724)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3701[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3726 := &x.FirstTimestamp
					yym3727 := z.EncBinary()
					_ = yym3727
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3726) {
					} else if yym3727 {
						z.EncBinaryMarshal(yy3726)
					} else if !yym3727 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3726)
					} else {
						z.EncFallback(yy3726)
					}
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3701[8] {
					yy3729 := &x.LastTimestamp
					yym3730 := z.EncBinary()
					_ = yym3730
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3729) {
					} else if yym3730 {
						z.EncBinaryMarshal(yy3729)
					} else if !yym3730 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3729)
					} else {
						z.EncFallback(yy3729)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3701[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3731 := &x.LastTimestamp
					yym3732 := z.EncBinary()
					_ = yym3732
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3731) {
					} else if yym3732 {
						z.EncBinaryMarshal(yy3731)
					} else if !yym3732 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3731)
					} else {
						z.EncFallback(yy3731)
					}
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3701[9] {
					yym3734 := z.EncBinary()
					_ = yym3734
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3701[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3735 := z.EncBinary()
					_ = yym3735
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3701[10] {
					yym3737 := z.EncBinary()
					_ = yym3737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3701[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3738 := z.EncBinary()
					_ = yym3738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3739 := z.DecBinary()
	_ = yym3739
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3740 := r.ContainerType()
		if yyct3740 == codecSelferValueTypeMap1234 {
			yyl3740 := r.ReadMapStart()
			if yyl3740 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3740, d)
			}
		} else if yyct3740 == codecSelferValueTypeArray1234 {
			yyl3740 := r.ReadArrayStart()
			if yyl3740 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3740, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3741Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3741Slc
	var yyhl3741 bool = l >= 0
	for yyj3741 := 0; ; yyj3741++ {
		if yyhl3741 {
			if yyj3741 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3741Slc = r.DecodeBytes(yys3741Slc, true, true)
		yys3741 := string(yys3741Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3741 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3744 := &x.ObjectMeta
				yyv3744.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3745 := &x.InvolvedObject
				yyv3745.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3748 := &x.Source
				yyv3748.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3749 := &x.FirstTimestamp
				yym3750 := z.DecBinary()
				_ = yym3750
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3749) {
				} else if yym3750 {
					z.DecBinaryUnmarshal(yyv3749)
				} else if !yym3750 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3749)
				} else {
					z.DecFallback(yyv3749, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3751 := &x.LastTimestamp
				yym3752 := z.DecBinary()
				_ = yym3752
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3751) {
				} else if yym3752 {
					z.DecBinaryUnmarshal(yyv3751)
				} else if !yym3752 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3751)
				} else {
					z.DecFallback(yyv3751, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3741)
		} // end switch yys3741
	} // end for yyj3741
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3755 int
	var yyb3755 bool
	var yyhl3755 bool = l >= 0
	yyj3755++
	if yyhl3755 {
		yyb3755 = yyj3755 > l
	} else {
		yyb3755 = r.CheckBreak()
	}
	if yyb3755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3755++
	if yyhl3755 {
		yyb3755 = yyj3755 > l
	} else {
		yyb3755 = r.CheckBreak()
	}
	if yyb3755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3755++
	if yyhl3755 {
		yyb3755 = yyj3755 > l
	} else {
		yyb3755 = r.CheckBreak()
	}
	if yyb3755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3758 := &x.ObjectMeta
		yyv3758.CodecDecodeSelf(d)
	}
	yyj3755++
	if yyhl3755 {
		yyb3755 = yyj3755 > l
	} else {
		yyb3755 = r.CheckBreak()
	}
	if yyb3755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3759 := &x.InvolvedObject
		yyv3759.CodecDecodeSelf(d)
	}
	yyj3755++
	if yyhl3755 {
		yyb3755 = yyj3755 > l
	} else {
		yyb3755 = r.CheckBreak()
	}
	if yyb3755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3755++
	if yyhl3755 {
		yyb3755 = yyj3755 > l
	} else {
		yyb3755 = r.CheckBreak()
	}
	if yyb3755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3755++
	if yyhl3755 {
		yyb3755 = yyj3755 > l
	} else {
		yyb3755 = r.CheckBreak()
	}
	if yyb3755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3762 := &x.Source
		yyv3762.CodecDecodeSelf(d)
	}
	yyj3755++
	if yyhl3755 {
		yyb3755 = yyj3755 > l
	} else {
		yyb3755 = r.CheckBreak()
	}
	if yyb3755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3763 := &x.FirstTimestamp
		yym3764 := z.DecBinary()
		_ = yym3764
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3763) {
		} else if yym3764 {
			z.DecBinaryUnmarshal(yyv3763)
		} else if !yym3764 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3763)
		} else {
			z.DecFallback(yyv3763, false)
		}
	}
	yyj3755++
	if yyhl3755 {
		yyb3755 = yyj3755 > l
	} else {
		yyb3755 = r.CheckBreak()
	}
	if yyb3755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3765 := &x.LastTimestamp
		yym3766 := z.DecBinary()
		_ = yym3766
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3765) {
		} else if yym3766 {
			z.DecBinaryUnmarshal(yyv3765)
		} else if !yym3766 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3765)
		} else {
			z.DecFallback(yyv3765, false)
		}
	}
	yyj3755++
	if yyhl3755 {
		yyb3755 = yyj3755 > l
	} else {
		yyb3755 = r.CheckBreak()
	}
	if yyb3755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3755++
	if yyhl3755 {
		yyb3755 = yyj3755 > l
	} else {
		yyb3755 = r.CheckBreak()
	}
	if yyb3755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3755++
		if yyhl3755 {
			yyb3755 = yyj3755 > l
		} else {
			yyb3755 = r.CheckBreak()
		}
		if yyb3755 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3755-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3769 := z.EncBinary()
		_ = yym3769
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3770 := !z.EncBinary()
			yy2arr3770 := z.EncBasicHandle().StructToArray
			var yyq3770 [4]bool
			_, _, _ = yysep3770, yyq3770, yy2arr3770
			const yyr3770 bool = false
			yyq3770[0] = x.Kind != ""
			yyq3770[1] = x.APIVersion != ""
			yyq3770[2] = true
			var yynn3770 int
			if yyr3770 || yy2arr3770 {
				r.EncodeArrayStart(4)
			} else {
				yynn3770 = 1
				for _, b := range yyq3770 {
					if b {
						yynn3770++
					}
				}
				r.EncodeMapStart(yynn3770)
				yynn3770 = 0
			}
			if yyr3770 || yy2arr3770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3770[0] {
					yym3772 := z.EncBinary()
					_ = yym3772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3770[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3773 := z.EncBinary()
					_ = yym3773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3770 || yy2arr3770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3770[1] {
					yym3775 := z.EncBinary()
					_ = yym3775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3770[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3776 := z.EncBinary()
					_ = yym3776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3770 || yy2arr3770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3770[2] {
					yy3778 := &x.ListMeta
					yym3779 := z.EncBinary()
					_ = yym3779
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3778) {
					} else {
						z.EncFallback(yy3778)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3770[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3780 := &x.ListMeta
					yym3781 := z.EncBinary()
					_ = yym3781
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3780) {
					} else {
						z.EncFallback(yy3780)
					}
				}
			}
			if yyr3770 || yy2arr3770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3783 := z.EncBinary()
					_ = yym3783
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3784 := z.EncBinary()
					_ = yym3784
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3770 || yy2arr3770 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3785 := z.DecBinary()
	_ = yym3785
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3786 := r.ContainerType()
		if yyct3786 == codecSelferValueTypeMap1234 {
			yyl3786 := r.ReadMapStart()
			if yyl3786 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3786, d)
			}
		} else if yyct3786 == codecSelferValueTypeArray1234 {
			yyl3786 := r.ReadArrayStart()
			if yyl3786 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3786, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3787Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3787Slc
	var yyhl3787 bool = l >= 0
	for yyj3787 := 0; ; yyj3787++ {
		if yyhl3787 {
			if yyj3787 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3787Slc = r.DecodeBytes(yys3787Slc, true, true)
		yys3787 := string(yys3787Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3787 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3790 := &x.ListMeta
				yym3791 := z.DecBinary()
				_ = yym3791
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3790) {
				} else {
					z.DecFallback(yyv3790, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3792 := &x.Items
				yym3793 := z.DecBinary()
				_ = yym3793
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3792), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3787)
		} // end switch yys3787
	} // end for yyj3787
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3794 int
	var yyb3794 bool
	var yyhl3794 bool = l >= 0
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3797 := &x.ListMeta
		yym3798 := z.DecBinary()
		_ = yym3798
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3797) {
		} else {
			z.DecFallback(yyv3797, false)
		}
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3799 := &x.Items
		yym3800 := z.DecBinary()
		_ = yym3800
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3799), d)
		}
	}
	for {
		yyj3794++
		if yyhl3794 {
			yyb3794 = yyj3794 > l
		} else {
			yyb3794 = r.CheckBreak()
		}
		if yyb3794 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3794-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3801 := z.EncBinary()
		_ = yym3801
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3802 := !z.EncBinary()
			yy2arr3802 := z.EncBasicHandle().StructToArray
			var yyq3802 [4]bool
			_, _, _ = yysep3802, yyq3802, yy2arr3802
			const yyr3802 bool = false
			yyq3802[0] = x.Kind != ""
			yyq3802[1] = x.APIVersion != ""
			yyq3802[2] = true
			var yynn3802 int
			if yyr3802 || yy2arr3802 {
				r.EncodeArrayStart(4)
			} else {
				yynn3802 = 1
				for _, b := range yyq3802 {
					if b {
						yynn3802++
					}
				}
				r.EncodeMapStart(yynn3802)
				yynn3802 = 0
			}
			if yyr3802 || yy2arr3802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3802[0] {
					yym3804 := z.EncBinary()
					_ = yym3804
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3802[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3805 := z.EncBinary()
					_ = yym3805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3802 || yy2arr3802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3802[1] {
					yym3807 := z.EncBinary()
					_ = yym3807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3802[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3808 := z.EncBinary()
					_ = yym3808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3802 || yy2arr3802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3802[2] {
					yy3810 := &x.ListMeta
					yym3811 := z.EncBinary()
					_ = yym3811
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3810) {
					} else {
						z.EncFallback(yy3810)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3802[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3812 := &x.ListMeta
					yym3813 := z.EncBinary()
					_ = yym3813
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3812) {
					} else {
						z.EncFallback(yy3812)
					}
				}
			}
			if yyr3802 || yy2arr3802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3815 := z.EncBinary()
					_ = yym3815
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3816 := z.EncBinary()
					_ = yym3816
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3802 || yy2arr3802 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3817 := z.DecBinary()
	_ = yym3817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3818 := r.ContainerType()
		if yyct3818 == codecSelferValueTypeMap1234 {
			yyl3818 := r.ReadMapStart()
			if yyl3818 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3818, d)
			}
		} else if yyct3818 == codecSelferValueTypeArray1234 {
			yyl3818 := r.ReadArrayStart()
			if yyl3818 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3818, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3819Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3819Slc
	var yyhl3819 bool = l >= 0
	for yyj3819 := 0; ; yyj3819++ {
		if yyhl3819 {
			if yyj3819 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3819Slc = r.DecodeBytes(yys3819Slc, true, true)
		yys3819 := string(yys3819Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3819 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3822 := &x.ListMeta
				yym3823 := z.DecBinary()
				_ = yym3823
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3822) {
				} else {
					z.DecFallback(yyv3822, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3824 := &x.Items
				yym3825 := z.DecBinary()
				_ = yym3825
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3824), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3819)
		} // end switch yys3819
	} // end for yyj3819
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3826 int
	var yyb3826 bool
	var yyhl3826 bool = l >= 0
	yyj3826++
	if yyhl3826 {
		yyb3826 = yyj3826 > l
	} else {
		yyb3826 = r.CheckBreak()
	}
	if yyb3826 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3826++
	if yyhl3826 {
		yyb3826 = yyj3826 > l
	} else {
		yyb3826 = r.CheckBreak()
	}
	if yyb3826 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3826++
	if yyhl3826 {
		yyb3826 = yyj3826 > l
	} else {
		yyb3826 = r.CheckBreak()
	}
	if yyb3826 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3829 := &x.ListMeta
		yym3830 := z.DecBinary()
		_ = yym3830
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3829) {
		} else {
			z.DecFallback(yyv3829, false)
		}
	}
	yyj3826++
	if yyhl3826 {
		yyb3826 = yyj3826 > l
	} else {
		yyb3826 = r.CheckBreak()
	}
	if yyb3826 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3831 := &x.Items
		yym3832 := z.DecBinary()
		_ = yym3832
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3831), d)
		}
	}
	for {
		yyj3826++
		if yyhl3826 {
			yyb3826 = yyj3826 > l
		} else {
			yyb3826 = r.CheckBreak()
		}
		if yyb3826 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3826-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3833 := z.EncBinary()
	_ = yym3833
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3834 := z.DecBinary()
	_ = yym3834
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3835 := z.EncBinary()
		_ = yym3835
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3836 := !z.EncBinary()
			yy2arr3836 := z.EncBasicHandle().StructToArray
			var yyq3836 [6]bool
			_, _, _ = yysep3836, yyq3836, yy2arr3836
			const yyr3836 bool = false
			yyq3836[0] = x.Type != ""
			yyq3836[1] = len(x.Max) != 0
			yyq3836[2] = len(x.Min) != 0
			yyq3836[3] = len(x.Default) != 0
			yyq3836[4] = len(x.DefaultRequest) != 0
			yyq3836[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3836 int
			if yyr3836 || yy2arr3836 {
				r.EncodeArrayStart(6)
			} else {
				yynn3836 = 0
				for _, b := range yyq3836 {
					if b {
						yynn3836++
					}
				}
				r.EncodeMapStart(yynn3836)
				yynn3836 = 0
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3836[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3836[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3836[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3836[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3836[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3836[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3836[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3836[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3836[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3836[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3836[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3836[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3843 := z.DecBinary()
	_ = yym3843
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3844 := r.ContainerType()
		if yyct3844 == codecSelferValueTypeMap1234 {
			yyl3844 := r.ReadMapStart()
			if yyl3844 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3844, d)
			}
		} else if yyct3844 == codecSelferValueTypeArray1234 {
			yyl3844 := r.ReadArrayStart()
			if yyl3844 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3844, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3845Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3845Slc
	var yyhl3845 bool = l >= 0
	for yyj3845 := 0; ; yyj3845++ {
		if yyhl3845 {
			if yyj3845 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3845Slc = r.DecodeBytes(yys3845Slc, true, true)
		yys3845 := string(yys3845Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3845 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3847 := &x.Max
				yyv3847.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3848 := &x.Min
				yyv3848.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3849 := &x.Default
				yyv3849.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3850 := &x.DefaultRequest
				yyv3850.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3851 := &x.MaxLimitRequestRatio
				yyv3851.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3845)
		} // end switch yys3845
	} // end for yyj3845
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3852 int
	var yyb3852 bool
	var yyhl3852 bool = l >= 0
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3854 := &x.Max
		yyv3854.CodecDecodeSelf(d)
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3855 := &x.Min
		yyv3855.CodecDecodeSelf(d)
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3856 := &x.Default
		yyv3856.CodecDecodeSelf(d)
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3857 := &x.DefaultRequest
		yyv3857.CodecDecodeSelf(d)
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3858 := &x.MaxLimitRequestRatio
		yyv3858.CodecDecodeSelf(d)
	}
	for {
		yyj3852++
		if yyhl3852 {
			yyb3852 = yyj3852 > l
		} else {
			yyb3852 = r.CheckBreak()
		}
		if yyb3852 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3852-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3859 := z.EncBinary()
		_ = yym3859
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3860 := !z.EncBinary()
			yy2arr3860 := z.EncBasicHandle().StructToArray
			var yyq3860 [1]bool
			_, _, _ = yysep3860, yyq3860, yy2arr3860
			const yyr3860 bool = false
			var yynn3860 int
			if yyr3860 || yy2arr3860 {
				r.EncodeArrayStart(1)
			} else {
				yynn3860 = 1
				for _, b := range yyq3860 {
					if b {
						yynn3860++
					}
				}
				r.EncodeMapStart(yynn3860)
				yynn3860 = 0
			}
			if yyr3860 || yy2arr3860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3862 := z.EncBinary()
					_ = yym3862
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3863 := z.EncBinary()
					_ = yym3863
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3860 || yy2arr3860 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3864 := z.DecBinary()
	_ = yym3864
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3865 := r.ContainerType()
		if yyct3865 == codecSelferValueTypeMap1234 {
			yyl3865 := r.ReadMapStart()
			if yyl3865 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3865, d)
			}
		} else if yyct3865 == codecSelferValueTypeArray1234 {
			yyl3865 := r.ReadArrayStart()
			if yyl3865 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3865, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3866Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3866Slc
	var yyhl3866 bool = l >= 0
	for yyj3866 := 0; ; yyj3866++ {
		if yyhl3866 {
			if yyj3866 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3866Slc = r.DecodeBytes(yys3866Slc, true, true)
		yys3866 := string(yys3866Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3866 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3867 := &x.Limits
				yym3868 := z.DecBinary()
				_ = yym3868
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3867), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3866)
		} // end switch yys3866
	} // end for yyj3866
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3869 int
	var yyb3869 bool
	var yyhl3869 bool = l >= 0
	yyj3869++
	if yyhl3869 {
		yyb3869 = yyj3869 > l
	} else {
		yyb3869 = r.CheckBreak()
	}
	if yyb3869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3870 := &x.Limits
		yym3871 := z.DecBinary()
		_ = yym3871
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3870), d)
		}
	}
	for {
		yyj3869++
		if yyhl3869 {
			yyb3869 = yyj3869 > l
		} else {
			yyb3869 = r.CheckBreak()
		}
		if yyb3869 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3869-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3872 := z.EncBinary()
		_ = yym3872
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3873 := !z.EncBinary()
			yy2arr3873 := z.EncBasicHandle().StructToArray
			var yyq3873 [4]bool
			_, _, _ = yysep3873, yyq3873, yy2arr3873
			const yyr3873 bool = false
			yyq3873[0] = x.Kind != ""
			yyq3873[1] = x.APIVersion != ""
			yyq3873[2] = true
			yyq3873[3] = true
			var yynn3873 int
			if yyr3873 || yy2arr3873 {
				r.EncodeArrayStart(4)
			} else {
				yynn3873 = 0
				for _, b := range yyq3873 {
					if b {
						yynn3873++
					}
				}
				r.EncodeMapStart(yynn3873)
				yynn3873 = 0
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3873[0] {
					yym3875 := z.EncBinary()
					_ = yym3875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3873[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3876 := z.EncBinary()
					_ = yym3876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3873[1] {
					yym3878 := z.EncBinary()
					_ = yym3878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3873[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3879 := z.EncBinary()
					_ = yym3879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3873[2] {
					yy3881 := &x.ObjectMeta
					yy3881.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3873[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3882 := &x.ObjectMeta
					yy3882.CodecEncodeSelf(e)
				}
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3873[3] {
					yy3884 := &x.Spec
					yy3884.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3873[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3885 := &x.Spec
					yy3885.CodecEncodeSelf(e)
				}
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3886 := z.DecBinary()
	_ = yym3886
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3887 := r.ContainerType()
		if yyct3887 == codecSelferValueTypeMap1234 {
			yyl3887 := r.ReadMapStart()
			if yyl3887 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3887, d)
			}
		} else if yyct3887 == codecSelferValueTypeArray1234 {
			yyl3887 := r.ReadArrayStart()
			if yyl3887 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3887, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3888Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3888Slc
	var yyhl3888 bool = l >= 0
	for yyj3888 := 0; ; yyj3888++ {
		if yyhl3888 {
			if yyj3888 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3888Slc = r.DecodeBytes(yys3888Slc, true, true)
		yys3888 := string(yys3888Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3888 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3891 := &x.ObjectMeta
				yyv3891.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3892 := &x.Spec
				yyv3892.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3888)
		} // end switch yys3888
	} // end for yyj3888
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3893 int
	var yyb3893 bool
	var yyhl3893 bool = l >= 0
	yyj3893++
	if yyhl3893 {
		yyb3893 = yyj3893 > l
	} else {
		yyb3893 = r.CheckBreak()
	}
	if yyb3893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3893++
	if yyhl3893 {
		yyb3893 = yyj3893 > l
	} else {
		yyb3893 = r.CheckBreak()
	}
	if yyb3893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3893++
	if yyhl3893 {
		yyb3893 = yyj3893 > l
	} else {
		yyb3893 = r.CheckBreak()
	}
	if yyb3893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3896 := &x.ObjectMeta
		yyv3896.CodecDecodeSelf(d)
	}
	yyj3893++
	if yyhl3893 {
		yyb3893 = yyj3893 > l
	} else {
		yyb3893 = r.CheckBreak()
	}
	if yyb3893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3897 := &x.Spec
		yyv3897.CodecDecodeSelf(d)
	}
	for {
		yyj3893++
		if yyhl3893 {
			yyb3893 = yyj3893 > l
		} else {
			yyb3893 = r.CheckBreak()
		}
		if yyb3893 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3893-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3898 := z.EncBinary()
		_ = yym3898
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3899 := !z.EncBinary()
			yy2arr3899 := z.EncBasicHandle().StructToArray
			var yyq3899 [4]bool
			_, _, _ = yysep3899, yyq3899, yy2arr3899
			const yyr3899 bool = false
			yyq3899[0] = x.Kind != ""
			yyq3899[1] = x.APIVersion != ""
			yyq3899[2] = true
			var yynn3899 int
			if yyr3899 || yy2arr3899 {
				r.EncodeArrayStart(4)
			} else {
				yynn3899 = 1
				for _, b := range yyq3899 {
					if b {
						yynn3899++
					}
				}
				r.EncodeMapStart(yynn3899)
				yynn3899 = 0
			}
			if yyr3899 || yy2arr3899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3899[0] {
					yym3901 := z.EncBinary()
					_ = yym3901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3899[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3902 := z.EncBinary()
					_ = yym3902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3899 || yy2arr3899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3899[1] {
					yym3904 := z.EncBinary()
					_ = yym3904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3899[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3905 := z.EncBinary()
					_ = yym3905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3899 || yy2arr3899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3899[2] {
					yy3907 := &x.ListMeta
					yym3908 := z.EncBinary()
					_ = yym3908
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3907) {
					} else {
						z.EncFallback(yy3907)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3899[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3909 := &x.ListMeta
					yym3910 := z.EncBinary()
					_ = yym3910
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3909) {
					} else {
						z.EncFallback(yy3909)
					}
				}
			}
			if yyr3899 || yy2arr3899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3912 := z.EncBinary()
					_ = yym3912
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3913 := z.EncBinary()
					_ = yym3913
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3899 || yy2arr3899 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3914 := z.DecBinary()
	_ = yym3914
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3915 := r.ContainerType()
		if yyct3915 == codecSelferValueTypeMap1234 {
			yyl3915 := r.ReadMapStart()
			if yyl3915 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3915, d)
			}
		} else if yyct3915 == codecSelferValueTypeArray1234 {
			yyl3915 := r.ReadArrayStart()
			if yyl3915 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3915, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3916Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3916Slc
	var yyhl3916 bool = l >= 0
	for yyj3916 := 0; ; yyj3916++ {
		if yyhl3916 {
			if yyj3916 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3916Slc = r.DecodeBytes(yys3916Slc, true, true)
		yys3916 := string(yys3916Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3916 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3919 := &x.ListMeta
				yym3920 := z.DecBinary()
				_ = yym3920
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3919) {
				} else {
					z.DecFallback(yyv3919, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3921 := &x.Items
				yym3922 := z.DecBinary()
				_ = yym3922
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3921), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3916)
		} // end switch yys3916
	} // end for yyj3916
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3923 int
	var yyb3923 bool
	var yyhl3923 bool = l >= 0
	yyj3923++
	if yyhl3923 {
		yyb3923 = yyj3923 > l
	} else {
		yyb3923 = r.CheckBreak()
	}
	if yyb3923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3923++
	if yyhl3923 {
		yyb3923 = yyj3923 > l
	} else {
		yyb3923 = r.CheckBreak()
	}
	if yyb3923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3923++
	if yyhl3923 {
		yyb3923 = yyj3923 > l
	} else {
		yyb3923 = r.CheckBreak()
	}
	if yyb3923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3926 := &x.ListMeta
		yym3927 := z.DecBinary()
		_ = yym3927
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3926) {
		} else {
			z.DecFallback(yyv3926, false)
		}
	}
	yyj3923++
	if yyhl3923 {
		yyb3923 = yyj3923 > l
	} else {
		yyb3923 = r.CheckBreak()
	}
	if yyb3923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3928 := &x.Items
		yym3929 := z.DecBinary()
		_ = yym3929
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3928), d)
		}
	}
	for {
		yyj3923++
		if yyhl3923 {
			yyb3923 = yyj3923 > l
		} else {
			yyb3923 = r.CheckBreak()
		}
		if yyb3923 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3923-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3930 := z.EncBinary()
	_ = yym3930
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3931 := z.DecBinary()
	_ = yym3931
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3932 := z.EncBinary()
		_ = yym3932
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3933 := !z.EncBinary()
			yy2arr3933 := z.EncBasicHandle().StructToArray
			var yyq3933 [2]bool
			_, _, _ = yysep3933, yyq3933, yy2arr3933
			const yyr3933 bool = false
			yyq3933[0] = len(x.Hard) != 0
			yyq3933[1] = len(x.Scopes) != 0
			var yynn3933 int
			if yyr3933 || yy2arr3933 {
				r.EncodeArrayStart(2)
			} else {
				yynn3933 = 0
				for _, b := range yyq3933 {
					if b {
						yynn3933++
					}
				}
				r.EncodeMapStart(yynn3933)
				yynn3933 = 0
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3933[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3933[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3933[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3936 := z.EncBinary()
						_ = yym3936
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3933[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3937 := z.EncBinary()
						_ = yym3937
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3938 := z.DecBinary()
	_ = yym3938
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3939 := r.ContainerType()
		if yyct3939 == codecSelferValueTypeMap1234 {
			yyl3939 := r.ReadMapStart()
			if yyl3939 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3939, d)
			}
		} else if yyct3939 == codecSelferValueTypeArray1234 {
			yyl3939 := r.ReadArrayStart()
			if yyl3939 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3939, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3940Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3940Slc
	var yyhl3940 bool = l >= 0
	for yyj3940 := 0; ; yyj3940++ {
		if yyhl3940 {
			if yyj3940 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3940Slc = r.DecodeBytes(yys3940Slc, true, true)
		yys3940 := string(yys3940Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3940 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3941 := &x.Hard
				yyv3941.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv3942 := &x.Scopes
				yym3943 := z.DecBinary()
				_ = yym3943
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3942), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3940)
		} // end switch yys3940
	} // end for yyj3940
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3944 int
	var yyb3944 bool
	var yyhl3944 bool = l >= 0
	yyj3944++
	if yyhl3944 {
		yyb3944 = yyj3944 > l
	} else {
		yyb3944 = r.CheckBreak()
	}
	if yyb3944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3945 := &x.Hard
		yyv3945.CodecDecodeSelf(d)
	}
	yyj3944++
	if yyhl3944 {
		yyb3944 = yyj3944 > l
	} else {
		yyb3944 = r.CheckBreak()
	}
	if yyb3944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv3946 := &x.Scopes
		yym3947 := z.DecBinary()
		_ = yym3947
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3946), d)
		}
	}
	for {
		yyj3944++
		if yyhl3944 {
			yyb3944 = yyj3944 > l
		} else {
			yyb3944 = r.CheckBreak()
		}
		if yyb3944 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3944-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3948 := z.EncBinary()
		_ = yym3948
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3949 := !z.EncBinary()
			yy2arr3949 := z.EncBasicHandle().StructToArray
			var yyq3949 [2]bool
			_, _, _ = yysep3949, yyq3949, yy2arr3949
			const yyr3949 bool = false
			yyq3949[0] = len(x.Hard) != 0
			yyq3949[1] = len(x.Used) != 0
			var yynn3949 int
			if yyr3949 || yy2arr3949 {
				r.EncodeArrayStart(2)
			} else {
				yynn3949 = 0
				for _, b := range yyq3949 {
					if b {
						yynn3949++
					}
				}
				r.EncodeMapStart(yynn3949)
				yynn3949 = 0
			}
			if yyr3949 || yy2arr3949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3949[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3949[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3949 || yy2arr3949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3949[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3949[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3949 || yy2arr3949 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3952 := z.DecBinary()
	_ = yym3952
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3953 := r.ContainerType()
		if yyct3953 == codecSelferValueTypeMap1234 {
			yyl3953 := r.ReadMapStart()
			if yyl3953 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3953, d)
			}
		} else if yyct3953 == codecSelferValueTypeArray1234 {
			yyl3953 := r.ReadArrayStart()
			if yyl3953 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3953, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3954Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3954Slc
	var yyhl3954 bool = l >= 0
	for yyj3954 := 0; ; yyj3954++ {
		if yyhl3954 {
			if yyj3954 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3954Slc = r.DecodeBytes(yys3954Slc, true, true)
		yys3954 := string(yys3954Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3954 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3955 := &x.Hard
				yyv3955.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3956 := &x.Used
				yyv3956.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3954)
		} // end switch yys3954
	} // end for yyj3954
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3957 int
	var yyb3957 bool
	var yyhl3957 bool = l >= 0
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3958 := &x.Hard
		yyv3958.CodecDecodeSelf(d)
	}
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3959 := &x.Used
		yyv3959.CodecDecodeSelf(d)
	}
	for {
		yyj3957++
		if yyhl3957 {
			yyb3957 = yyj3957 > l
		} else {
			yyb3957 = r.CheckBreak()
		}
		if yyb3957 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3957-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3960 := z.EncBinary()
		_ = yym3960
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3961 := !z.EncBinary()
			yy2arr3961 := z.EncBasicHandle().StructToArray
			var yyq3961 [5]bool
			_, _, _ = yysep3961, yyq3961, yy2arr3961
			const yyr3961 bool = false
			yyq3961[0] = x.Kind != ""
			yyq3961[1] = x.APIVersion != ""
			yyq3961[2] = true
			yyq3961[3] = true
			yyq3961[4] = true
			var yynn3961 int
			if yyr3961 || yy2arr3961 {
				r.EncodeArrayStart(5)
			} else {
				yynn3961 = 0
				for _, b := range yyq3961 {
					if b {
						yynn3961++
					}
				}
				r.EncodeMapStart(yynn3961)
				yynn3961 = 0
			}
			if yyr3961 || yy2arr3961 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3961[0] {
					yym3963 := z.EncBinary()
					_ = yym3963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3961[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3964 := z.EncBinary()
					_ = yym3964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3961 || yy2arr3961 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3961[1] {
					yym3966 := z.EncBinary()
					_ = yym3966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3961[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3967 := z.EncBinary()
					_ = yym3967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3961 || yy2arr3961 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3961[2] {
					yy3969 := &x.ObjectMeta
					yy3969.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3961[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3970 := &x.ObjectMeta
					yy3970.CodecEncodeSelf(e)
				}
			}
			if yyr3961 || yy2arr3961 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3961[3] {
					yy3972 := &x.Spec
					yy3972.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3961[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3973 := &x.Spec
					yy3973.CodecEncodeSelf(e)
				}
			}
			if yyr3961 || yy2arr3961 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3961[4] {
					yy3975 := &x.Status
					yy3975.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3961[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3976 := &x.Status
					yy3976.CodecEncodeSelf(e)
				}
			}
			if yyr3961 || yy2arr3961 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3977 := z.DecBinary()
	_ = yym3977
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3978 := r.ContainerType()
		if yyct3978 == codecSelferValueTypeMap1234 {
			yyl3978 := r.ReadMapStart()
			if yyl3978 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3978, d)
			}
		} else if yyct3978 == codecSelferValueTypeArray1234 {
			yyl3978 := r.ReadArrayStart()
			if yyl3978 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3978, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3979Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3979Slc
	var yyhl3979 bool = l >= 0
	for yyj3979 := 0; ; yyj3979++ {
		if yyhl3979 {
			if yyj3979 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3979Slc = r.DecodeBytes(yys3979Slc, true, true)
		yys3979 := string(yys3979Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3979 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3982 := &x.ObjectMeta
				yyv3982.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3983 := &x.Spec
				yyv3983.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3984 := &x.Status
				yyv3984.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3979)
		} // end switch yys3979
	} // end for yyj3979
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3985 int
	var yyb3985 bool
	var yyhl3985 bool = l >= 0
	yyj3985++
	if yyhl3985 {
		yyb3985 = yyj3985 > l
	} else {
		yyb3985 = r.CheckBreak()
	}
	if yyb3985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3985++
	if yyhl3985 {
		yyb3985 = yyj3985 > l
	} else {
		yyb3985 = r.CheckBreak()
	}
	if yyb3985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3985++
	if yyhl3985 {
		yyb3985 = yyj3985 > l
	} else {
		yyb3985 = r.CheckBreak()
	}
	if yyb3985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3988 := &x.ObjectMeta
		yyv3988.CodecDecodeSelf(d)
	}
	yyj3985++
	if yyhl3985 {
		yyb3985 = yyj3985 > l
	} else {
		yyb3985 = r.CheckBreak()
	}
	if yyb3985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3989 := &x.Spec
		yyv3989.CodecDecodeSelf(d)
	}
	yyj3985++
	if yyhl3985 {
		yyb3985 = yyj3985 > l
	} else {
		yyb3985 = r.CheckBreak()
	}
	if yyb3985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3990 := &x.Status
		yyv3990.CodecDecodeSelf(d)
	}
	for {
		yyj3985++
		if yyhl3985 {
			yyb3985 = yyj3985 > l
		} else {
			yyb3985 = r.CheckBreak()
		}
		if yyb3985 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3985-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3991 := z.EncBinary()
		_ = yym3991
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3992 := !z.EncBinary()
			yy2arr3992 := z.EncBasicHandle().StructToArray
			var yyq3992 [4]bool
			_, _, _ = yysep3992, yyq3992, yy2arr3992
			const yyr3992 bool = false
			yyq3992[0] = x.Kind != ""
			yyq3992[1] = x.APIVersion != ""
			yyq3992[2] = true
			var yynn3992 int
			if yyr3992 || yy2arr3992 {
				r.EncodeArrayStart(4)
			} else {
				yynn3992 = 1
				for _, b := range yyq3992 {
					if b {
						yynn3992++
					}
				}
				r.EncodeMapStart(yynn3992)
				yynn3992 = 0
			}
			if yyr3992 || yy2arr3992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3992[0] {
					yym3994 := z.EncBinary()
					_ = yym3994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3992[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3995 := z.EncBinary()
					_ = yym3995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3992 || yy2arr3992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3992[1] {
					yym3997 := z.EncBinary()
					_ = yym3997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3992[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3998 := z.EncBinary()
					_ = yym3998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3992 || yy2arr3992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3992[2] {
					yy4000 := &x.ListMeta
					yym4001 := z.EncBinary()
					_ = yym4001
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4000) {
					} else {
						z.EncFallback(yy4000)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3992[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4002 := &x.ListMeta
					yym4003 := z.EncBinary()
					_ = yym4003
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4002) {
					} else {
						z.EncFallback(yy4002)
					}
				}
			}
			if yyr3992 || yy2arr3992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4005 := z.EncBinary()
					_ = yym4005
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4006 := z.EncBinary()
					_ = yym4006
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3992 || yy2arr3992 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4007 := z.DecBinary()
	_ = yym4007
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4008 := r.ContainerType()
		if yyct4008 == codecSelferValueTypeMap1234 {
			yyl4008 := r.ReadMapStart()
			if yyl4008 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4008, d)
			}
		} else if yyct4008 == codecSelferValueTypeArray1234 {
			yyl4008 := r.ReadArrayStart()
			if yyl4008 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4008, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4009Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4009Slc
	var yyhl4009 bool = l >= 0
	for yyj4009 := 0; ; yyj4009++ {
		if yyhl4009 {
			if yyj4009 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4009Slc = r.DecodeBytes(yys4009Slc, true, true)
		yys4009 := string(yys4009Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4009 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4012 := &x.ListMeta
				yym4013 := z.DecBinary()
				_ = yym4013
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4012) {
				} else {
					z.DecFallback(yyv4012, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4014 := &x.Items
				yym4015 := z.DecBinary()
				_ = yym4015
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4014), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4009)
		} // end switch yys4009
	} // end for yyj4009
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4016 int
	var yyb4016 bool
	var yyhl4016 bool = l >= 0
	yyj4016++
	if yyhl4016 {
		yyb4016 = yyj4016 > l
	} else {
		yyb4016 = r.CheckBreak()
	}
	if yyb4016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4016++
	if yyhl4016 {
		yyb4016 = yyj4016 > l
	} else {
		yyb4016 = r.CheckBreak()
	}
	if yyb4016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4016++
	if yyhl4016 {
		yyb4016 = yyj4016 > l
	} else {
		yyb4016 = r.CheckBreak()
	}
	if yyb4016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4019 := &x.ListMeta
		yym4020 := z.DecBinary()
		_ = yym4020
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4019) {
		} else {
			z.DecFallback(yyv4019, false)
		}
	}
	yyj4016++
	if yyhl4016 {
		yyb4016 = yyj4016 > l
	} else {
		yyb4016 = r.CheckBreak()
	}
	if yyb4016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4021 := &x.Items
		yym4022 := z.DecBinary()
		_ = yym4022
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4021), d)
		}
	}
	for {
		yyj4016++
		if yyhl4016 {
			yyb4016 = yyj4016 > l
		} else {
			yyb4016 = r.CheckBreak()
		}
		if yyb4016 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4016-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4023 := z.EncBinary()
		_ = yym4023
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4024 := !z.EncBinary()
			yy2arr4024 := z.EncBasicHandle().StructToArray
			var yyq4024 [6]bool
			_, _, _ = yysep4024, yyq4024, yy2arr4024
			const yyr4024 bool = false
			yyq4024[0] = x.Kind != ""
			yyq4024[1] = x.APIVersion != ""
			yyq4024[2] = true
			yyq4024[3] = len(x.Data) != 0
			yyq4024[4] = len(x.StringData) != 0
			yyq4024[5] = x.Type != ""
			var yynn4024 int
			if yyr4024 || yy2arr4024 {
				r.EncodeArrayStart(6)
			} else {
				yynn4024 = 0
				for _, b := range yyq4024 {
					if b {
						yynn4024++
					}
				}
				r.EncodeMapStart(yynn4024)
				yynn4024 = 0
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4024[0] {
					yym4026 := z.EncBinary()
					_ = yym4026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4024[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4027 := z.EncBinary()
					_ = yym4027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4024[1] {
					yym4029 := z.EncBinary()
					_ = yym4029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4024[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4030 := z.EncBinary()
					_ = yym4030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4024[2] {
					yy4032 := &x.ObjectMeta
					yy4032.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4024[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4033 := &x.ObjectMeta
					yy4033.CodecEncodeSelf(e)
				}
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4024[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4035 := z.EncBinary()
						_ = yym4035
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4024[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4036 := z.EncBinary()
						_ = yym4036
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4024[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4038 := z.EncBinary()
						_ = yym4038
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4024[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4039 := z.EncBinary()
						_ = yym4039
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4024[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4024[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4041 := z.DecBinary()
	_ = yym4041
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4042 := r.ContainerType()
		if yyct4042 == codecSelferValueTypeMap1234 {
			yyl4042 := r.ReadMapStart()
			if yyl4042 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4042, d)
			}
		} else if yyct4042 == codecSelferValueTypeArray1234 {
			yyl4042 := r.ReadArrayStart()
			if yyl4042 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4042, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4043Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4043Slc
	var yyhl4043 bool = l >= 0
	for yyj4043 := 0; ; yyj4043++ {
		if yyhl4043 {
			if yyj4043 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4043Slc = r.DecodeBytes(yys4043Slc, true, true)
		yys4043 := string(yys4043Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4043 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4046 := &x.ObjectMeta
				yyv4046.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4047 := &x.Data
				yym4048 := z.DecBinary()
				_ = yym4048
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4047), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4049 := &x.StringData
				yym4050 := z.DecBinary()
				_ = yym4050
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4049, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4043)
		} // end switch yys4043
	} // end for yyj4043
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4052 int
	var yyb4052 bool
	var yyhl4052 bool = l >= 0
	yyj4052++
	if yyhl4052 {
		yyb4052 = yyj4052 > l
	} else {
		yyb4052 = r.CheckBreak()
	}
	if yyb4052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4052++
	if yyhl4052 {
		yyb4052 = yyj4052 > l
	} else {
		yyb4052 = r.CheckBreak()
	}
	if yyb4052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4052++
	if yyhl4052 {
		yyb4052 = yyj4052 > l
	} else {
		yyb4052 = r.CheckBreak()
	}
	if yyb4052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4055 := &x.ObjectMeta
		yyv4055.CodecDecodeSelf(d)
	}
	yyj4052++
	if yyhl4052 {
		yyb4052 = yyj4052 > l
	} else {
		yyb4052 = r.CheckBreak()
	}
	if yyb4052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4056 := &x.Data
		yym4057 := z.DecBinary()
		_ = yym4057
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4056), d)
		}
	}
	yyj4052++
	if yyhl4052 {
		yyb4052 = yyj4052 > l
	} else {
		yyb4052 = r.CheckBreak()
	}
	if yyb4052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4058 := &x.StringData
		yym4059 := z.DecBinary()
		_ = yym4059
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4058, false, d)
		}
	}
	yyj4052++
	if yyhl4052 {
		yyb4052 = yyj4052 > l
	} else {
		yyb4052 = r.CheckBreak()
	}
	if yyb4052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4052++
		if yyhl4052 {
			yyb4052 = yyj4052 > l
		} else {
			yyb4052 = r.CheckBreak()
		}
		if yyb4052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4061 := z.EncBinary()
	_ = yym4061
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4062 := z.DecBinary()
	_ = yym4062
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4063 := z.EncBinary()
		_ = yym4063
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4064 := !z.EncBinary()
			yy2arr4064 := z.EncBasicHandle().StructToArray
			var yyq4064 [4]bool
			_, _, _ = yysep4064, yyq4064, yy2arr4064
			const yyr4064 bool = false
			yyq4064[0] = x.Kind != ""
			yyq4064[1] = x.APIVersion != ""
			yyq4064[2] = true
			var yynn4064 int
			if yyr4064 || yy2arr4064 {
				r.EncodeArrayStart(4)
			} else {
				yynn4064 = 1
				for _, b := range yyq4064 {
					if b {
						yynn4064++
					}
				}
				r.EncodeMapStart(yynn4064)
				yynn4064 = 0
			}
			if yyr4064 || yy2arr4064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4064[0] {
					yym4066 := z.EncBinary()
					_ = yym4066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4064[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4067 := z.EncBinary()
					_ = yym4067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4064 || yy2arr4064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4064[1] {
					yym4069 := z.EncBinary()
					_ = yym4069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4064[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4070 := z.EncBinary()
					_ = yym4070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4064 || yy2arr4064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4064[2] {
					yy4072 := &x.ListMeta
					yym4073 := z.EncBinary()
					_ = yym4073
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4072) {
					} else {
						z.EncFallback(yy4072)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4064[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4074 := &x.ListMeta
					yym4075 := z.EncBinary()
					_ = yym4075
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4074) {
					} else {
						z.EncFallback(yy4074)
					}
				}
			}
			if yyr4064 || yy2arr4064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4077 := z.EncBinary()
					_ = yym4077
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4078 := z.EncBinary()
					_ = yym4078
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4064 || yy2arr4064 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4079 := z.DecBinary()
	_ = yym4079
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4080 := r.ContainerType()
		if yyct4080 == codecSelferValueTypeMap1234 {
			yyl4080 := r.ReadMapStart()
			if yyl4080 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4080, d)
			}
		} else if yyct4080 == codecSelferValueTypeArray1234 {
			yyl4080 := r.ReadArrayStart()
			if yyl4080 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4080, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4081Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4081Slc
	var yyhl4081 bool = l >= 0
	for yyj4081 := 0; ; yyj4081++ {
		if yyhl4081 {
			if yyj4081 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4081Slc = r.DecodeBytes(yys4081Slc, true, true)
		yys4081 := string(yys4081Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4081 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4084 := &x.ListMeta
				yym4085 := z.DecBinary()
				_ = yym4085
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4084) {
				} else {
					z.DecFallback(yyv4084, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4086 := &x.Items
				yym4087 := z.DecBinary()
				_ = yym4087
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4086), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4081)
		} // end switch yys4081
	} // end for yyj4081
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4088 int
	var yyb4088 bool
	var yyhl4088 bool = l >= 0
	yyj4088++
	if yyhl4088 {
		yyb4088 = yyj4088 > l
	} else {
		yyb4088 = r.CheckBreak()
	}
	if yyb4088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4088++
	if yyhl4088 {
		yyb4088 = yyj4088 > l
	} else {
		yyb4088 = r.CheckBreak()
	}
	if yyb4088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4088++
	if yyhl4088 {
		yyb4088 = yyj4088 > l
	} else {
		yyb4088 = r.CheckBreak()
	}
	if yyb4088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4091 := &x.ListMeta
		yym4092 := z.DecBinary()
		_ = yym4092
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4091) {
		} else {
			z.DecFallback(yyv4091, false)
		}
	}
	yyj4088++
	if yyhl4088 {
		yyb4088 = yyj4088 > l
	} else {
		yyb4088 = r.CheckBreak()
	}
	if yyb4088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4093 := &x.Items
		yym4094 := z.DecBinary()
		_ = yym4094
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4093), d)
		}
	}
	for {
		yyj4088++
		if yyhl4088 {
			yyb4088 = yyj4088 > l
		} else {
			yyb4088 = r.CheckBreak()
		}
		if yyb4088 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4088-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4095 := z.EncBinary()
		_ = yym4095
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4096 := !z.EncBinary()
			yy2arr4096 := z.EncBasicHandle().StructToArray
			var yyq4096 [4]bool
			_, _, _ = yysep4096, yyq4096, yy2arr4096
			const yyr4096 bool = false
			yyq4096[0] = x.Kind != ""
			yyq4096[1] = x.APIVersion != ""
			yyq4096[2] = true
			yyq4096[3] = len(x.Data) != 0
			var yynn4096 int
			if yyr4096 || yy2arr4096 {
				r.EncodeArrayStart(4)
			} else {
				yynn4096 = 0
				for _, b := range yyq4096 {
					if b {
						yynn4096++
					}
				}
				r.EncodeMapStart(yynn4096)
				yynn4096 = 0
			}
			if yyr4096 || yy2arr4096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4096[0] {
					yym4098 := z.EncBinary()
					_ = yym4098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4096[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4099 := z.EncBinary()
					_ = yym4099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4096 || yy2arr4096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4096[1] {
					yym4101 := z.EncBinary()
					_ = yym4101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4096[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4102 := z.EncBinary()
					_ = yym4102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4096 || yy2arr4096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4096[2] {
					yy4104 := &x.ObjectMeta
					yy4104.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4096[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4105 := &x.ObjectMeta
					yy4105.CodecEncodeSelf(e)
				}
			}
			if yyr4096 || yy2arr4096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4096[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4107 := z.EncBinary()
						_ = yym4107
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4096[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4108 := z.EncBinary()
						_ = yym4108
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4096 || yy2arr4096 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4109 := z.DecBinary()
	_ = yym4109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4110 := r.ContainerType()
		if yyct4110 == codecSelferValueTypeMap1234 {
			yyl4110 := r.ReadMapStart()
			if yyl4110 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4110, d)
			}
		} else if yyct4110 == codecSelferValueTypeArray1234 {
			yyl4110 := r.ReadArrayStart()
			if yyl4110 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4110, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4111Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4111Slc
	var yyhl4111 bool = l >= 0
	for yyj4111 := 0; ; yyj4111++ {
		if yyhl4111 {
			if yyj4111 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4111Slc = r.DecodeBytes(yys4111Slc, true, true)
		yys4111 := string(yys4111Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4111 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4114 := &x.ObjectMeta
				yyv4114.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4115 := &x.Data
				yym4116 := z.DecBinary()
				_ = yym4116
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4115, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4111)
		} // end switch yys4111
	} // end for yyj4111
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4117 int
	var yyb4117 bool
	var yyhl4117 bool = l >= 0
	yyj4117++
	if yyhl4117 {
		yyb4117 = yyj4117 > l
	} else {
		yyb4117 = r.CheckBreak()
	}
	if yyb4117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4117++
	if yyhl4117 {
		yyb4117 = yyj4117 > l
	} else {
		yyb4117 = r.CheckBreak()
	}
	if yyb4117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4117++
	if yyhl4117 {
		yyb4117 = yyj4117 > l
	} else {
		yyb4117 = r.CheckBreak()
	}
	if yyb4117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4120 := &x.ObjectMeta
		yyv4120.CodecDecodeSelf(d)
	}
	yyj4117++
	if yyhl4117 {
		yyb4117 = yyj4117 > l
	} else {
		yyb4117 = r.CheckBreak()
	}
	if yyb4117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4121 := &x.Data
		yym4122 := z.DecBinary()
		_ = yym4122
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4121, false, d)
		}
	}
	for {
		yyj4117++
		if yyhl4117 {
			yyb4117 = yyj4117 > l
		} else {
			yyb4117 = r.CheckBreak()
		}
		if yyb4117 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4117-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4123 := z.EncBinary()
		_ = yym4123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4124 := !z.EncBinary()
			yy2arr4124 := z.EncBasicHandle().StructToArray
			var yyq4124 [4]bool
			_, _, _ = yysep4124, yyq4124, yy2arr4124
			const yyr4124 bool = false
			yyq4124[0] = x.Kind != ""
			yyq4124[1] = x.APIVersion != ""
			yyq4124[2] = true
			var yynn4124 int
			if yyr4124 || yy2arr4124 {
				r.EncodeArrayStart(4)
			} else {
				yynn4124 = 1
				for _, b := range yyq4124 {
					if b {
						yynn4124++
					}
				}
				r.EncodeMapStart(yynn4124)
				yynn4124 = 0
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4124[0] {
					yym4126 := z.EncBinary()
					_ = yym4126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4124[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4127 := z.EncBinary()
					_ = yym4127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4124[1] {
					yym4129 := z.EncBinary()
					_ = yym4129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4124[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4130 := z.EncBinary()
					_ = yym4130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4124[2] {
					yy4132 := &x.ListMeta
					yym4133 := z.EncBinary()
					_ = yym4133
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4132) {
					} else {
						z.EncFallback(yy4132)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4124[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4134 := &x.ListMeta
					yym4135 := z.EncBinary()
					_ = yym4135
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4134) {
					} else {
						z.EncFallback(yy4134)
					}
				}
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4137 := z.EncBinary()
					_ = yym4137
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4138 := z.EncBinary()
					_ = yym4138
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4139 := z.DecBinary()
	_ = yym4139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4140 := r.ContainerType()
		if yyct4140 == codecSelferValueTypeMap1234 {
			yyl4140 := r.ReadMapStart()
			if yyl4140 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4140, d)
			}
		} else if yyct4140 == codecSelferValueTypeArray1234 {
			yyl4140 := r.ReadArrayStart()
			if yyl4140 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4140, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4141Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4141Slc
	var yyhl4141 bool = l >= 0
	for yyj4141 := 0; ; yyj4141++ {
		if yyhl4141 {
			if yyj4141 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4141Slc = r.DecodeBytes(yys4141Slc, true, true)
		yys4141 := string(yys4141Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4141 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4144 := &x.ListMeta
				yym4145 := z.DecBinary()
				_ = yym4145
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4144) {
				} else {
					z.DecFallback(yyv4144, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4146 := &x.Items
				yym4147 := z.DecBinary()
				_ = yym4147
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4146), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4141)
		} // end switch yys4141
	} // end for yyj4141
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4148 int
	var yyb4148 bool
	var yyhl4148 bool = l >= 0
	yyj4148++
	if yyhl4148 {
		yyb4148 = yyj4148 > l
	} else {
		yyb4148 = r.CheckBreak()
	}
	if yyb4148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4148++
	if yyhl4148 {
		yyb4148 = yyj4148 > l
	} else {
		yyb4148 = r.CheckBreak()
	}
	if yyb4148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4148++
	if yyhl4148 {
		yyb4148 = yyj4148 > l
	} else {
		yyb4148 = r.CheckBreak()
	}
	if yyb4148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4151 := &x.ListMeta
		yym4152 := z.DecBinary()
		_ = yym4152
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4151) {
		} else {
			z.DecFallback(yyv4151, false)
		}
	}
	yyj4148++
	if yyhl4148 {
		yyb4148 = yyj4148 > l
	} else {
		yyb4148 = r.CheckBreak()
	}
	if yyb4148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4153 := &x.Items
		yym4154 := z.DecBinary()
		_ = yym4154
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4153), d)
		}
	}
	for {
		yyj4148++
		if yyhl4148 {
			yyb4148 = yyj4148 > l
		} else {
			yyb4148 = r.CheckBreak()
		}
		if yyb4148 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4148-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4155 := z.EncBinary()
	_ = yym4155
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4156 := z.DecBinary()
	_ = yym4156
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4157 := z.EncBinary()
		_ = yym4157
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4158 := !z.EncBinary()
			yy2arr4158 := z.EncBasicHandle().StructToArray
			var yyq4158 [4]bool
			_, _, _ = yysep4158, yyq4158, yy2arr4158
			const yyr4158 bool = false
			yyq4158[2] = x.Message != ""
			yyq4158[3] = x.Error != ""
			var yynn4158 int
			if yyr4158 || yy2arr4158 {
				r.EncodeArrayStart(4)
			} else {
				yynn4158 = 2
				for _, b := range yyq4158 {
					if b {
						yynn4158++
					}
				}
				r.EncodeMapStart(yynn4158)
				yynn4158 = 0
			}
			if yyr4158 || yy2arr4158 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4158 || yy2arr4158 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4158 || yy2arr4158 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4158[2] {
					yym4162 := z.EncBinary()
					_ = yym4162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4158[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4163 := z.EncBinary()
					_ = yym4163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4158 || yy2arr4158 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4158[3] {
					yym4165 := z.EncBinary()
					_ = yym4165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4158[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4166 := z.EncBinary()
					_ = yym4166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4158 || yy2arr4158 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4167 := z.DecBinary()
	_ = yym4167
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4168 := r.ContainerType()
		if yyct4168 == codecSelferValueTypeMap1234 {
			yyl4168 := r.ReadMapStart()
			if yyl4168 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4168, d)
			}
		} else if yyct4168 == codecSelferValueTypeArray1234 {
			yyl4168 := r.ReadArrayStart()
			if yyl4168 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4168, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4169Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4169Slc
	var yyhl4169 bool = l >= 0
	for yyj4169 := 0; ; yyj4169++ {
		if yyhl4169 {
			if yyj4169 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4169Slc = r.DecodeBytes(yys4169Slc, true, true)
		yys4169 := string(yys4169Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4169 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4169)
		} // end switch yys4169
	} // end for yyj4169
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4174 int
	var yyb4174 bool
	var yyhl4174 bool = l >= 0
	yyj4174++
	if yyhl4174 {
		yyb4174 = yyj4174 > l
	} else {
		yyb4174 = r.CheckBreak()
	}
	if yyb4174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4174++
	if yyhl4174 {
		yyb4174 = yyj4174 > l
	} else {
		yyb4174 = r.CheckBreak()
	}
	if yyb4174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4174++
	if yyhl4174 {
		yyb4174 = yyj4174 > l
	} else {
		yyb4174 = r.CheckBreak()
	}
	if yyb4174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4174++
	if yyhl4174 {
		yyb4174 = yyj4174 > l
	} else {
		yyb4174 = r.CheckBreak()
	}
	if yyb4174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4174++
		if yyhl4174 {
			yyb4174 = yyj4174 > l
		} else {
			yyb4174 = r.CheckBreak()
		}
		if yyb4174 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4174-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4179 := z.EncBinary()
		_ = yym4179
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4180 := !z.EncBinary()
			yy2arr4180 := z.EncBasicHandle().StructToArray
			var yyq4180 [4]bool
			_, _, _ = yysep4180, yyq4180, yy2arr4180
			const yyr4180 bool = false
			yyq4180[0] = x.Kind != ""
			yyq4180[1] = x.APIVersion != ""
			yyq4180[2] = true
			yyq4180[3] = len(x.Conditions) != 0
			var yynn4180 int
			if yyr4180 || yy2arr4180 {
				r.EncodeArrayStart(4)
			} else {
				yynn4180 = 0
				for _, b := range yyq4180 {
					if b {
						yynn4180++
					}
				}
				r.EncodeMapStart(yynn4180)
				yynn4180 = 0
			}
			if yyr4180 || yy2arr4180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4180[0] {
					yym4182 := z.EncBinary()
					_ = yym4182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4180[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4183 := z.EncBinary()
					_ = yym4183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4180 || yy2arr4180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4180[1] {
					yym4185 := z.EncBinary()
					_ = yym4185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4180[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4186 := z.EncBinary()
					_ = yym4186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4180 || yy2arr4180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4180[2] {
					yy4188 := &x.ObjectMeta
					yy4188.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4180[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4189 := &x.ObjectMeta
					yy4189.CodecEncodeSelf(e)
				}
			}
			if yyr4180 || yy2arr4180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4180[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4191 := z.EncBinary()
						_ = yym4191
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4180[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4192 := z.EncBinary()
						_ = yym4192
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4180 || yy2arr4180 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4193 := z.DecBinary()
	_ = yym4193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4194 := r.ContainerType()
		if yyct4194 == codecSelferValueTypeMap1234 {
			yyl4194 := r.ReadMapStart()
			if yyl4194 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4194, d)
			}
		} else if yyct4194 == codecSelferValueTypeArray1234 {
			yyl4194 := r.ReadArrayStart()
			if yyl4194 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4195Slc
	var yyhl4195 bool = l >= 0
	for yyj4195 := 0; ; yyj4195++ {
		if yyhl4195 {
			if yyj4195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4195Slc = r.DecodeBytes(yys4195Slc, true, true)
		yys4195 := string(yys4195Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4195 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4198 := &x.ObjectMeta
				yyv4198.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4199 := &x.Conditions
				yym4200 := z.DecBinary()
				_ = yym4200
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4199), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4195)
		} // end switch yys4195
	} // end for yyj4195
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4201 int
	var yyb4201 bool
	var yyhl4201 bool = l >= 0
	yyj4201++
	if yyhl4201 {
		yyb4201 = yyj4201 > l
	} else {
		yyb4201 = r.CheckBreak()
	}
	if yyb4201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4201++
	if yyhl4201 {
		yyb4201 = yyj4201 > l
	} else {
		yyb4201 = r.CheckBreak()
	}
	if yyb4201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4201++
	if yyhl4201 {
		yyb4201 = yyj4201 > l
	} else {
		yyb4201 = r.CheckBreak()
	}
	if yyb4201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4204 := &x.ObjectMeta
		yyv4204.CodecDecodeSelf(d)
	}
	yyj4201++
	if yyhl4201 {
		yyb4201 = yyj4201 > l
	} else {
		yyb4201 = r.CheckBreak()
	}
	if yyb4201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4205 := &x.Conditions
		yym4206 := z.DecBinary()
		_ = yym4206
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4205), d)
		}
	}
	for {
		yyj4201++
		if yyhl4201 {
			yyb4201 = yyj4201 > l
		} else {
			yyb4201 = r.CheckBreak()
		}
		if yyb4201 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4201-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4207 := z.EncBinary()
		_ = yym4207
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4208 := !z.EncBinary()
			yy2arr4208 := z.EncBasicHandle().StructToArray
			var yyq4208 [4]bool
			_, _, _ = yysep4208, yyq4208, yy2arr4208
			const yyr4208 bool = false
			yyq4208[0] = x.Kind != ""
			yyq4208[1] = x.APIVersion != ""
			yyq4208[2] = true
			var yynn4208 int
			if yyr4208 || yy2arr4208 {
				r.EncodeArrayStart(4)
			} else {
				yynn4208 = 1
				for _, b := range yyq4208 {
					if b {
						yynn4208++
					}
				}
				r.EncodeMapStart(yynn4208)
				yynn4208 = 0
			}
			if yyr4208 || yy2arr4208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4208[0] {
					yym4210 := z.EncBinary()
					_ = yym4210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4208[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4211 := z.EncBinary()
					_ = yym4211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4208 || yy2arr4208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4208[1] {
					yym4213 := z.EncBinary()
					_ = yym4213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4208[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4214 := z.EncBinary()
					_ = yym4214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4208 || yy2arr4208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4208[2] {
					yy4216 := &x.ListMeta
					yym4217 := z.EncBinary()
					_ = yym4217
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4216) {
					} else {
						z.EncFallback(yy4216)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4208[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4218 := &x.ListMeta
					yym4219 := z.EncBinary()
					_ = yym4219
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4218) {
					} else {
						z.EncFallback(yy4218)
					}
				}
			}
			if yyr4208 || yy2arr4208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4221 := z.EncBinary()
					_ = yym4221
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4222 := z.EncBinary()
					_ = yym4222
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4208 || yy2arr4208 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4223 := z.DecBinary()
	_ = yym4223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4224 := r.ContainerType()
		if yyct4224 == codecSelferValueTypeMap1234 {
			yyl4224 := r.ReadMapStart()
			if yyl4224 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4224, d)
			}
		} else if yyct4224 == codecSelferValueTypeArray1234 {
			yyl4224 := r.ReadArrayStart()
			if yyl4224 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4225Slc
	var yyhl4225 bool = l >= 0
	for yyj4225 := 0; ; yyj4225++ {
		if yyhl4225 {
			if yyj4225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4225Slc = r.DecodeBytes(yys4225Slc, true, true)
		yys4225 := string(yys4225Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4225 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4228 := &x.ListMeta
				yym4229 := z.DecBinary()
				_ = yym4229
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4228) {
				} else {
					z.DecFallback(yyv4228, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4230 := &x.Items
				yym4231 := z.DecBinary()
				_ = yym4231
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4230), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4225)
		} // end switch yys4225
	} // end for yyj4225
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4232 int
	var yyb4232 bool
	var yyhl4232 bool = l >= 0
	yyj4232++
	if yyhl4232 {
		yyb4232 = yyj4232 > l
	} else {
		yyb4232 = r.CheckBreak()
	}
	if yyb4232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4232++
	if yyhl4232 {
		yyb4232 = yyj4232 > l
	} else {
		yyb4232 = r.CheckBreak()
	}
	if yyb4232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4232++
	if yyhl4232 {
		yyb4232 = yyj4232 > l
	} else {
		yyb4232 = r.CheckBreak()
	}
	if yyb4232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4235 := &x.ListMeta
		yym4236 := z.DecBinary()
		_ = yym4236
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4235) {
		} else {
			z.DecFallback(yyv4235, false)
		}
	}
	yyj4232++
	if yyhl4232 {
		yyb4232 = yyj4232 > l
	} else {
		yyb4232 = r.CheckBreak()
	}
	if yyb4232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4237 := &x.Items
		yym4238 := z.DecBinary()
		_ = yym4238
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4237), d)
		}
	}
	for {
		yyj4232++
		if yyhl4232 {
			yyb4232 = yyj4232 > l
		} else {
			yyb4232 = r.CheckBreak()
		}
		if yyb4232 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4232-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4239 := z.EncBinary()
		_ = yym4239
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4240 := !z.EncBinary()
			yy2arr4240 := z.EncBasicHandle().StructToArray
			var yyq4240 [1]bool
			_, _, _ = yysep4240, yyq4240, yy2arr4240
			const yyr4240 bool = false
			yyq4240[0] = len(x.Items) != 0
			var yynn4240 int
			if yyr4240 || yy2arr4240 {
				r.EncodeArrayStart(1)
			} else {
				yynn4240 = 0
				for _, b := range yyq4240 {
					if b {
						yynn4240++
					}
				}
				r.EncodeMapStart(yynn4240)
				yynn4240 = 0
			}
			if yyr4240 || yy2arr4240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4240[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4242 := z.EncBinary()
						_ = yym4242
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4240[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4243 := z.EncBinary()
						_ = yym4243
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4240 || yy2arr4240 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4244 := z.DecBinary()
	_ = yym4244
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4245 := r.ContainerType()
		if yyct4245 == codecSelferValueTypeMap1234 {
			yyl4245 := r.ReadMapStart()
			if yyl4245 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4245, d)
			}
		} else if yyct4245 == codecSelferValueTypeArray1234 {
			yyl4245 := r.ReadArrayStart()
			if yyl4245 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4245, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4246Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4246Slc
	var yyhl4246 bool = l >= 0
	for yyj4246 := 0; ; yyj4246++ {
		if yyhl4246 {
			if yyj4246 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4246Slc = r.DecodeBytes(yys4246Slc, true, true)
		yys4246 := string(yys4246Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4246 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4247 := &x.Items
				yym4248 := z.DecBinary()
				_ = yym4248
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4247), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4246)
		} // end switch yys4246
	} // end for yyj4246
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4249 int
	var yyb4249 bool
	var yyhl4249 bool = l >= 0
	yyj4249++
	if yyhl4249 {
		yyb4249 = yyj4249 > l
	} else {
		yyb4249 = r.CheckBreak()
	}
	if yyb4249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4250 := &x.Items
		yym4251 := z.DecBinary()
		_ = yym4251
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4250), d)
		}
	}
	for {
		yyj4249++
		if yyhl4249 {
			yyb4249 = yyj4249 > l
		} else {
			yyb4249 = r.CheckBreak()
		}
		if yyb4249 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4249-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4252 := z.EncBinary()
		_ = yym4252
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4253 := !z.EncBinary()
			yy2arr4253 := z.EncBasicHandle().StructToArray
			var yyq4253 [3]bool
			_, _, _ = yysep4253, yyq4253, yy2arr4253
			const yyr4253 bool = false
			yyq4253[1] = x.FieldRef != nil
			yyq4253[2] = x.ResourceFieldRef != nil
			var yynn4253 int
			if yyr4253 || yy2arr4253 {
				r.EncodeArrayStart(3)
			} else {
				yynn4253 = 1
				for _, b := range yyq4253 {
					if b {
						yynn4253++
					}
				}
				r.EncodeMapStart(yynn4253)
				yynn4253 = 0
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4255 := z.EncBinary()
				_ = yym4255
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4256 := z.EncBinary()
				_ = yym4256
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4253[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4253[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4253[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4253[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4259 := z.DecBinary()
	_ = yym4259
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4260 := r.ContainerType()
		if yyct4260 == codecSelferValueTypeMap1234 {
			yyl4260 := r.ReadMapStart()
			if yyl4260 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4260, d)
			}
		} else if yyct4260 == codecSelferValueTypeArray1234 {
			yyl4260 := r.ReadArrayStart()
			if yyl4260 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4260, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4261Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4261Slc
	var yyhl4261 bool = l >= 0
	for yyj4261 := 0; ; yyj4261++ {
		if yyhl4261 {
			if yyj4261 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4261Slc = r.DecodeBytes(yys4261Slc, true, true)
		yys4261 := string(yys4261Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4261 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4261)
		} // end switch yys4261
	} // end for yyj4261
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4265 int
	var yyb4265 bool
	var yyhl4265 bool = l >= 0
	yyj4265++
	if yyhl4265 {
		yyb4265 = yyj4265 > l
	} else {
		yyb4265 = r.CheckBreak()
	}
	if yyb4265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4265++
	if yyhl4265 {
		yyb4265 = yyj4265 > l
	} else {
		yyb4265 = r.CheckBreak()
	}
	if yyb4265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4265++
	if yyhl4265 {
		yyb4265 = yyj4265 > l
	} else {
		yyb4265 = r.CheckBreak()
	}
	if yyb4265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj4265++
		if yyhl4265 {
			yyb4265 = yyj4265 > l
		} else {
			yyb4265 = r.CheckBreak()
		}
		if yyb4265 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4265-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4269 := z.EncBinary()
		_ = yym4269
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4270 := !z.EncBinary()
			yy2arr4270 := z.EncBasicHandle().StructToArray
			var yyq4270 [6]bool
			_, _, _ = yysep4270, yyq4270, yy2arr4270
			const yyr4270 bool = false
			yyq4270[0] = x.Capabilities != nil
			yyq4270[1] = x.Privileged != nil
			yyq4270[2] = x.SELinuxOptions != nil
			yyq4270[3] = x.RunAsUser != nil
			yyq4270[4] = x.RunAsNonRoot != nil
			yyq4270[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4270 int
			if yyr4270 || yy2arr4270 {
				r.EncodeArrayStart(6)
			} else {
				yynn4270 = 0
				for _, b := range yyq4270 {
					if b {
						yynn4270++
					}
				}
				r.EncodeMapStart(yynn4270)
				yynn4270 = 0
			}
			if yyr4270 || yy2arr4270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4270[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4270[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4270 || yy2arr4270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4270[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4273 := *x.Privileged
						yym4274 := z.EncBinary()
						_ = yym4274
						if false {
						} else {
							r.EncodeBool(bool(yy4273))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4270[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4275 := *x.Privileged
						yym4276 := z.EncBinary()
						_ = yym4276
						if false {
						} else {
							r.EncodeBool(bool(yy4275))
						}
					}
				}
			}
			if yyr4270 || yy2arr4270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4270[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4270[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4270 || yy2arr4270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4270[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4279 := *x.RunAsUser
						yym4280 := z.EncBinary()
						_ = yym4280
						if false {
						} else {
							r.EncodeInt(int64(yy4279))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4270[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4281 := *x.RunAsUser
						yym4282 := z.EncBinary()
						_ = yym4282
						if false {
						} else {
							r.EncodeInt(int64(yy4281))
						}
					}
				}
			}
			if yyr4270 || yy2arr4270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4270[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4284 := *x.RunAsNonRoot
						yym4285 := z.EncBinary()
						_ = yym4285
						if false {
						} else {
							r.EncodeBool(bool(yy4284))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4270[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4286 := *x.RunAsNonRoot
						yym4287 := z.EncBinary()
						_ = yym4287
						if false {
						} else {
							r.EncodeBool(bool(yy4286))
						}
					}
				}
			}
			if yyr4270 || yy2arr4270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4270[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4289 := *x.ReadOnlyRootFilesystem
						yym4290 := z.EncBinary()
						_ = yym4290
						if false {
						} else {
							r.EncodeBool(bool(yy4289))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4270[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4291 := *x.ReadOnlyRootFilesystem
						yym4292 := z.EncBinary()
						_ = yym4292
						if false {
						} else {
							r.EncodeBool(bool(yy4291))
						}
					}
				}
			}
			if yyr4270 || yy2arr4270 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4293 := z.DecBinary()
	_ = yym4293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4294 := r.ContainerType()
		if yyct4294 == codecSelferValueTypeMap1234 {
			yyl4294 := r.ReadMapStart()
			if yyl4294 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4294, d)
			}
		} else if yyct4294 == codecSelferValueTypeArray1234 {
			yyl4294 := r.ReadArrayStart()
			if yyl4294 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4295Slc
	var yyhl4295 bool = l >= 0
	for yyj4295 := 0; ; yyj4295++ {
		if yyhl4295 {
			if yyj4295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4295Slc = r.DecodeBytes(yys4295Slc, true, true)
		yys4295 := string(yys4295Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4295 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4298 := z.DecBinary()
				_ = yym4298
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4301 := z.DecBinary()
				_ = yym4301
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4303 := z.DecBinary()
				_ = yym4303
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4305 := z.DecBinary()
				_ = yym4305
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4295)
		} // end switch yys4295
	} // end for yyj4295
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4306 int
	var yyb4306 bool
	var yyhl4306 bool = l >= 0
	yyj4306++
	if yyhl4306 {
		yyb4306 = yyj4306 > l
	} else {
		yyb4306 = r.CheckBreak()
	}
	if yyb4306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4306++
	if yyhl4306 {
		yyb4306 = yyj4306 > l
	} else {
		yyb4306 = r.CheckBreak()
	}
	if yyb4306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4309 := z.DecBinary()
		_ = yym4309
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4306++
	if yyhl4306 {
		yyb4306 = yyj4306 > l
	} else {
		yyb4306 = r.CheckBreak()
	}
	if yyb4306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4306++
	if yyhl4306 {
		yyb4306 = yyj4306 > l
	} else {
		yyb4306 = r.CheckBreak()
	}
	if yyb4306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4312 := z.DecBinary()
		_ = yym4312
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4306++
	if yyhl4306 {
		yyb4306 = yyj4306 > l
	} else {
		yyb4306 = r.CheckBreak()
	}
	if yyb4306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4314 := z.DecBinary()
		_ = yym4314
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4306++
	if yyhl4306 {
		yyb4306 = yyj4306 > l
	} else {
		yyb4306 = r.CheckBreak()
	}
	if yyb4306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4316 := z.DecBinary()
		_ = yym4316
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4306++
		if yyhl4306 {
			yyb4306 = yyj4306 > l
		} else {
			yyb4306 = r.CheckBreak()
		}
		if yyb4306 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4306-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4317 := z.EncBinary()
		_ = yym4317
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4318 := !z.EncBinary()
			yy2arr4318 := z.EncBasicHandle().StructToArray
			var yyq4318 [4]bool
			_, _, _ = yysep4318, yyq4318, yy2arr4318
			const yyr4318 bool = false
			yyq4318[0] = x.User != ""
			yyq4318[1] = x.Role != ""
			yyq4318[2] = x.Type != ""
			yyq4318[3] = x.Level != ""
			var yynn4318 int
			if yyr4318 || yy2arr4318 {
				r.EncodeArrayStart(4)
			} else {
				yynn4318 = 0
				for _, b := range yyq4318 {
					if b {
						yynn4318++
					}
				}
				r.EncodeMapStart(yynn4318)
				yynn4318 = 0
			}
			if yyr4318 || yy2arr4318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4318[0] {
					yym4320 := z.EncBinary()
					_ = yym4320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4318[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4321 := z.EncBinary()
					_ = yym4321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4318 || yy2arr4318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4318[1] {
					yym4323 := z.EncBinary()
					_ = yym4323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4318[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4324 := z.EncBinary()
					_ = yym4324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4318 || yy2arr4318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4318[2] {
					yym4326 := z.EncBinary()
					_ = yym4326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4318[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4327 := z.EncBinary()
					_ = yym4327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4318 || yy2arr4318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4318[3] {
					yym4329 := z.EncBinary()
					_ = yym4329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4318[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4330 := z.EncBinary()
					_ = yym4330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4318 || yy2arr4318 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4331 := z.DecBinary()
	_ = yym4331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4332 := r.ContainerType()
		if yyct4332 == codecSelferValueTypeMap1234 {
			yyl4332 := r.ReadMapStart()
			if yyl4332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4332, d)
			}
		} else if yyct4332 == codecSelferValueTypeArray1234 {
			yyl4332 := r.ReadArrayStart()
			if yyl4332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4333Slc
	var yyhl4333 bool = l >= 0
	for yyj4333 := 0; ; yyj4333++ {
		if yyhl4333 {
			if yyj4333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4333Slc = r.DecodeBytes(yys4333Slc, true, true)
		yys4333 := string(yys4333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4333 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4333)
		} // end switch yys4333
	} // end for yyj4333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4338 int
	var yyb4338 bool
	var yyhl4338 bool = l >= 0
	yyj4338++
	if yyhl4338 {
		yyb4338 = yyj4338 > l
	} else {
		yyb4338 = r.CheckBreak()
	}
	if yyb4338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4338++
	if yyhl4338 {
		yyb4338 = yyj4338 > l
	} else {
		yyb4338 = r.CheckBreak()
	}
	if yyb4338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4338++
	if yyhl4338 {
		yyb4338 = yyj4338 > l
	} else {
		yyb4338 = r.CheckBreak()
	}
	if yyb4338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4338++
	if yyhl4338 {
		yyb4338 = yyj4338 > l
	} else {
		yyb4338 = r.CheckBreak()
	}
	if yyb4338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4338++
		if yyhl4338 {
			yyb4338 = yyj4338 > l
		} else {
			yyb4338 = r.CheckBreak()
		}
		if yyb4338 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4338-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4343 := z.EncBinary()
		_ = yym4343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4344 := !z.EncBinary()
			yy2arr4344 := z.EncBasicHandle().StructToArray
			var yyq4344 [5]bool
			_, _, _ = yysep4344, yyq4344, yy2arr4344
			const yyr4344 bool = false
			yyq4344[0] = x.Kind != ""
			yyq4344[1] = x.APIVersion != ""
			yyq4344[2] = true
			var yynn4344 int
			if yyr4344 || yy2arr4344 {
				r.EncodeArrayStart(5)
			} else {
				yynn4344 = 2
				for _, b := range yyq4344 {
					if b {
						yynn4344++
					}
				}
				r.EncodeMapStart(yynn4344)
				yynn4344 = 0
			}
			if yyr4344 || yy2arr4344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4344[0] {
					yym4346 := z.EncBinary()
					_ = yym4346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4344[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4347 := z.EncBinary()
					_ = yym4347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4344 || yy2arr4344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4344[1] {
					yym4349 := z.EncBinary()
					_ = yym4349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4344[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4350 := z.EncBinary()
					_ = yym4350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4344 || yy2arr4344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4344[2] {
					yy4352 := &x.ObjectMeta
					yy4352.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4344[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4353 := &x.ObjectMeta
					yy4353.CodecEncodeSelf(e)
				}
			}
			if yyr4344 || yy2arr4344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4355 := z.EncBinary()
				_ = yym4355
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4356 := z.EncBinary()
				_ = yym4356
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4344 || yy2arr4344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4358 := z.EncBinary()
					_ = yym4358
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4359 := z.EncBinary()
					_ = yym4359
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4344 || yy2arr4344 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4360 := z.DecBinary()
	_ = yym4360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4361 := r.ContainerType()
		if yyct4361 == codecSelferValueTypeMap1234 {
			yyl4361 := r.ReadMapStart()
			if yyl4361 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4361, d)
			}
		} else if yyct4361 == codecSelferValueTypeArray1234 {
			yyl4361 := r.ReadArrayStart()
			if yyl4361 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4361, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4362Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4362Slc
	var yyhl4362 bool = l >= 0
	for yyj4362 := 0; ; yyj4362++ {
		if yyhl4362 {
			if yyj4362 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4362Slc = r.DecodeBytes(yys4362Slc, true, true)
		yys4362 := string(yys4362Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4362 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4365 := &x.ObjectMeta
				yyv4365.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4367 := &x.Data
				yym4368 := z.DecBinary()
				_ = yym4368
				if false {
				} else {
					*yyv4367 = r.DecodeBytes(*(*[]byte)(yyv4367), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4362)
		} // end switch yys4362
	} // end for yyj4362
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4369 int
	var yyb4369 bool
	var yyhl4369 bool = l >= 0
	yyj4369++
	if yyhl4369 {
		yyb4369 = yyj4369 > l
	} else {
		yyb4369 = r.CheckBreak()
	}
	if yyb4369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4369++
	if yyhl4369 {
		yyb4369 = yyj4369 > l
	} else {
		yyb4369 = r.CheckBreak()
	}
	if yyb4369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4369++
	if yyhl4369 {
		yyb4369 = yyj4369 > l
	} else {
		yyb4369 = r.CheckBreak()
	}
	if yyb4369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4372 := &x.ObjectMeta
		yyv4372.CodecDecodeSelf(d)
	}
	yyj4369++
	if yyhl4369 {
		yyb4369 = yyj4369 > l
	} else {
		yyb4369 = r.CheckBreak()
	}
	if yyb4369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4369++
	if yyhl4369 {
		yyb4369 = yyj4369 > l
	} else {
		yyb4369 = r.CheckBreak()
	}
	if yyb4369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4374 := &x.Data
		yym4375 := z.DecBinary()
		_ = yym4375
		if false {
		} else {
			*yyv4374 = r.DecodeBytes(*(*[]byte)(yyv4374), false, false)
		}
	}
	for {
		yyj4369++
		if yyhl4369 {
			yyb4369 = yyj4369 > l
		} else {
			yyb4369 = r.CheckBreak()
		}
		if yyb4369 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4369-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4376 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4377 := &yyv4376
		yy4377.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4378 := *v
	yyh4378, yyl4378 := z.DecSliceHelperStart()
	var yyc4378 bool
	if yyl4378 == 0 {
		if yyv4378 == nil {
			yyv4378 = []OwnerReference{}
			yyc4378 = true
		} else if len(yyv4378) != 0 {
			yyv4378 = yyv4378[:0]
			yyc4378 = true
		}
	} else if yyl4378 > 0 {
		var yyrr4378, yyrl4378 int
		var yyrt4378 bool
		if yyl4378 > cap(yyv4378) {

			yyrg4378 := len(yyv4378) > 0
			yyv24378 := yyv4378
			yyrl4378, yyrt4378 = z.DecInferLen(yyl4378, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4378 {
				if yyrl4378 <= cap(yyv4378) {
					yyv4378 = yyv4378[:yyrl4378]
				} else {
					yyv4378 = make([]OwnerReference, yyrl4378)
				}
			} else {
				yyv4378 = make([]OwnerReference, yyrl4378)
			}
			yyc4378 = true
			yyrr4378 = len(yyv4378)
			if yyrg4378 {
				copy(yyv4378, yyv24378)
			}
		} else if yyl4378 != len(yyv4378) {
			yyv4378 = yyv4378[:yyl4378]
			yyc4378 = true
		}
		yyj4378 := 0
		for ; yyj4378 < yyrr4378; yyj4378++ {
			yyh4378.ElemContainerState(yyj4378)
			if r.TryDecodeAsNil() {
				yyv4378[yyj4378] = OwnerReference{}
			} else {
				yyv4379 := &yyv4378[yyj4378]
				yyv4379.CodecDecodeSelf(d)
			}

		}
		if yyrt4378 {
			for ; yyj4378 < yyl4378; yyj4378++ {
				yyv4378 = append(yyv4378, OwnerReference{})
				yyh4378.ElemContainerState(yyj4378)
				if r.TryDecodeAsNil() {
					yyv4378[yyj4378] = OwnerReference{}
				} else {
					yyv4380 := &yyv4378[yyj4378]
					yyv4380.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4378 := 0
		for ; !r.CheckBreak(); yyj4378++ {

			if yyj4378 >= len(yyv4378) {
				yyv4378 = append(yyv4378, OwnerReference{}) // var yyz4378 OwnerReference
				yyc4378 = true
			}
			yyh4378.ElemContainerState(yyj4378)
			if yyj4378 < len(yyv4378) {
				if r.TryDecodeAsNil() {
					yyv4378[yyj4378] = OwnerReference{}
				} else {
					yyv4381 := &yyv4378[yyj4378]
					yyv4381.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4378 < len(yyv4378) {
			yyv4378 = yyv4378[:yyj4378]
			yyc4378 = true
		} else if yyj4378 == 0 && yyv4378 == nil {
			yyv4378 = []OwnerReference{}
			yyc4378 = true
		}
	}
	yyh4378.End()
	if yyc4378 {
		*v = yyv4378
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4382 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4382.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4383 := *v
	yyh4383, yyl4383 := z.DecSliceHelperStart()
	var yyc4383 bool
	if yyl4383 == 0 {
		if yyv4383 == nil {
			yyv4383 = []PersistentVolumeAccessMode{}
			yyc4383 = true
		} else if len(yyv4383) != 0 {
			yyv4383 = yyv4383[:0]
			yyc4383 = true
		}
	} else if yyl4383 > 0 {
		var yyrr4383, yyrl4383 int
		var yyrt4383 bool
		if yyl4383 > cap(yyv4383) {

			yyrl4383, yyrt4383 = z.DecInferLen(yyl4383, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4383 {
				if yyrl4383 <= cap(yyv4383) {
					yyv4383 = yyv4383[:yyrl4383]
				} else {
					yyv4383 = make([]PersistentVolumeAccessMode, yyrl4383)
				}
			} else {
				yyv4383 = make([]PersistentVolumeAccessMode, yyrl4383)
			}
			yyc4383 = true
			yyrr4383 = len(yyv4383)
		} else if yyl4383 != len(yyv4383) {
			yyv4383 = yyv4383[:yyl4383]
			yyc4383 = true
		}
		yyj4383 := 0
		for ; yyj4383 < yyrr4383; yyj4383++ {
			yyh4383.ElemContainerState(yyj4383)
			if r.TryDecodeAsNil() {
				yyv4383[yyj4383] = ""
			} else {
				yyv4383[yyj4383] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4383 {
			for ; yyj4383 < yyl4383; yyj4383++ {
				yyv4383 = append(yyv4383, "")
				yyh4383.ElemContainerState(yyj4383)
				if r.TryDecodeAsNil() {
					yyv4383[yyj4383] = ""
				} else {
					yyv4383[yyj4383] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4383 := 0
		for ; !r.CheckBreak(); yyj4383++ {

			if yyj4383 >= len(yyv4383) {
				yyv4383 = append(yyv4383, "") // var yyz4383 PersistentVolumeAccessMode
				yyc4383 = true
			}
			yyh4383.ElemContainerState(yyj4383)
			if yyj4383 < len(yyv4383) {
				if r.TryDecodeAsNil() {
					yyv4383[yyj4383] = ""
				} else {
					yyv4383[yyj4383] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4383 < len(yyv4383) {
			yyv4383 = yyv4383[:yyj4383]
			yyc4383 = true
		} else if yyj4383 == 0 && yyv4383 == nil {
			yyv4383 = []PersistentVolumeAccessMode{}
			yyc4383 = true
		}
	}
	yyh4383.End()
	if yyc4383 {
		*v = yyv4383
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4387 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4388 := &yyv4387
		yy4388.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4389 := *v
	yyh4389, yyl4389 := z.DecSliceHelperStart()
	var yyc4389 bool
	if yyl4389 == 0 {
		if yyv4389 == nil {
			yyv4389 = []PersistentVolume{}
			yyc4389 = true
		} else if len(yyv4389) != 0 {
			yyv4389 = yyv4389[:0]
			yyc4389 = true
		}
	} else if yyl4389 > 0 {
		var yyrr4389, yyrl4389 int
		var yyrt4389 bool
		if yyl4389 > cap(yyv4389) {

			yyrg4389 := len(yyv4389) > 0
			yyv24389 := yyv4389
			yyrl4389, yyrt4389 = z.DecInferLen(yyl4389, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt4389 {
				if yyrl4389 <= cap(yyv4389) {
					yyv4389 = yyv4389[:yyrl4389]
				} else {
					yyv4389 = make([]PersistentVolume, yyrl4389)
				}
			} else {
				yyv4389 = make([]PersistentVolume, yyrl4389)
			}
			yyc4389 = true
			yyrr4389 = len(yyv4389)
			if yyrg4389 {
				copy(yyv4389, yyv24389)
			}
		} else if yyl4389 != len(yyv4389) {
			yyv4389 = yyv4389[:yyl4389]
			yyc4389 = true
		}
		yyj4389 := 0
		for ; yyj4389 < yyrr4389; yyj4389++ {
			yyh4389.ElemContainerState(yyj4389)
			if r.TryDecodeAsNil() {
				yyv4389[yyj4389] = PersistentVolume{}
			} else {
				yyv4390 := &yyv4389[yyj4389]
				yyv4390.CodecDecodeSelf(d)
			}

		}
		if yyrt4389 {
			for ; yyj4389 < yyl4389; yyj4389++ {
				yyv4389 = append(yyv4389, PersistentVolume{})
				yyh4389.ElemContainerState(yyj4389)
				if r.TryDecodeAsNil() {
					yyv4389[yyj4389] = PersistentVolume{}
				} else {
					yyv4391 := &yyv4389[yyj4389]
					yyv4391.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4389 := 0
		for ; !r.CheckBreak(); yyj4389++ {

			if yyj4389 >= len(yyv4389) {
				yyv4389 = append(yyv4389, PersistentVolume{}) // var yyz4389 PersistentVolume
				yyc4389 = true
			}
			yyh4389.ElemContainerState(yyj4389)
			if yyj4389 < len(yyv4389) {
				if r.TryDecodeAsNil() {
					yyv4389[yyj4389] = PersistentVolume{}
				} else {
					yyv4392 := &yyv4389[yyj4389]
					yyv4392.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4389 < len(yyv4389) {
			yyv4389 = yyv4389[:yyj4389]
			yyc4389 = true
		} else if yyj4389 == 0 && yyv4389 == nil {
			yyv4389 = []PersistentVolume{}
			yyc4389 = true
		}
	}
	yyh4389.End()
	if yyc4389 {
		*v = yyv4389
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4393 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4394 := &yyv4393
		yy4394.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4395 := *v
	yyh4395, yyl4395 := z.DecSliceHelperStart()
	var yyc4395 bool
	if yyl4395 == 0 {
		if yyv4395 == nil {
			yyv4395 = []PersistentVolumeClaim{}
			yyc4395 = true
		} else if len(yyv4395) != 0 {
			yyv4395 = yyv4395[:0]
			yyc4395 = true
		}
	} else if yyl4395 > 0 {
		var yyrr4395, yyrl4395 int
		var yyrt4395 bool
		if yyl4395 > cap(yyv4395) {

			yyrg4395 := len(yyv4395) > 0
			yyv24395 := yyv4395
			yyrl4395, yyrt4395 = z.DecInferLen(yyl4395, z.DecBasicHandle().MaxInitLen, 360)
			if yyrt4395 {
				if yyrl4395 <= cap(yyv4395) {
					yyv4395 = yyv4395[:yyrl4395]
				} else {
					yyv4395 = make([]PersistentVolumeClaim, yyrl4395)
				}
			} else {
				yyv4395 = make([]PersistentVolumeClaim, yyrl4395)
			}
			yyc4395 = true
			yyrr4395 = len(yyv4395)
			if yyrg4395 {
				copy(yyv4395, yyv24395)
			}
		} else if yyl4395 != len(yyv4395) {
			yyv4395 = yyv4395[:yyl4395]
			yyc4395 = true
		}
		yyj4395 := 0
		for ; yyj4395 < yyrr4395; yyj4395++ {
			yyh4395.ElemContainerState(yyj4395)
			if r.TryDecodeAsNil() {
				yyv4395[yyj4395] = PersistentVolumeClaim{}
			} else {
				yyv4396 := &yyv4395[yyj4395]
				yyv4396.CodecDecodeSelf(d)
			}

		}
		if yyrt4395 {
			for ; yyj4395 < yyl4395; yyj4395++ {
				yyv4395 = append(yyv4395, PersistentVolumeClaim{})
				yyh4395.ElemContainerState(yyj4395)
				if r.TryDecodeAsNil() {
					yyv4395[yyj4395] = PersistentVolumeClaim{}
				} else {
					yyv4397 := &yyv4395[yyj4395]
					yyv4397.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4395 := 0
		for ; !r.CheckBreak(); yyj4395++ {

			if yyj4395 >= len(yyv4395) {
				yyv4395 = append(yyv4395, PersistentVolumeClaim{}) // var yyz4395 PersistentVolumeClaim
				yyc4395 = true
			}
			yyh4395.ElemContainerState(yyj4395)
			if yyj4395 < len(yyv4395) {
				if r.TryDecodeAsNil() {
					yyv4395[yyj4395] = PersistentVolumeClaim{}
				} else {
					yyv4398 := &yyv4395[yyj4395]
					yyv4398.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4395 < len(yyv4395) {
			yyv4395 = yyv4395[:yyj4395]
			yyc4395 = true
		} else if yyj4395 == 0 && yyv4395 == nil {
			yyv4395 = []PersistentVolumeClaim{}
			yyc4395 = true
		}
	}
	yyh4395.End()
	if yyc4395 {
		*v = yyv4395
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4399 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4400 := &yyv4399
		yy4400.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4401 := *v
	yyh4401, yyl4401 := z.DecSliceHelperStart()
	var yyc4401 bool
	if yyl4401 == 0 {
		if yyv4401 == nil {
			yyv4401 = []KeyToPath{}
			yyc4401 = true
		} else if len(yyv4401) != 0 {
			yyv4401 = yyv4401[:0]
			yyc4401 = true
		}
	} else if yyl4401 > 0 {
		var yyrr4401, yyrl4401 int
		var yyrt4401 bool
		if yyl4401 > cap(yyv4401) {

			yyrg4401 := len(yyv4401) > 0
			yyv24401 := yyv4401
			yyrl4401, yyrt4401 = z.DecInferLen(yyl4401, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4401 {
				if yyrl4401 <= cap(yyv4401) {
					yyv4401 = yyv4401[:yyrl4401]
				} else {
					yyv4401 = make([]KeyToPath, yyrl4401)
				}
			} else {
				yyv4401 = make([]KeyToPath, yyrl4401)
			}
			yyc4401 = true
			yyrr4401 = len(yyv4401)
			if yyrg4401 {
				copy(yyv4401, yyv24401)
			}
		} else if yyl4401 != len(yyv4401) {
			yyv4401 = yyv4401[:yyl4401]
			yyc4401 = true
		}
		yyj4401 := 0
		for ; yyj4401 < yyrr4401; yyj4401++ {
			yyh4401.ElemContainerState(yyj4401)
			if r.TryDecodeAsNil() {
				yyv4401[yyj4401] = KeyToPath{}
			} else {
				yyv4402 := &yyv4401[yyj4401]
				yyv4402.CodecDecodeSelf(d)
			}

		}
		if yyrt4401 {
			for ; yyj4401 < yyl4401; yyj4401++ {
				yyv4401 = append(yyv4401, KeyToPath{})
				yyh4401.ElemContainerState(yyj4401)
				if r.TryDecodeAsNil() {
					yyv4401[yyj4401] = KeyToPath{}
				} else {
					yyv4403 := &yyv4401[yyj4401]
					yyv4403.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4401 := 0
		for ; !r.CheckBreak(); yyj4401++ {

			if yyj4401 >= len(yyv4401) {
				yyv4401 = append(yyv4401, KeyToPath{}) // var yyz4401 KeyToPath
				yyc4401 = true
			}
			yyh4401.ElemContainerState(yyj4401)
			if yyj4401 < len(yyv4401) {
				if r.TryDecodeAsNil() {
					yyv4401[yyj4401] = KeyToPath{}
				} else {
					yyv4404 := &yyv4401[yyj4401]
					yyv4404.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4401 < len(yyv4401) {
			yyv4401 = yyv4401[:yyj4401]
			yyc4401 = true
		} else if yyj4401 == 0 && yyv4401 == nil {
			yyv4401 = []KeyToPath{}
			yyc4401 = true
		}
	}
	yyh4401.End()
	if yyc4401 {
		*v = yyv4401
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4405 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4406 := &yyv4405
		yy4406.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4407 := *v
	yyh4407, yyl4407 := z.DecSliceHelperStart()
	var yyc4407 bool
	if yyl4407 == 0 {
		if yyv4407 == nil {
			yyv4407 = []HTTPHeader{}
			yyc4407 = true
		} else if len(yyv4407) != 0 {
			yyv4407 = yyv4407[:0]
			yyc4407 = true
		}
	} else if yyl4407 > 0 {
		var yyrr4407, yyrl4407 int
		var yyrt4407 bool
		if yyl4407 > cap(yyv4407) {

			yyrg4407 := len(yyv4407) > 0
			yyv24407 := yyv4407
			yyrl4407, yyrt4407 = z.DecInferLen(yyl4407, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4407 {
				if yyrl4407 <= cap(yyv4407) {
					yyv4407 = yyv4407[:yyrl4407]
				} else {
					yyv4407 = make([]HTTPHeader, yyrl4407)
				}
			} else {
				yyv4407 = make([]HTTPHeader, yyrl4407)
			}
			yyc4407 = true
			yyrr4407 = len(yyv4407)
			if yyrg4407 {
				copy(yyv4407, yyv24407)
			}
		} else if yyl4407 != len(yyv4407) {
			yyv4407 = yyv4407[:yyl4407]
			yyc4407 = true
		}
		yyj4407 := 0
		for ; yyj4407 < yyrr4407; yyj4407++ {
			yyh4407.ElemContainerState(yyj4407)
			if r.TryDecodeAsNil() {
				yyv4407[yyj4407] = HTTPHeader{}
			} else {
				yyv4408 := &yyv4407[yyj4407]
				yyv4408.CodecDecodeSelf(d)
			}

		}
		if yyrt4407 {
			for ; yyj4407 < yyl4407; yyj4407++ {
				yyv4407 = append(yyv4407, HTTPHeader{})
				yyh4407.ElemContainerState(yyj4407)
				if r.TryDecodeAsNil() {
					yyv4407[yyj4407] = HTTPHeader{}
				} else {
					yyv4409 := &yyv4407[yyj4407]
					yyv4409.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4407 := 0
		for ; !r.CheckBreak(); yyj4407++ {

			if yyj4407 >= len(yyv4407) {
				yyv4407 = append(yyv4407, HTTPHeader{}) // var yyz4407 HTTPHeader
				yyc4407 = true
			}
			yyh4407.ElemContainerState(yyj4407)
			if yyj4407 < len(yyv4407) {
				if r.TryDecodeAsNil() {
					yyv4407[yyj4407] = HTTPHeader{}
				} else {
					yyv4410 := &yyv4407[yyj4407]
					yyv4410.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4407 < len(yyv4407) {
			yyv4407 = yyv4407[:yyj4407]
			yyc4407 = true
		} else if yyj4407 == 0 && yyv4407 == nil {
			yyv4407 = []HTTPHeader{}
			yyc4407 = true
		}
	}
	yyh4407.End()
	if yyc4407 {
		*v = yyv4407
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4411 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4411.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4412 := *v
	yyh4412, yyl4412 := z.DecSliceHelperStart()
	var yyc4412 bool
	if yyl4412 == 0 {
		if yyv4412 == nil {
			yyv4412 = []Capability{}
			yyc4412 = true
		} else if len(yyv4412) != 0 {
			yyv4412 = yyv4412[:0]
			yyc4412 = true
		}
	} else if yyl4412 > 0 {
		var yyrr4412, yyrl4412 int
		var yyrt4412 bool
		if yyl4412 > cap(yyv4412) {

			yyrl4412, yyrt4412 = z.DecInferLen(yyl4412, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4412 {
				if yyrl4412 <= cap(yyv4412) {
					yyv4412 = yyv4412[:yyrl4412]
				} else {
					yyv4412 = make([]Capability, yyrl4412)
				}
			} else {
				yyv4412 = make([]Capability, yyrl4412)
			}
			yyc4412 = true
			yyrr4412 = len(yyv4412)
		} else if yyl4412 != len(yyv4412) {
			yyv4412 = yyv4412[:yyl4412]
			yyc4412 = true
		}
		yyj4412 := 0
		for ; yyj4412 < yyrr4412; yyj4412++ {
			yyh4412.ElemContainerState(yyj4412)
			if r.TryDecodeAsNil() {
				yyv4412[yyj4412] = ""
			} else {
				yyv4412[yyj4412] = Capability(r.DecodeString())
			}

		}
		if yyrt4412 {
			for ; yyj4412 < yyl4412; yyj4412++ {
				yyv4412 = append(yyv4412, "")
				yyh4412.ElemContainerState(yyj4412)
				if r.TryDecodeAsNil() {
					yyv4412[yyj4412] = ""
				} else {
					yyv4412[yyj4412] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4412 := 0
		for ; !r.CheckBreak(); yyj4412++ {

			if yyj4412 >= len(yyv4412) {
				yyv4412 = append(yyv4412, "") // var yyz4412 Capability
				yyc4412 = true
			}
			yyh4412.ElemContainerState(yyj4412)
			if yyj4412 < len(yyv4412) {
				if r.TryDecodeAsNil() {
					yyv4412[yyj4412] = ""
				} else {
					yyv4412[yyj4412] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4412 < len(yyv4412) {
			yyv4412 = yyv4412[:yyj4412]
			yyc4412 = true
		} else if yyj4412 == 0 && yyv4412 == nil {
			yyv4412 = []Capability{}
			yyc4412 = true
		}
	}
	yyh4412.End()
	if yyc4412 {
		*v = yyv4412
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4416 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4417 := &yyv4416
		yy4417.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4418 := *v
	yyh4418, yyl4418 := z.DecSliceHelperStart()
	var yyc4418 bool
	if yyl4418 == 0 {
		if yyv4418 == nil {
			yyv4418 = []ContainerPort{}
			yyc4418 = true
		} else if len(yyv4418) != 0 {
			yyv4418 = yyv4418[:0]
			yyc4418 = true
		}
	} else if yyl4418 > 0 {
		var yyrr4418, yyrl4418 int
		var yyrt4418 bool
		if yyl4418 > cap(yyv4418) {

			yyrg4418 := len(yyv4418) > 0
			yyv24418 := yyv4418
			yyrl4418, yyrt4418 = z.DecInferLen(yyl4418, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4418 {
				if yyrl4418 <= cap(yyv4418) {
					yyv4418 = yyv4418[:yyrl4418]
				} else {
					yyv4418 = make([]ContainerPort, yyrl4418)
				}
			} else {
				yyv4418 = make([]ContainerPort, yyrl4418)
			}
			yyc4418 = true
			yyrr4418 = len(yyv4418)
			if yyrg4418 {
				copy(yyv4418, yyv24418)
			}
		} else if yyl4418 != len(yyv4418) {
			yyv4418 = yyv4418[:yyl4418]
			yyc4418 = true
		}
		yyj4418 := 0
		for ; yyj4418 < yyrr4418; yyj4418++ {
			yyh4418.ElemContainerState(yyj4418)
			if r.TryDecodeAsNil() {
				yyv4418[yyj4418] = ContainerPort{}
			} else {
				yyv4419 := &yyv4418[yyj4418]
				yyv4419.CodecDecodeSelf(d)
			}

		}
		if yyrt4418 {
			for ; yyj4418 < yyl4418; yyj4418++ {
				yyv4418 = append(yyv4418, ContainerPort{})
				yyh4418.ElemContainerState(yyj4418)
				if r.TryDecodeAsNil() {
					yyv4418[yyj4418] = ContainerPort{}
				} else {
					yyv4420 := &yyv4418[yyj4418]
					yyv4420.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4418 := 0
		for ; !r.CheckBreak(); yyj4418++ {

			if yyj4418 >= len(yyv4418) {
				yyv4418 = append(yyv4418, ContainerPort{}) // var yyz4418 ContainerPort
				yyc4418 = true
			}
			yyh4418.ElemContainerState(yyj4418)
			if yyj4418 < len(yyv4418) {
				if r.TryDecodeAsNil() {
					yyv4418[yyj4418] = ContainerPort{}
				} else {
					yyv4421 := &yyv4418[yyj4418]
					yyv4421.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4418 < len(yyv4418) {
			yyv4418 = yyv4418[:yyj4418]
			yyc4418 = true
		} else if yyj4418 == 0 && yyv4418 == nil {
			yyv4418 = []ContainerPort{}
			yyc4418 = true
		}
	}
	yyh4418.End()
	if yyc4418 {
		*v = yyv4418
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4422 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4423 := &yyv4422
		yy4423.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4424 := *v
	yyh4424, yyl4424 := z.DecSliceHelperStart()
	var yyc4424 bool
	if yyl4424 == 0 {
		if yyv4424 == nil {
			yyv4424 = []EnvVar{}
			yyc4424 = true
		} else if len(yyv4424) != 0 {
			yyv4424 = yyv4424[:0]
			yyc4424 = true
		}
	} else if yyl4424 > 0 {
		var yyrr4424, yyrl4424 int
		var yyrt4424 bool
		if yyl4424 > cap(yyv4424) {

			yyrg4424 := len(yyv4424) > 0
			yyv24424 := yyv4424
			yyrl4424, yyrt4424 = z.DecInferLen(yyl4424, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4424 {
				if yyrl4424 <= cap(yyv4424) {
					yyv4424 = yyv4424[:yyrl4424]
				} else {
					yyv4424 = make([]EnvVar, yyrl4424)
				}
			} else {
				yyv4424 = make([]EnvVar, yyrl4424)
			}
			yyc4424 = true
			yyrr4424 = len(yyv4424)
			if yyrg4424 {
				copy(yyv4424, yyv24424)
			}
		} else if yyl4424 != len(yyv4424) {
			yyv4424 = yyv4424[:yyl4424]
			yyc4424 = true
		}
		yyj4424 := 0
		for ; yyj4424 < yyrr4424; yyj4424++ {
			yyh4424.ElemContainerState(yyj4424)
			if r.TryDecodeAsNil() {
				yyv4424[yyj4424] = EnvVar{}
			} else {
				yyv4425 := &yyv4424[yyj4424]
				yyv4425.CodecDecodeSelf(d)
			}

		}
		if yyrt4424 {
			for ; yyj4424 < yyl4424; yyj4424++ {
				yyv4424 = append(yyv4424, EnvVar{})
				yyh4424.ElemContainerState(yyj4424)
				if r.TryDecodeAsNil() {
					yyv4424[yyj4424] = EnvVar{}
				} else {
					yyv4426 := &yyv4424[yyj4424]
					yyv4426.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4424 := 0
		for ; !r.CheckBreak(); yyj4424++ {

			if yyj4424 >= len(yyv4424) {
				yyv4424 = append(yyv4424, EnvVar{}) // var yyz4424 EnvVar
				yyc4424 = true
			}
			yyh4424.ElemContainerState(yyj4424)
			if yyj4424 < len(yyv4424) {
				if r.TryDecodeAsNil() {
					yyv4424[yyj4424] = EnvVar{}
				} else {
					yyv4427 := &yyv4424[yyj4424]
					yyv4427.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4424 < len(yyv4424) {
			yyv4424 = yyv4424[:yyj4424]
			yyc4424 = true
		} else if yyj4424 == 0 && yyv4424 == nil {
			yyv4424 = []EnvVar{}
			yyc4424 = true
		}
	}
	yyh4424.End()
	if yyc4424 {
		*v = yyv4424
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4428 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4429 := &yyv4428
		yy4429.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4430 := *v
	yyh4430, yyl4430 := z.DecSliceHelperStart()
	var yyc4430 bool
	if yyl4430 == 0 {
		if yyv4430 == nil {
			yyv4430 = []VolumeMount{}
			yyc4430 = true
		} else if len(yyv4430) != 0 {
			yyv4430 = yyv4430[:0]
			yyc4430 = true
		}
	} else if yyl4430 > 0 {
		var yyrr4430, yyrl4430 int
		var yyrt4430 bool
		if yyl4430 > cap(yyv4430) {

			yyrg4430 := len(yyv4430) > 0
			yyv24430 := yyv4430
			yyrl4430, yyrt4430 = z.DecInferLen(yyl4430, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4430 {
				if yyrl4430 <= cap(yyv4430) {
					yyv4430 = yyv4430[:yyrl4430]
				} else {
					yyv4430 = make([]VolumeMount, yyrl4430)
				}
			} else {
				yyv4430 = make([]VolumeMount, yyrl4430)
			}
			yyc4430 = true
			yyrr4430 = len(yyv4430)
			if yyrg4430 {
				copy(yyv4430, yyv24430)
			}
		} else if yyl4430 != len(yyv4430) {
			yyv4430 = yyv4430[:yyl4430]
			yyc4430 = true
		}
		yyj4430 := 0
		for ; yyj4430 < yyrr4430; yyj4430++ {
			yyh4430.ElemContainerState(yyj4430)
			if r.TryDecodeAsNil() {
				yyv4430[yyj4430] = VolumeMount{}
			} else {
				yyv4431 := &yyv4430[yyj4430]
				yyv4431.CodecDecodeSelf(d)
			}

		}
		if yyrt4430 {
			for ; yyj4430 < yyl4430; yyj4430++ {
				yyv4430 = append(yyv4430, VolumeMount{})
				yyh4430.ElemContainerState(yyj4430)
				if r.TryDecodeAsNil() {
					yyv4430[yyj4430] = VolumeMount{}
				} else {
					yyv4432 := &yyv4430[yyj4430]
					yyv4432.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4430 := 0
		for ; !r.CheckBreak(); yyj4430++ {

			if yyj4430 >= len(yyv4430) {
				yyv4430 = append(yyv4430, VolumeMount{}) // var yyz4430 VolumeMount
				yyc4430 = true
			}
			yyh4430.ElemContainerState(yyj4430)
			if yyj4430 < len(yyv4430) {
				if r.TryDecodeAsNil() {
					yyv4430[yyj4430] = VolumeMount{}
				} else {
					yyv4433 := &yyv4430[yyj4430]
					yyv4433.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4430 < len(yyv4430) {
			yyv4430 = yyv4430[:yyj4430]
			yyc4430 = true
		} else if yyj4430 == 0 && yyv4430 == nil {
			yyv4430 = []VolumeMount{}
			yyc4430 = true
		}
	}
	yyh4430.End()
	if yyc4430 {
		*v = yyv4430
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4434 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4435 := &yyv4434
		yy4435.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4436 := *v
	yyh4436, yyl4436 := z.DecSliceHelperStart()
	var yyc4436 bool
	if yyl4436 == 0 {
		if yyv4436 == nil {
			yyv4436 = []NodeSelectorTerm{}
			yyc4436 = true
		} else if len(yyv4436) != 0 {
			yyv4436 = yyv4436[:0]
			yyc4436 = true
		}
	} else if yyl4436 > 0 {
		var yyrr4436, yyrl4436 int
		var yyrt4436 bool
		if yyl4436 > cap(yyv4436) {

			yyrg4436 := len(yyv4436) > 0
			yyv24436 := yyv4436
			yyrl4436, yyrt4436 = z.DecInferLen(yyl4436, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4436 {
				if yyrl4436 <= cap(yyv4436) {
					yyv4436 = yyv4436[:yyrl4436]
				} else {
					yyv4436 = make([]NodeSelectorTerm, yyrl4436)
				}
			} else {
				yyv4436 = make([]NodeSelectorTerm, yyrl4436)
			}
			yyc4436 = true
			yyrr4436 = len(yyv4436)
			if yyrg4436 {
				copy(yyv4436, yyv24436)
			}
		} else if yyl4436 != len(yyv4436) {
			yyv4436 = yyv4436[:yyl4436]
			yyc4436 = true
		}
		yyj4436 := 0
		for ; yyj4436 < yyrr4436; yyj4436++ {
			yyh4436.ElemContainerState(yyj4436)
			if r.TryDecodeAsNil() {
				yyv4436[yyj4436] = NodeSelectorTerm{}
			} else {
				yyv4437 := &yyv4436[yyj4436]
				yyv4437.CodecDecodeSelf(d)
			}

		}
		if yyrt4436 {
			for ; yyj4436 < yyl4436; yyj4436++ {
				yyv4436 = append(yyv4436, NodeSelectorTerm{})
				yyh4436.ElemContainerState(yyj4436)
				if r.TryDecodeAsNil() {
					yyv4436[yyj4436] = NodeSelectorTerm{}
				} else {
					yyv4438 := &yyv4436[yyj4436]
					yyv4438.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4436 := 0
		for ; !r.CheckBreak(); yyj4436++ {

			if yyj4436 >= len(yyv4436) {
				yyv4436 = append(yyv4436, NodeSelectorTerm{}) // var yyz4436 NodeSelectorTerm
				yyc4436 = true
			}
			yyh4436.ElemContainerState(yyj4436)
			if yyj4436 < len(yyv4436) {
				if r.TryDecodeAsNil() {
					yyv4436[yyj4436] = NodeSelectorTerm{}
				} else {
					yyv4439 := &yyv4436[yyj4436]
					yyv4439.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4436 < len(yyv4436) {
			yyv4436 = yyv4436[:yyj4436]
			yyc4436 = true
		} else if yyj4436 == 0 && yyv4436 == nil {
			yyv4436 = []NodeSelectorTerm{}
			yyc4436 = true
		}
	}
	yyh4436.End()
	if yyc4436 {
		*v = yyv4436
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4440 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4441 := &yyv4440
		yy4441.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4442 := *v
	yyh4442, yyl4442 := z.DecSliceHelperStart()
	var yyc4442 bool
	if yyl4442 == 0 {
		if yyv4442 == nil {
			yyv4442 = []NodeSelectorRequirement{}
			yyc4442 = true
		} else if len(yyv4442) != 0 {
			yyv4442 = yyv4442[:0]
			yyc4442 = true
		}
	} else if yyl4442 > 0 {
		var yyrr4442, yyrl4442 int
		var yyrt4442 bool
		if yyl4442 > cap(yyv4442) {

			yyrg4442 := len(yyv4442) > 0
			yyv24442 := yyv4442
			yyrl4442, yyrt4442 = z.DecInferLen(yyl4442, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4442 {
				if yyrl4442 <= cap(yyv4442) {
					yyv4442 = yyv4442[:yyrl4442]
				} else {
					yyv4442 = make([]NodeSelectorRequirement, yyrl4442)
				}
			} else {
				yyv4442 = make([]NodeSelectorRequirement, yyrl4442)
			}
			yyc4442 = true
			yyrr4442 = len(yyv4442)
			if yyrg4442 {
				copy(yyv4442, yyv24442)
			}
		} else if yyl4442 != len(yyv4442) {
			yyv4442 = yyv4442[:yyl4442]
			yyc4442 = true
		}
		yyj4442 := 0
		for ; yyj4442 < yyrr4442; yyj4442++ {
			yyh4442.ElemContainerState(yyj4442)
			if r.TryDecodeAsNil() {
				yyv4442[yyj4442] = NodeSelectorRequirement{}
			} else {
				yyv4443 := &yyv4442[yyj4442]
				yyv4443.CodecDecodeSelf(d)
			}

		}
		if yyrt4442 {
			for ; yyj4442 < yyl4442; yyj4442++ {
				yyv4442 = append(yyv4442, NodeSelectorRequirement{})
				yyh4442.ElemContainerState(yyj4442)
				if r.TryDecodeAsNil() {
					yyv4442[yyj4442] = NodeSelectorRequirement{}
				} else {
					yyv4444 := &yyv4442[yyj4442]
					yyv4444.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4442 := 0
		for ; !r.CheckBreak(); yyj4442++ {

			if yyj4442 >= len(yyv4442) {
				yyv4442 = append(yyv4442, NodeSelectorRequirement{}) // var yyz4442 NodeSelectorRequirement
				yyc4442 = true
			}
			yyh4442.ElemContainerState(yyj4442)
			if yyj4442 < len(yyv4442) {
				if r.TryDecodeAsNil() {
					yyv4442[yyj4442] = NodeSelectorRequirement{}
				} else {
					yyv4445 := &yyv4442[yyj4442]
					yyv4445.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4442 < len(yyv4442) {
			yyv4442 = yyv4442[:yyj4442]
			yyc4442 = true
		} else if yyj4442 == 0 && yyv4442 == nil {
			yyv4442 = []NodeSelectorRequirement{}
			yyc4442 = true
		}
	}
	yyh4442.End()
	if yyc4442 {
		*v = yyv4442
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4446 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4447 := &yyv4446
		yy4447.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4448 := *v
	yyh4448, yyl4448 := z.DecSliceHelperStart()
	var yyc4448 bool
	if yyl4448 == 0 {
		if yyv4448 == nil {
			yyv4448 = []PodAffinityTerm{}
			yyc4448 = true
		} else if len(yyv4448) != 0 {
			yyv4448 = yyv4448[:0]
			yyc4448 = true
		}
	} else if yyl4448 > 0 {
		var yyrr4448, yyrl4448 int
		var yyrt4448 bool
		if yyl4448 > cap(yyv4448) {

			yyrg4448 := len(yyv4448) > 0
			yyv24448 := yyv4448
			yyrl4448, yyrt4448 = z.DecInferLen(yyl4448, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4448 {
				if yyrl4448 <= cap(yyv4448) {
					yyv4448 = yyv4448[:yyrl4448]
				} else {
					yyv4448 = make([]PodAffinityTerm, yyrl4448)
				}
			} else {
				yyv4448 = make([]PodAffinityTerm, yyrl4448)
			}
			yyc4448 = true
			yyrr4448 = len(yyv4448)
			if yyrg4448 {
				copy(yyv4448, yyv24448)
			}
		} else if yyl4448 != len(yyv4448) {
			yyv4448 = yyv4448[:yyl4448]
			yyc4448 = true
		}
		yyj4448 := 0
		for ; yyj4448 < yyrr4448; yyj4448++ {
			yyh4448.ElemContainerState(yyj4448)
			if r.TryDecodeAsNil() {
				yyv4448[yyj4448] = PodAffinityTerm{}
			} else {
				yyv4449 := &yyv4448[yyj4448]
				yyv4449.CodecDecodeSelf(d)
			}

		}
		if yyrt4448 {
			for ; yyj4448 < yyl4448; yyj4448++ {
				yyv4448 = append(yyv4448, PodAffinityTerm{})
				yyh4448.ElemContainerState(yyj4448)
				if r.TryDecodeAsNil() {
					yyv4448[yyj4448] = PodAffinityTerm{}
				} else {
					yyv4450 := &yyv4448[yyj4448]
					yyv4450.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4448 := 0
		for ; !r.CheckBreak(); yyj4448++ {

			if yyj4448 >= len(yyv4448) {
				yyv4448 = append(yyv4448, PodAffinityTerm{}) // var yyz4448 PodAffinityTerm
				yyc4448 = true
			}
			yyh4448.ElemContainerState(yyj4448)
			if yyj4448 < len(yyv4448) {
				if r.TryDecodeAsNil() {
					yyv4448[yyj4448] = PodAffinityTerm{}
				} else {
					yyv4451 := &yyv4448[yyj4448]
					yyv4451.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4448 < len(yyv4448) {
			yyv4448 = yyv4448[:yyj4448]
			yyc4448 = true
		} else if yyj4448 == 0 && yyv4448 == nil {
			yyv4448 = []PodAffinityTerm{}
			yyc4448 = true
		}
	}
	yyh4448.End()
	if yyc4448 {
		*v = yyv4448
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4452 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4453 := &yyv4452
		yy4453.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4454 := *v
	yyh4454, yyl4454 := z.DecSliceHelperStart()
	var yyc4454 bool
	if yyl4454 == 0 {
		if yyv4454 == nil {
			yyv4454 = []WeightedPodAffinityTerm{}
			yyc4454 = true
		} else if len(yyv4454) != 0 {
			yyv4454 = yyv4454[:0]
			yyc4454 = true
		}
	} else if yyl4454 > 0 {
		var yyrr4454, yyrl4454 int
		var yyrt4454 bool
		if yyl4454 > cap(yyv4454) {

			yyrg4454 := len(yyv4454) > 0
			yyv24454 := yyv4454
			yyrl4454, yyrt4454 = z.DecInferLen(yyl4454, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4454 {
				if yyrl4454 <= cap(yyv4454) {
					yyv4454 = yyv4454[:yyrl4454]
				} else {
					yyv4454 = make([]WeightedPodAffinityTerm, yyrl4454)
				}
			} else {
				yyv4454 = make([]WeightedPodAffinityTerm, yyrl4454)
			}
			yyc4454 = true
			yyrr4454 = len(yyv4454)
			if yyrg4454 {
				copy(yyv4454, yyv24454)
			}
		} else if yyl4454 != len(yyv4454) {
			yyv4454 = yyv4454[:yyl4454]
			yyc4454 = true
		}
		yyj4454 := 0
		for ; yyj4454 < yyrr4454; yyj4454++ {
			yyh4454.ElemContainerState(yyj4454)
			if r.TryDecodeAsNil() {
				yyv4454[yyj4454] = WeightedPodAffinityTerm{}
			} else {
				yyv4455 := &yyv4454[yyj4454]
				yyv4455.CodecDecodeSelf(d)
			}

		}
		if yyrt4454 {
			for ; yyj4454 < yyl4454; yyj4454++ {
				yyv4454 = append(yyv4454, WeightedPodAffinityTerm{})
				yyh4454.ElemContainerState(yyj4454)
				if r.TryDecodeAsNil() {
					yyv4454[yyj4454] = WeightedPodAffinityTerm{}
				} else {
					yyv4456 := &yyv4454[yyj4454]
					yyv4456.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4454 := 0
		for ; !r.CheckBreak(); yyj4454++ {

			if yyj4454 >= len(yyv4454) {
				yyv4454 = append(yyv4454, WeightedPodAffinityTerm{}) // var yyz4454 WeightedPodAffinityTerm
				yyc4454 = true
			}
			yyh4454.ElemContainerState(yyj4454)
			if yyj4454 < len(yyv4454) {
				if r.TryDecodeAsNil() {
					yyv4454[yyj4454] = WeightedPodAffinityTerm{}
				} else {
					yyv4457 := &yyv4454[yyj4454]
					yyv4457.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4454 < len(yyv4454) {
			yyv4454 = yyv4454[:yyj4454]
			yyc4454 = true
		} else if yyj4454 == 0 && yyv4454 == nil {
			yyv4454 = []WeightedPodAffinityTerm{}
			yyc4454 = true
		}
	}
	yyh4454.End()
	if yyc4454 {
		*v = yyv4454
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4458 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4459 := &yyv4458
		yy4459.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4460 := *v
	yyh4460, yyl4460 := z.DecSliceHelperStart()
	var yyc4460 bool
	if yyl4460 == 0 {
		if yyv4460 == nil {
			yyv4460 = []PreferredSchedulingTerm{}
			yyc4460 = true
		} else if len(yyv4460) != 0 {
			yyv4460 = yyv4460[:0]
			yyc4460 = true
		}
	} else if yyl4460 > 0 {
		var yyrr4460, yyrl4460 int
		var yyrt4460 bool
		if yyl4460 > cap(yyv4460) {

			yyrg4460 := len(yyv4460) > 0
			yyv24460 := yyv4460
			yyrl4460, yyrt4460 = z.DecInferLen(yyl4460, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4460 {
				if yyrl4460 <= cap(yyv4460) {
					yyv4460 = yyv4460[:yyrl4460]
				} else {
					yyv4460 = make([]PreferredSchedulingTerm, yyrl4460)
				}
			} else {
				yyv4460 = make([]PreferredSchedulingTerm, yyrl4460)
			}
			yyc4460 = true
			yyrr4460 = len(yyv4460)
			if yyrg4460 {
				copy(yyv4460, yyv24460)
			}
		} else if yyl4460 != len(yyv4460) {
			yyv4460 = yyv4460[:yyl4460]
			yyc4460 = true
		}
		yyj4460 := 0
		for ; yyj4460 < yyrr4460; yyj4460++ {
			yyh4460.ElemContainerState(yyj4460)
			if r.TryDecodeAsNil() {
				yyv4460[yyj4460] = PreferredSchedulingTerm{}
			} else {
				yyv4461 := &yyv4460[yyj4460]
				yyv4461.CodecDecodeSelf(d)
			}

		}
		if yyrt4460 {
			for ; yyj4460 < yyl4460; yyj4460++ {
				yyv4460 = append(yyv4460, PreferredSchedulingTerm{})
				yyh4460.ElemContainerState(yyj4460)
				if r.TryDecodeAsNil() {
					yyv4460[yyj4460] = PreferredSchedulingTerm{}
				} else {
					yyv4462 := &yyv4460[yyj4460]
					yyv4462.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4460 := 0
		for ; !r.CheckBreak(); yyj4460++ {

			if yyj4460 >= len(yyv4460) {
				yyv4460 = append(yyv4460, PreferredSchedulingTerm{}) // var yyz4460 PreferredSchedulingTerm
				yyc4460 = true
			}
			yyh4460.ElemContainerState(yyj4460)
			if yyj4460 < len(yyv4460) {
				if r.TryDecodeAsNil() {
					yyv4460[yyj4460] = PreferredSchedulingTerm{}
				} else {
					yyv4463 := &yyv4460[yyj4460]
					yyv4463.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4460 < len(yyv4460) {
			yyv4460 = yyv4460[:yyj4460]
			yyc4460 = true
		} else if yyj4460 == 0 && yyv4460 == nil {
			yyv4460 = []PreferredSchedulingTerm{}
			yyc4460 = true
		}
	}
	yyh4460.End()
	if yyc4460 {
		*v = yyv4460
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4464 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4465 := &yyv4464
		yy4465.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4466 := *v
	yyh4466, yyl4466 := z.DecSliceHelperStart()
	var yyc4466 bool
	if yyl4466 == 0 {
		if yyv4466 == nil {
			yyv4466 = []Volume{}
			yyc4466 = true
		} else if len(yyv4466) != 0 {
			yyv4466 = yyv4466[:0]
			yyc4466 = true
		}
	} else if yyl4466 > 0 {
		var yyrr4466, yyrl4466 int
		var yyrt4466 bool
		if yyl4466 > cap(yyv4466) {

			yyrg4466 := len(yyv4466) > 0
			yyv24466 := yyv4466
			yyrl4466, yyrt4466 = z.DecInferLen(yyl4466, z.DecBasicHandle().MaxInitLen, 176)
			if yyrt4466 {
				if yyrl4466 <= cap(yyv4466) {
					yyv4466 = yyv4466[:yyrl4466]
				} else {
					yyv4466 = make([]Volume, yyrl4466)
				}
			} else {
				yyv4466 = make([]Volume, yyrl4466)
			}
			yyc4466 = true
			yyrr4466 = len(yyv4466)
			if yyrg4466 {
				copy(yyv4466, yyv24466)
			}
		} else if yyl4466 != len(yyv4466) {
			yyv4466 = yyv4466[:yyl4466]
			yyc4466 = true
		}
		yyj4466 := 0
		for ; yyj4466 < yyrr4466; yyj4466++ {
			yyh4466.ElemContainerState(yyj4466)
			if r.TryDecodeAsNil() {
				yyv4466[yyj4466] = Volume{}
			} else {
				yyv4467 := &yyv4466[yyj4466]
				yyv4467.CodecDecodeSelf(d)
			}

		}
		if yyrt4466 {
			for ; yyj4466 < yyl4466; yyj4466++ {
				yyv4466 = append(yyv4466, Volume{})
				yyh4466.ElemContainerState(yyj4466)
				if r.TryDecodeAsNil() {
					yyv4466[yyj4466] = Volume{}
				} else {
					yyv4468 := &yyv4466[yyj4466]
					yyv4468.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4466 := 0
		for ; !r.CheckBreak(); yyj4466++ {

			if yyj4466 >= len(yyv4466) {
				yyv4466 = append(yyv4466, Volume{}) // var yyz4466 Volume
				yyc4466 = true
			}
			yyh4466.ElemContainerState(yyj4466)
			if yyj4466 < len(yyv4466) {
				if r.TryDecodeAsNil() {
					yyv4466[yyj4466] = Volume{}
				} else {
					yyv4469 := &yyv4466[yyj4466]
					yyv4469.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4466 < len(yyv4466) {
			yyv4466 = yyv4466[:yyj4466]
			yyc4466 = true
		} else if yyj4466 == 0 && yyv4466 == nil {
			yyv4466 = []Volume{}
			yyc4466 = true
		}
	}
	yyh4466.End()
	if yyc4466 {
		*v = yyv4466
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4470 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4471 := &yyv4470
		yy4471.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4472 := *v
	yyh4472, yyl4472 := z.DecSliceHelperStart()
	var yyc4472 bool
	if yyl4472 == 0 {
		if yyv4472 == nil {
			yyv4472 = []Container{}
			yyc4472 = true
		} else if len(yyv4472) != 0 {
			yyv4472 = yyv4472[:0]
			yyc4472 = true
		}
	} else if yyl4472 > 0 {
		var yyrr4472, yyrl4472 int
		var yyrt4472 bool
		if yyl4472 > cap(yyv4472) {

			yyrg4472 := len(yyv4472) > 0
			yyv24472 := yyv4472
			yyrl4472, yyrt4472 = z.DecInferLen(yyl4472, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4472 {
				if yyrl4472 <= cap(yyv4472) {
					yyv4472 = yyv4472[:yyrl4472]
				} else {
					yyv4472 = make([]Container, yyrl4472)
				}
			} else {
				yyv4472 = make([]Container, yyrl4472)
			}
			yyc4472 = true
			yyrr4472 = len(yyv4472)
			if yyrg4472 {
				copy(yyv4472, yyv24472)
			}
		} else if yyl4472 != len(yyv4472) {
			yyv4472 = yyv4472[:yyl4472]
			yyc4472 = true
		}
		yyj4472 := 0
		for ; yyj4472 < yyrr4472; yyj4472++ {
			yyh4472.ElemContainerState(yyj4472)
			if r.TryDecodeAsNil() {
				yyv4472[yyj4472] = Container{}
			} else {
				yyv4473 := &yyv4472[yyj4472]
				yyv4473.CodecDecodeSelf(d)
			}

		}
		if yyrt4472 {
			for ; yyj4472 < yyl4472; yyj4472++ {
				yyv4472 = append(yyv4472, Container{})
				yyh4472.ElemContainerState(yyj4472)
				if r.TryDecodeAsNil() {
					yyv4472[yyj4472] = Container{}
				} else {
					yyv4474 := &yyv4472[yyj4472]
					yyv4474.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4472 := 0
		for ; !r.CheckBreak(); yyj4472++ {

			if yyj4472 >= len(yyv4472) {
				yyv4472 = append(yyv4472, Container{}) // var yyz4472 Container
				yyc4472 = true
			}
			yyh4472.ElemContainerState(yyj4472)
			if yyj4472 < len(yyv4472) {
				if r.TryDecodeAsNil() {
					yyv4472[yyj4472] = Container{}
				} else {
					yyv4475 := &yyv4472[yyj4472]
					yyv4475.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4472 < len(yyv4472) {
			yyv4472 = yyv4472[:yyj4472]
			yyc4472 = true
		} else if yyj4472 == 0 && yyv4472 == nil {
			yyv4472 = []Container{}
			yyc4472 = true
		}
	}
	yyh4472.End()
	if yyc4472 {
		*v = yyv4472
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4476 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4477 := &yyv4476
		yy4477.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4478 := *v
	yyh4478, yyl4478 := z.DecSliceHelperStart()
	var yyc4478 bool
	if yyl4478 == 0 {
		if yyv4478 == nil {
			yyv4478 = []LocalObjectReference{}
			yyc4478 = true
		} else if len(yyv4478) != 0 {
			yyv4478 = yyv4478[:0]
			yyc4478 = true
		}
	} else if yyl4478 > 0 {
		var yyrr4478, yyrl4478 int
		var yyrt4478 bool
		if yyl4478 > cap(yyv4478) {

			yyrg4478 := len(yyv4478) > 0
			yyv24478 := yyv4478
			yyrl4478, yyrt4478 = z.DecInferLen(yyl4478, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4478 {
				if yyrl4478 <= cap(yyv4478) {
					yyv4478 = yyv4478[:yyrl4478]
				} else {
					yyv4478 = make([]LocalObjectReference, yyrl4478)
				}
			} else {
				yyv4478 = make([]LocalObjectReference, yyrl4478)
			}
			yyc4478 = true
			yyrr4478 = len(yyv4478)
			if yyrg4478 {
				copy(yyv4478, yyv24478)
			}
		} else if yyl4478 != len(yyv4478) {
			yyv4478 = yyv4478[:yyl4478]
			yyc4478 = true
		}
		yyj4478 := 0
		for ; yyj4478 < yyrr4478; yyj4478++ {
			yyh4478.ElemContainerState(yyj4478)
			if r.TryDecodeAsNil() {
				yyv4478[yyj4478] = LocalObjectReference{}
			} else {
				yyv4479 := &yyv4478[yyj4478]
				yyv4479.CodecDecodeSelf(d)
			}

		}
		if yyrt4478 {
			for ; yyj4478 < yyl4478; yyj4478++ {
				yyv4478 = append(yyv4478, LocalObjectReference{})
				yyh4478.ElemContainerState(yyj4478)
				if r.TryDecodeAsNil() {
					yyv4478[yyj4478] = LocalObjectReference{}
				} else {
					yyv4480 := &yyv4478[yyj4478]
					yyv4480.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4478 := 0
		for ; !r.CheckBreak(); yyj4478++ {

			if yyj4478 >= len(yyv4478) {
				yyv4478 = append(yyv4478, LocalObjectReference{}) // var yyz4478 LocalObjectReference
				yyc4478 = true
			}
			yyh4478.ElemContainerState(yyj4478)
			if yyj4478 < len(yyv4478) {
				if r.TryDecodeAsNil() {
					yyv4478[yyj4478] = LocalObjectReference{}
				} else {
					yyv4481 := &yyv4478[yyj4478]
					yyv4481.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4478 < len(yyv4478) {
			yyv4478 = yyv4478[:yyj4478]
			yyc4478 = true
		} else if yyj4478 == 0 && yyv4478 == nil {
			yyv4478 = []LocalObjectReference{}
			yyc4478 = true
		}
	}
	yyh4478.End()
	if yyc4478 {
		*v = yyv4478
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4482 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4483 := &yyv4482
		yy4483.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4484 := *v
	yyh4484, yyl4484 := z.DecSliceHelperStart()
	var yyc4484 bool
	if yyl4484 == 0 {
		if yyv4484 == nil {
			yyv4484 = []PodCondition{}
			yyc4484 = true
		} else if len(yyv4484) != 0 {
			yyv4484 = yyv4484[:0]
			yyc4484 = true
		}
	} else if yyl4484 > 0 {
		var yyrr4484, yyrl4484 int
		var yyrt4484 bool
		if yyl4484 > cap(yyv4484) {

			yyrg4484 := len(yyv4484) > 0
			yyv24484 := yyv4484
			yyrl4484, yyrt4484 = z.DecInferLen(yyl4484, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4484 {
				if yyrl4484 <= cap(yyv4484) {
					yyv4484 = yyv4484[:yyrl4484]
				} else {
					yyv4484 = make([]PodCondition, yyrl4484)
				}
			} else {
				yyv4484 = make([]PodCondition, yyrl4484)
			}
			yyc4484 = true
			yyrr4484 = len(yyv4484)
			if yyrg4484 {
				copy(yyv4484, yyv24484)
			}
		} else if yyl4484 != len(yyv4484) {
			yyv4484 = yyv4484[:yyl4484]
			yyc4484 = true
		}
		yyj4484 := 0
		for ; yyj4484 < yyrr4484; yyj4484++ {
			yyh4484.ElemContainerState(yyj4484)
			if r.TryDecodeAsNil() {
				yyv4484[yyj4484] = PodCondition{}
			} else {
				yyv4485 := &yyv4484[yyj4484]
				yyv4485.CodecDecodeSelf(d)
			}

		}
		if yyrt4484 {
			for ; yyj4484 < yyl4484; yyj4484++ {
				yyv4484 = append(yyv4484, PodCondition{})
				yyh4484.ElemContainerState(yyj4484)
				if r.TryDecodeAsNil() {
					yyv4484[yyj4484] = PodCondition{}
				} else {
					yyv4486 := &yyv4484[yyj4484]
					yyv4486.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4484 := 0
		for ; !r.CheckBreak(); yyj4484++ {

			if yyj4484 >= len(yyv4484) {
				yyv4484 = append(yyv4484, PodCondition{}) // var yyz4484 PodCondition
				yyc4484 = true
			}
			yyh4484.ElemContainerState(yyj4484)
			if yyj4484 < len(yyv4484) {
				if r.TryDecodeAsNil() {
					yyv4484[yyj4484] = PodCondition{}
				} else {
					yyv4487 := &yyv4484[yyj4484]
					yyv4487.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4484 < len(yyv4484) {
			yyv4484 = yyv4484[:yyj4484]
			yyc4484 = true
		} else if yyj4484 == 0 && yyv4484 == nil {
			yyv4484 = []PodCondition{}
			yyc4484 = true
		}
	}
	yyh4484.End()
	if yyc4484 {
		*v = yyv4484
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4488 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4489 := &yyv4488
		yy4489.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4490 := *v
	yyh4490, yyl4490 := z.DecSliceHelperStart()
	var yyc4490 bool
	if yyl4490 == 0 {
		if yyv4490 == nil {
			yyv4490 = []ContainerStatus{}
			yyc4490 = true
		} else if len(yyv4490) != 0 {
			yyv4490 = yyv4490[:0]
			yyc4490 = true
		}
	} else if yyl4490 > 0 {
		var yyrr4490, yyrl4490 int
		var yyrt4490 bool
		if yyl4490 > cap(yyv4490) {

			yyrg4490 := len(yyv4490) > 0
			yyv24490 := yyv4490
			yyrl4490, yyrt4490 = z.DecInferLen(yyl4490, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4490 {
				if yyrl4490 <= cap(yyv4490) {
					yyv4490 = yyv4490[:yyrl4490]
				} else {
					yyv4490 = make([]ContainerStatus, yyrl4490)
				}
			} else {
				yyv4490 = make([]ContainerStatus, yyrl4490)
			}
			yyc4490 = true
			yyrr4490 = len(yyv4490)
			if yyrg4490 {
				copy(yyv4490, yyv24490)
			}
		} else if yyl4490 != len(yyv4490) {
			yyv4490 = yyv4490[:yyl4490]
			yyc4490 = true
		}
		yyj4490 := 0
		for ; yyj4490 < yyrr4490; yyj4490++ {
			yyh4490.ElemContainerState(yyj4490)
			if r.TryDecodeAsNil() {
				yyv4490[yyj4490] = ContainerStatus{}
			} else {
				yyv4491 := &yyv4490[yyj4490]
				yyv4491.CodecDecodeSelf(d)
			}

		}
		if yyrt4490 {
			for ; yyj4490 < yyl4490; yyj4490++ {
				yyv4490 = append(yyv4490, ContainerStatus{})
				yyh4490.ElemContainerState(yyj4490)
				if r.TryDecodeAsNil() {
					yyv4490[yyj4490] = ContainerStatus{}
				} else {
					yyv4492 := &yyv4490[yyj4490]
					yyv4492.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4490 := 0
		for ; !r.CheckBreak(); yyj4490++ {

			if yyj4490 >= len(yyv4490) {
				yyv4490 = append(yyv4490, ContainerStatus{}) // var yyz4490 ContainerStatus
				yyc4490 = true
			}
			yyh4490.ElemContainerState(yyj4490)
			if yyj4490 < len(yyv4490) {
				if r.TryDecodeAsNil() {
					yyv4490[yyj4490] = ContainerStatus{}
				} else {
					yyv4493 := &yyv4490[yyj4490]
					yyv4493.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4490 < len(yyv4490) {
			yyv4490 = yyv4490[:yyj4490]
			yyc4490 = true
		} else if yyj4490 == 0 && yyv4490 == nil {
			yyv4490 = []ContainerStatus{}
			yyc4490 = true
		}
	}
	yyh4490.End()
	if yyc4490 {
		*v = yyv4490
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4494 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4495 := &yyv4494
		yy4495.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4496 := *v
	yyh4496, yyl4496 := z.DecSliceHelperStart()
	var yyc4496 bool
	if yyl4496 == 0 {
		if yyv4496 == nil {
			yyv4496 = []Pod{}
			yyc4496 = true
		} else if len(yyv4496) != 0 {
			yyv4496 = yyv4496[:0]
			yyc4496 = true
		}
	} else if yyl4496 > 0 {
		var yyrr4496, yyrl4496 int
		var yyrt4496 bool
		if yyl4496 > cap(yyv4496) {

			yyrg4496 := len(yyv4496) > 0
			yyv24496 := yyv4496
			yyrl4496, yyrt4496 = z.DecInferLen(yyl4496, z.DecBasicHandle().MaxInitLen, 656)
			if yyrt4496 {
				if yyrl4496 <= cap(yyv4496) {
					yyv4496 = yyv4496[:yyrl4496]
				} else {
					yyv4496 = make([]Pod, yyrl4496)
				}
			} else {
				yyv4496 = make([]Pod, yyrl4496)
			}
			yyc4496 = true
			yyrr4496 = len(yyv4496)
			if yyrg4496 {
				copy(yyv4496, yyv24496)
			}
		} else if yyl4496 != len(yyv4496) {
			yyv4496 = yyv4496[:yyl4496]
			yyc4496 = true
		}
		yyj4496 := 0
		for ; yyj4496 < yyrr4496; yyj4496++ {
			yyh4496.ElemContainerState(yyj4496)
			if r.TryDecodeAsNil() {
				yyv4496[yyj4496] = Pod{}
			} else {
				yyv4497 := &yyv4496[yyj4496]
				yyv4497.CodecDecodeSelf(d)
			}

		}
		if yyrt4496 {
			for ; yyj4496 < yyl4496; yyj4496++ {
				yyv4496 = append(yyv4496, Pod{})
				yyh4496.ElemContainerState(yyj4496)
				if r.TryDecodeAsNil() {
					yyv4496[yyj4496] = Pod{}
				} else {
					yyv4498 := &yyv4496[yyj4496]
					yyv4498.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4496 := 0
		for ; !r.CheckBreak(); yyj4496++ {

			if yyj4496 >= len(yyv4496) {
				yyv4496 = append(yyv4496, Pod{}) // var yyz4496 Pod
				yyc4496 = true
			}
			yyh4496.ElemContainerState(yyj4496)
			if yyj4496 < len(yyv4496) {
				if r.TryDecodeAsNil() {
					yyv4496[yyj4496] = Pod{}
				} else {
					yyv4499 := &yyv4496[yyj4496]
					yyv4499.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4496 < len(yyv4496) {
			yyv4496 = yyv4496[:yyj4496]
			yyc4496 = true
		} else if yyj4496 == 0 && yyv4496 == nil {
			yyv4496 = []Pod{}
			yyc4496 = true
		}
	}
	yyh4496.End()
	if yyc4496 {
		*v = yyv4496
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4500 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4501 := &yyv4500
		yy4501.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4502 := *v
	yyh4502, yyl4502 := z.DecSliceHelperStart()
	var yyc4502 bool
	if yyl4502 == 0 {
		if yyv4502 == nil {
			yyv4502 = []PodTemplate{}
			yyc4502 = true
		} else if len(yyv4502) != 0 {
			yyv4502 = yyv4502[:0]
			yyc4502 = true
		}
	} else if yyl4502 > 0 {
		var yyrr4502, yyrl4502 int
		var yyrt4502 bool
		if yyl4502 > cap(yyv4502) {

			yyrg4502 := len(yyv4502) > 0
			yyv24502 := yyv4502
			yyrl4502, yyrt4502 = z.DecInferLen(yyl4502, z.DecBasicHandle().MaxInitLen, 712)
			if yyrt4502 {
				if yyrl4502 <= cap(yyv4502) {
					yyv4502 = yyv4502[:yyrl4502]
				} else {
					yyv4502 = make([]PodTemplate, yyrl4502)
				}
			} else {
				yyv4502 = make([]PodTemplate, yyrl4502)
			}
			yyc4502 = true
			yyrr4502 = len(yyv4502)
			if yyrg4502 {
				copy(yyv4502, yyv24502)
			}
		} else if yyl4502 != len(yyv4502) {
			yyv4502 = yyv4502[:yyl4502]
			yyc4502 = true
		}
		yyj4502 := 0
		for ; yyj4502 < yyrr4502; yyj4502++ {
			yyh4502.ElemContainerState(yyj4502)
			if r.TryDecodeAsNil() {
				yyv4502[yyj4502] = PodTemplate{}
			} else {
				yyv4503 := &yyv4502[yyj4502]
				yyv4503.CodecDecodeSelf(d)
			}

		}
		if yyrt4502 {
			for ; yyj4502 < yyl4502; yyj4502++ {
				yyv4502 = append(yyv4502, PodTemplate{})
				yyh4502.ElemContainerState(yyj4502)
				if r.TryDecodeAsNil() {
					yyv4502[yyj4502] = PodTemplate{}
				} else {
					yyv4504 := &yyv4502[yyj4502]
					yyv4504.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4502 := 0
		for ; !r.CheckBreak(); yyj4502++ {

			if yyj4502 >= len(yyv4502) {
				yyv4502 = append(yyv4502, PodTemplate{}) // var yyz4502 PodTemplate
				yyc4502 = true
			}
			yyh4502.ElemContainerState(yyj4502)
			if yyj4502 < len(yyv4502) {
				if r.TryDecodeAsNil() {
					yyv4502[yyj4502] = PodTemplate{}
				} else {
					yyv4505 := &yyv4502[yyj4502]
					yyv4505.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4502 < len(yyv4502) {
			yyv4502 = yyv4502[:yyj4502]
			yyc4502 = true
		} else if yyj4502 == 0 && yyv4502 == nil {
			yyv4502 = []PodTemplate{}
			yyc4502 = true
		}
	}
	yyh4502.End()
	if yyc4502 {
		*v = yyv4502
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4506 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4507 := &yyv4506
		yy4507.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4508 := *v
	yyh4508, yyl4508 := z.DecSliceHelperStart()
	var yyc4508 bool
	if yyl4508 == 0 {
		if yyv4508 == nil {
			yyv4508 = []ReplicationController{}
			yyc4508 = true
		} else if len(yyv4508) != 0 {
			yyv4508 = yyv4508[:0]
			yyc4508 = true
		}
	} else if yyl4508 > 0 {
		var yyrr4508, yyrl4508 int
		var yyrt4508 bool
		if yyl4508 > cap(yyv4508) {

			yyrg4508 := len(yyv4508) > 0
			yyv24508 := yyv4508
			yyrl4508, yyrt4508 = z.DecInferLen(yyl4508, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4508 {
				if yyrl4508 <= cap(yyv4508) {
					yyv4508 = yyv4508[:yyrl4508]
				} else {
					yyv4508 = make([]ReplicationController, yyrl4508)
				}
			} else {
				yyv4508 = make([]ReplicationController, yyrl4508)
			}
			yyc4508 = true
			yyrr4508 = len(yyv4508)
			if yyrg4508 {
				copy(yyv4508, yyv24508)
			}
		} else if yyl4508 != len(yyv4508) {
			yyv4508 = yyv4508[:yyl4508]
			yyc4508 = true
		}
		yyj4508 := 0
		for ; yyj4508 < yyrr4508; yyj4508++ {
			yyh4508.ElemContainerState(yyj4508)
			if r.TryDecodeAsNil() {
				yyv4508[yyj4508] = ReplicationController{}
			} else {
				yyv4509 := &yyv4508[yyj4508]
				yyv4509.CodecDecodeSelf(d)
			}

		}
		if yyrt4508 {
			for ; yyj4508 < yyl4508; yyj4508++ {
				yyv4508 = append(yyv4508, ReplicationController{})
				yyh4508.ElemContainerState(yyj4508)
				if r.TryDecodeAsNil() {
					yyv4508[yyj4508] = ReplicationController{}
				} else {
					yyv4510 := &yyv4508[yyj4508]
					yyv4510.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4508 := 0
		for ; !r.CheckBreak(); yyj4508++ {

			if yyj4508 >= len(yyv4508) {
				yyv4508 = append(yyv4508, ReplicationController{}) // var yyz4508 ReplicationController
				yyc4508 = true
			}
			yyh4508.ElemContainerState(yyj4508)
			if yyj4508 < len(yyv4508) {
				if r.TryDecodeAsNil() {
					yyv4508[yyj4508] = ReplicationController{}
				} else {
					yyv4511 := &yyv4508[yyj4508]
					yyv4511.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4508 < len(yyv4508) {
			yyv4508 = yyv4508[:yyj4508]
			yyc4508 = true
		} else if yyj4508 == 0 && yyv4508 == nil {
			yyv4508 = []ReplicationController{}
			yyc4508 = true
		}
	}
	yyh4508.End()
	if yyc4508 {
		*v = yyv4508
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4512 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4513 := &yyv4512
		yy4513.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4514 := *v
	yyh4514, yyl4514 := z.DecSliceHelperStart()
	var yyc4514 bool
	if yyl4514 == 0 {
		if yyv4514 == nil {
			yyv4514 = []LoadBalancerIngress{}
			yyc4514 = true
		} else if len(yyv4514) != 0 {
			yyv4514 = yyv4514[:0]
			yyc4514 = true
		}
	} else if yyl4514 > 0 {
		var yyrr4514, yyrl4514 int
		var yyrt4514 bool
		if yyl4514 > cap(yyv4514) {

			yyrg4514 := len(yyv4514) > 0
			yyv24514 := yyv4514
			yyrl4514, yyrt4514 = z.DecInferLen(yyl4514, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4514 {
				if yyrl4514 <= cap(yyv4514) {
					yyv4514 = yyv4514[:yyrl4514]
				} else {
					yyv4514 = make([]LoadBalancerIngress, yyrl4514)
				}
			} else {
				yyv4514 = make([]LoadBalancerIngress, yyrl4514)
			}
			yyc4514 = true
			yyrr4514 = len(yyv4514)
			if yyrg4514 {
				copy(yyv4514, yyv24514)
			}
		} else if yyl4514 != len(yyv4514) {
			yyv4514 = yyv4514[:yyl4514]
			yyc4514 = true
		}
		yyj4514 := 0
		for ; yyj4514 < yyrr4514; yyj4514++ {
			yyh4514.ElemContainerState(yyj4514)
			if r.TryDecodeAsNil() {
				yyv4514[yyj4514] = LoadBalancerIngress{}
			} else {
				yyv4515 := &yyv4514[yyj4514]
				yyv4515.CodecDecodeSelf(d)
			}

		}
		if yyrt4514 {
			for ; yyj4514 < yyl4514; yyj4514++ {
				yyv4514 = append(yyv4514, LoadBalancerIngress{})
				yyh4514.ElemContainerState(yyj4514)
				if r.TryDecodeAsNil() {
					yyv4514[yyj4514] = LoadBalancerIngress{}
				} else {
					yyv4516 := &yyv4514[yyj4514]
					yyv4516.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4514 := 0
		for ; !r.CheckBreak(); yyj4514++ {

			if yyj4514 >= len(yyv4514) {
				yyv4514 = append(yyv4514, LoadBalancerIngress{}) // var yyz4514 LoadBalancerIngress
				yyc4514 = true
			}
			yyh4514.ElemContainerState(yyj4514)
			if yyj4514 < len(yyv4514) {
				if r.TryDecodeAsNil() {
					yyv4514[yyj4514] = LoadBalancerIngress{}
				} else {
					yyv4517 := &yyv4514[yyj4514]
					yyv4517.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4514 < len(yyv4514) {
			yyv4514 = yyv4514[:yyj4514]
			yyc4514 = true
		} else if yyj4514 == 0 && yyv4514 == nil {
			yyv4514 = []LoadBalancerIngress{}
			yyc4514 = true
		}
	}
	yyh4514.End()
	if yyc4514 {
		*v = yyv4514
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4518 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4519 := &yyv4518
		yy4519.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4520 := *v
	yyh4520, yyl4520 := z.DecSliceHelperStart()
	var yyc4520 bool
	if yyl4520 == 0 {
		if yyv4520 == nil {
			yyv4520 = []ServicePort{}
			yyc4520 = true
		} else if len(yyv4520) != 0 {
			yyv4520 = yyv4520[:0]
			yyc4520 = true
		}
	} else if yyl4520 > 0 {
		var yyrr4520, yyrl4520 int
		var yyrt4520 bool
		if yyl4520 > cap(yyv4520) {

			yyrg4520 := len(yyv4520) > 0
			yyv24520 := yyv4520
			yyrl4520, yyrt4520 = z.DecInferLen(yyl4520, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4520 {
				if yyrl4520 <= cap(yyv4520) {
					yyv4520 = yyv4520[:yyrl4520]
				} else {
					yyv4520 = make([]ServicePort, yyrl4520)
				}
			} else {
				yyv4520 = make([]ServicePort, yyrl4520)
			}
			yyc4520 = true
			yyrr4520 = len(yyv4520)
			if yyrg4520 {
				copy(yyv4520, yyv24520)
			}
		} else if yyl4520 != len(yyv4520) {
			yyv4520 = yyv4520[:yyl4520]
			yyc4520 = true
		}
		yyj4520 := 0
		for ; yyj4520 < yyrr4520; yyj4520++ {
			yyh4520.ElemContainerState(yyj4520)
			if r.TryDecodeAsNil() {
				yyv4520[yyj4520] = ServicePort{}
			} else {
				yyv4521 := &yyv4520[yyj4520]
				yyv4521.CodecDecodeSelf(d)
			}

		}
		if yyrt4520 {
			for ; yyj4520 < yyl4520; yyj4520++ {
				yyv4520 = append(yyv4520, ServicePort{})
				yyh4520.ElemContainerState(yyj4520)
				if r.TryDecodeAsNil() {
					yyv4520[yyj4520] = ServicePort{}
				} else {
					yyv4522 := &yyv4520[yyj4520]
					yyv4522.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4520 := 0
		for ; !r.CheckBreak(); yyj4520++ {

			if yyj4520 >= len(yyv4520) {
				yyv4520 = append(yyv4520, ServicePort{}) // var yyz4520 ServicePort
				yyc4520 = true
			}
			yyh4520.ElemContainerState(yyj4520)
			if yyj4520 < len(yyv4520) {
				if r.TryDecodeAsNil() {
					yyv4520[yyj4520] = ServicePort{}
				} else {
					yyv4523 := &yyv4520[yyj4520]
					yyv4523.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4520 < len(yyv4520) {
			yyv4520 = yyv4520[:yyj4520]
			yyc4520 = true
		} else if yyj4520 == 0 && yyv4520 == nil {
			yyv4520 = []ServicePort{}
			yyc4520 = true
		}
	}
	yyh4520.End()
	if yyc4520 {
		*v = yyv4520
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4524 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4525 := &yyv4524
		yy4525.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4526 := *v
	yyh4526, yyl4526 := z.DecSliceHelperStart()
	var yyc4526 bool
	if yyl4526 == 0 {
		if yyv4526 == nil {
			yyv4526 = []Service{}
			yyc4526 = true
		} else if len(yyv4526) != 0 {
			yyv4526 = yyv4526[:0]
			yyc4526 = true
		}
	} else if yyl4526 > 0 {
		var yyrr4526, yyrl4526 int
		var yyrt4526 bool
		if yyl4526 > cap(yyv4526) {

			yyrg4526 := len(yyv4526) > 0
			yyv24526 := yyv4526
			yyrl4526, yyrt4526 = z.DecInferLen(yyl4526, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt4526 {
				if yyrl4526 <= cap(yyv4526) {
					yyv4526 = yyv4526[:yyrl4526]
				} else {
					yyv4526 = make([]Service, yyrl4526)
				}
			} else {
				yyv4526 = make([]Service, yyrl4526)
			}
			yyc4526 = true
			yyrr4526 = len(yyv4526)
			if yyrg4526 {
				copy(yyv4526, yyv24526)
			}
		} else if yyl4526 != len(yyv4526) {
			yyv4526 = yyv4526[:yyl4526]
			yyc4526 = true
		}
		yyj4526 := 0
		for ; yyj4526 < yyrr4526; yyj4526++ {
			yyh4526.ElemContainerState(yyj4526)
			if r.TryDecodeAsNil() {
				yyv4526[yyj4526] = Service{}
			} else {
				yyv4527 := &yyv4526[yyj4526]
				yyv4527.CodecDecodeSelf(d)
			}

		}
		if yyrt4526 {
			for ; yyj4526 < yyl4526; yyj4526++ {
				yyv4526 = append(yyv4526, Service{})
				yyh4526.ElemContainerState(yyj4526)
				if r.TryDecodeAsNil() {
					yyv4526[yyj4526] = Service{}
				} else {
					yyv4528 := &yyv4526[yyj4526]
					yyv4528.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4526 := 0
		for ; !r.CheckBreak(); yyj4526++ {

			if yyj4526 >= len(yyv4526) {
				yyv4526 = append(yyv4526, Service{}) // var yyz4526 Service
				yyc4526 = true
			}
			yyh4526.ElemContainerState(yyj4526)
			if yyj4526 < len(yyv4526) {
				if r.TryDecodeAsNil() {
					yyv4526[yyj4526] = Service{}
				} else {
					yyv4529 := &yyv4526[yyj4526]
					yyv4529.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4526 < len(yyv4526) {
			yyv4526 = yyv4526[:yyj4526]
			yyc4526 = true
		} else if yyj4526 == 0 && yyv4526 == nil {
			yyv4526 = []Service{}
			yyc4526 = true
		}
	}
	yyh4526.End()
	if yyc4526 {
		*v = yyv4526
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4530 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4531 := &yyv4530
		yy4531.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4532 := *v
	yyh4532, yyl4532 := z.DecSliceHelperStart()
	var yyc4532 bool
	if yyl4532 == 0 {
		if yyv4532 == nil {
			yyv4532 = []ObjectReference{}
			yyc4532 = true
		} else if len(yyv4532) != 0 {
			yyv4532 = yyv4532[:0]
			yyc4532 = true
		}
	} else if yyl4532 > 0 {
		var yyrr4532, yyrl4532 int
		var yyrt4532 bool
		if yyl4532 > cap(yyv4532) {

			yyrg4532 := len(yyv4532) > 0
			yyv24532 := yyv4532
			yyrl4532, yyrt4532 = z.DecInferLen(yyl4532, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4532 {
				if yyrl4532 <= cap(yyv4532) {
					yyv4532 = yyv4532[:yyrl4532]
				} else {
					yyv4532 = make([]ObjectReference, yyrl4532)
				}
			} else {
				yyv4532 = make([]ObjectReference, yyrl4532)
			}
			yyc4532 = true
			yyrr4532 = len(yyv4532)
			if yyrg4532 {
				copy(yyv4532, yyv24532)
			}
		} else if yyl4532 != len(yyv4532) {
			yyv4532 = yyv4532[:yyl4532]
			yyc4532 = true
		}
		yyj4532 := 0
		for ; yyj4532 < yyrr4532; yyj4532++ {
			yyh4532.ElemContainerState(yyj4532)
			if r.TryDecodeAsNil() {
				yyv4532[yyj4532] = ObjectReference{}
			} else {
				yyv4533 := &yyv4532[yyj4532]
				yyv4533.CodecDecodeSelf(d)
			}

		}
		if yyrt4532 {
			for ; yyj4532 < yyl4532; yyj4532++ {
				yyv4532 = append(yyv4532, ObjectReference{})
				yyh4532.ElemContainerState(yyj4532)
				if r.TryDecodeAsNil() {
					yyv4532[yyj4532] = ObjectReference{}
				} else {
					yyv4534 := &yyv4532[yyj4532]
					yyv4534.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4532 := 0
		for ; !r.CheckBreak(); yyj4532++ {

			if yyj4532 >= len(yyv4532) {
				yyv4532 = append(yyv4532, ObjectReference{}) // var yyz4532 ObjectReference
				yyc4532 = true
			}
			yyh4532.ElemContainerState(yyj4532)
			if yyj4532 < len(yyv4532) {
				if r.TryDecodeAsNil() {
					yyv4532[yyj4532] = ObjectReference{}
				} else {
					yyv4535 := &yyv4532[yyj4532]
					yyv4535.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4532 < len(yyv4532) {
			yyv4532 = yyv4532[:yyj4532]
			yyc4532 = true
		} else if yyj4532 == 0 && yyv4532 == nil {
			yyv4532 = []ObjectReference{}
			yyc4532 = true
		}
	}
	yyh4532.End()
	if yyc4532 {
		*v = yyv4532
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4536 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4537 := &yyv4536
		yy4537.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4538 := *v
	yyh4538, yyl4538 := z.DecSliceHelperStart()
	var yyc4538 bool
	if yyl4538 == 0 {
		if yyv4538 == nil {
			yyv4538 = []ServiceAccount{}
			yyc4538 = true
		} else if len(yyv4538) != 0 {
			yyv4538 = yyv4538[:0]
			yyc4538 = true
		}
	} else if yyl4538 > 0 {
		var yyrr4538, yyrl4538 int
		var yyrt4538 bool
		if yyl4538 > cap(yyv4538) {

			yyrg4538 := len(yyv4538) > 0
			yyv24538 := yyv4538
			yyrl4538, yyrt4538 = z.DecInferLen(yyl4538, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4538 {
				if yyrl4538 <= cap(yyv4538) {
					yyv4538 = yyv4538[:yyrl4538]
				} else {
					yyv4538 = make([]ServiceAccount, yyrl4538)
				}
			} else {
				yyv4538 = make([]ServiceAccount, yyrl4538)
			}
			yyc4538 = true
			yyrr4538 = len(yyv4538)
			if yyrg4538 {
				copy(yyv4538, yyv24538)
			}
		} else if yyl4538 != len(yyv4538) {
			yyv4538 = yyv4538[:yyl4538]
			yyc4538 = true
		}
		yyj4538 := 0
		for ; yyj4538 < yyrr4538; yyj4538++ {
			yyh4538.ElemContainerState(yyj4538)
			if r.TryDecodeAsNil() {
				yyv4538[yyj4538] = ServiceAccount{}
			} else {
				yyv4539 := &yyv4538[yyj4538]
				yyv4539.CodecDecodeSelf(d)
			}

		}
		if yyrt4538 {
			for ; yyj4538 < yyl4538; yyj4538++ {
				yyv4538 = append(yyv4538, ServiceAccount{})
				yyh4538.ElemContainerState(yyj4538)
				if r.TryDecodeAsNil() {
					yyv4538[yyj4538] = ServiceAccount{}
				} else {
					yyv4540 := &yyv4538[yyj4538]
					yyv4540.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4538 := 0
		for ; !r.CheckBreak(); yyj4538++ {

			if yyj4538 >= len(yyv4538) {
				yyv4538 = append(yyv4538, ServiceAccount{}) // var yyz4538 ServiceAccount
				yyc4538 = true
			}
			yyh4538.ElemContainerState(yyj4538)
			if yyj4538 < len(yyv4538) {
				if r.TryDecodeAsNil() {
					yyv4538[yyj4538] = ServiceAccount{}
				} else {
					yyv4541 := &yyv4538[yyj4538]
					yyv4541.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4538 < len(yyv4538) {
			yyv4538 = yyv4538[:yyj4538]
			yyc4538 = true
		} else if yyj4538 == 0 && yyv4538 == nil {
			yyv4538 = []ServiceAccount{}
			yyc4538 = true
		}
	}
	yyh4538.End()
	if yyc4538 {
		*v = yyv4538
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4542 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4543 := &yyv4542
		yy4543.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4544 := *v
	yyh4544, yyl4544 := z.DecSliceHelperStart()
	var yyc4544 bool
	if yyl4544 == 0 {
		if yyv4544 == nil {
			yyv4544 = []EndpointSubset{}
			yyc4544 = true
		} else if len(yyv4544) != 0 {
			yyv4544 = yyv4544[:0]
			yyc4544 = true
		}
	} else if yyl4544 > 0 {
		var yyrr4544, yyrl4544 int
		var yyrt4544 bool
		if yyl4544 > cap(yyv4544) {

			yyrg4544 := len(yyv4544) > 0
			yyv24544 := yyv4544
			yyrl4544, yyrt4544 = z.DecInferLen(yyl4544, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4544 {
				if yyrl4544 <= cap(yyv4544) {
					yyv4544 = yyv4544[:yyrl4544]
				} else {
					yyv4544 = make([]EndpointSubset, yyrl4544)
				}
			} else {
				yyv4544 = make([]EndpointSubset, yyrl4544)
			}
			yyc4544 = true
			yyrr4544 = len(yyv4544)
			if yyrg4544 {
				copy(yyv4544, yyv24544)
			}
		} else if yyl4544 != len(yyv4544) {
			yyv4544 = yyv4544[:yyl4544]
			yyc4544 = true
		}
		yyj4544 := 0
		for ; yyj4544 < yyrr4544; yyj4544++ {
			yyh4544.ElemContainerState(yyj4544)
			if r.TryDecodeAsNil() {
				yyv4544[yyj4544] = EndpointSubset{}
			} else {
				yyv4545 := &yyv4544[yyj4544]
				yyv4545.CodecDecodeSelf(d)
			}

		}
		if yyrt4544 {
			for ; yyj4544 < yyl4544; yyj4544++ {
				yyv4544 = append(yyv4544, EndpointSubset{})
				yyh4544.ElemContainerState(yyj4544)
				if r.TryDecodeAsNil() {
					yyv4544[yyj4544] = EndpointSubset{}
				} else {
					yyv4546 := &yyv4544[yyj4544]
					yyv4546.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4544 := 0
		for ; !r.CheckBreak(); yyj4544++ {

			if yyj4544 >= len(yyv4544) {
				yyv4544 = append(yyv4544, EndpointSubset{}) // var yyz4544 EndpointSubset
				yyc4544 = true
			}
			yyh4544.ElemContainerState(yyj4544)
			if yyj4544 < len(yyv4544) {
				if r.TryDecodeAsNil() {
					yyv4544[yyj4544] = EndpointSubset{}
				} else {
					yyv4547 := &yyv4544[yyj4544]
					yyv4547.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4544 < len(yyv4544) {
			yyv4544 = yyv4544[:yyj4544]
			yyc4544 = true
		} else if yyj4544 == 0 && yyv4544 == nil {
			yyv4544 = []EndpointSubset{}
			yyc4544 = true
		}
	}
	yyh4544.End()
	if yyc4544 {
		*v = yyv4544
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4548 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4549 := &yyv4548
		yy4549.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4550 := *v
	yyh4550, yyl4550 := z.DecSliceHelperStart()
	var yyc4550 bool
	if yyl4550 == 0 {
		if yyv4550 == nil {
			yyv4550 = []EndpointAddress{}
			yyc4550 = true
		} else if len(yyv4550) != 0 {
			yyv4550 = yyv4550[:0]
			yyc4550 = true
		}
	} else if yyl4550 > 0 {
		var yyrr4550, yyrl4550 int
		var yyrt4550 bool
		if yyl4550 > cap(yyv4550) {

			yyrg4550 := len(yyv4550) > 0
			yyv24550 := yyv4550
			yyrl4550, yyrt4550 = z.DecInferLen(yyl4550, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4550 {
				if yyrl4550 <= cap(yyv4550) {
					yyv4550 = yyv4550[:yyrl4550]
				} else {
					yyv4550 = make([]EndpointAddress, yyrl4550)
				}
			} else {
				yyv4550 = make([]EndpointAddress, yyrl4550)
			}
			yyc4550 = true
			yyrr4550 = len(yyv4550)
			if yyrg4550 {
				copy(yyv4550, yyv24550)
			}
		} else if yyl4550 != len(yyv4550) {
			yyv4550 = yyv4550[:yyl4550]
			yyc4550 = true
		}
		yyj4550 := 0
		for ; yyj4550 < yyrr4550; yyj4550++ {
			yyh4550.ElemContainerState(yyj4550)
			if r.TryDecodeAsNil() {
				yyv4550[yyj4550] = EndpointAddress{}
			} else {
				yyv4551 := &yyv4550[yyj4550]
				yyv4551.CodecDecodeSelf(d)
			}

		}
		if yyrt4550 {
			for ; yyj4550 < yyl4550; yyj4550++ {
				yyv4550 = append(yyv4550, EndpointAddress{})
				yyh4550.ElemContainerState(yyj4550)
				if r.TryDecodeAsNil() {
					yyv4550[yyj4550] = EndpointAddress{}
				} else {
					yyv4552 := &yyv4550[yyj4550]
					yyv4552.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4550 := 0
		for ; !r.CheckBreak(); yyj4550++ {

			if yyj4550 >= len(yyv4550) {
				yyv4550 = append(yyv4550, EndpointAddress{}) // var yyz4550 EndpointAddress
				yyc4550 = true
			}
			yyh4550.ElemContainerState(yyj4550)
			if yyj4550 < len(yyv4550) {
				if r.TryDecodeAsNil() {
					yyv4550[yyj4550] = EndpointAddress{}
				} else {
					yyv4553 := &yyv4550[yyj4550]
					yyv4553.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4550 < len(yyv4550) {
			yyv4550 = yyv4550[:yyj4550]
			yyc4550 = true
		} else if yyj4550 == 0 && yyv4550 == nil {
			yyv4550 = []EndpointAddress{}
			yyc4550 = true
		}
	}
	yyh4550.End()
	if yyc4550 {
		*v = yyv4550
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4554 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4555 := &yyv4554
		yy4555.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4556 := *v
	yyh4556, yyl4556 := z.DecSliceHelperStart()
	var yyc4556 bool
	if yyl4556 == 0 {
		if yyv4556 == nil {
			yyv4556 = []EndpointPort{}
			yyc4556 = true
		} else if len(yyv4556) != 0 {
			yyv4556 = yyv4556[:0]
			yyc4556 = true
		}
	} else if yyl4556 > 0 {
		var yyrr4556, yyrl4556 int
		var yyrt4556 bool
		if yyl4556 > cap(yyv4556) {

			yyrg4556 := len(yyv4556) > 0
			yyv24556 := yyv4556
			yyrl4556, yyrt4556 = z.DecInferLen(yyl4556, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4556 {
				if yyrl4556 <= cap(yyv4556) {
					yyv4556 = yyv4556[:yyrl4556]
				} else {
					yyv4556 = make([]EndpointPort, yyrl4556)
				}
			} else {
				yyv4556 = make([]EndpointPort, yyrl4556)
			}
			yyc4556 = true
			yyrr4556 = len(yyv4556)
			if yyrg4556 {
				copy(yyv4556, yyv24556)
			}
		} else if yyl4556 != len(yyv4556) {
			yyv4556 = yyv4556[:yyl4556]
			yyc4556 = true
		}
		yyj4556 := 0
		for ; yyj4556 < yyrr4556; yyj4556++ {
			yyh4556.ElemContainerState(yyj4556)
			if r.TryDecodeAsNil() {
				yyv4556[yyj4556] = EndpointPort{}
			} else {
				yyv4557 := &yyv4556[yyj4556]
				yyv4557.CodecDecodeSelf(d)
			}

		}
		if yyrt4556 {
			for ; yyj4556 < yyl4556; yyj4556++ {
				yyv4556 = append(yyv4556, EndpointPort{})
				yyh4556.ElemContainerState(yyj4556)
				if r.TryDecodeAsNil() {
					yyv4556[yyj4556] = EndpointPort{}
				} else {
					yyv4558 := &yyv4556[yyj4556]
					yyv4558.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4556 := 0
		for ; !r.CheckBreak(); yyj4556++ {

			if yyj4556 >= len(yyv4556) {
				yyv4556 = append(yyv4556, EndpointPort{}) // var yyz4556 EndpointPort
				yyc4556 = true
			}
			yyh4556.ElemContainerState(yyj4556)
			if yyj4556 < len(yyv4556) {
				if r.TryDecodeAsNil() {
					yyv4556[yyj4556] = EndpointPort{}
				} else {
					yyv4559 := &yyv4556[yyj4556]
					yyv4559.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4556 < len(yyv4556) {
			yyv4556 = yyv4556[:yyj4556]
			yyc4556 = true
		} else if yyj4556 == 0 && yyv4556 == nil {
			yyv4556 = []EndpointPort{}
			yyc4556 = true
		}
	}
	yyh4556.End()
	if yyc4556 {
		*v = yyv4556
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4560 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4561 := &yyv4560
		yy4561.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4562 := *v
	yyh4562, yyl4562 := z.DecSliceHelperStart()
	var yyc4562 bool
	if yyl4562 == 0 {
		if yyv4562 == nil {
			yyv4562 = []Endpoints{}
			yyc4562 = true
		} else if len(yyv4562) != 0 {
			yyv4562 = yyv4562[:0]
			yyc4562 = true
		}
	} else if yyl4562 > 0 {
		var yyrr4562, yyrl4562 int
		var yyrt4562 bool
		if yyl4562 > cap(yyv4562) {

			yyrg4562 := len(yyv4562) > 0
			yyv24562 := yyv4562
			yyrl4562, yyrt4562 = z.DecInferLen(yyl4562, z.DecBasicHandle().MaxInitLen, 272)
			if yyrt4562 {
				if yyrl4562 <= cap(yyv4562) {
					yyv4562 = yyv4562[:yyrl4562]
				} else {
					yyv4562 = make([]Endpoints, yyrl4562)
				}
			} else {
				yyv4562 = make([]Endpoints, yyrl4562)
			}
			yyc4562 = true
			yyrr4562 = len(yyv4562)
			if yyrg4562 {
				copy(yyv4562, yyv24562)
			}
		} else if yyl4562 != len(yyv4562) {
			yyv4562 = yyv4562[:yyl4562]
			yyc4562 = true
		}
		yyj4562 := 0
		for ; yyj4562 < yyrr4562; yyj4562++ {
			yyh4562.ElemContainerState(yyj4562)
			if r.TryDecodeAsNil() {
				yyv4562[yyj4562] = Endpoints{}
			} else {
				yyv4563 := &yyv4562[yyj4562]
				yyv4563.CodecDecodeSelf(d)
			}

		}
		if yyrt4562 {
			for ; yyj4562 < yyl4562; yyj4562++ {
				yyv4562 = append(yyv4562, Endpoints{})
				yyh4562.ElemContainerState(yyj4562)
				if r.TryDecodeAsNil() {
					yyv4562[yyj4562] = Endpoints{}
				} else {
					yyv4564 := &yyv4562[yyj4562]
					yyv4564.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4562 := 0
		for ; !r.CheckBreak(); yyj4562++ {

			if yyj4562 >= len(yyv4562) {
				yyv4562 = append(yyv4562, Endpoints{}) // var yyz4562 Endpoints
				yyc4562 = true
			}
			yyh4562.ElemContainerState(yyj4562)
			if yyj4562 < len(yyv4562) {
				if r.TryDecodeAsNil() {
					yyv4562[yyj4562] = Endpoints{}
				} else {
					yyv4565 := &yyv4562[yyj4562]
					yyv4565.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4562 < len(yyv4562) {
			yyv4562 = yyv4562[:yyj4562]
			yyc4562 = true
		} else if yyj4562 == 0 && yyv4562 == nil {
			yyv4562 = []Endpoints{}
			yyc4562 = true
		}
	}
	yyh4562.End()
	if yyc4562 {
		*v = yyv4562
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4566 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4567 := &yyv4566
		yy4567.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4568 := *v
	yyh4568, yyl4568 := z.DecSliceHelperStart()
	var yyc4568 bool
	if yyl4568 == 0 {
		if yyv4568 == nil {
			yyv4568 = []NodeCondition{}
			yyc4568 = true
		} else if len(yyv4568) != 0 {
			yyv4568 = yyv4568[:0]
			yyc4568 = true
		}
	} else if yyl4568 > 0 {
		var yyrr4568, yyrl4568 int
		var yyrt4568 bool
		if yyl4568 > cap(yyv4568) {

			yyrg4568 := len(yyv4568) > 0
			yyv24568 := yyv4568
			yyrl4568, yyrt4568 = z.DecInferLen(yyl4568, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4568 {
				if yyrl4568 <= cap(yyv4568) {
					yyv4568 = yyv4568[:yyrl4568]
				} else {
					yyv4568 = make([]NodeCondition, yyrl4568)
				}
			} else {
				yyv4568 = make([]NodeCondition, yyrl4568)
			}
			yyc4568 = true
			yyrr4568 = len(yyv4568)
			if yyrg4568 {
				copy(yyv4568, yyv24568)
			}
		} else if yyl4568 != len(yyv4568) {
			yyv4568 = yyv4568[:yyl4568]
			yyc4568 = true
		}
		yyj4568 := 0
		for ; yyj4568 < yyrr4568; yyj4568++ {
			yyh4568.ElemContainerState(yyj4568)
			if r.TryDecodeAsNil() {
				yyv4568[yyj4568] = NodeCondition{}
			} else {
				yyv4569 := &yyv4568[yyj4568]
				yyv4569.CodecDecodeSelf(d)
			}

		}
		if yyrt4568 {
			for ; yyj4568 < yyl4568; yyj4568++ {
				yyv4568 = append(yyv4568, NodeCondition{})
				yyh4568.ElemContainerState(yyj4568)
				if r.TryDecodeAsNil() {
					yyv4568[yyj4568] = NodeCondition{}
				} else {
					yyv4570 := &yyv4568[yyj4568]
					yyv4570.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4568 := 0
		for ; !r.CheckBreak(); yyj4568++ {

			if yyj4568 >= len(yyv4568) {
				yyv4568 = append(yyv4568, NodeCondition{}) // var yyz4568 NodeCondition
				yyc4568 = true
			}
			yyh4568.ElemContainerState(yyj4568)
			if yyj4568 < len(yyv4568) {
				if r.TryDecodeAsNil() {
					yyv4568[yyj4568] = NodeCondition{}
				} else {
					yyv4571 := &yyv4568[yyj4568]
					yyv4571.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4568 < len(yyv4568) {
			yyv4568 = yyv4568[:yyj4568]
			yyc4568 = true
		} else if yyj4568 == 0 && yyv4568 == nil {
			yyv4568 = []NodeCondition{}
			yyc4568 = true
		}
	}
	yyh4568.End()
	if yyc4568 {
		*v = yyv4568
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4572 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4573 := &yyv4572
		yy4573.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4574 := *v
	yyh4574, yyl4574 := z.DecSliceHelperStart()
	var yyc4574 bool
	if yyl4574 == 0 {
		if yyv4574 == nil {
			yyv4574 = []NodeAddress{}
			yyc4574 = true
		} else if len(yyv4574) != 0 {
			yyv4574 = yyv4574[:0]
			yyc4574 = true
		}
	} else if yyl4574 > 0 {
		var yyrr4574, yyrl4574 int
		var yyrt4574 bool
		if yyl4574 > cap(yyv4574) {

			yyrg4574 := len(yyv4574) > 0
			yyv24574 := yyv4574
			yyrl4574, yyrt4574 = z.DecInferLen(yyl4574, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4574 {
				if yyrl4574 <= cap(yyv4574) {
					yyv4574 = yyv4574[:yyrl4574]
				} else {
					yyv4574 = make([]NodeAddress, yyrl4574)
				}
			} else {
				yyv4574 = make([]NodeAddress, yyrl4574)
			}
			yyc4574 = true
			yyrr4574 = len(yyv4574)
			if yyrg4574 {
				copy(yyv4574, yyv24574)
			}
		} else if yyl4574 != len(yyv4574) {
			yyv4574 = yyv4574[:yyl4574]
			yyc4574 = true
		}
		yyj4574 := 0
		for ; yyj4574 < yyrr4574; yyj4574++ {
			yyh4574.ElemContainerState(yyj4574)
			if r.TryDecodeAsNil() {
				yyv4574[yyj4574] = NodeAddress{}
			} else {
				yyv4575 := &yyv4574[yyj4574]
				yyv4575.CodecDecodeSelf(d)
			}

		}
		if yyrt4574 {
			for ; yyj4574 < yyl4574; yyj4574++ {
				yyv4574 = append(yyv4574, NodeAddress{})
				yyh4574.ElemContainerState(yyj4574)
				if r.TryDecodeAsNil() {
					yyv4574[yyj4574] = NodeAddress{}
				} else {
					yyv4576 := &yyv4574[yyj4574]
					yyv4576.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4574 := 0
		for ; !r.CheckBreak(); yyj4574++ {

			if yyj4574 >= len(yyv4574) {
				yyv4574 = append(yyv4574, NodeAddress{}) // var yyz4574 NodeAddress
				yyc4574 = true
			}
			yyh4574.ElemContainerState(yyj4574)
			if yyj4574 < len(yyv4574) {
				if r.TryDecodeAsNil() {
					yyv4574[yyj4574] = NodeAddress{}
				} else {
					yyv4577 := &yyv4574[yyj4574]
					yyv4577.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4574 < len(yyv4574) {
			yyv4574 = yyv4574[:yyj4574]
			yyc4574 = true
		} else if yyj4574 == 0 && yyv4574 == nil {
			yyv4574 = []NodeAddress{}
			yyc4574 = true
		}
	}
	yyh4574.End()
	if yyc4574 {
		*v = yyv4574
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4578 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4579 := &yyv4578
		yy4579.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4580 := *v
	yyh4580, yyl4580 := z.DecSliceHelperStart()
	var yyc4580 bool
	if yyl4580 == 0 {
		if yyv4580 == nil {
			yyv4580 = []ContainerImage{}
			yyc4580 = true
		} else if len(yyv4580) != 0 {
			yyv4580 = yyv4580[:0]
			yyc4580 = true
		}
	} else if yyl4580 > 0 {
		var yyrr4580, yyrl4580 int
		var yyrt4580 bool
		if yyl4580 > cap(yyv4580) {

			yyrg4580 := len(yyv4580) > 0
			yyv24580 := yyv4580
			yyrl4580, yyrt4580 = z.DecInferLen(yyl4580, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4580 {
				if yyrl4580 <= cap(yyv4580) {
					yyv4580 = yyv4580[:yyrl4580]
				} else {
					yyv4580 = make([]ContainerImage, yyrl4580)
				}
			} else {
				yyv4580 = make([]ContainerImage, yyrl4580)
			}
			yyc4580 = true
			yyrr4580 = len(yyv4580)
			if yyrg4580 {
				copy(yyv4580, yyv24580)
			}
		} else if yyl4580 != len(yyv4580) {
			yyv4580 = yyv4580[:yyl4580]
			yyc4580 = true
		}
		yyj4580 := 0
		for ; yyj4580 < yyrr4580; yyj4580++ {
			yyh4580.ElemContainerState(yyj4580)
			if r.TryDecodeAsNil() {
				yyv4580[yyj4580] = ContainerImage{}
			} else {
				yyv4581 := &yyv4580[yyj4580]
				yyv4581.CodecDecodeSelf(d)
			}

		}
		if yyrt4580 {
			for ; yyj4580 < yyl4580; yyj4580++ {
				yyv4580 = append(yyv4580, ContainerImage{})
				yyh4580.ElemContainerState(yyj4580)
				if r.TryDecodeAsNil() {
					yyv4580[yyj4580] = ContainerImage{}
				} else {
					yyv4582 := &yyv4580[yyj4580]
					yyv4582.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4580 := 0
		for ; !r.CheckBreak(); yyj4580++ {

			if yyj4580 >= len(yyv4580) {
				yyv4580 = append(yyv4580, ContainerImage{}) // var yyz4580 ContainerImage
				yyc4580 = true
			}
			yyh4580.ElemContainerState(yyj4580)
			if yyj4580 < len(yyv4580) {
				if r.TryDecodeAsNil() {
					yyv4580[yyj4580] = ContainerImage{}
				} else {
					yyv4583 := &yyv4580[yyj4580]
					yyv4583.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4580 < len(yyv4580) {
			yyv4580 = yyv4580[:yyj4580]
			yyc4580 = true
		} else if yyj4580 == 0 && yyv4580 == nil {
			yyv4580 = []ContainerImage{}
			yyc4580 = true
		}
	}
	yyh4580.End()
	if yyc4580 {
		*v = yyv4580
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4584 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4584.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4585 := *v
	yyh4585, yyl4585 := z.DecSliceHelperStart()
	var yyc4585 bool
	if yyl4585 == 0 {
		if yyv4585 == nil {
			yyv4585 = []UniqueVolumeName{}
			yyc4585 = true
		} else if len(yyv4585) != 0 {
			yyv4585 = yyv4585[:0]
			yyc4585 = true
		}
	} else if yyl4585 > 0 {
		var yyrr4585, yyrl4585 int
		var yyrt4585 bool
		if yyl4585 > cap(yyv4585) {

			yyrl4585, yyrt4585 = z.DecInferLen(yyl4585, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4585 {
				if yyrl4585 <= cap(yyv4585) {
					yyv4585 = yyv4585[:yyrl4585]
				} else {
					yyv4585 = make([]UniqueVolumeName, yyrl4585)
				}
			} else {
				yyv4585 = make([]UniqueVolumeName, yyrl4585)
			}
			yyc4585 = true
			yyrr4585 = len(yyv4585)
		} else if yyl4585 != len(yyv4585) {
			yyv4585 = yyv4585[:yyl4585]
			yyc4585 = true
		}
		yyj4585 := 0
		for ; yyj4585 < yyrr4585; yyj4585++ {
			yyh4585.ElemContainerState(yyj4585)
			if r.TryDecodeAsNil() {
				yyv4585[yyj4585] = ""
			} else {
				yyv4585[yyj4585] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4585 {
			for ; yyj4585 < yyl4585; yyj4585++ {
				yyv4585 = append(yyv4585, "")
				yyh4585.ElemContainerState(yyj4585)
				if r.TryDecodeAsNil() {
					yyv4585[yyj4585] = ""
				} else {
					yyv4585[yyj4585] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4585 := 0
		for ; !r.CheckBreak(); yyj4585++ {

			if yyj4585 >= len(yyv4585) {
				yyv4585 = append(yyv4585, "") // var yyz4585 UniqueVolumeName
				yyc4585 = true
			}
			yyh4585.ElemContainerState(yyj4585)
			if yyj4585 < len(yyv4585) {
				if r.TryDecodeAsNil() {
					yyv4585[yyj4585] = ""
				} else {
					yyv4585[yyj4585] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4585 < len(yyv4585) {
			yyv4585 = yyv4585[:yyj4585]
			yyc4585 = true
		} else if yyj4585 == 0 && yyv4585 == nil {
			yyv4585 = []UniqueVolumeName{}
			yyc4585 = true
		}
	}
	yyh4585.End()
	if yyc4585 {
		*v = yyv4585
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4589 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4590 := &yyv4589
		yy4590.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4591 := *v
	yyh4591, yyl4591 := z.DecSliceHelperStart()
	var yyc4591 bool
	if yyl4591 == 0 {
		if yyv4591 == nil {
			yyv4591 = []AttachedVolume{}
			yyc4591 = true
		} else if len(yyv4591) != 0 {
			yyv4591 = yyv4591[:0]
			yyc4591 = true
		}
	} else if yyl4591 > 0 {
		var yyrr4591, yyrl4591 int
		var yyrt4591 bool
		if yyl4591 > cap(yyv4591) {

			yyrg4591 := len(yyv4591) > 0
			yyv24591 := yyv4591
			yyrl4591, yyrt4591 = z.DecInferLen(yyl4591, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4591 {
				if yyrl4591 <= cap(yyv4591) {
					yyv4591 = yyv4591[:yyrl4591]
				} else {
					yyv4591 = make([]AttachedVolume, yyrl4591)
				}
			} else {
				yyv4591 = make([]AttachedVolume, yyrl4591)
			}
			yyc4591 = true
			yyrr4591 = len(yyv4591)
			if yyrg4591 {
				copy(yyv4591, yyv24591)
			}
		} else if yyl4591 != len(yyv4591) {
			yyv4591 = yyv4591[:yyl4591]
			yyc4591 = true
		}
		yyj4591 := 0
		for ; yyj4591 < yyrr4591; yyj4591++ {
			yyh4591.ElemContainerState(yyj4591)
			if r.TryDecodeAsNil() {
				yyv4591[yyj4591] = AttachedVolume{}
			} else {
				yyv4592 := &yyv4591[yyj4591]
				yyv4592.CodecDecodeSelf(d)
			}

		}
		if yyrt4591 {
			for ; yyj4591 < yyl4591; yyj4591++ {
				yyv4591 = append(yyv4591, AttachedVolume{})
				yyh4591.ElemContainerState(yyj4591)
				if r.TryDecodeAsNil() {
					yyv4591[yyj4591] = AttachedVolume{}
				} else {
					yyv4593 := &yyv4591[yyj4591]
					yyv4593.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4591 := 0
		for ; !r.CheckBreak(); yyj4591++ {

			if yyj4591 >= len(yyv4591) {
				yyv4591 = append(yyv4591, AttachedVolume{}) // var yyz4591 AttachedVolume
				yyc4591 = true
			}
			yyh4591.ElemContainerState(yyj4591)
			if yyj4591 < len(yyv4591) {
				if r.TryDecodeAsNil() {
					yyv4591[yyj4591] = AttachedVolume{}
				} else {
					yyv4594 := &yyv4591[yyj4591]
					yyv4594.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4591 < len(yyv4591) {
			yyv4591 = yyv4591[:yyj4591]
			yyc4591 = true
		} else if yyj4591 == 0 && yyv4591 == nil {
			yyv4591 = []AttachedVolume{}
			yyc4591 = true
		}
	}
	yyh4591.End()
	if yyc4591 {
		*v = yyv4591
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4595 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4596 := &yyv4595
		yy4596.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4597 := *v
	yyh4597, yyl4597 := z.DecSliceHelperStart()
	var yyc4597 bool
	if yyl4597 == 0 {
		if yyv4597 == nil {
			yyv4597 = []PreferAvoidPodsEntry{}
			yyc4597 = true
		} else if len(yyv4597) != 0 {
			yyv4597 = yyv4597[:0]
			yyc4597 = true
		}
	} else if yyl4597 > 0 {
		var yyrr4597, yyrl4597 int
		var yyrt4597 bool
		if yyl4597 > cap(yyv4597) {

			yyrg4597 := len(yyv4597) > 0
			yyv24597 := yyv4597
			yyrl4597, yyrt4597 = z.DecInferLen(yyl4597, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4597 {
				if yyrl4597 <= cap(yyv4597) {
					yyv4597 = yyv4597[:yyrl4597]
				} else {
					yyv4597 = make([]PreferAvoidPodsEntry, yyrl4597)
				}
			} else {
				yyv4597 = make([]PreferAvoidPodsEntry, yyrl4597)
			}
			yyc4597 = true
			yyrr4597 = len(yyv4597)
			if yyrg4597 {
				copy(yyv4597, yyv24597)
			}
		} else if yyl4597 != len(yyv4597) {
			yyv4597 = yyv4597[:yyl4597]
			yyc4597 = true
		}
		yyj4597 := 0
		for ; yyj4597 < yyrr4597; yyj4597++ {
			yyh4597.ElemContainerState(yyj4597)
			if r.TryDecodeAsNil() {
				yyv4597[yyj4597] = PreferAvoidPodsEntry{}
			} else {
				yyv4598 := &yyv4597[yyj4597]
				yyv4598.CodecDecodeSelf(d)
			}

		}
		if yyrt4597 {
			for ; yyj4597 < yyl4597; yyj4597++ {
				yyv4597 = append(yyv4597, PreferAvoidPodsEntry{})
				yyh4597.ElemContainerState(yyj4597)
				if r.TryDecodeAsNil() {
					yyv4597[yyj4597] = PreferAvoidPodsEntry{}
				} else {
					yyv4599 := &yyv4597[yyj4597]
					yyv4599.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4597 := 0
		for ; !r.CheckBreak(); yyj4597++ {

			if yyj4597 >= len(yyv4597) {
				yyv4597 = append(yyv4597, PreferAvoidPodsEntry{}) // var yyz4597 PreferAvoidPodsEntry
				yyc4597 = true
			}
			yyh4597.ElemContainerState(yyj4597)
			if yyj4597 < len(yyv4597) {
				if r.TryDecodeAsNil() {
					yyv4597[yyj4597] = PreferAvoidPodsEntry{}
				} else {
					yyv4600 := &yyv4597[yyj4597]
					yyv4600.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4597 < len(yyv4597) {
			yyv4597 = yyv4597[:yyj4597]
			yyc4597 = true
		} else if yyj4597 == 0 && yyv4597 == nil {
			yyv4597 = []PreferAvoidPodsEntry{}
			yyc4597 = true
		}
	}
	yyh4597.End()
	if yyc4597 {
		*v = yyv4597
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4601, yyv4601 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4601.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4602 := &yyv4601
		yym4603 := z.EncBinary()
		_ = yym4603
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4602) {
		} else if !yym4603 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4602)
		} else {
			z.EncFallback(yy4602)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4604 := *v
	yyl4604 := r.ReadMapStart()
	yybh4604 := z.DecBasicHandle()
	if yyv4604 == nil {
		yyrl4604, _ := z.DecInferLen(yyl4604, yybh4604.MaxInitLen, 72)
		yyv4604 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4604)
		*v = yyv4604
	}
	var yymk4604 ResourceName
	var yymv4604 pkg3_resource.Quantity
	var yymg4604 bool
	if yybh4604.MapValueReset {
		yymg4604 = true
	}
	if yyl4604 > 0 {
		for yyj4604 := 0; yyj4604 < yyl4604; yyj4604++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4604 = ""
			} else {
				yymk4604 = ResourceName(r.DecodeString())
			}

			if yymg4604 {
				yymv4604 = yyv4604[yymk4604]
			} else {
				yymv4604 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4604 = pkg3_resource.Quantity{}
			} else {
				yyv4606 := &yymv4604
				yym4607 := z.DecBinary()
				_ = yym4607
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4606) {
				} else if !yym4607 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4606)
				} else {
					z.DecFallback(yyv4606, false)
				}
			}

			if yyv4604 != nil {
				yyv4604[yymk4604] = yymv4604
			}
		}
	} else if yyl4604 < 0 {
		for yyj4604 := 0; !r.CheckBreak(); yyj4604++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4604 = ""
			} else {
				yymk4604 = ResourceName(r.DecodeString())
			}

			if yymg4604 {
				yymv4604 = yyv4604[yymk4604]
			} else {
				yymv4604 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4604 = pkg3_resource.Quantity{}
			} else {
				yyv4609 := &yymv4604
				yym4610 := z.DecBinary()
				_ = yym4610
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4609) {
				} else if !yym4610 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4609)
				} else {
					z.DecFallback(yyv4609, false)
				}
			}

			if yyv4604 != nil {
				yyv4604[yymk4604] = yymv4604
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4611 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4612 := &yyv4611
		yy4612.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4613 := *v
	yyh4613, yyl4613 := z.DecSliceHelperStart()
	var yyc4613 bool
	if yyl4613 == 0 {
		if yyv4613 == nil {
			yyv4613 = []Node{}
			yyc4613 = true
		} else if len(yyv4613) != 0 {
			yyv4613 = yyv4613[:0]
			yyc4613 = true
		}
	} else if yyl4613 > 0 {
		var yyrr4613, yyrl4613 int
		var yyrt4613 bool
		if yyl4613 > cap(yyv4613) {

			yyrg4613 := len(yyv4613) > 0
			yyv24613 := yyv4613
			yyrl4613, yyrt4613 = z.DecInferLen(yyl4613, z.DecBasicHandle().MaxInitLen, 624)
			if yyrt4613 {
				if yyrl4613 <= cap(yyv4613) {
					yyv4613 = yyv4613[:yyrl4613]
				} else {
					yyv4613 = make([]Node, yyrl4613)
				}
			} else {
				yyv4613 = make([]Node, yyrl4613)
			}
			yyc4613 = true
			yyrr4613 = len(yyv4613)
			if yyrg4613 {
				copy(yyv4613, yyv24613)
			}
		} else if yyl4613 != len(yyv4613) {
			yyv4613 = yyv4613[:yyl4613]
			yyc4613 = true
		}
		yyj4613 := 0
		for ; yyj4613 < yyrr4613; yyj4613++ {
			yyh4613.ElemContainerState(yyj4613)
			if r.TryDecodeAsNil() {
				yyv4613[yyj4613] = Node{}
			} else {
				yyv4614 := &yyv4613[yyj4613]
				yyv4614.CodecDecodeSelf(d)
			}

		}
		if yyrt4613 {
			for ; yyj4613 < yyl4613; yyj4613++ {
				yyv4613 = append(yyv4613, Node{})
				yyh4613.ElemContainerState(yyj4613)
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = Node{}
				} else {
					yyv4615 := &yyv4613[yyj4613]
					yyv4615.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4613 := 0
		for ; !r.CheckBreak(); yyj4613++ {

			if yyj4613 >= len(yyv4613) {
				yyv4613 = append(yyv4613, Node{}) // var yyz4613 Node
				yyc4613 = true
			}
			yyh4613.ElemContainerState(yyj4613)
			if yyj4613 < len(yyv4613) {
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = Node{}
				} else {
					yyv4616 := &yyv4613[yyj4613]
					yyv4616.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4613 < len(yyv4613) {
			yyv4613 = yyv4613[:yyj4613]
			yyc4613 = true
		} else if yyj4613 == 0 && yyv4613 == nil {
			yyv4613 = []Node{}
			yyc4613 = true
		}
	}
	yyh4613.End()
	if yyc4613 {
		*v = yyv4613
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4617 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4617.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4618 := *v
	yyh4618, yyl4618 := z.DecSliceHelperStart()
	var yyc4618 bool
	if yyl4618 == 0 {
		if yyv4618 == nil {
			yyv4618 = []FinalizerName{}
			yyc4618 = true
		} else if len(yyv4618) != 0 {
			yyv4618 = yyv4618[:0]
			yyc4618 = true
		}
	} else if yyl4618 > 0 {
		var yyrr4618, yyrl4618 int
		var yyrt4618 bool
		if yyl4618 > cap(yyv4618) {

			yyrl4618, yyrt4618 = z.DecInferLen(yyl4618, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4618 {
				if yyrl4618 <= cap(yyv4618) {
					yyv4618 = yyv4618[:yyrl4618]
				} else {
					yyv4618 = make([]FinalizerName, yyrl4618)
				}
			} else {
				yyv4618 = make([]FinalizerName, yyrl4618)
			}
			yyc4618 = true
			yyrr4618 = len(yyv4618)
		} else if yyl4618 != len(yyv4618) {
			yyv4618 = yyv4618[:yyl4618]
			yyc4618 = true
		}
		yyj4618 := 0
		for ; yyj4618 < yyrr4618; yyj4618++ {
			yyh4618.ElemContainerState(yyj4618)
			if r.TryDecodeAsNil() {
				yyv4618[yyj4618] = ""
			} else {
				yyv4618[yyj4618] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4618 {
			for ; yyj4618 < yyl4618; yyj4618++ {
				yyv4618 = append(yyv4618, "")
				yyh4618.ElemContainerState(yyj4618)
				if r.TryDecodeAsNil() {
					yyv4618[yyj4618] = ""
				} else {
					yyv4618[yyj4618] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4618 := 0
		for ; !r.CheckBreak(); yyj4618++ {

			if yyj4618 >= len(yyv4618) {
				yyv4618 = append(yyv4618, "") // var yyz4618 FinalizerName
				yyc4618 = true
			}
			yyh4618.ElemContainerState(yyj4618)
			if yyj4618 < len(yyv4618) {
				if r.TryDecodeAsNil() {
					yyv4618[yyj4618] = ""
				} else {
					yyv4618[yyj4618] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4618 < len(yyv4618) {
			yyv4618 = yyv4618[:yyj4618]
			yyc4618 = true
		} else if yyj4618 == 0 && yyv4618 == nil {
			yyv4618 = []FinalizerName{}
			yyc4618 = true
		}
	}
	yyh4618.End()
	if yyc4618 {
		*v = yyv4618
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4622 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4623 := &yyv4622
		yy4623.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4624 := *v
	yyh4624, yyl4624 := z.DecSliceHelperStart()
	var yyc4624 bool
	if yyl4624 == 0 {
		if yyv4624 == nil {
			yyv4624 = []Namespace{}
			yyc4624 = true
		} else if len(yyv4624) != 0 {
			yyv4624 = yyv4624[:0]
			yyc4624 = true
		}
	} else if yyl4624 > 0 {
		var yyrr4624, yyrl4624 int
		var yyrt4624 bool
		if yyl4624 > cap(yyv4624) {

			yyrg4624 := len(yyv4624) > 0
			yyv24624 := yyv4624
			yyrl4624, yyrt4624 = z.DecInferLen(yyl4624, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4624 {
				if yyrl4624 <= cap(yyv4624) {
					yyv4624 = yyv4624[:yyrl4624]
				} else {
					yyv4624 = make([]Namespace, yyrl4624)
				}
			} else {
				yyv4624 = make([]Namespace, yyrl4624)
			}
			yyc4624 = true
			yyrr4624 = len(yyv4624)
			if yyrg4624 {
				copy(yyv4624, yyv24624)
			}
		} else if yyl4624 != len(yyv4624) {
			yyv4624 = yyv4624[:yyl4624]
			yyc4624 = true
		}
		yyj4624 := 0
		for ; yyj4624 < yyrr4624; yyj4624++ {
			yyh4624.ElemContainerState(yyj4624)
			if r.TryDecodeAsNil() {
				yyv4624[yyj4624] = Namespace{}
			} else {
				yyv4625 := &yyv4624[yyj4624]
				yyv4625.CodecDecodeSelf(d)
			}

		}
		if yyrt4624 {
			for ; yyj4624 < yyl4624; yyj4624++ {
				yyv4624 = append(yyv4624, Namespace{})
				yyh4624.ElemContainerState(yyj4624)
				if r.TryDecodeAsNil() {
					yyv4624[yyj4624] = Namespace{}
				} else {
					yyv4626 := &yyv4624[yyj4624]
					yyv4626.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4624 := 0
		for ; !r.CheckBreak(); yyj4624++ {

			if yyj4624 >= len(yyv4624) {
				yyv4624 = append(yyv4624, Namespace{}) // var yyz4624 Namespace
				yyc4624 = true
			}
			yyh4624.ElemContainerState(yyj4624)
			if yyj4624 < len(yyv4624) {
				if r.TryDecodeAsNil() {
					yyv4624[yyj4624] = Namespace{}
				} else {
					yyv4627 := &yyv4624[yyj4624]
					yyv4627.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4624 < len(yyv4624) {
			yyv4624 = yyv4624[:yyj4624]
			yyc4624 = true
		} else if yyj4624 == 0 && yyv4624 == nil {
			yyv4624 = []Namespace{}
			yyc4624 = true
		}
	}
	yyh4624.End()
	if yyc4624 {
		*v = yyv4624
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4628 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4629 := &yyv4628
		yy4629.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4630 := *v
	yyh4630, yyl4630 := z.DecSliceHelperStart()
	var yyc4630 bool
	if yyl4630 == 0 {
		if yyv4630 == nil {
			yyv4630 = []Event{}
			yyc4630 = true
		} else if len(yyv4630) != 0 {
			yyv4630 = yyv4630[:0]
			yyc4630 = true
		}
	} else if yyl4630 > 0 {
		var yyrr4630, yyrl4630 int
		var yyrt4630 bool
		if yyl4630 > cap(yyv4630) {

			yyrg4630 := len(yyv4630) > 0
			yyv24630 := yyv4630
			yyrl4630, yyrt4630 = z.DecInferLen(yyl4630, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt4630 {
				if yyrl4630 <= cap(yyv4630) {
					yyv4630 = yyv4630[:yyrl4630]
				} else {
					yyv4630 = make([]Event, yyrl4630)
				}
			} else {
				yyv4630 = make([]Event, yyrl4630)
			}
			yyc4630 = true
			yyrr4630 = len(yyv4630)
			if yyrg4630 {
				copy(yyv4630, yyv24630)
			}
		} else if yyl4630 != len(yyv4630) {
			yyv4630 = yyv4630[:yyl4630]
			yyc4630 = true
		}
		yyj4630 := 0
		for ; yyj4630 < yyrr4630; yyj4630++ {
			yyh4630.ElemContainerState(yyj4630)
			if r.TryDecodeAsNil() {
				yyv4630[yyj4630] = Event{}
			} else {
				yyv4631 := &yyv4630[yyj4630]
				yyv4631.CodecDecodeSelf(d)
			}

		}
		if yyrt4630 {
			for ; yyj4630 < yyl4630; yyj4630++ {
				yyv4630 = append(yyv4630, Event{})
				yyh4630.ElemContainerState(yyj4630)
				if r.TryDecodeAsNil() {
					yyv4630[yyj4630] = Event{}
				} else {
					yyv4632 := &yyv4630[yyj4630]
					yyv4632.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4630 := 0
		for ; !r.CheckBreak(); yyj4630++ {

			if yyj4630 >= len(yyv4630) {
				yyv4630 = append(yyv4630, Event{}) // var yyz4630 Event
				yyc4630 = true
			}
			yyh4630.ElemContainerState(yyj4630)
			if yyj4630 < len(yyv4630) {
				if r.TryDecodeAsNil() {
					yyv4630[yyj4630] = Event{}
				} else {
					yyv4633 := &yyv4630[yyj4630]
					yyv4633.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4630 < len(yyv4630) {
			yyv4630 = yyv4630[:yyj4630]
			yyc4630 = true
		} else if yyj4630 == 0 && yyv4630 == nil {
			yyv4630 = []Event{}
			yyc4630 = true
		}
	}
	yyh4630.End()
	if yyc4630 {
		*v = yyv4630
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4634 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4635 := &yyv4634
		yym4636 := z.EncBinary()
		_ = yym4636
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4635) {
		} else if !yym4636 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4635)
		} else {
			z.EncFallback(yy4635)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4637 := *v
	yyh4637, yyl4637 := z.DecSliceHelperStart()
	var yyc4637 bool
	if yyl4637 == 0 {
		if yyv4637 == nil {
			yyv4637 = []pkg5_runtime.RawExtension{}
			yyc4637 = true
		} else if len(yyv4637) != 0 {
			yyv4637 = yyv4637[:0]
			yyc4637 = true
		}
	} else if yyl4637 > 0 {
		var yyrr4637, yyrl4637 int
		var yyrt4637 bool
		if yyl4637 > cap(yyv4637) {

			yyrg4637 := len(yyv4637) > 0
			yyv24637 := yyv4637
			yyrl4637, yyrt4637 = z.DecInferLen(yyl4637, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4637 {
				if yyrl4637 <= cap(yyv4637) {
					yyv4637 = yyv4637[:yyrl4637]
				} else {
					yyv4637 = make([]pkg5_runtime.RawExtension, yyrl4637)
				}
			} else {
				yyv4637 = make([]pkg5_runtime.RawExtension, yyrl4637)
			}
			yyc4637 = true
			yyrr4637 = len(yyv4637)
			if yyrg4637 {
				copy(yyv4637, yyv24637)
			}
		} else if yyl4637 != len(yyv4637) {
			yyv4637 = yyv4637[:yyl4637]
			yyc4637 = true
		}
		yyj4637 := 0
		for ; yyj4637 < yyrr4637; yyj4637++ {
			yyh4637.ElemContainerState(yyj4637)
			if r.TryDecodeAsNil() {
				yyv4637[yyj4637] = pkg5_runtime.RawExtension{}
			} else {
				yyv4638 := &yyv4637[yyj4637]
				yym4639 := z.DecBinary()
				_ = yym4639
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4638) {
				} else if !yym4639 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4638)
				} else {
					z.DecFallback(yyv4638, false)
				}
			}

		}
		if yyrt4637 {
			for ; yyj4637 < yyl4637; yyj4637++ {
				yyv4637 = append(yyv4637, pkg5_runtime.RawExtension{})
				yyh4637.ElemContainerState(yyj4637)
				if r.TryDecodeAsNil() {
					yyv4637[yyj4637] = pkg5_runtime.RawExtension{}
				} else {
					yyv4640 := &yyv4637[yyj4637]
					yym4641 := z.DecBinary()
					_ = yym4641
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4640) {
					} else if !yym4641 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4640)
					} else {
						z.DecFallback(yyv4640, false)
					}
				}

			}
		}

	} else {
		yyj4637 := 0
		for ; !r.CheckBreak(); yyj4637++ {

			if yyj4637 >= len(yyv4637) {
				yyv4637 = append(yyv4637, pkg5_runtime.RawExtension{}) // var yyz4637 pkg5_runtime.RawExtension
				yyc4637 = true
			}
			yyh4637.ElemContainerState(yyj4637)
			if yyj4637 < len(yyv4637) {
				if r.TryDecodeAsNil() {
					yyv4637[yyj4637] = pkg5_runtime.RawExtension{}
				} else {
					yyv4642 := &yyv4637[yyj4637]
					yym4643 := z.DecBinary()
					_ = yym4643
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4642) {
					} else if !yym4643 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4642)
					} else {
						z.DecFallback(yyv4642, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4637 < len(yyv4637) {
			yyv4637 = yyv4637[:yyj4637]
			yyc4637 = true
		} else if yyj4637 == 0 && yyv4637 == nil {
			yyv4637 = []pkg5_runtime.RawExtension{}
			yyc4637 = true
		}
	}
	yyh4637.End()
	if yyc4637 {
		*v = yyv4637
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4644 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4645 := &yyv4644
		yy4645.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4646 := *v
	yyh4646, yyl4646 := z.DecSliceHelperStart()
	var yyc4646 bool
	if yyl4646 == 0 {
		if yyv4646 == nil {
			yyv4646 = []LimitRangeItem{}
			yyc4646 = true
		} else if len(yyv4646) != 0 {
			yyv4646 = yyv4646[:0]
			yyc4646 = true
		}
	} else if yyl4646 > 0 {
		var yyrr4646, yyrl4646 int
		var yyrt4646 bool
		if yyl4646 > cap(yyv4646) {

			yyrg4646 := len(yyv4646) > 0
			yyv24646 := yyv4646
			yyrl4646, yyrt4646 = z.DecInferLen(yyl4646, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4646 {
				if yyrl4646 <= cap(yyv4646) {
					yyv4646 = yyv4646[:yyrl4646]
				} else {
					yyv4646 = make([]LimitRangeItem, yyrl4646)
				}
			} else {
				yyv4646 = make([]LimitRangeItem, yyrl4646)
			}
			yyc4646 = true
			yyrr4646 = len(yyv4646)
			if yyrg4646 {
				copy(yyv4646, yyv24646)
			}
		} else if yyl4646 != len(yyv4646) {
			yyv4646 = yyv4646[:yyl4646]
			yyc4646 = true
		}
		yyj4646 := 0
		for ; yyj4646 < yyrr4646; yyj4646++ {
			yyh4646.ElemContainerState(yyj4646)
			if r.TryDecodeAsNil() {
				yyv4646[yyj4646] = LimitRangeItem{}
			} else {
				yyv4647 := &yyv4646[yyj4646]
				yyv4647.CodecDecodeSelf(d)
			}

		}
		if yyrt4646 {
			for ; yyj4646 < yyl4646; yyj4646++ {
				yyv4646 = append(yyv4646, LimitRangeItem{})
				yyh4646.ElemContainerState(yyj4646)
				if r.TryDecodeAsNil() {
					yyv4646[yyj4646] = LimitRangeItem{}
				} else {
					yyv4648 := &yyv4646[yyj4646]
					yyv4648.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4646 := 0
		for ; !r.CheckBreak(); yyj4646++ {

			if yyj4646 >= len(yyv4646) {
				yyv4646 = append(yyv4646, LimitRangeItem{}) // var yyz4646 LimitRangeItem
				yyc4646 = true
			}
			yyh4646.ElemContainerState(yyj4646)
			if yyj4646 < len(yyv4646) {
				if r.TryDecodeAsNil() {
					yyv4646[yyj4646] = LimitRangeItem{}
				} else {
					yyv4649 := &yyv4646[yyj4646]
					yyv4649.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4646 < len(yyv4646) {
			yyv4646 = yyv4646[:yyj4646]
			yyc4646 = true
		} else if yyj4646 == 0 && yyv4646 == nil {
			yyv4646 = []LimitRangeItem{}
			yyc4646 = true
		}
	}
	yyh4646.End()
	if yyc4646 {
		*v = yyv4646
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4650 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4651 := &yyv4650
		yy4651.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4652 := *v
	yyh4652, yyl4652 := z.DecSliceHelperStart()
	var yyc4652 bool
	if yyl4652 == 0 {
		if yyv4652 == nil {
			yyv4652 = []LimitRange{}
			yyc4652 = true
		} else if len(yyv4652) != 0 {
			yyv4652 = yyv4652[:0]
			yyc4652 = true
		}
	} else if yyl4652 > 0 {
		var yyrr4652, yyrl4652 int
		var yyrt4652 bool
		if yyl4652 > cap(yyv4652) {

			yyrg4652 := len(yyv4652) > 0
			yyv24652 := yyv4652
			yyrl4652, yyrt4652 = z.DecInferLen(yyl4652, z.DecBasicHandle().MaxInitLen, 272)
			if yyrt4652 {
				if yyrl4652 <= cap(yyv4652) {
					yyv4652 = yyv4652[:yyrl4652]
				} else {
					yyv4652 = make([]LimitRange, yyrl4652)
				}
			} else {
				yyv4652 = make([]LimitRange, yyrl4652)
			}
			yyc4652 = true
			yyrr4652 = len(yyv4652)
			if yyrg4652 {
				copy(yyv4652, yyv24652)
			}
		} else if yyl4652 != len(yyv4652) {
			yyv4652 = yyv4652[:yyl4652]
			yyc4652 = true
		}
		yyj4652 := 0
		for ; yyj4652 < yyrr4652; yyj4652++ {
			yyh4652.ElemContainerState(yyj4652)
			if r.TryDecodeAsNil() {
				yyv4652[yyj4652] = LimitRange{}
			} else {
				yyv4653 := &yyv4652[yyj4652]
				yyv4653.CodecDecodeSelf(d)
			}

		}
		if yyrt4652 {
			for ; yyj4652 < yyl4652; yyj4652++ {
				yyv4652 = append(yyv4652, LimitRange{})
				yyh4652.ElemContainerState(yyj4652)
				if r.TryDecodeAsNil() {
					yyv4652[yyj4652] = LimitRange{}
				} else {
					yyv4654 := &yyv4652[yyj4652]
					yyv4654.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4652 := 0
		for ; !r.CheckBreak(); yyj4652++ {

			if yyj4652 >= len(yyv4652) {
				yyv4652 = append(yyv4652, LimitRange{}) // var yyz4652 LimitRange
				yyc4652 = true
			}
			yyh4652.ElemContainerState(yyj4652)
			if yyj4652 < len(yyv4652) {
				if r.TryDecodeAsNil() {
					yyv4652[yyj4652] = LimitRange{}
				} else {
					yyv4655 := &yyv4652[yyj4652]
					yyv4655.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4652 < len(yyv4652) {
			yyv4652 = yyv4652[:yyj4652]
			yyc4652 = true
		} else if yyj4652 == 0 && yyv4652 == nil {
			yyv4652 = []LimitRange{}
			yyc4652 = true
		}
	}
	yyh4652.End()
	if yyc4652 {
		*v = yyv4652
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4656 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4656.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4657 := *v
	yyh4657, yyl4657 := z.DecSliceHelperStart()
	var yyc4657 bool
	if yyl4657 == 0 {
		if yyv4657 == nil {
			yyv4657 = []ResourceQuotaScope{}
			yyc4657 = true
		} else if len(yyv4657) != 0 {
			yyv4657 = yyv4657[:0]
			yyc4657 = true
		}
	} else if yyl4657 > 0 {
		var yyrr4657, yyrl4657 int
		var yyrt4657 bool
		if yyl4657 > cap(yyv4657) {

			yyrl4657, yyrt4657 = z.DecInferLen(yyl4657, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4657 {
				if yyrl4657 <= cap(yyv4657) {
					yyv4657 = yyv4657[:yyrl4657]
				} else {
					yyv4657 = make([]ResourceQuotaScope, yyrl4657)
				}
			} else {
				yyv4657 = make([]ResourceQuotaScope, yyrl4657)
			}
			yyc4657 = true
			yyrr4657 = len(yyv4657)
		} else if yyl4657 != len(yyv4657) {
			yyv4657 = yyv4657[:yyl4657]
			yyc4657 = true
		}
		yyj4657 := 0
		for ; yyj4657 < yyrr4657; yyj4657++ {
			yyh4657.ElemContainerState(yyj4657)
			if r.TryDecodeAsNil() {
				yyv4657[yyj4657] = ""
			} else {
				yyv4657[yyj4657] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4657 {
			for ; yyj4657 < yyl4657; yyj4657++ {
				yyv4657 = append(yyv4657, "")
				yyh4657.ElemContainerState(yyj4657)
				if r.TryDecodeAsNil() {
					yyv4657[yyj4657] = ""
				} else {
					yyv4657[yyj4657] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4657 := 0
		for ; !r.CheckBreak(); yyj4657++ {

			if yyj4657 >= len(yyv4657) {
				yyv4657 = append(yyv4657, "") // var yyz4657 ResourceQuotaScope
				yyc4657 = true
			}
			yyh4657.ElemContainerState(yyj4657)
			if yyj4657 < len(yyv4657) {
				if r.TryDecodeAsNil() {
					yyv4657[yyj4657] = ""
				} else {
					yyv4657[yyj4657] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4657 < len(yyv4657) {
			yyv4657 = yyv4657[:yyj4657]
			yyc4657 = true
		} else if yyj4657 == 0 && yyv4657 == nil {
			yyv4657 = []ResourceQuotaScope{}
			yyc4657 = true
		}
	}
	yyh4657.End()
	if yyc4657 {
		*v = yyv4657
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4661 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4662 := &yyv4661
		yy4662.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4663 := *v
	yyh4663, yyl4663 := z.DecSliceHelperStart()
	var yyc4663 bool
	if yyl4663 == 0 {
		if yyv4663 == nil {
			yyv4663 = []ResourceQuota{}
			yyc4663 = true
		} else if len(yyv4663) != 0 {
			yyv4663 = yyv4663[:0]
			yyc4663 = true
		}
	} else if yyl4663 > 0 {
		var yyrr4663, yyrl4663 int
		var yyrt4663 bool
		if yyl4663 > cap(yyv4663) {

			yyrg4663 := len(yyv4663) > 0
			yyv24663 := yyv4663
			yyrl4663, yyrt4663 = z.DecInferLen(yyl4663, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4663 {
				if yyrl4663 <= cap(yyv4663) {
					yyv4663 = yyv4663[:yyrl4663]
				} else {
					yyv4663 = make([]ResourceQuota, yyrl4663)
				}
			} else {
				yyv4663 = make([]ResourceQuota, yyrl4663)
			}
			yyc4663 = true
			yyrr4663 = len(yyv4663)
			if yyrg4663 {
				copy(yyv4663, yyv24663)
			}
		} else if yyl4663 != len(yyv4663) {
			yyv4663 = yyv4663[:yyl4663]
			yyc4663 = true
		}
		yyj4663 := 0
		for ; yyj4663 < yyrr4663; yyj4663++ {
			yyh4663.ElemContainerState(yyj4663)
			if r.TryDecodeAsNil() {
				yyv4663[yyj4663] = ResourceQuota{}
			} else {
				yyv4664 := &yyv4663[yyj4663]
				yyv4664.CodecDecodeSelf(d)
			}

		}
		if yyrt4663 {
			for ; yyj4663 < yyl4663; yyj4663++ {
				yyv4663 = append(yyv4663, ResourceQuota{})
				yyh4663.ElemContainerState(yyj4663)
				if r.TryDecodeAsNil() {
					yyv4663[yyj4663] = ResourceQuota{}
				} else {
					yyv4665 := &yyv4663[yyj4663]
					yyv4665.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4663 := 0
		for ; !r.CheckBreak(); yyj4663++ {

			if yyj4663 >= len(yyv4663) {
				yyv4663 = append(yyv4663, ResourceQuota{}) // var yyz4663 ResourceQuota
				yyc4663 = true
			}
			yyh4663.ElemContainerState(yyj4663)
			if yyj4663 < len(yyv4663) {
				if r.TryDecodeAsNil() {
					yyv4663[yyj4663] = ResourceQuota{}
				} else {
					yyv4666 := &yyv4663[yyj4663]
					yyv4666.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4663 < len(yyv4663) {
			yyv4663 = yyv4663[:yyj4663]
			yyc4663 = true
		} else if yyj4663 == 0 && yyv4663 == nil {
			yyv4663 = []ResourceQuota{}
			yyc4663 = true
		}
	}
	yyh4663.End()
	if yyc4663 {
		*v = yyv4663
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4667, yyv4667 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4668 := z.EncBinary()
		_ = yym4668
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4667))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4667 == nil {
			r.EncodeNil()
		} else {
			yym4669 := z.EncBinary()
			_ = yym4669
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4667))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4670 := *v
	yyl4670 := r.ReadMapStart()
	yybh4670 := z.DecBasicHandle()
	if yyv4670 == nil {
		yyrl4670, _ := z.DecInferLen(yyl4670, yybh4670.MaxInitLen, 40)
		yyv4670 = make(map[string][]uint8, yyrl4670)
		*v = yyv4670
	}
	var yymk4670 string
	var yymv4670 []uint8
	var yymg4670 bool
	if yybh4670.MapValueReset {
		yymg4670 = true
	}
	if yyl4670 > 0 {
		for yyj4670 := 0; yyj4670 < yyl4670; yyj4670++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4670 = ""
			} else {
				yymk4670 = string(r.DecodeString())
			}

			if yymg4670 {
				yymv4670 = yyv4670[yymk4670]
			} else {
				yymv4670 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4670 = nil
			} else {
				yyv4672 := &yymv4670
				yym4673 := z.DecBinary()
				_ = yym4673
				if false {
				} else {
					*yyv4672 = r.DecodeBytes(*(*[]byte)(yyv4672), false, false)
				}
			}

			if yyv4670 != nil {
				yyv4670[yymk4670] = yymv4670
			}
		}
	} else if yyl4670 < 0 {
		for yyj4670 := 0; !r.CheckBreak(); yyj4670++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4670 = ""
			} else {
				yymk4670 = string(r.DecodeString())
			}

			if yymg4670 {
				yymv4670 = yyv4670[yymk4670]
			} else {
				yymv4670 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4670 = nil
			} else {
				yyv4675 := &yymv4670
				yym4676 := z.DecBinary()
				_ = yym4676
				if false {
				} else {
					*yyv4675 = r.DecodeBytes(*(*[]byte)(yyv4675), false, false)
				}
			}

			if yyv4670 != nil {
				yyv4670[yymk4670] = yymv4670
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4677 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4678 := &yyv4677
		yy4678.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4679 := *v
	yyh4679, yyl4679 := z.DecSliceHelperStart()
	var yyc4679 bool
	if yyl4679 == 0 {
		if yyv4679 == nil {
			yyv4679 = []Secret{}
			yyc4679 = true
		} else if len(yyv4679) != 0 {
			yyv4679 = yyv4679[:0]
			yyc4679 = true
		}
	} else if yyl4679 > 0 {
		var yyrr4679, yyrl4679 int
		var yyrt4679 bool
		if yyl4679 > cap(yyv4679) {

			yyrg4679 := len(yyv4679) > 0
			yyv24679 := yyv4679
			yyrl4679, yyrt4679 = z.DecInferLen(yyl4679, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4679 {
				if yyrl4679 <= cap(yyv4679) {
					yyv4679 = yyv4679[:yyrl4679]
				} else {
					yyv4679 = make([]Secret, yyrl4679)
				}
			} else {
				yyv4679 = make([]Secret, yyrl4679)
			}
			yyc4679 = true
			yyrr4679 = len(yyv4679)
			if yyrg4679 {
				copy(yyv4679, yyv24679)
			}
		} else if yyl4679 != len(yyv4679) {
			yyv4679 = yyv4679[:yyl4679]
			yyc4679 = true
		}
		yyj4679 := 0
		for ; yyj4679 < yyrr4679; yyj4679++ {
			yyh4679.ElemContainerState(yyj4679)
			if r.TryDecodeAsNil() {
				yyv4679[yyj4679] = Secret{}
			} else {
				yyv4680 := &yyv4679[yyj4679]
				yyv4680.CodecDecodeSelf(d)
			}

		}
		if yyrt4679 {
			for ; yyj4679 < yyl4679; yyj4679++ {
				yyv4679 = append(yyv4679, Secret{})
				yyh4679.ElemContainerState(yyj4679)
				if r.TryDecodeAsNil() {
					yyv4679[yyj4679] = Secret{}
				} else {
					yyv4681 := &yyv4679[yyj4679]
					yyv4681.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4679 := 0
		for ; !r.CheckBreak(); yyj4679++ {

			if yyj4679 >= len(yyv4679) {
				yyv4679 = append(yyv4679, Secret{}) // var yyz4679 Secret
				yyc4679 = true
			}
			yyh4679.ElemContainerState(yyj4679)
			if yyj4679 < len(yyv4679) {
				if r.TryDecodeAsNil() {
					yyv4679[yyj4679] = Secret{}
				} else {
					yyv4682 := &yyv4679[yyj4679]
					yyv4682.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4679 < len(yyv4679) {
			yyv4679 = yyv4679[:yyj4679]
			yyc4679 = true
		} else if yyj4679 == 0 && yyv4679 == nil {
			yyv4679 = []Secret{}
			yyc4679 = true
		}
	}
	yyh4679.End()
	if yyc4679 {
		*v = yyv4679
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4683 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4684 := &yyv4683
		yy4684.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4685 := *v
	yyh4685, yyl4685 := z.DecSliceHelperStart()
	var yyc4685 bool
	if yyl4685 == 0 {
		if yyv4685 == nil {
			yyv4685 = []ConfigMap{}
			yyc4685 = true
		} else if len(yyv4685) != 0 {
			yyv4685 = yyv4685[:0]
			yyc4685 = true
		}
	} else if yyl4685 > 0 {
		var yyrr4685, yyrl4685 int
		var yyrt4685 bool
		if yyl4685 > cap(yyv4685) {

			yyrg4685 := len(yyv4685) > 0
			yyv24685 := yyv4685
			yyrl4685, yyrt4685 = z.DecInferLen(yyl4685, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4685 {
				if yyrl4685 <= cap(yyv4685) {
					yyv4685 = yyv4685[:yyrl4685]
				} else {
					yyv4685 = make([]ConfigMap, yyrl4685)
				}
			} else {
				yyv4685 = make([]ConfigMap, yyrl4685)
			}
			yyc4685 = true
			yyrr4685 = len(yyv4685)
			if yyrg4685 {
				copy(yyv4685, yyv24685)
			}
		} else if yyl4685 != len(yyv4685) {
			yyv4685 = yyv4685[:yyl4685]
			yyc4685 = true
		}
		yyj4685 := 0
		for ; yyj4685 < yyrr4685; yyj4685++ {
			yyh4685.ElemContainerState(yyj4685)
			if r.TryDecodeAsNil() {
				yyv4685[yyj4685] = ConfigMap{}
			} else {
				yyv4686 := &yyv4685[yyj4685]
				yyv4686.CodecDecodeSelf(d)
			}

		}
		if yyrt4685 {
			for ; yyj4685 < yyl4685; yyj4685++ {
				yyv4685 = append(yyv4685, ConfigMap{})
				yyh4685.ElemContainerState(yyj4685)
				if r.TryDecodeAsNil() {
					yyv4685[yyj4685] = ConfigMap{}
				} else {
					yyv4687 := &yyv4685[yyj4685]
					yyv4687.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4685 := 0
		for ; !r.CheckBreak(); yyj4685++ {

			if yyj4685 >= len(yyv4685) {
				yyv4685 = append(yyv4685, ConfigMap{}) // var yyz4685 ConfigMap
				yyc4685 = true
			}
			yyh4685.ElemContainerState(yyj4685)
			if yyj4685 < len(yyv4685) {
				if r.TryDecodeAsNil() {
					yyv4685[yyj4685] = ConfigMap{}
				} else {
					yyv4688 := &yyv4685[yyj4685]
					yyv4688.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4685 < len(yyv4685) {
			yyv4685 = yyv4685[:yyj4685]
			yyc4685 = true
		} else if yyj4685 == 0 && yyv4685 == nil {
			yyv4685 = []ConfigMap{}
			yyc4685 = true
		}
	}
	yyh4685.End()
	if yyc4685 {
		*v = yyv4685
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4689 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4690 := &yyv4689
		yy4690.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4691 := *v
	yyh4691, yyl4691 := z.DecSliceHelperStart()
	var yyc4691 bool
	if yyl4691 == 0 {
		if yyv4691 == nil {
			yyv4691 = []ComponentCondition{}
			yyc4691 = true
		} else if len(yyv4691) != 0 {
			yyv4691 = yyv4691[:0]
			yyc4691 = true
		}
	} else if yyl4691 > 0 {
		var yyrr4691, yyrl4691 int
		var yyrt4691 bool
		if yyl4691 > cap(yyv4691) {

			yyrg4691 := len(yyv4691) > 0
			yyv24691 := yyv4691
			yyrl4691, yyrt4691 = z.DecInferLen(yyl4691, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4691 {
				if yyrl4691 <= cap(yyv4691) {
					yyv4691 = yyv4691[:yyrl4691]
				} else {
					yyv4691 = make([]ComponentCondition, yyrl4691)
				}
			} else {
				yyv4691 = make([]ComponentCondition, yyrl4691)
			}
			yyc4691 = true
			yyrr4691 = len(yyv4691)
			if yyrg4691 {
				copy(yyv4691, yyv24691)
			}
		} else if yyl4691 != len(yyv4691) {
			yyv4691 = yyv4691[:yyl4691]
			yyc4691 = true
		}
		yyj4691 := 0
		for ; yyj4691 < yyrr4691; yyj4691++ {
			yyh4691.ElemContainerState(yyj4691)
			if r.TryDecodeAsNil() {
				yyv4691[yyj4691] = ComponentCondition{}
			} else {
				yyv4692 := &yyv4691[yyj4691]
				yyv4692.CodecDecodeSelf(d)
			}

		}
		if yyrt4691 {
			for ; yyj4691 < yyl4691; yyj4691++ {
				yyv4691 = append(yyv4691, ComponentCondition{})
				yyh4691.ElemContainerState(yyj4691)
				if r.TryDecodeAsNil() {
					yyv4691[yyj4691] = ComponentCondition{}
				} else {
					yyv4693 := &yyv4691[yyj4691]
					yyv4693.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4691 := 0
		for ; !r.CheckBreak(); yyj4691++ {

			if yyj4691 >= len(yyv4691) {
				yyv4691 = append(yyv4691, ComponentCondition{}) // var yyz4691 ComponentCondition
				yyc4691 = true
			}
			yyh4691.ElemContainerState(yyj4691)
			if yyj4691 < len(yyv4691) {
				if r.TryDecodeAsNil() {
					yyv4691[yyj4691] = ComponentCondition{}
				} else {
					yyv4694 := &yyv4691[yyj4691]
					yyv4694.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4691 < len(yyv4691) {
			yyv4691 = yyv4691[:yyj4691]
			yyc4691 = true
		} else if yyj4691 == 0 && yyv4691 == nil {
			yyv4691 = []ComponentCondition{}
			yyc4691 = true
		}
	}
	yyh4691.End()
	if yyc4691 {
		*v = yyv4691
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4695 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4696 := &yyv4695
		yy4696.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4697 := *v
	yyh4697, yyl4697 := z.DecSliceHelperStart()
	var yyc4697 bool
	if yyl4697 == 0 {
		if yyv4697 == nil {
			yyv4697 = []ComponentStatus{}
			yyc4697 = true
		} else if len(yyv4697) != 0 {
			yyv4697 = yyv4697[:0]
			yyc4697 = true
		}
	} else if yyl4697 > 0 {
		var yyrr4697, yyrl4697 int
		var yyrt4697 bool
		if yyl4697 > cap(yyv4697) {

			yyrg4697 := len(yyv4697) > 0
			yyv24697 := yyv4697
			yyrl4697, yyrt4697 = z.DecInferLen(yyl4697, z.DecBasicHandle().MaxInitLen, 272)
			if yyrt4697 {
				if yyrl4697 <= cap(yyv4697) {
					yyv4697 = yyv4697[:yyrl4697]
				} else {
					yyv4697 = make([]ComponentStatus, yyrl4697)
				}
			} else {
				yyv4697 = make([]ComponentStatus, yyrl4697)
			}
			yyc4697 = true
			yyrr4697 = len(yyv4697)
			if yyrg4697 {
				copy(yyv4697, yyv24697)
			}
		} else if yyl4697 != len(yyv4697) {
			yyv4697 = yyv4697[:yyl4697]
			yyc4697 = true
		}
		yyj4697 := 0
		for ; yyj4697 < yyrr4697; yyj4697++ {
			yyh4697.ElemContainerState(yyj4697)
			if r.TryDecodeAsNil() {
				yyv4697[yyj4697] = ComponentStatus{}
			} else {
				yyv4698 := &yyv4697[yyj4697]
				yyv4698.CodecDecodeSelf(d)
			}

		}
		if yyrt4697 {
			for ; yyj4697 < yyl4697; yyj4697++ {
				yyv4697 = append(yyv4697, ComponentStatus{})
				yyh4697.ElemContainerState(yyj4697)
				if r.TryDecodeAsNil() {
					yyv4697[yyj4697] = ComponentStatus{}
				} else {
					yyv4699 := &yyv4697[yyj4697]
					yyv4699.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4697 := 0
		for ; !r.CheckBreak(); yyj4697++ {

			if yyj4697 >= len(yyv4697) {
				yyv4697 = append(yyv4697, ComponentStatus{}) // var yyz4697 ComponentStatus
				yyc4697 = true
			}
			yyh4697.ElemContainerState(yyj4697)
			if yyj4697 < len(yyv4697) {
				if r.TryDecodeAsNil() {
					yyv4697[yyj4697] = ComponentStatus{}
				} else {
					yyv4700 := &yyv4697[yyj4697]
					yyv4700.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4697 < len(yyv4697) {
			yyv4697 = yyv4697[:yyj4697]
			yyc4697 = true
		} else if yyj4697 == 0 && yyv4697 == nil {
			yyv4697 = []ComponentStatus{}
			yyc4697 = true
		}
	}
	yyh4697.End()
	if yyc4697 {
		*v = yyv4697
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4701 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4702 := &yyv4701
		yy4702.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4703 := *v
	yyh4703, yyl4703 := z.DecSliceHelperStart()
	var yyc4703 bool
	if yyl4703 == 0 {
		if yyv4703 == nil {
			yyv4703 = []DownwardAPIVolumeFile{}
			yyc4703 = true
		} else if len(yyv4703) != 0 {
			yyv4703 = yyv4703[:0]
			yyc4703 = true
		}
	} else if yyl4703 > 0 {
		var yyrr4703, yyrl4703 int
		var yyrt4703 bool
		if yyl4703 > cap(yyv4703) {

			yyrg4703 := len(yyv4703) > 0
			yyv24703 := yyv4703
			yyrl4703, yyrt4703 = z.DecInferLen(yyl4703, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4703 {
				if yyrl4703 <= cap(yyv4703) {
					yyv4703 = yyv4703[:yyrl4703]
				} else {
					yyv4703 = make([]DownwardAPIVolumeFile, yyrl4703)
				}
			} else {
				yyv4703 = make([]DownwardAPIVolumeFile, yyrl4703)
			}
			yyc4703 = true
			yyrr4703 = len(yyv4703)
			if yyrg4703 {
				copy(yyv4703, yyv24703)
			}
		} else if yyl4703 != len(yyv4703) {
			yyv4703 = yyv4703[:yyl4703]
			yyc4703 = true
		}
		yyj4703 := 0
		for ; yyj4703 < yyrr4703; yyj4703++ {
			yyh4703.ElemContainerState(yyj4703)
			if r.TryDecodeAsNil() {
				yyv4703[yyj4703] = DownwardAPIVolumeFile{}
			} else {
				yyv4704 := &yyv4703[yyj4703]
				yyv4704.CodecDecodeSelf(d)
			}

		}
		if yyrt4703 {
			for ; yyj4703 < yyl4703; yyj4703++ {
				yyv4703 = append(yyv4703, DownwardAPIVolumeFile{})
				yyh4703.ElemContainerState(yyj4703)
				if r.TryDecodeAsNil() {
					yyv4703[yyj4703] = DownwardAPIVolumeFile{}
				} else {
					yyv4705 := &yyv4703[yyj4703]
					yyv4705.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4703 := 0
		for ; !r.CheckBreak(); yyj4703++ {

			if yyj4703 >= len(yyv4703) {
				yyv4703 = append(yyv4703, DownwardAPIVolumeFile{}) // var yyz4703 DownwardAPIVolumeFile
				yyc4703 = true
			}
			yyh4703.ElemContainerState(yyj4703)
			if yyj4703 < len(yyv4703) {
				if r.TryDecodeAsNil() {
					yyv4703[yyj4703] = DownwardAPIVolumeFile{}
				} else {
					yyv4706 := &yyv4703[yyj4703]
					yyv4706.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4703 < len(yyv4703) {
			yyv4703 = yyv4703[:yyj4703]
			yyc4703 = true
		} else if yyj4703 == 0 && yyv4703 == nil {
			yyv4703 = []DownwardAPIVolumeFile{}
			yyc4703 = true
		}
	}
	yyh4703.End()
	if yyc4703 {
		*v = yyv4703
	}
}
