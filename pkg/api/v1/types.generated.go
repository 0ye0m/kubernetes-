/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg5_util.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	if !yyhl45 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				var yynn82 int = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	if !yyhl104 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				var yynn141 int = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
			}
			if yyr141 || yy2arr141 {
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [2]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[1] = x.ReadOnly != false
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(2)
			} else {
				var yynn195 int = 1
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
			}
			if yyr195 || yy2arr195 {
				yym197 := z.EncBinary()
				_ = yym197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym198 := z.EncBinary()
				_ = yym198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[1] {
					yym200 := z.EncBinary()
					_ = yym200
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq195[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym201 := z.EncBinary()
					_ = yym201
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep195 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym202 := z.DecBinary()
	_ = yym202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl203 := r.ReadMapStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl203, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl203 := r.ReadArrayStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys204Slc
	var yyhl204 bool = l >= 0
	for yyj204 := 0; ; yyj204++ {
		if yyhl204 {
			if yyj204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys204Slc = r.DecodeBytes(yys204Slc, true, true)
		yys204 := string(yys204Slc)
		switch yys204 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys204)
		} // end switch yys204
	} // end for yyj204
	if !yyhl204 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj207 int
	var yyb207 bool
	var yyhl207 bool = l >= 0
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj207++
		if yyhl207 {
			yyb207 = yyj207 > l
		} else {
			yyb207 = r.CheckBreak()
		}
		if yyb207 {
			break
		}
		z.DecStructFieldNotFound(yyj207-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym210 := z.EncBinary()
		_ = yym210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep211 := !z.EncBinary()
			yy2arr211 := z.EncBasicHandle().StructToArray
			var yyq211 [11]bool
			_, _, _ = yysep211, yyq211, yy2arr211
			const yyr211 bool = false
			yyq211[0] = x.GCEPersistentDisk != nil
			yyq211[1] = x.AWSElasticBlockStore != nil
			yyq211[2] = x.HostPath != nil
			yyq211[3] = x.Glusterfs != nil
			yyq211[4] = x.NFS != nil
			yyq211[5] = x.RBD != nil
			yyq211[6] = x.ISCSI != nil
			yyq211[7] = x.Cinder != nil
			yyq211[8] = x.CephFS != nil
			yyq211[9] = x.FC != nil
			yyq211[10] = x.Flocker != nil
			if yyr211 || yy2arr211 {
				r.EncodeArrayStart(11)
			} else {
				var yynn211 int = 0
				for _, b := range yyq211 {
					if b {
						yynn211++
					}
				}
				r.EncodeMapStart(yynn211)
			}
			if yyr211 || yy2arr211 {
				if yyq211[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep211 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym223 := z.DecBinary()
	_ = yym223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl224 := r.ReadMapStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl224, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl224 := r.ReadArrayStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys225Slc
	var yyhl225 bool = l >= 0
	for yyj225 := 0; ; yyj225++ {
		if yyhl225 {
			if yyj225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys225Slc = r.DecodeBytes(yys225Slc, true, true)
		yys225 := string(yys225Slc)
		switch yys225 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys225)
		} // end switch yys225
	} // end for yyj225
	if !yyhl225 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj237 int
	var yyb237 bool
	var yyhl237 bool = l >= 0
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj237++
		if yyhl237 {
			yyb237 = yyj237 > l
		} else {
			yyb237 = r.CheckBreak()
		}
		if yyb237 {
			break
		}
		z.DecStructFieldNotFound(yyj237-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = true
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				var yynn250 int = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
			}
			if yyr250 || yy2arr250 {
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[1] {
					yy255 := &x.APIVersion
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else if z.HasExtensions() && z.EncExt(yy255) {
					} else if !yym256 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy255)
					} else {
						z.EncFallback(yy255)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy257 := &x.APIVersion
					yym258 := z.EncBinary()
					_ = yym258
					if false {
					} else if z.HasExtensions() && z.EncExt(yy257) {
					} else if !yym258 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy257)
					} else {
						z.EncFallback(yy257)
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[2] {
					yy260 := &x.ObjectMeta
					yy260.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy261 := &x.ObjectMeta
					yy261.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[3] {
					yy263 := &x.Spec
					yy263.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy264 := &x.Spec
					yy264.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[4] {
					yy266 := &x.Status
					yy266.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy267 := &x.Status
					yy267.CodecEncodeSelf(e)
				}
			}
			if yysep250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym268 := z.DecBinary()
	_ = yym268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl269 := r.ReadMapStart()
			if yyl269 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl269, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl269 := r.ReadArrayStart()
			if yyl269 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys270Slc
	var yyhl270 bool = l >= 0
	for yyj270 := 0; ; yyj270++ {
		if yyhl270 {
			if yyj270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys270Slc = r.DecodeBytes(yys270Slc, true, true)
		yys270 := string(yys270Slc)
		switch yys270 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv272 := &x.APIVersion
				yym273 := z.DecBinary()
				_ = yym273
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv272) {
				} else if !yym273 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv272)
				} else {
					z.DecFallback(yyv272, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv274 := &x.ObjectMeta
				yyv274.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv275 := &x.Spec
				yyv275.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv276 := &x.Status
				yyv276.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys270)
		} // end switch yys270
	} // end for yyj270
	if !yyhl270 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj277 int
	var yyb277 bool
	var yyhl277 bool = l >= 0
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv279 := &x.APIVersion
		yym280 := z.DecBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv279) {
		} else if !yym280 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv279)
		} else {
			z.DecFallback(yyv279, false)
		}
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv281 := &x.ObjectMeta
		yyv281.CodecDecodeSelf(d)
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv282 := &x.Spec
		yyv282.CodecDecodeSelf(d)
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv283 := &x.Status
		yyv283.CodecDecodeSelf(d)
	}
	for {
		yyj277++
		if yyhl277 {
			yyb277 = yyj277 > l
		} else {
			yyb277 = r.CheckBreak()
		}
		if yyb277 {
			break
		}
		z.DecStructFieldNotFound(yyj277-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym284 := z.EncBinary()
		_ = yym284
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep285 := !z.EncBinary()
			yy2arr285 := z.EncBasicHandle().StructToArray
			var yyq285 [15]bool
			_, _, _ = yysep285, yyq285, yy2arr285
			const yyr285 bool = false
			yyq285[0] = len(x.Capacity) != 0
			yyq285[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq285[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq285[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq285[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq285[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq285[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq285[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq285[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq285[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq285[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq285[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq285[12] = len(x.AccessModes) != 0
			yyq285[13] = x.ClaimRef != nil
			yyq285[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr285 || yy2arr285 {
				r.EncodeArrayStart(15)
			} else {
				var yynn285 int = 0
				for _, b := range yyq285 {
					if b {
						yynn285++
					}
				}
				r.EncodeMapStart(yynn285)
			}
			if yyr285 || yy2arr285 {
				if yyq285[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq285[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr285 || yy2arr285 {
				if yyn287 {
					r.EncodeNil()
				} else {
					if yyq285[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr285 || yy2arr285 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq285[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr285 || yy2arr285 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq285[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr285 || yy2arr285 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq285[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr285 || yy2arr285 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq285[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr285 || yy2arr285 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq285[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr285 || yy2arr285 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq285[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn294 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn294 = true
				goto LABEL294
			}
		LABEL294:
			if yyr285 || yy2arr285 {
				if yyn294 {
					r.EncodeNil()
				} else {
					if yyq285[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn294 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn295 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn295 = true
				goto LABEL295
			}
		LABEL295:
			if yyr285 || yy2arr285 {
				if yyn295 {
					r.EncodeNil()
				} else {
					if yyq285[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn295 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn296 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn296 = true
				goto LABEL296
			}
		LABEL296:
			if yyr285 || yy2arr285 {
				if yyn296 {
					r.EncodeNil()
				} else {
					if yyq285[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn296 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn297 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn297 = true
				goto LABEL297
			}
		LABEL297:
			if yyr285 || yy2arr285 {
				if yyn297 {
					r.EncodeNil()
				} else {
					if yyq285[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn297 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr285 || yy2arr285 {
				if yyq285[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym299 := z.EncBinary()
						_ = yym299
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq285[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym300 := z.EncBinary()
						_ = yym300
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr285 || yy2arr285 {
				if yyq285[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq285[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr285 || yy2arr285 {
				if yyq285[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq285[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep285 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym303 := z.DecBinary()
	_ = yym303
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl304 := r.ReadMapStart()
			if yyl304 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl304, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl304 := r.ReadArrayStart()
			if yyl304 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl304, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys305Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys305Slc
	var yyhl305 bool = l >= 0
	for yyj305 := 0; ; yyj305++ {
		if yyhl305 {
			if yyj305 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys305Slc = r.DecodeBytes(yys305Slc, true, true)
		yys305 := string(yys305Slc)
		switch yys305 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv306 := &x.Capacity
				yyv306.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv318 := &x.AccessModes
				yym319 := z.DecBinary()
				_ = yym319
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv318), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys305)
		} // end switch yys305
	} // end for yyj305
	if !yyhl305 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj322 int
	var yyb322 bool
	var yyhl322 bool = l >= 0
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv323 := &x.Capacity
		yyv323.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv335 := &x.AccessModes
		yym336 := z.DecBinary()
		_ = yym336
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv335), d)
		}
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj322++
		if yyhl322 {
			yyb322 = yyj322 > l
		} else {
			yyb322 = r.CheckBreak()
		}
		if yyb322 {
			break
		}
		z.DecStructFieldNotFound(yyj322-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym339 := z.EncBinary()
	_ = yym339
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym340 := z.DecBinary()
	_ = yym340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym341 := z.EncBinary()
		_ = yym341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep342 := !z.EncBinary()
			yy2arr342 := z.EncBasicHandle().StructToArray
			var yyq342 [3]bool
			_, _, _ = yysep342, yyq342, yy2arr342
			const yyr342 bool = false
			yyq342[0] = x.Phase != ""
			yyq342[1] = x.Message != ""
			yyq342[2] = x.Reason != ""
			if yyr342 || yy2arr342 {
				r.EncodeArrayStart(3)
			} else {
				var yynn342 int = 0
				for _, b := range yyq342 {
					if b {
						yynn342++
					}
				}
				r.EncodeMapStart(yynn342)
			}
			if yyr342 || yy2arr342 {
				if yyq342[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq342[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr342 || yy2arr342 {
				if yyq342[1] {
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq342[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym346 := z.EncBinary()
					_ = yym346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr342 || yy2arr342 {
				if yyq342[2] {
					yym348 := z.EncBinary()
					_ = yym348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq342[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym349 := z.EncBinary()
					_ = yym349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep342 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym350 := z.DecBinary()
	_ = yym350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl351 := r.ReadMapStart()
			if yyl351 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl351, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl351 := r.ReadArrayStart()
			if yyl351 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl351, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys352Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys352Slc
	var yyhl352 bool = l >= 0
	for yyj352 := 0; ; yyj352++ {
		if yyhl352 {
			if yyj352 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys352Slc = r.DecodeBytes(yys352Slc, true, true)
		yys352 := string(yys352Slc)
		switch yys352 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys352)
		} // end switch yys352
	} // end for yyj352
	if !yyhl352 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj356 int
	var yyb356 bool
	var yyhl356 bool = l >= 0
	yyj356++
	if yyhl356 {
		yyb356 = yyj356 > l
	} else {
		yyb356 = r.CheckBreak()
	}
	if yyb356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj356++
	if yyhl356 {
		yyb356 = yyj356 > l
	} else {
		yyb356 = r.CheckBreak()
	}
	if yyb356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj356++
	if yyhl356 {
		yyb356 = yyj356 > l
	} else {
		yyb356 = r.CheckBreak()
	}
	if yyb356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj356++
		if yyhl356 {
			yyb356 = yyj356 > l
		} else {
			yyb356 = r.CheckBreak()
		}
		if yyb356 {
			break
		}
		z.DecStructFieldNotFound(yyj356-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym360 := z.EncBinary()
		_ = yym360
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep361 := !z.EncBinary()
			yy2arr361 := z.EncBasicHandle().StructToArray
			var yyq361 [4]bool
			_, _, _ = yysep361, yyq361, yy2arr361
			const yyr361 bool = false
			yyq361[0] = x.Kind != ""
			yyq361[1] = true
			yyq361[2] = true
			if yyr361 || yy2arr361 {
				r.EncodeArrayStart(4)
			} else {
				var yynn361 int = 1
				for _, b := range yyq361 {
					if b {
						yynn361++
					}
				}
				r.EncodeMapStart(yynn361)
			}
			if yyr361 || yy2arr361 {
				if yyq361[0] {
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq361[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym364 := z.EncBinary()
					_ = yym364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr361 || yy2arr361 {
				if yyq361[1] {
					yy366 := &x.APIVersion
					yym367 := z.EncBinary()
					_ = yym367
					if false {
					} else if z.HasExtensions() && z.EncExt(yy366) {
					} else if !yym367 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy366)
					} else {
						z.EncFallback(yy366)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq361[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy368 := &x.APIVersion
					yym369 := z.EncBinary()
					_ = yym369
					if false {
					} else if z.HasExtensions() && z.EncExt(yy368) {
					} else if !yym369 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy368)
					} else {
						z.EncFallback(yy368)
					}
				}
			}
			if yyr361 || yy2arr361 {
				if yyq361[2] {
					yy371 := &x.ListMeta
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else if z.HasExtensions() && z.EncExt(yy371) {
					} else {
						z.EncFallback(yy371)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq361[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy373 := &x.ListMeta
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else if z.HasExtensions() && z.EncExt(yy373) {
					} else {
						z.EncFallback(yy373)
					}
				}
			}
			if yyr361 || yy2arr361 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym376 := z.EncBinary()
					_ = yym376
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym377 := z.EncBinary()
					_ = yym377
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep361 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym378 := z.DecBinary()
	_ = yym378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl379 := r.ReadMapStart()
			if yyl379 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl379, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl379 := r.ReadArrayStart()
			if yyl379 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys380Slc
	var yyhl380 bool = l >= 0
	for yyj380 := 0; ; yyj380++ {
		if yyhl380 {
			if yyj380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys380Slc = r.DecodeBytes(yys380Slc, true, true)
		yys380 := string(yys380Slc)
		switch yys380 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv382 := &x.APIVersion
				yym383 := z.DecBinary()
				_ = yym383
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv382) {
				} else if !yym383 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv382)
				} else {
					z.DecFallback(yyv382, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv384 := &x.ListMeta
				yym385 := z.DecBinary()
				_ = yym385
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv384) {
				} else {
					z.DecFallback(yyv384, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv386 := &x.Items
				yym387 := z.DecBinary()
				_ = yym387
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys380)
		} // end switch yys380
	} // end for yyj380
	if !yyhl380 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj388 int
	var yyb388 bool
	var yyhl388 bool = l >= 0
	yyj388++
	if yyhl388 {
		yyb388 = yyj388 > l
	} else {
		yyb388 = r.CheckBreak()
	}
	if yyb388 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj388++
	if yyhl388 {
		yyb388 = yyj388 > l
	} else {
		yyb388 = r.CheckBreak()
	}
	if yyb388 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv390 := &x.APIVersion
		yym391 := z.DecBinary()
		_ = yym391
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv390) {
		} else if !yym391 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv390)
		} else {
			z.DecFallback(yyv390, false)
		}
	}
	yyj388++
	if yyhl388 {
		yyb388 = yyj388 > l
	} else {
		yyb388 = r.CheckBreak()
	}
	if yyb388 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv392 := &x.ListMeta
		yym393 := z.DecBinary()
		_ = yym393
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv392) {
		} else {
			z.DecFallback(yyv392, false)
		}
	}
	yyj388++
	if yyhl388 {
		yyb388 = yyj388 > l
	} else {
		yyb388 = r.CheckBreak()
	}
	if yyb388 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv394 := &x.Items
		yym395 := z.DecBinary()
		_ = yym395
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv394), d)
		}
	}
	for {
		yyj388++
		if yyhl388 {
			yyb388 = yyj388 > l
		} else {
			yyb388 = r.CheckBreak()
		}
		if yyb388 {
			break
		}
		z.DecStructFieldNotFound(yyj388-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym396 := z.EncBinary()
		_ = yym396
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep397 := !z.EncBinary()
			yy2arr397 := z.EncBasicHandle().StructToArray
			var yyq397 [5]bool
			_, _, _ = yysep397, yyq397, yy2arr397
			const yyr397 bool = false
			yyq397[0] = x.Kind != ""
			yyq397[1] = true
			yyq397[2] = true
			yyq397[3] = true
			yyq397[4] = true
			if yyr397 || yy2arr397 {
				r.EncodeArrayStart(5)
			} else {
				var yynn397 int = 0
				for _, b := range yyq397 {
					if b {
						yynn397++
					}
				}
				r.EncodeMapStart(yynn397)
			}
			if yyr397 || yy2arr397 {
				if yyq397[0] {
					yym399 := z.EncBinary()
					_ = yym399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq397[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym400 := z.EncBinary()
					_ = yym400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr397 || yy2arr397 {
				if yyq397[1] {
					yy402 := &x.APIVersion
					yym403 := z.EncBinary()
					_ = yym403
					if false {
					} else if z.HasExtensions() && z.EncExt(yy402) {
					} else if !yym403 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy402)
					} else {
						z.EncFallback(yy402)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq397[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy404 := &x.APIVersion
					yym405 := z.EncBinary()
					_ = yym405
					if false {
					} else if z.HasExtensions() && z.EncExt(yy404) {
					} else if !yym405 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy404)
					} else {
						z.EncFallback(yy404)
					}
				}
			}
			if yyr397 || yy2arr397 {
				if yyq397[2] {
					yy407 := &x.ObjectMeta
					yy407.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq397[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy408 := &x.ObjectMeta
					yy408.CodecEncodeSelf(e)
				}
			}
			if yyr397 || yy2arr397 {
				if yyq397[3] {
					yy410 := &x.Spec
					yy410.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq397[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy411 := &x.Spec
					yy411.CodecEncodeSelf(e)
				}
			}
			if yyr397 || yy2arr397 {
				if yyq397[4] {
					yy413 := &x.Status
					yy413.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq397[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy414 := &x.Status
					yy414.CodecEncodeSelf(e)
				}
			}
			if yysep397 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym415 := z.DecBinary()
	_ = yym415
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl416 := r.ReadMapStart()
			if yyl416 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl416, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl416 := r.ReadArrayStart()
			if yyl416 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl416, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys417Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys417Slc
	var yyhl417 bool = l >= 0
	for yyj417 := 0; ; yyj417++ {
		if yyhl417 {
			if yyj417 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys417Slc = r.DecodeBytes(yys417Slc, true, true)
		yys417 := string(yys417Slc)
		switch yys417 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv419 := &x.APIVersion
				yym420 := z.DecBinary()
				_ = yym420
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv419) {
				} else if !yym420 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv419)
				} else {
					z.DecFallback(yyv419, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv421 := &x.ObjectMeta
				yyv421.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv422 := &x.Spec
				yyv422.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv423 := &x.Status
				yyv423.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys417)
		} // end switch yys417
	} // end for yyj417
	if !yyhl417 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj424 int
	var yyb424 bool
	var yyhl424 bool = l >= 0
	yyj424++
	if yyhl424 {
		yyb424 = yyj424 > l
	} else {
		yyb424 = r.CheckBreak()
	}
	if yyb424 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj424++
	if yyhl424 {
		yyb424 = yyj424 > l
	} else {
		yyb424 = r.CheckBreak()
	}
	if yyb424 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv426 := &x.APIVersion
		yym427 := z.DecBinary()
		_ = yym427
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv426) {
		} else if !yym427 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv426)
		} else {
			z.DecFallback(yyv426, false)
		}
	}
	yyj424++
	if yyhl424 {
		yyb424 = yyj424 > l
	} else {
		yyb424 = r.CheckBreak()
	}
	if yyb424 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv428 := &x.ObjectMeta
		yyv428.CodecDecodeSelf(d)
	}
	yyj424++
	if yyhl424 {
		yyb424 = yyj424 > l
	} else {
		yyb424 = r.CheckBreak()
	}
	if yyb424 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv429 := &x.Spec
		yyv429.CodecDecodeSelf(d)
	}
	yyj424++
	if yyhl424 {
		yyb424 = yyj424 > l
	} else {
		yyb424 = r.CheckBreak()
	}
	if yyb424 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv430 := &x.Status
		yyv430.CodecDecodeSelf(d)
	}
	for {
		yyj424++
		if yyhl424 {
			yyb424 = yyj424 > l
		} else {
			yyb424 = r.CheckBreak()
		}
		if yyb424 {
			break
		}
		z.DecStructFieldNotFound(yyj424-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym431 := z.EncBinary()
		_ = yym431
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep432 := !z.EncBinary()
			yy2arr432 := z.EncBasicHandle().StructToArray
			var yyq432 [4]bool
			_, _, _ = yysep432, yyq432, yy2arr432
			const yyr432 bool = false
			yyq432[0] = x.Kind != ""
			yyq432[1] = true
			yyq432[2] = true
			if yyr432 || yy2arr432 {
				r.EncodeArrayStart(4)
			} else {
				var yynn432 int = 1
				for _, b := range yyq432 {
					if b {
						yynn432++
					}
				}
				r.EncodeMapStart(yynn432)
			}
			if yyr432 || yy2arr432 {
				if yyq432[0] {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq432[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr432 || yy2arr432 {
				if yyq432[1] {
					yy437 := &x.APIVersion
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else if z.HasExtensions() && z.EncExt(yy437) {
					} else if !yym438 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy437)
					} else {
						z.EncFallback(yy437)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq432[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy439 := &x.APIVersion
					yym440 := z.EncBinary()
					_ = yym440
					if false {
					} else if z.HasExtensions() && z.EncExt(yy439) {
					} else if !yym440 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy439)
					} else {
						z.EncFallback(yy439)
					}
				}
			}
			if yyr432 || yy2arr432 {
				if yyq432[2] {
					yy442 := &x.ListMeta
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else if z.HasExtensions() && z.EncExt(yy442) {
					} else {
						z.EncFallback(yy442)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq432[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy444 := &x.ListMeta
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else if z.HasExtensions() && z.EncExt(yy444) {
					} else {
						z.EncFallback(yy444)
					}
				}
			}
			if yyr432 || yy2arr432 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep432 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym449 := z.DecBinary()
	_ = yym449
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl450 := r.ReadMapStart()
			if yyl450 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl450, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl450 := r.ReadArrayStart()
			if yyl450 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl450, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys451Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys451Slc
	var yyhl451 bool = l >= 0
	for yyj451 := 0; ; yyj451++ {
		if yyhl451 {
			if yyj451 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys451Slc = r.DecodeBytes(yys451Slc, true, true)
		yys451 := string(yys451Slc)
		switch yys451 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv453 := &x.APIVersion
				yym454 := z.DecBinary()
				_ = yym454
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv453) {
				} else if !yym454 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv453)
				} else {
					z.DecFallback(yyv453, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv455 := &x.ListMeta
				yym456 := z.DecBinary()
				_ = yym456
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv455) {
				} else {
					z.DecFallback(yyv455, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv457 := &x.Items
				yym458 := z.DecBinary()
				_ = yym458
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv457), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys451)
		} // end switch yys451
	} // end for yyj451
	if !yyhl451 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj459 int
	var yyb459 bool
	var yyhl459 bool = l >= 0
	yyj459++
	if yyhl459 {
		yyb459 = yyj459 > l
	} else {
		yyb459 = r.CheckBreak()
	}
	if yyb459 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj459++
	if yyhl459 {
		yyb459 = yyj459 > l
	} else {
		yyb459 = r.CheckBreak()
	}
	if yyb459 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv461 := &x.APIVersion
		yym462 := z.DecBinary()
		_ = yym462
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv461) {
		} else if !yym462 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv461)
		} else {
			z.DecFallback(yyv461, false)
		}
	}
	yyj459++
	if yyhl459 {
		yyb459 = yyj459 > l
	} else {
		yyb459 = r.CheckBreak()
	}
	if yyb459 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv463 := &x.ListMeta
		yym464 := z.DecBinary()
		_ = yym464
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv463) {
		} else {
			z.DecFallback(yyv463, false)
		}
	}
	yyj459++
	if yyhl459 {
		yyb459 = yyj459 > l
	} else {
		yyb459 = r.CheckBreak()
	}
	if yyb459 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv465 := &x.Items
		yym466 := z.DecBinary()
		_ = yym466
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv465), d)
		}
	}
	for {
		yyj459++
		if yyhl459 {
			yyb459 = yyj459 > l
		} else {
			yyb459 = r.CheckBreak()
		}
		if yyb459 {
			break
		}
		z.DecStructFieldNotFound(yyj459-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym467 := z.EncBinary()
		_ = yym467
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep468 := !z.EncBinary()
			yy2arr468 := z.EncBasicHandle().StructToArray
			var yyq468 [3]bool
			_, _, _ = yysep468, yyq468, yy2arr468
			const yyr468 bool = false
			yyq468[0] = len(x.AccessModes) != 0
			yyq468[1] = true
			yyq468[2] = x.VolumeName != ""
			if yyr468 || yy2arr468 {
				r.EncodeArrayStart(3)
			} else {
				var yynn468 int = 0
				for _, b := range yyq468 {
					if b {
						yynn468++
					}
				}
				r.EncodeMapStart(yynn468)
			}
			if yyr468 || yy2arr468 {
				if yyq468[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym470 := z.EncBinary()
						_ = yym470
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq468[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym471 := z.EncBinary()
						_ = yym471
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr468 || yy2arr468 {
				if yyq468[1] {
					yy473 := &x.Resources
					yy473.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq468[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy474 := &x.Resources
					yy474.CodecEncodeSelf(e)
				}
			}
			if yyr468 || yy2arr468 {
				if yyq468[2] {
					yym476 := z.EncBinary()
					_ = yym476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq468[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym477 := z.EncBinary()
					_ = yym477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep468 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym478 := z.DecBinary()
	_ = yym478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl479 := r.ReadMapStart()
			if yyl479 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl479, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl479 := r.ReadArrayStart()
			if yyl479 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl479, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys480Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys480Slc
	var yyhl480 bool = l >= 0
	for yyj480 := 0; ; yyj480++ {
		if yyhl480 {
			if yyj480 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys480Slc = r.DecodeBytes(yys480Slc, true, true)
		yys480 := string(yys480Slc)
		switch yys480 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv481 := &x.AccessModes
				yym482 := z.DecBinary()
				_ = yym482
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv481), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv483 := &x.Resources
				yyv483.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys480)
		} // end switch yys480
	} // end for yyj480
	if !yyhl480 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj485 int
	var yyb485 bool
	var yyhl485 bool = l >= 0
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv486 := &x.AccessModes
		yym487 := z.DecBinary()
		_ = yym487
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv486), d)
		}
	}
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv488 := &x.Resources
		yyv488.CodecDecodeSelf(d)
	}
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj485++
		if yyhl485 {
			yyb485 = yyj485 > l
		} else {
			yyb485 = r.CheckBreak()
		}
		if yyb485 {
			break
		}
		z.DecStructFieldNotFound(yyj485-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym490 := z.EncBinary()
		_ = yym490
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep491 := !z.EncBinary()
			yy2arr491 := z.EncBasicHandle().StructToArray
			var yyq491 [3]bool
			_, _, _ = yysep491, yyq491, yy2arr491
			const yyr491 bool = false
			yyq491[0] = x.Phase != ""
			yyq491[1] = len(x.AccessModes) != 0
			yyq491[2] = len(x.Capacity) != 0
			if yyr491 || yy2arr491 {
				r.EncodeArrayStart(3)
			} else {
				var yynn491 int = 0
				for _, b := range yyq491 {
					if b {
						yynn491++
					}
				}
				r.EncodeMapStart(yynn491)
			}
			if yyr491 || yy2arr491 {
				if yyq491[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq491[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr491 || yy2arr491 {
				if yyq491[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym494 := z.EncBinary()
						_ = yym494
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq491[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym495 := z.EncBinary()
						_ = yym495
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr491 || yy2arr491 {
				if yyq491[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq491[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep491 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym497 := z.DecBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl498 := r.ReadMapStart()
			if yyl498 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl498, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl498 := r.ReadArrayStart()
			if yyl498 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl498, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys499Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys499Slc
	var yyhl499 bool = l >= 0
	for yyj499 := 0; ; yyj499++ {
		if yyhl499 {
			if yyj499 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys499Slc = r.DecodeBytes(yys499Slc, true, true)
		yys499 := string(yys499Slc)
		switch yys499 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv501 := &x.AccessModes
				yym502 := z.DecBinary()
				_ = yym502
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv501), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv503 := &x.Capacity
				yyv503.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys499)
		} // end switch yys499
	} // end for yyj499
	if !yyhl499 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj504 int
	var yyb504 bool
	var yyhl504 bool = l >= 0
	yyj504++
	if yyhl504 {
		yyb504 = yyj504 > l
	} else {
		yyb504 = r.CheckBreak()
	}
	if yyb504 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj504++
	if yyhl504 {
		yyb504 = yyj504 > l
	} else {
		yyb504 = r.CheckBreak()
	}
	if yyb504 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv506 := &x.AccessModes
		yym507 := z.DecBinary()
		_ = yym507
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv506), d)
		}
	}
	yyj504++
	if yyhl504 {
		yyb504 = yyj504 > l
	} else {
		yyb504 = r.CheckBreak()
	}
	if yyb504 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv508 := &x.Capacity
		yyv508.CodecDecodeSelf(d)
	}
	for {
		yyj504++
		if yyhl504 {
			yyb504 = yyj504 > l
		} else {
			yyb504 = r.CheckBreak()
		}
		if yyb504 {
			break
		}
		z.DecStructFieldNotFound(yyj504-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym509 := z.EncBinary()
	_ = yym509
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym510 := z.DecBinary()
	_ = yym510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym511 := z.EncBinary()
	_ = yym511
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym512 := z.DecBinary()
	_ = yym512
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym513 := z.EncBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym514 := z.DecBinary()
	_ = yym514
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym515 := z.EncBinary()
		_ = yym515
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep516 := !z.EncBinary()
			yy2arr516 := z.EncBasicHandle().StructToArray
			var yyq516 [1]bool
			_, _, _ = yysep516, yyq516, yy2arr516
			const yyr516 bool = false
			if yyr516 || yy2arr516 {
				r.EncodeArrayStart(1)
			} else {
				var yynn516 int = 1
				for _, b := range yyq516 {
					if b {
						yynn516++
					}
				}
				r.EncodeMapStart(yynn516)
			}
			if yyr516 || yy2arr516 {
				yym518 := z.EncBinary()
				_ = yym518
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym519 := z.EncBinary()
				_ = yym519
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep516 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl521 := r.ReadMapStart()
			if yyl521 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl521, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl521 := r.ReadArrayStart()
			if yyl521 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl521, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys522Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys522Slc
	var yyhl522 bool = l >= 0
	for yyj522 := 0; ; yyj522++ {
		if yyhl522 {
			if yyj522 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys522Slc = r.DecodeBytes(yys522Slc, true, true)
		yys522 := string(yys522Slc)
		switch yys522 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys522)
		} // end switch yys522
	} // end for yyj522
	if !yyhl522 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj524 int
	var yyb524 bool
	var yyhl524 bool = l >= 0
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj524++
		if yyhl524 {
			yyb524 = yyj524 > l
		} else {
			yyb524 = r.CheckBreak()
		}
		if yyb524 {
			break
		}
		z.DecStructFieldNotFound(yyj524-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym526 := z.EncBinary()
		_ = yym526
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep527 := !z.EncBinary()
			yy2arr527 := z.EncBasicHandle().StructToArray
			var yyq527 [1]bool
			_, _, _ = yysep527, yyq527, yy2arr527
			const yyr527 bool = false
			yyq527[0] = x.Medium != ""
			if yyr527 || yy2arr527 {
				r.EncodeArrayStart(1)
			} else {
				var yynn527 int = 0
				for _, b := range yyq527 {
					if b {
						yynn527++
					}
				}
				r.EncodeMapStart(yynn527)
			}
			if yyr527 || yy2arr527 {
				if yyq527[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq527[0] {
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yysep527 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym529 := z.DecBinary()
	_ = yym529
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl530 := r.ReadMapStart()
			if yyl530 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl530, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl530 := r.ReadArrayStart()
			if yyl530 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl530, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys531Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys531Slc
	var yyhl531 bool = l >= 0
	for yyj531 := 0; ; yyj531++ {
		if yyhl531 {
			if yyj531 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys531Slc = r.DecodeBytes(yys531Slc, true, true)
		yys531 := string(yys531Slc)
		switch yys531 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys531)
		} // end switch yys531
	} // end for yyj531
	if !yyhl531 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj533 int
	var yyb533 bool
	var yyhl533 bool = l >= 0
	yyj533++
	if yyhl533 {
		yyb533 = yyj533 > l
	} else {
		yyb533 = r.CheckBreak()
	}
	if yyb533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj533++
		if yyhl533 {
			yyb533 = yyj533 > l
		} else {
			yyb533 = r.CheckBreak()
		}
		if yyb533 {
			break
		}
		z.DecStructFieldNotFound(yyj533-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym535 := z.EncBinary()
		_ = yym535
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep536 := !z.EncBinary()
			yy2arr536 := z.EncBasicHandle().StructToArray
			var yyq536 [3]bool
			_, _, _ = yysep536, yyq536, yy2arr536
			const yyr536 bool = false
			yyq536[2] = x.ReadOnly != false
			if yyr536 || yy2arr536 {
				r.EncodeArrayStart(3)
			} else {
				var yynn536 int = 2
				for _, b := range yyq536 {
					if b {
						yynn536++
					}
				}
				r.EncodeMapStart(yynn536)
			}
			if yyr536 || yy2arr536 {
				yym538 := z.EncBinary()
				_ = yym538
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym539 := z.EncBinary()
				_ = yym539
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr536 || yy2arr536 {
				yym541 := z.EncBinary()
				_ = yym541
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym542 := z.EncBinary()
				_ = yym542
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr536 || yy2arr536 {
				if yyq536[2] {
					yym544 := z.EncBinary()
					_ = yym544
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq536[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep536 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym546 := z.DecBinary()
	_ = yym546
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl547 := r.ReadMapStart()
			if yyl547 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl547, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl547 := r.ReadArrayStart()
			if yyl547 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl547, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys548Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys548Slc
	var yyhl548 bool = l >= 0
	for yyj548 := 0; ; yyj548++ {
		if yyhl548 {
			if yyj548 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys548Slc = r.DecodeBytes(yys548Slc, true, true)
		yys548 := string(yys548Slc)
		switch yys548 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys548)
		} // end switch yys548
	} // end for yyj548
	if !yyhl548 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj552 int
	var yyb552 bool
	var yyhl552 bool = l >= 0
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj552++
		if yyhl552 {
			yyb552 = yyj552 > l
		} else {
			yyb552 = r.CheckBreak()
		}
		if yyb552 {
			break
		}
		z.DecStructFieldNotFound(yyj552-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym556 := z.EncBinary()
	_ = yym556
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym557 := z.DecBinary()
	_ = yym557
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym558 := z.EncBinary()
		_ = yym558
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep559 := !z.EncBinary()
			yy2arr559 := z.EncBasicHandle().StructToArray
			var yyq559 [8]bool
			_, _, _ = yysep559, yyq559, yy2arr559
			const yyr559 bool = false
			yyq559[2] = x.FSType != ""
			yyq559[7] = x.ReadOnly != false
			if yyr559 || yy2arr559 {
				r.EncodeArrayStart(8)
			} else {
				var yynn559 int = 6
				for _, b := range yyq559 {
					if b {
						yynn559++
					}
				}
				r.EncodeMapStart(yynn559)
			}
			if yyr559 || yy2arr559 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr559 || yy2arr559 {
				yym564 := z.EncBinary()
				_ = yym564
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym565 := z.EncBinary()
				_ = yym565
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr559 || yy2arr559 {
				if yyq559[2] {
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq559[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym568 := z.EncBinary()
					_ = yym568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr559 || yy2arr559 {
				yym570 := z.EncBinary()
				_ = yym570
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym571 := z.EncBinary()
				_ = yym571
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr559 || yy2arr559 {
				yym573 := z.EncBinary()
				_ = yym573
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym574 := z.EncBinary()
				_ = yym574
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr559 || yy2arr559 {
				yym576 := z.EncBinary()
				_ = yym576
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym577 := z.EncBinary()
				_ = yym577
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr559 || yy2arr559 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr559 || yy2arr559 {
				if yyq559[7] {
					yym580 := z.EncBinary()
					_ = yym580
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq559[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym581 := z.EncBinary()
					_ = yym581
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep559 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym582 := z.DecBinary()
	_ = yym582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl583 := r.ReadMapStart()
			if yyl583 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl583, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl583 := r.ReadArrayStart()
			if yyl583 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl583, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys584Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys584Slc
	var yyhl584 bool = l >= 0
	for yyj584 := 0; ; yyj584++ {
		if yyhl584 {
			if yyj584 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys584Slc = r.DecodeBytes(yys584Slc, true, true)
		yys584 := string(yys584Slc)
		switch yys584 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv585 := &x.CephMonitors
				yym586 := z.DecBinary()
				_ = yym586
				if false {
				} else {
					z.F.DecSliceStringX(yyv585, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys584)
		} // end switch yys584
	} // end for yyj584
	if !yyhl584 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj594 int
	var yyb594 bool
	var yyhl594 bool = l >= 0
	yyj594++
	if yyhl594 {
		yyb594 = yyj594 > l
	} else {
		yyb594 = r.CheckBreak()
	}
	if yyb594 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv595 := &x.CephMonitors
		yym596 := z.DecBinary()
		_ = yym596
		if false {
		} else {
			z.F.DecSliceStringX(yyv595, false, d)
		}
	}
	yyj594++
	if yyhl594 {
		yyb594 = yyj594 > l
	} else {
		yyb594 = r.CheckBreak()
	}
	if yyb594 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj594++
	if yyhl594 {
		yyb594 = yyj594 > l
	} else {
		yyb594 = r.CheckBreak()
	}
	if yyb594 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj594++
	if yyhl594 {
		yyb594 = yyj594 > l
	} else {
		yyb594 = r.CheckBreak()
	}
	if yyb594 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj594++
	if yyhl594 {
		yyb594 = yyj594 > l
	} else {
		yyb594 = r.CheckBreak()
	}
	if yyb594 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj594++
	if yyhl594 {
		yyb594 = yyj594 > l
	} else {
		yyb594 = r.CheckBreak()
	}
	if yyb594 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj594++
	if yyhl594 {
		yyb594 = yyj594 > l
	} else {
		yyb594 = r.CheckBreak()
	}
	if yyb594 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj594++
	if yyhl594 {
		yyb594 = yyj594 > l
	} else {
		yyb594 = r.CheckBreak()
	}
	if yyb594 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj594++
		if yyhl594 {
			yyb594 = yyj594 > l
		} else {
			yyb594 = r.CheckBreak()
		}
		if yyb594 {
			break
		}
		z.DecStructFieldNotFound(yyj594-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym604 := z.EncBinary()
		_ = yym604
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep605 := !z.EncBinary()
			yy2arr605 := z.EncBasicHandle().StructToArray
			var yyq605 [3]bool
			_, _, _ = yysep605, yyq605, yy2arr605
			const yyr605 bool = false
			yyq605[1] = x.FSType != ""
			yyq605[2] = x.ReadOnly != false
			if yyr605 || yy2arr605 {
				r.EncodeArrayStart(3)
			} else {
				var yynn605 int = 1
				for _, b := range yyq605 {
					if b {
						yynn605++
					}
				}
				r.EncodeMapStart(yynn605)
			}
			if yyr605 || yy2arr605 {
				yym607 := z.EncBinary()
				_ = yym607
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym608 := z.EncBinary()
				_ = yym608
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr605 || yy2arr605 {
				if yyq605[1] {
					yym610 := z.EncBinary()
					_ = yym610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq605[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym611 := z.EncBinary()
					_ = yym611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr605 || yy2arr605 {
				if yyq605[2] {
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq605[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym614 := z.EncBinary()
					_ = yym614
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep605 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym615 := z.DecBinary()
	_ = yym615
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl616 := r.ReadMapStart()
			if yyl616 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl616, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl616 := r.ReadArrayStart()
			if yyl616 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl616, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys617Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys617Slc
	var yyhl617 bool = l >= 0
	for yyj617 := 0; ; yyj617++ {
		if yyhl617 {
			if yyj617 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys617Slc = r.DecodeBytes(yys617Slc, true, true)
		yys617 := string(yys617Slc)
		switch yys617 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys617)
		} // end switch yys617
	} // end for yyj617
	if !yyhl617 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj621 int
	var yyb621 bool
	var yyhl621 bool = l >= 0
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj621++
		if yyhl621 {
			yyb621 = yyj621 > l
		} else {
			yyb621 = r.CheckBreak()
		}
		if yyb621 {
			break
		}
		z.DecStructFieldNotFound(yyj621-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym625 := z.EncBinary()
		_ = yym625
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep626 := !z.EncBinary()
			yy2arr626 := z.EncBasicHandle().StructToArray
			var yyq626 [5]bool
			_, _, _ = yysep626, yyq626, yy2arr626
			const yyr626 bool = false
			yyq626[1] = x.User != ""
			yyq626[2] = x.SecretFile != ""
			yyq626[3] = x.SecretRef != nil
			yyq626[4] = x.ReadOnly != false
			if yyr626 || yy2arr626 {
				r.EncodeArrayStart(5)
			} else {
				var yynn626 int = 1
				for _, b := range yyq626 {
					if b {
						yynn626++
					}
				}
				r.EncodeMapStart(yynn626)
			}
			if yyr626 || yy2arr626 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym628 := z.EncBinary()
					_ = yym628
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr626 || yy2arr626 {
				if yyq626[1] {
					yym631 := z.EncBinary()
					_ = yym631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq626[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr626 || yy2arr626 {
				if yyq626[2] {
					yym634 := z.EncBinary()
					_ = yym634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq626[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr626 || yy2arr626 {
				if yyq626[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq626[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr626 || yy2arr626 {
				if yyq626[4] {
					yym638 := z.EncBinary()
					_ = yym638
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq626[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep626 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym640 := z.DecBinary()
	_ = yym640
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl641 := r.ReadMapStart()
			if yyl641 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl641, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl641 := r.ReadArrayStart()
			if yyl641 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl641, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys642Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys642Slc
	var yyhl642 bool = l >= 0
	for yyj642 := 0; ; yyj642++ {
		if yyhl642 {
			if yyj642 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys642Slc = r.DecodeBytes(yys642Slc, true, true)
		yys642 := string(yys642Slc)
		switch yys642 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv643 := &x.Monitors
				yym644 := z.DecBinary()
				_ = yym644
				if false {
				} else {
					z.F.DecSliceStringX(yyv643, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys642)
		} // end switch yys642
	} // end for yyj642
	if !yyhl642 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj649 int
	var yyb649 bool
	var yyhl649 bool = l >= 0
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv650 := &x.Monitors
		yym651 := z.DecBinary()
		_ = yym651
		if false {
		} else {
			z.F.DecSliceStringX(yyv650, false, d)
		}
	}
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj649++
		if yyhl649 {
			yyb649 = yyj649 > l
		} else {
			yyb649 = r.CheckBreak()
		}
		if yyb649 {
			break
		}
		z.DecStructFieldNotFound(yyj649-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym656 := z.EncBinary()
		_ = yym656
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep657 := !z.EncBinary()
			yy2arr657 := z.EncBasicHandle().StructToArray
			var yyq657 [1]bool
			_, _, _ = yysep657, yyq657, yy2arr657
			const yyr657 bool = false
			if yyr657 || yy2arr657 {
				r.EncodeArrayStart(1)
			} else {
				var yynn657 int = 1
				for _, b := range yyq657 {
					if b {
						yynn657++
					}
				}
				r.EncodeMapStart(yynn657)
			}
			if yyr657 || yy2arr657 {
				yym659 := z.EncBinary()
				_ = yym659
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym660 := z.EncBinary()
				_ = yym660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep657 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym661 := z.DecBinary()
	_ = yym661
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl662 := r.ReadMapStart()
			if yyl662 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl662, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl662 := r.ReadArrayStart()
			if yyl662 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl662, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys663Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys663Slc
	var yyhl663 bool = l >= 0
	for yyj663 := 0; ; yyj663++ {
		if yyhl663 {
			if yyj663 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys663Slc = r.DecodeBytes(yys663Slc, true, true)
		yys663 := string(yys663Slc)
		switch yys663 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys663)
		} // end switch yys663
	} // end for yyj663
	if !yyhl663 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj665 int
	var yyb665 bool
	var yyhl665 bool = l >= 0
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj665++
		if yyhl665 {
			yyb665 = yyj665 > l
		} else {
			yyb665 = r.CheckBreak()
		}
		if yyb665 {
			break
		}
		z.DecStructFieldNotFound(yyj665-1, "")
	}
	r.ReadEnd()
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym667 := z.EncBinary()
	_ = yym667
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym668 := z.DecBinary()
	_ = yym668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym669 := z.EncBinary()
		_ = yym669
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep670 := !z.EncBinary()
			yy2arr670 := z.EncBasicHandle().StructToArray
			var yyq670 [4]bool
			_, _, _ = yysep670, yyq670, yy2arr670
			const yyr670 bool = false
			yyq670[2] = x.Partition != 0
			yyq670[3] = x.ReadOnly != false
			if yyr670 || yy2arr670 {
				r.EncodeArrayStart(4)
			} else {
				var yynn670 int = 2
				for _, b := range yyq670 {
					if b {
						yynn670++
					}
				}
				r.EncodeMapStart(yynn670)
			}
			if yyr670 || yy2arr670 {
				yym672 := z.EncBinary()
				_ = yym672
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym673 := z.EncBinary()
				_ = yym673
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr670 || yy2arr670 {
				yym675 := z.EncBinary()
				_ = yym675
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym676 := z.EncBinary()
				_ = yym676
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr670 || yy2arr670 {
				if yyq670[2] {
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq670[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr670 || yy2arr670 {
				if yyq670[3] {
					yym681 := z.EncBinary()
					_ = yym681
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq670[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym682 := z.EncBinary()
					_ = yym682
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep670 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym683 := z.DecBinary()
	_ = yym683
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl684 := r.ReadMapStart()
			if yyl684 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl684, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl684 := r.ReadArrayStart()
			if yyl684 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl684, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys685Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys685Slc
	var yyhl685 bool = l >= 0
	for yyj685 := 0; ; yyj685++ {
		if yyhl685 {
			if yyj685 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys685Slc = r.DecodeBytes(yys685Slc, true, true)
		yys685 := string(yys685Slc)
		switch yys685 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys685)
		} // end switch yys685
	} // end for yyj685
	if !yyhl685 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj690 int
	var yyb690 bool
	var yyhl690 bool = l >= 0
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj690++
		if yyhl690 {
			yyb690 = yyj690 > l
		} else {
			yyb690 = r.CheckBreak()
		}
		if yyb690 {
			break
		}
		z.DecStructFieldNotFound(yyj690-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym695 := z.EncBinary()
		_ = yym695
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep696 := !z.EncBinary()
			yy2arr696 := z.EncBasicHandle().StructToArray
			var yyq696 [4]bool
			_, _, _ = yysep696, yyq696, yy2arr696
			const yyr696 bool = false
			yyq696[2] = x.Partition != 0
			yyq696[3] = x.ReadOnly != false
			if yyr696 || yy2arr696 {
				r.EncodeArrayStart(4)
			} else {
				var yynn696 int = 2
				for _, b := range yyq696 {
					if b {
						yynn696++
					}
				}
				r.EncodeMapStart(yynn696)
			}
			if yyr696 || yy2arr696 {
				yym698 := z.EncBinary()
				_ = yym698
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym699 := z.EncBinary()
				_ = yym699
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr696 || yy2arr696 {
				yym701 := z.EncBinary()
				_ = yym701
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym702 := z.EncBinary()
				_ = yym702
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr696 || yy2arr696 {
				if yyq696[2] {
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq696[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym705 := z.EncBinary()
					_ = yym705
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr696 || yy2arr696 {
				if yyq696[3] {
					yym707 := z.EncBinary()
					_ = yym707
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq696[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym708 := z.EncBinary()
					_ = yym708
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep696 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym709 := z.DecBinary()
	_ = yym709
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl710 := r.ReadMapStart()
			if yyl710 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl710, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl710 := r.ReadArrayStart()
			if yyl710 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl710, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys711Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys711Slc
	var yyhl711 bool = l >= 0
	for yyj711 := 0; ; yyj711++ {
		if yyhl711 {
			if yyj711 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys711Slc = r.DecodeBytes(yys711Slc, true, true)
		yys711 := string(yys711Slc)
		switch yys711 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys711)
		} // end switch yys711
	} // end for yyj711
	if !yyhl711 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj716 int
	var yyb716 bool
	var yyhl716 bool = l >= 0
	yyj716++
	if yyhl716 {
		yyb716 = yyj716 > l
	} else {
		yyb716 = r.CheckBreak()
	}
	if yyb716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj716++
	if yyhl716 {
		yyb716 = yyj716 > l
	} else {
		yyb716 = r.CheckBreak()
	}
	if yyb716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj716++
	if yyhl716 {
		yyb716 = yyj716 > l
	} else {
		yyb716 = r.CheckBreak()
	}
	if yyb716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj716++
	if yyhl716 {
		yyb716 = yyj716 > l
	} else {
		yyb716 = r.CheckBreak()
	}
	if yyb716 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj716++
		if yyhl716 {
			yyb716 = yyj716 > l
		} else {
			yyb716 = r.CheckBreak()
		}
		if yyb716 {
			break
		}
		z.DecStructFieldNotFound(yyj716-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym721 := z.EncBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep722 := !z.EncBinary()
			yy2arr722 := z.EncBasicHandle().StructToArray
			var yyq722 [2]bool
			_, _, _ = yysep722, yyq722, yy2arr722
			const yyr722 bool = false
			if yyr722 || yy2arr722 {
				r.EncodeArrayStart(2)
			} else {
				var yynn722 int = 2
				for _, b := range yyq722 {
					if b {
						yynn722++
					}
				}
				r.EncodeMapStart(yynn722)
			}
			if yyr722 || yy2arr722 {
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr722 || yy2arr722 {
				yym727 := z.EncBinary()
				_ = yym727
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym728 := z.EncBinary()
				_ = yym728
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep722 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym729 := z.DecBinary()
	_ = yym729
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl730 := r.ReadMapStart()
			if yyl730 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl730, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl730 := r.ReadArrayStart()
			if yyl730 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl730, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys731Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys731Slc
	var yyhl731 bool = l >= 0
	for yyj731 := 0; ; yyj731++ {
		if yyhl731 {
			if yyj731 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys731Slc = r.DecodeBytes(yys731Slc, true, true)
		yys731 := string(yys731Slc)
		switch yys731 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys731)
		} // end switch yys731
	} // end for yyj731
	if !yyhl731 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj734 int
	var yyb734 bool
	var yyhl734 bool = l >= 0
	yyj734++
	if yyhl734 {
		yyb734 = yyj734 > l
	} else {
		yyb734 = r.CheckBreak()
	}
	if yyb734 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj734++
	if yyhl734 {
		yyb734 = yyj734 > l
	} else {
		yyb734 = r.CheckBreak()
	}
	if yyb734 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj734++
		if yyhl734 {
			yyb734 = yyj734 > l
		} else {
			yyb734 = r.CheckBreak()
		}
		if yyb734 {
			break
		}
		z.DecStructFieldNotFound(yyj734-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym737 := z.EncBinary()
		_ = yym737
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep738 := !z.EncBinary()
			yy2arr738 := z.EncBasicHandle().StructToArray
			var yyq738 [1]bool
			_, _, _ = yysep738, yyq738, yy2arr738
			const yyr738 bool = false
			if yyr738 || yy2arr738 {
				r.EncodeArrayStart(1)
			} else {
				var yynn738 int = 1
				for _, b := range yyq738 {
					if b {
						yynn738++
					}
				}
				r.EncodeMapStart(yynn738)
			}
			if yyr738 || yy2arr738 {
				yym740 := z.EncBinary()
				_ = yym740
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym741 := z.EncBinary()
				_ = yym741
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep738 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym742 := z.DecBinary()
	_ = yym742
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl743 := r.ReadMapStart()
			if yyl743 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl743, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl743 := r.ReadArrayStart()
			if yyl743 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl743, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys744Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys744Slc
	var yyhl744 bool = l >= 0
	for yyj744 := 0; ; yyj744++ {
		if yyhl744 {
			if yyj744 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys744Slc = r.DecodeBytes(yys744Slc, true, true)
		yys744 := string(yys744Slc)
		switch yys744 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys744)
		} // end switch yys744
	} // end for yyj744
	if !yyhl744 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj746 int
	var yyb746 bool
	var yyhl746 bool = l >= 0
	yyj746++
	if yyhl746 {
		yyb746 = yyj746 > l
	} else {
		yyb746 = r.CheckBreak()
	}
	if yyb746 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj746++
		if yyhl746 {
			yyb746 = yyj746 > l
		} else {
			yyb746 = r.CheckBreak()
		}
		if yyb746 {
			break
		}
		z.DecStructFieldNotFound(yyj746-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym748 := z.EncBinary()
		_ = yym748
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep749 := !z.EncBinary()
			yy2arr749 := z.EncBasicHandle().StructToArray
			var yyq749 [3]bool
			_, _, _ = yysep749, yyq749, yy2arr749
			const yyr749 bool = false
			yyq749[2] = x.ReadOnly != false
			if yyr749 || yy2arr749 {
				r.EncodeArrayStart(3)
			} else {
				var yynn749 int = 2
				for _, b := range yyq749 {
					if b {
						yynn749++
					}
				}
				r.EncodeMapStart(yynn749)
			}
			if yyr749 || yy2arr749 {
				yym751 := z.EncBinary()
				_ = yym751
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym752 := z.EncBinary()
				_ = yym752
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr749 || yy2arr749 {
				yym754 := z.EncBinary()
				_ = yym754
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym755 := z.EncBinary()
				_ = yym755
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr749 || yy2arr749 {
				if yyq749[2] {
					yym757 := z.EncBinary()
					_ = yym757
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq749[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym758 := z.EncBinary()
					_ = yym758
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep749 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym759 := z.DecBinary()
	_ = yym759
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl760 := r.ReadMapStart()
			if yyl760 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl760, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl760 := r.ReadArrayStart()
			if yyl760 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl760, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys761Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys761Slc
	var yyhl761 bool = l >= 0
	for yyj761 := 0; ; yyj761++ {
		if yyhl761 {
			if yyj761 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys761Slc = r.DecodeBytes(yys761Slc, true, true)
		yys761 := string(yys761Slc)
		switch yys761 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys761)
		} // end switch yys761
	} // end for yyj761
	if !yyhl761 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj765 int
	var yyb765 bool
	var yyhl765 bool = l >= 0
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj765++
		if yyhl765 {
			yyb765 = yyj765 > l
		} else {
			yyb765 = r.CheckBreak()
		}
		if yyb765 {
			break
		}
		z.DecStructFieldNotFound(yyj765-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym769 := z.EncBinary()
		_ = yym769
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep770 := !z.EncBinary()
			yy2arr770 := z.EncBasicHandle().StructToArray
			var yyq770 [5]bool
			_, _, _ = yysep770, yyq770, yy2arr770
			const yyr770 bool = false
			yyq770[4] = x.ReadOnly != false
			if yyr770 || yy2arr770 {
				r.EncodeArrayStart(5)
			} else {
				var yynn770 int = 4
				for _, b := range yyq770 {
					if b {
						yynn770++
					}
				}
				r.EncodeMapStart(yynn770)
			}
			if yyr770 || yy2arr770 {
				yym772 := z.EncBinary()
				_ = yym772
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				yym773 := z.EncBinary()
				_ = yym773
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr770 || yy2arr770 {
				yym775 := z.EncBinary()
				_ = yym775
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				yym776 := z.EncBinary()
				_ = yym776
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr770 || yy2arr770 {
				yym778 := z.EncBinary()
				_ = yym778
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				yym779 := z.EncBinary()
				_ = yym779
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr770 || yy2arr770 {
				yym781 := z.EncBinary()
				_ = yym781
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym782 := z.EncBinary()
				_ = yym782
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr770 || yy2arr770 {
				if yyq770[4] {
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq770[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep770 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym786 := z.DecBinary()
	_ = yym786
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl787 := r.ReadMapStart()
			if yyl787 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl787, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl787 := r.ReadArrayStart()
			if yyl787 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl787, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys788Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys788Slc
	var yyhl788 bool = l >= 0
	for yyj788 := 0; ; yyj788++ {
		if yyhl788 {
			if yyj788 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys788Slc = r.DecodeBytes(yys788Slc, true, true)
		yys788 := string(yys788Slc)
		switch yys788 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys788)
		} // end switch yys788
	} // end for yyj788
	if !yyhl788 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj794 int
	var yyb794 bool
	var yyhl794 bool = l >= 0
	yyj794++
	if yyhl794 {
		yyb794 = yyj794 > l
	} else {
		yyb794 = r.CheckBreak()
	}
	if yyb794 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj794++
	if yyhl794 {
		yyb794 = yyj794 > l
	} else {
		yyb794 = r.CheckBreak()
	}
	if yyb794 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj794++
	if yyhl794 {
		yyb794 = yyj794 > l
	} else {
		yyb794 = r.CheckBreak()
	}
	if yyb794 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj794++
	if yyhl794 {
		yyb794 = yyj794 > l
	} else {
		yyb794 = r.CheckBreak()
	}
	if yyb794 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj794++
	if yyhl794 {
		yyb794 = yyj794 > l
	} else {
		yyb794 = r.CheckBreak()
	}
	if yyb794 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj794++
		if yyhl794 {
			yyb794 = yyj794 > l
		} else {
			yyb794 = r.CheckBreak()
		}
		if yyb794 {
			break
		}
		z.DecStructFieldNotFound(yyj794-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym800 := z.EncBinary()
		_ = yym800
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep801 := !z.EncBinary()
			yy2arr801 := z.EncBasicHandle().StructToArray
			var yyq801 [4]bool
			_, _, _ = yysep801, yyq801, yy2arr801
			const yyr801 bool = false
			yyq801[3] = x.ReadOnly != false
			if yyr801 || yy2arr801 {
				r.EncodeArrayStart(4)
			} else {
				var yynn801 int = 3
				for _, b := range yyq801 {
					if b {
						yynn801++
					}
				}
				r.EncodeMapStart(yynn801)
			}
			if yyr801 || yy2arr801 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym804 := z.EncBinary()
					_ = yym804
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr801 || yy2arr801 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy806 := *x.Lun
					yym807 := z.EncBinary()
					_ = yym807
					if false {
					} else {
						r.EncodeInt(int64(yy806))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy808 := *x.Lun
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeInt(int64(yy808))
					}
				}
			}
			if yyr801 || yy2arr801 {
				yym811 := z.EncBinary()
				_ = yym811
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym812 := z.EncBinary()
				_ = yym812
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr801 || yy2arr801 {
				if yyq801[3] {
					yym814 := z.EncBinary()
					_ = yym814
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq801[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym815 := z.EncBinary()
					_ = yym815
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep801 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym816 := z.DecBinary()
	_ = yym816
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl817 := r.ReadMapStart()
			if yyl817 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl817, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl817 := r.ReadArrayStart()
			if yyl817 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl817, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys818Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys818Slc
	var yyhl818 bool = l >= 0
	for yyj818 := 0; ; yyj818++ {
		if yyhl818 {
			if yyj818 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys818Slc = r.DecodeBytes(yys818Slc, true, true)
		yys818 := string(yys818Slc)
		switch yys818 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv819 := &x.TargetWWNs
				yym820 := z.DecBinary()
				_ = yym820
				if false {
				} else {
					z.F.DecSliceStringX(yyv819, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym822 := z.DecBinary()
				_ = yym822
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys818)
		} // end switch yys818
	} // end for yyj818
	if !yyhl818 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj825 int
	var yyb825 bool
	var yyhl825 bool = l >= 0
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv826 := &x.TargetWWNs
		yym827 := z.DecBinary()
		_ = yym827
		if false {
		} else {
			z.F.DecSliceStringX(yyv826, false, d)
		}
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym829 := z.DecBinary()
		_ = yym829
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj825++
		if yyhl825 {
			yyb825 = yyj825 > l
		} else {
			yyb825 = r.CheckBreak()
		}
		if yyb825 {
			break
		}
		z.DecStructFieldNotFound(yyj825-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym832 := z.EncBinary()
		_ = yym832
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep833 := !z.EncBinary()
			yy2arr833 := z.EncBasicHandle().StructToArray
			var yyq833 [5]bool
			_, _, _ = yysep833, yyq833, yy2arr833
			const yyr833 bool = false
			yyq833[0] = x.Name != ""
			yyq833[1] = x.HostPort != 0
			yyq833[3] = x.Protocol != ""
			yyq833[4] = x.HostIP != ""
			if yyr833 || yy2arr833 {
				r.EncodeArrayStart(5)
			} else {
				var yynn833 int = 1
				for _, b := range yyq833 {
					if b {
						yynn833++
					}
				}
				r.EncodeMapStart(yynn833)
			}
			if yyr833 || yy2arr833 {
				if yyq833[0] {
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq833[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr833 || yy2arr833 {
				if yyq833[1] {
					yym838 := z.EncBinary()
					_ = yym838
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq833[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr833 || yy2arr833 {
				yym841 := z.EncBinary()
				_ = yym841
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym842 := z.EncBinary()
				_ = yym842
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr833 || yy2arr833 {
				if yyq833[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq833[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr833 || yy2arr833 {
				if yyq833[4] {
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq833[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep833 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym847 := z.DecBinary()
	_ = yym847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl848 := r.ReadMapStart()
			if yyl848 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl848, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl848 := r.ReadArrayStart()
			if yyl848 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl848, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys849Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys849Slc
	var yyhl849 bool = l >= 0
	for yyj849 := 0; ; yyj849++ {
		if yyhl849 {
			if yyj849 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys849Slc = r.DecodeBytes(yys849Slc, true, true)
		yys849 := string(yys849Slc)
		switch yys849 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys849)
		} // end switch yys849
	} // end for yyj849
	if !yyhl849 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj855 int
	var yyb855 bool
	var yyhl855 bool = l >= 0
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj855++
		if yyhl855 {
			yyb855 = yyj855 > l
		} else {
			yyb855 = r.CheckBreak()
		}
		if yyb855 {
			break
		}
		z.DecStructFieldNotFound(yyj855-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym861 := z.EncBinary()
		_ = yym861
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep862 := !z.EncBinary()
			yy2arr862 := z.EncBasicHandle().StructToArray
			var yyq862 [3]bool
			_, _, _ = yysep862, yyq862, yy2arr862
			const yyr862 bool = false
			yyq862[1] = x.ReadOnly != false
			if yyr862 || yy2arr862 {
				r.EncodeArrayStart(3)
			} else {
				var yynn862 int = 2
				for _, b := range yyq862 {
					if b {
						yynn862++
					}
				}
				r.EncodeMapStart(yynn862)
			}
			if yyr862 || yy2arr862 {
				yym864 := z.EncBinary()
				_ = yym864
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym865 := z.EncBinary()
				_ = yym865
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr862 || yy2arr862 {
				if yyq862[1] {
					yym867 := z.EncBinary()
					_ = yym867
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq862[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr862 || yy2arr862 {
				yym870 := z.EncBinary()
				_ = yym870
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym871 := z.EncBinary()
				_ = yym871
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep862 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym872 := z.DecBinary()
	_ = yym872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl873 := r.ReadMapStart()
			if yyl873 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl873, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl873 := r.ReadArrayStart()
			if yyl873 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl873, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys874Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys874Slc
	var yyhl874 bool = l >= 0
	for yyj874 := 0; ; yyj874++ {
		if yyhl874 {
			if yyj874 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys874Slc = r.DecodeBytes(yys874Slc, true, true)
		yys874 := string(yys874Slc)
		switch yys874 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys874)
		} // end switch yys874
	} // end for yyj874
	if !yyhl874 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj878 int
	var yyb878 bool
	var yyhl878 bool = l >= 0
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj878++
		if yyhl878 {
			yyb878 = yyj878 > l
		} else {
			yyb878 = r.CheckBreak()
		}
		if yyb878 {
			break
		}
		z.DecStructFieldNotFound(yyj878-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym882 := z.EncBinary()
		_ = yym882
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep883 := !z.EncBinary()
			yy2arr883 := z.EncBasicHandle().StructToArray
			var yyq883 [3]bool
			_, _, _ = yysep883, yyq883, yy2arr883
			const yyr883 bool = false
			yyq883[1] = x.Value != ""
			yyq883[2] = x.ValueFrom != nil
			if yyr883 || yy2arr883 {
				r.EncodeArrayStart(3)
			} else {
				var yynn883 int = 1
				for _, b := range yyq883 {
					if b {
						yynn883++
					}
				}
				r.EncodeMapStart(yynn883)
			}
			if yyr883 || yy2arr883 {
				yym885 := z.EncBinary()
				_ = yym885
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym886 := z.EncBinary()
				_ = yym886
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr883 || yy2arr883 {
				if yyq883[1] {
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq883[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym889 := z.EncBinary()
					_ = yym889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr883 || yy2arr883 {
				if yyq883[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq883[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep883 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym891 := z.DecBinary()
	_ = yym891
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl892 := r.ReadMapStart()
			if yyl892 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl892, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl892 := r.ReadArrayStart()
			if yyl892 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl892, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys893Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys893Slc
	var yyhl893 bool = l >= 0
	for yyj893 := 0; ; yyj893++ {
		if yyhl893 {
			if yyj893 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys893Slc = r.DecodeBytes(yys893Slc, true, true)
		yys893 := string(yys893Slc)
		switch yys893 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys893)
		} // end switch yys893
	} // end for yyj893
	if !yyhl893 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj897 int
	var yyb897 bool
	var yyhl897 bool = l >= 0
	yyj897++
	if yyhl897 {
		yyb897 = yyj897 > l
	} else {
		yyb897 = r.CheckBreak()
	}
	if yyb897 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj897++
	if yyhl897 {
		yyb897 = yyj897 > l
	} else {
		yyb897 = r.CheckBreak()
	}
	if yyb897 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj897++
	if yyhl897 {
		yyb897 = yyj897 > l
	} else {
		yyb897 = r.CheckBreak()
	}
	if yyb897 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj897++
		if yyhl897 {
			yyb897 = yyj897 > l
		} else {
			yyb897 = r.CheckBreak()
		}
		if yyb897 {
			break
		}
		z.DecStructFieldNotFound(yyj897-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym901 := z.EncBinary()
		_ = yym901
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep902 := !z.EncBinary()
			yy2arr902 := z.EncBasicHandle().StructToArray
			var yyq902 [1]bool
			_, _, _ = yysep902, yyq902, yy2arr902
			const yyr902 bool = false
			if yyr902 || yy2arr902 {
				r.EncodeArrayStart(1)
			} else {
				var yynn902 int = 1
				for _, b := range yyq902 {
					if b {
						yynn902++
					}
				}
				r.EncodeMapStart(yynn902)
			}
			if yyr902 || yy2arr902 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep902 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym904 := z.DecBinary()
	_ = yym904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl905 := r.ReadMapStart()
			if yyl905 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl905, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl905 := r.ReadArrayStart()
			if yyl905 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl905, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys906Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys906Slc
	var yyhl906 bool = l >= 0
	for yyj906 := 0; ; yyj906++ {
		if yyhl906 {
			if yyj906 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys906Slc = r.DecodeBytes(yys906Slc, true, true)
		yys906 := string(yys906Slc)
		switch yys906 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys906)
		} // end switch yys906
	} // end for yyj906
	if !yyhl906 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj908 int
	var yyb908 bool
	var yyhl908 bool = l >= 0
	yyj908++
	if yyhl908 {
		yyb908 = yyj908 > l
	} else {
		yyb908 = r.CheckBreak()
	}
	if yyb908 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj908++
		if yyhl908 {
			yyb908 = yyj908 > l
		} else {
			yyb908 = r.CheckBreak()
		}
		if yyb908 {
			break
		}
		z.DecStructFieldNotFound(yyj908-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym910 := z.EncBinary()
		_ = yym910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep911 := !z.EncBinary()
			yy2arr911 := z.EncBasicHandle().StructToArray
			var yyq911 [2]bool
			_, _, _ = yysep911, yyq911, yy2arr911
			const yyr911 bool = false
			yyq911[0] = x.APIVersion != ""
			if yyr911 || yy2arr911 {
				r.EncodeArrayStart(2)
			} else {
				var yynn911 int = 1
				for _, b := range yyq911 {
					if b {
						yynn911++
					}
				}
				r.EncodeMapStart(yynn911)
			}
			if yyr911 || yy2arr911 {
				if yyq911[0] {
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[0] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr911 || yy2arr911 {
				yym916 := z.EncBinary()
				_ = yym916
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym917 := z.EncBinary()
				_ = yym917
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep911 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym918 := z.DecBinary()
	_ = yym918
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl919 := r.ReadMapStart()
			if yyl919 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl919, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl919 := r.ReadArrayStart()
			if yyl919 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl919, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys920Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys920Slc
	var yyhl920 bool = l >= 0
	for yyj920 := 0; ; yyj920++ {
		if yyhl920 {
			if yyj920 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys920Slc = r.DecodeBytes(yys920Slc, true, true)
		yys920 := string(yys920Slc)
		switch yys920 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys920)
		} // end switch yys920
	} // end for yyj920
	if !yyhl920 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj923 int
	var yyb923 bool
	var yyhl923 bool = l >= 0
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj923++
		if yyhl923 {
			yyb923 = yyj923 > l
		} else {
			yyb923 = r.CheckBreak()
		}
		if yyb923 {
			break
		}
		z.DecStructFieldNotFound(yyj923-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym926 := z.EncBinary()
		_ = yym926
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep927 := !z.EncBinary()
			yy2arr927 := z.EncBasicHandle().StructToArray
			var yyq927 [4]bool
			_, _, _ = yysep927, yyq927, yy2arr927
			const yyr927 bool = false
			yyq927[0] = x.Path != ""
			yyq927[2] = x.Host != ""
			yyq927[3] = x.Scheme != ""
			if yyr927 || yy2arr927 {
				r.EncodeArrayStart(4)
			} else {
				var yynn927 int = 1
				for _, b := range yyq927 {
					if b {
						yynn927++
					}
				}
				r.EncodeMapStart(yynn927)
			}
			if yyr927 || yy2arr927 {
				if yyq927[0] {
					yym929 := z.EncBinary()
					_ = yym929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq927[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym930 := z.EncBinary()
					_ = yym930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr927 || yy2arr927 {
				yy932 := &x.Port
				yym933 := z.EncBinary()
				_ = yym933
				if false {
				} else if z.HasExtensions() && z.EncExt(yy932) {
				} else if !yym933 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy932)
				} else {
					z.EncFallback(yy932)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy934 := &x.Port
				yym935 := z.EncBinary()
				_ = yym935
				if false {
				} else if z.HasExtensions() && z.EncExt(yy934) {
				} else if !yym935 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy934)
				} else {
					z.EncFallback(yy934)
				}
			}
			if yyr927 || yy2arr927 {
				if yyq927[2] {
					yym937 := z.EncBinary()
					_ = yym937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq927[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym938 := z.EncBinary()
					_ = yym938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr927 || yy2arr927 {
				if yyq927[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq927[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep927 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym940 := z.DecBinary()
	_ = yym940
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl941 := r.ReadMapStart()
			if yyl941 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl941, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl941 := r.ReadArrayStart()
			if yyl941 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl941, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys942Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys942Slc
	var yyhl942 bool = l >= 0
	for yyj942 := 0; ; yyj942++ {
		if yyhl942 {
			if yyj942 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys942Slc = r.DecodeBytes(yys942Slc, true, true)
		yys942 := string(yys942Slc)
		switch yys942 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv944 := &x.Port
				yym945 := z.DecBinary()
				_ = yym945
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv944) {
				} else if !yym945 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv944)
				} else {
					z.DecFallback(yyv944, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys942)
		} // end switch yys942
	} // end for yyj942
	if !yyhl942 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj948 int
	var yyb948 bool
	var yyhl948 bool = l >= 0
	yyj948++
	if yyhl948 {
		yyb948 = yyj948 > l
	} else {
		yyb948 = r.CheckBreak()
	}
	if yyb948 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj948++
	if yyhl948 {
		yyb948 = yyj948 > l
	} else {
		yyb948 = r.CheckBreak()
	}
	if yyb948 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv950 := &x.Port
		yym951 := z.DecBinary()
		_ = yym951
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv950) {
		} else if !yym951 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv950)
		} else {
			z.DecFallback(yyv950, false)
		}
	}
	yyj948++
	if yyhl948 {
		yyb948 = yyj948 > l
	} else {
		yyb948 = r.CheckBreak()
	}
	if yyb948 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj948++
	if yyhl948 {
		yyb948 = yyj948 > l
	} else {
		yyb948 = r.CheckBreak()
	}
	if yyb948 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj948++
		if yyhl948 {
			yyb948 = yyj948 > l
		} else {
			yyb948 = r.CheckBreak()
		}
		if yyb948 {
			break
		}
		z.DecStructFieldNotFound(yyj948-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym954 := z.EncBinary()
	_ = yym954
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym955 := z.DecBinary()
	_ = yym955
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym956 := z.EncBinary()
		_ = yym956
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep957 := !z.EncBinary()
			yy2arr957 := z.EncBasicHandle().StructToArray
			var yyq957 [1]bool
			_, _, _ = yysep957, yyq957, yy2arr957
			const yyr957 bool = false
			if yyr957 || yy2arr957 {
				r.EncodeArrayStart(1)
			} else {
				var yynn957 int = 1
				for _, b := range yyq957 {
					if b {
						yynn957++
					}
				}
				r.EncodeMapStart(yynn957)
			}
			if yyr957 || yy2arr957 {
				yy959 := &x.Port
				yym960 := z.EncBinary()
				_ = yym960
				if false {
				} else if z.HasExtensions() && z.EncExt(yy959) {
				} else if !yym960 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy959)
				} else {
					z.EncFallback(yy959)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy961 := &x.Port
				yym962 := z.EncBinary()
				_ = yym962
				if false {
				} else if z.HasExtensions() && z.EncExt(yy961) {
				} else if !yym962 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy961)
				} else {
					z.EncFallback(yy961)
				}
			}
			if yysep957 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym963 := z.DecBinary()
	_ = yym963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl964 := r.ReadMapStart()
			if yyl964 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl964, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl964 := r.ReadArrayStart()
			if yyl964 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys965Slc
	var yyhl965 bool = l >= 0
	for yyj965 := 0; ; yyj965++ {
		if yyhl965 {
			if yyj965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys965Slc = r.DecodeBytes(yys965Slc, true, true)
		yys965 := string(yys965Slc)
		switch yys965 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv966 := &x.Port
				yym967 := z.DecBinary()
				_ = yym967
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv966) {
				} else if !yym967 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv966)
				} else {
					z.DecFallback(yyv966, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys965)
		} // end switch yys965
	} // end for yyj965
	if !yyhl965 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj968 int
	var yyb968 bool
	var yyhl968 bool = l >= 0
	yyj968++
	if yyhl968 {
		yyb968 = yyj968 > l
	} else {
		yyb968 = r.CheckBreak()
	}
	if yyb968 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv969 := &x.Port
		yym970 := z.DecBinary()
		_ = yym970
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv969) {
		} else if !yym970 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv969)
		} else {
			z.DecFallback(yyv969, false)
		}
	}
	for {
		yyj968++
		if yyhl968 {
			yyb968 = yyj968 > l
		} else {
			yyb968 = r.CheckBreak()
		}
		if yyb968 {
			break
		}
		z.DecStructFieldNotFound(yyj968-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym971 := z.EncBinary()
		_ = yym971
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep972 := !z.EncBinary()
			yy2arr972 := z.EncBasicHandle().StructToArray
			var yyq972 [1]bool
			_, _, _ = yysep972, yyq972, yy2arr972
			const yyr972 bool = false
			yyq972[0] = len(x.Command) != 0
			if yyr972 || yy2arr972 {
				r.EncodeArrayStart(1)
			} else {
				var yynn972 int = 0
				for _, b := range yyq972 {
					if b {
						yynn972++
					}
				}
				r.EncodeMapStart(yynn972)
			}
			if yyr972 || yy2arr972 {
				if yyq972[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym974 := z.EncBinary()
						_ = yym974
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq972[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym975 := z.EncBinary()
						_ = yym975
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep972 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym976 := z.DecBinary()
	_ = yym976
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl977 := r.ReadMapStart()
			if yyl977 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl977, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl977 := r.ReadArrayStart()
			if yyl977 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl977, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys978Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys978Slc
	var yyhl978 bool = l >= 0
	for yyj978 := 0; ; yyj978++ {
		if yyhl978 {
			if yyj978 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys978Slc = r.DecodeBytes(yys978Slc, true, true)
		yys978 := string(yys978Slc)
		switch yys978 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv979 := &x.Command
				yym980 := z.DecBinary()
				_ = yym980
				if false {
				} else {
					z.F.DecSliceStringX(yyv979, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys978)
		} // end switch yys978
	} // end for yyj978
	if !yyhl978 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj981 int
	var yyb981 bool
	var yyhl981 bool = l >= 0
	yyj981++
	if yyhl981 {
		yyb981 = yyj981 > l
	} else {
		yyb981 = r.CheckBreak()
	}
	if yyb981 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv982 := &x.Command
		yym983 := z.DecBinary()
		_ = yym983
		if false {
		} else {
			z.F.DecSliceStringX(yyv982, false, d)
		}
	}
	for {
		yyj981++
		if yyhl981 {
			yyb981 = yyj981 > l
		} else {
			yyb981 = r.CheckBreak()
		}
		if yyb981 {
			break
		}
		z.DecStructFieldNotFound(yyj981-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym984 := z.EncBinary()
		_ = yym984
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep985 := !z.EncBinary()
			yy2arr985 := z.EncBasicHandle().StructToArray
			var yyq985 [8]bool
			_, _, _ = yysep985, yyq985, yy2arr985
			const yyr985 bool = false
			yyq985[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq985[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq985[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq985[3] = x.InitialDelaySeconds != 0
			yyq985[4] = x.TimeoutSeconds != 0
			yyq985[5] = x.PeriodSeconds != 0
			yyq985[6] = x.SuccessThreshold != 0
			yyq985[7] = x.FailureThreshold != 0
			if yyr985 || yy2arr985 {
				r.EncodeArrayStart(8)
			} else {
				var yynn985 int = 0
				for _, b := range yyq985 {
					if b {
						yynn985++
					}
				}
				r.EncodeMapStart(yynn985)
			}
			var yyn986 bool
			if x.Handler.Exec == nil {
				yyn986 = true
				goto LABEL986
			}
		LABEL986:
			if yyr985 || yy2arr985 {
				if yyn986 {
					r.EncodeNil()
				} else {
					if yyq985[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq985[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn986 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn987 bool
			if x.Handler.HTTPGet == nil {
				yyn987 = true
				goto LABEL987
			}
		LABEL987:
			if yyr985 || yy2arr985 {
				if yyn987 {
					r.EncodeNil()
				} else {
					if yyq985[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq985[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn987 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn988 bool
			if x.Handler.TCPSocket == nil {
				yyn988 = true
				goto LABEL988
			}
		LABEL988:
			if yyr985 || yy2arr985 {
				if yyn988 {
					r.EncodeNil()
				} else {
					if yyq985[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq985[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn988 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr985 || yy2arr985 {
				if yyq985[3] {
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq985[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym991 := z.EncBinary()
					_ = yym991
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr985 || yy2arr985 {
				if yyq985[4] {
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq985[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym994 := z.EncBinary()
					_ = yym994
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr985 || yy2arr985 {
				if yyq985[5] {
					yym996 := z.EncBinary()
					_ = yym996
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq985[5] {
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					yym997 := z.EncBinary()
					_ = yym997
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr985 || yy2arr985 {
				if yyq985[6] {
					yym999 := z.EncBinary()
					_ = yym999
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq985[6] {
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					yym1000 := z.EncBinary()
					_ = yym1000
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr985 || yy2arr985 {
				if yyq985[7] {
					yym1002 := z.EncBinary()
					_ = yym1002
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq985[7] {
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					yym1003 := z.EncBinary()
					_ = yym1003
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yysep985 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1004 := z.DecBinary()
	_ = yym1004
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1005 := r.ReadMapStart()
			if yyl1005 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1005, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1005 := r.ReadArrayStart()
			if yyl1005 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1005, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1006Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1006Slc
	var yyhl1006 bool = l >= 0
	for yyj1006 := 0; ; yyj1006++ {
		if yyhl1006 {
			if yyj1006 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1006Slc = r.DecodeBytes(yys1006Slc, true, true)
		yys1006 := string(yys1006Slc)
		switch yys1006 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int64(r.DecodeInt(64))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1006)
		} // end switch yys1006
	} // end for yyj1006
	if !yyhl1006 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1015 int
	var yyb1015 bool
	var yyhl1015 bool = l >= 0
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int64(r.DecodeInt(64))
	}
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1015++
		if yyhl1015 {
			yyb1015 = yyj1015 > l
		} else {
			yyb1015 = r.CheckBreak()
		}
		if yyb1015 {
			break
		}
		z.DecStructFieldNotFound(yyj1015-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1024 := z.EncBinary()
	_ = yym1024
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1025 := z.DecBinary()
	_ = yym1025
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1026 := z.EncBinary()
	_ = yym1026
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1027 := z.DecBinary()
	_ = yym1027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1028 := z.EncBinary()
		_ = yym1028
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1029 := !z.EncBinary()
			yy2arr1029 := z.EncBasicHandle().StructToArray
			var yyq1029 [2]bool
			_, _, _ = yysep1029, yyq1029, yy2arr1029
			const yyr1029 bool = false
			yyq1029[0] = len(x.Add) != 0
			yyq1029[1] = len(x.Drop) != 0
			if yyr1029 || yy2arr1029 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1029 int = 0
				for _, b := range yyq1029 {
					if b {
						yynn1029++
					}
				}
				r.EncodeMapStart(yynn1029)
			}
			if yyr1029 || yy2arr1029 {
				if yyq1029[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1031 := z.EncBinary()
						_ = yym1031
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1029[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1032 := z.EncBinary()
						_ = yym1032
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1029 || yy2arr1029 {
				if yyq1029[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1034 := z.EncBinary()
						_ = yym1034
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1029[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1035 := z.EncBinary()
						_ = yym1035
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep1029 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1036 := z.DecBinary()
	_ = yym1036
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1037 := r.ReadMapStart()
			if yyl1037 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1037, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1037 := r.ReadArrayStart()
			if yyl1037 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1037, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1038Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1038Slc
	var yyhl1038 bool = l >= 0
	for yyj1038 := 0; ; yyj1038++ {
		if yyhl1038 {
			if yyj1038 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1038Slc = r.DecodeBytes(yys1038Slc, true, true)
		yys1038 := string(yys1038Slc)
		switch yys1038 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1039 := &x.Add
				yym1040 := z.DecBinary()
				_ = yym1040
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1039), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1041 := &x.Drop
				yym1042 := z.DecBinary()
				_ = yym1042
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1041), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1038)
		} // end switch yys1038
	} // end for yyj1038
	if !yyhl1038 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1043 int
	var yyb1043 bool
	var yyhl1043 bool = l >= 0
	yyj1043++
	if yyhl1043 {
		yyb1043 = yyj1043 > l
	} else {
		yyb1043 = r.CheckBreak()
	}
	if yyb1043 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1044 := &x.Add
		yym1045 := z.DecBinary()
		_ = yym1045
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1044), d)
		}
	}
	yyj1043++
	if yyhl1043 {
		yyb1043 = yyj1043 > l
	} else {
		yyb1043 = r.CheckBreak()
	}
	if yyb1043 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1046 := &x.Drop
		yym1047 := z.DecBinary()
		_ = yym1047
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1046), d)
		}
	}
	for {
		yyj1043++
		if yyhl1043 {
			yyb1043 = yyj1043 > l
		} else {
			yyb1043 = r.CheckBreak()
		}
		if yyb1043 {
			break
		}
		z.DecStructFieldNotFound(yyj1043-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1048 := z.EncBinary()
		_ = yym1048
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1049 := !z.EncBinary()
			yy2arr1049 := z.EncBasicHandle().StructToArray
			var yyq1049 [2]bool
			_, _, _ = yysep1049, yyq1049, yy2arr1049
			const yyr1049 bool = false
			yyq1049[0] = len(x.Limits) != 0
			yyq1049[1] = len(x.Requests) != 0
			if yyr1049 || yy2arr1049 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1049 int = 0
				for _, b := range yyq1049 {
					if b {
						yynn1049++
					}
				}
				r.EncodeMapStart(yynn1049)
			}
			if yyr1049 || yy2arr1049 {
				if yyq1049[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1049[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1049 || yy2arr1049 {
				if yyq1049[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1049[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1049 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1052 := z.DecBinary()
	_ = yym1052
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1053 := r.ReadMapStart()
			if yyl1053 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1053, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1053 := r.ReadArrayStart()
			if yyl1053 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1053, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1054Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1054Slc
	var yyhl1054 bool = l >= 0
	for yyj1054 := 0; ; yyj1054++ {
		if yyhl1054 {
			if yyj1054 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1054Slc = r.DecodeBytes(yys1054Slc, true, true)
		yys1054 := string(yys1054Slc)
		switch yys1054 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1055 := &x.Limits
				yyv1055.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1056 := &x.Requests
				yyv1056.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1054)
		} // end switch yys1054
	} // end for yyj1054
	if !yyhl1054 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1057 int
	var yyb1057 bool
	var yyhl1057 bool = l >= 0
	yyj1057++
	if yyhl1057 {
		yyb1057 = yyj1057 > l
	} else {
		yyb1057 = r.CheckBreak()
	}
	if yyb1057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1058 := &x.Limits
		yyv1058.CodecDecodeSelf(d)
	}
	yyj1057++
	if yyhl1057 {
		yyb1057 = yyj1057 > l
	} else {
		yyb1057 = r.CheckBreak()
	}
	if yyb1057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1059 := &x.Requests
		yyv1059.CodecDecodeSelf(d)
	}
	for {
		yyj1057++
		if yyhl1057 {
			yyb1057 = yyj1057 > l
		} else {
			yyb1057 = r.CheckBreak()
		}
		if yyb1057 {
			break
		}
		z.DecStructFieldNotFound(yyj1057-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1060 := z.EncBinary()
		_ = yym1060
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1061 := !z.EncBinary()
			yy2arr1061 := z.EncBasicHandle().StructToArray
			var yyq1061 [18]bool
			_, _, _ = yysep1061, yyq1061, yy2arr1061
			const yyr1061 bool = false
			yyq1061[1] = x.Image != ""
			yyq1061[2] = len(x.Command) != 0
			yyq1061[3] = len(x.Args) != 0
			yyq1061[4] = x.WorkingDir != ""
			yyq1061[5] = len(x.Ports) != 0
			yyq1061[6] = len(x.Env) != 0
			yyq1061[7] = true
			yyq1061[8] = len(x.VolumeMounts) != 0
			yyq1061[9] = x.LivenessProbe != nil
			yyq1061[10] = x.ReadinessProbe != nil
			yyq1061[11] = x.Lifecycle != nil
			yyq1061[12] = x.TerminationMessagePath != ""
			yyq1061[13] = x.ImagePullPolicy != ""
			yyq1061[14] = x.SecurityContext != nil
			yyq1061[15] = x.Stdin != false
			yyq1061[16] = x.StdinOnce != false
			yyq1061[17] = x.TTY != false
			if yyr1061 || yy2arr1061 {
				r.EncodeArrayStart(18)
			} else {
				var yynn1061 int = 1
				for _, b := range yyq1061 {
					if b {
						yynn1061++
					}
				}
				r.EncodeMapStart(yynn1061)
			}
			if yyr1061 || yy2arr1061 {
				yym1063 := z.EncBinary()
				_ = yym1063
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1064 := z.EncBinary()
				_ = yym1064
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[1] {
					yym1066 := z.EncBinary()
					_ = yym1066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1061[1] {
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					yym1067 := z.EncBinary()
					_ = yym1067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1069 := z.EncBinary()
						_ = yym1069
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1070 := z.EncBinary()
						_ = yym1070
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1072 := z.EncBinary()
						_ = yym1072
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1073 := z.EncBinary()
						_ = yym1073
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[4] {
					yym1075 := z.EncBinary()
					_ = yym1075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1061[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1076 := z.EncBinary()
					_ = yym1076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1078 := z.EncBinary()
						_ = yym1078
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1079 := z.EncBinary()
						_ = yym1079
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1081 := z.EncBinary()
						_ = yym1081
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1082 := z.EncBinary()
						_ = yym1082
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[7] {
					yy1084 := &x.Resources
					yy1084.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1085 := &x.Resources
					yy1085.CodecEncodeSelf(e)
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1087 := z.EncBinary()
						_ = yym1087
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1088 := z.EncBinary()
						_ = yym1088
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[12] {
					yym1093 := z.EncBinary()
					_ = yym1093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1061[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1094 := z.EncBinary()
					_ = yym1094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1061[13] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[15] {
					yym1098 := z.EncBinary()
					_ = yym1098
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1061[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[16] {
					yym1101 := z.EncBinary()
					_ = yym1101
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1061[16] {
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					yym1102 := z.EncBinary()
					_ = yym1102
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				if yyq1061[17] {
					yym1104 := z.EncBinary()
					_ = yym1104
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1061[17] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1105 := z.EncBinary()
					_ = yym1105
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1061 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1106 := z.DecBinary()
	_ = yym1106
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1107 := r.ReadMapStart()
			if yyl1107 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1107, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1107 := r.ReadArrayStart()
			if yyl1107 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1107, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1108Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1108Slc
	var yyhl1108 bool = l >= 0
	for yyj1108 := 0; ; yyj1108++ {
		if yyhl1108 {
			if yyj1108 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1108Slc = r.DecodeBytes(yys1108Slc, true, true)
		yys1108 := string(yys1108Slc)
		switch yys1108 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1111 := &x.Command
				yym1112 := z.DecBinary()
				_ = yym1112
				if false {
				} else {
					z.F.DecSliceStringX(yyv1111, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1113 := &x.Args
				yym1114 := z.DecBinary()
				_ = yym1114
				if false {
				} else {
					z.F.DecSliceStringX(yyv1113, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1116 := &x.Ports
				yym1117 := z.DecBinary()
				_ = yym1117
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1116), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1118 := &x.Env
				yym1119 := z.DecBinary()
				_ = yym1119
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1118), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1120 := &x.Resources
				yyv1120.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1121 := &x.VolumeMounts
				yym1122 := z.DecBinary()
				_ = yym1122
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1121), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1108)
		} // end switch yys1108
	} // end for yyj1108
	if !yyhl1108 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1132 int
	var yyb1132 bool
	var yyhl1132 bool = l >= 0
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1135 := &x.Command
		yym1136 := z.DecBinary()
		_ = yym1136
		if false {
		} else {
			z.F.DecSliceStringX(yyv1135, false, d)
		}
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1137 := &x.Args
		yym1138 := z.DecBinary()
		_ = yym1138
		if false {
		} else {
			z.F.DecSliceStringX(yyv1137, false, d)
		}
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1140 := &x.Ports
		yym1141 := z.DecBinary()
		_ = yym1141
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1140), d)
		}
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1142 := &x.Env
		yym1143 := z.DecBinary()
		_ = yym1143
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1142), d)
		}
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1144 := &x.Resources
		yyv1144.CodecDecodeSelf(d)
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1145 := &x.VolumeMounts
		yym1146 := z.DecBinary()
		_ = yym1146
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1145), d)
		}
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1132++
		if yyhl1132 {
			yyb1132 = yyj1132 > l
		} else {
			yyb1132 = r.CheckBreak()
		}
		if yyb1132 {
			break
		}
		z.DecStructFieldNotFound(yyj1132-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1156 := z.EncBinary()
		_ = yym1156
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1157 := !z.EncBinary()
			yy2arr1157 := z.EncBasicHandle().StructToArray
			var yyq1157 [3]bool
			_, _, _ = yysep1157, yyq1157, yy2arr1157
			const yyr1157 bool = false
			yyq1157[0] = x.Exec != nil
			yyq1157[1] = x.HTTPGet != nil
			yyq1157[2] = x.TCPSocket != nil
			if yyr1157 || yy2arr1157 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1157 int = 0
				for _, b := range yyq1157 {
					if b {
						yynn1157++
					}
				}
				r.EncodeMapStart(yynn1157)
			}
			if yyr1157 || yy2arr1157 {
				if yyq1157[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1157[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1157 || yy2arr1157 {
				if yyq1157[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1157[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1157 || yy2arr1157 {
				if yyq1157[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1157[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1157 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1161 := z.DecBinary()
	_ = yym1161
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1162 := r.ReadMapStart()
			if yyl1162 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1162, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1162 := r.ReadArrayStart()
			if yyl1162 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1162, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1163Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1163Slc
	var yyhl1163 bool = l >= 0
	for yyj1163 := 0; ; yyj1163++ {
		if yyhl1163 {
			if yyj1163 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1163Slc = r.DecodeBytes(yys1163Slc, true, true)
		yys1163 := string(yys1163Slc)
		switch yys1163 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1163)
		} // end switch yys1163
	} // end for yyj1163
	if !yyhl1163 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1167 int
	var yyb1167 bool
	var yyhl1167 bool = l >= 0
	yyj1167++
	if yyhl1167 {
		yyb1167 = yyj1167 > l
	} else {
		yyb1167 = r.CheckBreak()
	}
	if yyb1167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1167++
	if yyhl1167 {
		yyb1167 = yyj1167 > l
	} else {
		yyb1167 = r.CheckBreak()
	}
	if yyb1167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1167++
	if yyhl1167 {
		yyb1167 = yyj1167 > l
	} else {
		yyb1167 = r.CheckBreak()
	}
	if yyb1167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1167++
		if yyhl1167 {
			yyb1167 = yyj1167 > l
		} else {
			yyb1167 = r.CheckBreak()
		}
		if yyb1167 {
			break
		}
		z.DecStructFieldNotFound(yyj1167-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1171 := z.EncBinary()
		_ = yym1171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1172 := !z.EncBinary()
			yy2arr1172 := z.EncBasicHandle().StructToArray
			var yyq1172 [2]bool
			_, _, _ = yysep1172, yyq1172, yy2arr1172
			const yyr1172 bool = false
			yyq1172[0] = x.PostStart != nil
			yyq1172[1] = x.PreStop != nil
			if yyr1172 || yy2arr1172 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1172 int = 0
				for _, b := range yyq1172 {
					if b {
						yynn1172++
					}
				}
				r.EncodeMapStart(yynn1172)
			}
			if yyr1172 || yy2arr1172 {
				if yyq1172[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1172[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1172 || yy2arr1172 {
				if yyq1172[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1172[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1172 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1175 := z.DecBinary()
	_ = yym1175
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1176 := r.ReadMapStart()
			if yyl1176 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1176, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1176 := r.ReadArrayStart()
			if yyl1176 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1176, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1177Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1177Slc
	var yyhl1177 bool = l >= 0
	for yyj1177 := 0; ; yyj1177++ {
		if yyhl1177 {
			if yyj1177 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1177Slc = r.DecodeBytes(yys1177Slc, true, true)
		yys1177 := string(yys1177Slc)
		switch yys1177 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1177)
		} // end switch yys1177
	} // end for yyj1177
	if !yyhl1177 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1180 int
	var yyb1180 bool
	var yyhl1180 bool = l >= 0
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1180++
		if yyhl1180 {
			yyb1180 = yyj1180 > l
		} else {
			yyb1180 = r.CheckBreak()
		}
		if yyb1180 {
			break
		}
		z.DecStructFieldNotFound(yyj1180-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1183 := z.EncBinary()
	_ = yym1183
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1184 := z.DecBinary()
	_ = yym1184
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1185 := z.EncBinary()
		_ = yym1185
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1186 := !z.EncBinary()
			yy2arr1186 := z.EncBasicHandle().StructToArray
			var yyq1186 [2]bool
			_, _, _ = yysep1186, yyq1186, yy2arr1186
			const yyr1186 bool = false
			yyq1186[0] = x.Reason != ""
			yyq1186[1] = x.Message != ""
			if yyr1186 || yy2arr1186 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1186 int = 0
				for _, b := range yyq1186 {
					if b {
						yynn1186++
					}
				}
				r.EncodeMapStart(yynn1186)
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[0] {
					yym1188 := z.EncBinary()
					_ = yym1188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1189 := z.EncBinary()
					_ = yym1189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[1] {
					yym1191 := z.EncBinary()
					_ = yym1191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1186 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1193 := z.DecBinary()
	_ = yym1193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1194 := r.ReadMapStart()
			if yyl1194 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1194, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1194 := r.ReadArrayStart()
			if yyl1194 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1195Slc
	var yyhl1195 bool = l >= 0
	for yyj1195 := 0; ; yyj1195++ {
		if yyhl1195 {
			if yyj1195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1195Slc = r.DecodeBytes(yys1195Slc, true, true)
		yys1195 := string(yys1195Slc)
		switch yys1195 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1195)
		} // end switch yys1195
	} // end for yyj1195
	if !yyhl1195 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1198 int
	var yyb1198 bool
	var yyhl1198 bool = l >= 0
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1198++
		if yyhl1198 {
			yyb1198 = yyj1198 > l
		} else {
			yyb1198 = r.CheckBreak()
		}
		if yyb1198 {
			break
		}
		z.DecStructFieldNotFound(yyj1198-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1201 := z.EncBinary()
		_ = yym1201
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1202 := !z.EncBinary()
			yy2arr1202 := z.EncBasicHandle().StructToArray
			var yyq1202 [1]bool
			_, _, _ = yysep1202, yyq1202, yy2arr1202
			const yyr1202 bool = false
			yyq1202[0] = true
			if yyr1202 || yy2arr1202 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1202 int = 0
				for _, b := range yyq1202 {
					if b {
						yynn1202++
					}
				}
				r.EncodeMapStart(yynn1202)
			}
			if yyr1202 || yy2arr1202 {
				if yyq1202[0] {
					yy1204 := &x.StartedAt
					yym1205 := z.EncBinary()
					_ = yym1205
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1204) {
					} else if yym1205 {
						z.EncBinaryMarshal(yy1204)
					} else if !yym1205 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1204)
					} else {
						z.EncFallback(yy1204)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1202[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1206 := &x.StartedAt
					yym1207 := z.EncBinary()
					_ = yym1207
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1206) {
					} else if yym1207 {
						z.EncBinaryMarshal(yy1206)
					} else if !yym1207 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1206)
					} else {
						z.EncFallback(yy1206)
					}
				}
			}
			if yysep1202 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1208 := z.DecBinary()
	_ = yym1208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1209 := r.ReadMapStart()
			if yyl1209 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1209, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1209 := r.ReadArrayStart()
			if yyl1209 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1210Slc
	var yyhl1210 bool = l >= 0
	for yyj1210 := 0; ; yyj1210++ {
		if yyhl1210 {
			if yyj1210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1210Slc = r.DecodeBytes(yys1210Slc, true, true)
		yys1210 := string(yys1210Slc)
		switch yys1210 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1211 := &x.StartedAt
				yym1212 := z.DecBinary()
				_ = yym1212
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1211) {
				} else if yym1212 {
					z.DecBinaryUnmarshal(yyv1211)
				} else if !yym1212 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1211)
				} else {
					z.DecFallback(yyv1211, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1210)
		} // end switch yys1210
	} // end for yyj1210
	if !yyhl1210 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1213 int
	var yyb1213 bool
	var yyhl1213 bool = l >= 0
	yyj1213++
	if yyhl1213 {
		yyb1213 = yyj1213 > l
	} else {
		yyb1213 = r.CheckBreak()
	}
	if yyb1213 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1214 := &x.StartedAt
		yym1215 := z.DecBinary()
		_ = yym1215
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1214) {
		} else if yym1215 {
			z.DecBinaryUnmarshal(yyv1214)
		} else if !yym1215 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1214)
		} else {
			z.DecFallback(yyv1214, false)
		}
	}
	for {
		yyj1213++
		if yyhl1213 {
			yyb1213 = yyj1213 > l
		} else {
			yyb1213 = r.CheckBreak()
		}
		if yyb1213 {
			break
		}
		z.DecStructFieldNotFound(yyj1213-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1216 := z.EncBinary()
		_ = yym1216
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1217 := !z.EncBinary()
			yy2arr1217 := z.EncBasicHandle().StructToArray
			var yyq1217 [7]bool
			_, _, _ = yysep1217, yyq1217, yy2arr1217
			const yyr1217 bool = false
			yyq1217[1] = x.Signal != 0
			yyq1217[2] = x.Reason != ""
			yyq1217[3] = x.Message != ""
			yyq1217[4] = true
			yyq1217[5] = true
			yyq1217[6] = x.ContainerID != ""
			if yyr1217 || yy2arr1217 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1217 int = 1
				for _, b := range yyq1217 {
					if b {
						yynn1217++
					}
				}
				r.EncodeMapStart(yynn1217)
			}
			if yyr1217 || yy2arr1217 {
				yym1219 := z.EncBinary()
				_ = yym1219
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1220 := z.EncBinary()
				_ = yym1220
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1217 || yy2arr1217 {
				if yyq1217[1] {
					yym1222 := z.EncBinary()
					_ = yym1222
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1217[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1223 := z.EncBinary()
					_ = yym1223
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1217 || yy2arr1217 {
				if yyq1217[2] {
					yym1225 := z.EncBinary()
					_ = yym1225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1217[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1217 || yy2arr1217 {
				if yyq1217[3] {
					yym1228 := z.EncBinary()
					_ = yym1228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1217[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1229 := z.EncBinary()
					_ = yym1229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1217 || yy2arr1217 {
				if yyq1217[4] {
					yy1231 := &x.StartedAt
					yym1232 := z.EncBinary()
					_ = yym1232
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1231) {
					} else if yym1232 {
						z.EncBinaryMarshal(yy1231)
					} else if !yym1232 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1231)
					} else {
						z.EncFallback(yy1231)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1217[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1233 := &x.StartedAt
					yym1234 := z.EncBinary()
					_ = yym1234
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1233) {
					} else if yym1234 {
						z.EncBinaryMarshal(yy1233)
					} else if !yym1234 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1233)
					} else {
						z.EncFallback(yy1233)
					}
				}
			}
			if yyr1217 || yy2arr1217 {
				if yyq1217[5] {
					yy1236 := &x.FinishedAt
					yym1237 := z.EncBinary()
					_ = yym1237
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1236) {
					} else if yym1237 {
						z.EncBinaryMarshal(yy1236)
					} else if !yym1237 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1236)
					} else {
						z.EncFallback(yy1236)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1217[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1238 := &x.FinishedAt
					yym1239 := z.EncBinary()
					_ = yym1239
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1238) {
					} else if yym1239 {
						z.EncBinaryMarshal(yy1238)
					} else if !yym1239 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1238)
					} else {
						z.EncFallback(yy1238)
					}
				}
			}
			if yyr1217 || yy2arr1217 {
				if yyq1217[6] {
					yym1241 := z.EncBinary()
					_ = yym1241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1217[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1242 := z.EncBinary()
					_ = yym1242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1217 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1243 := z.DecBinary()
	_ = yym1243
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1244 := r.ReadMapStart()
			if yyl1244 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1244, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1244 := r.ReadArrayStart()
			if yyl1244 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1244, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1245Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1245Slc
	var yyhl1245 bool = l >= 0
	for yyj1245 := 0; ; yyj1245++ {
		if yyhl1245 {
			if yyj1245 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1245Slc = r.DecodeBytes(yys1245Slc, true, true)
		yys1245 := string(yys1245Slc)
		switch yys1245 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1250 := &x.StartedAt
				yym1251 := z.DecBinary()
				_ = yym1251
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1250) {
				} else if yym1251 {
					z.DecBinaryUnmarshal(yyv1250)
				} else if !yym1251 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1250)
				} else {
					z.DecFallback(yyv1250, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1252 := &x.FinishedAt
				yym1253 := z.DecBinary()
				_ = yym1253
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1252) {
				} else if yym1253 {
					z.DecBinaryUnmarshal(yyv1252)
				} else if !yym1253 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1252)
				} else {
					z.DecFallback(yyv1252, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1245)
		} // end switch yys1245
	} // end for yyj1245
	if !yyhl1245 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1255 int
	var yyb1255 bool
	var yyhl1255 bool = l >= 0
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1260 := &x.StartedAt
		yym1261 := z.DecBinary()
		_ = yym1261
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1260) {
		} else if yym1261 {
			z.DecBinaryUnmarshal(yyv1260)
		} else if !yym1261 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1260)
		} else {
			z.DecFallback(yyv1260, false)
		}
	}
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1262 := &x.FinishedAt
		yym1263 := z.DecBinary()
		_ = yym1263
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1262) {
		} else if yym1263 {
			z.DecBinaryUnmarshal(yyv1262)
		} else if !yym1263 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1262)
		} else {
			z.DecFallback(yyv1262, false)
		}
	}
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1255++
		if yyhl1255 {
			yyb1255 = yyj1255 > l
		} else {
			yyb1255 = r.CheckBreak()
		}
		if yyb1255 {
			break
		}
		z.DecStructFieldNotFound(yyj1255-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1265 := z.EncBinary()
		_ = yym1265
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1266 := !z.EncBinary()
			yy2arr1266 := z.EncBasicHandle().StructToArray
			var yyq1266 [3]bool
			_, _, _ = yysep1266, yyq1266, yy2arr1266
			const yyr1266 bool = false
			yyq1266[0] = x.Waiting != nil
			yyq1266[1] = x.Running != nil
			yyq1266[2] = x.Terminated != nil
			if yyr1266 || yy2arr1266 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1266 int = 0
				for _, b := range yyq1266 {
					if b {
						yynn1266++
					}
				}
				r.EncodeMapStart(yynn1266)
			}
			if yyr1266 || yy2arr1266 {
				if yyq1266[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1266[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1266 || yy2arr1266 {
				if yyq1266[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1266[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1266 || yy2arr1266 {
				if yyq1266[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1266[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1266 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1270 := z.DecBinary()
	_ = yym1270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1271 := r.ReadMapStart()
			if yyl1271 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1271, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1271 := r.ReadArrayStart()
			if yyl1271 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1271, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1272Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1272Slc
	var yyhl1272 bool = l >= 0
	for yyj1272 := 0; ; yyj1272++ {
		if yyhl1272 {
			if yyj1272 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1272Slc = r.DecodeBytes(yys1272Slc, true, true)
		yys1272 := string(yys1272Slc)
		switch yys1272 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1272)
		} // end switch yys1272
	} // end for yyj1272
	if !yyhl1272 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1276 int
	var yyb1276 bool
	var yyhl1276 bool = l >= 0
	yyj1276++
	if yyhl1276 {
		yyb1276 = yyj1276 > l
	} else {
		yyb1276 = r.CheckBreak()
	}
	if yyb1276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1276++
	if yyhl1276 {
		yyb1276 = yyj1276 > l
	} else {
		yyb1276 = r.CheckBreak()
	}
	if yyb1276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1276++
	if yyhl1276 {
		yyb1276 = yyj1276 > l
	} else {
		yyb1276 = r.CheckBreak()
	}
	if yyb1276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1276++
		if yyhl1276 {
			yyb1276 = yyj1276 > l
		} else {
			yyb1276 = r.CheckBreak()
		}
		if yyb1276 {
			break
		}
		z.DecStructFieldNotFound(yyj1276-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1280 := z.EncBinary()
		_ = yym1280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1281 := !z.EncBinary()
			yy2arr1281 := z.EncBasicHandle().StructToArray
			var yyq1281 [8]bool
			_, _, _ = yysep1281, yyq1281, yy2arr1281
			const yyr1281 bool = false
			yyq1281[1] = true
			yyq1281[2] = true
			yyq1281[7] = x.ContainerID != ""
			if yyr1281 || yy2arr1281 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1281 int = 5
				for _, b := range yyq1281 {
					if b {
						yynn1281++
					}
				}
				r.EncodeMapStart(yynn1281)
			}
			if yyr1281 || yy2arr1281 {
				yym1283 := z.EncBinary()
				_ = yym1283
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1284 := z.EncBinary()
				_ = yym1284
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1281 || yy2arr1281 {
				if yyq1281[1] {
					yy1286 := &x.State
					yy1286.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1281[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1287 := &x.State
					yy1287.CodecEncodeSelf(e)
				}
			}
			if yyr1281 || yy2arr1281 {
				if yyq1281[2] {
					yy1289 := &x.LastTerminationState
					yy1289.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1281[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1290 := &x.LastTerminationState
					yy1290.CodecEncodeSelf(e)
				}
			}
			if yyr1281 || yy2arr1281 {
				yym1292 := z.EncBinary()
				_ = yym1292
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1293 := z.EncBinary()
				_ = yym1293
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1281 || yy2arr1281 {
				yym1295 := z.EncBinary()
				_ = yym1295
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1296 := z.EncBinary()
				_ = yym1296
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1281 || yy2arr1281 {
				yym1298 := z.EncBinary()
				_ = yym1298
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1299 := z.EncBinary()
				_ = yym1299
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1281 || yy2arr1281 {
				yym1301 := z.EncBinary()
				_ = yym1301
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1302 := z.EncBinary()
				_ = yym1302
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1281 || yy2arr1281 {
				if yyq1281[7] {
					yym1304 := z.EncBinary()
					_ = yym1304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1281[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1281 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1306 := z.DecBinary()
	_ = yym1306
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1307 := r.ReadMapStart()
			if yyl1307 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1307, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1307 := r.ReadArrayStart()
			if yyl1307 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1307, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1308Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1308Slc
	var yyhl1308 bool = l >= 0
	for yyj1308 := 0; ; yyj1308++ {
		if yyhl1308 {
			if yyj1308 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1308Slc = r.DecodeBytes(yys1308Slc, true, true)
		yys1308 := string(yys1308Slc)
		switch yys1308 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1310 := &x.State
				yyv1310.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1311 := &x.LastTerminationState
				yyv1311.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1308)
		} // end switch yys1308
	} // end for yyj1308
	if !yyhl1308 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1317 int
	var yyb1317 bool
	var yyhl1317 bool = l >= 0
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1319 := &x.State
		yyv1319.CodecDecodeSelf(d)
	}
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1320 := &x.LastTerminationState
		yyv1320.CodecDecodeSelf(d)
	}
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1317++
		if yyhl1317 {
			yyb1317 = yyj1317 > l
		} else {
			yyb1317 = r.CheckBreak()
		}
		if yyb1317 {
			break
		}
		z.DecStructFieldNotFound(yyj1317-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1326 := z.EncBinary()
	_ = yym1326
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1327 := z.DecBinary()
	_ = yym1327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1328 := z.EncBinary()
	_ = yym1328
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1329 := z.DecBinary()
	_ = yym1329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1330 := z.EncBinary()
		_ = yym1330
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1331 := !z.EncBinary()
			yy2arr1331 := z.EncBasicHandle().StructToArray
			var yyq1331 [6]bool
			_, _, _ = yysep1331, yyq1331, yy2arr1331
			const yyr1331 bool = false
			yyq1331[2] = true
			yyq1331[3] = true
			yyq1331[4] = x.Reason != ""
			yyq1331[5] = x.Message != ""
			if yyr1331 || yy2arr1331 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1331 int = 2
				for _, b := range yyq1331 {
					if b {
						yynn1331++
					}
				}
				r.EncodeMapStart(yynn1331)
			}
			if yyr1331 || yy2arr1331 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1331 || yy2arr1331 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1331 || yy2arr1331 {
				if yyq1331[2] {
					yy1335 := &x.LastProbeTime
					yym1336 := z.EncBinary()
					_ = yym1336
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1335) {
					} else if yym1336 {
						z.EncBinaryMarshal(yy1335)
					} else if !yym1336 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1335)
					} else {
						z.EncFallback(yy1335)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1331[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1337 := &x.LastProbeTime
					yym1338 := z.EncBinary()
					_ = yym1338
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1337) {
					} else if yym1338 {
						z.EncBinaryMarshal(yy1337)
					} else if !yym1338 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1337)
					} else {
						z.EncFallback(yy1337)
					}
				}
			}
			if yyr1331 || yy2arr1331 {
				if yyq1331[3] {
					yy1340 := &x.LastTransitionTime
					yym1341 := z.EncBinary()
					_ = yym1341
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1340) {
					} else if yym1341 {
						z.EncBinaryMarshal(yy1340)
					} else if !yym1341 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1340)
					} else {
						z.EncFallback(yy1340)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1331[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1342 := &x.LastTransitionTime
					yym1343 := z.EncBinary()
					_ = yym1343
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1342) {
					} else if yym1343 {
						z.EncBinaryMarshal(yy1342)
					} else if !yym1343 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1342)
					} else {
						z.EncFallback(yy1342)
					}
				}
			}
			if yyr1331 || yy2arr1331 {
				if yyq1331[4] {
					yym1345 := z.EncBinary()
					_ = yym1345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1331[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1346 := z.EncBinary()
					_ = yym1346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1331 || yy2arr1331 {
				if yyq1331[5] {
					yym1348 := z.EncBinary()
					_ = yym1348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1331[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1349 := z.EncBinary()
					_ = yym1349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1331 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1350 := z.DecBinary()
	_ = yym1350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1351 := r.ReadMapStart()
			if yyl1351 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1351, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1351 := r.ReadArrayStart()
			if yyl1351 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1351, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1352Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1352Slc
	var yyhl1352 bool = l >= 0
	for yyj1352 := 0; ; yyj1352++ {
		if yyhl1352 {
			if yyj1352 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1352Slc = r.DecodeBytes(yys1352Slc, true, true)
		yys1352 := string(yys1352Slc)
		switch yys1352 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1355 := &x.LastProbeTime
				yym1356 := z.DecBinary()
				_ = yym1356
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1355) {
				} else if yym1356 {
					z.DecBinaryUnmarshal(yyv1355)
				} else if !yym1356 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1355)
				} else {
					z.DecFallback(yyv1355, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1357 := &x.LastTransitionTime
				yym1358 := z.DecBinary()
				_ = yym1358
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1357) {
				} else if yym1358 {
					z.DecBinaryUnmarshal(yyv1357)
				} else if !yym1358 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1357)
				} else {
					z.DecFallback(yyv1357, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1352)
		} // end switch yys1352
	} // end for yyj1352
	if !yyhl1352 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1361 int
	var yyb1361 bool
	var yyhl1361 bool = l >= 0
	yyj1361++
	if yyhl1361 {
		yyb1361 = yyj1361 > l
	} else {
		yyb1361 = r.CheckBreak()
	}
	if yyb1361 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1361++
	if yyhl1361 {
		yyb1361 = yyj1361 > l
	} else {
		yyb1361 = r.CheckBreak()
	}
	if yyb1361 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1361++
	if yyhl1361 {
		yyb1361 = yyj1361 > l
	} else {
		yyb1361 = r.CheckBreak()
	}
	if yyb1361 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1364 := &x.LastProbeTime
		yym1365 := z.DecBinary()
		_ = yym1365
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1364) {
		} else if yym1365 {
			z.DecBinaryUnmarshal(yyv1364)
		} else if !yym1365 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1364)
		} else {
			z.DecFallback(yyv1364, false)
		}
	}
	yyj1361++
	if yyhl1361 {
		yyb1361 = yyj1361 > l
	} else {
		yyb1361 = r.CheckBreak()
	}
	if yyb1361 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1366 := &x.LastTransitionTime
		yym1367 := z.DecBinary()
		_ = yym1367
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1366) {
		} else if yym1367 {
			z.DecBinaryUnmarshal(yyv1366)
		} else if !yym1367 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1366)
		} else {
			z.DecFallback(yyv1366, false)
		}
	}
	yyj1361++
	if yyhl1361 {
		yyb1361 = yyj1361 > l
	} else {
		yyb1361 = r.CheckBreak()
	}
	if yyb1361 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1361++
	if yyhl1361 {
		yyb1361 = yyj1361 > l
	} else {
		yyb1361 = r.CheckBreak()
	}
	if yyb1361 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1361++
		if yyhl1361 {
			yyb1361 = yyj1361 > l
		} else {
			yyb1361 = r.CheckBreak()
		}
		if yyb1361 {
			break
		}
		z.DecStructFieldNotFound(yyj1361-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1370 := z.EncBinary()
	_ = yym1370
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1371 := z.DecBinary()
	_ = yym1371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1372 := z.EncBinary()
	_ = yym1372
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1373 := z.DecBinary()
	_ = yym1373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1374 := z.EncBinary()
		_ = yym1374
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1375 := !z.EncBinary()
			yy2arr1375 := z.EncBasicHandle().StructToArray
			var yyq1375 [15]bool
			_, _, _ = yysep1375, yyq1375, yy2arr1375
			const yyr1375 bool = false
			yyq1375[0] = len(x.Volumes) != 0
			yyq1375[2] = x.RestartPolicy != ""
			yyq1375[3] = x.TerminationGracePeriodSeconds != nil
			yyq1375[4] = x.ActiveDeadlineSeconds != nil
			yyq1375[5] = x.DNSPolicy != ""
			yyq1375[6] = len(x.NodeSelector) != 0
			yyq1375[7] = x.ServiceAccountName != ""
			yyq1375[8] = x.DeprecatedServiceAccount != ""
			yyq1375[9] = x.NodeName != ""
			yyq1375[10] = x.HostNetwork != false
			yyq1375[11] = x.HostPID != false
			yyq1375[12] = x.HostIPC != false
			yyq1375[13] = x.SecurityContext != nil
			yyq1375[14] = len(x.ImagePullSecrets) != 0
			if yyr1375 || yy2arr1375 {
				r.EncodeArrayStart(15)
			} else {
				var yynn1375 int = 1
				for _, b := range yyq1375 {
					if b {
						yynn1375++
					}
				}
				r.EncodeMapStart(yynn1375)
			}
			if yyr1375 || yy2arr1375 {
				if yyq1375[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1377 := z.EncBinary()
						_ = yym1377
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1375[0] {
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1378 := z.EncBinary()
						_ = yym1378
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1375 || yy2arr1375 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1381 := z.EncBinary()
					_ = yym1381
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1375 || yy2arr1375 {
				if yyq1375[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1375[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1375 || yy2arr1375 {
				if yyq1375[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1384 := *x.TerminationGracePeriodSeconds
						yym1385 := z.EncBinary()
						_ = yym1385
						if false {
						} else {
							r.EncodeInt(int64(yy1384))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1375[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1386 := *x.TerminationGracePeriodSeconds
						yym1387 := z.EncBinary()
						_ = yym1387
						if false {
						} else {
							r.EncodeInt(int64(yy1386))
						}
					}
				}
			}
			if yyr1375 || yy2arr1375 {
				if yyq1375[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1389 := *x.ActiveDeadlineSeconds
						yym1390 := z.EncBinary()
						_ = yym1390
						if false {
						} else {
							r.EncodeInt(int64(yy1389))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1375[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1391 := *x.ActiveDeadlineSeconds
						yym1392 := z.EncBinary()
						_ = yym1392
						if false {
						} else {
							r.EncodeInt(int64(yy1391))
						}
					}
				}
			}
			if yyr1375 || yy2arr1375 {
				if yyq1375[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1375[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1375 || yy2arr1375 {
				if yyq1375[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1395 := z.EncBinary()
						_ = yym1395
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1375[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1396 := z.EncBinary()
						_ = yym1396
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1375 || yy2arr1375 {
				if yyq1375[7] {
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1375[7] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1375 || yy2arr1375 {
				if yyq1375[8] {
					yym1401 := z.EncBinary()
					_ = yym1401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1375[8] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					yym1402 := z.EncBinary()
					_ = yym1402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1375 || yy2arr1375 {
				if yyq1375[9] {
					yym1404 := z.EncBinary()
					_ = yym1404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1375[9] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1405 := z.EncBinary()
					_ = yym1405
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1375 || yy2arr1375 {
				if yyq1375[10] {
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1375[10] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1408 := z.EncBinary()
					_ = yym1408
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1375 || yy2arr1375 {
				if yyq1375[11] {
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1375[11] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1411 := z.EncBinary()
					_ = yym1411
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1375 || yy2arr1375 {
				if yyq1375[12] {
					yym1413 := z.EncBinary()
					_ = yym1413
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1375[12] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1414 := z.EncBinary()
					_ = yym1414
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1375 || yy2arr1375 {
				if yyq1375[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1375[13] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1375 || yy2arr1375 {
				if yyq1375[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1417 := z.EncBinary()
						_ = yym1417
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1375[14] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1418 := z.EncBinary()
						_ = yym1418
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1375 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1419 := z.DecBinary()
	_ = yym1419
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1420 := r.ReadMapStart()
			if yyl1420 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1420, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1420 := r.ReadArrayStart()
			if yyl1420 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1420, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1421Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1421Slc
	var yyhl1421 bool = l >= 0
	for yyj1421 := 0; ; yyj1421++ {
		if yyhl1421 {
			if yyj1421 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1421Slc = r.DecodeBytes(yys1421Slc, true, true)
		yys1421 := string(yys1421Slc)
		switch yys1421 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1422 := &x.Volumes
				yym1423 := z.DecBinary()
				_ = yym1423
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1422), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1424 := &x.Containers
				yym1425 := z.DecBinary()
				_ = yym1425
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1424), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1428 := z.DecBinary()
				_ = yym1428
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1430 := z.DecBinary()
				_ = yym1430
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1432 := &x.NodeSelector
				yym1433 := z.DecBinary()
				_ = yym1433
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1432, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1441 := &x.ImagePullSecrets
				yym1442 := z.DecBinary()
				_ = yym1442
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1441), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1421)
		} // end switch yys1421
	} // end for yyj1421
	if !yyhl1421 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1443 int
	var yyb1443 bool
	var yyhl1443 bool = l >= 0
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1444 := &x.Volumes
		yym1445 := z.DecBinary()
		_ = yym1445
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1444), d)
		}
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1446 := &x.Containers
		yym1447 := z.DecBinary()
		_ = yym1447
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1446), d)
		}
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1450 := z.DecBinary()
		_ = yym1450
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1452 := z.DecBinary()
		_ = yym1452
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1454 := &x.NodeSelector
		yym1455 := z.DecBinary()
		_ = yym1455
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1454, false, d)
		}
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1463 := &x.ImagePullSecrets
		yym1464 := z.DecBinary()
		_ = yym1464
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1463), d)
		}
	}
	for {
		yyj1443++
		if yyhl1443 {
			yyb1443 = yyj1443 > l
		} else {
			yyb1443 = r.CheckBreak()
		}
		if yyb1443 {
			break
		}
		z.DecStructFieldNotFound(yyj1443-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1465 := z.EncBinary()
		_ = yym1465
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1466 := !z.EncBinary()
			yy2arr1466 := z.EncBasicHandle().StructToArray
			var yyq1466 [5]bool
			_, _, _ = yysep1466, yyq1466, yy2arr1466
			const yyr1466 bool = false
			yyq1466[0] = x.SELinuxOptions != nil
			yyq1466[1] = x.RunAsUser != nil
			yyq1466[2] = x.RunAsNonRoot != nil
			yyq1466[3] = len(x.SupplementalGroups) != 0
			yyq1466[4] = x.FSGroup != nil
			if yyr1466 || yy2arr1466 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1466 int = 0
				for _, b := range yyq1466 {
					if b {
						yynn1466++
					}
				}
				r.EncodeMapStart(yynn1466)
			}
			if yyr1466 || yy2arr1466 {
				if yyq1466[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1466[0] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1466 || yy2arr1466 {
				if yyq1466[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1469 := *x.RunAsUser
						yym1470 := z.EncBinary()
						_ = yym1470
						if false {
						} else {
							r.EncodeInt(int64(yy1469))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1466[1] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1471 := *x.RunAsUser
						yym1472 := z.EncBinary()
						_ = yym1472
						if false {
						} else {
							r.EncodeInt(int64(yy1471))
						}
					}
				}
			}
			if yyr1466 || yy2arr1466 {
				if yyq1466[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1474 := *x.RunAsNonRoot
						yym1475 := z.EncBinary()
						_ = yym1475
						if false {
						} else {
							r.EncodeBool(bool(yy1474))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1466[2] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1476 := *x.RunAsNonRoot
						yym1477 := z.EncBinary()
						_ = yym1477
						if false {
						} else {
							r.EncodeBool(bool(yy1476))
						}
					}
				}
			}
			if yyr1466 || yy2arr1466 {
				if yyq1466[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1479 := z.EncBinary()
						_ = yym1479
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1466[3] {
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1480 := z.EncBinary()
						_ = yym1480
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1466 || yy2arr1466 {
				if yyq1466[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1482 := *x.FSGroup
						yym1483 := z.EncBinary()
						_ = yym1483
						if false {
						} else {
							r.EncodeInt(int64(yy1482))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1466[4] {
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1484 := *x.FSGroup
						yym1485 := z.EncBinary()
						_ = yym1485
						if false {
						} else {
							r.EncodeInt(int64(yy1484))
						}
					}
				}
			}
			if yysep1466 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1486 := z.DecBinary()
	_ = yym1486
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1487 := r.ReadMapStart()
			if yyl1487 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1487, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1487 := r.ReadArrayStart()
			if yyl1487 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1487, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1488Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1488Slc
	var yyhl1488 bool = l >= 0
	for yyj1488 := 0; ; yyj1488++ {
		if yyhl1488 {
			if yyj1488 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1488Slc = r.DecodeBytes(yys1488Slc, true, true)
		yys1488 := string(yys1488Slc)
		switch yys1488 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1491 := z.DecBinary()
				_ = yym1491
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1493 := z.DecBinary()
				_ = yym1493
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1494 := &x.SupplementalGroups
				yym1495 := z.DecBinary()
				_ = yym1495
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1494, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1497 := z.DecBinary()
				_ = yym1497
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1488)
		} // end switch yys1488
	} // end for yyj1488
	if !yyhl1488 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1498 int
	var yyb1498 bool
	var yyhl1498 bool = l >= 0
	yyj1498++
	if yyhl1498 {
		yyb1498 = yyj1498 > l
	} else {
		yyb1498 = r.CheckBreak()
	}
	if yyb1498 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1498++
	if yyhl1498 {
		yyb1498 = yyj1498 > l
	} else {
		yyb1498 = r.CheckBreak()
	}
	if yyb1498 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1501 := z.DecBinary()
		_ = yym1501
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1498++
	if yyhl1498 {
		yyb1498 = yyj1498 > l
	} else {
		yyb1498 = r.CheckBreak()
	}
	if yyb1498 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1503 := z.DecBinary()
		_ = yym1503
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1498++
	if yyhl1498 {
		yyb1498 = yyj1498 > l
	} else {
		yyb1498 = r.CheckBreak()
	}
	if yyb1498 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1504 := &x.SupplementalGroups
		yym1505 := z.DecBinary()
		_ = yym1505
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1504, false, d)
		}
	}
	yyj1498++
	if yyhl1498 {
		yyb1498 = yyj1498 > l
	} else {
		yyb1498 = r.CheckBreak()
	}
	if yyb1498 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1507 := z.DecBinary()
		_ = yym1507
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1498++
		if yyhl1498 {
			yyb1498 = yyj1498 > l
		} else {
			yyb1498 = r.CheckBreak()
		}
		if yyb1498 {
			break
		}
		z.DecStructFieldNotFound(yyj1498-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1508 := z.EncBinary()
		_ = yym1508
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1509 := !z.EncBinary()
			yy2arr1509 := z.EncBasicHandle().StructToArray
			var yyq1509 [8]bool
			_, _, _ = yysep1509, yyq1509, yy2arr1509
			const yyr1509 bool = false
			yyq1509[0] = x.Phase != ""
			yyq1509[1] = len(x.Conditions) != 0
			yyq1509[2] = x.Message != ""
			yyq1509[3] = x.Reason != ""
			yyq1509[4] = x.HostIP != ""
			yyq1509[5] = x.PodIP != ""
			yyq1509[6] = x.StartTime != nil
			yyq1509[7] = len(x.ContainerStatuses) != 0
			if yyr1509 || yy2arr1509 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1509 int = 0
				for _, b := range yyq1509 {
					if b {
						yynn1509++
					}
				}
				r.EncodeMapStart(yynn1509)
			}
			if yyr1509 || yy2arr1509 {
				if yyq1509[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1509[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1509 || yy2arr1509 {
				if yyq1509[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1512 := z.EncBinary()
						_ = yym1512
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1509[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1513 := z.EncBinary()
						_ = yym1513
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				if yyq1509[2] {
					yym1515 := z.EncBinary()
					_ = yym1515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1509[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1516 := z.EncBinary()
					_ = yym1516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				if yyq1509[3] {
					yym1518 := z.EncBinary()
					_ = yym1518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1509[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1519 := z.EncBinary()
					_ = yym1519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				if yyq1509[4] {
					yym1521 := z.EncBinary()
					_ = yym1521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1509[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1522 := z.EncBinary()
					_ = yym1522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				if yyq1509[5] {
					yym1524 := z.EncBinary()
					_ = yym1524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1509[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1525 := z.EncBinary()
					_ = yym1525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				if yyq1509[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1527 := z.EncBinary()
						_ = yym1527
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1527 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1527 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1509[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1528 := z.EncBinary()
						_ = yym1528
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1528 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1528 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				if yyq1509[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1530 := z.EncBinary()
						_ = yym1530
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1509[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1531 := z.EncBinary()
						_ = yym1531
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1509 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1532 := z.DecBinary()
	_ = yym1532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1533 := r.ReadMapStart()
			if yyl1533 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1533, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1533 := r.ReadArrayStart()
			if yyl1533 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1534Slc
	var yyhl1534 bool = l >= 0
	for yyj1534 := 0; ; yyj1534++ {
		if yyhl1534 {
			if yyj1534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1534Slc = r.DecodeBytes(yys1534Slc, true, true)
		yys1534 := string(yys1534Slc)
		switch yys1534 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1536 := &x.Conditions
				yym1537 := z.DecBinary()
				_ = yym1537
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1536), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1543 := z.DecBinary()
				_ = yym1543
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1543 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1543 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1544 := &x.ContainerStatuses
				yym1545 := z.DecBinary()
				_ = yym1545
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1544), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1534)
		} // end switch yys1534
	} // end for yyj1534
	if !yyhl1534 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1546 int
	var yyb1546 bool
	var yyhl1546 bool = l >= 0
	yyj1546++
	if yyhl1546 {
		yyb1546 = yyj1546 > l
	} else {
		yyb1546 = r.CheckBreak()
	}
	if yyb1546 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1546++
	if yyhl1546 {
		yyb1546 = yyj1546 > l
	} else {
		yyb1546 = r.CheckBreak()
	}
	if yyb1546 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1548 := &x.Conditions
		yym1549 := z.DecBinary()
		_ = yym1549
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1548), d)
		}
	}
	yyj1546++
	if yyhl1546 {
		yyb1546 = yyj1546 > l
	} else {
		yyb1546 = r.CheckBreak()
	}
	if yyb1546 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1546++
	if yyhl1546 {
		yyb1546 = yyj1546 > l
	} else {
		yyb1546 = r.CheckBreak()
	}
	if yyb1546 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1546++
	if yyhl1546 {
		yyb1546 = yyj1546 > l
	} else {
		yyb1546 = r.CheckBreak()
	}
	if yyb1546 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1546++
	if yyhl1546 {
		yyb1546 = yyj1546 > l
	} else {
		yyb1546 = r.CheckBreak()
	}
	if yyb1546 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1546++
	if yyhl1546 {
		yyb1546 = yyj1546 > l
	} else {
		yyb1546 = r.CheckBreak()
	}
	if yyb1546 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1555 := z.DecBinary()
		_ = yym1555
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1555 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1555 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1546++
	if yyhl1546 {
		yyb1546 = yyj1546 > l
	} else {
		yyb1546 = r.CheckBreak()
	}
	if yyb1546 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1556 := &x.ContainerStatuses
		yym1557 := z.DecBinary()
		_ = yym1557
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1556), d)
		}
	}
	for {
		yyj1546++
		if yyhl1546 {
			yyb1546 = yyj1546 > l
		} else {
			yyb1546 = r.CheckBreak()
		}
		if yyb1546 {
			break
		}
		z.DecStructFieldNotFound(yyj1546-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1558 := z.EncBinary()
		_ = yym1558
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1559 := !z.EncBinary()
			yy2arr1559 := z.EncBasicHandle().StructToArray
			var yyq1559 [4]bool
			_, _, _ = yysep1559, yyq1559, yy2arr1559
			const yyr1559 bool = false
			yyq1559[0] = x.Kind != ""
			yyq1559[1] = true
			yyq1559[2] = true
			yyq1559[3] = true
			if yyr1559 || yy2arr1559 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1559 int = 0
				for _, b := range yyq1559 {
					if b {
						yynn1559++
					}
				}
				r.EncodeMapStart(yynn1559)
			}
			if yyr1559 || yy2arr1559 {
				if yyq1559[0] {
					yym1561 := z.EncBinary()
					_ = yym1561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1562 := z.EncBinary()
					_ = yym1562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				if yyq1559[1] {
					yy1564 := &x.APIVersion
					yym1565 := z.EncBinary()
					_ = yym1565
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1564) {
					} else if !yym1565 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1564)
					} else {
						z.EncFallback(yy1564)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1559[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1566 := &x.APIVersion
					yym1567 := z.EncBinary()
					_ = yym1567
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1566) {
					} else if !yym1567 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1566)
					} else {
						z.EncFallback(yy1566)
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				if yyq1559[2] {
					yy1569 := &x.ObjectMeta
					yy1569.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1559[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1570 := &x.ObjectMeta
					yy1570.CodecEncodeSelf(e)
				}
			}
			if yyr1559 || yy2arr1559 {
				if yyq1559[3] {
					yy1572 := &x.Status
					yy1572.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1559[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1573 := &x.Status
					yy1573.CodecEncodeSelf(e)
				}
			}
			if yysep1559 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1574 := z.DecBinary()
	_ = yym1574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1575 := r.ReadMapStart()
			if yyl1575 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1575, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1575 := r.ReadArrayStart()
			if yyl1575 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1575, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1576Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1576Slc
	var yyhl1576 bool = l >= 0
	for yyj1576 := 0; ; yyj1576++ {
		if yyhl1576 {
			if yyj1576 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1576Slc = r.DecodeBytes(yys1576Slc, true, true)
		yys1576 := string(yys1576Slc)
		switch yys1576 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1578 := &x.APIVersion
				yym1579 := z.DecBinary()
				_ = yym1579
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1578) {
				} else if !yym1579 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1578)
				} else {
					z.DecFallback(yyv1578, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1580 := &x.ObjectMeta
				yyv1580.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1581 := &x.Status
				yyv1581.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1576)
		} // end switch yys1576
	} // end for yyj1576
	if !yyhl1576 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1582 int
	var yyb1582 bool
	var yyhl1582 bool = l >= 0
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1584 := &x.APIVersion
		yym1585 := z.DecBinary()
		_ = yym1585
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1584) {
		} else if !yym1585 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1584)
		} else {
			z.DecFallback(yyv1584, false)
		}
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1586 := &x.ObjectMeta
		yyv1586.CodecDecodeSelf(d)
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1587 := &x.Status
		yyv1587.CodecDecodeSelf(d)
	}
	for {
		yyj1582++
		if yyhl1582 {
			yyb1582 = yyj1582 > l
		} else {
			yyb1582 = r.CheckBreak()
		}
		if yyb1582 {
			break
		}
		z.DecStructFieldNotFound(yyj1582-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1588 := z.EncBinary()
		_ = yym1588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1589 := !z.EncBinary()
			yy2arr1589 := z.EncBasicHandle().StructToArray
			var yyq1589 [5]bool
			_, _, _ = yysep1589, yyq1589, yy2arr1589
			const yyr1589 bool = false
			yyq1589[0] = x.Kind != ""
			yyq1589[1] = true
			yyq1589[2] = true
			yyq1589[3] = true
			yyq1589[4] = true
			if yyr1589 || yy2arr1589 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1589 int = 0
				for _, b := range yyq1589 {
					if b {
						yynn1589++
					}
				}
				r.EncodeMapStart(yynn1589)
			}
			if yyr1589 || yy2arr1589 {
				if yyq1589[0] {
					yym1591 := z.EncBinary()
					_ = yym1591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1589[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1592 := z.EncBinary()
					_ = yym1592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				if yyq1589[1] {
					yy1594 := &x.APIVersion
					yym1595 := z.EncBinary()
					_ = yym1595
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1594) {
					} else if !yym1595 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1594)
					} else {
						z.EncFallback(yy1594)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1589[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1596 := &x.APIVersion
					yym1597 := z.EncBinary()
					_ = yym1597
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1596) {
					} else if !yym1597 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1596)
					} else {
						z.EncFallback(yy1596)
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				if yyq1589[2] {
					yy1599 := &x.ObjectMeta
					yy1599.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1589[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1600 := &x.ObjectMeta
					yy1600.CodecEncodeSelf(e)
				}
			}
			if yyr1589 || yy2arr1589 {
				if yyq1589[3] {
					yy1602 := &x.Spec
					yy1602.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1589[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1603 := &x.Spec
					yy1603.CodecEncodeSelf(e)
				}
			}
			if yyr1589 || yy2arr1589 {
				if yyq1589[4] {
					yy1605 := &x.Status
					yy1605.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1589[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1606 := &x.Status
					yy1606.CodecEncodeSelf(e)
				}
			}
			if yysep1589 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1607 := z.DecBinary()
	_ = yym1607
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1608 := r.ReadMapStart()
			if yyl1608 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1608, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1608 := r.ReadArrayStart()
			if yyl1608 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1608, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1609Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1609Slc
	var yyhl1609 bool = l >= 0
	for yyj1609 := 0; ; yyj1609++ {
		if yyhl1609 {
			if yyj1609 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1609Slc = r.DecodeBytes(yys1609Slc, true, true)
		yys1609 := string(yys1609Slc)
		switch yys1609 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1611 := &x.APIVersion
				yym1612 := z.DecBinary()
				_ = yym1612
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1611) {
				} else if !yym1612 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1611)
				} else {
					z.DecFallback(yyv1611, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1613 := &x.ObjectMeta
				yyv1613.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1614 := &x.Spec
				yyv1614.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1615 := &x.Status
				yyv1615.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1609)
		} // end switch yys1609
	} // end for yyj1609
	if !yyhl1609 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1616 int
	var yyb1616 bool
	var yyhl1616 bool = l >= 0
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1618 := &x.APIVersion
		yym1619 := z.DecBinary()
		_ = yym1619
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1618) {
		} else if !yym1619 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1618)
		} else {
			z.DecFallback(yyv1618, false)
		}
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1620 := &x.ObjectMeta
		yyv1620.CodecDecodeSelf(d)
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1621 := &x.Spec
		yyv1621.CodecDecodeSelf(d)
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1622 := &x.Status
		yyv1622.CodecDecodeSelf(d)
	}
	for {
		yyj1616++
		if yyhl1616 {
			yyb1616 = yyj1616 > l
		} else {
			yyb1616 = r.CheckBreak()
		}
		if yyb1616 {
			break
		}
		z.DecStructFieldNotFound(yyj1616-1, "")
	}
	r.ReadEnd()
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1623 := z.EncBinary()
		_ = yym1623
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1624 := !z.EncBinary()
			yy2arr1624 := z.EncBasicHandle().StructToArray
			var yyq1624 [4]bool
			_, _, _ = yysep1624, yyq1624, yy2arr1624
			const yyr1624 bool = false
			yyq1624[0] = x.Kind != ""
			yyq1624[1] = true
			yyq1624[2] = true
			if yyr1624 || yy2arr1624 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1624 int = 1
				for _, b := range yyq1624 {
					if b {
						yynn1624++
					}
				}
				r.EncodeMapStart(yynn1624)
			}
			if yyr1624 || yy2arr1624 {
				if yyq1624[0] {
					yym1626 := z.EncBinary()
					_ = yym1626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1624[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1627 := z.EncBinary()
					_ = yym1627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1624 || yy2arr1624 {
				if yyq1624[1] {
					yy1629 := &x.APIVersion
					yym1630 := z.EncBinary()
					_ = yym1630
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1629) {
					} else if !yym1630 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1629)
					} else {
						z.EncFallback(yy1629)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1624[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1631 := &x.APIVersion
					yym1632 := z.EncBinary()
					_ = yym1632
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1631) {
					} else if !yym1632 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1631)
					} else {
						z.EncFallback(yy1631)
					}
				}
			}
			if yyr1624 || yy2arr1624 {
				if yyq1624[2] {
					yy1634 := &x.ListMeta
					yym1635 := z.EncBinary()
					_ = yym1635
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1634) {
					} else {
						z.EncFallback(yy1634)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1624[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1636 := &x.ListMeta
					yym1637 := z.EncBinary()
					_ = yym1637
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1636) {
					} else {
						z.EncFallback(yy1636)
					}
				}
			}
			if yyr1624 || yy2arr1624 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1639 := z.EncBinary()
					_ = yym1639
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1640 := z.EncBinary()
					_ = yym1640
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1624 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1641 := z.DecBinary()
	_ = yym1641
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1642 := r.ReadMapStart()
			if yyl1642 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1642, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1642 := r.ReadArrayStart()
			if yyl1642 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1642, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1643Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1643Slc
	var yyhl1643 bool = l >= 0
	for yyj1643 := 0; ; yyj1643++ {
		if yyhl1643 {
			if yyj1643 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1643Slc = r.DecodeBytes(yys1643Slc, true, true)
		yys1643 := string(yys1643Slc)
		switch yys1643 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1645 := &x.APIVersion
				yym1646 := z.DecBinary()
				_ = yym1646
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1645) {
				} else if !yym1646 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1645)
				} else {
					z.DecFallback(yyv1645, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1647 := &x.ListMeta
				yym1648 := z.DecBinary()
				_ = yym1648
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1647) {
				} else {
					z.DecFallback(yyv1647, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1649 := &x.Items
				yym1650 := z.DecBinary()
				_ = yym1650
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1649), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1643)
		} // end switch yys1643
	} // end for yyj1643
	if !yyhl1643 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1651 int
	var yyb1651 bool
	var yyhl1651 bool = l >= 0
	yyj1651++
	if yyhl1651 {
		yyb1651 = yyj1651 > l
	} else {
		yyb1651 = r.CheckBreak()
	}
	if yyb1651 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1651++
	if yyhl1651 {
		yyb1651 = yyj1651 > l
	} else {
		yyb1651 = r.CheckBreak()
	}
	if yyb1651 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1653 := &x.APIVersion
		yym1654 := z.DecBinary()
		_ = yym1654
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1653) {
		} else if !yym1654 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1653)
		} else {
			z.DecFallback(yyv1653, false)
		}
	}
	yyj1651++
	if yyhl1651 {
		yyb1651 = yyj1651 > l
	} else {
		yyb1651 = r.CheckBreak()
	}
	if yyb1651 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1655 := &x.ListMeta
		yym1656 := z.DecBinary()
		_ = yym1656
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1655) {
		} else {
			z.DecFallback(yyv1655, false)
		}
	}
	yyj1651++
	if yyhl1651 {
		yyb1651 = yyj1651 > l
	} else {
		yyb1651 = r.CheckBreak()
	}
	if yyb1651 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1657 := &x.Items
		yym1658 := z.DecBinary()
		_ = yym1658
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1657), d)
		}
	}
	for {
		yyj1651++
		if yyhl1651 {
			yyb1651 = yyj1651 > l
		} else {
			yyb1651 = r.CheckBreak()
		}
		if yyb1651 {
			break
		}
		z.DecStructFieldNotFound(yyj1651-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1659 := z.EncBinary()
		_ = yym1659
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1660 := !z.EncBinary()
			yy2arr1660 := z.EncBasicHandle().StructToArray
			var yyq1660 [2]bool
			_, _, _ = yysep1660, yyq1660, yy2arr1660
			const yyr1660 bool = false
			yyq1660[0] = true
			yyq1660[1] = true
			if yyr1660 || yy2arr1660 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1660 int = 0
				for _, b := range yyq1660 {
					if b {
						yynn1660++
					}
				}
				r.EncodeMapStart(yynn1660)
			}
			if yyr1660 || yy2arr1660 {
				if yyq1660[0] {
					yy1662 := &x.ObjectMeta
					yy1662.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1660[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1663 := &x.ObjectMeta
					yy1663.CodecEncodeSelf(e)
				}
			}
			if yyr1660 || yy2arr1660 {
				if yyq1660[1] {
					yy1665 := &x.Spec
					yy1665.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1660[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1666 := &x.Spec
					yy1666.CodecEncodeSelf(e)
				}
			}
			if yysep1660 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1667 := z.DecBinary()
	_ = yym1667
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1668 := r.ReadMapStart()
			if yyl1668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1668, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1668 := r.ReadArrayStart()
			if yyl1668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1668, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1669Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1669Slc
	var yyhl1669 bool = l >= 0
	for yyj1669 := 0; ; yyj1669++ {
		if yyhl1669 {
			if yyj1669 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1669Slc = r.DecodeBytes(yys1669Slc, true, true)
		yys1669 := string(yys1669Slc)
		switch yys1669 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1670 := &x.ObjectMeta
				yyv1670.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1671 := &x.Spec
				yyv1671.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1669)
		} // end switch yys1669
	} // end for yyj1669
	if !yyhl1669 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1672 int
	var yyb1672 bool
	var yyhl1672 bool = l >= 0
	yyj1672++
	if yyhl1672 {
		yyb1672 = yyj1672 > l
	} else {
		yyb1672 = r.CheckBreak()
	}
	if yyb1672 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1673 := &x.ObjectMeta
		yyv1673.CodecDecodeSelf(d)
	}
	yyj1672++
	if yyhl1672 {
		yyb1672 = yyj1672 > l
	} else {
		yyb1672 = r.CheckBreak()
	}
	if yyb1672 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1674 := &x.Spec
		yyv1674.CodecDecodeSelf(d)
	}
	for {
		yyj1672++
		if yyhl1672 {
			yyb1672 = yyj1672 > l
		} else {
			yyb1672 = r.CheckBreak()
		}
		if yyb1672 {
			break
		}
		z.DecStructFieldNotFound(yyj1672-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1675 := z.EncBinary()
		_ = yym1675
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1676 := !z.EncBinary()
			yy2arr1676 := z.EncBasicHandle().StructToArray
			var yyq1676 [4]bool
			_, _, _ = yysep1676, yyq1676, yy2arr1676
			const yyr1676 bool = false
			yyq1676[0] = x.Kind != ""
			yyq1676[1] = true
			yyq1676[2] = true
			yyq1676[3] = true
			if yyr1676 || yy2arr1676 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1676 int = 0
				for _, b := range yyq1676 {
					if b {
						yynn1676++
					}
				}
				r.EncodeMapStart(yynn1676)
			}
			if yyr1676 || yy2arr1676 {
				if yyq1676[0] {
					yym1678 := z.EncBinary()
					_ = yym1678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1676[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1679 := z.EncBinary()
					_ = yym1679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1676 || yy2arr1676 {
				if yyq1676[1] {
					yy1681 := &x.APIVersion
					yym1682 := z.EncBinary()
					_ = yym1682
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1681) {
					} else if !yym1682 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1681)
					} else {
						z.EncFallback(yy1681)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1676[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1683 := &x.APIVersion
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1683) {
					} else if !yym1684 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1683)
					} else {
						z.EncFallback(yy1683)
					}
				}
			}
			if yyr1676 || yy2arr1676 {
				if yyq1676[2] {
					yy1686 := &x.ObjectMeta
					yy1686.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1676[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1687 := &x.ObjectMeta
					yy1687.CodecEncodeSelf(e)
				}
			}
			if yyr1676 || yy2arr1676 {
				if yyq1676[3] {
					yy1689 := &x.Template
					yy1689.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1676[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1690 := &x.Template
					yy1690.CodecEncodeSelf(e)
				}
			}
			if yysep1676 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1691 := z.DecBinary()
	_ = yym1691
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1692 := r.ReadMapStart()
			if yyl1692 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1692, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1692 := r.ReadArrayStart()
			if yyl1692 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1692, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1693Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1693Slc
	var yyhl1693 bool = l >= 0
	for yyj1693 := 0; ; yyj1693++ {
		if yyhl1693 {
			if yyj1693 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1693Slc = r.DecodeBytes(yys1693Slc, true, true)
		yys1693 := string(yys1693Slc)
		switch yys1693 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1695 := &x.APIVersion
				yym1696 := z.DecBinary()
				_ = yym1696
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1695) {
				} else if !yym1696 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1695)
				} else {
					z.DecFallback(yyv1695, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1697 := &x.ObjectMeta
				yyv1697.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1698 := &x.Template
				yyv1698.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1693)
		} // end switch yys1693
	} // end for yyj1693
	if !yyhl1693 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1699 int
	var yyb1699 bool
	var yyhl1699 bool = l >= 0
	yyj1699++
	if yyhl1699 {
		yyb1699 = yyj1699 > l
	} else {
		yyb1699 = r.CheckBreak()
	}
	if yyb1699 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1699++
	if yyhl1699 {
		yyb1699 = yyj1699 > l
	} else {
		yyb1699 = r.CheckBreak()
	}
	if yyb1699 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1701 := &x.APIVersion
		yym1702 := z.DecBinary()
		_ = yym1702
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1701) {
		} else if !yym1702 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1701)
		} else {
			z.DecFallback(yyv1701, false)
		}
	}
	yyj1699++
	if yyhl1699 {
		yyb1699 = yyj1699 > l
	} else {
		yyb1699 = r.CheckBreak()
	}
	if yyb1699 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1703 := &x.ObjectMeta
		yyv1703.CodecDecodeSelf(d)
	}
	yyj1699++
	if yyhl1699 {
		yyb1699 = yyj1699 > l
	} else {
		yyb1699 = r.CheckBreak()
	}
	if yyb1699 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1704 := &x.Template
		yyv1704.CodecDecodeSelf(d)
	}
	for {
		yyj1699++
		if yyhl1699 {
			yyb1699 = yyj1699 > l
		} else {
			yyb1699 = r.CheckBreak()
		}
		if yyb1699 {
			break
		}
		z.DecStructFieldNotFound(yyj1699-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1705 := z.EncBinary()
		_ = yym1705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1706 := !z.EncBinary()
			yy2arr1706 := z.EncBasicHandle().StructToArray
			var yyq1706 [4]bool
			_, _, _ = yysep1706, yyq1706, yy2arr1706
			const yyr1706 bool = false
			yyq1706[0] = x.Kind != ""
			yyq1706[1] = true
			yyq1706[2] = true
			if yyr1706 || yy2arr1706 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1706 int = 1
				for _, b := range yyq1706 {
					if b {
						yynn1706++
					}
				}
				r.EncodeMapStart(yynn1706)
			}
			if yyr1706 || yy2arr1706 {
				if yyq1706[0] {
					yym1708 := z.EncBinary()
					_ = yym1708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1706[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1709 := z.EncBinary()
					_ = yym1709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1706 || yy2arr1706 {
				if yyq1706[1] {
					yy1711 := &x.APIVersion
					yym1712 := z.EncBinary()
					_ = yym1712
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1711) {
					} else if !yym1712 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1711)
					} else {
						z.EncFallback(yy1711)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1706[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1713 := &x.APIVersion
					yym1714 := z.EncBinary()
					_ = yym1714
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1713) {
					} else if !yym1714 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1713)
					} else {
						z.EncFallback(yy1713)
					}
				}
			}
			if yyr1706 || yy2arr1706 {
				if yyq1706[2] {
					yy1716 := &x.ListMeta
					yym1717 := z.EncBinary()
					_ = yym1717
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1716) {
					} else {
						z.EncFallback(yy1716)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1706[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1718 := &x.ListMeta
					yym1719 := z.EncBinary()
					_ = yym1719
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1718) {
					} else {
						z.EncFallback(yy1718)
					}
				}
			}
			if yyr1706 || yy2arr1706 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1721 := z.EncBinary()
					_ = yym1721
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1722 := z.EncBinary()
					_ = yym1722
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1706 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1723 := z.DecBinary()
	_ = yym1723
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1724 := r.ReadMapStart()
			if yyl1724 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1724, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1724 := r.ReadArrayStart()
			if yyl1724 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1724, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1725Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1725Slc
	var yyhl1725 bool = l >= 0
	for yyj1725 := 0; ; yyj1725++ {
		if yyhl1725 {
			if yyj1725 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1725Slc = r.DecodeBytes(yys1725Slc, true, true)
		yys1725 := string(yys1725Slc)
		switch yys1725 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1727 := &x.APIVersion
				yym1728 := z.DecBinary()
				_ = yym1728
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1727) {
				} else if !yym1728 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1727)
				} else {
					z.DecFallback(yyv1727, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1729 := &x.ListMeta
				yym1730 := z.DecBinary()
				_ = yym1730
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1729) {
				} else {
					z.DecFallback(yyv1729, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1731 := &x.Items
				yym1732 := z.DecBinary()
				_ = yym1732
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1731), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1725)
		} // end switch yys1725
	} // end for yyj1725
	if !yyhl1725 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1733 int
	var yyb1733 bool
	var yyhl1733 bool = l >= 0
	yyj1733++
	if yyhl1733 {
		yyb1733 = yyj1733 > l
	} else {
		yyb1733 = r.CheckBreak()
	}
	if yyb1733 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1733++
	if yyhl1733 {
		yyb1733 = yyj1733 > l
	} else {
		yyb1733 = r.CheckBreak()
	}
	if yyb1733 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1735 := &x.APIVersion
		yym1736 := z.DecBinary()
		_ = yym1736
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1735) {
		} else if !yym1736 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1735)
		} else {
			z.DecFallback(yyv1735, false)
		}
	}
	yyj1733++
	if yyhl1733 {
		yyb1733 = yyj1733 > l
	} else {
		yyb1733 = r.CheckBreak()
	}
	if yyb1733 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1737 := &x.ListMeta
		yym1738 := z.DecBinary()
		_ = yym1738
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1737) {
		} else {
			z.DecFallback(yyv1737, false)
		}
	}
	yyj1733++
	if yyhl1733 {
		yyb1733 = yyj1733 > l
	} else {
		yyb1733 = r.CheckBreak()
	}
	if yyb1733 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1739 := &x.Items
		yym1740 := z.DecBinary()
		_ = yym1740
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1739), d)
		}
	}
	for {
		yyj1733++
		if yyhl1733 {
			yyb1733 = yyj1733 > l
		} else {
			yyb1733 = r.CheckBreak()
		}
		if yyb1733 {
			break
		}
		z.DecStructFieldNotFound(yyj1733-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1741 := z.EncBinary()
		_ = yym1741
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1742 := !z.EncBinary()
			yy2arr1742 := z.EncBasicHandle().StructToArray
			var yyq1742 [3]bool
			_, _, _ = yysep1742, yyq1742, yy2arr1742
			const yyr1742 bool = false
			yyq1742[0] = x.Replicas != nil
			yyq1742[1] = len(x.Selector) != 0
			yyq1742[2] = x.Template != nil
			if yyr1742 || yy2arr1742 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1742 int = 0
				for _, b := range yyq1742 {
					if b {
						yynn1742++
					}
				}
				r.EncodeMapStart(yynn1742)
			}
			if yyr1742 || yy2arr1742 {
				if yyq1742[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1744 := *x.Replicas
						yym1745 := z.EncBinary()
						_ = yym1745
						if false {
						} else {
							r.EncodeInt(int64(yy1744))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1742[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1746 := *x.Replicas
						yym1747 := z.EncBinary()
						_ = yym1747
						if false {
						} else {
							r.EncodeInt(int64(yy1746))
						}
					}
				}
			}
			if yyr1742 || yy2arr1742 {
				if yyq1742[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1749 := z.EncBinary()
						_ = yym1749
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1742[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1750 := z.EncBinary()
						_ = yym1750
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1742 || yy2arr1742 {
				if yyq1742[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1742[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1742 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1752 := z.DecBinary()
	_ = yym1752
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1753 := r.ReadMapStart()
			if yyl1753 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1753, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1753 := r.ReadArrayStart()
			if yyl1753 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1753, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1754Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1754Slc
	var yyhl1754 bool = l >= 0
	for yyj1754 := 0; ; yyj1754++ {
		if yyhl1754 {
			if yyj1754 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1754Slc = r.DecodeBytes(yys1754Slc, true, true)
		yys1754 := string(yys1754Slc)
		switch yys1754 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int)
				}
				yym1756 := z.DecBinary()
				_ = yym1756
				if false {
				} else {
					*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1757 := &x.Selector
				yym1758 := z.DecBinary()
				_ = yym1758
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1757, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1754)
		} // end switch yys1754
	} // end for yyj1754
	if !yyhl1754 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1760 int
	var yyb1760 bool
	var yyhl1760 bool = l >= 0
	yyj1760++
	if yyhl1760 {
		yyb1760 = yyj1760 > l
	} else {
		yyb1760 = r.CheckBreak()
	}
	if yyb1760 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int)
		}
		yym1762 := z.DecBinary()
		_ = yym1762
		if false {
		} else {
			*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj1760++
	if yyhl1760 {
		yyb1760 = yyj1760 > l
	} else {
		yyb1760 = r.CheckBreak()
	}
	if yyb1760 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1763 := &x.Selector
		yym1764 := z.DecBinary()
		_ = yym1764
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1763, false, d)
		}
	}
	yyj1760++
	if yyhl1760 {
		yyb1760 = yyj1760 > l
	} else {
		yyb1760 = r.CheckBreak()
	}
	if yyb1760 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1760++
		if yyhl1760 {
			yyb1760 = yyj1760 > l
		} else {
			yyb1760 = r.CheckBreak()
		}
		if yyb1760 {
			break
		}
		z.DecStructFieldNotFound(yyj1760-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1766 := z.EncBinary()
		_ = yym1766
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1767 := !z.EncBinary()
			yy2arr1767 := z.EncBasicHandle().StructToArray
			var yyq1767 [2]bool
			_, _, _ = yysep1767, yyq1767, yy2arr1767
			const yyr1767 bool = false
			yyq1767[1] = x.ObservedGeneration != 0
			if yyr1767 || yy2arr1767 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1767 int = 1
				for _, b := range yyq1767 {
					if b {
						yynn1767++
					}
				}
				r.EncodeMapStart(yynn1767)
			}
			if yyr1767 || yy2arr1767 {
				yym1769 := z.EncBinary()
				_ = yym1769
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1770 := z.EncBinary()
				_ = yym1770
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1767 || yy2arr1767 {
				if yyq1767[1] {
					yym1772 := z.EncBinary()
					_ = yym1772
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1767[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1773 := z.EncBinary()
					_ = yym1773
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1767 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1774 := z.DecBinary()
	_ = yym1774
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1775 := r.ReadMapStart()
			if yyl1775 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1775, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1775 := r.ReadArrayStart()
			if yyl1775 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1775, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1776Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1776Slc
	var yyhl1776 bool = l >= 0
	for yyj1776 := 0; ; yyj1776++ {
		if yyhl1776 {
			if yyj1776 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1776Slc = r.DecodeBytes(yys1776Slc, true, true)
		yys1776 := string(yys1776Slc)
		switch yys1776 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1776)
		} // end switch yys1776
	} // end for yyj1776
	if !yyhl1776 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1779 int
	var yyb1779 bool
	var yyhl1779 bool = l >= 0
	yyj1779++
	if yyhl1779 {
		yyb1779 = yyj1779 > l
	} else {
		yyb1779 = r.CheckBreak()
	}
	if yyb1779 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1779++
	if yyhl1779 {
		yyb1779 = yyj1779 > l
	} else {
		yyb1779 = r.CheckBreak()
	}
	if yyb1779 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1779++
		if yyhl1779 {
			yyb1779 = yyj1779 > l
		} else {
			yyb1779 = r.CheckBreak()
		}
		if yyb1779 {
			break
		}
		z.DecStructFieldNotFound(yyj1779-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1782 := z.EncBinary()
		_ = yym1782
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1783 := !z.EncBinary()
			yy2arr1783 := z.EncBasicHandle().StructToArray
			var yyq1783 [5]bool
			_, _, _ = yysep1783, yyq1783, yy2arr1783
			const yyr1783 bool = false
			yyq1783[0] = x.Kind != ""
			yyq1783[1] = true
			yyq1783[2] = true
			yyq1783[3] = true
			yyq1783[4] = true
			if yyr1783 || yy2arr1783 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1783 int = 0
				for _, b := range yyq1783 {
					if b {
						yynn1783++
					}
				}
				r.EncodeMapStart(yynn1783)
			}
			if yyr1783 || yy2arr1783 {
				if yyq1783[0] {
					yym1785 := z.EncBinary()
					_ = yym1785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1783[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1786 := z.EncBinary()
					_ = yym1786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1783 || yy2arr1783 {
				if yyq1783[1] {
					yy1788 := &x.APIVersion
					yym1789 := z.EncBinary()
					_ = yym1789
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1788) {
					} else if !yym1789 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1788)
					} else {
						z.EncFallback(yy1788)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1783[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1790 := &x.APIVersion
					yym1791 := z.EncBinary()
					_ = yym1791
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1790) {
					} else if !yym1791 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1790)
					} else {
						z.EncFallback(yy1790)
					}
				}
			}
			if yyr1783 || yy2arr1783 {
				if yyq1783[2] {
					yy1793 := &x.ObjectMeta
					yy1793.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1783[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1794 := &x.ObjectMeta
					yy1794.CodecEncodeSelf(e)
				}
			}
			if yyr1783 || yy2arr1783 {
				if yyq1783[3] {
					yy1796 := &x.Spec
					yy1796.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1783[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1797 := &x.Spec
					yy1797.CodecEncodeSelf(e)
				}
			}
			if yyr1783 || yy2arr1783 {
				if yyq1783[4] {
					yy1799 := &x.Status
					yy1799.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1783[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1800 := &x.Status
					yy1800.CodecEncodeSelf(e)
				}
			}
			if yysep1783 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1801 := z.DecBinary()
	_ = yym1801
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1802 := r.ReadMapStart()
			if yyl1802 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1802, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1802 := r.ReadArrayStart()
			if yyl1802 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1802, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1803Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1803Slc
	var yyhl1803 bool = l >= 0
	for yyj1803 := 0; ; yyj1803++ {
		if yyhl1803 {
			if yyj1803 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1803Slc = r.DecodeBytes(yys1803Slc, true, true)
		yys1803 := string(yys1803Slc)
		switch yys1803 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1805 := &x.APIVersion
				yym1806 := z.DecBinary()
				_ = yym1806
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1805) {
				} else if !yym1806 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1805)
				} else {
					z.DecFallback(yyv1805, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1807 := &x.ObjectMeta
				yyv1807.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1808 := &x.Spec
				yyv1808.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1809 := &x.Status
				yyv1809.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1803)
		} // end switch yys1803
	} // end for yyj1803
	if !yyhl1803 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1810 int
	var yyb1810 bool
	var yyhl1810 bool = l >= 0
	yyj1810++
	if yyhl1810 {
		yyb1810 = yyj1810 > l
	} else {
		yyb1810 = r.CheckBreak()
	}
	if yyb1810 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1810++
	if yyhl1810 {
		yyb1810 = yyj1810 > l
	} else {
		yyb1810 = r.CheckBreak()
	}
	if yyb1810 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1812 := &x.APIVersion
		yym1813 := z.DecBinary()
		_ = yym1813
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1812) {
		} else if !yym1813 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1812)
		} else {
			z.DecFallback(yyv1812, false)
		}
	}
	yyj1810++
	if yyhl1810 {
		yyb1810 = yyj1810 > l
	} else {
		yyb1810 = r.CheckBreak()
	}
	if yyb1810 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1814 := &x.ObjectMeta
		yyv1814.CodecDecodeSelf(d)
	}
	yyj1810++
	if yyhl1810 {
		yyb1810 = yyj1810 > l
	} else {
		yyb1810 = r.CheckBreak()
	}
	if yyb1810 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1815 := &x.Spec
		yyv1815.CodecDecodeSelf(d)
	}
	yyj1810++
	if yyhl1810 {
		yyb1810 = yyj1810 > l
	} else {
		yyb1810 = r.CheckBreak()
	}
	if yyb1810 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1816 := &x.Status
		yyv1816.CodecDecodeSelf(d)
	}
	for {
		yyj1810++
		if yyhl1810 {
			yyb1810 = yyj1810 > l
		} else {
			yyb1810 = r.CheckBreak()
		}
		if yyb1810 {
			break
		}
		z.DecStructFieldNotFound(yyj1810-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1817 := z.EncBinary()
		_ = yym1817
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1818 := !z.EncBinary()
			yy2arr1818 := z.EncBasicHandle().StructToArray
			var yyq1818 [4]bool
			_, _, _ = yysep1818, yyq1818, yy2arr1818
			const yyr1818 bool = false
			yyq1818[0] = x.Kind != ""
			yyq1818[1] = true
			yyq1818[2] = true
			if yyr1818 || yy2arr1818 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1818 int = 1
				for _, b := range yyq1818 {
					if b {
						yynn1818++
					}
				}
				r.EncodeMapStart(yynn1818)
			}
			if yyr1818 || yy2arr1818 {
				if yyq1818[0] {
					yym1820 := z.EncBinary()
					_ = yym1820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1818[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1821 := z.EncBinary()
					_ = yym1821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1818 || yy2arr1818 {
				if yyq1818[1] {
					yy1823 := &x.APIVersion
					yym1824 := z.EncBinary()
					_ = yym1824
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1823) {
					} else if !yym1824 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1823)
					} else {
						z.EncFallback(yy1823)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1818[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1825 := &x.APIVersion
					yym1826 := z.EncBinary()
					_ = yym1826
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1825) {
					} else if !yym1826 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1825)
					} else {
						z.EncFallback(yy1825)
					}
				}
			}
			if yyr1818 || yy2arr1818 {
				if yyq1818[2] {
					yy1828 := &x.ListMeta
					yym1829 := z.EncBinary()
					_ = yym1829
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1828) {
					} else {
						z.EncFallback(yy1828)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1818[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1830 := &x.ListMeta
					yym1831 := z.EncBinary()
					_ = yym1831
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1830) {
					} else {
						z.EncFallback(yy1830)
					}
				}
			}
			if yyr1818 || yy2arr1818 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1833 := z.EncBinary()
					_ = yym1833
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1834 := z.EncBinary()
					_ = yym1834
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1818 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1835 := z.DecBinary()
	_ = yym1835
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1836 := r.ReadMapStart()
			if yyl1836 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1836, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1836 := r.ReadArrayStart()
			if yyl1836 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1836, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1837Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1837Slc
	var yyhl1837 bool = l >= 0
	for yyj1837 := 0; ; yyj1837++ {
		if yyhl1837 {
			if yyj1837 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1837Slc = r.DecodeBytes(yys1837Slc, true, true)
		yys1837 := string(yys1837Slc)
		switch yys1837 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1839 := &x.APIVersion
				yym1840 := z.DecBinary()
				_ = yym1840
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1839) {
				} else if !yym1840 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1839)
				} else {
					z.DecFallback(yyv1839, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1841 := &x.ListMeta
				yym1842 := z.DecBinary()
				_ = yym1842
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1841) {
				} else {
					z.DecFallback(yyv1841, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1843 := &x.Items
				yym1844 := z.DecBinary()
				_ = yym1844
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1843), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1837)
		} // end switch yys1837
	} // end for yyj1837
	if !yyhl1837 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1845 int
	var yyb1845 bool
	var yyhl1845 bool = l >= 0
	yyj1845++
	if yyhl1845 {
		yyb1845 = yyj1845 > l
	} else {
		yyb1845 = r.CheckBreak()
	}
	if yyb1845 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1845++
	if yyhl1845 {
		yyb1845 = yyj1845 > l
	} else {
		yyb1845 = r.CheckBreak()
	}
	if yyb1845 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1847 := &x.APIVersion
		yym1848 := z.DecBinary()
		_ = yym1848
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1847) {
		} else if !yym1848 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1847)
		} else {
			z.DecFallback(yyv1847, false)
		}
	}
	yyj1845++
	if yyhl1845 {
		yyb1845 = yyj1845 > l
	} else {
		yyb1845 = r.CheckBreak()
	}
	if yyb1845 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1849 := &x.ListMeta
		yym1850 := z.DecBinary()
		_ = yym1850
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1849) {
		} else {
			z.DecFallback(yyv1849, false)
		}
	}
	yyj1845++
	if yyhl1845 {
		yyb1845 = yyj1845 > l
	} else {
		yyb1845 = r.CheckBreak()
	}
	if yyb1845 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1851 := &x.Items
		yym1852 := z.DecBinary()
		_ = yym1852
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1851), d)
		}
	}
	for {
		yyj1845++
		if yyhl1845 {
			yyb1845 = yyj1845 > l
		} else {
			yyb1845 = r.CheckBreak()
		}
		if yyb1845 {
			break
		}
		z.DecStructFieldNotFound(yyj1845-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1853 := z.EncBinary()
	_ = yym1853
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1854 := z.DecBinary()
	_ = yym1854
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1855 := z.EncBinary()
	_ = yym1855
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1856 := z.DecBinary()
	_ = yym1856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1857 := z.EncBinary()
		_ = yym1857
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1858 := !z.EncBinary()
			yy2arr1858 := z.EncBasicHandle().StructToArray
			var yyq1858 [1]bool
			_, _, _ = yysep1858, yyq1858, yy2arr1858
			const yyr1858 bool = false
			yyq1858[0] = true
			if yyr1858 || yy2arr1858 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1858 int = 0
				for _, b := range yyq1858 {
					if b {
						yynn1858++
					}
				}
				r.EncodeMapStart(yynn1858)
			}
			if yyr1858 || yy2arr1858 {
				if yyq1858[0] {
					yy1860 := &x.LoadBalancer
					yy1860.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1858[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1861 := &x.LoadBalancer
					yy1861.CodecEncodeSelf(e)
				}
			}
			if yysep1858 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1862 := z.DecBinary()
	_ = yym1862
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1863 := r.ReadMapStart()
			if yyl1863 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1863, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1863 := r.ReadArrayStart()
			if yyl1863 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1863, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1864Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1864Slc
	var yyhl1864 bool = l >= 0
	for yyj1864 := 0; ; yyj1864++ {
		if yyhl1864 {
			if yyj1864 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1864Slc = r.DecodeBytes(yys1864Slc, true, true)
		yys1864 := string(yys1864Slc)
		switch yys1864 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1865 := &x.LoadBalancer
				yyv1865.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1864)
		} // end switch yys1864
	} // end for yyj1864
	if !yyhl1864 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1866 int
	var yyb1866 bool
	var yyhl1866 bool = l >= 0
	yyj1866++
	if yyhl1866 {
		yyb1866 = yyj1866 > l
	} else {
		yyb1866 = r.CheckBreak()
	}
	if yyb1866 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1867 := &x.LoadBalancer
		yyv1867.CodecDecodeSelf(d)
	}
	for {
		yyj1866++
		if yyhl1866 {
			yyb1866 = yyj1866 > l
		} else {
			yyb1866 = r.CheckBreak()
		}
		if yyb1866 {
			break
		}
		z.DecStructFieldNotFound(yyj1866-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1868 := z.EncBinary()
		_ = yym1868
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1869 := !z.EncBinary()
			yy2arr1869 := z.EncBasicHandle().StructToArray
			var yyq1869 [1]bool
			_, _, _ = yysep1869, yyq1869, yy2arr1869
			const yyr1869 bool = false
			yyq1869[0] = len(x.Ingress) != 0
			if yyr1869 || yy2arr1869 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1869 int = 0
				for _, b := range yyq1869 {
					if b {
						yynn1869++
					}
				}
				r.EncodeMapStart(yynn1869)
			}
			if yyr1869 || yy2arr1869 {
				if yyq1869[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1871 := z.EncBinary()
						_ = yym1871
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1869[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1872 := z.EncBinary()
						_ = yym1872
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1869 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1873 := z.DecBinary()
	_ = yym1873
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1874 := r.ReadMapStart()
			if yyl1874 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1874, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1874 := r.ReadArrayStart()
			if yyl1874 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1874, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1875Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1875Slc
	var yyhl1875 bool = l >= 0
	for yyj1875 := 0; ; yyj1875++ {
		if yyhl1875 {
			if yyj1875 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1875Slc = r.DecodeBytes(yys1875Slc, true, true)
		yys1875 := string(yys1875Slc)
		switch yys1875 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1876 := &x.Ingress
				yym1877 := z.DecBinary()
				_ = yym1877
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1876), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1875)
		} // end switch yys1875
	} // end for yyj1875
	if !yyhl1875 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1878 int
	var yyb1878 bool
	var yyhl1878 bool = l >= 0
	yyj1878++
	if yyhl1878 {
		yyb1878 = yyj1878 > l
	} else {
		yyb1878 = r.CheckBreak()
	}
	if yyb1878 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1879 := &x.Ingress
		yym1880 := z.DecBinary()
		_ = yym1880
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1879), d)
		}
	}
	for {
		yyj1878++
		if yyhl1878 {
			yyb1878 = yyj1878 > l
		} else {
			yyb1878 = r.CheckBreak()
		}
		if yyb1878 {
			break
		}
		z.DecStructFieldNotFound(yyj1878-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1881 := z.EncBinary()
		_ = yym1881
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1882 := !z.EncBinary()
			yy2arr1882 := z.EncBasicHandle().StructToArray
			var yyq1882 [2]bool
			_, _, _ = yysep1882, yyq1882, yy2arr1882
			const yyr1882 bool = false
			yyq1882[0] = x.IP != ""
			yyq1882[1] = x.Hostname != ""
			if yyr1882 || yy2arr1882 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1882 int = 0
				for _, b := range yyq1882 {
					if b {
						yynn1882++
					}
				}
				r.EncodeMapStart(yynn1882)
			}
			if yyr1882 || yy2arr1882 {
				if yyq1882[0] {
					yym1884 := z.EncBinary()
					_ = yym1884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1882[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1885 := z.EncBinary()
					_ = yym1885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1882 || yy2arr1882 {
				if yyq1882[1] {
					yym1887 := z.EncBinary()
					_ = yym1887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1882[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1888 := z.EncBinary()
					_ = yym1888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1882 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1889 := z.DecBinary()
	_ = yym1889
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1890 := r.ReadMapStart()
			if yyl1890 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1890, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1890 := r.ReadArrayStart()
			if yyl1890 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1890, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1891Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1891Slc
	var yyhl1891 bool = l >= 0
	for yyj1891 := 0; ; yyj1891++ {
		if yyhl1891 {
			if yyj1891 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1891Slc = r.DecodeBytes(yys1891Slc, true, true)
		yys1891 := string(yys1891Slc)
		switch yys1891 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1891)
		} // end switch yys1891
	} // end for yyj1891
	if !yyhl1891 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1894 int
	var yyb1894 bool
	var yyhl1894 bool = l >= 0
	yyj1894++
	if yyhl1894 {
		yyb1894 = yyj1894 > l
	} else {
		yyb1894 = r.CheckBreak()
	}
	if yyb1894 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1894++
	if yyhl1894 {
		yyb1894 = yyj1894 > l
	} else {
		yyb1894 = r.CheckBreak()
	}
	if yyb1894 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1894++
		if yyhl1894 {
			yyb1894 = yyj1894 > l
		} else {
			yyb1894 = r.CheckBreak()
		}
		if yyb1894 {
			break
		}
		z.DecStructFieldNotFound(yyj1894-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1897 := z.EncBinary()
		_ = yym1897
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1898 := !z.EncBinary()
			yy2arr1898 := z.EncBasicHandle().StructToArray
			var yyq1898 [8]bool
			_, _, _ = yysep1898, yyq1898, yy2arr1898
			const yyr1898 bool = false
			yyq1898[1] = len(x.Selector) != 0
			yyq1898[2] = x.ClusterIP != ""
			yyq1898[3] = x.Type != ""
			yyq1898[4] = len(x.ExternalIPs) != 0
			yyq1898[5] = len(x.DeprecatedPublicIPs) != 0
			yyq1898[6] = x.SessionAffinity != ""
			yyq1898[7] = x.LoadBalancerIP != ""
			if yyr1898 || yy2arr1898 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1898 int = 1
				for _, b := range yyq1898 {
					if b {
						yynn1898++
					}
				}
				r.EncodeMapStart(yynn1898)
			}
			if yyr1898 || yy2arr1898 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1900 := z.EncBinary()
					_ = yym1900
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1901 := z.EncBinary()
					_ = yym1901
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1898 || yy2arr1898 {
				if yyq1898[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1903 := z.EncBinary()
						_ = yym1903
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1898[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1904 := z.EncBinary()
						_ = yym1904
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1898 || yy2arr1898 {
				if yyq1898[2] {
					yym1906 := z.EncBinary()
					_ = yym1906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1898[2] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1907 := z.EncBinary()
					_ = yym1907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1898 || yy2arr1898 {
				if yyq1898[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1898[3] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1898 || yy2arr1898 {
				if yyq1898[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1910 := z.EncBinary()
						_ = yym1910
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1898[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1911 := z.EncBinary()
						_ = yym1911
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1898 || yy2arr1898 {
				if yyq1898[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1913 := z.EncBinary()
						_ = yym1913
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1898[5] {
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1914 := z.EncBinary()
						_ = yym1914
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr1898 || yy2arr1898 {
				if yyq1898[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1898[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1898 || yy2arr1898 {
				if yyq1898[7] {
					yym1917 := z.EncBinary()
					_ = yym1917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1898[7] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1918 := z.EncBinary()
					_ = yym1918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yysep1898 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1919 := z.DecBinary()
	_ = yym1919
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1920 := r.ReadMapStart()
			if yyl1920 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1920, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1920 := r.ReadArrayStart()
			if yyl1920 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1920, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1921Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1921Slc
	var yyhl1921 bool = l >= 0
	for yyj1921 := 0; ; yyj1921++ {
		if yyhl1921 {
			if yyj1921 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1921Slc = r.DecodeBytes(yys1921Slc, true, true)
		yys1921 := string(yys1921Slc)
		switch yys1921 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1922 := &x.Ports
				yym1923 := z.DecBinary()
				_ = yym1923
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1922), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1924 := &x.Selector
				yym1925 := z.DecBinary()
				_ = yym1925
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1924, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1928 := &x.ExternalIPs
				yym1929 := z.DecBinary()
				_ = yym1929
				if false {
				} else {
					z.F.DecSliceStringX(yyv1928, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv1930 := &x.DeprecatedPublicIPs
				yym1931 := z.DecBinary()
				_ = yym1931
				if false {
				} else {
					z.F.DecSliceStringX(yyv1930, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1921)
		} // end switch yys1921
	} // end for yyj1921
	if !yyhl1921 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1934 int
	var yyb1934 bool
	var yyhl1934 bool = l >= 0
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1935 := &x.Ports
		yym1936 := z.DecBinary()
		_ = yym1936
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1935), d)
		}
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1937 := &x.Selector
		yym1938 := z.DecBinary()
		_ = yym1938
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1937, false, d)
		}
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1941 := &x.ExternalIPs
		yym1942 := z.DecBinary()
		_ = yym1942
		if false {
		} else {
			z.F.DecSliceStringX(yyv1941, false, d)
		}
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv1943 := &x.DeprecatedPublicIPs
		yym1944 := z.DecBinary()
		_ = yym1944
		if false {
		} else {
			z.F.DecSliceStringX(yyv1943, false, d)
		}
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj1934++
		if yyhl1934 {
			yyb1934 = yyj1934 > l
		} else {
			yyb1934 = r.CheckBreak()
		}
		if yyb1934 {
			break
		}
		z.DecStructFieldNotFound(yyj1934-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1947 := z.EncBinary()
		_ = yym1947
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1948 := !z.EncBinary()
			yy2arr1948 := z.EncBasicHandle().StructToArray
			var yyq1948 [5]bool
			_, _, _ = yysep1948, yyq1948, yy2arr1948
			const yyr1948 bool = false
			yyq1948[0] = x.Name != ""
			yyq1948[1] = x.Protocol != ""
			yyq1948[3] = true
			yyq1948[4] = x.NodePort != 0
			if yyr1948 || yy2arr1948 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1948 int = 1
				for _, b := range yyq1948 {
					if b {
						yynn1948++
					}
				}
				r.EncodeMapStart(yynn1948)
			}
			if yyr1948 || yy2arr1948 {
				if yyq1948[0] {
					yym1950 := z.EncBinary()
					_ = yym1950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1948[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym1951 := z.EncBinary()
					_ = yym1951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				if yyq1948[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1948[1] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1948 || yy2arr1948 {
				yym1954 := z.EncBinary()
				_ = yym1954
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym1955 := z.EncBinary()
				_ = yym1955
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1948 || yy2arr1948 {
				if yyq1948[3] {
					yy1957 := &x.TargetPort
					yym1958 := z.EncBinary()
					_ = yym1958
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1957) {
					} else if !yym1958 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1957)
					} else {
						z.EncFallback(yy1957)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1948[3] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					yy1959 := &x.TargetPort
					yym1960 := z.EncBinary()
					_ = yym1960
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1959) {
					} else if !yym1960 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1959)
					} else {
						z.EncFallback(yy1959)
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				if yyq1948[4] {
					yym1962 := z.EncBinary()
					_ = yym1962
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1948[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					yym1963 := z.EncBinary()
					_ = yym1963
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yysep1948 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1964 := z.DecBinary()
	_ = yym1964
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1965 := r.ReadMapStart()
			if yyl1965 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1965, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1965 := r.ReadArrayStart()
			if yyl1965 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1965, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1966Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1966Slc
	var yyhl1966 bool = l >= 0
	for yyj1966 := 0; ; yyj1966++ {
		if yyhl1966 {
			if yyj1966 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1966Slc = r.DecodeBytes(yys1966Slc, true, true)
		yys1966 := string(yys1966Slc)
		switch yys1966 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_util.IntOrString{}
			} else {
				yyv1970 := &x.TargetPort
				yym1971 := z.DecBinary()
				_ = yym1971
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1970) {
				} else if !yym1971 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1970)
				} else {
					z.DecFallback(yyv1970, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1966)
		} // end switch yys1966
	} // end for yyj1966
	if !yyhl1966 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1973 int
	var yyb1973 bool
	var yyhl1973 bool = l >= 0
	yyj1973++
	if yyhl1973 {
		yyb1973 = yyj1973 > l
	} else {
		yyb1973 = r.CheckBreak()
	}
	if yyb1973 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1973++
	if yyhl1973 {
		yyb1973 = yyj1973 > l
	} else {
		yyb1973 = r.CheckBreak()
	}
	if yyb1973 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1973++
	if yyhl1973 {
		yyb1973 = yyj1973 > l
	} else {
		yyb1973 = r.CheckBreak()
	}
	if yyb1973 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1973++
	if yyhl1973 {
		yyb1973 = yyj1973 > l
	} else {
		yyb1973 = r.CheckBreak()
	}
	if yyb1973 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_util.IntOrString{}
	} else {
		yyv1977 := &x.TargetPort
		yym1978 := z.DecBinary()
		_ = yym1978
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1977) {
		} else if !yym1978 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1977)
		} else {
			z.DecFallback(yyv1977, false)
		}
	}
	yyj1973++
	if yyhl1973 {
		yyb1973 = yyj1973 > l
	} else {
		yyb1973 = r.CheckBreak()
	}
	if yyb1973 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1973++
		if yyhl1973 {
			yyb1973 = yyj1973 > l
		} else {
			yyb1973 = r.CheckBreak()
		}
		if yyb1973 {
			break
		}
		z.DecStructFieldNotFound(yyj1973-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1980 := z.EncBinary()
		_ = yym1980
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1981 := !z.EncBinary()
			yy2arr1981 := z.EncBasicHandle().StructToArray
			var yyq1981 [5]bool
			_, _, _ = yysep1981, yyq1981, yy2arr1981
			const yyr1981 bool = false
			yyq1981[0] = x.Kind != ""
			yyq1981[1] = true
			yyq1981[2] = true
			yyq1981[3] = true
			yyq1981[4] = true
			if yyr1981 || yy2arr1981 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1981 int = 0
				for _, b := range yyq1981 {
					if b {
						yynn1981++
					}
				}
				r.EncodeMapStart(yynn1981)
			}
			if yyr1981 || yy2arr1981 {
				if yyq1981[0] {
					yym1983 := z.EncBinary()
					_ = yym1983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1981[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1984 := z.EncBinary()
					_ = yym1984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1981 || yy2arr1981 {
				if yyq1981[1] {
					yy1986 := &x.APIVersion
					yym1987 := z.EncBinary()
					_ = yym1987
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1986) {
					} else if !yym1987 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1986)
					} else {
						z.EncFallback(yy1986)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1981[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1988 := &x.APIVersion
					yym1989 := z.EncBinary()
					_ = yym1989
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1988) {
					} else if !yym1989 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1988)
					} else {
						z.EncFallback(yy1988)
					}
				}
			}
			if yyr1981 || yy2arr1981 {
				if yyq1981[2] {
					yy1991 := &x.ObjectMeta
					yy1991.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1981[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1992 := &x.ObjectMeta
					yy1992.CodecEncodeSelf(e)
				}
			}
			if yyr1981 || yy2arr1981 {
				if yyq1981[3] {
					yy1994 := &x.Spec
					yy1994.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1981[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1995 := &x.Spec
					yy1995.CodecEncodeSelf(e)
				}
			}
			if yyr1981 || yy2arr1981 {
				if yyq1981[4] {
					yy1997 := &x.Status
					yy1997.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1981[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1998 := &x.Status
					yy1998.CodecEncodeSelf(e)
				}
			}
			if yysep1981 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1999 := z.DecBinary()
	_ = yym1999
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2000 := r.ReadMapStart()
			if yyl2000 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2000, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2000 := r.ReadArrayStart()
			if yyl2000 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2000, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2001Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2001Slc
	var yyhl2001 bool = l >= 0
	for yyj2001 := 0; ; yyj2001++ {
		if yyhl2001 {
			if yyj2001 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2001Slc = r.DecodeBytes(yys2001Slc, true, true)
		yys2001 := string(yys2001Slc)
		switch yys2001 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2003 := &x.APIVersion
				yym2004 := z.DecBinary()
				_ = yym2004
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2003) {
				} else if !yym2004 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2003)
				} else {
					z.DecFallback(yyv2003, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2005 := &x.ObjectMeta
				yyv2005.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2006 := &x.Spec
				yyv2006.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2007 := &x.Status
				yyv2007.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2001)
		} // end switch yys2001
	} // end for yyj2001
	if !yyhl2001 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2008 int
	var yyb2008 bool
	var yyhl2008 bool = l >= 0
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2010 := &x.APIVersion
		yym2011 := z.DecBinary()
		_ = yym2011
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2010) {
		} else if !yym2011 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2010)
		} else {
			z.DecFallback(yyv2010, false)
		}
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2012 := &x.ObjectMeta
		yyv2012.CodecDecodeSelf(d)
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2013 := &x.Spec
		yyv2013.CodecDecodeSelf(d)
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2014 := &x.Status
		yyv2014.CodecDecodeSelf(d)
	}
	for {
		yyj2008++
		if yyhl2008 {
			yyb2008 = yyj2008 > l
		} else {
			yyb2008 = r.CheckBreak()
		}
		if yyb2008 {
			break
		}
		z.DecStructFieldNotFound(yyj2008-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2015 := z.EncBinary()
		_ = yym2015
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2016 := !z.EncBinary()
			yy2arr2016 := z.EncBasicHandle().StructToArray
			var yyq2016 [4]bool
			_, _, _ = yysep2016, yyq2016, yy2arr2016
			const yyr2016 bool = false
			yyq2016[0] = x.Kind != ""
			yyq2016[1] = true
			yyq2016[2] = true
			if yyr2016 || yy2arr2016 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2016 int = 1
				for _, b := range yyq2016 {
					if b {
						yynn2016++
					}
				}
				r.EncodeMapStart(yynn2016)
			}
			if yyr2016 || yy2arr2016 {
				if yyq2016[0] {
					yym2018 := z.EncBinary()
					_ = yym2018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2016[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2019 := z.EncBinary()
					_ = yym2019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2016 || yy2arr2016 {
				if yyq2016[1] {
					yy2021 := &x.APIVersion
					yym2022 := z.EncBinary()
					_ = yym2022
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2021) {
					} else if !yym2022 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2021)
					} else {
						z.EncFallback(yy2021)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2016[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2023 := &x.APIVersion
					yym2024 := z.EncBinary()
					_ = yym2024
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2023) {
					} else if !yym2024 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2023)
					} else {
						z.EncFallback(yy2023)
					}
				}
			}
			if yyr2016 || yy2arr2016 {
				if yyq2016[2] {
					yy2026 := &x.ListMeta
					yym2027 := z.EncBinary()
					_ = yym2027
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2026) {
					} else {
						z.EncFallback(yy2026)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2016[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2028 := &x.ListMeta
					yym2029 := z.EncBinary()
					_ = yym2029
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2028) {
					} else {
						z.EncFallback(yy2028)
					}
				}
			}
			if yyr2016 || yy2arr2016 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2031 := z.EncBinary()
					_ = yym2031
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2032 := z.EncBinary()
					_ = yym2032
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep2016 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2033 := z.DecBinary()
	_ = yym2033
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2034 := r.ReadMapStart()
			if yyl2034 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2034, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2034 := r.ReadArrayStart()
			if yyl2034 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2034, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2035Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2035Slc
	var yyhl2035 bool = l >= 0
	for yyj2035 := 0; ; yyj2035++ {
		if yyhl2035 {
			if yyj2035 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2035Slc = r.DecodeBytes(yys2035Slc, true, true)
		yys2035 := string(yys2035Slc)
		switch yys2035 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2037 := &x.APIVersion
				yym2038 := z.DecBinary()
				_ = yym2038
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2037) {
				} else if !yym2038 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2037)
				} else {
					z.DecFallback(yyv2037, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2039 := &x.ListMeta
				yym2040 := z.DecBinary()
				_ = yym2040
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2039) {
				} else {
					z.DecFallback(yyv2039, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2041 := &x.Items
				yym2042 := z.DecBinary()
				_ = yym2042
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2041), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2035)
		} // end switch yys2035
	} // end for yyj2035
	if !yyhl2035 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2043 int
	var yyb2043 bool
	var yyhl2043 bool = l >= 0
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2045 := &x.APIVersion
		yym2046 := z.DecBinary()
		_ = yym2046
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2045) {
		} else if !yym2046 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2045)
		} else {
			z.DecFallback(yyv2045, false)
		}
	}
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2047 := &x.ListMeta
		yym2048 := z.DecBinary()
		_ = yym2048
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2047) {
		} else {
			z.DecFallback(yyv2047, false)
		}
	}
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2049 := &x.Items
		yym2050 := z.DecBinary()
		_ = yym2050
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2049), d)
		}
	}
	for {
		yyj2043++
		if yyhl2043 {
			yyb2043 = yyj2043 > l
		} else {
			yyb2043 = r.CheckBreak()
		}
		if yyb2043 {
			break
		}
		z.DecStructFieldNotFound(yyj2043-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2051 := z.EncBinary()
		_ = yym2051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2052 := !z.EncBinary()
			yy2arr2052 := z.EncBasicHandle().StructToArray
			var yyq2052 [5]bool
			_, _, _ = yysep2052, yyq2052, yy2arr2052
			const yyr2052 bool = false
			yyq2052[0] = x.Kind != ""
			yyq2052[1] = true
			yyq2052[2] = true
			yyq2052[3] = len(x.Secrets) != 0
			yyq2052[4] = len(x.ImagePullSecrets) != 0
			if yyr2052 || yy2arr2052 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2052 int = 0
				for _, b := range yyq2052 {
					if b {
						yynn2052++
					}
				}
				r.EncodeMapStart(yynn2052)
			}
			if yyr2052 || yy2arr2052 {
				if yyq2052[0] {
					yym2054 := z.EncBinary()
					_ = yym2054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2052[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2055 := z.EncBinary()
					_ = yym2055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2052 || yy2arr2052 {
				if yyq2052[1] {
					yy2057 := &x.APIVersion
					yym2058 := z.EncBinary()
					_ = yym2058
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2057) {
					} else if !yym2058 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2057)
					} else {
						z.EncFallback(yy2057)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2052[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2059 := &x.APIVersion
					yym2060 := z.EncBinary()
					_ = yym2060
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2059) {
					} else if !yym2060 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2059)
					} else {
						z.EncFallback(yy2059)
					}
				}
			}
			if yyr2052 || yy2arr2052 {
				if yyq2052[2] {
					yy2062 := &x.ObjectMeta
					yy2062.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2052[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2063 := &x.ObjectMeta
					yy2063.CodecEncodeSelf(e)
				}
			}
			if yyr2052 || yy2arr2052 {
				if yyq2052[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2065 := z.EncBinary()
						_ = yym2065
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2052[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2066 := z.EncBinary()
						_ = yym2066
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2052 || yy2arr2052 {
				if yyq2052[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2068 := z.EncBinary()
						_ = yym2068
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2052[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2069 := z.EncBinary()
						_ = yym2069
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep2052 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2070 := z.DecBinary()
	_ = yym2070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2071 := r.ReadMapStart()
			if yyl2071 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2071, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2071 := r.ReadArrayStart()
			if yyl2071 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2071, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2072Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2072Slc
	var yyhl2072 bool = l >= 0
	for yyj2072 := 0; ; yyj2072++ {
		if yyhl2072 {
			if yyj2072 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2072Slc = r.DecodeBytes(yys2072Slc, true, true)
		yys2072 := string(yys2072Slc)
		switch yys2072 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2074 := &x.APIVersion
				yym2075 := z.DecBinary()
				_ = yym2075
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2074) {
				} else if !yym2075 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2074)
				} else {
					z.DecFallback(yyv2074, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2076 := &x.ObjectMeta
				yyv2076.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2077 := &x.Secrets
				yym2078 := z.DecBinary()
				_ = yym2078
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2077), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2079 := &x.ImagePullSecrets
				yym2080 := z.DecBinary()
				_ = yym2080
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2079), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2072)
		} // end switch yys2072
	} // end for yyj2072
	if !yyhl2072 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2081 int
	var yyb2081 bool
	var yyhl2081 bool = l >= 0
	yyj2081++
	if yyhl2081 {
		yyb2081 = yyj2081 > l
	} else {
		yyb2081 = r.CheckBreak()
	}
	if yyb2081 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2081++
	if yyhl2081 {
		yyb2081 = yyj2081 > l
	} else {
		yyb2081 = r.CheckBreak()
	}
	if yyb2081 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2083 := &x.APIVersion
		yym2084 := z.DecBinary()
		_ = yym2084
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2083) {
		} else if !yym2084 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2083)
		} else {
			z.DecFallback(yyv2083, false)
		}
	}
	yyj2081++
	if yyhl2081 {
		yyb2081 = yyj2081 > l
	} else {
		yyb2081 = r.CheckBreak()
	}
	if yyb2081 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2085 := &x.ObjectMeta
		yyv2085.CodecDecodeSelf(d)
	}
	yyj2081++
	if yyhl2081 {
		yyb2081 = yyj2081 > l
	} else {
		yyb2081 = r.CheckBreak()
	}
	if yyb2081 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2086 := &x.Secrets
		yym2087 := z.DecBinary()
		_ = yym2087
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2086), d)
		}
	}
	yyj2081++
	if yyhl2081 {
		yyb2081 = yyj2081 > l
	} else {
		yyb2081 = r.CheckBreak()
	}
	if yyb2081 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2088 := &x.ImagePullSecrets
		yym2089 := z.DecBinary()
		_ = yym2089
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2088), d)
		}
	}
	for {
		yyj2081++
		if yyhl2081 {
			yyb2081 = yyj2081 > l
		} else {
			yyb2081 = r.CheckBreak()
		}
		if yyb2081 {
			break
		}
		z.DecStructFieldNotFound(yyj2081-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2090 := z.EncBinary()
		_ = yym2090
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2091 := !z.EncBinary()
			yy2arr2091 := z.EncBasicHandle().StructToArray
			var yyq2091 [4]bool
			_, _, _ = yysep2091, yyq2091, yy2arr2091
			const yyr2091 bool = false
			yyq2091[0] = x.Kind != ""
			yyq2091[1] = true
			yyq2091[2] = true
			if yyr2091 || yy2arr2091 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2091 int = 1
				for _, b := range yyq2091 {
					if b {
						yynn2091++
					}
				}
				r.EncodeMapStart(yynn2091)
			}
			if yyr2091 || yy2arr2091 {
				if yyq2091[0] {
					yym2093 := z.EncBinary()
					_ = yym2093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2091[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2094 := z.EncBinary()
					_ = yym2094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2091 || yy2arr2091 {
				if yyq2091[1] {
					yy2096 := &x.APIVersion
					yym2097 := z.EncBinary()
					_ = yym2097
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2096) {
					} else if !yym2097 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2096)
					} else {
						z.EncFallback(yy2096)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2091[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2098 := &x.APIVersion
					yym2099 := z.EncBinary()
					_ = yym2099
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2098) {
					} else if !yym2099 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2098)
					} else {
						z.EncFallback(yy2098)
					}
				}
			}
			if yyr2091 || yy2arr2091 {
				if yyq2091[2] {
					yy2101 := &x.ListMeta
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2101) {
					} else {
						z.EncFallback(yy2101)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2091[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2103 := &x.ListMeta
					yym2104 := z.EncBinary()
					_ = yym2104
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2103) {
					} else {
						z.EncFallback(yy2103)
					}
				}
			}
			if yyr2091 || yy2arr2091 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2106 := z.EncBinary()
					_ = yym2106
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2107 := z.EncBinary()
					_ = yym2107
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep2091 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2108 := z.DecBinary()
	_ = yym2108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2109 := r.ReadMapStart()
			if yyl2109 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2109, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2109 := r.ReadArrayStart()
			if yyl2109 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2110Slc
	var yyhl2110 bool = l >= 0
	for yyj2110 := 0; ; yyj2110++ {
		if yyhl2110 {
			if yyj2110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2110Slc = r.DecodeBytes(yys2110Slc, true, true)
		yys2110 := string(yys2110Slc)
		switch yys2110 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2112 := &x.APIVersion
				yym2113 := z.DecBinary()
				_ = yym2113
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2112) {
				} else if !yym2113 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2112)
				} else {
					z.DecFallback(yyv2112, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2114 := &x.ListMeta
				yym2115 := z.DecBinary()
				_ = yym2115
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2114) {
				} else {
					z.DecFallback(yyv2114, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2116 := &x.Items
				yym2117 := z.DecBinary()
				_ = yym2117
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2116), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2110)
		} // end switch yys2110
	} // end for yyj2110
	if !yyhl2110 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2118 int
	var yyb2118 bool
	var yyhl2118 bool = l >= 0
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2120 := &x.APIVersion
		yym2121 := z.DecBinary()
		_ = yym2121
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2120) {
		} else if !yym2121 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2120)
		} else {
			z.DecFallback(yyv2120, false)
		}
	}
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2122 := &x.ListMeta
		yym2123 := z.DecBinary()
		_ = yym2123
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2122) {
		} else {
			z.DecFallback(yyv2122, false)
		}
	}
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2124 := &x.Items
		yym2125 := z.DecBinary()
		_ = yym2125
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2124), d)
		}
	}
	for {
		yyj2118++
		if yyhl2118 {
			yyb2118 = yyj2118 > l
		} else {
			yyb2118 = r.CheckBreak()
		}
		if yyb2118 {
			break
		}
		z.DecStructFieldNotFound(yyj2118-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2126 := z.EncBinary()
		_ = yym2126
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2127 := !z.EncBinary()
			yy2arr2127 := z.EncBasicHandle().StructToArray
			var yyq2127 [4]bool
			_, _, _ = yysep2127, yyq2127, yy2arr2127
			const yyr2127 bool = false
			yyq2127[0] = x.Kind != ""
			yyq2127[1] = true
			yyq2127[2] = true
			if yyr2127 || yy2arr2127 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2127 int = 1
				for _, b := range yyq2127 {
					if b {
						yynn2127++
					}
				}
				r.EncodeMapStart(yynn2127)
			}
			if yyr2127 || yy2arr2127 {
				if yyq2127[0] {
					yym2129 := z.EncBinary()
					_ = yym2129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2127[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2130 := z.EncBinary()
					_ = yym2130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				if yyq2127[1] {
					yy2132 := &x.APIVersion
					yym2133 := z.EncBinary()
					_ = yym2133
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2132) {
					} else if !yym2133 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2132)
					} else {
						z.EncFallback(yy2132)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2127[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2134 := &x.APIVersion
					yym2135 := z.EncBinary()
					_ = yym2135
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2134) {
					} else if !yym2135 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2134)
					} else {
						z.EncFallback(yy2134)
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				if yyq2127[2] {
					yy2137 := &x.ObjectMeta
					yy2137.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2127[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2138 := &x.ObjectMeta
					yy2138.CodecEncodeSelf(e)
				}
			}
			if yyr2127 || yy2arr2127 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2140 := z.EncBinary()
					_ = yym2140
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2141 := z.EncBinary()
					_ = yym2141
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2127 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2142 := z.DecBinary()
	_ = yym2142
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2143 := r.ReadMapStart()
			if yyl2143 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2143, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2143 := r.ReadArrayStart()
			if yyl2143 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2143, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2144Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2144Slc
	var yyhl2144 bool = l >= 0
	for yyj2144 := 0; ; yyj2144++ {
		if yyhl2144 {
			if yyj2144 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2144Slc = r.DecodeBytes(yys2144Slc, true, true)
		yys2144 := string(yys2144Slc)
		switch yys2144 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2146 := &x.APIVersion
				yym2147 := z.DecBinary()
				_ = yym2147
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2146) {
				} else if !yym2147 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2146)
				} else {
					z.DecFallback(yyv2146, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2148 := &x.ObjectMeta
				yyv2148.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2149 := &x.Subsets
				yym2150 := z.DecBinary()
				_ = yym2150
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2149), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2144)
		} // end switch yys2144
	} // end for yyj2144
	if !yyhl2144 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2151 int
	var yyb2151 bool
	var yyhl2151 bool = l >= 0
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2153 := &x.APIVersion
		yym2154 := z.DecBinary()
		_ = yym2154
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2153) {
		} else if !yym2154 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2153)
		} else {
			z.DecFallback(yyv2153, false)
		}
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2155 := &x.ObjectMeta
		yyv2155.CodecDecodeSelf(d)
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2156 := &x.Subsets
		yym2157 := z.DecBinary()
		_ = yym2157
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2156), d)
		}
	}
	for {
		yyj2151++
		if yyhl2151 {
			yyb2151 = yyj2151 > l
		} else {
			yyb2151 = r.CheckBreak()
		}
		if yyb2151 {
			break
		}
		z.DecStructFieldNotFound(yyj2151-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2158 := z.EncBinary()
		_ = yym2158
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2159 := !z.EncBinary()
			yy2arr2159 := z.EncBasicHandle().StructToArray
			var yyq2159 [3]bool
			_, _, _ = yysep2159, yyq2159, yy2arr2159
			const yyr2159 bool = false
			yyq2159[0] = len(x.Addresses) != 0
			yyq2159[1] = len(x.NotReadyAddresses) != 0
			yyq2159[2] = len(x.Ports) != 0
			if yyr2159 || yy2arr2159 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2159 int = 0
				for _, b := range yyq2159 {
					if b {
						yynn2159++
					}
				}
				r.EncodeMapStart(yynn2159)
			}
			if yyr2159 || yy2arr2159 {
				if yyq2159[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2161 := z.EncBinary()
						_ = yym2161
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2159[0] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2162 := z.EncBinary()
						_ = yym2162
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2159 || yy2arr2159 {
				if yyq2159[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2164 := z.EncBinary()
						_ = yym2164
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2159[1] {
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2165 := z.EncBinary()
						_ = yym2165
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2159 || yy2arr2159 {
				if yyq2159[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2167 := z.EncBinary()
						_ = yym2167
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2159[2] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2168 := z.EncBinary()
						_ = yym2168
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yysep2159 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2169 := z.DecBinary()
	_ = yym2169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2170 := r.ReadMapStart()
			if yyl2170 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2170, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2170 := r.ReadArrayStart()
			if yyl2170 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2171Slc
	var yyhl2171 bool = l >= 0
	for yyj2171 := 0; ; yyj2171++ {
		if yyhl2171 {
			if yyj2171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2171Slc = r.DecodeBytes(yys2171Slc, true, true)
		yys2171 := string(yys2171Slc)
		switch yys2171 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2172 := &x.Addresses
				yym2173 := z.DecBinary()
				_ = yym2173
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2172), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2174 := &x.NotReadyAddresses
				yym2175 := z.DecBinary()
				_ = yym2175
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2174), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2176 := &x.Ports
				yym2177 := z.DecBinary()
				_ = yym2177
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2176), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2171)
		} // end switch yys2171
	} // end for yyj2171
	if !yyhl2171 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2178 int
	var yyb2178 bool
	var yyhl2178 bool = l >= 0
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2179 := &x.Addresses
		yym2180 := z.DecBinary()
		_ = yym2180
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2179), d)
		}
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2181 := &x.NotReadyAddresses
		yym2182 := z.DecBinary()
		_ = yym2182
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2181), d)
		}
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2183 := &x.Ports
		yym2184 := z.DecBinary()
		_ = yym2184
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2183), d)
		}
	}
	for {
		yyj2178++
		if yyhl2178 {
			yyb2178 = yyj2178 > l
		} else {
			yyb2178 = r.CheckBreak()
		}
		if yyb2178 {
			break
		}
		z.DecStructFieldNotFound(yyj2178-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2185 := z.EncBinary()
		_ = yym2185
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2186 := !z.EncBinary()
			yy2arr2186 := z.EncBasicHandle().StructToArray
			var yyq2186 [2]bool
			_, _, _ = yysep2186, yyq2186, yy2arr2186
			const yyr2186 bool = false
			yyq2186[1] = x.TargetRef != nil
			if yyr2186 || yy2arr2186 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2186 int = 1
				for _, b := range yyq2186 {
					if b {
						yynn2186++
					}
				}
				r.EncodeMapStart(yynn2186)
			}
			if yyr2186 || yy2arr2186 {
				yym2188 := z.EncBinary()
				_ = yym2188
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				yym2189 := z.EncBinary()
				_ = yym2189
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2186 || yy2arr2186 {
				if yyq2186[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2186[1] {
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2186 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2191 := z.DecBinary()
	_ = yym2191
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2192 := r.ReadMapStart()
			if yyl2192 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2192, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2192 := r.ReadArrayStart()
			if yyl2192 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2192, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2193Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2193Slc
	var yyhl2193 bool = l >= 0
	for yyj2193 := 0; ; yyj2193++ {
		if yyhl2193 {
			if yyj2193 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2193Slc = r.DecodeBytes(yys2193Slc, true, true)
		yys2193 := string(yys2193Slc)
		switch yys2193 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2193)
		} // end switch yys2193
	} // end for yyj2193
	if !yyhl2193 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2196 int
	var yyb2196 bool
	var yyhl2196 bool = l >= 0
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2196++
		if yyhl2196 {
			yyb2196 = yyj2196 > l
		} else {
			yyb2196 = r.CheckBreak()
		}
		if yyb2196 {
			break
		}
		z.DecStructFieldNotFound(yyj2196-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2199 := z.EncBinary()
		_ = yym2199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2200 := !z.EncBinary()
			yy2arr2200 := z.EncBasicHandle().StructToArray
			var yyq2200 [3]bool
			_, _, _ = yysep2200, yyq2200, yy2arr2200
			const yyr2200 bool = false
			yyq2200[0] = x.Name != ""
			yyq2200[2] = x.Protocol != ""
			if yyr2200 || yy2arr2200 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2200 int = 1
				for _, b := range yyq2200 {
					if b {
						yynn2200++
					}
				}
				r.EncodeMapStart(yynn2200)
			}
			if yyr2200 || yy2arr2200 {
				if yyq2200[0] {
					yym2202 := z.EncBinary()
					_ = yym2202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2200[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2203 := z.EncBinary()
					_ = yym2203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2200 || yy2arr2200 {
				yym2205 := z.EncBinary()
				_ = yym2205
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym2206 := z.EncBinary()
				_ = yym2206
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2200 || yy2arr2200 {
				if yyq2200[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2200[2] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yysep2200 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2208 := z.DecBinary()
	_ = yym2208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2209 := r.ReadMapStart()
			if yyl2209 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2209, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2209 := r.ReadArrayStart()
			if yyl2209 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2210Slc
	var yyhl2210 bool = l >= 0
	for yyj2210 := 0; ; yyj2210++ {
		if yyhl2210 {
			if yyj2210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2210Slc = r.DecodeBytes(yys2210Slc, true, true)
		yys2210 := string(yys2210Slc)
		switch yys2210 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2210)
		} // end switch yys2210
	} // end for yyj2210
	if !yyhl2210 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2214 int
	var yyb2214 bool
	var yyhl2214 bool = l >= 0
	yyj2214++
	if yyhl2214 {
		yyb2214 = yyj2214 > l
	} else {
		yyb2214 = r.CheckBreak()
	}
	if yyb2214 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2214++
	if yyhl2214 {
		yyb2214 = yyj2214 > l
	} else {
		yyb2214 = r.CheckBreak()
	}
	if yyb2214 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2214++
	if yyhl2214 {
		yyb2214 = yyj2214 > l
	} else {
		yyb2214 = r.CheckBreak()
	}
	if yyb2214 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2214++
		if yyhl2214 {
			yyb2214 = yyj2214 > l
		} else {
			yyb2214 = r.CheckBreak()
		}
		if yyb2214 {
			break
		}
		z.DecStructFieldNotFound(yyj2214-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2218 := z.EncBinary()
		_ = yym2218
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2219 := !z.EncBinary()
			yy2arr2219 := z.EncBasicHandle().StructToArray
			var yyq2219 [4]bool
			_, _, _ = yysep2219, yyq2219, yy2arr2219
			const yyr2219 bool = false
			yyq2219[0] = x.Kind != ""
			yyq2219[1] = true
			yyq2219[2] = true
			if yyr2219 || yy2arr2219 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2219 int = 1
				for _, b := range yyq2219 {
					if b {
						yynn2219++
					}
				}
				r.EncodeMapStart(yynn2219)
			}
			if yyr2219 || yy2arr2219 {
				if yyq2219[0] {
					yym2221 := z.EncBinary()
					_ = yym2221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2219[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2222 := z.EncBinary()
					_ = yym2222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2219 || yy2arr2219 {
				if yyq2219[1] {
					yy2224 := &x.APIVersion
					yym2225 := z.EncBinary()
					_ = yym2225
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2224) {
					} else if !yym2225 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2224)
					} else {
						z.EncFallback(yy2224)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2219[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2226 := &x.APIVersion
					yym2227 := z.EncBinary()
					_ = yym2227
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2226) {
					} else if !yym2227 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2226)
					} else {
						z.EncFallback(yy2226)
					}
				}
			}
			if yyr2219 || yy2arr2219 {
				if yyq2219[2] {
					yy2229 := &x.ListMeta
					yym2230 := z.EncBinary()
					_ = yym2230
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2229) {
					} else {
						z.EncFallback(yy2229)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2219[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2231 := &x.ListMeta
					yym2232 := z.EncBinary()
					_ = yym2232
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2231) {
					} else {
						z.EncFallback(yy2231)
					}
				}
			}
			if yyr2219 || yy2arr2219 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2234 := z.EncBinary()
					_ = yym2234
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2235 := z.EncBinary()
					_ = yym2235
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2219 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2236 := z.DecBinary()
	_ = yym2236
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2237 := r.ReadMapStart()
			if yyl2237 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2237, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2237 := r.ReadArrayStart()
			if yyl2237 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2237, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2238Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2238Slc
	var yyhl2238 bool = l >= 0
	for yyj2238 := 0; ; yyj2238++ {
		if yyhl2238 {
			if yyj2238 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2238Slc = r.DecodeBytes(yys2238Slc, true, true)
		yys2238 := string(yys2238Slc)
		switch yys2238 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2240 := &x.APIVersion
				yym2241 := z.DecBinary()
				_ = yym2241
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2240) {
				} else if !yym2241 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2240)
				} else {
					z.DecFallback(yyv2240, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2242 := &x.ListMeta
				yym2243 := z.DecBinary()
				_ = yym2243
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2242) {
				} else {
					z.DecFallback(yyv2242, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2244 := &x.Items
				yym2245 := z.DecBinary()
				_ = yym2245
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2244), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2238)
		} // end switch yys2238
	} // end for yyj2238
	if !yyhl2238 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2246 int
	var yyb2246 bool
	var yyhl2246 bool = l >= 0
	yyj2246++
	if yyhl2246 {
		yyb2246 = yyj2246 > l
	} else {
		yyb2246 = r.CheckBreak()
	}
	if yyb2246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2246++
	if yyhl2246 {
		yyb2246 = yyj2246 > l
	} else {
		yyb2246 = r.CheckBreak()
	}
	if yyb2246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2248 := &x.APIVersion
		yym2249 := z.DecBinary()
		_ = yym2249
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2248) {
		} else if !yym2249 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2248)
		} else {
			z.DecFallback(yyv2248, false)
		}
	}
	yyj2246++
	if yyhl2246 {
		yyb2246 = yyj2246 > l
	} else {
		yyb2246 = r.CheckBreak()
	}
	if yyb2246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2250 := &x.ListMeta
		yym2251 := z.DecBinary()
		_ = yym2251
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2250) {
		} else {
			z.DecFallback(yyv2250, false)
		}
	}
	yyj2246++
	if yyhl2246 {
		yyb2246 = yyj2246 > l
	} else {
		yyb2246 = r.CheckBreak()
	}
	if yyb2246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2252 := &x.Items
		yym2253 := z.DecBinary()
		_ = yym2253
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2252), d)
		}
	}
	for {
		yyj2246++
		if yyhl2246 {
			yyb2246 = yyj2246 > l
		} else {
			yyb2246 = r.CheckBreak()
		}
		if yyb2246 {
			break
		}
		z.DecStructFieldNotFound(yyj2246-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2254 := z.EncBinary()
		_ = yym2254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2255 := !z.EncBinary()
			yy2arr2255 := z.EncBasicHandle().StructToArray
			var yyq2255 [4]bool
			_, _, _ = yysep2255, yyq2255, yy2arr2255
			const yyr2255 bool = false
			yyq2255[0] = x.PodCIDR != ""
			yyq2255[1] = x.ExternalID != ""
			yyq2255[2] = x.ProviderID != ""
			yyq2255[3] = x.Unschedulable != false
			if yyr2255 || yy2arr2255 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2255 int = 0
				for _, b := range yyq2255 {
					if b {
						yynn2255++
					}
				}
				r.EncodeMapStart(yynn2255)
			}
			if yyr2255 || yy2arr2255 {
				if yyq2255[0] {
					yym2257 := z.EncBinary()
					_ = yym2257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2255[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2258 := z.EncBinary()
					_ = yym2258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2255 || yy2arr2255 {
				if yyq2255[1] {
					yym2260 := z.EncBinary()
					_ = yym2260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2255[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2261 := z.EncBinary()
					_ = yym2261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2255 || yy2arr2255 {
				if yyq2255[2] {
					yym2263 := z.EncBinary()
					_ = yym2263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2255[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2264 := z.EncBinary()
					_ = yym2264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2255 || yy2arr2255 {
				if yyq2255[3] {
					yym2266 := z.EncBinary()
					_ = yym2266
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2255[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2267 := z.EncBinary()
					_ = yym2267
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2255 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2268 := z.DecBinary()
	_ = yym2268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2269 := r.ReadMapStart()
			if yyl2269 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2269, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2269 := r.ReadArrayStart()
			if yyl2269 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2270Slc
	var yyhl2270 bool = l >= 0
	for yyj2270 := 0; ; yyj2270++ {
		if yyhl2270 {
			if yyj2270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2270Slc = r.DecodeBytes(yys2270Slc, true, true)
		yys2270 := string(yys2270Slc)
		switch yys2270 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2270)
		} // end switch yys2270
	} // end for yyj2270
	if !yyhl2270 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2275 int
	var yyb2275 bool
	var yyhl2275 bool = l >= 0
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2275++
		if yyhl2275 {
			yyb2275 = yyj2275 > l
		} else {
			yyb2275 = r.CheckBreak()
		}
		if yyb2275 {
			break
		}
		z.DecStructFieldNotFound(yyj2275-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2280 := z.EncBinary()
		_ = yym2280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2281 := !z.EncBinary()
			yy2arr2281 := z.EncBasicHandle().StructToArray
			var yyq2281 [1]bool
			_, _, _ = yysep2281, yyq2281, yy2arr2281
			const yyr2281 bool = false
			if yyr2281 || yy2arr2281 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2281 int = 1
				for _, b := range yyq2281 {
					if b {
						yynn2281++
					}
				}
				r.EncodeMapStart(yynn2281)
			}
			if yyr2281 || yy2arr2281 {
				yym2283 := z.EncBinary()
				_ = yym2283
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2284 := z.EncBinary()
				_ = yym2284
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2281 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2285 := z.DecBinary()
	_ = yym2285
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2286 := r.ReadMapStart()
			if yyl2286 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2286, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2286 := r.ReadArrayStart()
			if yyl2286 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2286, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2287Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2287Slc
	var yyhl2287 bool = l >= 0
	for yyj2287 := 0; ; yyj2287++ {
		if yyhl2287 {
			if yyj2287 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2287Slc = r.DecodeBytes(yys2287Slc, true, true)
		yys2287 := string(yys2287Slc)
		switch yys2287 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2287)
		} // end switch yys2287
	} // end for yyj2287
	if !yyhl2287 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2289 int
	var yyb2289 bool
	var yyhl2289 bool = l >= 0
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2289++
		if yyhl2289 {
			yyb2289 = yyj2289 > l
		} else {
			yyb2289 = r.CheckBreak()
		}
		if yyb2289 {
			break
		}
		z.DecStructFieldNotFound(yyj2289-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2291 := z.EncBinary()
		_ = yym2291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2292 := !z.EncBinary()
			yy2arr2292 := z.EncBasicHandle().StructToArray
			var yyq2292 [1]bool
			_, _, _ = yysep2292, yyq2292, yy2arr2292
			const yyr2292 bool = false
			yyq2292[0] = true
			if yyr2292 || yy2arr2292 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2292 int = 0
				for _, b := range yyq2292 {
					if b {
						yynn2292++
					}
				}
				r.EncodeMapStart(yynn2292)
			}
			if yyr2292 || yy2arr2292 {
				if yyq2292[0] {
					yy2294 := &x.KubeletEndpoint
					yy2294.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2292[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2295 := &x.KubeletEndpoint
					yy2295.CodecEncodeSelf(e)
				}
			}
			if yysep2292 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2296 := z.DecBinary()
	_ = yym2296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2297 := r.ReadMapStart()
			if yyl2297 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2297, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2297 := r.ReadArrayStart()
			if yyl2297 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2297, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2298Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2298Slc
	var yyhl2298 bool = l >= 0
	for yyj2298 := 0; ; yyj2298++ {
		if yyhl2298 {
			if yyj2298 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2298Slc = r.DecodeBytes(yys2298Slc, true, true)
		yys2298 := string(yys2298Slc)
		switch yys2298 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2299 := &x.KubeletEndpoint
				yyv2299.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2298)
		} // end switch yys2298
	} // end for yyj2298
	if !yyhl2298 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2300 int
	var yyb2300 bool
	var yyhl2300 bool = l >= 0
	yyj2300++
	if yyhl2300 {
		yyb2300 = yyj2300 > l
	} else {
		yyb2300 = r.CheckBreak()
	}
	if yyb2300 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2301 := &x.KubeletEndpoint
		yyv2301.CodecDecodeSelf(d)
	}
	for {
		yyj2300++
		if yyhl2300 {
			yyb2300 = yyj2300 > l
		} else {
			yyb2300 = r.CheckBreak()
		}
		if yyb2300 {
			break
		}
		z.DecStructFieldNotFound(yyj2300-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2302 := z.EncBinary()
		_ = yym2302
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2303 := !z.EncBinary()
			yy2arr2303 := z.EncBasicHandle().StructToArray
			var yyq2303 [8]bool
			_, _, _ = yysep2303, yyq2303, yy2arr2303
			const yyr2303 bool = false
			if yyr2303 || yy2arr2303 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2303 int = 8
				for _, b := range yyq2303 {
					if b {
						yynn2303++
					}
				}
				r.EncodeMapStart(yynn2303)
			}
			if yyr2303 || yy2arr2303 {
				yym2305 := z.EncBinary()
				_ = yym2305
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2306 := z.EncBinary()
				_ = yym2306
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2303 || yy2arr2303 {
				yym2308 := z.EncBinary()
				_ = yym2308
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2309 := z.EncBinary()
				_ = yym2309
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2303 || yy2arr2303 {
				yym2311 := z.EncBinary()
				_ = yym2311
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2312 := z.EncBinary()
				_ = yym2312
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2303 || yy2arr2303 {
				yym2314 := z.EncBinary()
				_ = yym2314
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2315 := z.EncBinary()
				_ = yym2315
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2303 || yy2arr2303 {
				yym2317 := z.EncBinary()
				_ = yym2317
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2318 := z.EncBinary()
				_ = yym2318
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2303 || yy2arr2303 {
				yym2320 := z.EncBinary()
				_ = yym2320
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2321 := z.EncBinary()
				_ = yym2321
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2303 || yy2arr2303 {
				yym2323 := z.EncBinary()
				_ = yym2323
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2324 := z.EncBinary()
				_ = yym2324
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2303 || yy2arr2303 {
				yym2326 := z.EncBinary()
				_ = yym2326
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2327 := z.EncBinary()
				_ = yym2327
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2303 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2328 := z.DecBinary()
	_ = yym2328
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2329 := r.ReadMapStart()
			if yyl2329 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2329, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2329 := r.ReadArrayStart()
			if yyl2329 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2329, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2330Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2330Slc
	var yyhl2330 bool = l >= 0
	for yyj2330 := 0; ; yyj2330++ {
		if yyhl2330 {
			if yyj2330 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2330Slc = r.DecodeBytes(yys2330Slc, true, true)
		yys2330 := string(yys2330Slc)
		switch yys2330 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2330)
		} // end switch yys2330
	} // end for yyj2330
	if !yyhl2330 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2339 int
	var yyb2339 bool
	var yyhl2339 bool = l >= 0
	yyj2339++
	if yyhl2339 {
		yyb2339 = yyj2339 > l
	} else {
		yyb2339 = r.CheckBreak()
	}
	if yyb2339 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2339++
	if yyhl2339 {
		yyb2339 = yyj2339 > l
	} else {
		yyb2339 = r.CheckBreak()
	}
	if yyb2339 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2339++
	if yyhl2339 {
		yyb2339 = yyj2339 > l
	} else {
		yyb2339 = r.CheckBreak()
	}
	if yyb2339 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2339++
	if yyhl2339 {
		yyb2339 = yyj2339 > l
	} else {
		yyb2339 = r.CheckBreak()
	}
	if yyb2339 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2339++
	if yyhl2339 {
		yyb2339 = yyj2339 > l
	} else {
		yyb2339 = r.CheckBreak()
	}
	if yyb2339 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2339++
	if yyhl2339 {
		yyb2339 = yyj2339 > l
	} else {
		yyb2339 = r.CheckBreak()
	}
	if yyb2339 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2339++
	if yyhl2339 {
		yyb2339 = yyj2339 > l
	} else {
		yyb2339 = r.CheckBreak()
	}
	if yyb2339 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2339++
	if yyhl2339 {
		yyb2339 = yyj2339 > l
	} else {
		yyb2339 = r.CheckBreak()
	}
	if yyb2339 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2339++
		if yyhl2339 {
			yyb2339 = yyj2339 > l
		} else {
			yyb2339 = r.CheckBreak()
		}
		if yyb2339 {
			break
		}
		z.DecStructFieldNotFound(yyj2339-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2348 := z.EncBinary()
		_ = yym2348
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2349 := !z.EncBinary()
			yy2arr2349 := z.EncBasicHandle().StructToArray
			var yyq2349 [6]bool
			_, _, _ = yysep2349, yyq2349, yy2arr2349
			const yyr2349 bool = false
			yyq2349[0] = len(x.Capacity) != 0
			yyq2349[1] = x.Phase != ""
			yyq2349[2] = len(x.Conditions) != 0
			yyq2349[3] = len(x.Addresses) != 0
			yyq2349[4] = true
			yyq2349[5] = true
			if yyr2349 || yy2arr2349 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2349 int = 0
				for _, b := range yyq2349 {
					if b {
						yynn2349++
					}
				}
				r.EncodeMapStart(yynn2349)
			}
			if yyr2349 || yy2arr2349 {
				if yyq2349[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2349[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				if yyq2349[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2349[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2349 || yy2arr2349 {
				if yyq2349[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2353 := z.EncBinary()
						_ = yym2353
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2349[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2354 := z.EncBinary()
						_ = yym2354
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				if yyq2349[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2356 := z.EncBinary()
						_ = yym2356
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2349[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2357 := z.EncBinary()
						_ = yym2357
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				if yyq2349[4] {
					yy2359 := &x.DaemonEndpoints
					yy2359.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2349[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2360 := &x.DaemonEndpoints
					yy2360.CodecEncodeSelf(e)
				}
			}
			if yyr2349 || yy2arr2349 {
				if yyq2349[5] {
					yy2362 := &x.NodeInfo
					yy2362.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2349[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2363 := &x.NodeInfo
					yy2363.CodecEncodeSelf(e)
				}
			}
			if yysep2349 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2364 := z.DecBinary()
	_ = yym2364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2365 := r.ReadMapStart()
			if yyl2365 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2365, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2365 := r.ReadArrayStart()
			if yyl2365 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2365, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2366Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2366Slc
	var yyhl2366 bool = l >= 0
	for yyj2366 := 0; ; yyj2366++ {
		if yyhl2366 {
			if yyj2366 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2366Slc = r.DecodeBytes(yys2366Slc, true, true)
		yys2366 := string(yys2366Slc)
		switch yys2366 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2367 := &x.Capacity
				yyv2367.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2369 := &x.Conditions
				yym2370 := z.DecBinary()
				_ = yym2370
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2369), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2371 := &x.Addresses
				yym2372 := z.DecBinary()
				_ = yym2372
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2371), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2373 := &x.DaemonEndpoints
				yyv2373.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2374 := &x.NodeInfo
				yyv2374.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2366)
		} // end switch yys2366
	} // end for yyj2366
	if !yyhl2366 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2375 int
	var yyb2375 bool
	var yyhl2375 bool = l >= 0
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2376 := &x.Capacity
		yyv2376.CodecDecodeSelf(d)
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2378 := &x.Conditions
		yym2379 := z.DecBinary()
		_ = yym2379
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2378), d)
		}
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2380 := &x.Addresses
		yym2381 := z.DecBinary()
		_ = yym2381
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2380), d)
		}
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2382 := &x.DaemonEndpoints
		yyv2382.CodecDecodeSelf(d)
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2383 := &x.NodeInfo
		yyv2383.CodecDecodeSelf(d)
	}
	for {
		yyj2375++
		if yyhl2375 {
			yyb2375 = yyj2375 > l
		} else {
			yyb2375 = r.CheckBreak()
		}
		if yyb2375 {
			break
		}
		z.DecStructFieldNotFound(yyj2375-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2384 := z.EncBinary()
	_ = yym2384
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2385 := z.DecBinary()
	_ = yym2385
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2386 := z.EncBinary()
	_ = yym2386
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2387 := z.DecBinary()
	_ = yym2387
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2388 := z.EncBinary()
		_ = yym2388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2389 := !z.EncBinary()
			yy2arr2389 := z.EncBasicHandle().StructToArray
			var yyq2389 [6]bool
			_, _, _ = yysep2389, yyq2389, yy2arr2389
			const yyr2389 bool = false
			yyq2389[2] = true
			yyq2389[3] = true
			yyq2389[4] = x.Reason != ""
			yyq2389[5] = x.Message != ""
			if yyr2389 || yy2arr2389 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2389 int = 2
				for _, b := range yyq2389 {
					if b {
						yynn2389++
					}
				}
				r.EncodeMapStart(yynn2389)
			}
			if yyr2389 || yy2arr2389 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2389 || yy2arr2389 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2389 || yy2arr2389 {
				if yyq2389[2] {
					yy2393 := &x.LastHeartbeatTime
					yym2394 := z.EncBinary()
					_ = yym2394
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2393) {
					} else if yym2394 {
						z.EncBinaryMarshal(yy2393)
					} else if !yym2394 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2393)
					} else {
						z.EncFallback(yy2393)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2389[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2395 := &x.LastHeartbeatTime
					yym2396 := z.EncBinary()
					_ = yym2396
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2395) {
					} else if yym2396 {
						z.EncBinaryMarshal(yy2395)
					} else if !yym2396 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2395)
					} else {
						z.EncFallback(yy2395)
					}
				}
			}
			if yyr2389 || yy2arr2389 {
				if yyq2389[3] {
					yy2398 := &x.LastTransitionTime
					yym2399 := z.EncBinary()
					_ = yym2399
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2398) {
					} else if yym2399 {
						z.EncBinaryMarshal(yy2398)
					} else if !yym2399 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2398)
					} else {
						z.EncFallback(yy2398)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2389[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2400 := &x.LastTransitionTime
					yym2401 := z.EncBinary()
					_ = yym2401
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2400) {
					} else if yym2401 {
						z.EncBinaryMarshal(yy2400)
					} else if !yym2401 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2400)
					} else {
						z.EncFallback(yy2400)
					}
				}
			}
			if yyr2389 || yy2arr2389 {
				if yyq2389[4] {
					yym2403 := z.EncBinary()
					_ = yym2403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2389[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2404 := z.EncBinary()
					_ = yym2404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2389 || yy2arr2389 {
				if yyq2389[5] {
					yym2406 := z.EncBinary()
					_ = yym2406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2389[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2407 := z.EncBinary()
					_ = yym2407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2389 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2408 := z.DecBinary()
	_ = yym2408
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2409 := r.ReadMapStart()
			if yyl2409 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2409, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2409 := r.ReadArrayStart()
			if yyl2409 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2409, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2410Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2410Slc
	var yyhl2410 bool = l >= 0
	for yyj2410 := 0; ; yyj2410++ {
		if yyhl2410 {
			if yyj2410 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2410Slc = r.DecodeBytes(yys2410Slc, true, true)
		yys2410 := string(yys2410Slc)
		switch yys2410 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2413 := &x.LastHeartbeatTime
				yym2414 := z.DecBinary()
				_ = yym2414
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2413) {
				} else if yym2414 {
					z.DecBinaryUnmarshal(yyv2413)
				} else if !yym2414 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2413)
				} else {
					z.DecFallback(yyv2413, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2415 := &x.LastTransitionTime
				yym2416 := z.DecBinary()
				_ = yym2416
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2415) {
				} else if yym2416 {
					z.DecBinaryUnmarshal(yyv2415)
				} else if !yym2416 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2415)
				} else {
					z.DecFallback(yyv2415, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2410)
		} // end switch yys2410
	} // end for yyj2410
	if !yyhl2410 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2419 int
	var yyb2419 bool
	var yyhl2419 bool = l >= 0
	yyj2419++
	if yyhl2419 {
		yyb2419 = yyj2419 > l
	} else {
		yyb2419 = r.CheckBreak()
	}
	if yyb2419 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2419++
	if yyhl2419 {
		yyb2419 = yyj2419 > l
	} else {
		yyb2419 = r.CheckBreak()
	}
	if yyb2419 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2419++
	if yyhl2419 {
		yyb2419 = yyj2419 > l
	} else {
		yyb2419 = r.CheckBreak()
	}
	if yyb2419 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2422 := &x.LastHeartbeatTime
		yym2423 := z.DecBinary()
		_ = yym2423
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2422) {
		} else if yym2423 {
			z.DecBinaryUnmarshal(yyv2422)
		} else if !yym2423 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2422)
		} else {
			z.DecFallback(yyv2422, false)
		}
	}
	yyj2419++
	if yyhl2419 {
		yyb2419 = yyj2419 > l
	} else {
		yyb2419 = r.CheckBreak()
	}
	if yyb2419 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2424 := &x.LastTransitionTime
		yym2425 := z.DecBinary()
		_ = yym2425
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2424) {
		} else if yym2425 {
			z.DecBinaryUnmarshal(yyv2424)
		} else if !yym2425 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2424)
		} else {
			z.DecFallback(yyv2424, false)
		}
	}
	yyj2419++
	if yyhl2419 {
		yyb2419 = yyj2419 > l
	} else {
		yyb2419 = r.CheckBreak()
	}
	if yyb2419 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2419++
	if yyhl2419 {
		yyb2419 = yyj2419 > l
	} else {
		yyb2419 = r.CheckBreak()
	}
	if yyb2419 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2419++
		if yyhl2419 {
			yyb2419 = yyj2419 > l
		} else {
			yyb2419 = r.CheckBreak()
		}
		if yyb2419 {
			break
		}
		z.DecStructFieldNotFound(yyj2419-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2428 := z.EncBinary()
	_ = yym2428
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2429 := z.DecBinary()
	_ = yym2429
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2430 := z.EncBinary()
		_ = yym2430
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2431 := !z.EncBinary()
			yy2arr2431 := z.EncBasicHandle().StructToArray
			var yyq2431 [2]bool
			_, _, _ = yysep2431, yyq2431, yy2arr2431
			const yyr2431 bool = false
			if yyr2431 || yy2arr2431 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2431 int = 2
				for _, b := range yyq2431 {
					if b {
						yynn2431++
					}
				}
				r.EncodeMapStart(yynn2431)
			}
			if yyr2431 || yy2arr2431 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2431 || yy2arr2431 {
				yym2434 := z.EncBinary()
				_ = yym2434
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2435 := z.EncBinary()
				_ = yym2435
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2431 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2436 := z.DecBinary()
	_ = yym2436
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2437 := r.ReadMapStart()
			if yyl2437 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2437, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2437 := r.ReadArrayStart()
			if yyl2437 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2437, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2438Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2438Slc
	var yyhl2438 bool = l >= 0
	for yyj2438 := 0; ; yyj2438++ {
		if yyhl2438 {
			if yyj2438 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2438Slc = r.DecodeBytes(yys2438Slc, true, true)
		yys2438 := string(yys2438Slc)
		switch yys2438 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2438)
		} // end switch yys2438
	} // end for yyj2438
	if !yyhl2438 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2441 int
	var yyb2441 bool
	var yyhl2441 bool = l >= 0
	yyj2441++
	if yyhl2441 {
		yyb2441 = yyj2441 > l
	} else {
		yyb2441 = r.CheckBreak()
	}
	if yyb2441 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2441++
	if yyhl2441 {
		yyb2441 = yyj2441 > l
	} else {
		yyb2441 = r.CheckBreak()
	}
	if yyb2441 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2441++
		if yyhl2441 {
			yyb2441 = yyj2441 > l
		} else {
			yyb2441 = r.CheckBreak()
		}
		if yyb2441 {
			break
		}
		z.DecStructFieldNotFound(yyj2441-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2444 := z.EncBinary()
	_ = yym2444
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2445 := z.DecBinary()
	_ = yym2445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2446 := z.EncBinary()
		_ = yym2446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2447 := z.DecBinary()
	_ = yym2447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2448 := z.EncBinary()
		_ = yym2448
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2449 := !z.EncBinary()
			yy2arr2449 := z.EncBasicHandle().StructToArray
			var yyq2449 [5]bool
			_, _, _ = yysep2449, yyq2449, yy2arr2449
			const yyr2449 bool = false
			yyq2449[0] = x.Kind != ""
			yyq2449[1] = true
			yyq2449[2] = true
			yyq2449[3] = true
			yyq2449[4] = true
			if yyr2449 || yy2arr2449 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2449 int = 0
				for _, b := range yyq2449 {
					if b {
						yynn2449++
					}
				}
				r.EncodeMapStart(yynn2449)
			}
			if yyr2449 || yy2arr2449 {
				if yyq2449[0] {
					yym2451 := z.EncBinary()
					_ = yym2451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2449[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2452 := z.EncBinary()
					_ = yym2452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				if yyq2449[1] {
					yy2454 := &x.APIVersion
					yym2455 := z.EncBinary()
					_ = yym2455
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2454) {
					} else if !yym2455 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2454)
					} else {
						z.EncFallback(yy2454)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2449[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2456 := &x.APIVersion
					yym2457 := z.EncBinary()
					_ = yym2457
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2456) {
					} else if !yym2457 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2456)
					} else {
						z.EncFallback(yy2456)
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				if yyq2449[2] {
					yy2459 := &x.ObjectMeta
					yy2459.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2449[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2460 := &x.ObjectMeta
					yy2460.CodecEncodeSelf(e)
				}
			}
			if yyr2449 || yy2arr2449 {
				if yyq2449[3] {
					yy2462 := &x.Spec
					yy2462.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2449[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2463 := &x.Spec
					yy2463.CodecEncodeSelf(e)
				}
			}
			if yyr2449 || yy2arr2449 {
				if yyq2449[4] {
					yy2465 := &x.Status
					yy2465.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2449[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2466 := &x.Status
					yy2466.CodecEncodeSelf(e)
				}
			}
			if yysep2449 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2467 := z.DecBinary()
	_ = yym2467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2468 := r.ReadMapStart()
			if yyl2468 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2468, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2468 := r.ReadArrayStart()
			if yyl2468 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2468, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2469Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2469Slc
	var yyhl2469 bool = l >= 0
	for yyj2469 := 0; ; yyj2469++ {
		if yyhl2469 {
			if yyj2469 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2469Slc = r.DecodeBytes(yys2469Slc, true, true)
		yys2469 := string(yys2469Slc)
		switch yys2469 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2471 := &x.APIVersion
				yym2472 := z.DecBinary()
				_ = yym2472
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2471) {
				} else if !yym2472 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2471)
				} else {
					z.DecFallback(yyv2471, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2473 := &x.ObjectMeta
				yyv2473.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2474 := &x.Spec
				yyv2474.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2475 := &x.Status
				yyv2475.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2469)
		} // end switch yys2469
	} // end for yyj2469
	if !yyhl2469 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2476 int
	var yyb2476 bool
	var yyhl2476 bool = l >= 0
	yyj2476++
	if yyhl2476 {
		yyb2476 = yyj2476 > l
	} else {
		yyb2476 = r.CheckBreak()
	}
	if yyb2476 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2476++
	if yyhl2476 {
		yyb2476 = yyj2476 > l
	} else {
		yyb2476 = r.CheckBreak()
	}
	if yyb2476 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2478 := &x.APIVersion
		yym2479 := z.DecBinary()
		_ = yym2479
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2478) {
		} else if !yym2479 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2478)
		} else {
			z.DecFallback(yyv2478, false)
		}
	}
	yyj2476++
	if yyhl2476 {
		yyb2476 = yyj2476 > l
	} else {
		yyb2476 = r.CheckBreak()
	}
	if yyb2476 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2480 := &x.ObjectMeta
		yyv2480.CodecDecodeSelf(d)
	}
	yyj2476++
	if yyhl2476 {
		yyb2476 = yyj2476 > l
	} else {
		yyb2476 = r.CheckBreak()
	}
	if yyb2476 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2481 := &x.Spec
		yyv2481.CodecDecodeSelf(d)
	}
	yyj2476++
	if yyhl2476 {
		yyb2476 = yyj2476 > l
	} else {
		yyb2476 = r.CheckBreak()
	}
	if yyb2476 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2482 := &x.Status
		yyv2482.CodecDecodeSelf(d)
	}
	for {
		yyj2476++
		if yyhl2476 {
			yyb2476 = yyj2476 > l
		} else {
			yyb2476 = r.CheckBreak()
		}
		if yyb2476 {
			break
		}
		z.DecStructFieldNotFound(yyj2476-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2483 := z.EncBinary()
		_ = yym2483
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2484 := !z.EncBinary()
			yy2arr2484 := z.EncBasicHandle().StructToArray
			var yyq2484 [4]bool
			_, _, _ = yysep2484, yyq2484, yy2arr2484
			const yyr2484 bool = false
			yyq2484[0] = x.Kind != ""
			yyq2484[1] = true
			yyq2484[2] = true
			if yyr2484 || yy2arr2484 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2484 int = 1
				for _, b := range yyq2484 {
					if b {
						yynn2484++
					}
				}
				r.EncodeMapStart(yynn2484)
			}
			if yyr2484 || yy2arr2484 {
				if yyq2484[0] {
					yym2486 := z.EncBinary()
					_ = yym2486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2484[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2487 := z.EncBinary()
					_ = yym2487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2484 || yy2arr2484 {
				if yyq2484[1] {
					yy2489 := &x.APIVersion
					yym2490 := z.EncBinary()
					_ = yym2490
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2489) {
					} else if !yym2490 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2489)
					} else {
						z.EncFallback(yy2489)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2484[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2491 := &x.APIVersion
					yym2492 := z.EncBinary()
					_ = yym2492
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2491) {
					} else if !yym2492 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2491)
					} else {
						z.EncFallback(yy2491)
					}
				}
			}
			if yyr2484 || yy2arr2484 {
				if yyq2484[2] {
					yy2494 := &x.ListMeta
					yym2495 := z.EncBinary()
					_ = yym2495
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2494) {
					} else {
						z.EncFallback(yy2494)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2484[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2496 := &x.ListMeta
					yym2497 := z.EncBinary()
					_ = yym2497
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2496) {
					} else {
						z.EncFallback(yy2496)
					}
				}
			}
			if yyr2484 || yy2arr2484 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2499 := z.EncBinary()
					_ = yym2499
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2500 := z.EncBinary()
					_ = yym2500
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2484 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2501 := z.DecBinary()
	_ = yym2501
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2502 := r.ReadMapStart()
			if yyl2502 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2502, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2502 := r.ReadArrayStart()
			if yyl2502 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2502, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2503Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2503Slc
	var yyhl2503 bool = l >= 0
	for yyj2503 := 0; ; yyj2503++ {
		if yyhl2503 {
			if yyj2503 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2503Slc = r.DecodeBytes(yys2503Slc, true, true)
		yys2503 := string(yys2503Slc)
		switch yys2503 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2505 := &x.APIVersion
				yym2506 := z.DecBinary()
				_ = yym2506
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2505) {
				} else if !yym2506 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2505)
				} else {
					z.DecFallback(yyv2505, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2507 := &x.ListMeta
				yym2508 := z.DecBinary()
				_ = yym2508
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2507) {
				} else {
					z.DecFallback(yyv2507, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2509 := &x.Items
				yym2510 := z.DecBinary()
				_ = yym2510
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2509), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2503)
		} // end switch yys2503
	} // end for yyj2503
	if !yyhl2503 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2511 int
	var yyb2511 bool
	var yyhl2511 bool = l >= 0
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2513 := &x.APIVersion
		yym2514 := z.DecBinary()
		_ = yym2514
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2513) {
		} else if !yym2514 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2513)
		} else {
			z.DecFallback(yyv2513, false)
		}
	}
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2515 := &x.ListMeta
		yym2516 := z.DecBinary()
		_ = yym2516
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2515) {
		} else {
			z.DecFallback(yyv2515, false)
		}
	}
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2517 := &x.Items
		yym2518 := z.DecBinary()
		_ = yym2518
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2517), d)
		}
	}
	for {
		yyj2511++
		if yyhl2511 {
			yyb2511 = yyj2511 > l
		} else {
			yyb2511 = r.CheckBreak()
		}
		if yyb2511 {
			break
		}
		z.DecStructFieldNotFound(yyj2511-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2519 := z.EncBinary()
	_ = yym2519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2520 := z.DecBinary()
	_ = yym2520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2521 := z.EncBinary()
		_ = yym2521
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2522 := !z.EncBinary()
			yy2arr2522 := z.EncBasicHandle().StructToArray
			var yyq2522 [1]bool
			_, _, _ = yysep2522, yyq2522, yy2arr2522
			const yyr2522 bool = false
			yyq2522[0] = len(x.Finalizers) != 0
			if yyr2522 || yy2arr2522 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2522 int = 0
				for _, b := range yyq2522 {
					if b {
						yynn2522++
					}
				}
				r.EncodeMapStart(yynn2522)
			}
			if yyr2522 || yy2arr2522 {
				if yyq2522[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2524 := z.EncBinary()
						_ = yym2524
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2522[0] {
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2525 := z.EncBinary()
						_ = yym2525
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yysep2522 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2526 := z.DecBinary()
	_ = yym2526
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2527 := r.ReadMapStart()
			if yyl2527 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2527, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2527 := r.ReadArrayStart()
			if yyl2527 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2527, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2528Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2528Slc
	var yyhl2528 bool = l >= 0
	for yyj2528 := 0; ; yyj2528++ {
		if yyhl2528 {
			if yyj2528 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2528Slc = r.DecodeBytes(yys2528Slc, true, true)
		yys2528 := string(yys2528Slc)
		switch yys2528 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2529 := &x.Finalizers
				yym2530 := z.DecBinary()
				_ = yym2530
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2529), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2528)
		} // end switch yys2528
	} // end for yyj2528
	if !yyhl2528 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2531 int
	var yyb2531 bool
	var yyhl2531 bool = l >= 0
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2532 := &x.Finalizers
		yym2533 := z.DecBinary()
		_ = yym2533
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2532), d)
		}
	}
	for {
		yyj2531++
		if yyhl2531 {
			yyb2531 = yyj2531 > l
		} else {
			yyb2531 = r.CheckBreak()
		}
		if yyb2531 {
			break
		}
		z.DecStructFieldNotFound(yyj2531-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2534 := z.EncBinary()
		_ = yym2534
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2535 := !z.EncBinary()
			yy2arr2535 := z.EncBasicHandle().StructToArray
			var yyq2535 [1]bool
			_, _, _ = yysep2535, yyq2535, yy2arr2535
			const yyr2535 bool = false
			yyq2535[0] = x.Phase != ""
			if yyr2535 || yy2arr2535 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2535 int = 0
				for _, b := range yyq2535 {
					if b {
						yynn2535++
					}
				}
				r.EncodeMapStart(yynn2535)
			}
			if yyr2535 || yy2arr2535 {
				if yyq2535[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2535[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2535 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2537 := z.DecBinary()
	_ = yym2537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2538 := r.ReadMapStart()
			if yyl2538 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2538, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2538 := r.ReadArrayStart()
			if yyl2538 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2539Slc
	var yyhl2539 bool = l >= 0
	for yyj2539 := 0; ; yyj2539++ {
		if yyhl2539 {
			if yyj2539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2539Slc = r.DecodeBytes(yys2539Slc, true, true)
		yys2539 := string(yys2539Slc)
		switch yys2539 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2539)
		} // end switch yys2539
	} // end for yyj2539
	if !yyhl2539 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2541 int
	var yyb2541 bool
	var yyhl2541 bool = l >= 0
	yyj2541++
	if yyhl2541 {
		yyb2541 = yyj2541 > l
	} else {
		yyb2541 = r.CheckBreak()
	}
	if yyb2541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2541++
		if yyhl2541 {
			yyb2541 = yyj2541 > l
		} else {
			yyb2541 = r.CheckBreak()
		}
		if yyb2541 {
			break
		}
		z.DecStructFieldNotFound(yyj2541-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2543 := z.EncBinary()
	_ = yym2543
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2544 := z.DecBinary()
	_ = yym2544
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2545 := z.EncBinary()
		_ = yym2545
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2546 := !z.EncBinary()
			yy2arr2546 := z.EncBasicHandle().StructToArray
			var yyq2546 [5]bool
			_, _, _ = yysep2546, yyq2546, yy2arr2546
			const yyr2546 bool = false
			yyq2546[0] = x.Kind != ""
			yyq2546[1] = true
			yyq2546[2] = true
			yyq2546[3] = true
			yyq2546[4] = true
			if yyr2546 || yy2arr2546 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2546 int = 0
				for _, b := range yyq2546 {
					if b {
						yynn2546++
					}
				}
				r.EncodeMapStart(yynn2546)
			}
			if yyr2546 || yy2arr2546 {
				if yyq2546[0] {
					yym2548 := z.EncBinary()
					_ = yym2548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2546[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2549 := z.EncBinary()
					_ = yym2549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2546 || yy2arr2546 {
				if yyq2546[1] {
					yy2551 := &x.APIVersion
					yym2552 := z.EncBinary()
					_ = yym2552
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2551) {
					} else if !yym2552 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2551)
					} else {
						z.EncFallback(yy2551)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2546[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2553 := &x.APIVersion
					yym2554 := z.EncBinary()
					_ = yym2554
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2553) {
					} else if !yym2554 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2553)
					} else {
						z.EncFallback(yy2553)
					}
				}
			}
			if yyr2546 || yy2arr2546 {
				if yyq2546[2] {
					yy2556 := &x.ObjectMeta
					yy2556.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2546[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2557 := &x.ObjectMeta
					yy2557.CodecEncodeSelf(e)
				}
			}
			if yyr2546 || yy2arr2546 {
				if yyq2546[3] {
					yy2559 := &x.Spec
					yy2559.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2546[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2560 := &x.Spec
					yy2560.CodecEncodeSelf(e)
				}
			}
			if yyr2546 || yy2arr2546 {
				if yyq2546[4] {
					yy2562 := &x.Status
					yy2562.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2546[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2563 := &x.Status
					yy2563.CodecEncodeSelf(e)
				}
			}
			if yysep2546 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2564 := z.DecBinary()
	_ = yym2564
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2565 := r.ReadMapStart()
			if yyl2565 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2565, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2565 := r.ReadArrayStart()
			if yyl2565 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2565, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2566Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2566Slc
	var yyhl2566 bool = l >= 0
	for yyj2566 := 0; ; yyj2566++ {
		if yyhl2566 {
			if yyj2566 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2566Slc = r.DecodeBytes(yys2566Slc, true, true)
		yys2566 := string(yys2566Slc)
		switch yys2566 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2568 := &x.APIVersion
				yym2569 := z.DecBinary()
				_ = yym2569
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2568) {
				} else if !yym2569 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2568)
				} else {
					z.DecFallback(yyv2568, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2570 := &x.ObjectMeta
				yyv2570.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2571 := &x.Spec
				yyv2571.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2572 := &x.Status
				yyv2572.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2566)
		} // end switch yys2566
	} // end for yyj2566
	if !yyhl2566 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2573 int
	var yyb2573 bool
	var yyhl2573 bool = l >= 0
	yyj2573++
	if yyhl2573 {
		yyb2573 = yyj2573 > l
	} else {
		yyb2573 = r.CheckBreak()
	}
	if yyb2573 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2573++
	if yyhl2573 {
		yyb2573 = yyj2573 > l
	} else {
		yyb2573 = r.CheckBreak()
	}
	if yyb2573 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2575 := &x.APIVersion
		yym2576 := z.DecBinary()
		_ = yym2576
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2575) {
		} else if !yym2576 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2575)
		} else {
			z.DecFallback(yyv2575, false)
		}
	}
	yyj2573++
	if yyhl2573 {
		yyb2573 = yyj2573 > l
	} else {
		yyb2573 = r.CheckBreak()
	}
	if yyb2573 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2577 := &x.ObjectMeta
		yyv2577.CodecDecodeSelf(d)
	}
	yyj2573++
	if yyhl2573 {
		yyb2573 = yyj2573 > l
	} else {
		yyb2573 = r.CheckBreak()
	}
	if yyb2573 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2578 := &x.Spec
		yyv2578.CodecDecodeSelf(d)
	}
	yyj2573++
	if yyhl2573 {
		yyb2573 = yyj2573 > l
	} else {
		yyb2573 = r.CheckBreak()
	}
	if yyb2573 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2579 := &x.Status
		yyv2579.CodecDecodeSelf(d)
	}
	for {
		yyj2573++
		if yyhl2573 {
			yyb2573 = yyj2573 > l
		} else {
			yyb2573 = r.CheckBreak()
		}
		if yyb2573 {
			break
		}
		z.DecStructFieldNotFound(yyj2573-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2580 := z.EncBinary()
		_ = yym2580
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2581 := !z.EncBinary()
			yy2arr2581 := z.EncBasicHandle().StructToArray
			var yyq2581 [4]bool
			_, _, _ = yysep2581, yyq2581, yy2arr2581
			const yyr2581 bool = false
			yyq2581[0] = x.Kind != ""
			yyq2581[1] = true
			yyq2581[2] = true
			if yyr2581 || yy2arr2581 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2581 int = 1
				for _, b := range yyq2581 {
					if b {
						yynn2581++
					}
				}
				r.EncodeMapStart(yynn2581)
			}
			if yyr2581 || yy2arr2581 {
				if yyq2581[0] {
					yym2583 := z.EncBinary()
					_ = yym2583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2581[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2584 := z.EncBinary()
					_ = yym2584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2581 || yy2arr2581 {
				if yyq2581[1] {
					yy2586 := &x.APIVersion
					yym2587 := z.EncBinary()
					_ = yym2587
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2586) {
					} else if !yym2587 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2586)
					} else {
						z.EncFallback(yy2586)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2581[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2588 := &x.APIVersion
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2588) {
					} else if !yym2589 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2588)
					} else {
						z.EncFallback(yy2588)
					}
				}
			}
			if yyr2581 || yy2arr2581 {
				if yyq2581[2] {
					yy2591 := &x.ListMeta
					yym2592 := z.EncBinary()
					_ = yym2592
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2591) {
					} else {
						z.EncFallback(yy2591)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2581[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2593 := &x.ListMeta
					yym2594 := z.EncBinary()
					_ = yym2594
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2593) {
					} else {
						z.EncFallback(yy2593)
					}
				}
			}
			if yyr2581 || yy2arr2581 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2596 := z.EncBinary()
					_ = yym2596
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2581 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2598 := z.DecBinary()
	_ = yym2598
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2599 := r.ReadMapStart()
			if yyl2599 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2599, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2599 := r.ReadArrayStart()
			if yyl2599 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2599, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2600Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2600Slc
	var yyhl2600 bool = l >= 0
	for yyj2600 := 0; ; yyj2600++ {
		if yyhl2600 {
			if yyj2600 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2600Slc = r.DecodeBytes(yys2600Slc, true, true)
		yys2600 := string(yys2600Slc)
		switch yys2600 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2602 := &x.APIVersion
				yym2603 := z.DecBinary()
				_ = yym2603
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2602) {
				} else if !yym2603 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2602)
				} else {
					z.DecFallback(yyv2602, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2604 := &x.ListMeta
				yym2605 := z.DecBinary()
				_ = yym2605
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2604) {
				} else {
					z.DecFallback(yyv2604, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2606 := &x.Items
				yym2607 := z.DecBinary()
				_ = yym2607
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2606), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2600)
		} // end switch yys2600
	} // end for yyj2600
	if !yyhl2600 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2608 int
	var yyb2608 bool
	var yyhl2608 bool = l >= 0
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2610 := &x.APIVersion
		yym2611 := z.DecBinary()
		_ = yym2611
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2610) {
		} else if !yym2611 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2610)
		} else {
			z.DecFallback(yyv2610, false)
		}
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2612 := &x.ListMeta
		yym2613 := z.DecBinary()
		_ = yym2613
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2612) {
		} else {
			z.DecFallback(yyv2612, false)
		}
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2614 := &x.Items
		yym2615 := z.DecBinary()
		_ = yym2615
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2614), d)
		}
	}
	for {
		yyj2608++
		if yyhl2608 {
			yyb2608 = yyj2608 > l
		} else {
			yyb2608 = r.CheckBreak()
		}
		if yyb2608 {
			break
		}
		z.DecStructFieldNotFound(yyj2608-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2616 := z.EncBinary()
		_ = yym2616
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2617 := !z.EncBinary()
			yy2arr2617 := z.EncBasicHandle().StructToArray
			var yyq2617 [4]bool
			_, _, _ = yysep2617, yyq2617, yy2arr2617
			const yyr2617 bool = false
			yyq2617[0] = x.Kind != ""
			yyq2617[1] = true
			yyq2617[2] = true
			if yyr2617 || yy2arr2617 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2617 int = 1
				for _, b := range yyq2617 {
					if b {
						yynn2617++
					}
				}
				r.EncodeMapStart(yynn2617)
			}
			if yyr2617 || yy2arr2617 {
				if yyq2617[0] {
					yym2619 := z.EncBinary()
					_ = yym2619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2617[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2620 := z.EncBinary()
					_ = yym2620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2617 || yy2arr2617 {
				if yyq2617[1] {
					yy2622 := &x.APIVersion
					yym2623 := z.EncBinary()
					_ = yym2623
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2622) {
					} else if !yym2623 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2622)
					} else {
						z.EncFallback(yy2622)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2617[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2624 := &x.APIVersion
					yym2625 := z.EncBinary()
					_ = yym2625
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2624) {
					} else if !yym2625 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2624)
					} else {
						z.EncFallback(yy2624)
					}
				}
			}
			if yyr2617 || yy2arr2617 {
				if yyq2617[2] {
					yy2627 := &x.ObjectMeta
					yy2627.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2617[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2628 := &x.ObjectMeta
					yy2628.CodecEncodeSelf(e)
				}
			}
			if yyr2617 || yy2arr2617 {
				yy2630 := &x.Target
				yy2630.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2631 := &x.Target
				yy2631.CodecEncodeSelf(e)
			}
			if yysep2617 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2632 := z.DecBinary()
	_ = yym2632
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2633 := r.ReadMapStart()
			if yyl2633 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2633, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2633 := r.ReadArrayStart()
			if yyl2633 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2633, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2634Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2634Slc
	var yyhl2634 bool = l >= 0
	for yyj2634 := 0; ; yyj2634++ {
		if yyhl2634 {
			if yyj2634 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2634Slc = r.DecodeBytes(yys2634Slc, true, true)
		yys2634 := string(yys2634Slc)
		switch yys2634 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2636 := &x.APIVersion
				yym2637 := z.DecBinary()
				_ = yym2637
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2636) {
				} else if !yym2637 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2636)
				} else {
					z.DecFallback(yyv2636, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2638 := &x.ObjectMeta
				yyv2638.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2639 := &x.Target
				yyv2639.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2634)
		} // end switch yys2634
	} // end for yyj2634
	if !yyhl2634 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2640 int
	var yyb2640 bool
	var yyhl2640 bool = l >= 0
	yyj2640++
	if yyhl2640 {
		yyb2640 = yyj2640 > l
	} else {
		yyb2640 = r.CheckBreak()
	}
	if yyb2640 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2640++
	if yyhl2640 {
		yyb2640 = yyj2640 > l
	} else {
		yyb2640 = r.CheckBreak()
	}
	if yyb2640 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2642 := &x.APIVersion
		yym2643 := z.DecBinary()
		_ = yym2643
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2642) {
		} else if !yym2643 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2642)
		} else {
			z.DecFallback(yyv2642, false)
		}
	}
	yyj2640++
	if yyhl2640 {
		yyb2640 = yyj2640 > l
	} else {
		yyb2640 = r.CheckBreak()
	}
	if yyb2640 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2644 := &x.ObjectMeta
		yyv2644.CodecDecodeSelf(d)
	}
	yyj2640++
	if yyhl2640 {
		yyb2640 = yyj2640 > l
	} else {
		yyb2640 = r.CheckBreak()
	}
	if yyb2640 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2645 := &x.Target
		yyv2645.CodecDecodeSelf(d)
	}
	for {
		yyj2640++
		if yyhl2640 {
			yyb2640 = yyj2640 > l
		} else {
			yyb2640 = r.CheckBreak()
		}
		if yyb2640 {
			break
		}
		z.DecStructFieldNotFound(yyj2640-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2646 := z.EncBinary()
		_ = yym2646
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2647 := !z.EncBinary()
			yy2arr2647 := z.EncBasicHandle().StructToArray
			var yyq2647 [3]bool
			_, _, _ = yysep2647, yyq2647, yy2arr2647
			const yyr2647 bool = false
			yyq2647[0] = x.Kind != ""
			yyq2647[1] = true
			if yyr2647 || yy2arr2647 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2647 int = 1
				for _, b := range yyq2647 {
					if b {
						yynn2647++
					}
				}
				r.EncodeMapStart(yynn2647)
			}
			if yyr2647 || yy2arr2647 {
				if yyq2647[0] {
					yym2649 := z.EncBinary()
					_ = yym2649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2647[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2650 := z.EncBinary()
					_ = yym2650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2647 || yy2arr2647 {
				if yyq2647[1] {
					yy2652 := &x.APIVersion
					yym2653 := z.EncBinary()
					_ = yym2653
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2652) {
					} else if !yym2653 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2652)
					} else {
						z.EncFallback(yy2652)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2647[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2654 := &x.APIVersion
					yym2655 := z.EncBinary()
					_ = yym2655
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2654) {
					} else if !yym2655 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2654)
					} else {
						z.EncFallback(yy2654)
					}
				}
			}
			if yyr2647 || yy2arr2647 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2657 := *x.GracePeriodSeconds
					yym2658 := z.EncBinary()
					_ = yym2658
					if false {
					} else {
						r.EncodeInt(int64(yy2657))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2659 := *x.GracePeriodSeconds
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else {
						r.EncodeInt(int64(yy2659))
					}
				}
			}
			if yysep2647 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2661 := z.DecBinary()
	_ = yym2661
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2662 := r.ReadMapStart()
			if yyl2662 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2662, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2662 := r.ReadArrayStart()
			if yyl2662 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2662, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2663Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2663Slc
	var yyhl2663 bool = l >= 0
	for yyj2663 := 0; ; yyj2663++ {
		if yyhl2663 {
			if yyj2663 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2663Slc = r.DecodeBytes(yys2663Slc, true, true)
		yys2663 := string(yys2663Slc)
		switch yys2663 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2665 := &x.APIVersion
				yym2666 := z.DecBinary()
				_ = yym2666
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2665) {
				} else if !yym2666 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2665)
				} else {
					z.DecFallback(yyv2665, false)
				}
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2668 := z.DecBinary()
				_ = yym2668
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2663)
		} // end switch yys2663
	} // end for yyj2663
	if !yyhl2663 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2669 int
	var yyb2669 bool
	var yyhl2669 bool = l >= 0
	yyj2669++
	if yyhl2669 {
		yyb2669 = yyj2669 > l
	} else {
		yyb2669 = r.CheckBreak()
	}
	if yyb2669 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2669++
	if yyhl2669 {
		yyb2669 = yyj2669 > l
	} else {
		yyb2669 = r.CheckBreak()
	}
	if yyb2669 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2671 := &x.APIVersion
		yym2672 := z.DecBinary()
		_ = yym2672
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2671) {
		} else if !yym2672 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2671)
		} else {
			z.DecFallback(yyv2671, false)
		}
	}
	yyj2669++
	if yyhl2669 {
		yyb2669 = yyj2669 > l
	} else {
		yyb2669 = r.CheckBreak()
	}
	if yyb2669 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2674 := z.DecBinary()
		_ = yym2674
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2669++
		if yyhl2669 {
			yyb2669 = yyj2669 > l
		} else {
			yyb2669 = r.CheckBreak()
		}
		if yyb2669 {
			break
		}
		z.DecStructFieldNotFound(yyj2669-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2675 := z.EncBinary()
		_ = yym2675
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2676 := !z.EncBinary()
			yy2arr2676 := z.EncBasicHandle().StructToArray
			var yyq2676 [7]bool
			_, _, _ = yysep2676, yyq2676, yy2arr2676
			const yyr2676 bool = false
			yyq2676[0] = x.Kind != ""
			yyq2676[1] = true
			yyq2676[2] = x.LabelSelector != ""
			yyq2676[3] = x.FieldSelector != ""
			yyq2676[4] = x.Watch != false
			yyq2676[5] = x.ResourceVersion != ""
			yyq2676[6] = x.TimeoutSeconds != nil
			if yyr2676 || yy2arr2676 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2676 int = 0
				for _, b := range yyq2676 {
					if b {
						yynn2676++
					}
				}
				r.EncodeMapStart(yynn2676)
			}
			if yyr2676 || yy2arr2676 {
				if yyq2676[0] {
					yym2678 := z.EncBinary()
					_ = yym2678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2676[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2679 := z.EncBinary()
					_ = yym2679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2676 || yy2arr2676 {
				if yyq2676[1] {
					yy2681 := &x.APIVersion
					yym2682 := z.EncBinary()
					_ = yym2682
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2681) {
					} else if !yym2682 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2681)
					} else {
						z.EncFallback(yy2681)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2676[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2683 := &x.APIVersion
					yym2684 := z.EncBinary()
					_ = yym2684
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2683) {
					} else if !yym2684 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2683)
					} else {
						z.EncFallback(yy2683)
					}
				}
			}
			if yyr2676 || yy2arr2676 {
				if yyq2676[2] {
					yym2686 := z.EncBinary()
					_ = yym2686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2676[2] {
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					yym2687 := z.EncBinary()
					_ = yym2687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr2676 || yy2arr2676 {
				if yyq2676[3] {
					yym2689 := z.EncBinary()
					_ = yym2689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2676[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					yym2690 := z.EncBinary()
					_ = yym2690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr2676 || yy2arr2676 {
				if yyq2676[4] {
					yym2692 := z.EncBinary()
					_ = yym2692
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2676[4] {
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					yym2693 := z.EncBinary()
					_ = yym2693
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr2676 || yy2arr2676 {
				if yyq2676[5] {
					yym2695 := z.EncBinary()
					_ = yym2695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2676[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2696 := z.EncBinary()
					_ = yym2696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2676 || yy2arr2676 {
				if yyq2676[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2698 := *x.TimeoutSeconds
						yym2699 := z.EncBinary()
						_ = yym2699
						if false {
						} else {
							r.EncodeInt(int64(yy2698))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2676[6] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2700 := *x.TimeoutSeconds
						yym2701 := z.EncBinary()
						_ = yym2701
						if false {
						} else {
							r.EncodeInt(int64(yy2700))
						}
					}
				}
			}
			if yysep2676 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2702 := z.DecBinary()
	_ = yym2702
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2703 := r.ReadMapStart()
			if yyl2703 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2703, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2703 := r.ReadArrayStart()
			if yyl2703 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2703, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2704Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2704Slc
	var yyhl2704 bool = l >= 0
	for yyj2704 := 0; ; yyj2704++ {
		if yyhl2704 {
			if yyj2704 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2704Slc = r.DecodeBytes(yys2704Slc, true, true)
		yys2704 := string(yys2704Slc)
		switch yys2704 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2706 := &x.APIVersion
				yym2707 := z.DecBinary()
				_ = yym2707
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2706) {
				} else if !yym2707 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2706)
				} else {
					z.DecFallback(yyv2706, false)
				}
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2713 := z.DecBinary()
				_ = yym2713
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2704)
		} // end switch yys2704
	} // end for yyj2704
	if !yyhl2704 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2714 int
	var yyb2714 bool
	var yyhl2714 bool = l >= 0
	yyj2714++
	if yyhl2714 {
		yyb2714 = yyj2714 > l
	} else {
		yyb2714 = r.CheckBreak()
	}
	if yyb2714 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2714++
	if yyhl2714 {
		yyb2714 = yyj2714 > l
	} else {
		yyb2714 = r.CheckBreak()
	}
	if yyb2714 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2716 := &x.APIVersion
		yym2717 := z.DecBinary()
		_ = yym2717
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2716) {
		} else if !yym2717 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2716)
		} else {
			z.DecFallback(yyv2716, false)
		}
	}
	yyj2714++
	if yyhl2714 {
		yyb2714 = yyj2714 > l
	} else {
		yyb2714 = r.CheckBreak()
	}
	if yyb2714 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj2714++
	if yyhl2714 {
		yyb2714 = yyj2714 > l
	} else {
		yyb2714 = r.CheckBreak()
	}
	if yyb2714 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj2714++
	if yyhl2714 {
		yyb2714 = yyj2714 > l
	} else {
		yyb2714 = r.CheckBreak()
	}
	if yyb2714 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2714++
	if yyhl2714 {
		yyb2714 = yyj2714 > l
	} else {
		yyb2714 = r.CheckBreak()
	}
	if yyb2714 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2714++
	if yyhl2714 {
		yyb2714 = yyj2714 > l
	} else {
		yyb2714 = r.CheckBreak()
	}
	if yyb2714 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2723 := z.DecBinary()
		_ = yym2723
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2714++
		if yyhl2714 {
			yyb2714 = yyj2714 > l
		} else {
			yyb2714 = r.CheckBreak()
		}
		if yyb2714 {
			break
		}
		z.DecStructFieldNotFound(yyj2714-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2724 := z.EncBinary()
		_ = yym2724
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2725 := !z.EncBinary()
			yy2arr2725 := z.EncBasicHandle().StructToArray
			var yyq2725 [10]bool
			_, _, _ = yysep2725, yyq2725, yy2arr2725
			const yyr2725 bool = false
			yyq2725[0] = x.Kind != ""
			yyq2725[1] = true
			yyq2725[2] = x.Container != ""
			yyq2725[3] = x.Follow != false
			yyq2725[4] = x.Previous != false
			yyq2725[5] = x.SinceSeconds != nil
			yyq2725[6] = x.SinceTime != nil
			yyq2725[7] = x.Timestamps != false
			yyq2725[8] = x.TailLines != nil
			yyq2725[9] = x.LimitBytes != nil
			if yyr2725 || yy2arr2725 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2725 int = 0
				for _, b := range yyq2725 {
					if b {
						yynn2725++
					}
				}
				r.EncodeMapStart(yynn2725)
			}
			if yyr2725 || yy2arr2725 {
				if yyq2725[0] {
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2725[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				if yyq2725[1] {
					yy2730 := &x.APIVersion
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2730) {
					} else if !yym2731 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2730)
					} else {
						z.EncFallback(yy2730)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2725[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2732 := &x.APIVersion
					yym2733 := z.EncBinary()
					_ = yym2733
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2732) {
					} else if !yym2733 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2732)
					} else {
						z.EncFallback(yy2732)
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				if yyq2725[2] {
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2725[2] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				if yyq2725[3] {
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2725[3] {
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					yym2739 := z.EncBinary()
					_ = yym2739
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				if yyq2725[4] {
					yym2741 := z.EncBinary()
					_ = yym2741
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2725[4] {
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					yym2742 := z.EncBinary()
					_ = yym2742
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				if yyq2725[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2744 := *x.SinceSeconds
						yym2745 := z.EncBinary()
						_ = yym2745
						if false {
						} else {
							r.EncodeInt(int64(yy2744))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2725[5] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2746 := *x.SinceSeconds
						yym2747 := z.EncBinary()
						_ = yym2747
						if false {
						} else {
							r.EncodeInt(int64(yy2746))
						}
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				if yyq2725[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2749 := z.EncBinary()
						_ = yym2749
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2749 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2749 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2725[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2750 := z.EncBinary()
						_ = yym2750
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2750 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2750 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				if yyq2725[7] {
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2725[7] {
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					yym2753 := z.EncBinary()
					_ = yym2753
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				if yyq2725[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2755 := *x.TailLines
						yym2756 := z.EncBinary()
						_ = yym2756
						if false {
						} else {
							r.EncodeInt(int64(yy2755))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2725[8] {
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2757 := *x.TailLines
						yym2758 := z.EncBinary()
						_ = yym2758
						if false {
						} else {
							r.EncodeInt(int64(yy2757))
						}
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				if yyq2725[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2760 := *x.LimitBytes
						yym2761 := z.EncBinary()
						_ = yym2761
						if false {
						} else {
							r.EncodeInt(int64(yy2760))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2725[9] {
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2762 := *x.LimitBytes
						yym2763 := z.EncBinary()
						_ = yym2763
						if false {
						} else {
							r.EncodeInt(int64(yy2762))
						}
					}
				}
			}
			if yysep2725 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2764 := z.DecBinary()
	_ = yym2764
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2765 := r.ReadMapStart()
			if yyl2765 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2765, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2765 := r.ReadArrayStart()
			if yyl2765 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2765, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2766Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2766Slc
	var yyhl2766 bool = l >= 0
	for yyj2766 := 0; ; yyj2766++ {
		if yyhl2766 {
			if yyj2766 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2766Slc = r.DecodeBytes(yys2766Slc, true, true)
		yys2766 := string(yys2766Slc)
		switch yys2766 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2768 := &x.APIVersion
				yym2769 := z.DecBinary()
				_ = yym2769
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2768) {
				} else if !yym2769 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2768)
				} else {
					z.DecFallback(yyv2768, false)
				}
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2774 := z.DecBinary()
				_ = yym2774
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2776 := z.DecBinary()
				_ = yym2776
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2776 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2776 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2779 := z.DecBinary()
				_ = yym2779
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2781 := z.DecBinary()
				_ = yym2781
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2766)
		} // end switch yys2766
	} // end for yyj2766
	if !yyhl2766 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2782 int
	var yyb2782 bool
	var yyhl2782 bool = l >= 0
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2784 := &x.APIVersion
		yym2785 := z.DecBinary()
		_ = yym2785
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2784) {
		} else if !yym2785 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2784)
		} else {
			z.DecFallback(yyv2784, false)
		}
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2790 := z.DecBinary()
		_ = yym2790
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2792 := z.DecBinary()
		_ = yym2792
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2792 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2792 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2795 := z.DecBinary()
		_ = yym2795
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2797 := z.DecBinary()
		_ = yym2797
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2782++
		if yyhl2782 {
			yyb2782 = yyj2782 > l
		} else {
			yyb2782 = r.CheckBreak()
		}
		if yyb2782 {
			break
		}
		z.DecStructFieldNotFound(yyj2782-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2798 := z.EncBinary()
		_ = yym2798
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2799 := !z.EncBinary()
			yy2arr2799 := z.EncBasicHandle().StructToArray
			var yyq2799 [7]bool
			_, _, _ = yysep2799, yyq2799, yy2arr2799
			const yyr2799 bool = false
			yyq2799[0] = x.Kind != ""
			yyq2799[1] = true
			yyq2799[2] = x.Stdin != false
			yyq2799[3] = x.Stdout != false
			yyq2799[4] = x.Stderr != false
			yyq2799[5] = x.TTY != false
			yyq2799[6] = x.Container != ""
			if yyr2799 || yy2arr2799 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2799 int = 0
				for _, b := range yyq2799 {
					if b {
						yynn2799++
					}
				}
				r.EncodeMapStart(yynn2799)
			}
			if yyr2799 || yy2arr2799 {
				if yyq2799[0] {
					yym2801 := z.EncBinary()
					_ = yym2801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2799[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2799 || yy2arr2799 {
				if yyq2799[1] {
					yy2804 := &x.APIVersion
					yym2805 := z.EncBinary()
					_ = yym2805
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2804) {
					} else if !yym2805 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2804)
					} else {
						z.EncFallback(yy2804)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2799[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2806 := &x.APIVersion
					yym2807 := z.EncBinary()
					_ = yym2807
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2806) {
					} else if !yym2807 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2806)
					} else {
						z.EncFallback(yy2806)
					}
				}
			}
			if yyr2799 || yy2arr2799 {
				if yyq2799[2] {
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2799[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2810 := z.EncBinary()
					_ = yym2810
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2799 || yy2arr2799 {
				if yyq2799[3] {
					yym2812 := z.EncBinary()
					_ = yym2812
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2799[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2813 := z.EncBinary()
					_ = yym2813
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2799 || yy2arr2799 {
				if yyq2799[4] {
					yym2815 := z.EncBinary()
					_ = yym2815
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2799[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2816 := z.EncBinary()
					_ = yym2816
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2799 || yy2arr2799 {
				if yyq2799[5] {
					yym2818 := z.EncBinary()
					_ = yym2818
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2799[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2819 := z.EncBinary()
					_ = yym2819
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2799 || yy2arr2799 {
				if yyq2799[6] {
					yym2821 := z.EncBinary()
					_ = yym2821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2799[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2822 := z.EncBinary()
					_ = yym2822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2799 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2823 := z.DecBinary()
	_ = yym2823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2824 := r.ReadMapStart()
			if yyl2824 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2824, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2824 := r.ReadArrayStart()
			if yyl2824 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2825Slc
	var yyhl2825 bool = l >= 0
	for yyj2825 := 0; ; yyj2825++ {
		if yyhl2825 {
			if yyj2825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2825Slc = r.DecodeBytes(yys2825Slc, true, true)
		yys2825 := string(yys2825Slc)
		switch yys2825 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2827 := &x.APIVersion
				yym2828 := z.DecBinary()
				_ = yym2828
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2827) {
				} else if !yym2828 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2827)
				} else {
					z.DecFallback(yyv2827, false)
				}
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2825)
		} // end switch yys2825
	} // end for yyj2825
	if !yyhl2825 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2834 int
	var yyb2834 bool
	var yyhl2834 bool = l >= 0
	yyj2834++
	if yyhl2834 {
		yyb2834 = yyj2834 > l
	} else {
		yyb2834 = r.CheckBreak()
	}
	if yyb2834 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2834++
	if yyhl2834 {
		yyb2834 = yyj2834 > l
	} else {
		yyb2834 = r.CheckBreak()
	}
	if yyb2834 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2836 := &x.APIVersion
		yym2837 := z.DecBinary()
		_ = yym2837
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2836) {
		} else if !yym2837 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2836)
		} else {
			z.DecFallback(yyv2836, false)
		}
	}
	yyj2834++
	if yyhl2834 {
		yyb2834 = yyj2834 > l
	} else {
		yyb2834 = r.CheckBreak()
	}
	if yyb2834 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2834++
	if yyhl2834 {
		yyb2834 = yyj2834 > l
	} else {
		yyb2834 = r.CheckBreak()
	}
	if yyb2834 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2834++
	if yyhl2834 {
		yyb2834 = yyj2834 > l
	} else {
		yyb2834 = r.CheckBreak()
	}
	if yyb2834 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2834++
	if yyhl2834 {
		yyb2834 = yyj2834 > l
	} else {
		yyb2834 = r.CheckBreak()
	}
	if yyb2834 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2834++
	if yyhl2834 {
		yyb2834 = yyj2834 > l
	} else {
		yyb2834 = r.CheckBreak()
	}
	if yyb2834 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2834++
		if yyhl2834 {
			yyb2834 = yyj2834 > l
		} else {
			yyb2834 = r.CheckBreak()
		}
		if yyb2834 {
			break
		}
		z.DecStructFieldNotFound(yyj2834-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2843 := z.EncBinary()
		_ = yym2843
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2844 := !z.EncBinary()
			yy2arr2844 := z.EncBasicHandle().StructToArray
			var yyq2844 [8]bool
			_, _, _ = yysep2844, yyq2844, yy2arr2844
			const yyr2844 bool = false
			yyq2844[0] = x.Kind != ""
			yyq2844[1] = true
			yyq2844[2] = x.Stdin != false
			yyq2844[3] = x.Stdout != false
			yyq2844[4] = x.Stderr != false
			yyq2844[5] = x.TTY != false
			yyq2844[6] = x.Container != ""
			if yyr2844 || yy2arr2844 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2844 int = 1
				for _, b := range yyq2844 {
					if b {
						yynn2844++
					}
				}
				r.EncodeMapStart(yynn2844)
			}
			if yyr2844 || yy2arr2844 {
				if yyq2844[0] {
					yym2846 := z.EncBinary()
					_ = yym2846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2844[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2847 := z.EncBinary()
					_ = yym2847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				if yyq2844[1] {
					yy2849 := &x.APIVersion
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2849) {
					} else if !yym2850 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2849)
					} else {
						z.EncFallback(yy2849)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2851 := &x.APIVersion
					yym2852 := z.EncBinary()
					_ = yym2852
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2851) {
					} else if !yym2852 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2851)
					} else {
						z.EncFallback(yy2851)
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				if yyq2844[2] {
					yym2854 := z.EncBinary()
					_ = yym2854
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2844[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2855 := z.EncBinary()
					_ = yym2855
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				if yyq2844[3] {
					yym2857 := z.EncBinary()
					_ = yym2857
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2844[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2858 := z.EncBinary()
					_ = yym2858
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				if yyq2844[4] {
					yym2860 := z.EncBinary()
					_ = yym2860
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2844[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2861 := z.EncBinary()
					_ = yym2861
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				if yyq2844[5] {
					yym2863 := z.EncBinary()
					_ = yym2863
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2844[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2864 := z.EncBinary()
					_ = yym2864
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				if yyq2844[6] {
					yym2866 := z.EncBinary()
					_ = yym2866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2844[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2867 := z.EncBinary()
					_ = yym2867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2869 := z.EncBinary()
					_ = yym2869
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2870 := z.EncBinary()
					_ = yym2870
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2844 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2871 := z.DecBinary()
	_ = yym2871
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2872 := r.ReadMapStart()
			if yyl2872 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2872, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2872 := r.ReadArrayStart()
			if yyl2872 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2872, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2873Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2873Slc
	var yyhl2873 bool = l >= 0
	for yyj2873 := 0; ; yyj2873++ {
		if yyhl2873 {
			if yyj2873 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2873Slc = r.DecodeBytes(yys2873Slc, true, true)
		yys2873 := string(yys2873Slc)
		switch yys2873 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2875 := &x.APIVersion
				yym2876 := z.DecBinary()
				_ = yym2876
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2875) {
				} else if !yym2876 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2875)
				} else {
					z.DecFallback(yyv2875, false)
				}
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2882 := &x.Command
				yym2883 := z.DecBinary()
				_ = yym2883
				if false {
				} else {
					z.F.DecSliceStringX(yyv2882, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2873)
		} // end switch yys2873
	} // end for yyj2873
	if !yyhl2873 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2884 int
	var yyb2884 bool
	var yyhl2884 bool = l >= 0
	yyj2884++
	if yyhl2884 {
		yyb2884 = yyj2884 > l
	} else {
		yyb2884 = r.CheckBreak()
	}
	if yyb2884 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2884++
	if yyhl2884 {
		yyb2884 = yyj2884 > l
	} else {
		yyb2884 = r.CheckBreak()
	}
	if yyb2884 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2886 := &x.APIVersion
		yym2887 := z.DecBinary()
		_ = yym2887
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2886) {
		} else if !yym2887 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2886)
		} else {
			z.DecFallback(yyv2886, false)
		}
	}
	yyj2884++
	if yyhl2884 {
		yyb2884 = yyj2884 > l
	} else {
		yyb2884 = r.CheckBreak()
	}
	if yyb2884 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2884++
	if yyhl2884 {
		yyb2884 = yyj2884 > l
	} else {
		yyb2884 = r.CheckBreak()
	}
	if yyb2884 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2884++
	if yyhl2884 {
		yyb2884 = yyj2884 > l
	} else {
		yyb2884 = r.CheckBreak()
	}
	if yyb2884 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2884++
	if yyhl2884 {
		yyb2884 = yyj2884 > l
	} else {
		yyb2884 = r.CheckBreak()
	}
	if yyb2884 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2884++
	if yyhl2884 {
		yyb2884 = yyj2884 > l
	} else {
		yyb2884 = r.CheckBreak()
	}
	if yyb2884 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2884++
	if yyhl2884 {
		yyb2884 = yyj2884 > l
	} else {
		yyb2884 = r.CheckBreak()
	}
	if yyb2884 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2893 := &x.Command
		yym2894 := z.DecBinary()
		_ = yym2894
		if false {
		} else {
			z.F.DecSliceStringX(yyv2893, false, d)
		}
	}
	for {
		yyj2884++
		if yyhl2884 {
			yyb2884 = yyj2884 > l
		} else {
			yyb2884 = r.CheckBreak()
		}
		if yyb2884 {
			break
		}
		z.DecStructFieldNotFound(yyj2884-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2895 := z.EncBinary()
		_ = yym2895
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2896 := !z.EncBinary()
			yy2arr2896 := z.EncBasicHandle().StructToArray
			var yyq2896 [3]bool
			_, _, _ = yysep2896, yyq2896, yy2arr2896
			const yyr2896 bool = false
			yyq2896[0] = x.Kind != ""
			yyq2896[1] = true
			yyq2896[2] = x.Path != ""
			if yyr2896 || yy2arr2896 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2896 int = 0
				for _, b := range yyq2896 {
					if b {
						yynn2896++
					}
				}
				r.EncodeMapStart(yynn2896)
			}
			if yyr2896 || yy2arr2896 {
				if yyq2896[0] {
					yym2898 := z.EncBinary()
					_ = yym2898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2896[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2899 := z.EncBinary()
					_ = yym2899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2896 || yy2arr2896 {
				if yyq2896[1] {
					yy2901 := &x.APIVersion
					yym2902 := z.EncBinary()
					_ = yym2902
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2901) {
					} else if !yym2902 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2901)
					} else {
						z.EncFallback(yy2901)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2896[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2903 := &x.APIVersion
					yym2904 := z.EncBinary()
					_ = yym2904
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2903) {
					} else if !yym2904 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2903)
					} else {
						z.EncFallback(yy2903)
					}
				}
			}
			if yyr2896 || yy2arr2896 {
				if yyq2896[2] {
					yym2906 := z.EncBinary()
					_ = yym2906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2896[2] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym2907 := z.EncBinary()
					_ = yym2907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yysep2896 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2908 := z.DecBinary()
	_ = yym2908
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2909 := r.ReadMapStart()
			if yyl2909 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2909, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2909 := r.ReadArrayStart()
			if yyl2909 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2909, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2910Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2910Slc
	var yyhl2910 bool = l >= 0
	for yyj2910 := 0; ; yyj2910++ {
		if yyhl2910 {
			if yyj2910 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2910Slc = r.DecodeBytes(yys2910Slc, true, true)
		yys2910 := string(yys2910Slc)
		switch yys2910 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2912 := &x.APIVersion
				yym2913 := z.DecBinary()
				_ = yym2913
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2912) {
				} else if !yym2913 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2912)
				} else {
					z.DecFallback(yyv2912, false)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2910)
		} // end switch yys2910
	} // end for yyj2910
	if !yyhl2910 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2915 int
	var yyb2915 bool
	var yyhl2915 bool = l >= 0
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2917 := &x.APIVersion
		yym2918 := z.DecBinary()
		_ = yym2918
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2917) {
		} else if !yym2918 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2917)
		} else {
			z.DecFallback(yyv2917, false)
		}
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2915++
		if yyhl2915 {
			yyb2915 = yyj2915 > l
		} else {
			yyb2915 = r.CheckBreak()
		}
		if yyb2915 {
			break
		}
		z.DecStructFieldNotFound(yyj2915-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2920 := z.EncBinary()
		_ = yym2920
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2921 := !z.EncBinary()
			yy2arr2921 := z.EncBasicHandle().StructToArray
			var yyq2921 [7]bool
			_, _, _ = yysep2921, yyq2921, yy2arr2921
			const yyr2921 bool = false
			yyq2921[0] = x.Kind != ""
			yyq2921[1] = x.Namespace != ""
			yyq2921[2] = x.Name != ""
			yyq2921[3] = x.UID != ""
			yyq2921[4] = x.APIVersion != ""
			yyq2921[5] = x.ResourceVersion != ""
			yyq2921[6] = x.FieldPath != ""
			if yyr2921 || yy2arr2921 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2921 int = 0
				for _, b := range yyq2921 {
					if b {
						yynn2921++
					}
				}
				r.EncodeMapStart(yynn2921)
			}
			if yyr2921 || yy2arr2921 {
				if yyq2921[0] {
					yym2923 := z.EncBinary()
					_ = yym2923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2921[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2921 || yy2arr2921 {
				if yyq2921[1] {
					yym2926 := z.EncBinary()
					_ = yym2926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2921[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2921 || yy2arr2921 {
				if yyq2921[2] {
					yym2929 := z.EncBinary()
					_ = yym2929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2921[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2930 := z.EncBinary()
					_ = yym2930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2921 || yy2arr2921 {
				if yyq2921[3] {
					yym2932 := z.EncBinary()
					_ = yym2932
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2921[3] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym2933 := z.EncBinary()
					_ = yym2933
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2921 || yy2arr2921 {
				if yyq2921[4] {
					yym2935 := z.EncBinary()
					_ = yym2935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2921[4] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2936 := z.EncBinary()
					_ = yym2936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2921 || yy2arr2921 {
				if yyq2921[5] {
					yym2938 := z.EncBinary()
					_ = yym2938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2921[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2939 := z.EncBinary()
					_ = yym2939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2921 || yy2arr2921 {
				if yyq2921[6] {
					yym2941 := z.EncBinary()
					_ = yym2941
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2921[6] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym2942 := z.EncBinary()
					_ = yym2942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2921 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2943 := z.DecBinary()
	_ = yym2943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2944 := r.ReadMapStart()
			if yyl2944 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2944, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2944 := r.ReadArrayStart()
			if yyl2944 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2944, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2945Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2945Slc
	var yyhl2945 bool = l >= 0
	for yyj2945 := 0; ; yyj2945++ {
		if yyhl2945 {
			if yyj2945 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2945Slc = r.DecodeBytes(yys2945Slc, true, true)
		yys2945 := string(yys2945Slc)
		switch yys2945 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2945)
		} // end switch yys2945
	} // end for yyj2945
	if !yyhl2945 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2953 int
	var yyb2953 bool
	var yyhl2953 bool = l >= 0
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2953++
		if yyhl2953 {
			yyb2953 = yyj2953 > l
		} else {
			yyb2953 = r.CheckBreak()
		}
		if yyb2953 {
			break
		}
		z.DecStructFieldNotFound(yyj2953-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2961 := z.EncBinary()
		_ = yym2961
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2962 := !z.EncBinary()
			yy2arr2962 := z.EncBasicHandle().StructToArray
			var yyq2962 [1]bool
			_, _, _ = yysep2962, yyq2962, yy2arr2962
			const yyr2962 bool = false
			yyq2962[0] = x.Name != ""
			if yyr2962 || yy2arr2962 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2962 int = 0
				for _, b := range yyq2962 {
					if b {
						yynn2962++
					}
				}
				r.EncodeMapStart(yynn2962)
			}
			if yyr2962 || yy2arr2962 {
				if yyq2962[0] {
					yym2964 := z.EncBinary()
					_ = yym2964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2962[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2965 := z.EncBinary()
					_ = yym2965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yysep2962 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2966 := z.DecBinary()
	_ = yym2966
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2967 := r.ReadMapStart()
			if yyl2967 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2967, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2967 := r.ReadArrayStart()
			if yyl2967 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2967, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2968Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2968Slc
	var yyhl2968 bool = l >= 0
	for yyj2968 := 0; ; yyj2968++ {
		if yyhl2968 {
			if yyj2968 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2968Slc = r.DecodeBytes(yys2968Slc, true, true)
		yys2968 := string(yys2968Slc)
		switch yys2968 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2968)
		} // end switch yys2968
	} // end for yyj2968
	if !yyhl2968 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2970 int
	var yyb2970 bool
	var yyhl2970 bool = l >= 0
	yyj2970++
	if yyhl2970 {
		yyb2970 = yyj2970 > l
	} else {
		yyb2970 = r.CheckBreak()
	}
	if yyb2970 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2970++
		if yyhl2970 {
			yyb2970 = yyj2970 > l
		} else {
			yyb2970 = r.CheckBreak()
		}
		if yyb2970 {
			break
		}
		z.DecStructFieldNotFound(yyj2970-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2972 := z.EncBinary()
		_ = yym2972
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2973 := !z.EncBinary()
			yy2arr2973 := z.EncBasicHandle().StructToArray
			var yyq2973 [3]bool
			_, _, _ = yysep2973, yyq2973, yy2arr2973
			const yyr2973 bool = false
			yyq2973[0] = x.Kind != ""
			yyq2973[1] = true
			yyq2973[2] = true
			if yyr2973 || yy2arr2973 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2973 int = 0
				for _, b := range yyq2973 {
					if b {
						yynn2973++
					}
				}
				r.EncodeMapStart(yynn2973)
			}
			if yyr2973 || yy2arr2973 {
				if yyq2973[0] {
					yym2975 := z.EncBinary()
					_ = yym2975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2973[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2976 := z.EncBinary()
					_ = yym2976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2973 || yy2arr2973 {
				if yyq2973[1] {
					yy2978 := &x.APIVersion
					yym2979 := z.EncBinary()
					_ = yym2979
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2978) {
					} else if !yym2979 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2978)
					} else {
						z.EncFallback(yy2978)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2973[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2980 := &x.APIVersion
					yym2981 := z.EncBinary()
					_ = yym2981
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2980) {
					} else if !yym2981 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2980)
					} else {
						z.EncFallback(yy2980)
					}
				}
			}
			if yyr2973 || yy2arr2973 {
				if yyq2973[2] {
					yy2983 := &x.Reference
					yy2983.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2973[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy2984 := &x.Reference
					yy2984.CodecEncodeSelf(e)
				}
			}
			if yysep2973 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2985 := z.DecBinary()
	_ = yym2985
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2986 := r.ReadMapStart()
			if yyl2986 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2986, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2986 := r.ReadArrayStart()
			if yyl2986 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2986, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2987Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2987Slc
	var yyhl2987 bool = l >= 0
	for yyj2987 := 0; ; yyj2987++ {
		if yyhl2987 {
			if yyj2987 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2987Slc = r.DecodeBytes(yys2987Slc, true, true)
		yys2987 := string(yys2987Slc)
		switch yys2987 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2989 := &x.APIVersion
				yym2990 := z.DecBinary()
				_ = yym2990
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2989) {
				} else if !yym2990 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2989)
				} else {
					z.DecFallback(yyv2989, false)
				}
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2991 := &x.Reference
				yyv2991.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2987)
		} // end switch yys2987
	} // end for yyj2987
	if !yyhl2987 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2992 int
	var yyb2992 bool
	var yyhl2992 bool = l >= 0
	yyj2992++
	if yyhl2992 {
		yyb2992 = yyj2992 > l
	} else {
		yyb2992 = r.CheckBreak()
	}
	if yyb2992 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2992++
	if yyhl2992 {
		yyb2992 = yyj2992 > l
	} else {
		yyb2992 = r.CheckBreak()
	}
	if yyb2992 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2994 := &x.APIVersion
		yym2995 := z.DecBinary()
		_ = yym2995
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2994) {
		} else if !yym2995 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2994)
		} else {
			z.DecFallback(yyv2994, false)
		}
	}
	yyj2992++
	if yyhl2992 {
		yyb2992 = yyj2992 > l
	} else {
		yyb2992 = r.CheckBreak()
	}
	if yyb2992 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2996 := &x.Reference
		yyv2996.CodecDecodeSelf(d)
	}
	for {
		yyj2992++
		if yyhl2992 {
			yyb2992 = yyj2992 > l
		} else {
			yyb2992 = r.CheckBreak()
		}
		if yyb2992 {
			break
		}
		z.DecStructFieldNotFound(yyj2992-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2997 := z.EncBinary()
		_ = yym2997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2998 := !z.EncBinary()
			yy2arr2998 := z.EncBasicHandle().StructToArray
			var yyq2998 [2]bool
			_, _, _ = yysep2998, yyq2998, yy2arr2998
			const yyr2998 bool = false
			yyq2998[0] = x.Component != ""
			yyq2998[1] = x.Host != ""
			if yyr2998 || yy2arr2998 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2998 int = 0
				for _, b := range yyq2998 {
					if b {
						yynn2998++
					}
				}
				r.EncodeMapStart(yynn2998)
			}
			if yyr2998 || yy2arr2998 {
				if yyq2998[0] {
					yym3000 := z.EncBinary()
					_ = yym3000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2998[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym3001 := z.EncBinary()
					_ = yym3001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2998 || yy2arr2998 {
				if yyq2998[1] {
					yym3003 := z.EncBinary()
					_ = yym3003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2998[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym3004 := z.EncBinary()
					_ = yym3004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep2998 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3005 := z.DecBinary()
	_ = yym3005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3006 := r.ReadMapStart()
			if yyl3006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3006, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3006 := r.ReadArrayStart()
			if yyl3006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3007Slc
	var yyhl3007 bool = l >= 0
	for yyj3007 := 0; ; yyj3007++ {
		if yyhl3007 {
			if yyj3007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3007Slc = r.DecodeBytes(yys3007Slc, true, true)
		yys3007 := string(yys3007Slc)
		switch yys3007 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3007)
		} // end switch yys3007
	} // end for yyj3007
	if !yyhl3007 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3010 int
	var yyb3010 bool
	var yyhl3010 bool = l >= 0
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3010++
		if yyhl3010 {
			yyb3010 = yyj3010 > l
		} else {
			yyb3010 = r.CheckBreak()
		}
		if yyb3010 {
			break
		}
		z.DecStructFieldNotFound(yyj3010-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3013 := z.EncBinary()
		_ = yym3013
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3014 := !z.EncBinary()
			yy2arr3014 := z.EncBasicHandle().StructToArray
			var yyq3014 [10]bool
			_, _, _ = yysep3014, yyq3014, yy2arr3014
			const yyr3014 bool = false
			yyq3014[0] = x.Kind != ""
			yyq3014[1] = true
			yyq3014[4] = x.Reason != ""
			yyq3014[5] = x.Message != ""
			yyq3014[6] = true
			yyq3014[7] = true
			yyq3014[8] = true
			yyq3014[9] = x.Count != 0
			if yyr3014 || yy2arr3014 {
				r.EncodeArrayStart(10)
			} else {
				var yynn3014 int = 2
				for _, b := range yyq3014 {
					if b {
						yynn3014++
					}
				}
				r.EncodeMapStart(yynn3014)
			}
			if yyr3014 || yy2arr3014 {
				if yyq3014[0] {
					yym3016 := z.EncBinary()
					_ = yym3016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3014[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3017 := z.EncBinary()
					_ = yym3017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3014 || yy2arr3014 {
				if yyq3014[1] {
					yy3019 := &x.APIVersion
					yym3020 := z.EncBinary()
					_ = yym3020
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3019) {
					} else if !yym3020 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3019)
					} else {
						z.EncFallback(yy3019)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3014[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3021 := &x.APIVersion
					yym3022 := z.EncBinary()
					_ = yym3022
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3021) {
					} else if !yym3022 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3021)
					} else {
						z.EncFallback(yy3021)
					}
				}
			}
			if yyr3014 || yy2arr3014 {
				yy3024 := &x.ObjectMeta
				yy3024.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				yy3025 := &x.ObjectMeta
				yy3025.CodecEncodeSelf(e)
			}
			if yyr3014 || yy2arr3014 {
				yy3027 := &x.InvolvedObject
				yy3027.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				yy3028 := &x.InvolvedObject
				yy3028.CodecEncodeSelf(e)
			}
			if yyr3014 || yy2arr3014 {
				if yyq3014[4] {
					yym3030 := z.EncBinary()
					_ = yym3030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3014[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym3031 := z.EncBinary()
					_ = yym3031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3014 || yy2arr3014 {
				if yyq3014[5] {
					yym3033 := z.EncBinary()
					_ = yym3033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3014[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3034 := z.EncBinary()
					_ = yym3034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3014 || yy2arr3014 {
				if yyq3014[6] {
					yy3036 := &x.Source
					yy3036.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3014[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy3037 := &x.Source
					yy3037.CodecEncodeSelf(e)
				}
			}
			if yyr3014 || yy2arr3014 {
				if yyq3014[7] {
					yy3039 := &x.FirstTimestamp
					yym3040 := z.EncBinary()
					_ = yym3040
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3039) {
					} else if yym3040 {
						z.EncBinaryMarshal(yy3039)
					} else if !yym3040 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3039)
					} else {
						z.EncFallback(yy3039)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3014[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy3041 := &x.FirstTimestamp
					yym3042 := z.EncBinary()
					_ = yym3042
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3041) {
					} else if yym3042 {
						z.EncBinaryMarshal(yy3041)
					} else if !yym3042 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3041)
					} else {
						z.EncFallback(yy3041)
					}
				}
			}
			if yyr3014 || yy2arr3014 {
				if yyq3014[8] {
					yy3044 := &x.LastTimestamp
					yym3045 := z.EncBinary()
					_ = yym3045
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3044) {
					} else if yym3045 {
						z.EncBinaryMarshal(yy3044)
					} else if !yym3045 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3044)
					} else {
						z.EncFallback(yy3044)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3014[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy3046 := &x.LastTimestamp
					yym3047 := z.EncBinary()
					_ = yym3047
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3046) {
					} else if yym3047 {
						z.EncBinaryMarshal(yy3046)
					} else if !yym3047 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3046)
					} else {
						z.EncFallback(yy3046)
					}
				}
			}
			if yyr3014 || yy2arr3014 {
				if yyq3014[9] {
					yym3049 := z.EncBinary()
					_ = yym3049
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3014[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym3050 := z.EncBinary()
					_ = yym3050
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep3014 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3051 := z.DecBinary()
	_ = yym3051
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3052 := r.ReadMapStart()
			if yyl3052 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3052, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3052 := r.ReadArrayStart()
			if yyl3052 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3052, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3053Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3053Slc
	var yyhl3053 bool = l >= 0
	for yyj3053 := 0; ; yyj3053++ {
		if yyhl3053 {
			if yyj3053 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3053Slc = r.DecodeBytes(yys3053Slc, true, true)
		yys3053 := string(yys3053Slc)
		switch yys3053 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3055 := &x.APIVersion
				yym3056 := z.DecBinary()
				_ = yym3056
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3055) {
				} else if !yym3056 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3055)
				} else {
					z.DecFallback(yyv3055, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3057 := &x.ObjectMeta
				yyv3057.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3058 := &x.InvolvedObject
				yyv3058.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3061 := &x.Source
				yyv3061.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3062 := &x.FirstTimestamp
				yym3063 := z.DecBinary()
				_ = yym3063
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3062) {
				} else if yym3063 {
					z.DecBinaryUnmarshal(yyv3062)
				} else if !yym3063 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3062)
				} else {
					z.DecFallback(yyv3062, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3064 := &x.LastTimestamp
				yym3065 := z.DecBinary()
				_ = yym3065
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3064) {
				} else if yym3065 {
					z.DecBinaryUnmarshal(yyv3064)
				} else if !yym3065 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3064)
				} else {
					z.DecFallback(yyv3064, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3053)
		} // end switch yys3053
	} // end for yyj3053
	if !yyhl3053 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3067 int
	var yyb3067 bool
	var yyhl3067 bool = l >= 0
	yyj3067++
	if yyhl3067 {
		yyb3067 = yyj3067 > l
	} else {
		yyb3067 = r.CheckBreak()
	}
	if yyb3067 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3067++
	if yyhl3067 {
		yyb3067 = yyj3067 > l
	} else {
		yyb3067 = r.CheckBreak()
	}
	if yyb3067 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3069 := &x.APIVersion
		yym3070 := z.DecBinary()
		_ = yym3070
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3069) {
		} else if !yym3070 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3069)
		} else {
			z.DecFallback(yyv3069, false)
		}
	}
	yyj3067++
	if yyhl3067 {
		yyb3067 = yyj3067 > l
	} else {
		yyb3067 = r.CheckBreak()
	}
	if yyb3067 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3071 := &x.ObjectMeta
		yyv3071.CodecDecodeSelf(d)
	}
	yyj3067++
	if yyhl3067 {
		yyb3067 = yyj3067 > l
	} else {
		yyb3067 = r.CheckBreak()
	}
	if yyb3067 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3072 := &x.InvolvedObject
		yyv3072.CodecDecodeSelf(d)
	}
	yyj3067++
	if yyhl3067 {
		yyb3067 = yyj3067 > l
	} else {
		yyb3067 = r.CheckBreak()
	}
	if yyb3067 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3067++
	if yyhl3067 {
		yyb3067 = yyj3067 > l
	} else {
		yyb3067 = r.CheckBreak()
	}
	if yyb3067 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3067++
	if yyhl3067 {
		yyb3067 = yyj3067 > l
	} else {
		yyb3067 = r.CheckBreak()
	}
	if yyb3067 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3075 := &x.Source
		yyv3075.CodecDecodeSelf(d)
	}
	yyj3067++
	if yyhl3067 {
		yyb3067 = yyj3067 > l
	} else {
		yyb3067 = r.CheckBreak()
	}
	if yyb3067 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3076 := &x.FirstTimestamp
		yym3077 := z.DecBinary()
		_ = yym3077
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3076) {
		} else if yym3077 {
			z.DecBinaryUnmarshal(yyv3076)
		} else if !yym3077 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3076)
		} else {
			z.DecFallback(yyv3076, false)
		}
	}
	yyj3067++
	if yyhl3067 {
		yyb3067 = yyj3067 > l
	} else {
		yyb3067 = r.CheckBreak()
	}
	if yyb3067 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3078 := &x.LastTimestamp
		yym3079 := z.DecBinary()
		_ = yym3079
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3078) {
		} else if yym3079 {
			z.DecBinaryUnmarshal(yyv3078)
		} else if !yym3079 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3078)
		} else {
			z.DecFallback(yyv3078, false)
		}
	}
	yyj3067++
	if yyhl3067 {
		yyb3067 = yyj3067 > l
	} else {
		yyb3067 = r.CheckBreak()
	}
	if yyb3067 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj3067++
		if yyhl3067 {
			yyb3067 = yyj3067 > l
		} else {
			yyb3067 = r.CheckBreak()
		}
		if yyb3067 {
			break
		}
		z.DecStructFieldNotFound(yyj3067-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3081 := z.EncBinary()
		_ = yym3081
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3082 := !z.EncBinary()
			yy2arr3082 := z.EncBasicHandle().StructToArray
			var yyq3082 [4]bool
			_, _, _ = yysep3082, yyq3082, yy2arr3082
			const yyr3082 bool = false
			yyq3082[0] = x.Kind != ""
			yyq3082[1] = true
			yyq3082[2] = true
			if yyr3082 || yy2arr3082 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3082 int = 1
				for _, b := range yyq3082 {
					if b {
						yynn3082++
					}
				}
				r.EncodeMapStart(yynn3082)
			}
			if yyr3082 || yy2arr3082 {
				if yyq3082[0] {
					yym3084 := z.EncBinary()
					_ = yym3084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3082[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3085 := z.EncBinary()
					_ = yym3085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3082 || yy2arr3082 {
				if yyq3082[1] {
					yy3087 := &x.APIVersion
					yym3088 := z.EncBinary()
					_ = yym3088
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3087) {
					} else if !yym3088 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3087)
					} else {
						z.EncFallback(yy3087)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3082[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3089 := &x.APIVersion
					yym3090 := z.EncBinary()
					_ = yym3090
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3089) {
					} else if !yym3090 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3089)
					} else {
						z.EncFallback(yy3089)
					}
				}
			}
			if yyr3082 || yy2arr3082 {
				if yyq3082[2] {
					yy3092 := &x.ListMeta
					yym3093 := z.EncBinary()
					_ = yym3093
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3092) {
					} else {
						z.EncFallback(yy3092)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3082[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3094 := &x.ListMeta
					yym3095 := z.EncBinary()
					_ = yym3095
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3094) {
					} else {
						z.EncFallback(yy3094)
					}
				}
			}
			if yyr3082 || yy2arr3082 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3098 := z.EncBinary()
					_ = yym3098
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep3082 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3099 := z.DecBinary()
	_ = yym3099
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3100 := r.ReadMapStart()
			if yyl3100 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3100, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3100 := r.ReadArrayStart()
			if yyl3100 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3100, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3101Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3101Slc
	var yyhl3101 bool = l >= 0
	for yyj3101 := 0; ; yyj3101++ {
		if yyhl3101 {
			if yyj3101 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3101Slc = r.DecodeBytes(yys3101Slc, true, true)
		yys3101 := string(yys3101Slc)
		switch yys3101 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3103 := &x.APIVersion
				yym3104 := z.DecBinary()
				_ = yym3104
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3103) {
				} else if !yym3104 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3103)
				} else {
					z.DecFallback(yyv3103, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3105 := &x.ListMeta
				yym3106 := z.DecBinary()
				_ = yym3106
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3105) {
				} else {
					z.DecFallback(yyv3105, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3107 := &x.Items
				yym3108 := z.DecBinary()
				_ = yym3108
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3107), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3101)
		} // end switch yys3101
	} // end for yyj3101
	if !yyhl3101 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3109 int
	var yyb3109 bool
	var yyhl3109 bool = l >= 0
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3111 := &x.APIVersion
		yym3112 := z.DecBinary()
		_ = yym3112
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3111) {
		} else if !yym3112 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3111)
		} else {
			z.DecFallback(yyv3111, false)
		}
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3113 := &x.ListMeta
		yym3114 := z.DecBinary()
		_ = yym3114
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3113) {
		} else {
			z.DecFallback(yyv3113, false)
		}
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3115 := &x.Items
		yym3116 := z.DecBinary()
		_ = yym3116
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3115), d)
		}
	}
	for {
		yyj3109++
		if yyhl3109 {
			yyb3109 = yyj3109 > l
		} else {
			yyb3109 = r.CheckBreak()
		}
		if yyb3109 {
			break
		}
		z.DecStructFieldNotFound(yyj3109-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3117 := z.EncBinary()
		_ = yym3117
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3118 := !z.EncBinary()
			yy2arr3118 := z.EncBasicHandle().StructToArray
			var yyq3118 [4]bool
			_, _, _ = yysep3118, yyq3118, yy2arr3118
			const yyr3118 bool = false
			yyq3118[0] = x.Kind != ""
			yyq3118[1] = true
			yyq3118[2] = true
			if yyr3118 || yy2arr3118 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3118 int = 1
				for _, b := range yyq3118 {
					if b {
						yynn3118++
					}
				}
				r.EncodeMapStart(yynn3118)
			}
			if yyr3118 || yy2arr3118 {
				if yyq3118[0] {
					yym3120 := z.EncBinary()
					_ = yym3120
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3118[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3121 := z.EncBinary()
					_ = yym3121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3118 || yy2arr3118 {
				if yyq3118[1] {
					yy3123 := &x.APIVersion
					yym3124 := z.EncBinary()
					_ = yym3124
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3123) {
					} else if !yym3124 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3123)
					} else {
						z.EncFallback(yy3123)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3118[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3125 := &x.APIVersion
					yym3126 := z.EncBinary()
					_ = yym3126
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3125) {
					} else if !yym3126 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3125)
					} else {
						z.EncFallback(yy3125)
					}
				}
			}
			if yyr3118 || yy2arr3118 {
				if yyq3118[2] {
					yy3128 := &x.ListMeta
					yym3129 := z.EncBinary()
					_ = yym3129
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3128) {
					} else {
						z.EncFallback(yy3128)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3118[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3130 := &x.ListMeta
					yym3131 := z.EncBinary()
					_ = yym3131
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3130) {
					} else {
						z.EncFallback(yy3130)
					}
				}
			}
			if yyr3118 || yy2arr3118 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3133 := z.EncBinary()
					_ = yym3133
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3134 := z.EncBinary()
					_ = yym3134
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yysep3118 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3135 := z.DecBinary()
	_ = yym3135
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3136 := r.ReadMapStart()
			if yyl3136 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3136, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3136 := r.ReadArrayStart()
			if yyl3136 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3136, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3137Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3137Slc
	var yyhl3137 bool = l >= 0
	for yyj3137 := 0; ; yyj3137++ {
		if yyhl3137 {
			if yyj3137 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3137Slc = r.DecodeBytes(yys3137Slc, true, true)
		yys3137 := string(yys3137Slc)
		switch yys3137 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3139 := &x.APIVersion
				yym3140 := z.DecBinary()
				_ = yym3140
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3139) {
				} else if !yym3140 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3139)
				} else {
					z.DecFallback(yyv3139, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3141 := &x.ListMeta
				yym3142 := z.DecBinary()
				_ = yym3142
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3141) {
				} else {
					z.DecFallback(yyv3141, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3143 := &x.Items
				yym3144 := z.DecBinary()
				_ = yym3144
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3143), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3137)
		} // end switch yys3137
	} // end for yyj3137
	if !yyhl3137 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3145 int
	var yyb3145 bool
	var yyhl3145 bool = l >= 0
	yyj3145++
	if yyhl3145 {
		yyb3145 = yyj3145 > l
	} else {
		yyb3145 = r.CheckBreak()
	}
	if yyb3145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3145++
	if yyhl3145 {
		yyb3145 = yyj3145 > l
	} else {
		yyb3145 = r.CheckBreak()
	}
	if yyb3145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3147 := &x.APIVersion
		yym3148 := z.DecBinary()
		_ = yym3148
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3147) {
		} else if !yym3148 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3147)
		} else {
			z.DecFallback(yyv3147, false)
		}
	}
	yyj3145++
	if yyhl3145 {
		yyb3145 = yyj3145 > l
	} else {
		yyb3145 = r.CheckBreak()
	}
	if yyb3145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3149 := &x.ListMeta
		yym3150 := z.DecBinary()
		_ = yym3150
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3149) {
		} else {
			z.DecFallback(yyv3149, false)
		}
	}
	yyj3145++
	if yyhl3145 {
		yyb3145 = yyj3145 > l
	} else {
		yyb3145 = r.CheckBreak()
	}
	if yyb3145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3151 := &x.Items
		yym3152 := z.DecBinary()
		_ = yym3152
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3151), d)
		}
	}
	for {
		yyj3145++
		if yyhl3145 {
			yyb3145 = yyj3145 > l
		} else {
			yyb3145 = r.CheckBreak()
		}
		if yyb3145 {
			break
		}
		z.DecStructFieldNotFound(yyj3145-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3153 := z.EncBinary()
	_ = yym3153
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3154 := z.DecBinary()
	_ = yym3154
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3155 := z.EncBinary()
		_ = yym3155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3156 := !z.EncBinary()
			yy2arr3156 := z.EncBasicHandle().StructToArray
			var yyq3156 [6]bool
			_, _, _ = yysep3156, yyq3156, yy2arr3156
			const yyr3156 bool = false
			yyq3156[0] = x.Type != ""
			yyq3156[1] = len(x.Max) != 0
			yyq3156[2] = len(x.Min) != 0
			yyq3156[3] = len(x.Default) != 0
			yyq3156[4] = len(x.DefaultRequest) != 0
			yyq3156[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr3156 || yy2arr3156 {
				r.EncodeArrayStart(6)
			} else {
				var yynn3156 int = 0
				for _, b := range yyq3156 {
					if b {
						yynn3156++
					}
				}
				r.EncodeMapStart(yynn3156)
			}
			if yyr3156 || yy2arr3156 {
				if yyq3156[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3156[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3156 || yy2arr3156 {
				if yyq3156[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3156[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3156 || yy2arr3156 {
				if yyq3156[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3156[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3156 || yy2arr3156 {
				if yyq3156[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3156[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3156 || yy2arr3156 {
				if yyq3156[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3156[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3156 || yy2arr3156 {
				if yyq3156[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3156[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3156 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3163 := z.DecBinary()
	_ = yym3163
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3164 := r.ReadMapStart()
			if yyl3164 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3164, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3164 := r.ReadArrayStart()
			if yyl3164 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3164, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3165Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3165Slc
	var yyhl3165 bool = l >= 0
	for yyj3165 := 0; ; yyj3165++ {
		if yyhl3165 {
			if yyj3165 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3165Slc = r.DecodeBytes(yys3165Slc, true, true)
		yys3165 := string(yys3165Slc)
		switch yys3165 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3167 := &x.Max
				yyv3167.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3168 := &x.Min
				yyv3168.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3169 := &x.Default
				yyv3169.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3170 := &x.DefaultRequest
				yyv3170.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3171 := &x.MaxLimitRequestRatio
				yyv3171.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3165)
		} // end switch yys3165
	} // end for yyj3165
	if !yyhl3165 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3172 int
	var yyb3172 bool
	var yyhl3172 bool = l >= 0
	yyj3172++
	if yyhl3172 {
		yyb3172 = yyj3172 > l
	} else {
		yyb3172 = r.CheckBreak()
	}
	if yyb3172 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3172++
	if yyhl3172 {
		yyb3172 = yyj3172 > l
	} else {
		yyb3172 = r.CheckBreak()
	}
	if yyb3172 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3174 := &x.Max
		yyv3174.CodecDecodeSelf(d)
	}
	yyj3172++
	if yyhl3172 {
		yyb3172 = yyj3172 > l
	} else {
		yyb3172 = r.CheckBreak()
	}
	if yyb3172 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3175 := &x.Min
		yyv3175.CodecDecodeSelf(d)
	}
	yyj3172++
	if yyhl3172 {
		yyb3172 = yyj3172 > l
	} else {
		yyb3172 = r.CheckBreak()
	}
	if yyb3172 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3176 := &x.Default
		yyv3176.CodecDecodeSelf(d)
	}
	yyj3172++
	if yyhl3172 {
		yyb3172 = yyj3172 > l
	} else {
		yyb3172 = r.CheckBreak()
	}
	if yyb3172 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3177 := &x.DefaultRequest
		yyv3177.CodecDecodeSelf(d)
	}
	yyj3172++
	if yyhl3172 {
		yyb3172 = yyj3172 > l
	} else {
		yyb3172 = r.CheckBreak()
	}
	if yyb3172 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3178 := &x.MaxLimitRequestRatio
		yyv3178.CodecDecodeSelf(d)
	}
	for {
		yyj3172++
		if yyhl3172 {
			yyb3172 = yyj3172 > l
		} else {
			yyb3172 = r.CheckBreak()
		}
		if yyb3172 {
			break
		}
		z.DecStructFieldNotFound(yyj3172-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3179 := z.EncBinary()
		_ = yym3179
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3180 := !z.EncBinary()
			yy2arr3180 := z.EncBasicHandle().StructToArray
			var yyq3180 [1]bool
			_, _, _ = yysep3180, yyq3180, yy2arr3180
			const yyr3180 bool = false
			if yyr3180 || yy2arr3180 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3180 int = 1
				for _, b := range yyq3180 {
					if b {
						yynn3180++
					}
				}
				r.EncodeMapStart(yynn3180)
			}
			if yyr3180 || yy2arr3180 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3182 := z.EncBinary()
					_ = yym3182
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3183 := z.EncBinary()
					_ = yym3183
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep3180 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3184 := z.DecBinary()
	_ = yym3184
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3185 := r.ReadMapStart()
			if yyl3185 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3185, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3185 := r.ReadArrayStart()
			if yyl3185 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3185, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3186Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3186Slc
	var yyhl3186 bool = l >= 0
	for yyj3186 := 0; ; yyj3186++ {
		if yyhl3186 {
			if yyj3186 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3186Slc = r.DecodeBytes(yys3186Slc, true, true)
		yys3186 := string(yys3186Slc)
		switch yys3186 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3187 := &x.Limits
				yym3188 := z.DecBinary()
				_ = yym3188
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3187), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3186)
		} // end switch yys3186
	} // end for yyj3186
	if !yyhl3186 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3189 int
	var yyb3189 bool
	var yyhl3189 bool = l >= 0
	yyj3189++
	if yyhl3189 {
		yyb3189 = yyj3189 > l
	} else {
		yyb3189 = r.CheckBreak()
	}
	if yyb3189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3190 := &x.Limits
		yym3191 := z.DecBinary()
		_ = yym3191
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3190), d)
		}
	}
	for {
		yyj3189++
		if yyhl3189 {
			yyb3189 = yyj3189 > l
		} else {
			yyb3189 = r.CheckBreak()
		}
		if yyb3189 {
			break
		}
		z.DecStructFieldNotFound(yyj3189-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3192 := z.EncBinary()
		_ = yym3192
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3193 := !z.EncBinary()
			yy2arr3193 := z.EncBasicHandle().StructToArray
			var yyq3193 [4]bool
			_, _, _ = yysep3193, yyq3193, yy2arr3193
			const yyr3193 bool = false
			yyq3193[0] = x.Kind != ""
			yyq3193[1] = true
			yyq3193[2] = true
			yyq3193[3] = true
			if yyr3193 || yy2arr3193 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3193 int = 0
				for _, b := range yyq3193 {
					if b {
						yynn3193++
					}
				}
				r.EncodeMapStart(yynn3193)
			}
			if yyr3193 || yy2arr3193 {
				if yyq3193[0] {
					yym3195 := z.EncBinary()
					_ = yym3195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3193[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3196 := z.EncBinary()
					_ = yym3196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3193 || yy2arr3193 {
				if yyq3193[1] {
					yy3198 := &x.APIVersion
					yym3199 := z.EncBinary()
					_ = yym3199
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3198) {
					} else if !yym3199 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3198)
					} else {
						z.EncFallback(yy3198)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3193[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3200 := &x.APIVersion
					yym3201 := z.EncBinary()
					_ = yym3201
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3200) {
					} else if !yym3201 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3200)
					} else {
						z.EncFallback(yy3200)
					}
				}
			}
			if yyr3193 || yy2arr3193 {
				if yyq3193[2] {
					yy3203 := &x.ObjectMeta
					yy3203.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3193[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3204 := &x.ObjectMeta
					yy3204.CodecEncodeSelf(e)
				}
			}
			if yyr3193 || yy2arr3193 {
				if yyq3193[3] {
					yy3206 := &x.Spec
					yy3206.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3193[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3207 := &x.Spec
					yy3207.CodecEncodeSelf(e)
				}
			}
			if yysep3193 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3208 := z.DecBinary()
	_ = yym3208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3209 := r.ReadMapStart()
			if yyl3209 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3209, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3209 := r.ReadArrayStart()
			if yyl3209 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3210Slc
	var yyhl3210 bool = l >= 0
	for yyj3210 := 0; ; yyj3210++ {
		if yyhl3210 {
			if yyj3210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3210Slc = r.DecodeBytes(yys3210Slc, true, true)
		yys3210 := string(yys3210Slc)
		switch yys3210 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3212 := &x.APIVersion
				yym3213 := z.DecBinary()
				_ = yym3213
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3212) {
				} else if !yym3213 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3212)
				} else {
					z.DecFallback(yyv3212, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3214 := &x.ObjectMeta
				yyv3214.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3215 := &x.Spec
				yyv3215.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3210)
		} // end switch yys3210
	} // end for yyj3210
	if !yyhl3210 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3216 int
	var yyb3216 bool
	var yyhl3216 bool = l >= 0
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3218 := &x.APIVersion
		yym3219 := z.DecBinary()
		_ = yym3219
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3218) {
		} else if !yym3219 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3218)
		} else {
			z.DecFallback(yyv3218, false)
		}
	}
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3220 := &x.ObjectMeta
		yyv3220.CodecDecodeSelf(d)
	}
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3221 := &x.Spec
		yyv3221.CodecDecodeSelf(d)
	}
	for {
		yyj3216++
		if yyhl3216 {
			yyb3216 = yyj3216 > l
		} else {
			yyb3216 = r.CheckBreak()
		}
		if yyb3216 {
			break
		}
		z.DecStructFieldNotFound(yyj3216-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3222 := z.EncBinary()
		_ = yym3222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3223 := !z.EncBinary()
			yy2arr3223 := z.EncBasicHandle().StructToArray
			var yyq3223 [4]bool
			_, _, _ = yysep3223, yyq3223, yy2arr3223
			const yyr3223 bool = false
			yyq3223[0] = x.Kind != ""
			yyq3223[1] = true
			yyq3223[2] = true
			if yyr3223 || yy2arr3223 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3223 int = 1
				for _, b := range yyq3223 {
					if b {
						yynn3223++
					}
				}
				r.EncodeMapStart(yynn3223)
			}
			if yyr3223 || yy2arr3223 {
				if yyq3223[0] {
					yym3225 := z.EncBinary()
					_ = yym3225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3223[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3226 := z.EncBinary()
					_ = yym3226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3223 || yy2arr3223 {
				if yyq3223[1] {
					yy3228 := &x.APIVersion
					yym3229 := z.EncBinary()
					_ = yym3229
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3228) {
					} else if !yym3229 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3228)
					} else {
						z.EncFallback(yy3228)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3223[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3230 := &x.APIVersion
					yym3231 := z.EncBinary()
					_ = yym3231
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3230) {
					} else if !yym3231 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3230)
					} else {
						z.EncFallback(yy3230)
					}
				}
			}
			if yyr3223 || yy2arr3223 {
				if yyq3223[2] {
					yy3233 := &x.ListMeta
					yym3234 := z.EncBinary()
					_ = yym3234
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3233) {
					} else {
						z.EncFallback(yy3233)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3223[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3235 := &x.ListMeta
					yym3236 := z.EncBinary()
					_ = yym3236
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3235) {
					} else {
						z.EncFallback(yy3235)
					}
				}
			}
			if yyr3223 || yy2arr3223 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3238 := z.EncBinary()
					_ = yym3238
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3239 := z.EncBinary()
					_ = yym3239
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3223 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3240 := z.DecBinary()
	_ = yym3240
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3241 := r.ReadMapStart()
			if yyl3241 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3241, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3241 := r.ReadArrayStart()
			if yyl3241 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3241, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3242Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3242Slc
	var yyhl3242 bool = l >= 0
	for yyj3242 := 0; ; yyj3242++ {
		if yyhl3242 {
			if yyj3242 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3242Slc = r.DecodeBytes(yys3242Slc, true, true)
		yys3242 := string(yys3242Slc)
		switch yys3242 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3244 := &x.APIVersion
				yym3245 := z.DecBinary()
				_ = yym3245
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3244) {
				} else if !yym3245 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3244)
				} else {
					z.DecFallback(yyv3244, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3246 := &x.ListMeta
				yym3247 := z.DecBinary()
				_ = yym3247
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3246) {
				} else {
					z.DecFallback(yyv3246, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3248 := &x.Items
				yym3249 := z.DecBinary()
				_ = yym3249
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3248), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3242)
		} // end switch yys3242
	} // end for yyj3242
	if !yyhl3242 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3250 int
	var yyb3250 bool
	var yyhl3250 bool = l >= 0
	yyj3250++
	if yyhl3250 {
		yyb3250 = yyj3250 > l
	} else {
		yyb3250 = r.CheckBreak()
	}
	if yyb3250 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3250++
	if yyhl3250 {
		yyb3250 = yyj3250 > l
	} else {
		yyb3250 = r.CheckBreak()
	}
	if yyb3250 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3252 := &x.APIVersion
		yym3253 := z.DecBinary()
		_ = yym3253
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3252) {
		} else if !yym3253 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3252)
		} else {
			z.DecFallback(yyv3252, false)
		}
	}
	yyj3250++
	if yyhl3250 {
		yyb3250 = yyj3250 > l
	} else {
		yyb3250 = r.CheckBreak()
	}
	if yyb3250 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3254 := &x.ListMeta
		yym3255 := z.DecBinary()
		_ = yym3255
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3254) {
		} else {
			z.DecFallback(yyv3254, false)
		}
	}
	yyj3250++
	if yyhl3250 {
		yyb3250 = yyj3250 > l
	} else {
		yyb3250 = r.CheckBreak()
	}
	if yyb3250 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3256 := &x.Items
		yym3257 := z.DecBinary()
		_ = yym3257
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3256), d)
		}
	}
	for {
		yyj3250++
		if yyhl3250 {
			yyb3250 = yyj3250 > l
		} else {
			yyb3250 = r.CheckBreak()
		}
		if yyb3250 {
			break
		}
		z.DecStructFieldNotFound(yyj3250-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3258 := z.EncBinary()
		_ = yym3258
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3259 := !z.EncBinary()
			yy2arr3259 := z.EncBasicHandle().StructToArray
			var yyq3259 [1]bool
			_, _, _ = yysep3259, yyq3259, yy2arr3259
			const yyr3259 bool = false
			yyq3259[0] = len(x.Hard) != 0
			if yyr3259 || yy2arr3259 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3259 int = 0
				for _, b := range yyq3259 {
					if b {
						yynn3259++
					}
				}
				r.EncodeMapStart(yynn3259)
			}
			if yyr3259 || yy2arr3259 {
				if yyq3259[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3259[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3259 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3261 := z.DecBinary()
	_ = yym3261
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3262 := r.ReadMapStart()
			if yyl3262 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3262, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3262 := r.ReadArrayStart()
			if yyl3262 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3262, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3263Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3263Slc
	var yyhl3263 bool = l >= 0
	for yyj3263 := 0; ; yyj3263++ {
		if yyhl3263 {
			if yyj3263 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3263Slc = r.DecodeBytes(yys3263Slc, true, true)
		yys3263 := string(yys3263Slc)
		switch yys3263 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3264 := &x.Hard
				yyv3264.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3263)
		} // end switch yys3263
	} // end for yyj3263
	if !yyhl3263 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3265 int
	var yyb3265 bool
	var yyhl3265 bool = l >= 0
	yyj3265++
	if yyhl3265 {
		yyb3265 = yyj3265 > l
	} else {
		yyb3265 = r.CheckBreak()
	}
	if yyb3265 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3266 := &x.Hard
		yyv3266.CodecDecodeSelf(d)
	}
	for {
		yyj3265++
		if yyhl3265 {
			yyb3265 = yyj3265 > l
		} else {
			yyb3265 = r.CheckBreak()
		}
		if yyb3265 {
			break
		}
		z.DecStructFieldNotFound(yyj3265-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3267 := z.EncBinary()
		_ = yym3267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3268 := !z.EncBinary()
			yy2arr3268 := z.EncBasicHandle().StructToArray
			var yyq3268 [2]bool
			_, _, _ = yysep3268, yyq3268, yy2arr3268
			const yyr3268 bool = false
			yyq3268[0] = len(x.Hard) != 0
			yyq3268[1] = len(x.Used) != 0
			if yyr3268 || yy2arr3268 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3268 int = 0
				for _, b := range yyq3268 {
					if b {
						yynn3268++
					}
				}
				r.EncodeMapStart(yynn3268)
			}
			if yyr3268 || yy2arr3268 {
				if yyq3268[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3268[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3268 || yy2arr3268 {
				if yyq3268[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3268[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3268 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3271 := z.DecBinary()
	_ = yym3271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3272 := r.ReadMapStart()
			if yyl3272 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3272, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3272 := r.ReadArrayStart()
			if yyl3272 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3273Slc
	var yyhl3273 bool = l >= 0
	for yyj3273 := 0; ; yyj3273++ {
		if yyhl3273 {
			if yyj3273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3273Slc = r.DecodeBytes(yys3273Slc, true, true)
		yys3273 := string(yys3273Slc)
		switch yys3273 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3274 := &x.Hard
				yyv3274.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3275 := &x.Used
				yyv3275.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3273)
		} // end switch yys3273
	} // end for yyj3273
	if !yyhl3273 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3276 int
	var yyb3276 bool
	var yyhl3276 bool = l >= 0
	yyj3276++
	if yyhl3276 {
		yyb3276 = yyj3276 > l
	} else {
		yyb3276 = r.CheckBreak()
	}
	if yyb3276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3277 := &x.Hard
		yyv3277.CodecDecodeSelf(d)
	}
	yyj3276++
	if yyhl3276 {
		yyb3276 = yyj3276 > l
	} else {
		yyb3276 = r.CheckBreak()
	}
	if yyb3276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3278 := &x.Used
		yyv3278.CodecDecodeSelf(d)
	}
	for {
		yyj3276++
		if yyhl3276 {
			yyb3276 = yyj3276 > l
		} else {
			yyb3276 = r.CheckBreak()
		}
		if yyb3276 {
			break
		}
		z.DecStructFieldNotFound(yyj3276-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3279 := z.EncBinary()
		_ = yym3279
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3280 := !z.EncBinary()
			yy2arr3280 := z.EncBasicHandle().StructToArray
			var yyq3280 [5]bool
			_, _, _ = yysep3280, yyq3280, yy2arr3280
			const yyr3280 bool = false
			yyq3280[0] = x.Kind != ""
			yyq3280[1] = true
			yyq3280[2] = true
			yyq3280[3] = true
			yyq3280[4] = true
			if yyr3280 || yy2arr3280 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3280 int = 0
				for _, b := range yyq3280 {
					if b {
						yynn3280++
					}
				}
				r.EncodeMapStart(yynn3280)
			}
			if yyr3280 || yy2arr3280 {
				if yyq3280[0] {
					yym3282 := z.EncBinary()
					_ = yym3282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3280[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3283 := z.EncBinary()
					_ = yym3283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3280 || yy2arr3280 {
				if yyq3280[1] {
					yy3285 := &x.APIVersion
					yym3286 := z.EncBinary()
					_ = yym3286
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3285) {
					} else if !yym3286 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3285)
					} else {
						z.EncFallback(yy3285)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3280[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3287 := &x.APIVersion
					yym3288 := z.EncBinary()
					_ = yym3288
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3287) {
					} else if !yym3288 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3287)
					} else {
						z.EncFallback(yy3287)
					}
				}
			}
			if yyr3280 || yy2arr3280 {
				if yyq3280[2] {
					yy3290 := &x.ObjectMeta
					yy3290.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3280[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3291 := &x.ObjectMeta
					yy3291.CodecEncodeSelf(e)
				}
			}
			if yyr3280 || yy2arr3280 {
				if yyq3280[3] {
					yy3293 := &x.Spec
					yy3293.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3280[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3294 := &x.Spec
					yy3294.CodecEncodeSelf(e)
				}
			}
			if yyr3280 || yy2arr3280 {
				if yyq3280[4] {
					yy3296 := &x.Status
					yy3296.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3280[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3297 := &x.Status
					yy3297.CodecEncodeSelf(e)
				}
			}
			if yysep3280 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3298 := z.DecBinary()
	_ = yym3298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3299 := r.ReadMapStart()
			if yyl3299 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3299, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3299 := r.ReadArrayStart()
			if yyl3299 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3299, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3300Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3300Slc
	var yyhl3300 bool = l >= 0
	for yyj3300 := 0; ; yyj3300++ {
		if yyhl3300 {
			if yyj3300 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3300Slc = r.DecodeBytes(yys3300Slc, true, true)
		yys3300 := string(yys3300Slc)
		switch yys3300 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3302 := &x.APIVersion
				yym3303 := z.DecBinary()
				_ = yym3303
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3302) {
				} else if !yym3303 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3302)
				} else {
					z.DecFallback(yyv3302, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3304 := &x.ObjectMeta
				yyv3304.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3305 := &x.Spec
				yyv3305.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3306 := &x.Status
				yyv3306.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3300)
		} // end switch yys3300
	} // end for yyj3300
	if !yyhl3300 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3307 int
	var yyb3307 bool
	var yyhl3307 bool = l >= 0
	yyj3307++
	if yyhl3307 {
		yyb3307 = yyj3307 > l
	} else {
		yyb3307 = r.CheckBreak()
	}
	if yyb3307 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3307++
	if yyhl3307 {
		yyb3307 = yyj3307 > l
	} else {
		yyb3307 = r.CheckBreak()
	}
	if yyb3307 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3309 := &x.APIVersion
		yym3310 := z.DecBinary()
		_ = yym3310
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3309) {
		} else if !yym3310 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3309)
		} else {
			z.DecFallback(yyv3309, false)
		}
	}
	yyj3307++
	if yyhl3307 {
		yyb3307 = yyj3307 > l
	} else {
		yyb3307 = r.CheckBreak()
	}
	if yyb3307 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3311 := &x.ObjectMeta
		yyv3311.CodecDecodeSelf(d)
	}
	yyj3307++
	if yyhl3307 {
		yyb3307 = yyj3307 > l
	} else {
		yyb3307 = r.CheckBreak()
	}
	if yyb3307 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3312 := &x.Spec
		yyv3312.CodecDecodeSelf(d)
	}
	yyj3307++
	if yyhl3307 {
		yyb3307 = yyj3307 > l
	} else {
		yyb3307 = r.CheckBreak()
	}
	if yyb3307 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3313 := &x.Status
		yyv3313.CodecDecodeSelf(d)
	}
	for {
		yyj3307++
		if yyhl3307 {
			yyb3307 = yyj3307 > l
		} else {
			yyb3307 = r.CheckBreak()
		}
		if yyb3307 {
			break
		}
		z.DecStructFieldNotFound(yyj3307-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3314 := z.EncBinary()
		_ = yym3314
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3315 := !z.EncBinary()
			yy2arr3315 := z.EncBasicHandle().StructToArray
			var yyq3315 [4]bool
			_, _, _ = yysep3315, yyq3315, yy2arr3315
			const yyr3315 bool = false
			yyq3315[0] = x.Kind != ""
			yyq3315[1] = true
			yyq3315[2] = true
			if yyr3315 || yy2arr3315 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3315 int = 1
				for _, b := range yyq3315 {
					if b {
						yynn3315++
					}
				}
				r.EncodeMapStart(yynn3315)
			}
			if yyr3315 || yy2arr3315 {
				if yyq3315[0] {
					yym3317 := z.EncBinary()
					_ = yym3317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3315[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3318 := z.EncBinary()
					_ = yym3318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3315 || yy2arr3315 {
				if yyq3315[1] {
					yy3320 := &x.APIVersion
					yym3321 := z.EncBinary()
					_ = yym3321
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3320) {
					} else if !yym3321 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3320)
					} else {
						z.EncFallback(yy3320)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3315[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3322 := &x.APIVersion
					yym3323 := z.EncBinary()
					_ = yym3323
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3322) {
					} else if !yym3323 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3322)
					} else {
						z.EncFallback(yy3322)
					}
				}
			}
			if yyr3315 || yy2arr3315 {
				if yyq3315[2] {
					yy3325 := &x.ListMeta
					yym3326 := z.EncBinary()
					_ = yym3326
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3325) {
					} else {
						z.EncFallback(yy3325)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3315[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3327 := &x.ListMeta
					yym3328 := z.EncBinary()
					_ = yym3328
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3327) {
					} else {
						z.EncFallback(yy3327)
					}
				}
			}
			if yyr3315 || yy2arr3315 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3330 := z.EncBinary()
					_ = yym3330
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3331 := z.EncBinary()
					_ = yym3331
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3315 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3332 := z.DecBinary()
	_ = yym3332
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3333 := r.ReadMapStart()
			if yyl3333 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3333, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3333 := r.ReadArrayStart()
			if yyl3333 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3333, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3334Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3334Slc
	var yyhl3334 bool = l >= 0
	for yyj3334 := 0; ; yyj3334++ {
		if yyhl3334 {
			if yyj3334 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3334Slc = r.DecodeBytes(yys3334Slc, true, true)
		yys3334 := string(yys3334Slc)
		switch yys3334 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3336 := &x.APIVersion
				yym3337 := z.DecBinary()
				_ = yym3337
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3336) {
				} else if !yym3337 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3336)
				} else {
					z.DecFallback(yyv3336, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3338 := &x.ListMeta
				yym3339 := z.DecBinary()
				_ = yym3339
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3338) {
				} else {
					z.DecFallback(yyv3338, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3340 := &x.Items
				yym3341 := z.DecBinary()
				_ = yym3341
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3340), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3334)
		} // end switch yys3334
	} // end for yyj3334
	if !yyhl3334 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3342 int
	var yyb3342 bool
	var yyhl3342 bool = l >= 0
	yyj3342++
	if yyhl3342 {
		yyb3342 = yyj3342 > l
	} else {
		yyb3342 = r.CheckBreak()
	}
	if yyb3342 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3342++
	if yyhl3342 {
		yyb3342 = yyj3342 > l
	} else {
		yyb3342 = r.CheckBreak()
	}
	if yyb3342 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3344 := &x.APIVersion
		yym3345 := z.DecBinary()
		_ = yym3345
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3344) {
		} else if !yym3345 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3344)
		} else {
			z.DecFallback(yyv3344, false)
		}
	}
	yyj3342++
	if yyhl3342 {
		yyb3342 = yyj3342 > l
	} else {
		yyb3342 = r.CheckBreak()
	}
	if yyb3342 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3346 := &x.ListMeta
		yym3347 := z.DecBinary()
		_ = yym3347
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3346) {
		} else {
			z.DecFallback(yyv3346, false)
		}
	}
	yyj3342++
	if yyhl3342 {
		yyb3342 = yyj3342 > l
	} else {
		yyb3342 = r.CheckBreak()
	}
	if yyb3342 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3348 := &x.Items
		yym3349 := z.DecBinary()
		_ = yym3349
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3348), d)
		}
	}
	for {
		yyj3342++
		if yyhl3342 {
			yyb3342 = yyj3342 > l
		} else {
			yyb3342 = r.CheckBreak()
		}
		if yyb3342 {
			break
		}
		z.DecStructFieldNotFound(yyj3342-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3350 := z.EncBinary()
		_ = yym3350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3351 := !z.EncBinary()
			yy2arr3351 := z.EncBasicHandle().StructToArray
			var yyq3351 [5]bool
			_, _, _ = yysep3351, yyq3351, yy2arr3351
			const yyr3351 bool = false
			yyq3351[0] = x.Kind != ""
			yyq3351[1] = true
			yyq3351[2] = true
			yyq3351[3] = len(x.Data) != 0
			yyq3351[4] = x.Type != ""
			if yyr3351 || yy2arr3351 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3351 int = 0
				for _, b := range yyq3351 {
					if b {
						yynn3351++
					}
				}
				r.EncodeMapStart(yynn3351)
			}
			if yyr3351 || yy2arr3351 {
				if yyq3351[0] {
					yym3353 := z.EncBinary()
					_ = yym3353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3351[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3354 := z.EncBinary()
					_ = yym3354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3351 || yy2arr3351 {
				if yyq3351[1] {
					yy3356 := &x.APIVersion
					yym3357 := z.EncBinary()
					_ = yym3357
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3356) {
					} else if !yym3357 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3356)
					} else {
						z.EncFallback(yy3356)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3351[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3358 := &x.APIVersion
					yym3359 := z.EncBinary()
					_ = yym3359
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3358) {
					} else if !yym3359 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3358)
					} else {
						z.EncFallback(yy3358)
					}
				}
			}
			if yyr3351 || yy2arr3351 {
				if yyq3351[2] {
					yy3361 := &x.ObjectMeta
					yy3361.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3351[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3362 := &x.ObjectMeta
					yy3362.CodecEncodeSelf(e)
				}
			}
			if yyr3351 || yy2arr3351 {
				if yyq3351[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3364 := z.EncBinary()
						_ = yym3364
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3351[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3365 := z.EncBinary()
						_ = yym3365
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3351 || yy2arr3351 {
				if yyq3351[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3351[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3351 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3367 := z.DecBinary()
	_ = yym3367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3368 := r.ReadMapStart()
			if yyl3368 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3368, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3368 := r.ReadArrayStart()
			if yyl3368 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3369Slc
	var yyhl3369 bool = l >= 0
	for yyj3369 := 0; ; yyj3369++ {
		if yyhl3369 {
			if yyj3369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3369Slc = r.DecodeBytes(yys3369Slc, true, true)
		yys3369 := string(yys3369Slc)
		switch yys3369 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3371 := &x.APIVersion
				yym3372 := z.DecBinary()
				_ = yym3372
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3371) {
				} else if !yym3372 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3371)
				} else {
					z.DecFallback(yyv3371, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3373 := &x.ObjectMeta
				yyv3373.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3374 := &x.Data
				yym3375 := z.DecBinary()
				_ = yym3375
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3374), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3369)
		} // end switch yys3369
	} // end for yyj3369
	if !yyhl3369 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3377 int
	var yyb3377 bool
	var yyhl3377 bool = l >= 0
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3379 := &x.APIVersion
		yym3380 := z.DecBinary()
		_ = yym3380
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3379) {
		} else if !yym3380 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3379)
		} else {
			z.DecFallback(yyv3379, false)
		}
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3381 := &x.ObjectMeta
		yyv3381.CodecDecodeSelf(d)
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3382 := &x.Data
		yym3383 := z.DecBinary()
		_ = yym3383
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3382), d)
		}
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3377++
		if yyhl3377 {
			yyb3377 = yyj3377 > l
		} else {
			yyb3377 = r.CheckBreak()
		}
		if yyb3377 {
			break
		}
		z.DecStructFieldNotFound(yyj3377-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3385 := z.EncBinary()
	_ = yym3385
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3386 := z.DecBinary()
	_ = yym3386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3387 := z.EncBinary()
		_ = yym3387
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3388 := !z.EncBinary()
			yy2arr3388 := z.EncBasicHandle().StructToArray
			var yyq3388 [4]bool
			_, _, _ = yysep3388, yyq3388, yy2arr3388
			const yyr3388 bool = false
			yyq3388[0] = x.Kind != ""
			yyq3388[1] = true
			yyq3388[2] = true
			if yyr3388 || yy2arr3388 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3388 int = 1
				for _, b := range yyq3388 {
					if b {
						yynn3388++
					}
				}
				r.EncodeMapStart(yynn3388)
			}
			if yyr3388 || yy2arr3388 {
				if yyq3388[0] {
					yym3390 := z.EncBinary()
					_ = yym3390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3388[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3391 := z.EncBinary()
					_ = yym3391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				if yyq3388[1] {
					yy3393 := &x.APIVersion
					yym3394 := z.EncBinary()
					_ = yym3394
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3393) {
					} else if !yym3394 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3393)
					} else {
						z.EncFallback(yy3393)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3388[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3395 := &x.APIVersion
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3395) {
					} else if !yym3396 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3395)
					} else {
						z.EncFallback(yy3395)
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				if yyq3388[2] {
					yy3398 := &x.ListMeta
					yym3399 := z.EncBinary()
					_ = yym3399
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3398) {
					} else {
						z.EncFallback(yy3398)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3388[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3400 := &x.ListMeta
					yym3401 := z.EncBinary()
					_ = yym3401
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3400) {
					} else {
						z.EncFallback(yy3400)
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3403 := z.EncBinary()
					_ = yym3403
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3404 := z.EncBinary()
					_ = yym3404
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3388 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3405 := z.DecBinary()
	_ = yym3405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3406 := r.ReadMapStart()
			if yyl3406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3406, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3406 := r.ReadArrayStart()
			if yyl3406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3407Slc
	var yyhl3407 bool = l >= 0
	for yyj3407 := 0; ; yyj3407++ {
		if yyhl3407 {
			if yyj3407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3407Slc = r.DecodeBytes(yys3407Slc, true, true)
		yys3407 := string(yys3407Slc)
		switch yys3407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3409 := &x.APIVersion
				yym3410 := z.DecBinary()
				_ = yym3410
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3409) {
				} else if !yym3410 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3409)
				} else {
					z.DecFallback(yyv3409, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3411 := &x.ListMeta
				yym3412 := z.DecBinary()
				_ = yym3412
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3411) {
				} else {
					z.DecFallback(yyv3411, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3413 := &x.Items
				yym3414 := z.DecBinary()
				_ = yym3414
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3413), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3407)
		} // end switch yys3407
	} // end for yyj3407
	if !yyhl3407 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3415 int
	var yyb3415 bool
	var yyhl3415 bool = l >= 0
	yyj3415++
	if yyhl3415 {
		yyb3415 = yyj3415 > l
	} else {
		yyb3415 = r.CheckBreak()
	}
	if yyb3415 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3415++
	if yyhl3415 {
		yyb3415 = yyj3415 > l
	} else {
		yyb3415 = r.CheckBreak()
	}
	if yyb3415 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3417 := &x.APIVersion
		yym3418 := z.DecBinary()
		_ = yym3418
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3417) {
		} else if !yym3418 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3417)
		} else {
			z.DecFallback(yyv3417, false)
		}
	}
	yyj3415++
	if yyhl3415 {
		yyb3415 = yyj3415 > l
	} else {
		yyb3415 = r.CheckBreak()
	}
	if yyb3415 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3419 := &x.ListMeta
		yym3420 := z.DecBinary()
		_ = yym3420
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3419) {
		} else {
			z.DecFallback(yyv3419, false)
		}
	}
	yyj3415++
	if yyhl3415 {
		yyb3415 = yyj3415 > l
	} else {
		yyb3415 = r.CheckBreak()
	}
	if yyb3415 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3421 := &x.Items
		yym3422 := z.DecBinary()
		_ = yym3422
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3421), d)
		}
	}
	for {
		yyj3415++
		if yyhl3415 {
			yyb3415 = yyj3415 > l
		} else {
			yyb3415 = r.CheckBreak()
		}
		if yyb3415 {
			break
		}
		z.DecStructFieldNotFound(yyj3415-1, "")
	}
	r.ReadEnd()
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3423 := z.EncBinary()
	_ = yym3423
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3424 := z.DecBinary()
	_ = yym3424
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3425 := z.EncBinary()
		_ = yym3425
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3426 := !z.EncBinary()
			yy2arr3426 := z.EncBasicHandle().StructToArray
			var yyq3426 [4]bool
			_, _, _ = yysep3426, yyq3426, yy2arr3426
			const yyr3426 bool = false
			yyq3426[2] = x.Message != ""
			yyq3426[3] = x.Error != ""
			if yyr3426 || yy2arr3426 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3426 int = 2
				for _, b := range yyq3426 {
					if b {
						yynn3426++
					}
				}
				r.EncodeMapStart(yynn3426)
			}
			if yyr3426 || yy2arr3426 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3426 || yy2arr3426 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3426 || yy2arr3426 {
				if yyq3426[2] {
					yym3430 := z.EncBinary()
					_ = yym3430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3426[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3431 := z.EncBinary()
					_ = yym3431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3426 || yy2arr3426 {
				if yyq3426[3] {
					yym3433 := z.EncBinary()
					_ = yym3433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3426[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3434 := z.EncBinary()
					_ = yym3434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3426 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3435 := z.DecBinary()
	_ = yym3435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3436 := r.ReadMapStart()
			if yyl3436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3436, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3436 := r.ReadArrayStart()
			if yyl3436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3437Slc
	var yyhl3437 bool = l >= 0
	for yyj3437 := 0; ; yyj3437++ {
		if yyhl3437 {
			if yyj3437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3437Slc = r.DecodeBytes(yys3437Slc, true, true)
		yys3437 := string(yys3437Slc)
		switch yys3437 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3437)
		} // end switch yys3437
	} // end for yyj3437
	if !yyhl3437 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3442 int
	var yyb3442 bool
	var yyhl3442 bool = l >= 0
	yyj3442++
	if yyhl3442 {
		yyb3442 = yyj3442 > l
	} else {
		yyb3442 = r.CheckBreak()
	}
	if yyb3442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3442++
	if yyhl3442 {
		yyb3442 = yyj3442 > l
	} else {
		yyb3442 = r.CheckBreak()
	}
	if yyb3442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3442++
	if yyhl3442 {
		yyb3442 = yyj3442 > l
	} else {
		yyb3442 = r.CheckBreak()
	}
	if yyb3442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3442++
	if yyhl3442 {
		yyb3442 = yyj3442 > l
	} else {
		yyb3442 = r.CheckBreak()
	}
	if yyb3442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3442++
		if yyhl3442 {
			yyb3442 = yyj3442 > l
		} else {
			yyb3442 = r.CheckBreak()
		}
		if yyb3442 {
			break
		}
		z.DecStructFieldNotFound(yyj3442-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3447 := z.EncBinary()
		_ = yym3447
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3448 := !z.EncBinary()
			yy2arr3448 := z.EncBasicHandle().StructToArray
			var yyq3448 [4]bool
			_, _, _ = yysep3448, yyq3448, yy2arr3448
			const yyr3448 bool = false
			yyq3448[0] = x.Kind != ""
			yyq3448[1] = true
			yyq3448[2] = true
			yyq3448[3] = len(x.Conditions) != 0
			if yyr3448 || yy2arr3448 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3448 int = 0
				for _, b := range yyq3448 {
					if b {
						yynn3448++
					}
				}
				r.EncodeMapStart(yynn3448)
			}
			if yyr3448 || yy2arr3448 {
				if yyq3448[0] {
					yym3450 := z.EncBinary()
					_ = yym3450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3448[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3451 := z.EncBinary()
					_ = yym3451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3448 || yy2arr3448 {
				if yyq3448[1] {
					yy3453 := &x.APIVersion
					yym3454 := z.EncBinary()
					_ = yym3454
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3453) {
					} else if !yym3454 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3453)
					} else {
						z.EncFallback(yy3453)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3448[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3455 := &x.APIVersion
					yym3456 := z.EncBinary()
					_ = yym3456
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3455) {
					} else if !yym3456 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3455)
					} else {
						z.EncFallback(yy3455)
					}
				}
			}
			if yyr3448 || yy2arr3448 {
				if yyq3448[2] {
					yy3458 := &x.ObjectMeta
					yy3458.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3448[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3459 := &x.ObjectMeta
					yy3459.CodecEncodeSelf(e)
				}
			}
			if yyr3448 || yy2arr3448 {
				if yyq3448[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3461 := z.EncBinary()
						_ = yym3461
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3448[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3462 := z.EncBinary()
						_ = yym3462
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3448 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3463 := z.DecBinary()
	_ = yym3463
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3464 := r.ReadMapStart()
			if yyl3464 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3464, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3464 := r.ReadArrayStart()
			if yyl3464 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3464, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3465Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3465Slc
	var yyhl3465 bool = l >= 0
	for yyj3465 := 0; ; yyj3465++ {
		if yyhl3465 {
			if yyj3465 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3465Slc = r.DecodeBytes(yys3465Slc, true, true)
		yys3465 := string(yys3465Slc)
		switch yys3465 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3467 := &x.APIVersion
				yym3468 := z.DecBinary()
				_ = yym3468
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3467) {
				} else if !yym3468 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3467)
				} else {
					z.DecFallback(yyv3467, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3469 := &x.ObjectMeta
				yyv3469.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3470 := &x.Conditions
				yym3471 := z.DecBinary()
				_ = yym3471
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3470), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3465)
		} // end switch yys3465
	} // end for yyj3465
	if !yyhl3465 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3472 int
	var yyb3472 bool
	var yyhl3472 bool = l >= 0
	yyj3472++
	if yyhl3472 {
		yyb3472 = yyj3472 > l
	} else {
		yyb3472 = r.CheckBreak()
	}
	if yyb3472 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3472++
	if yyhl3472 {
		yyb3472 = yyj3472 > l
	} else {
		yyb3472 = r.CheckBreak()
	}
	if yyb3472 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3474 := &x.APIVersion
		yym3475 := z.DecBinary()
		_ = yym3475
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3474) {
		} else if !yym3475 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3474)
		} else {
			z.DecFallback(yyv3474, false)
		}
	}
	yyj3472++
	if yyhl3472 {
		yyb3472 = yyj3472 > l
	} else {
		yyb3472 = r.CheckBreak()
	}
	if yyb3472 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3476 := &x.ObjectMeta
		yyv3476.CodecDecodeSelf(d)
	}
	yyj3472++
	if yyhl3472 {
		yyb3472 = yyj3472 > l
	} else {
		yyb3472 = r.CheckBreak()
	}
	if yyb3472 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3477 := &x.Conditions
		yym3478 := z.DecBinary()
		_ = yym3478
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3477), d)
		}
	}
	for {
		yyj3472++
		if yyhl3472 {
			yyb3472 = yyj3472 > l
		} else {
			yyb3472 = r.CheckBreak()
		}
		if yyb3472 {
			break
		}
		z.DecStructFieldNotFound(yyj3472-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3479 := z.EncBinary()
		_ = yym3479
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3480 := !z.EncBinary()
			yy2arr3480 := z.EncBasicHandle().StructToArray
			var yyq3480 [4]bool
			_, _, _ = yysep3480, yyq3480, yy2arr3480
			const yyr3480 bool = false
			yyq3480[0] = x.Kind != ""
			yyq3480[1] = true
			yyq3480[2] = true
			if yyr3480 || yy2arr3480 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3480 int = 1
				for _, b := range yyq3480 {
					if b {
						yynn3480++
					}
				}
				r.EncodeMapStart(yynn3480)
			}
			if yyr3480 || yy2arr3480 {
				if yyq3480[0] {
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3480[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3483 := z.EncBinary()
					_ = yym3483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3480 || yy2arr3480 {
				if yyq3480[1] {
					yy3485 := &x.APIVersion
					yym3486 := z.EncBinary()
					_ = yym3486
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3485) {
					} else if !yym3486 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3485)
					} else {
						z.EncFallback(yy3485)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3480[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3487 := &x.APIVersion
					yym3488 := z.EncBinary()
					_ = yym3488
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3487) {
					} else if !yym3488 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3487)
					} else {
						z.EncFallback(yy3487)
					}
				}
			}
			if yyr3480 || yy2arr3480 {
				if yyq3480[2] {
					yy3490 := &x.ListMeta
					yym3491 := z.EncBinary()
					_ = yym3491
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3490) {
					} else {
						z.EncFallback(yy3490)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3480[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3492 := &x.ListMeta
					yym3493 := z.EncBinary()
					_ = yym3493
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3492) {
					} else {
						z.EncFallback(yy3492)
					}
				}
			}
			if yyr3480 || yy2arr3480 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3495 := z.EncBinary()
					_ = yym3495
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3496 := z.EncBinary()
					_ = yym3496
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3480 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3497 := z.DecBinary()
	_ = yym3497
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3498 := r.ReadMapStart()
			if yyl3498 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3498, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3498 := r.ReadArrayStart()
			if yyl3498 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3498, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3499Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3499Slc
	var yyhl3499 bool = l >= 0
	for yyj3499 := 0; ; yyj3499++ {
		if yyhl3499 {
			if yyj3499 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3499Slc = r.DecodeBytes(yys3499Slc, true, true)
		yys3499 := string(yys3499Slc)
		switch yys3499 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3501 := &x.APIVersion
				yym3502 := z.DecBinary()
				_ = yym3502
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3501) {
				} else if !yym3502 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3501)
				} else {
					z.DecFallback(yyv3501, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3503 := &x.ListMeta
				yym3504 := z.DecBinary()
				_ = yym3504
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3503) {
				} else {
					z.DecFallback(yyv3503, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3505 := &x.Items
				yym3506 := z.DecBinary()
				_ = yym3506
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3505), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3499)
		} // end switch yys3499
	} // end for yyj3499
	if !yyhl3499 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3507 int
	var yyb3507 bool
	var yyhl3507 bool = l >= 0
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3509 := &x.APIVersion
		yym3510 := z.DecBinary()
		_ = yym3510
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3509) {
		} else if !yym3510 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3509)
		} else {
			z.DecFallback(yyv3509, false)
		}
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3511 := &x.ListMeta
		yym3512 := z.DecBinary()
		_ = yym3512
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3511) {
		} else {
			z.DecFallback(yyv3511, false)
		}
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3513 := &x.Items
		yym3514 := z.DecBinary()
		_ = yym3514
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3513), d)
		}
	}
	for {
		yyj3507++
		if yyhl3507 {
			yyb3507 = yyj3507 > l
		} else {
			yyb3507 = r.CheckBreak()
		}
		if yyb3507 {
			break
		}
		z.DecStructFieldNotFound(yyj3507-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3515 := z.EncBinary()
		_ = yym3515
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3516 := !z.EncBinary()
			yy2arr3516 := z.EncBasicHandle().StructToArray
			var yyq3516 [1]bool
			_, _, _ = yysep3516, yyq3516, yy2arr3516
			const yyr3516 bool = false
			yyq3516[0] = len(x.Items) != 0
			if yyr3516 || yy2arr3516 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3516 int = 0
				for _, b := range yyq3516 {
					if b {
						yynn3516++
					}
				}
				r.EncodeMapStart(yynn3516)
			}
			if yyr3516 || yy2arr3516 {
				if yyq3516[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3518 := z.EncBinary()
						_ = yym3518
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3516[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3519 := z.EncBinary()
						_ = yym3519
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep3516 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3520 := z.DecBinary()
	_ = yym3520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3521 := r.ReadMapStart()
			if yyl3521 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3521, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3521 := r.ReadArrayStart()
			if yyl3521 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3521, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3522Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3522Slc
	var yyhl3522 bool = l >= 0
	for yyj3522 := 0; ; yyj3522++ {
		if yyhl3522 {
			if yyj3522 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3522Slc = r.DecodeBytes(yys3522Slc, true, true)
		yys3522 := string(yys3522Slc)
		switch yys3522 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3523 := &x.Items
				yym3524 := z.DecBinary()
				_ = yym3524
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3523), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3522)
		} // end switch yys3522
	} // end for yyj3522
	if !yyhl3522 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3525 int
	var yyb3525 bool
	var yyhl3525 bool = l >= 0
	yyj3525++
	if yyhl3525 {
		yyb3525 = yyj3525 > l
	} else {
		yyb3525 = r.CheckBreak()
	}
	if yyb3525 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3526 := &x.Items
		yym3527 := z.DecBinary()
		_ = yym3527
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3526), d)
		}
	}
	for {
		yyj3525++
		if yyhl3525 {
			yyb3525 = yyj3525 > l
		} else {
			yyb3525 = r.CheckBreak()
		}
		if yyb3525 {
			break
		}
		z.DecStructFieldNotFound(yyj3525-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3528 := z.EncBinary()
		_ = yym3528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3529 := !z.EncBinary()
			yy2arr3529 := z.EncBasicHandle().StructToArray
			var yyq3529 [2]bool
			_, _, _ = yysep3529, yyq3529, yy2arr3529
			const yyr3529 bool = false
			if yyr3529 || yy2arr3529 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3529 int = 2
				for _, b := range yyq3529 {
					if b {
						yynn3529++
					}
				}
				r.EncodeMapStart(yynn3529)
			}
			if yyr3529 || yy2arr3529 {
				yym3531 := z.EncBinary()
				_ = yym3531
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym3532 := z.EncBinary()
				_ = yym3532
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3529 || yy2arr3529 {
				yy3534 := &x.FieldRef
				yy3534.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy3535 := &x.FieldRef
				yy3535.CodecEncodeSelf(e)
			}
			if yysep3529 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3536 := z.DecBinary()
	_ = yym3536
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3537 := r.ReadMapStart()
			if yyl3537 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3537, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3537 := r.ReadArrayStart()
			if yyl3537 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3537, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3538Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3538Slc
	var yyhl3538 bool = l >= 0
	for yyj3538 := 0; ; yyj3538++ {
		if yyhl3538 {
			if yyj3538 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3538Slc = r.DecodeBytes(yys3538Slc, true, true)
		yys3538 := string(yys3538Slc)
		switch yys3538 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3540 := &x.FieldRef
				yyv3540.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3538)
		} // end switch yys3538
	} // end for yyj3538
	if !yyhl3538 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3541 int
	var yyb3541 bool
	var yyhl3541 bool = l >= 0
	yyj3541++
	if yyhl3541 {
		yyb3541 = yyj3541 > l
	} else {
		yyb3541 = r.CheckBreak()
	}
	if yyb3541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3541++
	if yyhl3541 {
		yyb3541 = yyj3541 > l
	} else {
		yyb3541 = r.CheckBreak()
	}
	if yyb3541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3543 := &x.FieldRef
		yyv3543.CodecDecodeSelf(d)
	}
	for {
		yyj3541++
		if yyhl3541 {
			yyb3541 = yyj3541 > l
		} else {
			yyb3541 = r.CheckBreak()
		}
		if yyb3541 {
			break
		}
		z.DecStructFieldNotFound(yyj3541-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3544 := z.EncBinary()
		_ = yym3544
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3545 := !z.EncBinary()
			yy2arr3545 := z.EncBasicHandle().StructToArray
			var yyq3545 [5]bool
			_, _, _ = yysep3545, yyq3545, yy2arr3545
			const yyr3545 bool = false
			yyq3545[0] = x.Capabilities != nil
			yyq3545[1] = x.Privileged != nil
			yyq3545[2] = x.SELinuxOptions != nil
			yyq3545[3] = x.RunAsUser != nil
			yyq3545[4] = x.RunAsNonRoot != nil
			if yyr3545 || yy2arr3545 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3545 int = 0
				for _, b := range yyq3545 {
					if b {
						yynn3545++
					}
				}
				r.EncodeMapStart(yynn3545)
			}
			if yyr3545 || yy2arr3545 {
				if yyq3545[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3545[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3545 || yy2arr3545 {
				if yyq3545[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3548 := *x.Privileged
						yym3549 := z.EncBinary()
						_ = yym3549
						if false {
						} else {
							r.EncodeBool(bool(yy3548))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3545[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3550 := *x.Privileged
						yym3551 := z.EncBinary()
						_ = yym3551
						if false {
						} else {
							r.EncodeBool(bool(yy3550))
						}
					}
				}
			}
			if yyr3545 || yy2arr3545 {
				if yyq3545[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3545[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3545 || yy2arr3545 {
				if yyq3545[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3554 := *x.RunAsUser
						yym3555 := z.EncBinary()
						_ = yym3555
						if false {
						} else {
							r.EncodeInt(int64(yy3554))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3545[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3556 := *x.RunAsUser
						yym3557 := z.EncBinary()
						_ = yym3557
						if false {
						} else {
							r.EncodeInt(int64(yy3556))
						}
					}
				}
			}
			if yyr3545 || yy2arr3545 {
				if yyq3545[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3559 := *x.RunAsNonRoot
						yym3560 := z.EncBinary()
						_ = yym3560
						if false {
						} else {
							r.EncodeBool(bool(yy3559))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3545[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3561 := *x.RunAsNonRoot
						yym3562 := z.EncBinary()
						_ = yym3562
						if false {
						} else {
							r.EncodeBool(bool(yy3561))
						}
					}
				}
			}
			if yysep3545 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3563 := z.DecBinary()
	_ = yym3563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3564 := r.ReadMapStart()
			if yyl3564 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3564, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3564 := r.ReadArrayStart()
			if yyl3564 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3564, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3565Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3565Slc
	var yyhl3565 bool = l >= 0
	for yyj3565 := 0; ; yyj3565++ {
		if yyhl3565 {
			if yyj3565 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3565Slc = r.DecodeBytes(yys3565Slc, true, true)
		yys3565 := string(yys3565Slc)
		switch yys3565 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3568 := z.DecBinary()
				_ = yym3568
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3571 := z.DecBinary()
				_ = yym3571
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3573 := z.DecBinary()
				_ = yym3573
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3565)
		} // end switch yys3565
	} // end for yyj3565
	if !yyhl3565 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3574 int
	var yyb3574 bool
	var yyhl3574 bool = l >= 0
	yyj3574++
	if yyhl3574 {
		yyb3574 = yyj3574 > l
	} else {
		yyb3574 = r.CheckBreak()
	}
	if yyb3574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3574++
	if yyhl3574 {
		yyb3574 = yyj3574 > l
	} else {
		yyb3574 = r.CheckBreak()
	}
	if yyb3574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3577 := z.DecBinary()
		_ = yym3577
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3574++
	if yyhl3574 {
		yyb3574 = yyj3574 > l
	} else {
		yyb3574 = r.CheckBreak()
	}
	if yyb3574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3574++
	if yyhl3574 {
		yyb3574 = yyj3574 > l
	} else {
		yyb3574 = r.CheckBreak()
	}
	if yyb3574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3580 := z.DecBinary()
		_ = yym3580
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3574++
	if yyhl3574 {
		yyb3574 = yyj3574 > l
	} else {
		yyb3574 = r.CheckBreak()
	}
	if yyb3574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3582 := z.DecBinary()
		_ = yym3582
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3574++
		if yyhl3574 {
			yyb3574 = yyj3574 > l
		} else {
			yyb3574 = r.CheckBreak()
		}
		if yyb3574 {
			break
		}
		z.DecStructFieldNotFound(yyj3574-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3583 := z.EncBinary()
		_ = yym3583
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3584 := !z.EncBinary()
			yy2arr3584 := z.EncBasicHandle().StructToArray
			var yyq3584 [4]bool
			_, _, _ = yysep3584, yyq3584, yy2arr3584
			const yyr3584 bool = false
			yyq3584[0] = x.User != ""
			yyq3584[1] = x.Role != ""
			yyq3584[2] = x.Type != ""
			yyq3584[3] = x.Level != ""
			if yyr3584 || yy2arr3584 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3584 int = 0
				for _, b := range yyq3584 {
					if b {
						yynn3584++
					}
				}
				r.EncodeMapStart(yynn3584)
			}
			if yyr3584 || yy2arr3584 {
				if yyq3584[0] {
					yym3586 := z.EncBinary()
					_ = yym3586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3584[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3587 := z.EncBinary()
					_ = yym3587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3584 || yy2arr3584 {
				if yyq3584[1] {
					yym3589 := z.EncBinary()
					_ = yym3589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3584[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3590 := z.EncBinary()
					_ = yym3590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3584 || yy2arr3584 {
				if yyq3584[2] {
					yym3592 := z.EncBinary()
					_ = yym3592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3584[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3593 := z.EncBinary()
					_ = yym3593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3584 || yy2arr3584 {
				if yyq3584[3] {
					yym3595 := z.EncBinary()
					_ = yym3595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3584[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3596 := z.EncBinary()
					_ = yym3596
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3584 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3597 := z.DecBinary()
	_ = yym3597
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3598 := r.ReadMapStart()
			if yyl3598 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3598, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3598 := r.ReadArrayStart()
			if yyl3598 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3598, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3599Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3599Slc
	var yyhl3599 bool = l >= 0
	for yyj3599 := 0; ; yyj3599++ {
		if yyhl3599 {
			if yyj3599 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3599Slc = r.DecodeBytes(yys3599Slc, true, true)
		yys3599 := string(yys3599Slc)
		switch yys3599 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3599)
		} // end switch yys3599
	} // end for yyj3599
	if !yyhl3599 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3604 int
	var yyb3604 bool
	var yyhl3604 bool = l >= 0
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3604++
		if yyhl3604 {
			yyb3604 = yyj3604 > l
		} else {
			yyb3604 = r.CheckBreak()
		}
		if yyb3604 {
			break
		}
		z.DecStructFieldNotFound(yyj3604-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3609 := z.EncBinary()
		_ = yym3609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3610 := !z.EncBinary()
			yy2arr3610 := z.EncBasicHandle().StructToArray
			var yyq3610 [5]bool
			_, _, _ = yysep3610, yyq3610, yy2arr3610
			const yyr3610 bool = false
			yyq3610[0] = x.Kind != ""
			yyq3610[1] = true
			yyq3610[2] = true
			if yyr3610 || yy2arr3610 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3610 int = 2
				for _, b := range yyq3610 {
					if b {
						yynn3610++
					}
				}
				r.EncodeMapStart(yynn3610)
			}
			if yyr3610 || yy2arr3610 {
				if yyq3610[0] {
					yym3612 := z.EncBinary()
					_ = yym3612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3610[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3613 := z.EncBinary()
					_ = yym3613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3610 || yy2arr3610 {
				if yyq3610[1] {
					yy3615 := &x.APIVersion
					yym3616 := z.EncBinary()
					_ = yym3616
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3615) {
					} else if !yym3616 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3615)
					} else {
						z.EncFallback(yy3615)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3610[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3617 := &x.APIVersion
					yym3618 := z.EncBinary()
					_ = yym3618
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3617) {
					} else if !yym3618 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3617)
					} else {
						z.EncFallback(yy3617)
					}
				}
			}
			if yyr3610 || yy2arr3610 {
				if yyq3610[2] {
					yy3620 := &x.ObjectMeta
					yy3620.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3610[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3621 := &x.ObjectMeta
					yy3621.CodecEncodeSelf(e)
				}
			}
			if yyr3610 || yy2arr3610 {
				yym3623 := z.EncBinary()
				_ = yym3623
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3624 := z.EncBinary()
				_ = yym3624
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3610 || yy2arr3610 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3626 := z.EncBinary()
					_ = yym3626
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3627 := z.EncBinary()
					_ = yym3627
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3610 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3628 := z.DecBinary()
	_ = yym3628
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3629 := r.ReadMapStart()
			if yyl3629 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3629, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3629 := r.ReadArrayStart()
			if yyl3629 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3629, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3630Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3630Slc
	var yyhl3630 bool = l >= 0
	for yyj3630 := 0; ; yyj3630++ {
		if yyhl3630 {
			if yyj3630 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3630Slc = r.DecodeBytes(yys3630Slc, true, true)
		yys3630 := string(yys3630Slc)
		switch yys3630 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3632 := &x.APIVersion
				yym3633 := z.DecBinary()
				_ = yym3633
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3632) {
				} else if !yym3633 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3632)
				} else {
					z.DecFallback(yyv3632, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3634 := &x.ObjectMeta
				yyv3634.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3636 := &x.Data
				yym3637 := z.DecBinary()
				_ = yym3637
				if false {
				} else {
					*yyv3636 = r.DecodeBytes(*(*[]byte)(yyv3636), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3630)
		} // end switch yys3630
	} // end for yyj3630
	if !yyhl3630 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3638 int
	var yyb3638 bool
	var yyhl3638 bool = l >= 0
	yyj3638++
	if yyhl3638 {
		yyb3638 = yyj3638 > l
	} else {
		yyb3638 = r.CheckBreak()
	}
	if yyb3638 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3638++
	if yyhl3638 {
		yyb3638 = yyj3638 > l
	} else {
		yyb3638 = r.CheckBreak()
	}
	if yyb3638 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3640 := &x.APIVersion
		yym3641 := z.DecBinary()
		_ = yym3641
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3640) {
		} else if !yym3641 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3640)
		} else {
			z.DecFallback(yyv3640, false)
		}
	}
	yyj3638++
	if yyhl3638 {
		yyb3638 = yyj3638 > l
	} else {
		yyb3638 = r.CheckBreak()
	}
	if yyb3638 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3642 := &x.ObjectMeta
		yyv3642.CodecDecodeSelf(d)
	}
	yyj3638++
	if yyhl3638 {
		yyb3638 = yyj3638 > l
	} else {
		yyb3638 = r.CheckBreak()
	}
	if yyb3638 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3638++
	if yyhl3638 {
		yyb3638 = yyj3638 > l
	} else {
		yyb3638 = r.CheckBreak()
	}
	if yyb3638 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3644 := &x.Data
		yym3645 := z.DecBinary()
		_ = yym3645
		if false {
		} else {
			*yyv3644 = r.DecodeBytes(*(*[]byte)(yyv3644), false, false)
		}
	}
	for {
		yyj3638++
		if yyhl3638 {
			yyb3638 = yyj3638 > l
		} else {
			yyb3638 = r.CheckBreak()
		}
		if yyb3638 {
			break
		}
		z.DecStructFieldNotFound(yyj3638-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3646 := range v {
		yyv3646.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3647 := *v
	yyh3647, yyl3647 := z.DecSliceHelperStart()

	var yyrr3647, yyrl3647 int
	var yyc3647, yyrt3647 bool
	_, _, _ = yyc3647, yyrt3647, yyrl3647
	yyrr3647 = yyl3647

	if yyv3647 == nil {
		if yyrl3647, yyrt3647 = z.DecInferLen(yyl3647, z.DecBasicHandle().MaxInitLen, 16); yyrt3647 {
			yyrr3647 = yyrl3647
		}
		yyv3647 = make([]PersistentVolumeAccessMode, yyrl3647)
		yyc3647 = true
	}

	if yyl3647 == 0 {
		if len(yyv3647) != 0 {
			yyv3647 = yyv3647[:0]
			yyc3647 = true
		}
	} else if yyl3647 > 0 {

		if yyl3647 > cap(yyv3647) {
			yyrl3647, yyrt3647 = z.DecInferLen(yyl3647, z.DecBasicHandle().MaxInitLen, 16)

			yyv23647 := yyv3647
			yyv3647 = make([]PersistentVolumeAccessMode, yyrl3647)
			if len(yyv3647) > 0 {
				copy(yyv3647, yyv23647[:cap(yyv23647)])
			}
			yyc3647 = true

			yyrr3647 = len(yyv3647)
		} else if yyl3647 != len(yyv3647) {
			yyv3647 = yyv3647[:yyl3647]
			yyc3647 = true
		}
		yyj3647 := 0
		for ; yyj3647 < yyrr3647; yyj3647++ {
			if r.TryDecodeAsNil() {
				yyv3647[yyj3647] = ""
			} else {
				yyv3647[yyj3647] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3647 {
			for ; yyj3647 < yyl3647; yyj3647++ {
				yyv3647 = append(yyv3647, "")
				if r.TryDecodeAsNil() {
					yyv3647[yyj3647] = ""
				} else {
					yyv3647[yyj3647] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3647 := 0; !r.CheckBreak(); yyj3647++ {
			if yyj3647 >= len(yyv3647) {
				yyv3647 = append(yyv3647, "") // var yyz3647 PersistentVolumeAccessMode
				yyc3647 = true
			}

			if yyj3647 < len(yyv3647) {
				if r.TryDecodeAsNil() {
					yyv3647[yyj3647] = ""
				} else {
					yyv3647[yyj3647] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3647.End()
	}
	if yyc3647 {
		*v = yyv3647
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3651 := range v {
		yy3652 := &yyv3651
		yy3652.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3653 := *v
	yyh3653, yyl3653 := z.DecSliceHelperStart()

	var yyrr3653, yyrl3653 int
	var yyc3653, yyrt3653 bool
	_, _, _ = yyc3653, yyrt3653, yyrl3653
	yyrr3653 = yyl3653

	if yyv3653 == nil {
		if yyrl3653, yyrt3653 = z.DecInferLen(yyl3653, z.DecBasicHandle().MaxInitLen, 400); yyrt3653 {
			yyrr3653 = yyrl3653
		}
		yyv3653 = make([]PersistentVolume, yyrl3653)
		yyc3653 = true
	}

	if yyl3653 == 0 {
		if len(yyv3653) != 0 {
			yyv3653 = yyv3653[:0]
			yyc3653 = true
		}
	} else if yyl3653 > 0 {

		if yyl3653 > cap(yyv3653) {
			yyrl3653, yyrt3653 = z.DecInferLen(yyl3653, z.DecBasicHandle().MaxInitLen, 400)
			yyv3653 = make([]PersistentVolume, yyrl3653)
			yyc3653 = true

			yyrr3653 = len(yyv3653)
		} else if yyl3653 != len(yyv3653) {
			yyv3653 = yyv3653[:yyl3653]
			yyc3653 = true
		}
		yyj3653 := 0
		for ; yyj3653 < yyrr3653; yyj3653++ {
			if r.TryDecodeAsNil() {
				yyv3653[yyj3653] = PersistentVolume{}
			} else {
				yyv3654 := &yyv3653[yyj3653]
				yyv3654.CodecDecodeSelf(d)
			}

		}
		if yyrt3653 {
			for ; yyj3653 < yyl3653; yyj3653++ {
				yyv3653 = append(yyv3653, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3653[yyj3653] = PersistentVolume{}
				} else {
					yyv3655 := &yyv3653[yyj3653]
					yyv3655.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3653 := 0; !r.CheckBreak(); yyj3653++ {
			if yyj3653 >= len(yyv3653) {
				yyv3653 = append(yyv3653, PersistentVolume{}) // var yyz3653 PersistentVolume
				yyc3653 = true
			}

			if yyj3653 < len(yyv3653) {
				if r.TryDecodeAsNil() {
					yyv3653[yyj3653] = PersistentVolume{}
				} else {
					yyv3656 := &yyv3653[yyj3653]
					yyv3656.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3653.End()
	}
	if yyc3653 {
		*v = yyv3653
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3657 := range v {
		yy3658 := &yyv3657
		yy3658.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3659 := *v
	yyh3659, yyl3659 := z.DecSliceHelperStart()

	var yyrr3659, yyrl3659 int
	var yyc3659, yyrt3659 bool
	_, _, _ = yyc3659, yyrt3659, yyrl3659
	yyrr3659 = yyl3659

	if yyv3659 == nil {
		if yyrl3659, yyrt3659 = z.DecInferLen(yyl3659, z.DecBasicHandle().MaxInitLen, 312); yyrt3659 {
			yyrr3659 = yyrl3659
		}
		yyv3659 = make([]PersistentVolumeClaim, yyrl3659)
		yyc3659 = true
	}

	if yyl3659 == 0 {
		if len(yyv3659) != 0 {
			yyv3659 = yyv3659[:0]
			yyc3659 = true
		}
	} else if yyl3659 > 0 {

		if yyl3659 > cap(yyv3659) {
			yyrl3659, yyrt3659 = z.DecInferLen(yyl3659, z.DecBasicHandle().MaxInitLen, 312)
			yyv3659 = make([]PersistentVolumeClaim, yyrl3659)
			yyc3659 = true

			yyrr3659 = len(yyv3659)
		} else if yyl3659 != len(yyv3659) {
			yyv3659 = yyv3659[:yyl3659]
			yyc3659 = true
		}
		yyj3659 := 0
		for ; yyj3659 < yyrr3659; yyj3659++ {
			if r.TryDecodeAsNil() {
				yyv3659[yyj3659] = PersistentVolumeClaim{}
			} else {
				yyv3660 := &yyv3659[yyj3659]
				yyv3660.CodecDecodeSelf(d)
			}

		}
		if yyrt3659 {
			for ; yyj3659 < yyl3659; yyj3659++ {
				yyv3659 = append(yyv3659, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3659[yyj3659] = PersistentVolumeClaim{}
				} else {
					yyv3661 := &yyv3659[yyj3659]
					yyv3661.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3659 := 0; !r.CheckBreak(); yyj3659++ {
			if yyj3659 >= len(yyv3659) {
				yyv3659 = append(yyv3659, PersistentVolumeClaim{}) // var yyz3659 PersistentVolumeClaim
				yyc3659 = true
			}

			if yyj3659 < len(yyv3659) {
				if r.TryDecodeAsNil() {
					yyv3659[yyj3659] = PersistentVolumeClaim{}
				} else {
					yyv3662 := &yyv3659[yyj3659]
					yyv3662.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3659.End()
	}
	if yyc3659 {
		*v = yyv3659
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3663 := range v {
		yyv3663.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3664 := *v
	yyh3664, yyl3664 := z.DecSliceHelperStart()

	var yyrr3664, yyrl3664 int
	var yyc3664, yyrt3664 bool
	_, _, _ = yyc3664, yyrt3664, yyrl3664
	yyrr3664 = yyl3664

	if yyv3664 == nil {
		if yyrl3664, yyrt3664 = z.DecInferLen(yyl3664, z.DecBasicHandle().MaxInitLen, 16); yyrt3664 {
			yyrr3664 = yyrl3664
		}
		yyv3664 = make([]Capability, yyrl3664)
		yyc3664 = true
	}

	if yyl3664 == 0 {
		if len(yyv3664) != 0 {
			yyv3664 = yyv3664[:0]
			yyc3664 = true
		}
	} else if yyl3664 > 0 {

		if yyl3664 > cap(yyv3664) {
			yyrl3664, yyrt3664 = z.DecInferLen(yyl3664, z.DecBasicHandle().MaxInitLen, 16)

			yyv23664 := yyv3664
			yyv3664 = make([]Capability, yyrl3664)
			if len(yyv3664) > 0 {
				copy(yyv3664, yyv23664[:cap(yyv23664)])
			}
			yyc3664 = true

			yyrr3664 = len(yyv3664)
		} else if yyl3664 != len(yyv3664) {
			yyv3664 = yyv3664[:yyl3664]
			yyc3664 = true
		}
		yyj3664 := 0
		for ; yyj3664 < yyrr3664; yyj3664++ {
			if r.TryDecodeAsNil() {
				yyv3664[yyj3664] = ""
			} else {
				yyv3664[yyj3664] = Capability(r.DecodeString())
			}

		}
		if yyrt3664 {
			for ; yyj3664 < yyl3664; yyj3664++ {
				yyv3664 = append(yyv3664, "")
				if r.TryDecodeAsNil() {
					yyv3664[yyj3664] = ""
				} else {
					yyv3664[yyj3664] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3664 := 0; !r.CheckBreak(); yyj3664++ {
			if yyj3664 >= len(yyv3664) {
				yyv3664 = append(yyv3664, "") // var yyz3664 Capability
				yyc3664 = true
			}

			if yyj3664 < len(yyv3664) {
				if r.TryDecodeAsNil() {
					yyv3664[yyj3664] = ""
				} else {
					yyv3664[yyj3664] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3664.End()
	}
	if yyc3664 {
		*v = yyv3664
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3668 := range v {
		yy3669 := &yyv3668
		yy3669.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3670 := *v
	yyh3670, yyl3670 := z.DecSliceHelperStart()

	var yyrr3670, yyrl3670 int
	var yyc3670, yyrt3670 bool
	_, _, _ = yyc3670, yyrt3670, yyrl3670
	yyrr3670 = yyl3670

	if yyv3670 == nil {
		if yyrl3670, yyrt3670 = z.DecInferLen(yyl3670, z.DecBasicHandle().MaxInitLen, 64); yyrt3670 {
			yyrr3670 = yyrl3670
		}
		yyv3670 = make([]ContainerPort, yyrl3670)
		yyc3670 = true
	}

	if yyl3670 == 0 {
		if len(yyv3670) != 0 {
			yyv3670 = yyv3670[:0]
			yyc3670 = true
		}
	} else if yyl3670 > 0 {

		if yyl3670 > cap(yyv3670) {
			yyrl3670, yyrt3670 = z.DecInferLen(yyl3670, z.DecBasicHandle().MaxInitLen, 64)
			yyv3670 = make([]ContainerPort, yyrl3670)
			yyc3670 = true

			yyrr3670 = len(yyv3670)
		} else if yyl3670 != len(yyv3670) {
			yyv3670 = yyv3670[:yyl3670]
			yyc3670 = true
		}
		yyj3670 := 0
		for ; yyj3670 < yyrr3670; yyj3670++ {
			if r.TryDecodeAsNil() {
				yyv3670[yyj3670] = ContainerPort{}
			} else {
				yyv3671 := &yyv3670[yyj3670]
				yyv3671.CodecDecodeSelf(d)
			}

		}
		if yyrt3670 {
			for ; yyj3670 < yyl3670; yyj3670++ {
				yyv3670 = append(yyv3670, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3670[yyj3670] = ContainerPort{}
				} else {
					yyv3672 := &yyv3670[yyj3670]
					yyv3672.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3670 := 0; !r.CheckBreak(); yyj3670++ {
			if yyj3670 >= len(yyv3670) {
				yyv3670 = append(yyv3670, ContainerPort{}) // var yyz3670 ContainerPort
				yyc3670 = true
			}

			if yyj3670 < len(yyv3670) {
				if r.TryDecodeAsNil() {
					yyv3670[yyj3670] = ContainerPort{}
				} else {
					yyv3673 := &yyv3670[yyj3670]
					yyv3673.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3670.End()
	}
	if yyc3670 {
		*v = yyv3670
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3674 := range v {
		yy3675 := &yyv3674
		yy3675.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3676 := *v
	yyh3676, yyl3676 := z.DecSliceHelperStart()

	var yyrr3676, yyrl3676 int
	var yyc3676, yyrt3676 bool
	_, _, _ = yyc3676, yyrt3676, yyrl3676
	yyrr3676 = yyl3676

	if yyv3676 == nil {
		if yyrl3676, yyrt3676 = z.DecInferLen(yyl3676, z.DecBasicHandle().MaxInitLen, 40); yyrt3676 {
			yyrr3676 = yyrl3676
		}
		yyv3676 = make([]EnvVar, yyrl3676)
		yyc3676 = true
	}

	if yyl3676 == 0 {
		if len(yyv3676) != 0 {
			yyv3676 = yyv3676[:0]
			yyc3676 = true
		}
	} else if yyl3676 > 0 {

		if yyl3676 > cap(yyv3676) {
			yyrl3676, yyrt3676 = z.DecInferLen(yyl3676, z.DecBasicHandle().MaxInitLen, 40)
			yyv3676 = make([]EnvVar, yyrl3676)
			yyc3676 = true

			yyrr3676 = len(yyv3676)
		} else if yyl3676 != len(yyv3676) {
			yyv3676 = yyv3676[:yyl3676]
			yyc3676 = true
		}
		yyj3676 := 0
		for ; yyj3676 < yyrr3676; yyj3676++ {
			if r.TryDecodeAsNil() {
				yyv3676[yyj3676] = EnvVar{}
			} else {
				yyv3677 := &yyv3676[yyj3676]
				yyv3677.CodecDecodeSelf(d)
			}

		}
		if yyrt3676 {
			for ; yyj3676 < yyl3676; yyj3676++ {
				yyv3676 = append(yyv3676, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3676[yyj3676] = EnvVar{}
				} else {
					yyv3678 := &yyv3676[yyj3676]
					yyv3678.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3676 := 0; !r.CheckBreak(); yyj3676++ {
			if yyj3676 >= len(yyv3676) {
				yyv3676 = append(yyv3676, EnvVar{}) // var yyz3676 EnvVar
				yyc3676 = true
			}

			if yyj3676 < len(yyv3676) {
				if r.TryDecodeAsNil() {
					yyv3676[yyj3676] = EnvVar{}
				} else {
					yyv3679 := &yyv3676[yyj3676]
					yyv3679.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3676.End()
	}
	if yyc3676 {
		*v = yyv3676
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3680 := range v {
		yy3681 := &yyv3680
		yy3681.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3682 := *v
	yyh3682, yyl3682 := z.DecSliceHelperStart()

	var yyrr3682, yyrl3682 int
	var yyc3682, yyrt3682 bool
	_, _, _ = yyc3682, yyrt3682, yyrl3682
	yyrr3682 = yyl3682

	if yyv3682 == nil {
		if yyrl3682, yyrt3682 = z.DecInferLen(yyl3682, z.DecBasicHandle().MaxInitLen, 40); yyrt3682 {
			yyrr3682 = yyrl3682
		}
		yyv3682 = make([]VolumeMount, yyrl3682)
		yyc3682 = true
	}

	if yyl3682 == 0 {
		if len(yyv3682) != 0 {
			yyv3682 = yyv3682[:0]
			yyc3682 = true
		}
	} else if yyl3682 > 0 {

		if yyl3682 > cap(yyv3682) {
			yyrl3682, yyrt3682 = z.DecInferLen(yyl3682, z.DecBasicHandle().MaxInitLen, 40)
			yyv3682 = make([]VolumeMount, yyrl3682)
			yyc3682 = true

			yyrr3682 = len(yyv3682)
		} else if yyl3682 != len(yyv3682) {
			yyv3682 = yyv3682[:yyl3682]
			yyc3682 = true
		}
		yyj3682 := 0
		for ; yyj3682 < yyrr3682; yyj3682++ {
			if r.TryDecodeAsNil() {
				yyv3682[yyj3682] = VolumeMount{}
			} else {
				yyv3683 := &yyv3682[yyj3682]
				yyv3683.CodecDecodeSelf(d)
			}

		}
		if yyrt3682 {
			for ; yyj3682 < yyl3682; yyj3682++ {
				yyv3682 = append(yyv3682, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3682[yyj3682] = VolumeMount{}
				} else {
					yyv3684 := &yyv3682[yyj3682]
					yyv3684.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3682 := 0; !r.CheckBreak(); yyj3682++ {
			if yyj3682 >= len(yyv3682) {
				yyv3682 = append(yyv3682, VolumeMount{}) // var yyz3682 VolumeMount
				yyc3682 = true
			}

			if yyj3682 < len(yyv3682) {
				if r.TryDecodeAsNil() {
					yyv3682[yyj3682] = VolumeMount{}
				} else {
					yyv3685 := &yyv3682[yyj3682]
					yyv3685.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3682.End()
	}
	if yyc3682 {
		*v = yyv3682
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3686 := range v {
		yy3687 := &yyv3686
		yy3687.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3688 := *v
	yyh3688, yyl3688 := z.DecSliceHelperStart()

	var yyrr3688, yyrl3688 int
	var yyc3688, yyrt3688 bool
	_, _, _ = yyc3688, yyrt3688, yyrl3688
	yyrr3688 = yyl3688

	if yyv3688 == nil {
		if yyrl3688, yyrt3688 = z.DecInferLen(yyl3688, z.DecBasicHandle().MaxInitLen, 144); yyrt3688 {
			yyrr3688 = yyrl3688
		}
		yyv3688 = make([]Volume, yyrl3688)
		yyc3688 = true
	}

	if yyl3688 == 0 {
		if len(yyv3688) != 0 {
			yyv3688 = yyv3688[:0]
			yyc3688 = true
		}
	} else if yyl3688 > 0 {

		if yyl3688 > cap(yyv3688) {
			yyrl3688, yyrt3688 = z.DecInferLen(yyl3688, z.DecBasicHandle().MaxInitLen, 144)
			yyv3688 = make([]Volume, yyrl3688)
			yyc3688 = true

			yyrr3688 = len(yyv3688)
		} else if yyl3688 != len(yyv3688) {
			yyv3688 = yyv3688[:yyl3688]
			yyc3688 = true
		}
		yyj3688 := 0
		for ; yyj3688 < yyrr3688; yyj3688++ {
			if r.TryDecodeAsNil() {
				yyv3688[yyj3688] = Volume{}
			} else {
				yyv3689 := &yyv3688[yyj3688]
				yyv3689.CodecDecodeSelf(d)
			}

		}
		if yyrt3688 {
			for ; yyj3688 < yyl3688; yyj3688++ {
				yyv3688 = append(yyv3688, Volume{})
				if r.TryDecodeAsNil() {
					yyv3688[yyj3688] = Volume{}
				} else {
					yyv3690 := &yyv3688[yyj3688]
					yyv3690.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3688 := 0; !r.CheckBreak(); yyj3688++ {
			if yyj3688 >= len(yyv3688) {
				yyv3688 = append(yyv3688, Volume{}) // var yyz3688 Volume
				yyc3688 = true
			}

			if yyj3688 < len(yyv3688) {
				if r.TryDecodeAsNil() {
					yyv3688[yyj3688] = Volume{}
				} else {
					yyv3691 := &yyv3688[yyj3688]
					yyv3691.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3688.End()
	}
	if yyc3688 {
		*v = yyv3688
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3692 := range v {
		yy3693 := &yyv3692
		yy3693.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3694 := *v
	yyh3694, yyl3694 := z.DecSliceHelperStart()

	var yyrr3694, yyrl3694 int
	var yyc3694, yyrt3694 bool
	_, _, _ = yyc3694, yyrt3694, yyrl3694
	yyrr3694 = yyl3694

	if yyv3694 == nil {
		if yyrl3694, yyrt3694 = z.DecInferLen(yyl3694, z.DecBasicHandle().MaxInitLen, 256); yyrt3694 {
			yyrr3694 = yyrl3694
		}
		yyv3694 = make([]Container, yyrl3694)
		yyc3694 = true
	}

	if yyl3694 == 0 {
		if len(yyv3694) != 0 {
			yyv3694 = yyv3694[:0]
			yyc3694 = true
		}
	} else if yyl3694 > 0 {

		if yyl3694 > cap(yyv3694) {
			yyrl3694, yyrt3694 = z.DecInferLen(yyl3694, z.DecBasicHandle().MaxInitLen, 256)
			yyv3694 = make([]Container, yyrl3694)
			yyc3694 = true

			yyrr3694 = len(yyv3694)
		} else if yyl3694 != len(yyv3694) {
			yyv3694 = yyv3694[:yyl3694]
			yyc3694 = true
		}
		yyj3694 := 0
		for ; yyj3694 < yyrr3694; yyj3694++ {
			if r.TryDecodeAsNil() {
				yyv3694[yyj3694] = Container{}
			} else {
				yyv3695 := &yyv3694[yyj3694]
				yyv3695.CodecDecodeSelf(d)
			}

		}
		if yyrt3694 {
			for ; yyj3694 < yyl3694; yyj3694++ {
				yyv3694 = append(yyv3694, Container{})
				if r.TryDecodeAsNil() {
					yyv3694[yyj3694] = Container{}
				} else {
					yyv3696 := &yyv3694[yyj3694]
					yyv3696.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3694 := 0; !r.CheckBreak(); yyj3694++ {
			if yyj3694 >= len(yyv3694) {
				yyv3694 = append(yyv3694, Container{}) // var yyz3694 Container
				yyc3694 = true
			}

			if yyj3694 < len(yyv3694) {
				if r.TryDecodeAsNil() {
					yyv3694[yyj3694] = Container{}
				} else {
					yyv3697 := &yyv3694[yyj3694]
					yyv3697.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3694.End()
	}
	if yyc3694 {
		*v = yyv3694
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3698 := range v {
		yy3699 := &yyv3698
		yy3699.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3700 := *v
	yyh3700, yyl3700 := z.DecSliceHelperStart()

	var yyrr3700, yyrl3700 int
	var yyc3700, yyrt3700 bool
	_, _, _ = yyc3700, yyrt3700, yyrl3700
	yyrr3700 = yyl3700

	if yyv3700 == nil {
		if yyrl3700, yyrt3700 = z.DecInferLen(yyl3700, z.DecBasicHandle().MaxInitLen, 16); yyrt3700 {
			yyrr3700 = yyrl3700
		}
		yyv3700 = make([]LocalObjectReference, yyrl3700)
		yyc3700 = true
	}

	if yyl3700 == 0 {
		if len(yyv3700) != 0 {
			yyv3700 = yyv3700[:0]
			yyc3700 = true
		}
	} else if yyl3700 > 0 {

		if yyl3700 > cap(yyv3700) {
			yyrl3700, yyrt3700 = z.DecInferLen(yyl3700, z.DecBasicHandle().MaxInitLen, 16)
			yyv3700 = make([]LocalObjectReference, yyrl3700)
			yyc3700 = true

			yyrr3700 = len(yyv3700)
		} else if yyl3700 != len(yyv3700) {
			yyv3700 = yyv3700[:yyl3700]
			yyc3700 = true
		}
		yyj3700 := 0
		for ; yyj3700 < yyrr3700; yyj3700++ {
			if r.TryDecodeAsNil() {
				yyv3700[yyj3700] = LocalObjectReference{}
			} else {
				yyv3701 := &yyv3700[yyj3700]
				yyv3701.CodecDecodeSelf(d)
			}

		}
		if yyrt3700 {
			for ; yyj3700 < yyl3700; yyj3700++ {
				yyv3700 = append(yyv3700, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3700[yyj3700] = LocalObjectReference{}
				} else {
					yyv3702 := &yyv3700[yyj3700]
					yyv3702.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3700 := 0; !r.CheckBreak(); yyj3700++ {
			if yyj3700 >= len(yyv3700) {
				yyv3700 = append(yyv3700, LocalObjectReference{}) // var yyz3700 LocalObjectReference
				yyc3700 = true
			}

			if yyj3700 < len(yyv3700) {
				if r.TryDecodeAsNil() {
					yyv3700[yyj3700] = LocalObjectReference{}
				} else {
					yyv3703 := &yyv3700[yyj3700]
					yyv3703.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3700.End()
	}
	if yyc3700 {
		*v = yyv3700
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3704 := range v {
		yy3705 := &yyv3704
		yy3705.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3706 := *v
	yyh3706, yyl3706 := z.DecSliceHelperStart()

	var yyrr3706, yyrl3706 int
	var yyc3706, yyrt3706 bool
	_, _, _ = yyc3706, yyrt3706, yyrl3706
	yyrr3706 = yyl3706

	if yyv3706 == nil {
		if yyrl3706, yyrt3706 = z.DecInferLen(yyl3706, z.DecBasicHandle().MaxInitLen, 112); yyrt3706 {
			yyrr3706 = yyrl3706
		}
		yyv3706 = make([]PodCondition, yyrl3706)
		yyc3706 = true
	}

	if yyl3706 == 0 {
		if len(yyv3706) != 0 {
			yyv3706 = yyv3706[:0]
			yyc3706 = true
		}
	} else if yyl3706 > 0 {

		if yyl3706 > cap(yyv3706) {
			yyrl3706, yyrt3706 = z.DecInferLen(yyl3706, z.DecBasicHandle().MaxInitLen, 112)
			yyv3706 = make([]PodCondition, yyrl3706)
			yyc3706 = true

			yyrr3706 = len(yyv3706)
		} else if yyl3706 != len(yyv3706) {
			yyv3706 = yyv3706[:yyl3706]
			yyc3706 = true
		}
		yyj3706 := 0
		for ; yyj3706 < yyrr3706; yyj3706++ {
			if r.TryDecodeAsNil() {
				yyv3706[yyj3706] = PodCondition{}
			} else {
				yyv3707 := &yyv3706[yyj3706]
				yyv3707.CodecDecodeSelf(d)
			}

		}
		if yyrt3706 {
			for ; yyj3706 < yyl3706; yyj3706++ {
				yyv3706 = append(yyv3706, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3706[yyj3706] = PodCondition{}
				} else {
					yyv3708 := &yyv3706[yyj3706]
					yyv3708.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3706 := 0; !r.CheckBreak(); yyj3706++ {
			if yyj3706 >= len(yyv3706) {
				yyv3706 = append(yyv3706, PodCondition{}) // var yyz3706 PodCondition
				yyc3706 = true
			}

			if yyj3706 < len(yyv3706) {
				if r.TryDecodeAsNil() {
					yyv3706[yyj3706] = PodCondition{}
				} else {
					yyv3709 := &yyv3706[yyj3706]
					yyv3709.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3706.End()
	}
	if yyc3706 {
		*v = yyv3706
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3710 := range v {
		yy3711 := &yyv3710
		yy3711.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3712 := *v
	yyh3712, yyl3712 := z.DecSliceHelperStart()

	var yyrr3712, yyrl3712 int
	var yyc3712, yyrt3712 bool
	_, _, _ = yyc3712, yyrt3712, yyrl3712
	yyrr3712 = yyl3712

	if yyv3712 == nil {
		if yyrl3712, yyrt3712 = z.DecInferLen(yyl3712, z.DecBasicHandle().MaxInitLen, 128); yyrt3712 {
			yyrr3712 = yyrl3712
		}
		yyv3712 = make([]ContainerStatus, yyrl3712)
		yyc3712 = true
	}

	if yyl3712 == 0 {
		if len(yyv3712) != 0 {
			yyv3712 = yyv3712[:0]
			yyc3712 = true
		}
	} else if yyl3712 > 0 {

		if yyl3712 > cap(yyv3712) {
			yyrl3712, yyrt3712 = z.DecInferLen(yyl3712, z.DecBasicHandle().MaxInitLen, 128)
			yyv3712 = make([]ContainerStatus, yyrl3712)
			yyc3712 = true

			yyrr3712 = len(yyv3712)
		} else if yyl3712 != len(yyv3712) {
			yyv3712 = yyv3712[:yyl3712]
			yyc3712 = true
		}
		yyj3712 := 0
		for ; yyj3712 < yyrr3712; yyj3712++ {
			if r.TryDecodeAsNil() {
				yyv3712[yyj3712] = ContainerStatus{}
			} else {
				yyv3713 := &yyv3712[yyj3712]
				yyv3713.CodecDecodeSelf(d)
			}

		}
		if yyrt3712 {
			for ; yyj3712 < yyl3712; yyj3712++ {
				yyv3712 = append(yyv3712, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3712[yyj3712] = ContainerStatus{}
				} else {
					yyv3714 := &yyv3712[yyj3712]
					yyv3714.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3712 := 0; !r.CheckBreak(); yyj3712++ {
			if yyj3712 >= len(yyv3712) {
				yyv3712 = append(yyv3712, ContainerStatus{}) // var yyz3712 ContainerStatus
				yyc3712 = true
			}

			if yyj3712 < len(yyv3712) {
				if r.TryDecodeAsNil() {
					yyv3712[yyj3712] = ContainerStatus{}
				} else {
					yyv3715 := &yyv3712[yyj3712]
					yyv3715.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3712.End()
	}
	if yyc3712 {
		*v = yyv3712
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3716 := range v {
		yy3717 := &yyv3716
		yy3717.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3718 := *v
	yyh3718, yyl3718 := z.DecSliceHelperStart()

	var yyrr3718, yyrl3718 int
	var yyc3718, yyrt3718 bool
	_, _, _ = yyc3718, yyrt3718, yyrl3718
	yyrr3718 = yyl3718

	if yyv3718 == nil {
		if yyrl3718, yyrt3718 = z.DecInferLen(yyl3718, z.DecBasicHandle().MaxInitLen, 536); yyrt3718 {
			yyrr3718 = yyrl3718
		}
		yyv3718 = make([]Pod, yyrl3718)
		yyc3718 = true
	}

	if yyl3718 == 0 {
		if len(yyv3718) != 0 {
			yyv3718 = yyv3718[:0]
			yyc3718 = true
		}
	} else if yyl3718 > 0 {

		if yyl3718 > cap(yyv3718) {
			yyrl3718, yyrt3718 = z.DecInferLen(yyl3718, z.DecBasicHandle().MaxInitLen, 536)
			yyv3718 = make([]Pod, yyrl3718)
			yyc3718 = true

			yyrr3718 = len(yyv3718)
		} else if yyl3718 != len(yyv3718) {
			yyv3718 = yyv3718[:yyl3718]
			yyc3718 = true
		}
		yyj3718 := 0
		for ; yyj3718 < yyrr3718; yyj3718++ {
			if r.TryDecodeAsNil() {
				yyv3718[yyj3718] = Pod{}
			} else {
				yyv3719 := &yyv3718[yyj3718]
				yyv3719.CodecDecodeSelf(d)
			}

		}
		if yyrt3718 {
			for ; yyj3718 < yyl3718; yyj3718++ {
				yyv3718 = append(yyv3718, Pod{})
				if r.TryDecodeAsNil() {
					yyv3718[yyj3718] = Pod{}
				} else {
					yyv3720 := &yyv3718[yyj3718]
					yyv3720.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3718 := 0; !r.CheckBreak(); yyj3718++ {
			if yyj3718 >= len(yyv3718) {
				yyv3718 = append(yyv3718, Pod{}) // var yyz3718 Pod
				yyc3718 = true
			}

			if yyj3718 < len(yyv3718) {
				if r.TryDecodeAsNil() {
					yyv3718[yyj3718] = Pod{}
				} else {
					yyv3721 := &yyv3718[yyj3718]
					yyv3721.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3718.End()
	}
	if yyc3718 {
		*v = yyv3718
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3722 := range v {
		yy3723 := &yyv3722
		yy3723.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3724 := *v
	yyh3724, yyl3724 := z.DecSliceHelperStart()

	var yyrr3724, yyrl3724 int
	var yyc3724, yyrt3724 bool
	_, _, _ = yyc3724, yyrt3724, yyrl3724
	yyrr3724 = yyl3724

	if yyv3724 == nil {
		if yyrl3724, yyrt3724 = z.DecInferLen(yyl3724, z.DecBasicHandle().MaxInitLen, 560); yyrt3724 {
			yyrr3724 = yyrl3724
		}
		yyv3724 = make([]PodTemplate, yyrl3724)
		yyc3724 = true
	}

	if yyl3724 == 0 {
		if len(yyv3724) != 0 {
			yyv3724 = yyv3724[:0]
			yyc3724 = true
		}
	} else if yyl3724 > 0 {

		if yyl3724 > cap(yyv3724) {
			yyrl3724, yyrt3724 = z.DecInferLen(yyl3724, z.DecBasicHandle().MaxInitLen, 560)
			yyv3724 = make([]PodTemplate, yyrl3724)
			yyc3724 = true

			yyrr3724 = len(yyv3724)
		} else if yyl3724 != len(yyv3724) {
			yyv3724 = yyv3724[:yyl3724]
			yyc3724 = true
		}
		yyj3724 := 0
		for ; yyj3724 < yyrr3724; yyj3724++ {
			if r.TryDecodeAsNil() {
				yyv3724[yyj3724] = PodTemplate{}
			} else {
				yyv3725 := &yyv3724[yyj3724]
				yyv3725.CodecDecodeSelf(d)
			}

		}
		if yyrt3724 {
			for ; yyj3724 < yyl3724; yyj3724++ {
				yyv3724 = append(yyv3724, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3724[yyj3724] = PodTemplate{}
				} else {
					yyv3726 := &yyv3724[yyj3724]
					yyv3726.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3724 := 0; !r.CheckBreak(); yyj3724++ {
			if yyj3724 >= len(yyv3724) {
				yyv3724 = append(yyv3724, PodTemplate{}) // var yyz3724 PodTemplate
				yyc3724 = true
			}

			if yyj3724 < len(yyv3724) {
				if r.TryDecodeAsNil() {
					yyv3724[yyj3724] = PodTemplate{}
				} else {
					yyv3727 := &yyv3724[yyj3724]
					yyv3727.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3724.End()
	}
	if yyc3724 {
		*v = yyv3724
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3728 := range v {
		yy3729 := &yyv3728
		yy3729.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3730 := *v
	yyh3730, yyl3730 := z.DecSliceHelperStart()

	var yyrr3730, yyrl3730 int
	var yyc3730, yyrt3730 bool
	_, _, _ = yyc3730, yyrt3730, yyrl3730
	yyrr3730 = yyl3730

	if yyv3730 == nil {
		if yyrl3730, yyrt3730 = z.DecInferLen(yyl3730, z.DecBasicHandle().MaxInitLen, 248); yyrt3730 {
			yyrr3730 = yyrl3730
		}
		yyv3730 = make([]ReplicationController, yyrl3730)
		yyc3730 = true
	}

	if yyl3730 == 0 {
		if len(yyv3730) != 0 {
			yyv3730 = yyv3730[:0]
			yyc3730 = true
		}
	} else if yyl3730 > 0 {

		if yyl3730 > cap(yyv3730) {
			yyrl3730, yyrt3730 = z.DecInferLen(yyl3730, z.DecBasicHandle().MaxInitLen, 248)
			yyv3730 = make([]ReplicationController, yyrl3730)
			yyc3730 = true

			yyrr3730 = len(yyv3730)
		} else if yyl3730 != len(yyv3730) {
			yyv3730 = yyv3730[:yyl3730]
			yyc3730 = true
		}
		yyj3730 := 0
		for ; yyj3730 < yyrr3730; yyj3730++ {
			if r.TryDecodeAsNil() {
				yyv3730[yyj3730] = ReplicationController{}
			} else {
				yyv3731 := &yyv3730[yyj3730]
				yyv3731.CodecDecodeSelf(d)
			}

		}
		if yyrt3730 {
			for ; yyj3730 < yyl3730; yyj3730++ {
				yyv3730 = append(yyv3730, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3730[yyj3730] = ReplicationController{}
				} else {
					yyv3732 := &yyv3730[yyj3730]
					yyv3732.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3730 := 0; !r.CheckBreak(); yyj3730++ {
			if yyj3730 >= len(yyv3730) {
				yyv3730 = append(yyv3730, ReplicationController{}) // var yyz3730 ReplicationController
				yyc3730 = true
			}

			if yyj3730 < len(yyv3730) {
				if r.TryDecodeAsNil() {
					yyv3730[yyj3730] = ReplicationController{}
				} else {
					yyv3733 := &yyv3730[yyj3730]
					yyv3733.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3730.End()
	}
	if yyc3730 {
		*v = yyv3730
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3734 := range v {
		yy3735 := &yyv3734
		yy3735.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3736 := *v
	yyh3736, yyl3736 := z.DecSliceHelperStart()

	var yyrr3736, yyrl3736 int
	var yyc3736, yyrt3736 bool
	_, _, _ = yyc3736, yyrt3736, yyrl3736
	yyrr3736 = yyl3736

	if yyv3736 == nil {
		if yyrl3736, yyrt3736 = z.DecInferLen(yyl3736, z.DecBasicHandle().MaxInitLen, 32); yyrt3736 {
			yyrr3736 = yyrl3736
		}
		yyv3736 = make([]LoadBalancerIngress, yyrl3736)
		yyc3736 = true
	}

	if yyl3736 == 0 {
		if len(yyv3736) != 0 {
			yyv3736 = yyv3736[:0]
			yyc3736 = true
		}
	} else if yyl3736 > 0 {

		if yyl3736 > cap(yyv3736) {
			yyrl3736, yyrt3736 = z.DecInferLen(yyl3736, z.DecBasicHandle().MaxInitLen, 32)
			yyv3736 = make([]LoadBalancerIngress, yyrl3736)
			yyc3736 = true

			yyrr3736 = len(yyv3736)
		} else if yyl3736 != len(yyv3736) {
			yyv3736 = yyv3736[:yyl3736]
			yyc3736 = true
		}
		yyj3736 := 0
		for ; yyj3736 < yyrr3736; yyj3736++ {
			if r.TryDecodeAsNil() {
				yyv3736[yyj3736] = LoadBalancerIngress{}
			} else {
				yyv3737 := &yyv3736[yyj3736]
				yyv3737.CodecDecodeSelf(d)
			}

		}
		if yyrt3736 {
			for ; yyj3736 < yyl3736; yyj3736++ {
				yyv3736 = append(yyv3736, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3736[yyj3736] = LoadBalancerIngress{}
				} else {
					yyv3738 := &yyv3736[yyj3736]
					yyv3738.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3736 := 0; !r.CheckBreak(); yyj3736++ {
			if yyj3736 >= len(yyv3736) {
				yyv3736 = append(yyv3736, LoadBalancerIngress{}) // var yyz3736 LoadBalancerIngress
				yyc3736 = true
			}

			if yyj3736 < len(yyv3736) {
				if r.TryDecodeAsNil() {
					yyv3736[yyj3736] = LoadBalancerIngress{}
				} else {
					yyv3739 := &yyv3736[yyj3736]
					yyv3739.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3736.End()
	}
	if yyc3736 {
		*v = yyv3736
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3740 := range v {
		yy3741 := &yyv3740
		yy3741.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3742 := *v
	yyh3742, yyl3742 := z.DecSliceHelperStart()

	var yyrr3742, yyrl3742 int
	var yyc3742, yyrt3742 bool
	_, _, _ = yyc3742, yyrt3742, yyrl3742
	yyrr3742 = yyl3742

	if yyv3742 == nil {
		if yyrl3742, yyrt3742 = z.DecInferLen(yyl3742, z.DecBasicHandle().MaxInitLen, 80); yyrt3742 {
			yyrr3742 = yyrl3742
		}
		yyv3742 = make([]ServicePort, yyrl3742)
		yyc3742 = true
	}

	if yyl3742 == 0 {
		if len(yyv3742) != 0 {
			yyv3742 = yyv3742[:0]
			yyc3742 = true
		}
	} else if yyl3742 > 0 {

		if yyl3742 > cap(yyv3742) {
			yyrl3742, yyrt3742 = z.DecInferLen(yyl3742, z.DecBasicHandle().MaxInitLen, 80)
			yyv3742 = make([]ServicePort, yyrl3742)
			yyc3742 = true

			yyrr3742 = len(yyv3742)
		} else if yyl3742 != len(yyv3742) {
			yyv3742 = yyv3742[:yyl3742]
			yyc3742 = true
		}
		yyj3742 := 0
		for ; yyj3742 < yyrr3742; yyj3742++ {
			if r.TryDecodeAsNil() {
				yyv3742[yyj3742] = ServicePort{}
			} else {
				yyv3743 := &yyv3742[yyj3742]
				yyv3743.CodecDecodeSelf(d)
			}

		}
		if yyrt3742 {
			for ; yyj3742 < yyl3742; yyj3742++ {
				yyv3742 = append(yyv3742, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3742[yyj3742] = ServicePort{}
				} else {
					yyv3744 := &yyv3742[yyj3742]
					yyv3744.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3742 := 0; !r.CheckBreak(); yyj3742++ {
			if yyj3742 >= len(yyv3742) {
				yyv3742 = append(yyv3742, ServicePort{}) // var yyz3742 ServicePort
				yyc3742 = true
			}

			if yyj3742 < len(yyv3742) {
				if r.TryDecodeAsNil() {
					yyv3742[yyj3742] = ServicePort{}
				} else {
					yyv3745 := &yyv3742[yyj3742]
					yyv3745.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3742.End()
	}
	if yyc3742 {
		*v = yyv3742
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3746 := range v {
		yy3747 := &yyv3746
		yy3747.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3748 := *v
	yyh3748, yyl3748 := z.DecSliceHelperStart()

	var yyrr3748, yyrl3748 int
	var yyc3748, yyrt3748 bool
	_, _, _ = yyc3748, yyrt3748, yyrl3748
	yyrr3748 = yyl3748

	if yyv3748 == nil {
		if yyrl3748, yyrt3748 = z.DecInferLen(yyl3748, z.DecBasicHandle().MaxInitLen, 376); yyrt3748 {
			yyrr3748 = yyrl3748
		}
		yyv3748 = make([]Service, yyrl3748)
		yyc3748 = true
	}

	if yyl3748 == 0 {
		if len(yyv3748) != 0 {
			yyv3748 = yyv3748[:0]
			yyc3748 = true
		}
	} else if yyl3748 > 0 {

		if yyl3748 > cap(yyv3748) {
			yyrl3748, yyrt3748 = z.DecInferLen(yyl3748, z.DecBasicHandle().MaxInitLen, 376)
			yyv3748 = make([]Service, yyrl3748)
			yyc3748 = true

			yyrr3748 = len(yyv3748)
		} else if yyl3748 != len(yyv3748) {
			yyv3748 = yyv3748[:yyl3748]
			yyc3748 = true
		}
		yyj3748 := 0
		for ; yyj3748 < yyrr3748; yyj3748++ {
			if r.TryDecodeAsNil() {
				yyv3748[yyj3748] = Service{}
			} else {
				yyv3749 := &yyv3748[yyj3748]
				yyv3749.CodecDecodeSelf(d)
			}

		}
		if yyrt3748 {
			for ; yyj3748 < yyl3748; yyj3748++ {
				yyv3748 = append(yyv3748, Service{})
				if r.TryDecodeAsNil() {
					yyv3748[yyj3748] = Service{}
				} else {
					yyv3750 := &yyv3748[yyj3748]
					yyv3750.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3748 := 0; !r.CheckBreak(); yyj3748++ {
			if yyj3748 >= len(yyv3748) {
				yyv3748 = append(yyv3748, Service{}) // var yyz3748 Service
				yyc3748 = true
			}

			if yyj3748 < len(yyv3748) {
				if r.TryDecodeAsNil() {
					yyv3748[yyj3748] = Service{}
				} else {
					yyv3751 := &yyv3748[yyj3748]
					yyv3751.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3748.End()
	}
	if yyc3748 {
		*v = yyv3748
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3752 := range v {
		yy3753 := &yyv3752
		yy3753.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3754 := *v
	yyh3754, yyl3754 := z.DecSliceHelperStart()

	var yyrr3754, yyrl3754 int
	var yyc3754, yyrt3754 bool
	_, _, _ = yyc3754, yyrt3754, yyrl3754
	yyrr3754 = yyl3754

	if yyv3754 == nil {
		if yyrl3754, yyrt3754 = z.DecInferLen(yyl3754, z.DecBasicHandle().MaxInitLen, 112); yyrt3754 {
			yyrr3754 = yyrl3754
		}
		yyv3754 = make([]ObjectReference, yyrl3754)
		yyc3754 = true
	}

	if yyl3754 == 0 {
		if len(yyv3754) != 0 {
			yyv3754 = yyv3754[:0]
			yyc3754 = true
		}
	} else if yyl3754 > 0 {

		if yyl3754 > cap(yyv3754) {
			yyrl3754, yyrt3754 = z.DecInferLen(yyl3754, z.DecBasicHandle().MaxInitLen, 112)
			yyv3754 = make([]ObjectReference, yyrl3754)
			yyc3754 = true

			yyrr3754 = len(yyv3754)
		} else if yyl3754 != len(yyv3754) {
			yyv3754 = yyv3754[:yyl3754]
			yyc3754 = true
		}
		yyj3754 := 0
		for ; yyj3754 < yyrr3754; yyj3754++ {
			if r.TryDecodeAsNil() {
				yyv3754[yyj3754] = ObjectReference{}
			} else {
				yyv3755 := &yyv3754[yyj3754]
				yyv3755.CodecDecodeSelf(d)
			}

		}
		if yyrt3754 {
			for ; yyj3754 < yyl3754; yyj3754++ {
				yyv3754 = append(yyv3754, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3754[yyj3754] = ObjectReference{}
				} else {
					yyv3756 := &yyv3754[yyj3754]
					yyv3756.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3754 := 0; !r.CheckBreak(); yyj3754++ {
			if yyj3754 >= len(yyv3754) {
				yyv3754 = append(yyv3754, ObjectReference{}) // var yyz3754 ObjectReference
				yyc3754 = true
			}

			if yyj3754 < len(yyv3754) {
				if r.TryDecodeAsNil() {
					yyv3754[yyj3754] = ObjectReference{}
				} else {
					yyv3757 := &yyv3754[yyj3754]
					yyv3757.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3754.End()
	}
	if yyc3754 {
		*v = yyv3754
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3758 := range v {
		yy3759 := &yyv3758
		yy3759.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3760 := *v
	yyh3760, yyl3760 := z.DecSliceHelperStart()

	var yyrr3760, yyrl3760 int
	var yyc3760, yyrt3760 bool
	_, _, _ = yyc3760, yyrt3760, yyrl3760
	yyrr3760 = yyl3760

	if yyv3760 == nil {
		if yyrl3760, yyrt3760 = z.DecInferLen(yyl3760, z.DecBasicHandle().MaxInitLen, 256); yyrt3760 {
			yyrr3760 = yyrl3760
		}
		yyv3760 = make([]ServiceAccount, yyrl3760)
		yyc3760 = true
	}

	if yyl3760 == 0 {
		if len(yyv3760) != 0 {
			yyv3760 = yyv3760[:0]
			yyc3760 = true
		}
	} else if yyl3760 > 0 {

		if yyl3760 > cap(yyv3760) {
			yyrl3760, yyrt3760 = z.DecInferLen(yyl3760, z.DecBasicHandle().MaxInitLen, 256)
			yyv3760 = make([]ServiceAccount, yyrl3760)
			yyc3760 = true

			yyrr3760 = len(yyv3760)
		} else if yyl3760 != len(yyv3760) {
			yyv3760 = yyv3760[:yyl3760]
			yyc3760 = true
		}
		yyj3760 := 0
		for ; yyj3760 < yyrr3760; yyj3760++ {
			if r.TryDecodeAsNil() {
				yyv3760[yyj3760] = ServiceAccount{}
			} else {
				yyv3761 := &yyv3760[yyj3760]
				yyv3761.CodecDecodeSelf(d)
			}

		}
		if yyrt3760 {
			for ; yyj3760 < yyl3760; yyj3760++ {
				yyv3760 = append(yyv3760, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3760[yyj3760] = ServiceAccount{}
				} else {
					yyv3762 := &yyv3760[yyj3760]
					yyv3762.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3760 := 0; !r.CheckBreak(); yyj3760++ {
			if yyj3760 >= len(yyv3760) {
				yyv3760 = append(yyv3760, ServiceAccount{}) // var yyz3760 ServiceAccount
				yyc3760 = true
			}

			if yyj3760 < len(yyv3760) {
				if r.TryDecodeAsNil() {
					yyv3760[yyj3760] = ServiceAccount{}
				} else {
					yyv3763 := &yyv3760[yyj3760]
					yyv3763.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3760.End()
	}
	if yyc3760 {
		*v = yyv3760
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3764 := range v {
		yy3765 := &yyv3764
		yy3765.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3766 := *v
	yyh3766, yyl3766 := z.DecSliceHelperStart()

	var yyrr3766, yyrl3766 int
	var yyc3766, yyrt3766 bool
	_, _, _ = yyc3766, yyrt3766, yyrl3766
	yyrr3766 = yyl3766

	if yyv3766 == nil {
		if yyrl3766, yyrt3766 = z.DecInferLen(yyl3766, z.DecBasicHandle().MaxInitLen, 72); yyrt3766 {
			yyrr3766 = yyrl3766
		}
		yyv3766 = make([]EndpointSubset, yyrl3766)
		yyc3766 = true
	}

	if yyl3766 == 0 {
		if len(yyv3766) != 0 {
			yyv3766 = yyv3766[:0]
			yyc3766 = true
		}
	} else if yyl3766 > 0 {

		if yyl3766 > cap(yyv3766) {
			yyrl3766, yyrt3766 = z.DecInferLen(yyl3766, z.DecBasicHandle().MaxInitLen, 72)
			yyv3766 = make([]EndpointSubset, yyrl3766)
			yyc3766 = true

			yyrr3766 = len(yyv3766)
		} else if yyl3766 != len(yyv3766) {
			yyv3766 = yyv3766[:yyl3766]
			yyc3766 = true
		}
		yyj3766 := 0
		for ; yyj3766 < yyrr3766; yyj3766++ {
			if r.TryDecodeAsNil() {
				yyv3766[yyj3766] = EndpointSubset{}
			} else {
				yyv3767 := &yyv3766[yyj3766]
				yyv3767.CodecDecodeSelf(d)
			}

		}
		if yyrt3766 {
			for ; yyj3766 < yyl3766; yyj3766++ {
				yyv3766 = append(yyv3766, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3766[yyj3766] = EndpointSubset{}
				} else {
					yyv3768 := &yyv3766[yyj3766]
					yyv3768.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3766 := 0; !r.CheckBreak(); yyj3766++ {
			if yyj3766 >= len(yyv3766) {
				yyv3766 = append(yyv3766, EndpointSubset{}) // var yyz3766 EndpointSubset
				yyc3766 = true
			}

			if yyj3766 < len(yyv3766) {
				if r.TryDecodeAsNil() {
					yyv3766[yyj3766] = EndpointSubset{}
				} else {
					yyv3769 := &yyv3766[yyj3766]
					yyv3769.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3766.End()
	}
	if yyc3766 {
		*v = yyv3766
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3770 := range v {
		yy3771 := &yyv3770
		yy3771.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3772 := *v
	yyh3772, yyl3772 := z.DecSliceHelperStart()

	var yyrr3772, yyrl3772 int
	var yyc3772, yyrt3772 bool
	_, _, _ = yyc3772, yyrt3772, yyrl3772
	yyrr3772 = yyl3772

	if yyv3772 == nil {
		if yyrl3772, yyrt3772 = z.DecInferLen(yyl3772, z.DecBasicHandle().MaxInitLen, 24); yyrt3772 {
			yyrr3772 = yyrl3772
		}
		yyv3772 = make([]EndpointAddress, yyrl3772)
		yyc3772 = true
	}

	if yyl3772 == 0 {
		if len(yyv3772) != 0 {
			yyv3772 = yyv3772[:0]
			yyc3772 = true
		}
	} else if yyl3772 > 0 {

		if yyl3772 > cap(yyv3772) {
			yyrl3772, yyrt3772 = z.DecInferLen(yyl3772, z.DecBasicHandle().MaxInitLen, 24)
			yyv3772 = make([]EndpointAddress, yyrl3772)
			yyc3772 = true

			yyrr3772 = len(yyv3772)
		} else if yyl3772 != len(yyv3772) {
			yyv3772 = yyv3772[:yyl3772]
			yyc3772 = true
		}
		yyj3772 := 0
		for ; yyj3772 < yyrr3772; yyj3772++ {
			if r.TryDecodeAsNil() {
				yyv3772[yyj3772] = EndpointAddress{}
			} else {
				yyv3773 := &yyv3772[yyj3772]
				yyv3773.CodecDecodeSelf(d)
			}

		}
		if yyrt3772 {
			for ; yyj3772 < yyl3772; yyj3772++ {
				yyv3772 = append(yyv3772, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3772[yyj3772] = EndpointAddress{}
				} else {
					yyv3774 := &yyv3772[yyj3772]
					yyv3774.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3772 := 0; !r.CheckBreak(); yyj3772++ {
			if yyj3772 >= len(yyv3772) {
				yyv3772 = append(yyv3772, EndpointAddress{}) // var yyz3772 EndpointAddress
				yyc3772 = true
			}

			if yyj3772 < len(yyv3772) {
				if r.TryDecodeAsNil() {
					yyv3772[yyj3772] = EndpointAddress{}
				} else {
					yyv3775 := &yyv3772[yyj3772]
					yyv3775.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3772.End()
	}
	if yyc3772 {
		*v = yyv3772
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3776 := range v {
		yy3777 := &yyv3776
		yy3777.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3778 := *v
	yyh3778, yyl3778 := z.DecSliceHelperStart()

	var yyrr3778, yyrl3778 int
	var yyc3778, yyrt3778 bool
	_, _, _ = yyc3778, yyrt3778, yyrl3778
	yyrr3778 = yyl3778

	if yyv3778 == nil {
		if yyrl3778, yyrt3778 = z.DecInferLen(yyl3778, z.DecBasicHandle().MaxInitLen, 40); yyrt3778 {
			yyrr3778 = yyrl3778
		}
		yyv3778 = make([]EndpointPort, yyrl3778)
		yyc3778 = true
	}

	if yyl3778 == 0 {
		if len(yyv3778) != 0 {
			yyv3778 = yyv3778[:0]
			yyc3778 = true
		}
	} else if yyl3778 > 0 {

		if yyl3778 > cap(yyv3778) {
			yyrl3778, yyrt3778 = z.DecInferLen(yyl3778, z.DecBasicHandle().MaxInitLen, 40)
			yyv3778 = make([]EndpointPort, yyrl3778)
			yyc3778 = true

			yyrr3778 = len(yyv3778)
		} else if yyl3778 != len(yyv3778) {
			yyv3778 = yyv3778[:yyl3778]
			yyc3778 = true
		}
		yyj3778 := 0
		for ; yyj3778 < yyrr3778; yyj3778++ {
			if r.TryDecodeAsNil() {
				yyv3778[yyj3778] = EndpointPort{}
			} else {
				yyv3779 := &yyv3778[yyj3778]
				yyv3779.CodecDecodeSelf(d)
			}

		}
		if yyrt3778 {
			for ; yyj3778 < yyl3778; yyj3778++ {
				yyv3778 = append(yyv3778, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3778[yyj3778] = EndpointPort{}
				} else {
					yyv3780 := &yyv3778[yyj3778]
					yyv3780.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3778 := 0; !r.CheckBreak(); yyj3778++ {
			if yyj3778 >= len(yyv3778) {
				yyv3778 = append(yyv3778, EndpointPort{}) // var yyz3778 EndpointPort
				yyc3778 = true
			}

			if yyj3778 < len(yyv3778) {
				if r.TryDecodeAsNil() {
					yyv3778[yyj3778] = EndpointPort{}
				} else {
					yyv3781 := &yyv3778[yyj3778]
					yyv3781.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3778.End()
	}
	if yyc3778 {
		*v = yyv3778
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3782 := range v {
		yy3783 := &yyv3782
		yy3783.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3784 := *v
	yyh3784, yyl3784 := z.DecSliceHelperStart()

	var yyrr3784, yyrl3784 int
	var yyc3784, yyrt3784 bool
	_, _, _ = yyc3784, yyrt3784, yyrl3784
	yyrr3784 = yyl3784

	if yyv3784 == nil {
		if yyrl3784, yyrt3784 = z.DecInferLen(yyl3784, z.DecBasicHandle().MaxInitLen, 232); yyrt3784 {
			yyrr3784 = yyrl3784
		}
		yyv3784 = make([]Endpoints, yyrl3784)
		yyc3784 = true
	}

	if yyl3784 == 0 {
		if len(yyv3784) != 0 {
			yyv3784 = yyv3784[:0]
			yyc3784 = true
		}
	} else if yyl3784 > 0 {

		if yyl3784 > cap(yyv3784) {
			yyrl3784, yyrt3784 = z.DecInferLen(yyl3784, z.DecBasicHandle().MaxInitLen, 232)
			yyv3784 = make([]Endpoints, yyrl3784)
			yyc3784 = true

			yyrr3784 = len(yyv3784)
		} else if yyl3784 != len(yyv3784) {
			yyv3784 = yyv3784[:yyl3784]
			yyc3784 = true
		}
		yyj3784 := 0
		for ; yyj3784 < yyrr3784; yyj3784++ {
			if r.TryDecodeAsNil() {
				yyv3784[yyj3784] = Endpoints{}
			} else {
				yyv3785 := &yyv3784[yyj3784]
				yyv3785.CodecDecodeSelf(d)
			}

		}
		if yyrt3784 {
			for ; yyj3784 < yyl3784; yyj3784++ {
				yyv3784 = append(yyv3784, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3784[yyj3784] = Endpoints{}
				} else {
					yyv3786 := &yyv3784[yyj3784]
					yyv3786.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3784 := 0; !r.CheckBreak(); yyj3784++ {
			if yyj3784 >= len(yyv3784) {
				yyv3784 = append(yyv3784, Endpoints{}) // var yyz3784 Endpoints
				yyc3784 = true
			}

			if yyj3784 < len(yyv3784) {
				if r.TryDecodeAsNil() {
					yyv3784[yyj3784] = Endpoints{}
				} else {
					yyv3787 := &yyv3784[yyj3784]
					yyv3787.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3784.End()
	}
	if yyc3784 {
		*v = yyv3784
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3788 := range v {
		yy3789 := &yyv3788
		yy3789.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3790 := *v
	yyh3790, yyl3790 := z.DecSliceHelperStart()

	var yyrr3790, yyrl3790 int
	var yyc3790, yyrt3790 bool
	_, _, _ = yyc3790, yyrt3790, yyrl3790
	yyrr3790 = yyl3790

	if yyv3790 == nil {
		if yyrl3790, yyrt3790 = z.DecInferLen(yyl3790, z.DecBasicHandle().MaxInitLen, 112); yyrt3790 {
			yyrr3790 = yyrl3790
		}
		yyv3790 = make([]NodeCondition, yyrl3790)
		yyc3790 = true
	}

	if yyl3790 == 0 {
		if len(yyv3790) != 0 {
			yyv3790 = yyv3790[:0]
			yyc3790 = true
		}
	} else if yyl3790 > 0 {

		if yyl3790 > cap(yyv3790) {
			yyrl3790, yyrt3790 = z.DecInferLen(yyl3790, z.DecBasicHandle().MaxInitLen, 112)
			yyv3790 = make([]NodeCondition, yyrl3790)
			yyc3790 = true

			yyrr3790 = len(yyv3790)
		} else if yyl3790 != len(yyv3790) {
			yyv3790 = yyv3790[:yyl3790]
			yyc3790 = true
		}
		yyj3790 := 0
		for ; yyj3790 < yyrr3790; yyj3790++ {
			if r.TryDecodeAsNil() {
				yyv3790[yyj3790] = NodeCondition{}
			} else {
				yyv3791 := &yyv3790[yyj3790]
				yyv3791.CodecDecodeSelf(d)
			}

		}
		if yyrt3790 {
			for ; yyj3790 < yyl3790; yyj3790++ {
				yyv3790 = append(yyv3790, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3790[yyj3790] = NodeCondition{}
				} else {
					yyv3792 := &yyv3790[yyj3790]
					yyv3792.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3790 := 0; !r.CheckBreak(); yyj3790++ {
			if yyj3790 >= len(yyv3790) {
				yyv3790 = append(yyv3790, NodeCondition{}) // var yyz3790 NodeCondition
				yyc3790 = true
			}

			if yyj3790 < len(yyv3790) {
				if r.TryDecodeAsNil() {
					yyv3790[yyj3790] = NodeCondition{}
				} else {
					yyv3793 := &yyv3790[yyj3790]
					yyv3793.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3790.End()
	}
	if yyc3790 {
		*v = yyv3790
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3794 := range v {
		yy3795 := &yyv3794
		yy3795.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3796 := *v
	yyh3796, yyl3796 := z.DecSliceHelperStart()

	var yyrr3796, yyrl3796 int
	var yyc3796, yyrt3796 bool
	_, _, _ = yyc3796, yyrt3796, yyrl3796
	yyrr3796 = yyl3796

	if yyv3796 == nil {
		if yyrl3796, yyrt3796 = z.DecInferLen(yyl3796, z.DecBasicHandle().MaxInitLen, 32); yyrt3796 {
			yyrr3796 = yyrl3796
		}
		yyv3796 = make([]NodeAddress, yyrl3796)
		yyc3796 = true
	}

	if yyl3796 == 0 {
		if len(yyv3796) != 0 {
			yyv3796 = yyv3796[:0]
			yyc3796 = true
		}
	} else if yyl3796 > 0 {

		if yyl3796 > cap(yyv3796) {
			yyrl3796, yyrt3796 = z.DecInferLen(yyl3796, z.DecBasicHandle().MaxInitLen, 32)
			yyv3796 = make([]NodeAddress, yyrl3796)
			yyc3796 = true

			yyrr3796 = len(yyv3796)
		} else if yyl3796 != len(yyv3796) {
			yyv3796 = yyv3796[:yyl3796]
			yyc3796 = true
		}
		yyj3796 := 0
		for ; yyj3796 < yyrr3796; yyj3796++ {
			if r.TryDecodeAsNil() {
				yyv3796[yyj3796] = NodeAddress{}
			} else {
				yyv3797 := &yyv3796[yyj3796]
				yyv3797.CodecDecodeSelf(d)
			}

		}
		if yyrt3796 {
			for ; yyj3796 < yyl3796; yyj3796++ {
				yyv3796 = append(yyv3796, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3796[yyj3796] = NodeAddress{}
				} else {
					yyv3798 := &yyv3796[yyj3796]
					yyv3798.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3796 := 0; !r.CheckBreak(); yyj3796++ {
			if yyj3796 >= len(yyv3796) {
				yyv3796 = append(yyv3796, NodeAddress{}) // var yyz3796 NodeAddress
				yyc3796 = true
			}

			if yyj3796 < len(yyv3796) {
				if r.TryDecodeAsNil() {
					yyv3796[yyj3796] = NodeAddress{}
				} else {
					yyv3799 := &yyv3796[yyj3796]
					yyv3799.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3796.End()
	}
	if yyc3796 {
		*v = yyv3796
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3800, yyv3800 := range v {
		yyk3800.CodecEncodeSelf(e)
		yy3801 := &yyv3800
		yym3802 := z.EncBinary()
		_ = yym3802
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3801) {
		} else if !yym3802 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3801)
		} else {
			z.EncFallback(yy3801)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3803 := *v
	yyl3803 := r.ReadMapStart()
	yybh3803 := z.DecBasicHandle()
	if yyv3803 == nil {
		yyrl3803, _ := z.DecInferLen(yyl3803, yybh3803.MaxInitLen, 40)
		yyv3803 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3803)
		*v = yyv3803
	}
	var yymk3803 ResourceName
	var yymv3803 pkg3_resource.Quantity
	var yymg3803 bool
	if yybh3803.MapValueReset {
		yymg3803 = true
	}
	if yyl3803 > 0 {
		for yyj3803 := 0; yyj3803 < yyl3803; yyj3803++ {
			if r.TryDecodeAsNil() {
				yymk3803 = ""
			} else {
				yymk3803 = ResourceName(r.DecodeString())
			}

			if yymg3803 {
				yymv3803 = yyv3803[yymk3803]
			} else {
				yymv3803 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3803 = pkg3_resource.Quantity{}
			} else {
				yyv3805 := &yymv3803
				yym3806 := z.DecBinary()
				_ = yym3806
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3805) {
				} else if !yym3806 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3805)
				} else {
					z.DecFallback(yyv3805, false)
				}
			}

			if yyv3803 != nil {
				yyv3803[yymk3803] = yymv3803
			}
		}
	} else if yyl3803 < 0 {
		for yyj3803 := 0; !r.CheckBreak(); yyj3803++ {
			if r.TryDecodeAsNil() {
				yymk3803 = ""
			} else {
				yymk3803 = ResourceName(r.DecodeString())
			}

			if yymg3803 {
				yymv3803 = yyv3803[yymk3803]
			} else {
				yymv3803 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3803 = pkg3_resource.Quantity{}
			} else {
				yyv3808 := &yymv3803
				yym3809 := z.DecBinary()
				_ = yym3809
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3808) {
				} else if !yym3809 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3808)
				} else {
					z.DecFallback(yyv3808, false)
				}
			}

			if yyv3803 != nil {
				yyv3803[yymk3803] = yymv3803
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3810 := range v {
		yy3811 := &yyv3810
		yy3811.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3812 := *v
	yyh3812, yyl3812 := z.DecSliceHelperStart()

	var yyrr3812, yyrl3812 int
	var yyc3812, yyrt3812 bool
	_, _, _ = yyc3812, yyrt3812, yyrl3812
	yyrr3812 = yyl3812

	if yyv3812 == nil {
		if yyrl3812, yyrt3812 = z.DecInferLen(yyl3812, z.DecBasicHandle().MaxInitLen, 472); yyrt3812 {
			yyrr3812 = yyrl3812
		}
		yyv3812 = make([]Node, yyrl3812)
		yyc3812 = true
	}

	if yyl3812 == 0 {
		if len(yyv3812) != 0 {
			yyv3812 = yyv3812[:0]
			yyc3812 = true
		}
	} else if yyl3812 > 0 {

		if yyl3812 > cap(yyv3812) {
			yyrl3812, yyrt3812 = z.DecInferLen(yyl3812, z.DecBasicHandle().MaxInitLen, 472)
			yyv3812 = make([]Node, yyrl3812)
			yyc3812 = true

			yyrr3812 = len(yyv3812)
		} else if yyl3812 != len(yyv3812) {
			yyv3812 = yyv3812[:yyl3812]
			yyc3812 = true
		}
		yyj3812 := 0
		for ; yyj3812 < yyrr3812; yyj3812++ {
			if r.TryDecodeAsNil() {
				yyv3812[yyj3812] = Node{}
			} else {
				yyv3813 := &yyv3812[yyj3812]
				yyv3813.CodecDecodeSelf(d)
			}

		}
		if yyrt3812 {
			for ; yyj3812 < yyl3812; yyj3812++ {
				yyv3812 = append(yyv3812, Node{})
				if r.TryDecodeAsNil() {
					yyv3812[yyj3812] = Node{}
				} else {
					yyv3814 := &yyv3812[yyj3812]
					yyv3814.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3812 := 0; !r.CheckBreak(); yyj3812++ {
			if yyj3812 >= len(yyv3812) {
				yyv3812 = append(yyv3812, Node{}) // var yyz3812 Node
				yyc3812 = true
			}

			if yyj3812 < len(yyv3812) {
				if r.TryDecodeAsNil() {
					yyv3812[yyj3812] = Node{}
				} else {
					yyv3815 := &yyv3812[yyj3812]
					yyv3815.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3812.End()
	}
	if yyc3812 {
		*v = yyv3812
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3816 := range v {
		yyv3816.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3817 := *v
	yyh3817, yyl3817 := z.DecSliceHelperStart()

	var yyrr3817, yyrl3817 int
	var yyc3817, yyrt3817 bool
	_, _, _ = yyc3817, yyrt3817, yyrl3817
	yyrr3817 = yyl3817

	if yyv3817 == nil {
		if yyrl3817, yyrt3817 = z.DecInferLen(yyl3817, z.DecBasicHandle().MaxInitLen, 16); yyrt3817 {
			yyrr3817 = yyrl3817
		}
		yyv3817 = make([]FinalizerName, yyrl3817)
		yyc3817 = true
	}

	if yyl3817 == 0 {
		if len(yyv3817) != 0 {
			yyv3817 = yyv3817[:0]
			yyc3817 = true
		}
	} else if yyl3817 > 0 {

		if yyl3817 > cap(yyv3817) {
			yyrl3817, yyrt3817 = z.DecInferLen(yyl3817, z.DecBasicHandle().MaxInitLen, 16)

			yyv23817 := yyv3817
			yyv3817 = make([]FinalizerName, yyrl3817)
			if len(yyv3817) > 0 {
				copy(yyv3817, yyv23817[:cap(yyv23817)])
			}
			yyc3817 = true

			yyrr3817 = len(yyv3817)
		} else if yyl3817 != len(yyv3817) {
			yyv3817 = yyv3817[:yyl3817]
			yyc3817 = true
		}
		yyj3817 := 0
		for ; yyj3817 < yyrr3817; yyj3817++ {
			if r.TryDecodeAsNil() {
				yyv3817[yyj3817] = ""
			} else {
				yyv3817[yyj3817] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3817 {
			for ; yyj3817 < yyl3817; yyj3817++ {
				yyv3817 = append(yyv3817, "")
				if r.TryDecodeAsNil() {
					yyv3817[yyj3817] = ""
				} else {
					yyv3817[yyj3817] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3817 := 0; !r.CheckBreak(); yyj3817++ {
			if yyj3817 >= len(yyv3817) {
				yyv3817 = append(yyv3817, "") // var yyz3817 FinalizerName
				yyc3817 = true
			}

			if yyj3817 < len(yyv3817) {
				if r.TryDecodeAsNil() {
					yyv3817[yyj3817] = ""
				} else {
					yyv3817[yyj3817] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3817.End()
	}
	if yyc3817 {
		*v = yyv3817
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3821 := range v {
		yy3822 := &yyv3821
		yy3822.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3823 := *v
	yyh3823, yyl3823 := z.DecSliceHelperStart()

	var yyrr3823, yyrl3823 int
	var yyc3823, yyrt3823 bool
	_, _, _ = yyc3823, yyrt3823, yyrl3823
	yyrr3823 = yyl3823

	if yyv3823 == nil {
		if yyrl3823, yyrt3823 = z.DecInferLen(yyl3823, z.DecBasicHandle().MaxInitLen, 248); yyrt3823 {
			yyrr3823 = yyrl3823
		}
		yyv3823 = make([]Namespace, yyrl3823)
		yyc3823 = true
	}

	if yyl3823 == 0 {
		if len(yyv3823) != 0 {
			yyv3823 = yyv3823[:0]
			yyc3823 = true
		}
	} else if yyl3823 > 0 {

		if yyl3823 > cap(yyv3823) {
			yyrl3823, yyrt3823 = z.DecInferLen(yyl3823, z.DecBasicHandle().MaxInitLen, 248)
			yyv3823 = make([]Namespace, yyrl3823)
			yyc3823 = true

			yyrr3823 = len(yyv3823)
		} else if yyl3823 != len(yyv3823) {
			yyv3823 = yyv3823[:yyl3823]
			yyc3823 = true
		}
		yyj3823 := 0
		for ; yyj3823 < yyrr3823; yyj3823++ {
			if r.TryDecodeAsNil() {
				yyv3823[yyj3823] = Namespace{}
			} else {
				yyv3824 := &yyv3823[yyj3823]
				yyv3824.CodecDecodeSelf(d)
			}

		}
		if yyrt3823 {
			for ; yyj3823 < yyl3823; yyj3823++ {
				yyv3823 = append(yyv3823, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3823[yyj3823] = Namespace{}
				} else {
					yyv3825 := &yyv3823[yyj3823]
					yyv3825.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3823 := 0; !r.CheckBreak(); yyj3823++ {
			if yyj3823 >= len(yyv3823) {
				yyv3823 = append(yyv3823, Namespace{}) // var yyz3823 Namespace
				yyc3823 = true
			}

			if yyj3823 < len(yyv3823) {
				if r.TryDecodeAsNil() {
					yyv3823[yyj3823] = Namespace{}
				} else {
					yyv3826 := &yyv3823[yyj3823]
					yyv3826.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3823.End()
	}
	if yyc3823 {
		*v = yyv3823
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3827 := range v {
		yy3828 := &yyv3827
		yy3828.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3829 := *v
	yyh3829, yyl3829 := z.DecSliceHelperStart()

	var yyrr3829, yyrl3829 int
	var yyc3829, yyrt3829 bool
	_, _, _ = yyc3829, yyrt3829, yyrl3829
	yyrr3829 = yyl3829

	if yyv3829 == nil {
		if yyrl3829, yyrt3829 = z.DecInferLen(yyl3829, z.DecBasicHandle().MaxInitLen, 440); yyrt3829 {
			yyrr3829 = yyrl3829
		}
		yyv3829 = make([]Event, yyrl3829)
		yyc3829 = true
	}

	if yyl3829 == 0 {
		if len(yyv3829) != 0 {
			yyv3829 = yyv3829[:0]
			yyc3829 = true
		}
	} else if yyl3829 > 0 {

		if yyl3829 > cap(yyv3829) {
			yyrl3829, yyrt3829 = z.DecInferLen(yyl3829, z.DecBasicHandle().MaxInitLen, 440)
			yyv3829 = make([]Event, yyrl3829)
			yyc3829 = true

			yyrr3829 = len(yyv3829)
		} else if yyl3829 != len(yyv3829) {
			yyv3829 = yyv3829[:yyl3829]
			yyc3829 = true
		}
		yyj3829 := 0
		for ; yyj3829 < yyrr3829; yyj3829++ {
			if r.TryDecodeAsNil() {
				yyv3829[yyj3829] = Event{}
			} else {
				yyv3830 := &yyv3829[yyj3829]
				yyv3830.CodecDecodeSelf(d)
			}

		}
		if yyrt3829 {
			for ; yyj3829 < yyl3829; yyj3829++ {
				yyv3829 = append(yyv3829, Event{})
				if r.TryDecodeAsNil() {
					yyv3829[yyj3829] = Event{}
				} else {
					yyv3831 := &yyv3829[yyj3829]
					yyv3831.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3829 := 0; !r.CheckBreak(); yyj3829++ {
			if yyj3829 >= len(yyv3829) {
				yyv3829 = append(yyv3829, Event{}) // var yyz3829 Event
				yyc3829 = true
			}

			if yyj3829 < len(yyv3829) {
				if r.TryDecodeAsNil() {
					yyv3829[yyj3829] = Event{}
				} else {
					yyv3832 := &yyv3829[yyj3829]
					yyv3832.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3829.End()
	}
	if yyc3829 {
		*v = yyv3829
	}

}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg6_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3833 := range v {
		yy3834 := &yyv3833
		yym3835 := z.EncBinary()
		_ = yym3835
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3834) {
		} else if !yym3835 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3834)
		} else {
			z.EncFallback(yy3834)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg6_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3836 := *v
	yyh3836, yyl3836 := z.DecSliceHelperStart()

	var yyrr3836, yyrl3836 int
	var yyc3836, yyrt3836 bool
	_, _, _ = yyc3836, yyrt3836, yyrl3836
	yyrr3836 = yyl3836

	if yyv3836 == nil {
		if yyrl3836, yyrt3836 = z.DecInferLen(yyl3836, z.DecBasicHandle().MaxInitLen, 24); yyrt3836 {
			yyrr3836 = yyrl3836
		}
		yyv3836 = make([]pkg6_runtime.RawExtension, yyrl3836)
		yyc3836 = true
	}

	if yyl3836 == 0 {
		if len(yyv3836) != 0 {
			yyv3836 = yyv3836[:0]
			yyc3836 = true
		}
	} else if yyl3836 > 0 {

		if yyl3836 > cap(yyv3836) {
			yyrl3836, yyrt3836 = z.DecInferLen(yyl3836, z.DecBasicHandle().MaxInitLen, 24)
			yyv3836 = make([]pkg6_runtime.RawExtension, yyrl3836)
			yyc3836 = true

			yyrr3836 = len(yyv3836)
		} else if yyl3836 != len(yyv3836) {
			yyv3836 = yyv3836[:yyl3836]
			yyc3836 = true
		}
		yyj3836 := 0
		for ; yyj3836 < yyrr3836; yyj3836++ {
			if r.TryDecodeAsNil() {
				yyv3836[yyj3836] = pkg6_runtime.RawExtension{}
			} else {
				yyv3837 := &yyv3836[yyj3836]
				yym3838 := z.DecBinary()
				_ = yym3838
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3837) {
				} else if !yym3838 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3837)
				} else {
					z.DecFallback(yyv3837, false)
				}
			}

		}
		if yyrt3836 {
			for ; yyj3836 < yyl3836; yyj3836++ {
				yyv3836 = append(yyv3836, pkg6_runtime.RawExtension{})
				if r.TryDecodeAsNil() {
					yyv3836[yyj3836] = pkg6_runtime.RawExtension{}
				} else {
					yyv3839 := &yyv3836[yyj3836]
					yym3840 := z.DecBinary()
					_ = yym3840
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3839) {
					} else if !yym3840 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3839)
					} else {
						z.DecFallback(yyv3839, false)
					}
				}

			}
		}

	} else {
		for yyj3836 := 0; !r.CheckBreak(); yyj3836++ {
			if yyj3836 >= len(yyv3836) {
				yyv3836 = append(yyv3836, pkg6_runtime.RawExtension{}) // var yyz3836 pkg6_runtime.RawExtension
				yyc3836 = true
			}

			if yyj3836 < len(yyv3836) {
				if r.TryDecodeAsNil() {
					yyv3836[yyj3836] = pkg6_runtime.RawExtension{}
				} else {
					yyv3841 := &yyv3836[yyj3836]
					yym3842 := z.DecBinary()
					_ = yym3842
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3841) {
					} else if !yym3842 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3841)
					} else {
						z.DecFallback(yyv3841, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3836.End()
	}
	if yyc3836 {
		*v = yyv3836
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3843 := range v {
		yy3844 := &yyv3843
		yy3844.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3845 := *v
	yyh3845, yyl3845 := z.DecSliceHelperStart()

	var yyrr3845, yyrl3845 int
	var yyc3845, yyrt3845 bool
	_, _, _ = yyc3845, yyrt3845, yyrl3845
	yyrr3845 = yyl3845

	if yyv3845 == nil {
		if yyrl3845, yyrt3845 = z.DecInferLen(yyl3845, z.DecBasicHandle().MaxInitLen, 56); yyrt3845 {
			yyrr3845 = yyrl3845
		}
		yyv3845 = make([]LimitRangeItem, yyrl3845)
		yyc3845 = true
	}

	if yyl3845 == 0 {
		if len(yyv3845) != 0 {
			yyv3845 = yyv3845[:0]
			yyc3845 = true
		}
	} else if yyl3845 > 0 {

		if yyl3845 > cap(yyv3845) {
			yyrl3845, yyrt3845 = z.DecInferLen(yyl3845, z.DecBasicHandle().MaxInitLen, 56)
			yyv3845 = make([]LimitRangeItem, yyrl3845)
			yyc3845 = true

			yyrr3845 = len(yyv3845)
		} else if yyl3845 != len(yyv3845) {
			yyv3845 = yyv3845[:yyl3845]
			yyc3845 = true
		}
		yyj3845 := 0
		for ; yyj3845 < yyrr3845; yyj3845++ {
			if r.TryDecodeAsNil() {
				yyv3845[yyj3845] = LimitRangeItem{}
			} else {
				yyv3846 := &yyv3845[yyj3845]
				yyv3846.CodecDecodeSelf(d)
			}

		}
		if yyrt3845 {
			for ; yyj3845 < yyl3845; yyj3845++ {
				yyv3845 = append(yyv3845, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3845[yyj3845] = LimitRangeItem{}
				} else {
					yyv3847 := &yyv3845[yyj3845]
					yyv3847.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3845 := 0; !r.CheckBreak(); yyj3845++ {
			if yyj3845 >= len(yyv3845) {
				yyv3845 = append(yyv3845, LimitRangeItem{}) // var yyz3845 LimitRangeItem
				yyc3845 = true
			}

			if yyj3845 < len(yyv3845) {
				if r.TryDecodeAsNil() {
					yyv3845[yyj3845] = LimitRangeItem{}
				} else {
					yyv3848 := &yyv3845[yyj3845]
					yyv3848.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3845.End()
	}
	if yyc3845 {
		*v = yyv3845
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3849 := range v {
		yy3850 := &yyv3849
		yy3850.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3851 := *v
	yyh3851, yyl3851 := z.DecSliceHelperStart()

	var yyrr3851, yyrl3851 int
	var yyc3851, yyrt3851 bool
	_, _, _ = yyc3851, yyrt3851, yyrl3851
	yyrr3851 = yyl3851

	if yyv3851 == nil {
		if yyrl3851, yyrt3851 = z.DecInferLen(yyl3851, z.DecBasicHandle().MaxInitLen, 232); yyrt3851 {
			yyrr3851 = yyrl3851
		}
		yyv3851 = make([]LimitRange, yyrl3851)
		yyc3851 = true
	}

	if yyl3851 == 0 {
		if len(yyv3851) != 0 {
			yyv3851 = yyv3851[:0]
			yyc3851 = true
		}
	} else if yyl3851 > 0 {

		if yyl3851 > cap(yyv3851) {
			yyrl3851, yyrt3851 = z.DecInferLen(yyl3851, z.DecBasicHandle().MaxInitLen, 232)
			yyv3851 = make([]LimitRange, yyrl3851)
			yyc3851 = true

			yyrr3851 = len(yyv3851)
		} else if yyl3851 != len(yyv3851) {
			yyv3851 = yyv3851[:yyl3851]
			yyc3851 = true
		}
		yyj3851 := 0
		for ; yyj3851 < yyrr3851; yyj3851++ {
			if r.TryDecodeAsNil() {
				yyv3851[yyj3851] = LimitRange{}
			} else {
				yyv3852 := &yyv3851[yyj3851]
				yyv3852.CodecDecodeSelf(d)
			}

		}
		if yyrt3851 {
			for ; yyj3851 < yyl3851; yyj3851++ {
				yyv3851 = append(yyv3851, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3851[yyj3851] = LimitRange{}
				} else {
					yyv3853 := &yyv3851[yyj3851]
					yyv3853.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3851 := 0; !r.CheckBreak(); yyj3851++ {
			if yyj3851 >= len(yyv3851) {
				yyv3851 = append(yyv3851, LimitRange{}) // var yyz3851 LimitRange
				yyc3851 = true
			}

			if yyj3851 < len(yyv3851) {
				if r.TryDecodeAsNil() {
					yyv3851[yyj3851] = LimitRange{}
				} else {
					yyv3854 := &yyv3851[yyj3851]
					yyv3854.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3851.End()
	}
	if yyc3851 {
		*v = yyv3851
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3855 := range v {
		yy3856 := &yyv3855
		yy3856.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3857 := *v
	yyh3857, yyl3857 := z.DecSliceHelperStart()

	var yyrr3857, yyrl3857 int
	var yyc3857, yyrt3857 bool
	_, _, _ = yyc3857, yyrt3857, yyrl3857
	yyrr3857 = yyl3857

	if yyv3857 == nil {
		if yyrl3857, yyrt3857 = z.DecInferLen(yyl3857, z.DecBasicHandle().MaxInitLen, 232); yyrt3857 {
			yyrr3857 = yyrl3857
		}
		yyv3857 = make([]ResourceQuota, yyrl3857)
		yyc3857 = true
	}

	if yyl3857 == 0 {
		if len(yyv3857) != 0 {
			yyv3857 = yyv3857[:0]
			yyc3857 = true
		}
	} else if yyl3857 > 0 {

		if yyl3857 > cap(yyv3857) {
			yyrl3857, yyrt3857 = z.DecInferLen(yyl3857, z.DecBasicHandle().MaxInitLen, 232)
			yyv3857 = make([]ResourceQuota, yyrl3857)
			yyc3857 = true

			yyrr3857 = len(yyv3857)
		} else if yyl3857 != len(yyv3857) {
			yyv3857 = yyv3857[:yyl3857]
			yyc3857 = true
		}
		yyj3857 := 0
		for ; yyj3857 < yyrr3857; yyj3857++ {
			if r.TryDecodeAsNil() {
				yyv3857[yyj3857] = ResourceQuota{}
			} else {
				yyv3858 := &yyv3857[yyj3857]
				yyv3858.CodecDecodeSelf(d)
			}

		}
		if yyrt3857 {
			for ; yyj3857 < yyl3857; yyj3857++ {
				yyv3857 = append(yyv3857, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3857[yyj3857] = ResourceQuota{}
				} else {
					yyv3859 := &yyv3857[yyj3857]
					yyv3859.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3857 := 0; !r.CheckBreak(); yyj3857++ {
			if yyj3857 >= len(yyv3857) {
				yyv3857 = append(yyv3857, ResourceQuota{}) // var yyz3857 ResourceQuota
				yyc3857 = true
			}

			if yyj3857 < len(yyv3857) {
				if r.TryDecodeAsNil() {
					yyv3857[yyj3857] = ResourceQuota{}
				} else {
					yyv3860 := &yyv3857[yyj3857]
					yyv3860.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3857.End()
	}
	if yyc3857 {
		*v = yyv3857
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3861, yyv3861 := range v {
		yym3862 := z.EncBinary()
		_ = yym3862
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3861))
		}
		if yyv3861 == nil {
			r.EncodeNil()
		} else {
			yym3863 := z.EncBinary()
			_ = yym3863
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3861))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3864 := *v
	yyl3864 := r.ReadMapStart()
	yybh3864 := z.DecBasicHandle()
	if yyv3864 == nil {
		yyrl3864, _ := z.DecInferLen(yyl3864, yybh3864.MaxInitLen, 40)
		yyv3864 = make(map[string][]uint8, yyrl3864)
		*v = yyv3864
	}
	var yymk3864 string
	var yymv3864 []uint8
	var yymg3864 bool
	if yybh3864.MapValueReset {
		yymg3864 = true
	}
	if yyl3864 > 0 {
		for yyj3864 := 0; yyj3864 < yyl3864; yyj3864++ {
			if r.TryDecodeAsNil() {
				yymk3864 = ""
			} else {
				yymk3864 = string(r.DecodeString())
			}

			if yymg3864 {
				yymv3864 = yyv3864[yymk3864]
			} else {
				yymv3864 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3864 = nil
			} else {
				yyv3866 := &yymv3864
				yym3867 := z.DecBinary()
				_ = yym3867
				if false {
				} else {
					*yyv3866 = r.DecodeBytes(*(*[]byte)(yyv3866), false, false)
				}
			}

			if yyv3864 != nil {
				yyv3864[yymk3864] = yymv3864
			}
		}
	} else if yyl3864 < 0 {
		for yyj3864 := 0; !r.CheckBreak(); yyj3864++ {
			if r.TryDecodeAsNil() {
				yymk3864 = ""
			} else {
				yymk3864 = string(r.DecodeString())
			}

			if yymg3864 {
				yymv3864 = yyv3864[yymk3864]
			} else {
				yymv3864 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3864 = nil
			} else {
				yyv3869 := &yymv3864
				yym3870 := z.DecBinary()
				_ = yym3870
				if false {
				} else {
					*yyv3869 = r.DecodeBytes(*(*[]byte)(yyv3869), false, false)
				}
			}

			if yyv3864 != nil {
				yyv3864[yymk3864] = yymv3864
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3871 := range v {
		yy3872 := &yyv3871
		yy3872.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3873 := *v
	yyh3873, yyl3873 := z.DecSliceHelperStart()

	var yyrr3873, yyrl3873 int
	var yyc3873, yyrt3873 bool
	_, _, _ = yyc3873, yyrt3873, yyrl3873
	yyrr3873 = yyl3873

	if yyv3873 == nil {
		if yyrl3873, yyrt3873 = z.DecInferLen(yyl3873, z.DecBasicHandle().MaxInitLen, 232); yyrt3873 {
			yyrr3873 = yyrl3873
		}
		yyv3873 = make([]Secret, yyrl3873)
		yyc3873 = true
	}

	if yyl3873 == 0 {
		if len(yyv3873) != 0 {
			yyv3873 = yyv3873[:0]
			yyc3873 = true
		}
	} else if yyl3873 > 0 {

		if yyl3873 > cap(yyv3873) {
			yyrl3873, yyrt3873 = z.DecInferLen(yyl3873, z.DecBasicHandle().MaxInitLen, 232)
			yyv3873 = make([]Secret, yyrl3873)
			yyc3873 = true

			yyrr3873 = len(yyv3873)
		} else if yyl3873 != len(yyv3873) {
			yyv3873 = yyv3873[:yyl3873]
			yyc3873 = true
		}
		yyj3873 := 0
		for ; yyj3873 < yyrr3873; yyj3873++ {
			if r.TryDecodeAsNil() {
				yyv3873[yyj3873] = Secret{}
			} else {
				yyv3874 := &yyv3873[yyj3873]
				yyv3874.CodecDecodeSelf(d)
			}

		}
		if yyrt3873 {
			for ; yyj3873 < yyl3873; yyj3873++ {
				yyv3873 = append(yyv3873, Secret{})
				if r.TryDecodeAsNil() {
					yyv3873[yyj3873] = Secret{}
				} else {
					yyv3875 := &yyv3873[yyj3873]
					yyv3875.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3873 := 0; !r.CheckBreak(); yyj3873++ {
			if yyj3873 >= len(yyv3873) {
				yyv3873 = append(yyv3873, Secret{}) // var yyz3873 Secret
				yyc3873 = true
			}

			if yyj3873 < len(yyv3873) {
				if r.TryDecodeAsNil() {
					yyv3873[yyj3873] = Secret{}
				} else {
					yyv3876 := &yyv3873[yyj3873]
					yyv3876.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3873.End()
	}
	if yyc3873 {
		*v = yyv3873
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3877 := range v {
		yy3878 := &yyv3877
		yy3878.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3879 := *v
	yyh3879, yyl3879 := z.DecSliceHelperStart()

	var yyrr3879, yyrl3879 int
	var yyc3879, yyrt3879 bool
	_, _, _ = yyc3879, yyrt3879, yyrl3879
	yyrr3879 = yyl3879

	if yyv3879 == nil {
		if yyrl3879, yyrt3879 = z.DecInferLen(yyl3879, z.DecBasicHandle().MaxInitLen, 64); yyrt3879 {
			yyrr3879 = yyrl3879
		}
		yyv3879 = make([]ComponentCondition, yyrl3879)
		yyc3879 = true
	}

	if yyl3879 == 0 {
		if len(yyv3879) != 0 {
			yyv3879 = yyv3879[:0]
			yyc3879 = true
		}
	} else if yyl3879 > 0 {

		if yyl3879 > cap(yyv3879) {
			yyrl3879, yyrt3879 = z.DecInferLen(yyl3879, z.DecBasicHandle().MaxInitLen, 64)
			yyv3879 = make([]ComponentCondition, yyrl3879)
			yyc3879 = true

			yyrr3879 = len(yyv3879)
		} else if yyl3879 != len(yyv3879) {
			yyv3879 = yyv3879[:yyl3879]
			yyc3879 = true
		}
		yyj3879 := 0
		for ; yyj3879 < yyrr3879; yyj3879++ {
			if r.TryDecodeAsNil() {
				yyv3879[yyj3879] = ComponentCondition{}
			} else {
				yyv3880 := &yyv3879[yyj3879]
				yyv3880.CodecDecodeSelf(d)
			}

		}
		if yyrt3879 {
			for ; yyj3879 < yyl3879; yyj3879++ {
				yyv3879 = append(yyv3879, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3879[yyj3879] = ComponentCondition{}
				} else {
					yyv3881 := &yyv3879[yyj3879]
					yyv3881.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3879 := 0; !r.CheckBreak(); yyj3879++ {
			if yyj3879 >= len(yyv3879) {
				yyv3879 = append(yyv3879, ComponentCondition{}) // var yyz3879 ComponentCondition
				yyc3879 = true
			}

			if yyj3879 < len(yyv3879) {
				if r.TryDecodeAsNil() {
					yyv3879[yyj3879] = ComponentCondition{}
				} else {
					yyv3882 := &yyv3879[yyj3879]
					yyv3882.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3879.End()
	}
	if yyc3879 {
		*v = yyv3879
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3883 := range v {
		yy3884 := &yyv3883
		yy3884.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3885 := *v
	yyh3885, yyl3885 := z.DecSliceHelperStart()

	var yyrr3885, yyrl3885 int
	var yyc3885, yyrt3885 bool
	_, _, _ = yyc3885, yyrt3885, yyrl3885
	yyrr3885 = yyl3885

	if yyv3885 == nil {
		if yyrl3885, yyrt3885 = z.DecInferLen(yyl3885, z.DecBasicHandle().MaxInitLen, 232); yyrt3885 {
			yyrr3885 = yyrl3885
		}
		yyv3885 = make([]ComponentStatus, yyrl3885)
		yyc3885 = true
	}

	if yyl3885 == 0 {
		if len(yyv3885) != 0 {
			yyv3885 = yyv3885[:0]
			yyc3885 = true
		}
	} else if yyl3885 > 0 {

		if yyl3885 > cap(yyv3885) {
			yyrl3885, yyrt3885 = z.DecInferLen(yyl3885, z.DecBasicHandle().MaxInitLen, 232)
			yyv3885 = make([]ComponentStatus, yyrl3885)
			yyc3885 = true

			yyrr3885 = len(yyv3885)
		} else if yyl3885 != len(yyv3885) {
			yyv3885 = yyv3885[:yyl3885]
			yyc3885 = true
		}
		yyj3885 := 0
		for ; yyj3885 < yyrr3885; yyj3885++ {
			if r.TryDecodeAsNil() {
				yyv3885[yyj3885] = ComponentStatus{}
			} else {
				yyv3886 := &yyv3885[yyj3885]
				yyv3886.CodecDecodeSelf(d)
			}

		}
		if yyrt3885 {
			for ; yyj3885 < yyl3885; yyj3885++ {
				yyv3885 = append(yyv3885, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3885[yyj3885] = ComponentStatus{}
				} else {
					yyv3887 := &yyv3885[yyj3885]
					yyv3887.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3885 := 0; !r.CheckBreak(); yyj3885++ {
			if yyj3885 >= len(yyv3885) {
				yyv3885 = append(yyv3885, ComponentStatus{}) // var yyz3885 ComponentStatus
				yyc3885 = true
			}

			if yyj3885 < len(yyv3885) {
				if r.TryDecodeAsNil() {
					yyv3885[yyj3885] = ComponentStatus{}
				} else {
					yyv3888 := &yyv3885[yyj3885]
					yyv3888.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3885.End()
	}
	if yyc3885 {
		*v = yyv3885
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3889 := range v {
		yy3890 := &yyv3889
		yy3890.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3891 := *v
	yyh3891, yyl3891 := z.DecSliceHelperStart()

	var yyrr3891, yyrl3891 int
	var yyc3891, yyrt3891 bool
	_, _, _ = yyc3891, yyrt3891, yyrl3891
	yyrr3891 = yyl3891

	if yyv3891 == nil {
		if yyrl3891, yyrt3891 = z.DecInferLen(yyl3891, z.DecBasicHandle().MaxInitLen, 48); yyrt3891 {
			yyrr3891 = yyrl3891
		}
		yyv3891 = make([]DownwardAPIVolumeFile, yyrl3891)
		yyc3891 = true
	}

	if yyl3891 == 0 {
		if len(yyv3891) != 0 {
			yyv3891 = yyv3891[:0]
			yyc3891 = true
		}
	} else if yyl3891 > 0 {

		if yyl3891 > cap(yyv3891) {
			yyrl3891, yyrt3891 = z.DecInferLen(yyl3891, z.DecBasicHandle().MaxInitLen, 48)
			yyv3891 = make([]DownwardAPIVolumeFile, yyrl3891)
			yyc3891 = true

			yyrr3891 = len(yyv3891)
		} else if yyl3891 != len(yyv3891) {
			yyv3891 = yyv3891[:yyl3891]
			yyc3891 = true
		}
		yyj3891 := 0
		for ; yyj3891 < yyrr3891; yyj3891++ {
			if r.TryDecodeAsNil() {
				yyv3891[yyj3891] = DownwardAPIVolumeFile{}
			} else {
				yyv3892 := &yyv3891[yyj3891]
				yyv3892.CodecDecodeSelf(d)
			}

		}
		if yyrt3891 {
			for ; yyj3891 < yyl3891; yyj3891++ {
				yyv3891 = append(yyv3891, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3891[yyj3891] = DownwardAPIVolumeFile{}
				} else {
					yyv3893 := &yyv3891[yyj3891]
					yyv3893.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3891 := 0; !r.CheckBreak(); yyj3891++ {
			if yyj3891 >= len(yyv3891) {
				yyv3891 = append(yyv3891, DownwardAPIVolumeFile{}) // var yyz3891 DownwardAPIVolumeFile
				yyc3891 = true
			}

			if yyj3891 < len(yyv3891) {
				if r.TryDecodeAsNil() {
					yyv3891[yyj3891] = DownwardAPIVolumeFile{}
				} else {
					yyv3894 := &yyv3891[yyj3891]
					yyv3894.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3891.End()
	}
	if yyc3891 {
		*v = yyv3891
	}

}
